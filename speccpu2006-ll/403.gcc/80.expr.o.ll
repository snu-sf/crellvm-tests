; ModuleID = 'expr.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.insn_data = type { i8*, i8*, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.optab = type { i32, [59 x %struct.anon.3] }
%struct.anon.3 = type { i32, %struct.rtx_def* }
%struct.processor_costs = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, [3 x i32], [3 x i32], i32, [2 x i32], [2 x i32], i32, [3 x i32], [3 x i32], i32, i32, i32 }
%struct.lang_hooks = type { i8*, i64, void ()*, i32 (i32, i8**)*, void ()*, i8* (i8*)*, void ()*, void ()*, i64 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (%struct.rtx_def*, %union.tree_node*)*, i32 (%union.tree_node*)*, i8, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (i32)*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_tree_dump }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.lang_hooks_for_tree_inlining = type { %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, i8*)*, i32 (%union.tree_node**)*, i32 (%union.tree_node*)*, %union.tree_node* (i8*, %union.tree_node*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8*, i32*, i8*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_tree_dump = type { i32 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.realvaluetype = type { [3 x i64] }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.move_by_pieces = type { %struct.rtx_def*, %struct.rtx_def*, i32, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i64, i64, i32 }
%struct.mem_attrs = type { i64, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.anon.0 = type { i32 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.rtx_def*, %struct.anon }
%struct.anon = type { i64, i64 }
%struct.tree_real_cst = type { %struct.tree_common, %struct.rtx_def*, %struct.realvaluetype }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i32, i8* }
%struct.nesting = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_string = type { %struct.tree_common, %struct.rtx_def*, i32, i8* }
%struct.store_by_pieces = type { %struct.rtx_def*, %struct.rtx_def*, i32, i32, i64, i64, %struct.rtx_def* (i8*, i64, i32)*, i8*, i32 }
%struct.tree_complex = type { %struct.tree_common, %struct.rtx_def*, %union.tree_node*, %union.tree_node* }
%struct.tree_vector = type { %struct.tree_common, %struct.rtx_def*, %union.tree_node* }

@global_rtl = external global [11 x %struct.rtx_def*], align 16
@direct_store = internal global [59 x i8] zeroinitializer, align 16
@direct_load = internal global [59 x i8] zeroinitializer, align 16
@cfun = external global %struct.function*, align 8
@.str = private unnamed_addr constant [7 x i8] c"expr.c\00", align 1
@__FUNCTION__.finish_expr_for_function = private unnamed_addr constant [25 x i8] c"finish_expr_for_function\00", align 1
@mode_class = external constant [59 x i32], align 16
@__FUNCTION__.convert_move = private unnamed_addr constant [13 x i8] c"convert_move\00", align 1
@mode_size = external constant [59 x i8], align 16
@mode_bitsize = external constant [59 x i16], align 16
@target_flags = external global i32, align 4
@libfunc_table = external global [97 x %struct.rtx_def*], align 16
@optimize = external global i32, align 4
@word_mode = external global i32, align 4
@const_int_rtx = external global [129 x %struct.rtx_def*], align 16
@insn_data = external constant [0 x %struct.insn_data], align 8
@flag_force_mem = external global i32, align 4
@mode_wider_mode = external constant [59 x i8], align 16
@class_narrowest_mode = external constant [9 x i32], align 16
@optab_table = external global [49 x %struct.optab*], align 16
@__FUNCTION__.move_by_pieces = private unnamed_addr constant [15 x i8] c"move_by_pieces\00", align 1
@emit_block_move.fn = internal global %union.tree_node* null, align 8
@__FUNCTION__.emit_block_move = private unnamed_addr constant [16 x i8] c"emit_block_move\00", align 1
@optimize_size = external global i32, align 4
@ix86_cost = external global %struct.processor_costs*, align 8
@volatile_ok = external global i32, align 4
@movstr_optab = common global [59 x i32] zeroinitializer, align 16
@mode_mask_array = external constant [59 x i64], align 16
@sizetype_tab = external global [6 x %union.tree_node*], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"memcpy\00", align 1
@global_trees = external global [51 x %union.tree_node*], align 16
@__FUNCTION__.move_block_from_reg = private unnamed_addr constant [20 x i8] c"move_block_from_reg\00", align 1
@__FUNCTION__.emit_group_load = private unnamed_addr constant [16 x i8] c"emit_group_load\00", align 1
@__FUNCTION__.emit_group_store = private unnamed_addr constant [17 x i8] c"emit_group_store\00", align 1
@__FUNCTION__.use_reg = private unnamed_addr constant [8 x i8] c"use_reg\00", align 1
@__FUNCTION__.use_regs = private unnamed_addr constant [9 x i8] c"use_regs\00", align 1
@reg_raw_mode = external global [53 x i32], align 16
@__FUNCTION__.can_store_by_pieces = private unnamed_addr constant [20 x i8] c"can_store_by_pieces\00", align 1
@__FUNCTION__.store_by_pieces = private unnamed_addr constant [16 x i8] c"store_by_pieces\00", align 1
@clear_storage.fn = internal global %union.tree_node* null, align 8
@const_tiny_rtx = external global [3 x [59 x %struct.rtx_def*]], align 16
@clrstr_optab = common global [59 x i32] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [7 x i8] c"memset\00", align 1
@integer_types = external global [11 x %union.tree_node*], align 16
@__FUNCTION__.emit_move_insn = private unnamed_addr constant [15 x i8] c"emit_move_insn\00", align 1
@flag_force_addr = external global i32, align 4
@__FUNCTION__.emit_move_insn_1 = private unnamed_addr constant [17 x i8] c"emit_move_insn_1\00", align 1
@mode_unit_size = external constant [59 x i8], align 16
@reload_in_progress = external global i32, align 4
@reload_completed = external global i32, align 4
@.str.3 = private unnamed_addr constant [52 x i8] c"function using short complex types cannot be inline\00", align 1
@ptr_mode = external global i32, align 4
@__FUNCTION__.emit_push_insn = private unnamed_addr constant [15 x i8] c"emit_push_insn\00", align 1
@__FUNCTION__.expand_assignment = private unnamed_addr constant [18 x i8] c"expand_assignment\00", align 1
@tree_code_type = external global [256 x i8], align 16
@pic_offset_table_rtx = external global %struct.rtx_def*, align 8
@safe_from_p.save_expr_list = internal global %union.tree_node* null, align 8
@__FUNCTION__.safe_from_p = private unnamed_addr constant [12 x i8] c"safe_from_p\00", align 1
@lang_hooks = external constant %struct.lang_hooks, align 8
@placeholder_list = internal global %union.tree_node* null, align 8
@cse_not_expected = common global i32 0, align 4
@current_function_decl = external global %union.tree_node*, align 8
@inline_function_decl = external global %union.tree_node*, align 8
@.str.4 = private unnamed_addr constant [39 x i8] c"prior parameter's size depends on `%s'\00", align 1
@__FUNCTION__.expand_expr = private unnamed_addr constant [12 x i8] c"expand_expr\00", align 1
@input_filename = external global i8*, align 8
@lineno = external global i32, align 4
@.str.5 = private unnamed_addr constant [34 x i8] c"returned value in block_exit_expr\00", align 1
@rtx_class = external constant [153 x i8], align 16
@byte_mode = external global i32, align 4
@lang_expand_expr = external global %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)*, align 8
@flag_trapv = external global i32, align 4
@flag_unsafe_math_optimizations = external global i32, align 4
@dconst1 = external global %struct.realvaluetype, align 8
@ix86_branch_cost = external global i32, align 4
@flag_omit_frame_pointer = external global i32, align 4
@flag_no_inline = external global i32, align 4
@flag_inline_functions = external global i32, align 4
@__FUNCTION__.do_jump = private unnamed_addr constant [8 x i8] c"do_jump\00", align 1
@const_true_rtx = external global %struct.rtx_def*, align 8
@__FUNCTION__.move_by_pieces_ninsns = private unnamed_addr constant [22 x i8] c"move_by_pieces_ninsns\00", align 1
@__FUNCTION__.store_by_pieces_1 = private unnamed_addr constant [18 x i8] c"store_by_pieces_1\00", align 1
@flag_optimize_sibling_calls = external global i32, align 4
@__FUNCTION__.store_field = private unnamed_addr constant [12 x i8] c"store_field\00", align 1
@dconst0 = external global %struct.realvaluetype, align 8
@__FUNCTION__.store_constructor = private unnamed_addr constant [18 x i8] c"store_constructor\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"__setbits\00", align 1
@__FUNCTION__.do_store_flag = private unnamed_addr constant [14 x i8] c"do_store_flag\00", align 1
@setcc_gen_code = external global [153 x i32], align 16
@bcc_gen_fctn = external global [153 x %struct.rtx_def* (%struct.rtx_def*)*], align 16
@flag_pic = external global i32, align 4

; Function Attrs: nounwind uwtable
define void @init_expr_once() #0 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %num_clobbers = alloca i32, align 4
  %mem = alloca %struct.rtx_def*, align 8
  %mem1 = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 0, %struct.rtx_def* %0)
  store %struct.rtx_def* %call, %struct.rtx_def** %mem, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 0, %struct.rtx_def* %1)
  store %struct.rtx_def* %call1, %struct.rtx_def** %mem1, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* null, %struct.rtx_def* null)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  store %struct.rtx_def* %call3, %struct.rtx_def** %insn, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %pat, align 8
  store i32 0, i32* %mode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.82, %entry
  %4 = load i32, i32* %mode, align 4
  %cmp = icmp slt i32 %4, 59
  br i1 %cmp, label %for.body, label %for.end.83

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_store, i32 0, i64 %idxprom
  store i8 0, i8* %arrayidx4, align 1
  %6 = load i32, i32* %mode, align 4
  %idxprom5 = sext i32 %6 to i64
  %arrayidx6 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_load, i32 0, i64 %idxprom5
  store i8 0, i8* %arrayidx6, align 1
  %7 = load i32, i32* %mode, align 4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load = load i32, i32* %9, align 8
  %bf.value = and i32 %7, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %9, align 8
  %10 = load i32, i32* %mode, align 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mem1, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load7 = load i32, i32* %12, align 8
  %bf.value8 = and i32 %10, 255
  %bf.shl9 = shl i32 %bf.value8, 16
  %bf.clear10 = and i32 %bf.load7, -16711681
  %bf.set11 = or i32 %bf.clear10, %bf.shl9
  store i32 %bf.set11, i32* %12, align 8
  %13 = load i32, i32* %mode, align 4
  %cmp12 = icmp ne i32 %13, 0
  br i1 %cmp12, label %land.lhs.true, label %if.end.81

land.lhs.true:                                    ; preds = %for.body
  %14 = load i32, i32* %mode, align 4
  %cmp13 = icmp ne i32 %14, 51
  br i1 %cmp13, label %if.then, label %if.end.81

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %regno, align 4
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc, %if.then
  %15 = load i32, i32* %regno, align 4
  %cmp15 = icmp slt i32 %15, 53
  br i1 %cmp15, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.14
  %16 = load i32, i32* %mode, align 4
  %idxprom16 = sext i32 %16 to i64
  %arrayidx17 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_load, i32 0, i64 %idxprom16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv = sext i8 %17 to i32
  %cmp18 = icmp eq i32 %conv, 0
  br i1 %cmp18, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %18 = load i32, i32* %mode, align 4
  %idxprom20 = sext i32 %18 to i64
  %arrayidx21 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_store, i32 0, i64 %idxprom20
  %19 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %19 to i32
  %cmp23 = icmp eq i32 %conv22, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %20 = phi i1 [ true, %land.rhs ], [ %cmp23, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %for.cond.14
  %21 = phi i1 [ false, %for.cond.14 ], [ %20, %lor.end ]
  br i1 %21, label %for.body.25, label %for.end

for.body.25:                                      ; preds = %land.end
  %22 = load i32, i32* %regno, align 4
  %23 = load i32, i32* %mode, align 4
  %call26 = call i32 @ix86_hard_regno_mode_ok(i32 %22, i32 %23)
  %tobool = icmp ne i32 %call26, 0
  br i1 %tobool, label %if.end, label %if.then.27

if.then.27:                                       ; preds = %for.body.25
  br label %for.inc

if.end:                                           ; preds = %for.body.25
  %24 = load i32, i32* %mode, align 4
  %25 = load i32, i32* %regno, align 4
  %call28 = call %struct.rtx_def* @gen_rtx_REG(i32 %24, i32 %25)
  store %struct.rtx_def* %call28, %struct.rtx_def** %reg, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 1
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  store %struct.rtx_def* %26, %struct.rtx_def** %rtx31, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  store %struct.rtx_def* %28, %struct.rtx_def** %rtx34, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call35 = call i32 @recog(%struct.rtx_def* %30, %struct.rtx_def* %31, i32* %num_clobbers)
  %cmp36 = icmp sge i32 %call35, 0
  br i1 %cmp36, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %if.end
  %32 = load i32, i32* %mode, align 4
  %idxprom39 = sext i32 %32 to i64
  %arrayidx40 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_load, i32 0, i64 %idxprom39
  store i8 1, i8* %arrayidx40, align 1
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %if.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %mem1, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 1
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  store %struct.rtx_def* %33, %struct.rtx_def** %rtx44, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  store %struct.rtx_def* %35, %struct.rtx_def** %rtx47, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call48 = call i32 @recog(%struct.rtx_def* %37, %struct.rtx_def* %38, i32* %num_clobbers)
  %cmp49 = icmp sge i32 %call48, 0
  br i1 %cmp49, label %if.then.51, label %if.end.54

if.then.51:                                       ; preds = %if.end.41
  %39 = load i32, i32* %mode, align 4
  %idxprom52 = sext i32 %39 to i64
  %arrayidx53 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_load, i32 0, i64 %idxprom52
  store i8 1, i8* %arrayidx53, align 1
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.51, %if.end.41
  %40 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 1
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  store %struct.rtx_def* %40, %struct.rtx_def** %rtx57, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 0
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  store %struct.rtx_def* %42, %struct.rtx_def** %rtx60, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call61 = call i32 @recog(%struct.rtx_def* %44, %struct.rtx_def* %45, i32* %num_clobbers)
  %cmp62 = icmp sge i32 %call61, 0
  br i1 %cmp62, label %if.then.64, label %if.end.67

if.then.64:                                       ; preds = %if.end.54
  %46 = load i32, i32* %mode, align 4
  %idxprom65 = sext i32 %46 to i64
  %arrayidx66 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_store, i32 0, i64 %idxprom65
  store i8 1, i8* %arrayidx66, align 1
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.64, %if.end.54
  %47 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 1
  %rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**
  store %struct.rtx_def* %47, %struct.rtx_def** %rtx70, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %mem1, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %fld71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i32 0, i64 0
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  store %struct.rtx_def* %49, %struct.rtx_def** %rtx73, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call74 = call i32 @recog(%struct.rtx_def* %51, %struct.rtx_def* %52, i32* %num_clobbers)
  %cmp75 = icmp sge i32 %call74, 0
  br i1 %cmp75, label %if.then.77, label %if.end.80

if.then.77:                                       ; preds = %if.end.67
  %53 = load i32, i32* %mode, align 4
  %idxprom78 = sext i32 %53 to i64
  %arrayidx79 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_store, i32 0, i64 %idxprom78
  store i8 1, i8* %arrayidx79, align 1
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.77, %if.end.67
  br label %for.inc

for.inc:                                          ; preds = %if.end.80, %if.then.27
  %54 = load i32, i32* %regno, align 4
  %inc = add nsw i32 %54, 1
  store i32 %inc, i32* %regno, align 4
  br label %for.cond.14

for.end:                                          ; preds = %land.end
  br label %if.end.81

if.end.81:                                        ; preds = %for.end, %land.lhs.true, %for.body
  br label %for.inc.82

for.inc.82:                                       ; preds = %if.end.81
  %55 = load i32, i32* %mode, align 4
  %add = add nsw i32 %55, 1
  store i32 %add, i32* %mode, align 4
  br label %for.cond

for.end.83:                                       ; preds = %for.cond
  call void @end_sequence()
  ret void
}

declare void @start_sequence() #1

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @ix86_hard_regno_mode_ok(i32, i32) #1

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

declare i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #1

declare void @end_sequence() #1

; Function Attrs: nounwind uwtable
define void @init_expr() #0 {
entry:
  %call = call noalias i8* @xmalloc(i64 48)
  %0 = bitcast i8* %call to %struct.expr_status*
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 2
  store %struct.expr_status* %0, %struct.expr_status** %expr, align 8
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %expr1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 2
  %3 = load %struct.expr_status*, %struct.expr_status** %expr1, align 8
  %x_pending_chain = getelementptr inbounds %struct.expr_status, %struct.expr_status* %3, i32 0, i32 6
  store %struct.rtx_def* null, %struct.rtx_def** %x_pending_chain, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %expr2 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 2
  %5 = load %struct.expr_status*, %struct.expr_status** %expr2, align 8
  %x_pending_stack_adjust = getelementptr inbounds %struct.expr_status, %struct.expr_status* %5, i32 0, i32 0
  store i32 0, i32* %x_pending_stack_adjust, align 4
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %expr3 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 2
  %7 = load %struct.expr_status*, %struct.expr_status** %expr3, align 8
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status, %struct.expr_status* %7, i32 0, i32 2
  store i32 0, i32* %x_stack_pointer_delta, align 4
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %expr4 = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 2
  %9 = load %struct.expr_status*, %struct.expr_status** %expr4, align 8
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status, %struct.expr_status* %9, i32 0, i32 1
  store i32 0, i32* %x_inhibit_defer_pop, align 4
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %expr5 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 2
  %11 = load %struct.expr_status*, %struct.expr_status** %expr5, align 8
  %x_saveregs_value = getelementptr inbounds %struct.expr_status, %struct.expr_status* %11, i32 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %x_saveregs_value, align 8
  %12 = load %struct.function*, %struct.function** @cfun, align 8
  %expr6 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 2
  %13 = load %struct.expr_status*, %struct.expr_status** %expr6, align 8
  %x_apply_args_value = getelementptr inbounds %struct.expr_status, %struct.expr_status* %13, i32 0, i32 4
  store %struct.rtx_def* null, %struct.rtx_def** %x_apply_args_value, align 8
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %expr7 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 2
  %15 = load %struct.expr_status*, %struct.expr_status** %expr7, align 8
  %x_forced_labels = getelementptr inbounds %struct.expr_status, %struct.expr_status* %15, i32 0, i32 5
  store %struct.rtx_def* null, %struct.rtx_def** %x_forced_labels, align 8
  ret void
}

declare noalias i8* @xmalloc(i64) #1

; Function Attrs: nounwind uwtable
define void @mark_expr_status(%struct.expr_status* %p) #0 {
entry:
  %p.addr = alloca %struct.expr_status*, align 8
  %r__ = alloca %struct.rtx_def*, align 8
  %r__5 = alloca %struct.rtx_def*, align 8
  %r__14 = alloca %struct.rtx_def*, align 8
  store %struct.expr_status* %p, %struct.expr_status** %p.addr, align 8
  %0 = load %struct.expr_status*, %struct.expr_status** %p.addr, align 8
  %cmp = icmp eq %struct.expr_status* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.end.21

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %1 = load %struct.expr_status*, %struct.expr_status** %p.addr, align 8
  %x_saveregs_value = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1, i32 0, i32 3
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x_saveregs_value, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %r__, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp1 = icmp ne %struct.rtx_def* %3, null
  br i1 %cmp1, label %land.lhs.true, label %if.end.3

land.lhs.true:                                    ; preds = %do.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %5 = bitcast %struct.rtx_def* %4 to i8*
  %call = call i32 @ggc_set_mark(i8* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %6)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.3
  br label %do.body.4

do.body.4:                                        ; preds = %do.end
  %7 = load %struct.expr_status*, %struct.expr_status** %p.addr, align 8
  %x_apply_args_value = getelementptr inbounds %struct.expr_status, %struct.expr_status* %7, i32 0, i32 4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x_apply_args_value, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %r__5, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %r__5, align 8
  %cmp6 = icmp ne %struct.rtx_def* %9, null
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.11

land.lhs.true.7:                                  ; preds = %do.body.4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r__5, align 8
  %11 = bitcast %struct.rtx_def* %10 to i8*
  %call8 = call i32 @ggc_set_mark(i8* %11)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true.7
  %12 = load %struct.rtx_def*, %struct.rtx_def** %r__5, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %12)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %land.lhs.true.7, %do.body.4
  br label %do.end.12

do.end.12:                                        ; preds = %if.end.11
  br label %do.body.13

do.body.13:                                       ; preds = %do.end.12
  %13 = load %struct.expr_status*, %struct.expr_status** %p.addr, align 8
  %x_forced_labels = getelementptr inbounds %struct.expr_status, %struct.expr_status* %13, i32 0, i32 5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x_forced_labels, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %r__14, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %r__14, align 8
  %cmp15 = icmp ne %struct.rtx_def* %15, null
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.20

land.lhs.true.16:                                 ; preds = %do.body.13
  %16 = load %struct.rtx_def*, %struct.rtx_def** %r__14, align 8
  %17 = bitcast %struct.rtx_def* %16 to i8*
  %call17 = call i32 @ggc_set_mark(i8* %17)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true.16
  %18 = load %struct.rtx_def*, %struct.rtx_def** %r__14, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %18)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %land.lhs.true.16, %do.body.13
  br label %do.end.21

do.end.21:                                        ; preds = %if.then, %if.end.20
  ret void
}

declare i32 @ggc_set_mark(i8*) #1

declare void @ggc_mark_rtx_children(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @free_expr_status(%struct.function* %f) #0 {
entry:
  %f.addr = alloca %struct.function*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  %0 = load %struct.function*, %struct.function** %f.addr, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 2
  %1 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %2 = bitcast %struct.expr_status* %1 to i8*
  call void @free(i8* %2) #5
  %3 = load %struct.function*, %struct.function** %f.addr, align 8
  %expr1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 2
  store %struct.expr_status* null, %struct.expr_status** %expr1, align 8
  ret void
}

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind uwtable
define void @finish_expr_for_function() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 2
  %1 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_pending_chain = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1, i32 0, i32 6
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x_pending_chain, align 8
  %tobool = icmp ne %struct.rtx_def* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 313, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__FUNCTION__.finish_expr_for_function, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #3

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %x, i32 %modify) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %modify.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %y = alloca %struct.rtx_def*, align 8
  %new = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %new0 = alloca %struct.rtx_def*, align 8
  %new1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %modify, i32* %modify.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %code, align 4
  %cmp = icmp ne i32 %2, 71
  br i1 %cmp, label %if.then, label %if.end.84

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %code, align 4
  %cmp1 = icmp eq i32 %3, 66
  br i1 %cmp1, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load2, 16
  %bf.clear3 = and i32 %bf.lshr, 255
  %cmp4 = icmp ne i32 %bf.clear3, 51
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.36

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 71
  br i1 %cmp8, label %land.lhs.true.9, label %if.end.36

land.lhs.true.9:                                  ; preds = %land.lhs.true.5
  %9 = load i32, i32* %modify.addr, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.end.36, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true.9
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 0
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %y, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %call = call %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def* %12, %struct.rtx_def* %14)
  store %struct.rtx_def* %call, %struct.rtx_def** %new, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %tobool20 = icmp ne %struct.rtx_def* %16, null
  br i1 %tobool20, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %if.then.10
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load22 = load i32, i32* %18, align 8
  %bf.lshr23 = lshr i32 %bf.load22, 16
  %bf.clear24 = and i32 %bf.lshr23, 255
  %call25 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear24)
  store %struct.rtx_def* %call25, %struct.rtx_def** %temp, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call26 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %19, %struct.rtx_def* %20)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 1
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %call30 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call26, %struct.rtx_def* %22)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %if.then.10
  %24 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 0
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  %call34 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %26)
  %call35 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %24, %struct.rtx_def* %call34)
  store %struct.rtx_def* %call35, %struct.rtx_def** %retval
  br label %return

if.end.36:                                        ; preds = %land.lhs.true.9, %land.lhs.true.5, %land.lhs.true, %if.then
  %27 = load i32, i32* %code, align 4
  %cmp37 = icmp eq i32 %27, 66
  br i1 %cmp37, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.end.36
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 0
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx41, align 8
  %call42 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %29, i32 0)
  store %struct.rtx_def* %call42, %struct.rtx_def** %tem, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx45, align 8
  %cmp46 = icmp ne %struct.rtx_def* %30, %32
  br i1 %cmp46, label %if.then.47, label %if.end.52

if.then.47:                                       ; preds = %if.then.38
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call48 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %33)
  store %struct.rtx_def* %call48, %struct.rtx_def** %x.addr, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  store %struct.rtx_def* %34, %struct.rtx_def** %rtx51, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.47, %if.then.38
  br label %if.end.83

if.else:                                          ; preds = %if.end.36
  %36 = load i32, i32* %code, align 4
  %cmp53 = icmp eq i32 %36, 75
  br i1 %cmp53, label %if.then.55, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %37 = load i32, i32* %code, align 4
  %cmp54 = icmp eq i32 %37, 78
  br i1 %cmp54, label %if.then.55, label %if.end.82

if.then.55:                                       ; preds = %lor.lhs.false, %if.else
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 0
  %rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx58, align 8
  %call59 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %39, i32 0)
  store %struct.rtx_def* %call59, %struct.rtx_def** %new0, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 1
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx62, align 8
  %call63 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %41, i32 0)
  store %struct.rtx_def* %call63, %struct.rtx_def** %new1, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %new0, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 0
  %rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx66, align 8
  %cmp67 = icmp ne %struct.rtx_def* %42, %44
  br i1 %cmp67, label %if.then.73, label %lor.lhs.false.68

lor.lhs.false.68:                                 ; preds = %if.then.55
  %45 = load %struct.rtx_def*, %struct.rtx_def** %new1, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 1
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx71, align 8
  %cmp72 = icmp ne %struct.rtx_def* %45, %47
  br i1 %cmp72, label %if.then.73, label %if.end.81

if.then.73:                                       ; preds = %lor.lhs.false.68, %if.then.55
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call74 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %48)
  store %struct.rtx_def* %call74, %struct.rtx_def** %x.addr, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %new0, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**
  store %struct.rtx_def* %49, %struct.rtx_def** %rtx77, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %new1, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 1
  %rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**
  store %struct.rtx_def* %51, %struct.rtx_def** %rtx80, align 8
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.73, %lor.lhs.false.68
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %lor.lhs.false
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82, %if.end.52
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %53, %struct.rtx_def** %retval
  br label %return

if.end.84:                                        ; preds = %entry
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 1
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx87, align 8
  %cmp88 = icmp eq %struct.rtx_def* %55, null
  br i1 %cmp88, label %if.then.89, label %if.end.94

if.then.89:                                       ; preds = %if.end.84
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i32 0, i64 0
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx92, align 8
  %call93 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %57)
  store %struct.rtx_def* %call93, %struct.rtx_def** %retval
  br label %return

if.end.94:                                        ; preds = %if.end.84
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 2
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtx97, align 8
  %cmp98 = icmp ne %struct.rtx_def* %59, null
  br i1 %cmp98, label %if.then.99, label %if.end.103

if.then.99:                                       ; preds = %if.end.94
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i32 0, i64 2
  %rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx102, align 8
  store %struct.rtx_def* %61, %struct.rtx_def** %retval
  br label %return

if.end.103:                                       ; preds = %if.end.94
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i32 0, i64 0
  %rtx106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx106, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load107 = load i32, i32* %64, align 8
  %bf.lshr108 = lshr i32 %bf.load107, 16
  %bf.clear109 = and i32 %bf.lshr108, 255
  %call110 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear109)
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 2
  %rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**
  store %struct.rtx_def* %call110, %struct.rtx_def** %rtx113, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 2
  %rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rtx116, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i32 0, i64 0
  %rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx119, align 8
  %call120 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %67, %struct.rtx_def* %69)
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i32 0, i64 1
  %rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtx123, align 8
  %call124 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call120, %struct.rtx_def* %71)
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i32 0, i64 2
  %rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx127, align 8
  store %struct.rtx_def* %73, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.103, %if.then.99, %if.then.89, %if.end.83, %if.end, %if.then.21
  %74 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %74
}

declare %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_reg_rtx(i32) #1

declare %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @replace_equiv_address(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #1

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define i32 @queued_subexp_p(%struct.rtx_def* %x) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %code, align 4
  switch i32 %2, label %sw.default [
    i32 71, label %sw.bb
    i32 66, label %sw.bb.1
    i32 78, label %sw.bb.2
    i32 75, label %sw.bb.2
    i32 76, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call i32 @queued_subexp_p(%struct.rtx_def* %4)
  store i32 %call, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry, %entry, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx5, align 8
  %call6 = call i32 @queued_subexp_p(%struct.rtx_def* %6)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb.2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 1
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  %call10 = call i32 @queued_subexp_p(%struct.rtx_def* %8)
  %tobool11 = icmp ne i32 %call10, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %sw.bb.2
  %9 = phi i1 [ true, %sw.bb.2 ], [ %tobool11, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %lor.end, %sw.bb.1, %sw.bb
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define void @emit_queue() #0 {
entry:
  %p = alloca %struct.rtx_def*, align 8
  %body = alloca %struct.rtx_def*, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 2
  %1 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_pending_chain = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1, i32 0, i32 6
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x_pending_chain, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %p, align 8
  %tobool = icmp ne %struct.rtx_def* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %body, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 3
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtvec_def**
  %9 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %9, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 1
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  store %struct.rtx_def* %10, %struct.rtx_def** %rtx9, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 3
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx12, align 8
  %call = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %13)
  br label %if.end

if.else:                                          ; preds = %while.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 3
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  store %struct.rtx_def* %call16, %struct.rtx_def** %rtx19, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 4
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx22, align 8
  %19 = load %struct.function*, %struct.function** @cfun, align 8
  %expr23 = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 2
  %20 = load %struct.expr_status*, %struct.expr_status** %expr23, align 8
  %x_pending_chain24 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %20, i32 0, i32 6
  store %struct.rtx_def* %18, %struct.rtx_def** %x_pending_chain24, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @convert_move(%struct.rtx_def* %to, %struct.rtx_def* %from, i32 %unsignedp) #0 {
entry:
  %to.addr = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %to_mode = alloca i32, align 4
  %from_mode = alloca i32, align 4
  %to_real = alloca i32, align 4
  %from_real = alloca i32, align 4
  %code = alloca i32, align 4
  %libcall = alloca %struct.rtx_def*, align 8
  %equiv_code = alloca i32, align 4
  %value = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %insns277 = alloca %struct.rtx_def*, align 8
  %lowpart = alloca %struct.rtx_def*, align 8
  %fill_value = alloca %struct.rtx_def*, align 8
  %lowfrom = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %lowpart_mode = alloca i32, align 4
  %nwords = alloca i32, align 4
  %index = alloca i32, align 4
  %subword = alloca %struct.rtx_def*, align 8
  %intermediate = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %shift_amount = alloca %union.tree_node*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %to_mode, align 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  store i32 %bf.clear3, i32* %from_mode, align 4
  %4 = load i32, i32* %to_mode, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %5, 2
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %to_real, align 4
  %6 = load i32, i32* %from_mode, align 4
  %idxprom4 = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom4
  %7 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp eq i32 %7, 2
  %conv7 = zext i1 %cmp6 to i32
  store i32 %conv7, i32* %from_real, align 4
  %8 = load i32, i32* %unsignedp.addr, align 4
  %tobool = icmp ne i32 %8, 0
  %cond = select i1 %tobool, i32 121, i32 120
  store i32 %cond, i32* %equiv_code, align 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %call = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %9, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %to.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call8 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %10, i32 0)
  store %struct.rtx_def* %call8, %struct.rtx_def** %from.addr, align 8
  %11 = load i32, i32* %to_real, align 4
  %12 = load i32, i32* %from_real, align 4
  %cmp9 = icmp ne i32 %11, %12
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 502, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load11 = load i32, i32* %14, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 63
  br i1 %cmp13, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load15 = load i32, i32* %16, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 28
  %bf.clear17 = and i32 %bf.lshr16, 1
  %tobool18 = icmp ne i32 %bf.clear17, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.40

land.lhs.true.19:                                 ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load21 = load i32, i32* %19, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 16
  %bf.clear23 = and i32 %bf.lshr22, 255
  %idxprom24 = sext i32 %bf.clear23 to i64
  %arrayidx25 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom24
  %20 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %20 to i32
  %21 = load i32, i32* %to_mode, align 4
  %idxprom27 = sext i32 %21 to i64
  %arrayidx28 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom27
  %22 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %22 to i32
  %cmp30 = icmp sge i32 %conv26, %conv29
  br i1 %cmp30, label %land.lhs.true.32, label %if.end.40

land.lhs.true.32:                                 ; preds = %land.lhs.true.19
  %23 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load33 = load i32, i32* %24, align 8
  %bf.lshr34 = lshr i32 %bf.load33, 26
  %bf.clear35 = and i32 %bf.lshr34, 1
  %25 = load i32, i32* %unsignedp.addr, align 4
  %cmp36 = icmp eq i32 %bf.clear35, %25
  br i1 %cmp36, label %if.then.38, label %if.end.40

if.then.38:                                       ; preds = %land.lhs.true.32
  %26 = load i32, i32* %to_mode, align 4
  %27 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call39 = call %struct.rtx_def* @gen_lowpart(i32 %26, %struct.rtx_def* %27)
  store %struct.rtx_def* %call39, %struct.rtx_def** %from.addr, align 8
  %28 = load i32, i32* %to_mode, align 4
  store i32 %28, i32* %from_mode, align 4
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.38, %land.lhs.true.32, %land.lhs.true.19, %land.lhs.true, %if.end
  %29 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load41 = load i32, i32* %30, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 63
  br i1 %cmp43, label %land.lhs.true.45, label %if.end.51

land.lhs.true.45:                                 ; preds = %if.end.40
  %31 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load46 = load i32, i32* %32, align 8
  %bf.lshr47 = lshr i32 %bf.load46, 28
  %bf.clear48 = and i32 %bf.lshr47, 1
  %tobool49 = icmp ne i32 %bf.clear48, 0
  br i1 %tobool49, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %land.lhs.true.45
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 515, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.51:                                        ; preds = %land.lhs.true.45, %if.end.40
  %33 = load i32, i32* %to_mode, align 4
  %34 = load i32, i32* %from_mode, align 4
  %cmp52 = icmp eq i32 %33, %34
  br i1 %cmp52, label %if.then.96, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.51
  %35 = load i32, i32* %from_mode, align 4
  %cmp54 = icmp eq i32 %35, 0
  br i1 %cmp54, label %land.lhs.true.56, label %if.end.98

land.lhs.true.56:                                 ; preds = %lor.lhs.false
  %36 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load57 = load i32, i32* %37, align 8
  %bf.clear58 = and i32 %bf.load57, 65535
  %cmp59 = icmp eq i32 %bf.clear58, 67
  br i1 %cmp59, label %if.then.96, label %lor.lhs.false.61

lor.lhs.false.61:                                 ; preds = %land.lhs.true.56
  %38 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load62 = load i32, i32* %39, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 68
  br i1 %cmp64, label %if.then.96, label %lor.lhs.false.66

lor.lhs.false.66:                                 ; preds = %lor.lhs.false.61
  %40 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load67 = load i32, i32* %41, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 54
  br i1 %cmp69, label %if.then.96, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %lor.lhs.false.66
  %42 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load72 = load i32, i32* %43, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  %cmp74 = icmp eq i32 %bf.clear73, 55
  br i1 %cmp74, label %if.then.96, label %lor.lhs.false.76

lor.lhs.false.76:                                 ; preds = %lor.lhs.false.71
  %44 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load77 = load i32, i32* %45, align 8
  %bf.clear78 = and i32 %bf.load77, 65535
  %cmp79 = icmp eq i32 %bf.clear78, 58
  br i1 %cmp79, label %if.then.96, label %lor.lhs.false.81

lor.lhs.false.81:                                 ; preds = %lor.lhs.false.76
  %46 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load82 = load i32, i32* %47, align 8
  %bf.clear83 = and i32 %bf.load82, 65535
  %cmp84 = icmp eq i32 %bf.clear83, 134
  br i1 %cmp84, label %if.then.96, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %lor.lhs.false.81
  %48 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load87 = load i32, i32* %49, align 8
  %bf.clear88 = and i32 %bf.load87, 65535
  %cmp89 = icmp eq i32 %bf.clear88, 56
  br i1 %cmp89, label %if.then.96, label %lor.lhs.false.91

lor.lhs.false.91:                                 ; preds = %lor.lhs.false.86
  %50 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load92 = load i32, i32* %51, align 8
  %bf.clear93 = and i32 %bf.load92, 65535
  %cmp94 = icmp eq i32 %bf.clear93, 140
  br i1 %cmp94, label %if.then.96, label %if.end.98

if.then.96:                                       ; preds = %lor.lhs.false.91, %lor.lhs.false.86, %lor.lhs.false.81, %lor.lhs.false.76, %lor.lhs.false.71, %lor.lhs.false.66, %lor.lhs.false.61, %land.lhs.true.56, %if.end.51
  %52 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call97 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %52, %struct.rtx_def* %53)
  br label %return

if.end.98:                                        ; preds = %lor.lhs.false.91, %lor.lhs.false
  %54 = load i32, i32* %to_mode, align 4
  %idxprom99 = sext i32 %54 to i64
  %arrayidx100 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom99
  %55 = load i32, i32* %arrayidx100, align 4
  %cmp101 = icmp eq i32 %55, 7
  br i1 %cmp101, label %if.then.118, label %lor.lhs.false.103

lor.lhs.false.103:                                ; preds = %if.end.98
  %56 = load i32, i32* %to_mode, align 4
  %idxprom104 = sext i32 %56 to i64
  %arrayidx105 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom104
  %57 = load i32, i32* %arrayidx105, align 4
  %cmp106 = icmp eq i32 %57, 8
  br i1 %cmp106, label %if.then.118, label %lor.lhs.false.108

lor.lhs.false.108:                                ; preds = %lor.lhs.false.103
  %58 = load i32, i32* %from_mode, align 4
  %idxprom109 = sext i32 %58 to i64
  %arrayidx110 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom109
  %59 = load i32, i32* %arrayidx110, align 4
  %cmp111 = icmp eq i32 %59, 7
  br i1 %cmp111, label %if.then.118, label %lor.lhs.false.113

lor.lhs.false.113:                                ; preds = %lor.lhs.false.108
  %60 = load i32, i32* %from_mode, align 4
  %idxprom114 = sext i32 %60 to i64
  %arrayidx115 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom114
  %61 = load i32, i32* %arrayidx115, align 4
  %cmp116 = icmp eq i32 %61, 8
  br i1 %cmp116, label %if.then.118, label %if.end.149

if.then.118:                                      ; preds = %lor.lhs.false.113, %lor.lhs.false.108, %lor.lhs.false.103, %if.end.98
  %62 = load i32, i32* %from_mode, align 4
  %idxprom119 = sext i32 %62 to i64
  %arrayidx120 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom119
  %63 = load i16, i16* %arrayidx120, align 2
  %conv121 = zext i16 %63 to i32
  %64 = load i32, i32* %to_mode, align 4
  %idxprom122 = sext i32 %64 to i64
  %arrayidx123 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom122
  %65 = load i16, i16* %arrayidx123, align 2
  %conv124 = zext i16 %65 to i32
  %cmp125 = icmp ne i32 %conv121, %conv124
  br i1 %cmp125, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %if.then.118
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 527, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.128:                                       ; preds = %if.then.118
  %66 = load i32, i32* %to_mode, align 4
  %idxprom129 = sext i32 %66 to i64
  %arrayidx130 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom129
  %67 = load i32, i32* %arrayidx130, align 4
  %cmp131 = icmp eq i32 %67, 7
  br i1 %cmp131, label %if.then.138, label %lor.lhs.false.133

lor.lhs.false.133:                                ; preds = %if.end.128
  %68 = load i32, i32* %to_mode, align 4
  %idxprom134 = sext i32 %68 to i64
  %arrayidx135 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom134
  %69 = load i32, i32* %arrayidx135, align 4
  %cmp136 = icmp eq i32 %69, 8
  br i1 %cmp136, label %if.then.138, label %if.else

if.then.138:                                      ; preds = %lor.lhs.false.133, %if.end.128
  %70 = load i32, i32* %to_mode, align 4
  %71 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %73 = bitcast %struct.rtx_def* %72 to i32*
  %bf.load139 = load i32, i32* %73, align 8
  %bf.lshr140 = lshr i32 %bf.load139, 16
  %bf.clear141 = and i32 %bf.lshr140, 255
  %call142 = call %struct.rtx_def* @simplify_gen_subreg(i32 %70, %struct.rtx_def* %71, i32 %bf.clear141, i32 0)
  store %struct.rtx_def* %call142, %struct.rtx_def** %from.addr, align 8
  br label %if.end.147

if.else:                                          ; preds = %lor.lhs.false.133
  %74 = load i32, i32* %from_mode, align 4
  %75 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load143 = load i32, i32* %77, align 8
  %bf.lshr144 = lshr i32 %bf.load143, 16
  %bf.clear145 = and i32 %bf.lshr144, 255
  %call146 = call %struct.rtx_def* @simplify_gen_subreg(i32 %74, %struct.rtx_def* %75, i32 %bf.clear145, i32 0)
  store %struct.rtx_def* %call146, %struct.rtx_def** %to.addr, align 8
  br label %if.end.147

if.end.147:                                       ; preds = %if.else, %if.then.138
  %78 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %79 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call148 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %78, %struct.rtx_def* %79)
  br label %return

if.end.149:                                       ; preds = %lor.lhs.false.113
  %80 = load i32, i32* %to_real, align 4
  %81 = load i32, i32* %from_real, align 4
  %cmp150 = icmp ne i32 %80, %81
  br i1 %cmp150, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %if.end.149
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 539, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.153:                                       ; preds = %if.end.149
  %82 = load i32, i32* %to_real, align 4
  %tobool154 = icmp ne i32 %82, 0
  br i1 %tobool154, label %if.then.155, label %if.end.258

if.then.155:                                      ; preds = %if.end.153
  %83 = load i32, i32* %from_mode, align 4
  %idxprom156 = sext i32 %83 to i64
  %arrayidx157 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom156
  %84 = load i16, i16* %arrayidx157, align 2
  %conv158 = zext i16 %84 to i32
  %85 = load i32, i32* %to_mode, align 4
  %idxprom159 = sext i32 %85 to i64
  %arrayidx160 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom159
  %86 = load i16, i16* %arrayidx160, align 2
  %conv161 = zext i16 %86 to i32
  %cmp162 = icmp slt i32 %conv158, %conv161
  br i1 %cmp162, label %if.then.164, label %if.end.170

if.then.164:                                      ; preds = %if.then.155
  %87 = load i32, i32* %to_mode, align 4
  %88 = load i32, i32* %from_mode, align 4
  %call165 = call i32 @can_extend_p(i32 %87, i32 %88, i32 0)
  store i32 %call165, i32* %code, align 4
  %cmp166 = icmp ne i32 %call165, 1317
  br i1 %cmp166, label %if.then.168, label %if.end.169

if.then.168:                                      ; preds = %if.then.164
  %89 = load i32, i32* %code, align 4
  %90 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %91 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  call void @emit_unop_insn(i32 %89, %struct.rtx_def* %90, %struct.rtx_def* %91, i32 0)
  br label %return

if.end.169:                                       ; preds = %if.then.164
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %if.then.155
  %92 = load i32, i32* @target_flags, align 4
  %and = and i32 %92, 1
  %tobool171 = icmp ne i32 %and, 0
  br i1 %tobool171, label %land.lhs.true.176, label %lor.lhs.false.172

lor.lhs.false.172:                                ; preds = %if.end.170
  %93 = load i32, i32* @target_flags, align 4
  %and173 = and i32 %93, 262144
  %cmp174 = icmp ne i32 %and173, 0
  br i1 %cmp174, label %land.lhs.true.176, label %if.end.183

land.lhs.true.176:                                ; preds = %lor.lhs.false.172, %if.end.170
  %94 = load i32, i32* %from_mode, align 4
  %cmp177 = icmp eq i32 %94, 16
  br i1 %cmp177, label %land.lhs.true.179, label %if.end.183

land.lhs.true.179:                                ; preds = %land.lhs.true.176
  %95 = load i32, i32* %to_mode, align 4
  %cmp180 = icmp eq i32 %95, 15
  br i1 %cmp180, label %if.then.182, label %if.end.183

if.then.182:                                      ; preds = %land.lhs.true.179
  %96 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %97 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  call void @emit_unop_insn(i32 909, %struct.rtx_def* %96, %struct.rtx_def* %97, i32 0)
  br label %return

if.end.183:                                       ; preds = %land.lhs.true.179, %land.lhs.true.176, %lor.lhs.false.172
  %98 = load i32, i32* @target_flags, align 4
  %and184 = and i32 %98, 33554432
  %tobool185 = icmp ne i32 %and184, 0
  br i1 %tobool185, label %if.end.196, label %land.lhs.true.186

land.lhs.true.186:                                ; preds = %if.end.183
  %99 = load i32, i32* @target_flags, align 4
  %and187 = and i32 %99, 1
  %tobool188 = icmp ne i32 %and187, 0
  br i1 %tobool188, label %land.lhs.true.189, label %if.end.196

land.lhs.true.189:                                ; preds = %land.lhs.true.186
  %100 = load i32, i32* %from_mode, align 4
  %cmp190 = icmp eq i32 %100, 17
  br i1 %cmp190, label %land.lhs.true.192, label %if.end.196

land.lhs.true.192:                                ; preds = %land.lhs.true.189
  %101 = load i32, i32* %to_mode, align 4
  %cmp193 = icmp eq i32 %101, 15
  br i1 %cmp193, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %land.lhs.true.192
  %102 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  call void @emit_unop_insn(i32 913, %struct.rtx_def* %102, %struct.rtx_def* %103, i32 0)
  br label %return

if.end.196:                                       ; preds = %land.lhs.true.192, %land.lhs.true.189, %land.lhs.true.186, %if.end.183
  %104 = load i32, i32* @target_flags, align 4
  %and197 = and i32 %104, 1
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %land.lhs.true.199, label %if.end.206

land.lhs.true.199:                                ; preds = %if.end.196
  %105 = load i32, i32* %from_mode, align 4
  %cmp200 = icmp eq i32 %105, 18
  br i1 %cmp200, label %land.lhs.true.202, label %if.end.206

land.lhs.true.202:                                ; preds = %land.lhs.true.199
  %106 = load i32, i32* %to_mode, align 4
  %cmp203 = icmp eq i32 %106, 15
  br i1 %cmp203, label %if.then.205, label %if.end.206

if.then.205:                                      ; preds = %land.lhs.true.202
  %107 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  call void @emit_unop_insn(i32 916, %struct.rtx_def* %107, %struct.rtx_def* %108, i32 0)
  br label %return

if.end.206:                                       ; preds = %land.lhs.true.202, %land.lhs.true.199, %if.end.196
  %109 = load i32, i32* @target_flags, align 4
  %and207 = and i32 %109, 33554432
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %if.end.219, label %land.lhs.true.209

land.lhs.true.209:                                ; preds = %if.end.206
  %110 = load i32, i32* @target_flags, align 4
  %and210 = and i32 %110, 1
  %tobool211 = icmp ne i32 %and210, 0
  br i1 %tobool211, label %land.lhs.true.212, label %if.end.219

land.lhs.true.212:                                ; preds = %land.lhs.true.209
  %111 = load i32, i32* %from_mode, align 4
  %cmp213 = icmp eq i32 %111, 17
  br i1 %cmp213, label %land.lhs.true.215, label %if.end.219

land.lhs.true.215:                                ; preds = %land.lhs.true.212
  %112 = load i32, i32* %to_mode, align 4
  %cmp216 = icmp eq i32 %112, 16
  br i1 %cmp216, label %if.then.218, label %if.end.219

if.then.218:                                      ; preds = %land.lhs.true.215
  %113 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  call void @emit_unop_insn(i32 919, %struct.rtx_def* %113, %struct.rtx_def* %114, i32 0)
  br label %return

if.end.219:                                       ; preds = %land.lhs.true.215, %land.lhs.true.212, %land.lhs.true.209, %if.end.206
  %115 = load i32, i32* @target_flags, align 4
  %and220 = and i32 %115, 1
  %tobool221 = icmp ne i32 %and220, 0
  br i1 %tobool221, label %land.lhs.true.222, label %if.end.229

land.lhs.true.222:                                ; preds = %if.end.219
  %116 = load i32, i32* %from_mode, align 4
  %cmp223 = icmp eq i32 %116, 18
  br i1 %cmp223, label %land.lhs.true.225, label %if.end.229

land.lhs.true.225:                                ; preds = %land.lhs.true.222
  %117 = load i32, i32* %to_mode, align 4
  %cmp226 = icmp eq i32 %117, 16
  br i1 %cmp226, label %if.then.228, label %if.end.229

if.then.228:                                      ; preds = %land.lhs.true.225
  %118 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  call void @emit_unop_insn(i32 922, %struct.rtx_def* %118, %struct.rtx_def* %119, i32 0)
  br label %return

if.end.229:                                       ; preds = %land.lhs.true.225, %land.lhs.true.222, %if.end.219
  store %struct.rtx_def* null, %struct.rtx_def** %libcall, align 8
  %120 = load i32, i32* %from_mode, align 4
  switch i32 %120, label %sw.default.249 [
    i32 15, label %sw.bb
    i32 16, label %sw.bb.233
    i32 17, label %sw.bb.239
    i32 18, label %sw.bb.244
  ]

sw.bb:                                            ; preds = %if.end.229
  %121 = load i32, i32* %to_mode, align 4
  switch i32 %121, label %sw.default [
    i32 16, label %sw.bb.230
    i32 17, label %sw.bb.231
    i32 18, label %sw.bb.232
  ]

sw.bb.230:                                        ; preds = %sw.bb
  %122 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 0), align 8
  store %struct.rtx_def* %122, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog

sw.bb.231:                                        ; preds = %sw.bb
  %123 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 1), align 8
  store %struct.rtx_def* %123, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog

sw.bb.232:                                        ; preds = %sw.bb
  %124 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 2), align 8
  store %struct.rtx_def* %124, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %sw.bb
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.232, %sw.bb.231, %sw.bb.230
  br label %sw.epilog.250

sw.bb.233:                                        ; preds = %if.end.229
  %125 = load i32, i32* %to_mode, align 4
  switch i32 %125, label %sw.default.237 [
    i32 15, label %sw.bb.234
    i32 17, label %sw.bb.235
    i32 18, label %sw.bb.236
  ]

sw.bb.234:                                        ; preds = %sw.bb.233
  %126 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 5), align 8
  store %struct.rtx_def* %126, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog.238

sw.bb.235:                                        ; preds = %sw.bb.233
  %127 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 3), align 8
  store %struct.rtx_def* %127, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog.238

sw.bb.236:                                        ; preds = %sw.bb.233
  %128 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 4), align 8
  store %struct.rtx_def* %128, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog.238

sw.default.237:                                   ; preds = %sw.bb.233
  br label %sw.epilog.238

sw.epilog.238:                                    ; preds = %sw.default.237, %sw.bb.236, %sw.bb.235, %sw.bb.234
  br label %sw.epilog.250

sw.bb.239:                                        ; preds = %if.end.229
  %129 = load i32, i32* %to_mode, align 4
  switch i32 %129, label %sw.default.242 [
    i32 15, label %sw.bb.240
    i32 16, label %sw.bb.241
  ]

sw.bb.240:                                        ; preds = %sw.bb.239
  %130 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 6), align 8
  store %struct.rtx_def* %130, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog.243

sw.bb.241:                                        ; preds = %sw.bb.239
  %131 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 8), align 8
  store %struct.rtx_def* %131, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog.243

sw.default.242:                                   ; preds = %sw.bb.239
  br label %sw.epilog.243

sw.epilog.243:                                    ; preds = %sw.default.242, %sw.bb.241, %sw.bb.240
  br label %sw.epilog.250

sw.bb.244:                                        ; preds = %if.end.229
  %132 = load i32, i32* %to_mode, align 4
  switch i32 %132, label %sw.default.247 [
    i32 15, label %sw.bb.245
    i32 16, label %sw.bb.246
  ]

sw.bb.245:                                        ; preds = %sw.bb.244
  %133 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 7), align 8
  store %struct.rtx_def* %133, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog.248

sw.bb.246:                                        ; preds = %sw.bb.244
  %134 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 9), align 8
  store %struct.rtx_def* %134, %struct.rtx_def** %libcall, align 8
  br label %sw.epilog.248

sw.default.247:                                   ; preds = %sw.bb.244
  br label %sw.epilog.248

sw.epilog.248:                                    ; preds = %sw.default.247, %sw.bb.246, %sw.bb.245
  br label %sw.epilog.250

sw.default.249:                                   ; preds = %if.end.229
  br label %sw.epilog.250

sw.epilog.250:                                    ; preds = %sw.default.249, %sw.epilog.248, %sw.epilog.243, %sw.epilog.238, %sw.epilog
  %135 = load %struct.rtx_def*, %struct.rtx_def** %libcall, align 8
  %cmp251 = icmp eq %struct.rtx_def* %135, null
  br i1 %cmp251, label %if.then.253, label %if.end.254

if.then.253:                                      ; preds = %sw.epilog.250
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 781, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.254:                                       ; preds = %sw.epilog.250
  call void @start_sequence()
  %136 = load %struct.rtx_def*, %struct.rtx_def** %libcall, align 8
  %137 = load i32, i32* %to_mode, align 4
  %138 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %139 = load i32, i32* %from_mode, align 4
  %call255 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %136, %struct.rtx_def* null, i32 1, i32 %137, i32 1, %struct.rtx_def* %138, i32 %139)
  store %struct.rtx_def* %call255, %struct.rtx_def** %value, align 8
  %call256 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call256, %struct.rtx_def** %insns, align 8
  call void @end_sequence()
  %140 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %142 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %143 = load i32, i32* %to_mode, align 4
  %144 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call257 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 %143, %struct.rtx_def* %144)
  call void @emit_libcall_block(%struct.rtx_def* %140, %struct.rtx_def* %141, %struct.rtx_def* %142, %struct.rtx_def* %call257)
  br label %return

if.end.258:                                       ; preds = %if.end.153
  %145 = load i32, i32* %from_mode, align 4
  %idxprom259 = sext i32 %145 to i64
  %arrayidx260 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom259
  %146 = load i16, i16* %arrayidx260, align 2
  %conv261 = zext i16 %146 to i32
  %147 = load i32, i32* %to_mode, align 4
  %idxprom262 = sext i32 %147 to i64
  %arrayidx263 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom262
  %148 = load i16, i16* %arrayidx263, align 2
  %conv264 = zext i16 %148 to i32
  %cmp265 = icmp slt i32 %conv261, %conv264
  br i1 %cmp265, label %land.lhs.true.267, label %if.end.392

land.lhs.true.267:                                ; preds = %if.end.258
  %149 = load i32, i32* %to_mode, align 4
  %idxprom268 = sext i32 %149 to i64
  %arrayidx269 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom268
  %150 = load i16, i16* %arrayidx269, align 2
  %conv270 = zext i16 %150 to i32
  %151 = load i32, i32* @target_flags, align 4
  %and271 = and i32 %151, 33554432
  %tobool272 = icmp ne i32 %and271, 0
  %cond273 = select i1 %tobool272, i32 64, i32 32
  %cmp274 = icmp sgt i32 %conv270, %cond273
  br i1 %cmp274, label %if.then.276, label %if.end.392

if.then.276:                                      ; preds = %land.lhs.true.267
  %152 = load i32, i32* %to_mode, align 4
  %idxprom278 = sext i32 %152 to i64
  %arrayidx279 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom278
  %153 = load i8, i8* %arrayidx279, align 1
  %conv280 = zext i8 %153 to i32
  %154 = load i32, i32* @target_flags, align 4
  %and281 = and i32 %154, 33554432
  %tobool282 = icmp ne i32 %and281, 0
  %cond283 = select i1 %tobool282, i32 8, i32 4
  %add = add nsw i32 %conv280, %cond283
  %sub = sub nsw i32 %add, 1
  %155 = load i32, i32* @target_flags, align 4
  %and284 = and i32 %155, 33554432
  %tobool285 = icmp ne i32 %and284, 0
  %cond286 = select i1 %tobool285, i32 8, i32 4
  %div = sdiv i32 %sub, %cond286
  store i32 %div, i32* %nwords, align 4
  %156 = load i32, i32* %to_mode, align 4
  %157 = load i32, i32* %from_mode, align 4
  %158 = load i32, i32* %unsignedp.addr, align 4
  %call287 = call i32 @can_extend_p(i32 %156, i32 %157, i32 %158)
  store i32 %call287, i32* %code, align 4
  %cmp288 = icmp ne i32 %call287, 1317
  br i1 %cmp288, label %if.then.290, label %if.else.301

if.then.290:                                      ; preds = %if.then.276
  %159 = load i32, i32* @optimize, align 4
  %cmp291 = icmp sgt i32 %159, 0
  br i1 %cmp291, label %land.lhs.true.293, label %if.end.300

land.lhs.true.293:                                ; preds = %if.then.290
  %160 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load294 = load i32, i32* %161, align 8
  %bf.clear295 = and i32 %bf.load294, 65535
  %cmp296 = icmp eq i32 %bf.clear295, 63
  br i1 %cmp296, label %if.then.298, label %if.end.300

if.then.298:                                      ; preds = %land.lhs.true.293
  %162 = load i32, i32* %from_mode, align 4
  %163 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call299 = call %struct.rtx_def* @force_reg(i32 %162, %struct.rtx_def* %163)
  store %struct.rtx_def* %call299, %struct.rtx_def** %from.addr, align 8
  br label %if.end.300

if.end.300:                                       ; preds = %if.then.298, %land.lhs.true.293, %if.then.290
  %164 = load i32, i32* %code, align 4
  %165 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %166 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %167 = load i32, i32* %equiv_code, align 4
  call void @emit_unop_insn(i32 %164, %struct.rtx_def* %165, %struct.rtx_def* %166, i32 %167)
  br label %return

if.else.301:                                      ; preds = %if.then.276
  %168 = load i32, i32* %from_mode, align 4
  %idxprom302 = sext i32 %168 to i64
  %arrayidx303 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom302
  %169 = load i16, i16* %arrayidx303, align 2
  %conv304 = zext i16 %169 to i32
  %170 = load i32, i32* @target_flags, align 4
  %and305 = and i32 %170, 33554432
  %tobool306 = icmp ne i32 %and305, 0
  %cond307 = select i1 %tobool306, i32 64, i32 32
  %cmp308 = icmp slt i32 %conv304, %cond307
  br i1 %cmp308, label %land.lhs.true.310, label %if.end.325

land.lhs.true.310:                                ; preds = %if.else.301
  %171 = load i32, i32* %to_mode, align 4
  %172 = load i32, i32* @word_mode, align 4
  %173 = load i32, i32* %unsignedp.addr, align 4
  %call311 = call i32 @can_extend_p(i32 %171, i32 %172, i32 %173)
  store i32 %call311, i32* %code, align 4
  %cmp312 = icmp ne i32 %call311, 1317
  br i1 %cmp312, label %if.then.314, label %if.end.325

if.then.314:                                      ; preds = %land.lhs.true.310
  %174 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %175 = bitcast %struct.rtx_def* %174 to i32*
  %bf.load315 = load i32, i32* %175, align 8
  %bf.clear316 = and i32 %bf.load315, 65535
  %cmp317 = icmp eq i32 %bf.clear316, 61
  br i1 %cmp317, label %if.then.319, label %if.end.322

if.then.319:                                      ; preds = %if.then.314
  %176 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %call320 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %176)
  %call321 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call320)
  br label %if.end.322

if.end.322:                                       ; preds = %if.then.319, %if.then.314
  %177 = load i32, i32* @word_mode, align 4
  %178 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %call323 = call %struct.rtx_def* @gen_lowpart(i32 %177, %struct.rtx_def* %178)
  %179 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %180 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %call323, %struct.rtx_def* %179, i32 %180)
  %181 = load i32, i32* %code, align 4
  %182 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %183 = load i32, i32* @word_mode, align 4
  %184 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %call324 = call %struct.rtx_def* @gen_lowpart(i32 %183, %struct.rtx_def* %184)
  %185 = load i32, i32* %equiv_code, align 4
  call void @emit_unop_insn(i32 %181, %struct.rtx_def* %182, %struct.rtx_def* %call324, i32 %185)
  br label %return

if.end.325:                                       ; preds = %land.lhs.true.310, %if.else.301
  br label %if.end.326

if.end.326:                                       ; preds = %if.end.325
  call void @start_sequence()
  %186 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %187 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call327 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %186, %struct.rtx_def* %187)
  %tobool328 = icmp ne i32 %call327, 0
  br i1 %tobool328, label %if.then.329, label %if.end.331

if.then.329:                                      ; preds = %if.end.326
  %188 = load i32, i32* %from_mode, align 4
  %189 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call330 = call %struct.rtx_def* @force_reg(i32 %188, %struct.rtx_def* %189)
  store %struct.rtx_def* %call330, %struct.rtx_def** %from.addr, align 8
  br label %if.end.331

if.end.331:                                       ; preds = %if.then.329, %if.end.326
  %190 = load i32, i32* %from_mode, align 4
  %idxprom332 = sext i32 %190 to i64
  %arrayidx333 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom332
  %191 = load i16, i16* %arrayidx333, align 2
  %conv334 = zext i16 %191 to i32
  %192 = load i32, i32* @target_flags, align 4
  %and335 = and i32 %192, 33554432
  %tobool336 = icmp ne i32 %and335, 0
  %cond337 = select i1 %tobool336, i32 64, i32 32
  %cmp338 = icmp slt i32 %conv334, %cond337
  br i1 %cmp338, label %if.then.340, label %if.else.341

if.then.340:                                      ; preds = %if.end.331
  %193 = load i32, i32* @word_mode, align 4
  store i32 %193, i32* %lowpart_mode, align 4
  br label %if.end.342

if.else.341:                                      ; preds = %if.end.331
  %194 = load i32, i32* %from_mode, align 4
  store i32 %194, i32* %lowpart_mode, align 4
  br label %if.end.342

if.end.342:                                       ; preds = %if.else.341, %if.then.340
  %195 = load i32, i32* %lowpart_mode, align 4
  %196 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %197 = load i32, i32* %unsignedp.addr, align 4
  %call343 = call %struct.rtx_def* @convert_to_mode(i32 %195, %struct.rtx_def* %196, i32 %197)
  store %struct.rtx_def* %call343, %struct.rtx_def** %lowfrom, align 8
  %198 = load i32, i32* %lowpart_mode, align 4
  %199 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %call344 = call %struct.rtx_def* @gen_lowpart(i32 %198, %struct.rtx_def* %199)
  store %struct.rtx_def* %call344, %struct.rtx_def** %lowpart, align 8
  %200 = load %struct.rtx_def*, %struct.rtx_def** %lowpart, align 8
  %201 = load %struct.rtx_def*, %struct.rtx_def** %lowfrom, align 8
  %call345 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %200, %struct.rtx_def* %201)
  %202 = load i32, i32* %unsignedp.addr, align 4
  %tobool346 = icmp ne i32 %202, 0
  br i1 %tobool346, label %if.then.347, label %if.else.348

if.then.347:                                      ; preds = %if.end.342
  %203 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %203, %struct.rtx_def** %fill_value, align 8
  br label %if.end.368

if.else.348:                                      ; preds = %if.end.342
  %204 = load %struct.insn_operand_data*, %struct.insn_operand_data** getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 1119, i32 3), align 8
  %arrayidx349 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %204, i64 0
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx349, i32 0, i32 2
  %bf.load350 = load i16, i16* %mode, align 8
  %bf.cast = zext i16 %bf.load350 to i32
  %205 = load i32, i32* @word_mode, align 4
  %cmp351 = icmp eq i32 %bf.cast, %205
  br i1 %cmp351, label %land.lhs.true.353, label %if.else.358

land.lhs.true.353:                                ; preds = %if.else.348
  br i1 false, label %if.then.354, label %if.else.358

if.then.354:                                      ; preds = %land.lhs.true.353
  %206 = load %struct.rtx_def*, %struct.rtx_def** %lowfrom, align 8
  %207 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %208 = load i32, i32* %lowpart_mode, align 4
  call void @emit_cmp_insn(%struct.rtx_def* %206, %struct.rtx_def* %207, i32 102, %struct.rtx_def* null, i32 %208, i32 0)
  %209 = load i32, i32* @word_mode, align 4
  %call355 = call %struct.rtx_def* @gen_reg_rtx(i32 %209)
  store %struct.rtx_def* %call355, %struct.rtx_def** %fill_value, align 8
  %210 = load %struct.rtx_def*, %struct.rtx_def** %fill_value, align 8
  %call356 = call %struct.rtx_def* @gen_slt(%struct.rtx_def* %210)
  %call357 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call356)
  br label %if.end.367

if.else.358:                                      ; preds = %land.lhs.true.353, %if.else.348
  %211 = load i32, i32* %lowpart_mode, align 4
  %212 = load %struct.rtx_def*, %struct.rtx_def** %lowfrom, align 8
  %213 = load i32, i32* %lowpart_mode, align 4
  %idxprom359 = sext i32 %213 to i64
  %arrayidx360 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom359
  %214 = load i16, i16* %arrayidx360, align 2
  %conv361 = zext i16 %214 to i32
  %sub362 = sub nsw i32 %conv361, 1
  %conv363 = sext i32 %sub362 to i64
  %call364 = call %union.tree_node* @size_int_wide(i64 %conv363, i32 0)
  %call365 = call %struct.rtx_def* @expand_shift(i32 83, i32 %211, %struct.rtx_def* %212, %union.tree_node* %call364, %struct.rtx_def* null, i32 0)
  store %struct.rtx_def* %call365, %struct.rtx_def** %fill_value, align 8
  %215 = load i32, i32* @word_mode, align 4
  %216 = load %struct.rtx_def*, %struct.rtx_def** %fill_value, align 8
  %call366 = call %struct.rtx_def* @convert_to_mode(i32 %215, %struct.rtx_def* %216, i32 1)
  store %struct.rtx_def* %call366, %struct.rtx_def** %fill_value, align 8
  br label %if.end.367

if.end.367:                                       ; preds = %if.else.358, %if.then.354
  br label %if.end.368

if.end.368:                                       ; preds = %if.end.367, %if.then.347
  %217 = load i32, i32* %lowpart_mode, align 4
  %idxprom369 = sext i32 %217 to i64
  %arrayidx370 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom369
  %218 = load i8, i8* %arrayidx370, align 1
  %conv371 = zext i8 %218 to i32
  %219 = load i32, i32* @target_flags, align 4
  %and372 = and i32 %219, 33554432
  %tobool373 = icmp ne i32 %and372, 0
  %cond374 = select i1 %tobool373, i32 8, i32 4
  %div375 = sdiv i32 %conv371, %cond374
  store i32 %div375, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.368
  %220 = load i32, i32* %i, align 4
  %221 = load i32, i32* %nwords, align 4
  %cmp376 = icmp slt i32 %220, %221
  br i1 %cmp376, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %222 = load i32, i32* %i, align 4
  store i32 %222, i32* %index, align 4
  %223 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %224 = load i32, i32* %index, align 4
  %225 = load i32, i32* %to_mode, align 4
  %call378 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %223, i32 %224, i32 1, i32 %225)
  store %struct.rtx_def* %call378, %struct.rtx_def** %subword, align 8
  %226 = load %struct.rtx_def*, %struct.rtx_def** %subword, align 8
  %cmp379 = icmp eq %struct.rtx_def* %226, null
  br i1 %cmp379, label %if.then.381, label %if.end.382

if.then.381:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 886, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.382:                                       ; preds = %for.body
  %227 = load %struct.rtx_def*, %struct.rtx_def** %fill_value, align 8
  %228 = load %struct.rtx_def*, %struct.rtx_def** %subword, align 8
  %cmp383 = icmp ne %struct.rtx_def* %227, %228
  br i1 %cmp383, label %if.then.385, label %if.end.387

if.then.385:                                      ; preds = %if.end.382
  %229 = load %struct.rtx_def*, %struct.rtx_def** %subword, align 8
  %230 = load %struct.rtx_def*, %struct.rtx_def** %fill_value, align 8
  %call386 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %229, %struct.rtx_def* %230)
  br label %if.end.387

if.end.387:                                       ; preds = %if.then.385, %if.end.382
  br label %for.inc

for.inc:                                          ; preds = %if.end.387
  %231 = load i32, i32* %i, align 4
  %inc = add nsw i32 %231, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call388 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call388, %struct.rtx_def** %insns277, align 8
  call void @end_sequence()
  %232 = load %struct.rtx_def*, %struct.rtx_def** %insns277, align 8
  %233 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %234 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %235 = load i32, i32* %equiv_code, align 4
  %236 = load i32, i32* %to_mode, align 4
  %237 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call389 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %237)
  %call390 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 %235, i32 %236, %struct.rtx_def* %call389)
  %call391 = call %struct.rtx_def* @emit_no_conflict_block(%struct.rtx_def* %232, %struct.rtx_def* %233, %struct.rtx_def* %234, %struct.rtx_def* null, %struct.rtx_def* %call390)
  br label %return

if.end.392:                                       ; preds = %land.lhs.true.267, %if.end.258
  %238 = load i32, i32* %from_mode, align 4
  %idxprom393 = sext i32 %238 to i64
  %arrayidx394 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom393
  %239 = load i16, i16* %arrayidx394, align 2
  %conv395 = zext i16 %239 to i32
  %240 = load i32, i32* @target_flags, align 4
  %and396 = and i32 %240, 33554432
  %tobool397 = icmp ne i32 %and396, 0
  %cond398 = select i1 %tobool397, i32 64, i32 32
  %cmp399 = icmp sgt i32 %conv395, %cond398
  br i1 %cmp399, label %land.lhs.true.401, label %if.end.445

land.lhs.true.401:                                ; preds = %if.end.392
  %241 = load i32, i32* %to_mode, align 4
  %idxprom402 = sext i32 %241 to i64
  %arrayidx403 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom402
  %242 = load i16, i16* %arrayidx403, align 2
  %conv404 = zext i16 %242 to i32
  %243 = load i32, i32* @target_flags, align 4
  %and405 = and i32 %243, 33554432
  %tobool406 = icmp ne i32 %and405, 0
  %cond407 = select i1 %tobool406, i32 64, i32 32
  %cmp408 = icmp sle i32 %conv404, %cond407
  br i1 %cmp408, label %if.then.410, label %if.end.445

if.then.410:                                      ; preds = %land.lhs.true.401
  %244 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %245 = bitcast %struct.rtx_def* %244 to i32*
  %bf.load411 = load i32, i32* %245, align 8
  %bf.clear412 = and i32 %bf.load411, 65535
  %cmp413 = icmp eq i32 %bf.clear412, 66
  br i1 %cmp413, label %land.lhs.true.415, label %lor.lhs.false.431

land.lhs.true.415:                                ; preds = %if.then.410
  %246 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %247 = bitcast %struct.rtx_def* %246 to i32*
  %bf.load416 = load i32, i32* %247, align 8
  %bf.lshr417 = lshr i32 %bf.load416, 27
  %bf.clear418 = and i32 %bf.lshr417, 1
  %tobool419 = icmp ne i32 %bf.clear418, 0
  br i1 %tobool419, label %lor.lhs.false.431, label %land.lhs.true.420

land.lhs.true.420:                                ; preds = %land.lhs.true.415
  %248 = load i32, i32* %to_mode, align 4
  %idxprom421 = sext i32 %248 to i64
  %arrayidx422 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_load, i32 0, i64 %idxprom421
  %249 = load i8, i8* %arrayidx422, align 1
  %conv423 = sext i8 %249 to i32
  %tobool424 = icmp ne i32 %conv423, 0
  br i1 %tobool424, label %land.lhs.true.425, label %lor.lhs.false.431

land.lhs.true.425:                                ; preds = %land.lhs.true.420
  %250 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %fld426 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %250, i32 0, i32 1
  %arrayidx427 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld426, i32 0, i64 0
  %rtx428 = bitcast %union.rtunion_def* %arrayidx427 to %struct.rtx_def**
  %251 = load %struct.rtx_def*, %struct.rtx_def** %rtx428, align 8
  %call429 = call i32 @mode_dependent_address_p(%struct.rtx_def* %251)
  %tobool430 = icmp ne i32 %call429, 0
  br i1 %tobool430, label %lor.lhs.false.431, label %if.end.443

lor.lhs.false.431:                                ; preds = %land.lhs.true.425, %land.lhs.true.420, %land.lhs.true.415, %if.then.410
  %252 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %253 = bitcast %struct.rtx_def* %252 to i32*
  %bf.load432 = load i32, i32* %253, align 8
  %bf.clear433 = and i32 %bf.load432, 65535
  %cmp434 = icmp eq i32 %bf.clear433, 61
  br i1 %cmp434, label %if.end.443, label %lor.lhs.false.436

lor.lhs.false.436:                                ; preds = %lor.lhs.false.431
  %254 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %255 = bitcast %struct.rtx_def* %254 to i32*
  %bf.load437 = load i32, i32* %255, align 8
  %bf.clear438 = and i32 %bf.load437, 65535
  %cmp439 = icmp eq i32 %bf.clear438, 63
  br i1 %cmp439, label %if.end.443, label %if.then.441

if.then.441:                                      ; preds = %lor.lhs.false.436
  %256 = load i32, i32* %from_mode, align 4
  %257 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call442 = call %struct.rtx_def* @force_reg(i32 %256, %struct.rtx_def* %257)
  store %struct.rtx_def* %call442, %struct.rtx_def** %from.addr, align 8
  br label %if.end.443

if.end.443:                                       ; preds = %if.then.441, %lor.lhs.false.436, %lor.lhs.false.431, %land.lhs.true.425
  %258 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %259 = load i32, i32* @word_mode, align 4
  %260 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call444 = call %struct.rtx_def* @gen_lowpart(i32 %259, %struct.rtx_def* %260)
  call void @convert_move(%struct.rtx_def* %258, %struct.rtx_def* %call444, i32 0)
  br label %return

if.end.445:                                       ; preds = %land.lhs.true.401, %if.end.392
  %261 = load i32, i32* %to_mode, align 4
  %cmp446 = icmp eq i32 %261, 8
  br i1 %cmp446, label %if.then.448, label %if.end.454

if.then.448:                                      ; preds = %if.end.445
  %262 = load i32, i32* %from_mode, align 4
  %cmp449 = icmp ne i32 %262, 2
  br i1 %cmp449, label %if.then.451, label %if.end.453

if.then.451:                                      ; preds = %if.then.448
  %263 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %264 = load i32, i32* %unsignedp.addr, align 4
  %call452 = call %struct.rtx_def* @convert_to_mode(i32 2, %struct.rtx_def* %263, i32 %264)
  store %struct.rtx_def* %call452, %struct.rtx_def** %from.addr, align 8
  br label %if.end.453

if.end.453:                                       ; preds = %if.then.451, %if.then.448
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 928, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.454:                                       ; preds = %if.end.445
  %265 = load i32, i32* %from_mode, align 4
  %cmp455 = icmp eq i32 %265, 8
  br i1 %cmp455, label %if.then.457, label %if.end.464

if.then.457:                                      ; preds = %if.end.454
  %266 = load i32, i32* %to_mode, align 4
  %cmp458 = icmp ne i32 %266, 2
  br i1 %cmp458, label %if.then.460, label %if.else.462

if.then.460:                                      ; preds = %if.then.457
  %267 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %268 = load i32, i32* %unsignedp.addr, align 4
  %call461 = call %struct.rtx_def* @convert_to_mode(i32 2, %struct.rtx_def* %267, i32 %268)
  store %struct.rtx_def* %call461, %struct.rtx_def** %from.addr, align 8
  store i32 2, i32* %from_mode, align 4
  br label %if.end.463

if.else.462:                                      ; preds = %if.then.457
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 947, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.463:                                       ; preds = %if.then.460
  br label %if.end.464

if.end.464:                                       ; preds = %if.end.463, %if.end.454
  %269 = load i32, i32* %to_mode, align 4
  %cmp465 = icmp eq i32 %269, 10
  br i1 %cmp465, label %if.then.467, label %if.end.473

if.then.467:                                      ; preds = %if.end.464
  %270 = load i32, i32* %from_mode, align 4
  %cmp468 = icmp ne i32 %270, 4
  br i1 %cmp468, label %if.then.470, label %if.end.472

if.then.470:                                      ; preds = %if.then.467
  %271 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %272 = load i32, i32* %unsignedp.addr, align 4
  %call471 = call %struct.rtx_def* @convert_to_mode(i32 4, %struct.rtx_def* %271, i32 %272)
  store %struct.rtx_def* %call471, %struct.rtx_def** %from.addr, align 8
  br label %if.end.472

if.end.472:                                       ; preds = %if.then.470, %if.then.467
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 963, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.473:                                       ; preds = %if.end.464
  %273 = load i32, i32* %from_mode, align 4
  %cmp474 = icmp eq i32 %273, 10
  br i1 %cmp474, label %if.then.476, label %if.end.483

if.then.476:                                      ; preds = %if.end.473
  %274 = load i32, i32* %to_mode, align 4
  %cmp477 = icmp ne i32 %274, 4
  br i1 %cmp477, label %if.then.479, label %if.else.481

if.then.479:                                      ; preds = %if.then.476
  %275 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %276 = load i32, i32* %unsignedp.addr, align 4
  %call480 = call %struct.rtx_def* @convert_to_mode(i32 4, %struct.rtx_def* %275, i32 %276)
  store %struct.rtx_def* %call480, %struct.rtx_def** %from.addr, align 8
  store i32 4, i32* %from_mode, align 4
  br label %if.end.482

if.else.481:                                      ; preds = %if.then.476
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 989, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.482:                                       ; preds = %if.then.479
  br label %if.end.483

if.end.483:                                       ; preds = %if.end.482, %if.end.473
  %277 = load i32, i32* %to_mode, align 4
  %cmp484 = icmp eq i32 %277, 11
  br i1 %cmp484, label %if.then.486, label %if.end.492

if.then.486:                                      ; preds = %if.end.483
  %278 = load i32, i32* %from_mode, align 4
  %cmp487 = icmp ne i32 %278, 5
  br i1 %cmp487, label %if.then.489, label %if.end.491

if.then.489:                                      ; preds = %if.then.486
  %279 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %280 = load i32, i32* %unsignedp.addr, align 4
  %call490 = call %struct.rtx_def* @convert_to_mode(i32 5, %struct.rtx_def* %279, i32 %280)
  store %struct.rtx_def* %call490, %struct.rtx_def** %from.addr, align 8
  br label %if.end.491

if.end.491:                                       ; preds = %if.then.489, %if.then.486
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1005, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.492:                                       ; preds = %if.end.483
  %281 = load i32, i32* %from_mode, align 4
  %cmp493 = icmp eq i32 %281, 11
  br i1 %cmp493, label %if.then.495, label %if.end.502

if.then.495:                                      ; preds = %if.end.492
  %282 = load i32, i32* %to_mode, align 4
  %cmp496 = icmp ne i32 %282, 5
  br i1 %cmp496, label %if.then.498, label %if.else.500

if.then.498:                                      ; preds = %if.then.495
  %283 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %284 = load i32, i32* %unsignedp.addr, align 4
  %call499 = call %struct.rtx_def* @convert_to_mode(i32 5, %struct.rtx_def* %283, i32 %284)
  store %struct.rtx_def* %call499, %struct.rtx_def** %from.addr, align 8
  store i32 5, i32* %from_mode, align 4
  br label %if.end.501

if.else.500:                                      ; preds = %if.then.495
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1024, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

if.end.501:                                       ; preds = %if.then.498
  br label %if.end.502

if.end.502:                                       ; preds = %if.end.501, %if.end.492
  %285 = load i32, i32* %to_mode, align 4
  %idxprom503 = sext i32 %285 to i64
  %arrayidx504 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom503
  %286 = load i16, i16* %arrayidx504, align 2
  %conv505 = zext i16 %286 to i32
  %287 = load i32, i32* %from_mode, align 4
  %idxprom506 = sext i32 %287 to i64
  %arrayidx507 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom506
  %288 = load i16, i16* %arrayidx507, align 2
  %conv508 = zext i16 %288 to i32
  %cmp509 = icmp slt i32 %conv505, %conv508
  br i1 %cmp509, label %if.then.511, label %if.end.565

if.then.511:                                      ; preds = %if.end.502
  %289 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %290 = bitcast %struct.rtx_def* %289 to i32*
  %bf.load512 = load i32, i32* %290, align 8
  %bf.clear513 = and i32 %bf.load512, 65535
  %cmp514 = icmp eq i32 %bf.clear513, 66
  br i1 %cmp514, label %land.lhs.true.516, label %lor.lhs.false.532

land.lhs.true.516:                                ; preds = %if.then.511
  %291 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %292 = bitcast %struct.rtx_def* %291 to i32*
  %bf.load517 = load i32, i32* %292, align 8
  %bf.lshr518 = lshr i32 %bf.load517, 27
  %bf.clear519 = and i32 %bf.lshr518, 1
  %tobool520 = icmp ne i32 %bf.clear519, 0
  br i1 %tobool520, label %lor.lhs.false.532, label %land.lhs.true.521

land.lhs.true.521:                                ; preds = %land.lhs.true.516
  %293 = load i32, i32* %to_mode, align 4
  %idxprom522 = sext i32 %293 to i64
  %arrayidx523 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_load, i32 0, i64 %idxprom522
  %294 = load i8, i8* %arrayidx523, align 1
  %conv524 = sext i8 %294 to i32
  %tobool525 = icmp ne i32 %conv524, 0
  br i1 %tobool525, label %land.lhs.true.526, label %lor.lhs.false.532

land.lhs.true.526:                                ; preds = %land.lhs.true.521
  %295 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %fld527 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %295, i32 0, i32 1
  %arrayidx528 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld527, i32 0, i64 0
  %rtx529 = bitcast %union.rtunion_def* %arrayidx528 to %struct.rtx_def**
  %296 = load %struct.rtx_def*, %struct.rtx_def** %rtx529, align 8
  %call530 = call i32 @mode_dependent_address_p(%struct.rtx_def* %296)
  %tobool531 = icmp ne i32 %call530, 0
  br i1 %tobool531, label %lor.lhs.false.532, label %if.end.544

lor.lhs.false.532:                                ; preds = %land.lhs.true.526, %land.lhs.true.521, %land.lhs.true.516, %if.then.511
  %297 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %298 = bitcast %struct.rtx_def* %297 to i32*
  %bf.load533 = load i32, i32* %298, align 8
  %bf.clear534 = and i32 %bf.load533, 65535
  %cmp535 = icmp eq i32 %bf.clear534, 61
  br i1 %cmp535, label %if.end.544, label %lor.lhs.false.537

lor.lhs.false.537:                                ; preds = %lor.lhs.false.532
  %299 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %300 = bitcast %struct.rtx_def* %299 to i32*
  %bf.load538 = load i32, i32* %300, align 8
  %bf.clear539 = and i32 %bf.load538, 65535
  %cmp540 = icmp eq i32 %bf.clear539, 63
  br i1 %cmp540, label %if.end.544, label %if.then.542

if.then.542:                                      ; preds = %lor.lhs.false.537
  %301 = load i32, i32* %from_mode, align 4
  %302 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call543 = call %struct.rtx_def* @force_reg(i32 %301, %struct.rtx_def* %302)
  store %struct.rtx_def* %call543, %struct.rtx_def** %from.addr, align 8
  br label %if.end.544

if.end.544:                                       ; preds = %if.then.542, %lor.lhs.false.537, %lor.lhs.false.532, %land.lhs.true.526
  %303 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %304 = bitcast %struct.rtx_def* %303 to i32*
  %bf.load545 = load i32, i32* %304, align 8
  %bf.clear546 = and i32 %bf.load545, 65535
  %cmp547 = icmp eq i32 %bf.clear546, 61
  br i1 %cmp547, label %land.lhs.true.549, label %if.end.562

land.lhs.true.549:                                ; preds = %if.end.544
  %305 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %fld550 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %305, i32 0, i32 1
  %arrayidx551 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld550, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx551 to i32*
  %306 = load i32, i32* %rtuint, align 4
  %cmp552 = icmp ult i32 %306, 53
  br i1 %cmp552, label %land.lhs.true.554, label %if.end.562

land.lhs.true.554:                                ; preds = %land.lhs.true.549
  %307 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %fld555 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %307, i32 0, i32 1
  %arrayidx556 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld555, i32 0, i64 0
  %rtuint557 = bitcast %union.rtunion_def* %arrayidx556 to i32*
  %308 = load i32, i32* %rtuint557, align 4
  %309 = load i32, i32* %to_mode, align 4
  %call558 = call i32 @ix86_hard_regno_mode_ok(i32 %308, i32 %309)
  %tobool559 = icmp ne i32 %call558, 0
  br i1 %tobool559, label %if.end.562, label %if.then.560

if.then.560:                                      ; preds = %land.lhs.true.554
  %310 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call561 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %310)
  store %struct.rtx_def* %call561, %struct.rtx_def** %from.addr, align 8
  br label %if.end.562

if.end.562:                                       ; preds = %if.then.560, %land.lhs.true.554, %land.lhs.true.549, %if.end.544
  %311 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %312 = load i32, i32* %to_mode, align 4
  %313 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call563 = call %struct.rtx_def* @gen_lowpart(i32 %312, %struct.rtx_def* %313)
  %call564 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %311, %struct.rtx_def* %call563)
  br label %return

if.end.565:                                       ; preds = %if.end.502
  %314 = load i32, i32* %to_mode, align 4
  %idxprom566 = sext i32 %314 to i64
  %arrayidx567 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom566
  %315 = load i16, i16* %arrayidx567, align 2
  %conv568 = zext i16 %315 to i32
  %316 = load i32, i32* %from_mode, align 4
  %idxprom569 = sext i32 %316 to i64
  %arrayidx570 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom569
  %317 = load i16, i16* %arrayidx570, align 2
  %conv571 = zext i16 %317 to i32
  %cmp572 = icmp sgt i32 %conv568, %conv571
  br i1 %cmp572, label %if.then.574, label %if.end.631

if.then.574:                                      ; preds = %if.end.565
  %318 = load i32, i32* %to_mode, align 4
  %319 = load i32, i32* %from_mode, align 4
  %320 = load i32, i32* %unsignedp.addr, align 4
  %call575 = call i32 @can_extend_p(i32 %318, i32 %319, i32 %320)
  store i32 %call575, i32* %code, align 4
  %cmp576 = icmp ne i32 %call575, 1317
  br i1 %cmp576, label %if.then.578, label %if.else.583

if.then.578:                                      ; preds = %if.then.574
  %321 = load i32, i32* @flag_force_mem, align 4
  %tobool579 = icmp ne i32 %321, 0
  br i1 %tobool579, label %if.then.580, label %if.end.582

if.then.580:                                      ; preds = %if.then.578
  %322 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call581 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %322)
  store %struct.rtx_def* %call581, %struct.rtx_def** %from.addr, align 8
  br label %if.end.582

if.end.582:                                       ; preds = %if.then.580, %if.then.578
  %323 = load i32, i32* %code, align 4
  %324 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %325 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %326 = load i32, i32* %equiv_code, align 4
  call void @emit_unop_insn(i32 %323, %struct.rtx_def* %324, %struct.rtx_def* %325, i32 %326)
  br label %return

if.else.583:                                      ; preds = %if.then.574
  %327 = load i32, i32* %from_mode, align 4
  store i32 %327, i32* %intermediate, align 4
  br label %for.cond.585

for.cond.585:                                     ; preds = %for.inc.608, %if.else.583
  %328 = load i32, i32* %intermediate, align 4
  %cmp586 = icmp ne i32 %328, 0
  br i1 %cmp586, label %for.body.588, label %for.end.612

for.body.588:                                     ; preds = %for.cond.585
  %329 = load i32, i32* %to_mode, align 4
  %330 = load i32, i32* %intermediate, align 4
  %331 = load i32, i32* %unsignedp.addr, align 4
  %call589 = call i32 @can_extend_p(i32 %329, i32 %330, i32 %331)
  %cmp590 = icmp ne i32 %call589, 1317
  br i1 %cmp590, label %land.lhs.true.601, label %lor.lhs.false.592

lor.lhs.false.592:                                ; preds = %for.body.588
  %332 = load i32, i32* %to_mode, align 4
  %idxprom593 = sext i32 %332 to i64
  %arrayidx594 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom593
  %333 = load i8, i8* %arrayidx594, align 1
  %conv595 = zext i8 %333 to i32
  %334 = load i32, i32* %intermediate, align 4
  %idxprom596 = sext i32 %334 to i64
  %arrayidx597 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom596
  %335 = load i8, i8* %arrayidx597, align 1
  %conv598 = zext i8 %335 to i32
  %cmp599 = icmp slt i32 %conv595, %conv598
  br i1 %cmp599, label %land.lhs.true.601, label %if.end.607

land.lhs.true.601:                                ; preds = %lor.lhs.false.592, %for.body.588
  %336 = load i32, i32* %intermediate, align 4
  %337 = load i32, i32* %from_mode, align 4
  %338 = load i32, i32* %unsignedp.addr, align 4
  %call602 = call i32 @can_extend_p(i32 %336, i32 %337, i32 %338)
  %cmp603 = icmp ne i32 %call602, 1317
  br i1 %cmp603, label %if.then.605, label %if.end.607

if.then.605:                                      ; preds = %land.lhs.true.601
  %339 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %340 = load i32, i32* %intermediate, align 4
  %341 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %342 = load i32, i32* %unsignedp.addr, align 4
  %call606 = call %struct.rtx_def* @convert_to_mode(i32 %340, %struct.rtx_def* %341, i32 %342)
  %343 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %339, %struct.rtx_def* %call606, i32 %343)
  br label %return

if.end.607:                                       ; preds = %land.lhs.true.601, %lor.lhs.false.592
  br label %for.inc.608

for.inc.608:                                      ; preds = %if.end.607
  %344 = load i32, i32* %intermediate, align 4
  %idxprom609 = sext i32 %344 to i64
  %arrayidx610 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom609
  %345 = load i8, i8* %arrayidx610, align 1
  %conv611 = zext i8 %345 to i32
  store i32 %conv611, i32* %intermediate, align 4
  br label %for.cond.585

for.end.612:                                      ; preds = %for.cond.585
  %346 = load i32, i32* %to_mode, align 4
  %idxprom613 = sext i32 %346 to i64
  %arrayidx614 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom613
  %347 = load i16, i16* %arrayidx614, align 2
  %conv615 = zext i16 %347 to i32
  %348 = load i32, i32* %from_mode, align 4
  %idxprom616 = sext i32 %348 to i64
  %arrayidx617 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom616
  %349 = load i16, i16* %arrayidx617, align 2
  %conv618 = zext i16 %349 to i32
  %sub619 = sub nsw i32 %conv615, %conv618
  %conv620 = sext i32 %sub619 to i64
  %call621 = call %union.tree_node* @build_int_2_wide(i64 %conv620, i64 0)
  store %union.tree_node* %call621, %union.tree_node** %shift_amount, align 8
  %350 = load i32, i32* %to_mode, align 4
  %351 = load i32, i32* %from_mode, align 4
  %352 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call622 = call %struct.rtx_def* @force_reg(i32 %351, %struct.rtx_def* %352)
  %call623 = call %struct.rtx_def* @gen_lowpart(i32 %350, %struct.rtx_def* %call622)
  store %struct.rtx_def* %call623, %struct.rtx_def** %from.addr, align 8
  %353 = load i32, i32* %to_mode, align 4
  %354 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %355 = load %union.tree_node*, %union.tree_node** %shift_amount, align 8
  %356 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %357 = load i32, i32* %unsignedp.addr, align 4
  %call624 = call %struct.rtx_def* @expand_shift(i32 82, i32 %353, %struct.rtx_def* %354, %union.tree_node* %355, %struct.rtx_def* %356, i32 %357)
  store %struct.rtx_def* %call624, %struct.rtx_def** %tmp, align 8
  %358 = load i32, i32* %to_mode, align 4
  %359 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %360 = load %union.tree_node*, %union.tree_node** %shift_amount, align 8
  %361 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %362 = load i32, i32* %unsignedp.addr, align 4
  %call625 = call %struct.rtx_def* @expand_shift(i32 83, i32 %358, %struct.rtx_def* %359, %union.tree_node* %360, %struct.rtx_def* %361, i32 %362)
  store %struct.rtx_def* %call625, %struct.rtx_def** %tmp, align 8
  %363 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %364 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %cmp626 = icmp ne %struct.rtx_def* %363, %364
  br i1 %cmp626, label %if.then.628, label %if.end.630

if.then.628:                                      ; preds = %for.end.612
  %365 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %366 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call629 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %365, %struct.rtx_def* %366)
  br label %if.end.630

if.end.630:                                       ; preds = %if.then.628, %for.end.612
  br label %return

if.end.631:                                       ; preds = %if.end.565
  %367 = load i32, i32* %from_mode, align 4
  %cmp632 = icmp eq i32 %367, 5
  br i1 %cmp632, label %land.lhs.true.634, label %if.end.639

land.lhs.true.634:                                ; preds = %if.end.631
  %368 = load i32, i32* %to_mode, align 4
  %cmp635 = icmp eq i32 %368, 4
  br i1 %cmp635, label %if.then.637, label %if.end.639

if.then.637:                                      ; preds = %land.lhs.true.634
  %369 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %370 = load i32, i32* %from_mode, align 4
  %371 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call638 = call %struct.rtx_def* @force_reg(i32 %370, %struct.rtx_def* %371)
  %372 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %369, %struct.rtx_def* %call638, i32 %372)
  br label %return

if.end.639:                                       ; preds = %land.lhs.true.634, %if.end.631
  %373 = load i32, i32* %from_mode, align 4
  %cmp640 = icmp eq i32 %373, 5
  br i1 %cmp640, label %land.lhs.true.642, label %if.end.647

land.lhs.true.642:                                ; preds = %if.end.639
  %374 = load i32, i32* %to_mode, align 4
  %cmp643 = icmp eq i32 %374, 3
  br i1 %cmp643, label %if.then.645, label %if.end.647

if.then.645:                                      ; preds = %land.lhs.true.642
  %375 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %376 = load i32, i32* %from_mode, align 4
  %377 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call646 = call %struct.rtx_def* @force_reg(i32 %376, %struct.rtx_def* %377)
  %378 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %375, %struct.rtx_def* %call646, i32 %378)
  br label %return

if.end.647:                                       ; preds = %land.lhs.true.642, %if.end.639
  %379 = load i32, i32* %from_mode, align 4
  %cmp648 = icmp eq i32 %379, 5
  br i1 %cmp648, label %land.lhs.true.650, label %if.end.655

land.lhs.true.650:                                ; preds = %if.end.647
  %380 = load i32, i32* %to_mode, align 4
  %cmp651 = icmp eq i32 %380, 2
  br i1 %cmp651, label %if.then.653, label %if.end.655

if.then.653:                                      ; preds = %land.lhs.true.650
  %381 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %382 = load i32, i32* %from_mode, align 4
  %383 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call654 = call %struct.rtx_def* @force_reg(i32 %382, %struct.rtx_def* %383)
  %384 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %381, %struct.rtx_def* %call654, i32 %384)
  br label %return

if.end.655:                                       ; preds = %land.lhs.true.650, %if.end.647
  %385 = load i32, i32* %from_mode, align 4
  %cmp656 = icmp eq i32 %385, 4
  br i1 %cmp656, label %land.lhs.true.658, label %if.end.663

land.lhs.true.658:                                ; preds = %if.end.655
  %386 = load i32, i32* %to_mode, align 4
  %cmp659 = icmp eq i32 %386, 3
  br i1 %cmp659, label %if.then.661, label %if.end.663

if.then.661:                                      ; preds = %land.lhs.true.658
  %387 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %388 = load i32, i32* %from_mode, align 4
  %389 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call662 = call %struct.rtx_def* @force_reg(i32 %388, %struct.rtx_def* %389)
  %390 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %387, %struct.rtx_def* %call662, i32 %390)
  br label %return

if.end.663:                                       ; preds = %land.lhs.true.658, %if.end.655
  %391 = load i32, i32* %from_mode, align 4
  %cmp664 = icmp eq i32 %391, 4
  br i1 %cmp664, label %land.lhs.true.666, label %if.end.671

land.lhs.true.666:                                ; preds = %if.end.663
  %392 = load i32, i32* %to_mode, align 4
  %cmp667 = icmp eq i32 %392, 2
  br i1 %cmp667, label %if.then.669, label %if.end.671

if.then.669:                                      ; preds = %land.lhs.true.666
  %393 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %394 = load i32, i32* %from_mode, align 4
  %395 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call670 = call %struct.rtx_def* @force_reg(i32 %394, %struct.rtx_def* %395)
  %396 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %393, %struct.rtx_def* %call670, i32 %396)
  br label %return

if.end.671:                                       ; preds = %land.lhs.true.666, %if.end.663
  %397 = load i32, i32* %from_mode, align 4
  %cmp672 = icmp eq i32 %397, 3
  br i1 %cmp672, label %land.lhs.true.674, label %if.end.679

land.lhs.true.674:                                ; preds = %if.end.671
  %398 = load i32, i32* %to_mode, align 4
  %cmp675 = icmp eq i32 %398, 2
  br i1 %cmp675, label %if.then.677, label %if.end.679

if.then.677:                                      ; preds = %land.lhs.true.674
  %399 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %400 = load i32, i32* %from_mode, align 4
  %401 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call678 = call %struct.rtx_def* @force_reg(i32 %400, %struct.rtx_def* %401)
  %402 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %399, %struct.rtx_def* %call678, i32 %402)
  br label %return

if.end.679:                                       ; preds = %land.lhs.true.674, %if.end.671
  %403 = load i32, i32* %from_mode, align 4
  %cmp680 = icmp eq i32 %403, 6
  br i1 %cmp680, label %land.lhs.true.682, label %if.end.687

land.lhs.true.682:                                ; preds = %if.end.679
  %404 = load i32, i32* %to_mode, align 4
  %cmp683 = icmp eq i32 %404, 5
  br i1 %cmp683, label %if.then.685, label %if.end.687

if.then.685:                                      ; preds = %land.lhs.true.682
  %405 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %406 = load i32, i32* %from_mode, align 4
  %407 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call686 = call %struct.rtx_def* @force_reg(i32 %406, %struct.rtx_def* %407)
  %408 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %405, %struct.rtx_def* %call686, i32 %408)
  br label %return

if.end.687:                                       ; preds = %land.lhs.true.682, %if.end.679
  %409 = load i32, i32* %from_mode, align 4
  %cmp688 = icmp eq i32 %409, 6
  br i1 %cmp688, label %land.lhs.true.690, label %if.end.695

land.lhs.true.690:                                ; preds = %if.end.687
  %410 = load i32, i32* %to_mode, align 4
  %cmp691 = icmp eq i32 %410, 4
  br i1 %cmp691, label %if.then.693, label %if.end.695

if.then.693:                                      ; preds = %land.lhs.true.690
  %411 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %412 = load i32, i32* %from_mode, align 4
  %413 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call694 = call %struct.rtx_def* @force_reg(i32 %412, %struct.rtx_def* %413)
  %414 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %411, %struct.rtx_def* %call694, i32 %414)
  br label %return

if.end.695:                                       ; preds = %land.lhs.true.690, %if.end.687
  %415 = load i32, i32* %from_mode, align 4
  %cmp696 = icmp eq i32 %415, 6
  br i1 %cmp696, label %land.lhs.true.698, label %if.end.703

land.lhs.true.698:                                ; preds = %if.end.695
  %416 = load i32, i32* %to_mode, align 4
  %cmp699 = icmp eq i32 %416, 3
  br i1 %cmp699, label %if.then.701, label %if.end.703

if.then.701:                                      ; preds = %land.lhs.true.698
  %417 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %418 = load i32, i32* %from_mode, align 4
  %419 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call702 = call %struct.rtx_def* @force_reg(i32 %418, %struct.rtx_def* %419)
  %420 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %417, %struct.rtx_def* %call702, i32 %420)
  br label %return

if.end.703:                                       ; preds = %land.lhs.true.698, %if.end.695
  %421 = load i32, i32* %from_mode, align 4
  %cmp704 = icmp eq i32 %421, 6
  br i1 %cmp704, label %land.lhs.true.706, label %if.end.711

land.lhs.true.706:                                ; preds = %if.end.703
  %422 = load i32, i32* %to_mode, align 4
  %cmp707 = icmp eq i32 %422, 2
  br i1 %cmp707, label %if.then.709, label %if.end.711

if.then.709:                                      ; preds = %land.lhs.true.706
  %423 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %424 = load i32, i32* %from_mode, align 4
  %425 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call710 = call %struct.rtx_def* @force_reg(i32 %424, %struct.rtx_def* %425)
  %426 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %423, %struct.rtx_def* %call710, i32 %426)
  br label %return

if.end.711:                                       ; preds = %land.lhs.true.706, %if.end.703
  %427 = load i32, i32* %to_mode, align 4
  %idxprom712 = sext i32 %427 to i64
  %arrayidx713 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom712
  %428 = load i16, i16* %arrayidx713, align 2
  %conv714 = zext i16 %428 to i32
  %429 = load i32, i32* %from_mode, align 4
  %idxprom715 = sext i32 %429 to i64
  %arrayidx716 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom715
  %430 = load i16, i16* %arrayidx716, align 2
  %conv717 = zext i16 %430 to i32
  %cmp718 = icmp slt i32 %conv714, %conv717
  br i1 %cmp718, label %if.then.720, label %if.end.725

if.then.720:                                      ; preds = %if.end.711
  %431 = load i32, i32* %to_mode, align 4
  %432 = load i32, i32* %to_mode, align 4
  %433 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %call722 = call %struct.rtx_def* @gen_lowpart(i32 %432, %struct.rtx_def* %433)
  %call723 = call %struct.rtx_def* @force_reg(i32 %431, %struct.rtx_def* %call722)
  store %struct.rtx_def* %call723, %struct.rtx_def** %temp, align 8
  %434 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %435 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call724 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %434, %struct.rtx_def* %435)
  br label %return

if.end.725:                                       ; preds = %if.end.711
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1243, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.convert_move, i32 0, i32 0)) #6
  unreachable

return:                                           ; preds = %if.then.720, %if.then.709, %if.then.701, %if.then.693, %if.then.685, %if.then.677, %if.then.669, %if.then.661, %if.then.653, %if.then.645, %if.then.637, %if.end.630, %if.then.605, %if.end.582, %if.end.562, %if.end.443, %for.end, %if.end.322, %if.end.300, %if.end.254, %if.then.228, %if.then.218, %if.then.205, %if.then.195, %if.then.182, %if.then.168, %if.end.147, %if.then.96
  ret void
}

declare %struct.rtx_def* @gen_lowpart(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %y_cst = alloca %struct.rtx_def*, align 8
  %last_insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %mode, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %y_cst, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %2, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call1 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %3, i32 0)
  store %struct.rtx_def* %call1, %struct.rtx_def** %y.addr, align 8
  %4 = load i32, i32* %mode, align 4
  %cmp = icmp eq i32 %4, 51
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load2 = load i32, i32* %6, align 8
  %bf.lshr3 = lshr i32 %bf.load2, 16
  %bf.clear4 = and i32 %bf.lshr3, 255
  %7 = load i32, i32* %mode, align 4
  %cmp5 = icmp ne i32 %bf.clear4, %7
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load6 = load i32, i32* %9, align 8
  %bf.lshr7 = lshr i32 %bf.load6, 16
  %bf.clear8 = and i32 %bf.lshr7, 255
  %cmp9 = icmp ne i32 %bf.clear8, 0
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2769, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.emit_move_insn, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load10 = load i32, i32* %11, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 140
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.end
  br label %if.end.49

if.else:                                          ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load14 = load i32, i32* %13, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 67
  br i1 %cmp16, label %land.lhs.true.45, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %if.else
  %14 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load18 = load i32, i32* %15, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 68
  br i1 %cmp20, label %land.lhs.true.45, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %lor.lhs.false.17
  %16 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load22 = load i32, i32* %17, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 54
  br i1 %cmp24, label %land.lhs.true.45, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.21
  %18 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load26 = load i32, i32* %19, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 55
  br i1 %cmp28, label %land.lhs.true.45, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.25
  %20 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load30 = load i32, i32* %21, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 58
  br i1 %cmp32, label %land.lhs.true.45, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.29
  %22 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load34 = load i32, i32* %23, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp eq i32 %bf.clear35, 134
  br i1 %cmp36, label %land.lhs.true.45, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false.33
  %24 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load38 = load i32, i32* %25, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 56
  br i1 %cmp40, label %land.lhs.true.45, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %lor.lhs.false.37
  %26 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load42 = load i32, i32* %27, align 8
  %bf.clear43 = and i32 %bf.load42, 65535
  %cmp44 = icmp eq i32 %bf.clear43, 140
  br i1 %cmp44, label %land.lhs.true.45, label %if.end.48

land.lhs.true.45:                                 ; preds = %lor.lhs.false.41, %lor.lhs.false.37, %lor.lhs.false.33, %lor.lhs.false.29, %lor.lhs.false.25, %lor.lhs.false.21, %lor.lhs.false.17, %if.else
  br i1 true, label %if.end.48, label %if.then.46

if.then.46:                                       ; preds = %land.lhs.true.45
  %28 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %y_cst, align 8
  %29 = load i32, i32* %mode, align 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call47 = call %struct.rtx_def* @force_const_mem(i32 %29, %struct.rtx_def* %30)
  store %struct.rtx_def* %call47, %struct.rtx_def** %y.addr, align 8
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.46, %land.lhs.true.45, %lor.lhs.false.41
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.then.13
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load50 = load i32, i32* %32, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 66
  br i1 %cmp52, label %land.lhs.true.53, label %if.end.103

land.lhs.true.53:                                 ; preds = %if.end.49
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load54 = load i32, i32* %34, align 8
  %bf.lshr55 = lshr i32 %bf.load54, 16
  %bf.clear56 = and i32 %bf.lshr55, 255
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call57 = call i32 @memory_address_p(i32 %bf.clear56, %struct.rtx_def* %36)
  %tobool = icmp ne i32 %call57, 0
  br i1 %tobool, label %lor.lhs.false.64, label %land.lhs.true.58

land.lhs.true.58:                                 ; preds = %land.lhs.true.53
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load59 = load i32, i32* %39, align 8
  %bf.lshr60 = lshr i32 %bf.load59, 16
  %bf.clear61 = and i32 %bf.lshr60, 255
  %call62 = call i32 @push_operand(%struct.rtx_def* %37, i32 %bf.clear61)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %lor.lhs.false.64, label %if.then.101

lor.lhs.false.64:                                 ; preds = %land.lhs.true.58, %land.lhs.true.53
  %40 = load i32, i32* @flag_force_addr, align 4
  %tobool65 = icmp ne i32 %40, 0
  br i1 %tobool65, label %land.lhs.true.66, label %if.end.103

land.lhs.true.66:                                 ; preds = %lor.lhs.false.64
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 0
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx69, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load70 = load i32, i32* %43, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 67
  br i1 %cmp72, label %if.then.101, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %land.lhs.true.66
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i32 0, i64 0
  %rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx76, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load77 = load i32, i32* %46, align 8
  %bf.clear78 = and i32 %bf.load77, 65535
  %cmp79 = icmp eq i32 %bf.clear78, 68
  br i1 %cmp79, label %if.then.101, label %lor.lhs.false.80

lor.lhs.false.80:                                 ; preds = %lor.lhs.false.73
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 0
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx83, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load84 = load i32, i32* %49, align 8
  %bf.clear85 = and i32 %bf.load84, 65535
  %cmp86 = icmp eq i32 %bf.clear85, 54
  br i1 %cmp86, label %if.then.101, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %lor.lhs.false.80
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx90, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load91 = load i32, i32* %52, align 8
  %bf.clear92 = and i32 %bf.load91, 65535
  %cmp93 = icmp eq i32 %bf.clear92, 58
  br i1 %cmp93, label %if.then.101, label %lor.lhs.false.94

lor.lhs.false.94:                                 ; preds = %lor.lhs.false.87
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 0
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx97, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load98 = load i32, i32* %55, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 55
  br i1 %cmp100, label %if.then.101, label %if.end.103

if.then.101:                                      ; preds = %lor.lhs.false.94, %lor.lhs.false.87, %lor.lhs.false.80, %lor.lhs.false.73, %land.lhs.true.66, %land.lhs.true.58
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call102 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %56)
  store %struct.rtx_def* %call102, %struct.rtx_def** %x.addr, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.101, %lor.lhs.false.94, %lor.lhs.false.64, %if.end.49
  %57 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load104 = load i32, i32* %58, align 8
  %bf.clear105 = and i32 %bf.load104, 65535
  %cmp106 = icmp eq i32 %bf.clear105, 66
  br i1 %cmp106, label %land.lhs.true.107, label %if.end.155

land.lhs.true.107:                                ; preds = %if.end.103
  %59 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %60 = bitcast %struct.rtx_def* %59 to i32*
  %bf.load108 = load i32, i32* %60, align 8
  %bf.lshr109 = lshr i32 %bf.load108, 16
  %bf.clear110 = and i32 %bf.lshr109, 255
  %61 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 0
  %rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx113, align 8
  %call114 = call i32 @memory_address_p(i32 %bf.clear110, %struct.rtx_def* %62)
  %tobool115 = icmp ne i32 %call114, 0
  br i1 %tobool115, label %lor.lhs.false.116, label %if.then.153

lor.lhs.false.116:                                ; preds = %land.lhs.true.107
  %63 = load i32, i32* @flag_force_addr, align 4
  %tobool117 = icmp ne i32 %63, 0
  br i1 %tobool117, label %land.lhs.true.118, label %if.end.155

land.lhs.true.118:                                ; preds = %lor.lhs.false.116
  %64 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i32 0, i64 0
  %rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx121, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load122 = load i32, i32* %66, align 8
  %bf.clear123 = and i32 %bf.load122, 65535
  %cmp124 = icmp eq i32 %bf.clear123, 67
  br i1 %cmp124, label %if.then.153, label %lor.lhs.false.125

lor.lhs.false.125:                                ; preds = %land.lhs.true.118
  %67 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 0
  %rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtx128, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load129 = load i32, i32* %69, align 8
  %bf.clear130 = and i32 %bf.load129, 65535
  %cmp131 = icmp eq i32 %bf.clear130, 68
  br i1 %cmp131, label %if.then.153, label %lor.lhs.false.132

lor.lhs.false.132:                                ; preds = %lor.lhs.false.125
  %70 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i32 0, i64 0
  %rtx135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtx135, align 8
  %72 = bitcast %struct.rtx_def* %71 to i32*
  %bf.load136 = load i32, i32* %72, align 8
  %bf.clear137 = and i32 %bf.load136, 65535
  %cmp138 = icmp eq i32 %bf.clear137, 54
  br i1 %cmp138, label %if.then.153, label %lor.lhs.false.139

lor.lhs.false.139:                                ; preds = %lor.lhs.false.132
  %73 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i32 0, i64 0
  %rtx142 = bitcast %union.rtunion_def* %arrayidx141 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtx142, align 8
  %75 = bitcast %struct.rtx_def* %74 to i32*
  %bf.load143 = load i32, i32* %75, align 8
  %bf.clear144 = and i32 %bf.load143, 65535
  %cmp145 = icmp eq i32 %bf.clear144, 58
  br i1 %cmp145, label %if.then.153, label %lor.lhs.false.146

lor.lhs.false.146:                                ; preds = %lor.lhs.false.139
  %76 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld147, i32 0, i64 0
  %rtx149 = bitcast %union.rtunion_def* %arrayidx148 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx149, align 8
  %78 = bitcast %struct.rtx_def* %77 to i32*
  %bf.load150 = load i32, i32* %78, align 8
  %bf.clear151 = and i32 %bf.load150, 65535
  %cmp152 = icmp eq i32 %bf.clear151, 55
  br i1 %cmp152, label %if.then.153, label %if.end.155

if.then.153:                                      ; preds = %lor.lhs.false.146, %lor.lhs.false.139, %lor.lhs.false.132, %lor.lhs.false.125, %land.lhs.true.118, %land.lhs.true.107
  %79 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call154 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %79)
  store %struct.rtx_def* %call154, %struct.rtx_def** %y.addr, align 8
  br label %if.end.155

if.end.155:                                       ; preds = %if.then.153, %lor.lhs.false.146, %lor.lhs.false.116, %if.end.103
  %80 = load i32, i32* %mode, align 4
  %cmp156 = icmp eq i32 %80, 51
  br i1 %cmp156, label %if.then.157, label %if.end.158

if.then.157:                                      ; preds = %if.end.155
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2796, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.emit_move_insn, i32 0, i32 0)) #6
  unreachable

if.end.158:                                       ; preds = %if.end.155
  %81 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call159 = call %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def* %81, %struct.rtx_def* %82)
  store %struct.rtx_def* %call159, %struct.rtx_def** %last_insn, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %y_cst, align 8
  %tobool160 = icmp ne %struct.rtx_def* %83, null
  br i1 %tobool160, label %land.lhs.true.161, label %if.end.167

land.lhs.true.161:                                ; preds = %if.end.158
  %84 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %85 = bitcast %struct.rtx_def* %84 to i32*
  %bf.load162 = load i32, i32* %85, align 8
  %bf.clear163 = and i32 %bf.load162, 65535
  %cmp164 = icmp eq i32 %bf.clear163, 61
  br i1 %cmp164, label %if.then.165, label %if.end.167

if.then.165:                                      ; preds = %land.lhs.true.161
  %86 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  %87 = load %struct.rtx_def*, %struct.rtx_def** %y_cst, align 8
  %call166 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %86, i32 4, %struct.rtx_def* %87)
  br label %if.end.167

if.end.167:                                       ; preds = %if.then.165, %land.lhs.true.161, %if.end.158
  %88 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  ret %struct.rtx_def* %88
}

declare %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #1

declare i32 @can_extend_p(i32, i32, i32) #1

declare void @emit_unop_insn(i32, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @emit_library_call_value(%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) #1

declare %struct.rtx_def* @get_insns() #1

declare void @emit_libcall_block(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #1

declare i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @convert_to_mode(i32 %mode, %struct.rtx_def* %x, i32 %unsignedp) #0 {
entry:
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = load i32, i32* %unsignedp.addr, align 4
  %call = call %struct.rtx_def* @convert_modes(i32 %0, i32 0, %struct.rtx_def* %1, i32 %2)
  ret %struct.rtx_def* %call
}

declare void @emit_cmp_insn(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32) #1

declare %struct.rtx_def* @gen_slt(%struct.rtx_def*) #1

declare %struct.rtx_def* @expand_shift(i32, i32, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, i32) #1

declare %union.tree_node* @size_int_wide(i64, i32) #1

declare %struct.rtx_def* @operand_subword(%struct.rtx_def*, i32, i32, i32) #1

declare %struct.rtx_def* @emit_no_conflict_block(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @mode_dependent_address_p(%struct.rtx_def*) #1

declare %struct.rtx_def* @force_not_mem(%struct.rtx_def*) #1

declare %union.tree_node* @build_int_2_wide(i64, i64) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @convert_modes(i32 %mode, i32 %oldmode, %struct.rtx_def* %x, i32 %unsignedp) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %oldmode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %val = alloca i64, align 8
  %width = alloca i32, align 4
  %val145 = alloca i64, align 8
  %width149 = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %oldmode, i32* %oldmode.addr, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 63
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load1, 28
  %bf.clear2 = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear2, 0
  br i1 %tobool, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load4 = load i32, i32* %6, align 8
  %bf.lshr5 = lshr i32 %bf.load4, 16
  %bf.clear6 = and i32 %bf.lshr5, 255
  %idxprom = sext i32 %bf.clear6 to i64
  %arrayidx7 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx7, align 1
  %conv = zext i8 %7 to i32
  %8 = load i32, i32* %mode.addr, align 4
  %idxprom8 = sext i32 %8 to i64
  %arrayidx9 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom8
  %9 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %9 to i32
  %cmp11 = icmp sge i32 %conv, %conv10
  br i1 %cmp11, label %land.lhs.true.13, label %if.end

land.lhs.true.13:                                 ; preds = %land.lhs.true.3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load14 = load i32, i32* %11, align 8
  %bf.lshr15 = lshr i32 %bf.load14, 26
  %bf.clear16 = and i32 %bf.lshr15, 1
  %12 = load i32, i32* %unsignedp.addr, align 4
  %cmp17 = icmp eq i32 %bf.clear16, %12
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.13
  %13 = load i32, i32* %mode.addr, align 4
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 %13, %struct.rtx_def* %14)
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.13, %land.lhs.true.3, %land.lhs.true, %entry
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load19 = load i32, i32* %16, align 8
  %bf.lshr20 = lshr i32 %bf.load19, 16
  %bf.clear21 = and i32 %bf.lshr20, 255
  %cmp22 = icmp ne i32 %bf.clear21, 0
  br i1 %cmp22, label %if.then.24, label %if.end.28

if.then.24:                                       ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load25 = load i32, i32* %18, align 8
  %bf.lshr26 = lshr i32 %bf.load25, 16
  %bf.clear27 = and i32 %bf.lshr26, 255
  store i32 %bf.clear27, i32* %oldmode.addr, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.24, %if.end
  %19 = load i32, i32* %mode.addr, align 4
  %20 = load i32, i32* %oldmode.addr, align 4
  %cmp29 = icmp eq i32 %19, %20
  br i1 %cmp29, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end.28
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %retval
  br label %return

if.end.32:                                        ; preds = %if.end.28
  %22 = load i32, i32* %unsignedp.addr, align 4
  %tobool33 = icmp ne i32 %22, 0
  br i1 %tobool33, label %land.lhs.true.34, label %if.end.73

land.lhs.true.34:                                 ; preds = %if.end.32
  %23 = load i32, i32* %mode.addr, align 4
  %idxprom35 = sext i32 %23 to i64
  %arrayidx36 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom35
  %24 = load i32, i32* %arrayidx36, align 4
  %cmp37 = icmp eq i32 %24, 1
  br i1 %cmp37, label %land.lhs.true.39, label %if.end.73

land.lhs.true.39:                                 ; preds = %land.lhs.true.34
  %25 = load i32, i32* %mode.addr, align 4
  %idxprom40 = sext i32 %25 to i64
  %arrayidx41 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom40
  %26 = load i16, i16* %arrayidx41, align 2
  %conv42 = zext i16 %26 to i32
  %cmp43 = icmp eq i32 %conv42, 128
  br i1 %cmp43, label %land.lhs.true.45, label %if.end.73

land.lhs.true.45:                                 ; preds = %land.lhs.true.39
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load46 = load i32, i32* %28, align 8
  %bf.clear47 = and i32 %bf.load46, 65535
  %cmp48 = icmp eq i32 %bf.clear47, 54
  br i1 %cmp48, label %land.lhs.true.50, label %if.end.73

land.lhs.true.50:                                 ; preds = %land.lhs.true.45
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx52 to i64*
  %30 = load i64, i64* %rtwint, align 8
  %cmp53 = icmp slt i64 %30, 0
  br i1 %cmp53, label %if.then.55, label %if.end.73

if.then.55:                                       ; preds = %land.lhs.true.50
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 0
  %rtwint58 = bitcast %union.rtunion_def* %arrayidx57 to i64*
  %32 = load i64, i64* %rtwint58, align 8
  store i64 %32, i64* %val, align 8
  %33 = load i32, i32* %oldmode.addr, align 4
  %cmp59 = icmp ne i32 %33, 0
  br i1 %cmp59, label %land.lhs.true.61, label %if.end.71

land.lhs.true.61:                                 ; preds = %if.then.55
  %34 = load i32, i32* %oldmode.addr, align 4
  %idxprom62 = sext i32 %34 to i64
  %arrayidx63 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom62
  %35 = load i16, i16* %arrayidx63, align 2
  %conv64 = zext i16 %35 to i32
  %cmp65 = icmp sgt i32 64, %conv64
  br i1 %cmp65, label %if.then.67, label %if.end.71

if.then.67:                                       ; preds = %land.lhs.true.61
  %36 = load i32, i32* %oldmode.addr, align 4
  %idxprom68 = sext i32 %36 to i64
  %arrayidx69 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom68
  %37 = load i16, i16* %arrayidx69, align 2
  %conv70 = zext i16 %37 to i32
  store i32 %conv70, i32* %width, align 4
  %38 = load i32, i32* %width, align 4
  %sh_prom = zext i32 %38 to i64
  %shl = shl i64 1, %sh_prom
  %sub = sub nsw i64 %shl, 1
  %39 = load i64, i64* %val, align 8
  %and = and i64 %39, %sub
  store i64 %and, i64* %val, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.67, %land.lhs.true.61, %if.then.55
  %40 = load i64, i64* %val, align 8
  %41 = load i32, i32* %mode.addr, align 4
  %call72 = call %struct.rtx_def* @immed_double_const(i64 %40, i64 0, i32 %41)
  store %struct.rtx_def* %call72, %struct.rtx_def** %retval
  br label %return

if.end.73:                                        ; preds = %land.lhs.true.50, %land.lhs.true.45, %land.lhs.true.39, %land.lhs.true.34, %if.end.32
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load74 = load i32, i32* %43, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 54
  br i1 %cmp76, label %land.lhs.true.78, label %lor.lhs.false

land.lhs.true.78:                                 ; preds = %if.end.73
  %44 = load i32, i32* %mode.addr, align 4
  %idxprom79 = sext i32 %44 to i64
  %arrayidx80 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom79
  %45 = load i16, i16* %arrayidx80, align 2
  %conv81 = zext i16 %45 to i32
  %cmp82 = icmp sle i32 %conv81, 64
  br i1 %cmp82, label %if.then.127, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.78, %if.end.73
  %46 = load i32, i32* %mode.addr, align 4
  %idxprom84 = sext i32 %46 to i64
  %arrayidx85 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom84
  %47 = load i32, i32* %arrayidx85, align 4
  %cmp86 = icmp eq i32 %47, 1
  br i1 %cmp86, label %land.lhs.true.88, label %if.end.172

land.lhs.true.88:                                 ; preds = %lor.lhs.false
  %48 = load i32, i32* %oldmode.addr, align 4
  %idxprom89 = sext i32 %48 to i64
  %arrayidx90 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom89
  %49 = load i32, i32* %arrayidx90, align 4
  %cmp91 = icmp eq i32 %49, 1
  br i1 %cmp91, label %land.lhs.true.93, label %if.end.172

land.lhs.true.93:                                 ; preds = %land.lhs.true.88
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load94 = load i32, i32* %51, align 8
  %bf.clear95 = and i32 %bf.load94, 65535
  %cmp96 = icmp eq i32 %bf.clear95, 55
  br i1 %cmp96, label %if.then.127, label %lor.lhs.false.98

lor.lhs.false.98:                                 ; preds = %land.lhs.true.93
  %52 = load i32, i32* %mode.addr, align 4
  %idxprom99 = sext i32 %52 to i64
  %arrayidx100 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom99
  %53 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %53 to i32
  %54 = load i32, i32* %oldmode.addr, align 4
  %idxprom102 = sext i32 %54 to i64
  %arrayidx103 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom102
  %55 = load i8, i8* %arrayidx103, align 1
  %conv104 = zext i8 %55 to i32
  %cmp105 = icmp sle i32 %conv101, %conv104
  br i1 %cmp105, label %land.lhs.true.107, label %if.end.172

land.lhs.true.107:                                ; preds = %lor.lhs.false.98
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %bf.load108 = load i32, i32* %57, align 8
  %bf.clear109 = and i32 %bf.load108, 65535
  %cmp110 = icmp eq i32 %bf.clear109, 66
  br i1 %cmp110, label %land.lhs.true.112, label %lor.lhs.false.122

land.lhs.true.112:                                ; preds = %land.lhs.true.107
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load113 = load i32, i32* %59, align 8
  %bf.lshr114 = lshr i32 %bf.load113, 27
  %bf.clear115 = and i32 %bf.lshr114, 1
  %tobool116 = icmp ne i32 %bf.clear115, 0
  br i1 %tobool116, label %lor.lhs.false.122, label %land.lhs.true.117

land.lhs.true.117:                                ; preds = %land.lhs.true.112
  %60 = load i32, i32* %mode.addr, align 4
  %idxprom118 = sext i32 %60 to i64
  %arrayidx119 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_load, i32 0, i64 %idxprom118
  %61 = load i8, i8* %arrayidx119, align 1
  %conv120 = sext i8 %61 to i32
  %tobool121 = icmp ne i32 %conv120, 0
  br i1 %tobool121, label %if.then.127, label %lor.lhs.false.122

lor.lhs.false.122:                                ; preds = %land.lhs.true.117, %land.lhs.true.112, %land.lhs.true.107
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load123 = load i32, i32* %63, align 8
  %bf.clear124 = and i32 %bf.load123, 65535
  %cmp125 = icmp eq i32 %bf.clear124, 61
  br i1 %cmp125, label %if.then.127, label %if.end.172

if.then.127:                                      ; preds = %lor.lhs.false.122, %land.lhs.true.117, %land.lhs.true.93, %land.lhs.true.78
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %65 = bitcast %struct.rtx_def* %64 to i32*
  %bf.load128 = load i32, i32* %65, align 8
  %bf.clear129 = and i32 %bf.load128, 65535
  %cmp130 = icmp eq i32 %bf.clear129, 54
  br i1 %cmp130, label %land.lhs.true.132, label %if.end.170

land.lhs.true.132:                                ; preds = %if.then.127
  %66 = load i32, i32* %oldmode.addr, align 4
  %cmp133 = icmp ne i32 %66, 0
  br i1 %cmp133, label %land.lhs.true.135, label %if.end.170

land.lhs.true.135:                                ; preds = %land.lhs.true.132
  %67 = load i32, i32* %mode.addr, align 4
  %idxprom136 = sext i32 %67 to i64
  %arrayidx137 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom136
  %68 = load i8, i8* %arrayidx137, align 1
  %conv138 = zext i8 %68 to i32
  %69 = load i32, i32* %oldmode.addr, align 4
  %idxprom139 = sext i32 %69 to i64
  %arrayidx140 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom139
  %70 = load i8, i8* %arrayidx140, align 1
  %conv141 = zext i8 %70 to i32
  %cmp142 = icmp sgt i32 %conv138, %conv141
  br i1 %cmp142, label %if.then.144, label %if.end.170

if.then.144:                                      ; preds = %land.lhs.true.135
  %71 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld146 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i32 0, i64 0
  %rtwint148 = bitcast %union.rtunion_def* %arrayidx147 to i64*
  %72 = load i64, i64* %rtwint148, align 8
  store i64 %72, i64* %val145, align 8
  %73 = load i32, i32* %oldmode.addr, align 4
  %idxprom150 = sext i32 %73 to i64
  %arrayidx151 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom150
  %74 = load i16, i16* %arrayidx151, align 2
  %conv152 = zext i16 %74 to i32
  store i32 %conv152, i32* %width149, align 4
  %75 = load i32, i32* %width149, align 4
  %sh_prom153 = zext i32 %75 to i64
  %shl154 = shl i64 1, %sh_prom153
  %sub155 = sub nsw i64 %shl154, 1
  %76 = load i64, i64* %val145, align 8
  %and156 = and i64 %76, %sub155
  store i64 %and156, i64* %val145, align 8
  %77 = load i32, i32* %unsignedp.addr, align 4
  %tobool157 = icmp ne i32 %77, 0
  br i1 %tobool157, label %if.end.167, label %land.lhs.true.158

land.lhs.true.158:                                ; preds = %if.then.144
  %78 = load i64, i64* %val145, align 8
  %79 = load i32, i32* %width149, align 4
  %sub159 = sub nsw i32 %79, 1
  %sh_prom160 = zext i32 %sub159 to i64
  %shl161 = shl i64 1, %sh_prom160
  %and162 = and i64 %78, %shl161
  %tobool163 = icmp ne i64 %and162, 0
  br i1 %tobool163, label %if.then.164, label %if.end.167

if.then.164:                                      ; preds = %land.lhs.true.158
  %80 = load i32, i32* %width149, align 4
  %sh_prom165 = zext i32 %80 to i64
  %shl166 = shl i64 -1, %sh_prom165
  %81 = load i64, i64* %val145, align 8
  %or = or i64 %81, %shl166
  store i64 %or, i64* %val145, align 8
  br label %if.end.167

if.end.167:                                       ; preds = %if.then.164, %land.lhs.true.158, %if.then.144
  %82 = load i64, i64* %val145, align 8
  %83 = load i32, i32* %mode.addr, align 4
  %call168 = call i64 @trunc_int_for_mode(i64 %82, i32 %83)
  %call169 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call168)
  store %struct.rtx_def* %call169, %struct.rtx_def** %retval
  br label %return

if.end.170:                                       ; preds = %land.lhs.true.135, %land.lhs.true.132, %if.then.127
  %84 = load i32, i32* %mode.addr, align 4
  %85 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call171 = call %struct.rtx_def* @gen_lowpart(i32 %84, %struct.rtx_def* %85)
  store %struct.rtx_def* %call171, %struct.rtx_def** %retval
  br label %return

if.end.172:                                       ; preds = %lor.lhs.false.122, %lor.lhs.false.98, %land.lhs.true.88, %lor.lhs.false
  %86 = load i32, i32* %mode.addr, align 4
  %call173 = call %struct.rtx_def* @gen_reg_rtx(i32 %86)
  store %struct.rtx_def* %call173, %struct.rtx_def** %temp, align 8
  %87 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %89 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %87, %struct.rtx_def* %88, i32 %89)
  %90 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %90, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.172, %if.end.170, %if.end.167, %if.end.71, %if.then.31
  %91 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %91
}

declare %struct.rtx_def* @immed_double_const(i64, i64, i32) #1

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

declare i64 @trunc_int_for_mode(i64, i32) #1

; Function Attrs: nounwind uwtable
define void @move_by_pieces(%struct.rtx_def* %to, %struct.rtx_def* %from, i64 %len, i32 %align) #0 {
entry:
  %to.addr = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.rtx_def*, align 8
  %len.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  %data = alloca %struct.move_by_pieces, align 8
  %to_addr = alloca %struct.rtx_def*, align 8
  %from_addr = alloca %struct.rtx_def*, align 8
  %max_size = alloca i32, align 4
  %mode = alloca i32, align 4
  %tmode = alloca i32, align 4
  %icode = alloca i32, align 4
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %from_addr, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 8, i32 4
  %add = add nsw i32 %cond, 1
  store i32 %add, i32* %max_size, align 4
  store i32 0, i32* %mode, align 4
  %offset = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 9
  store i64 0, i64* %offset, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %from_addr1 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 5
  store %struct.rtx_def* %3, %struct.rtx_def** %from_addr1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %tobool2 = icmp ne %struct.rtx_def* %4, null
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx5, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %to_addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %to6 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 0
  store %struct.rtx_def* %7, %struct.rtx_def** %to6, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load = load i32, i32* %9, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 97
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load7 = load i32, i32* %11, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 96
  br i1 %cmp9, label %lor.end, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load11 = load i32, i32* %13, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 99
  br i1 %cmp13, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.10
  %14 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load14 = load i32, i32* %15, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 98
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.10, %lor.lhs.false, %if.then
  %16 = phi i1 [ true, %lor.lhs.false.10 ], [ true, %lor.lhs.false ], [ true, %if.then ], [ %cmp16, %lor.rhs ]
  %lor.ext = zext i1 %16 to i32
  %autinc_to = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 2
  store i32 %lor.ext, i32* %autinc_to, align 4
  %17 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load17 = load i32, i32* %18, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 96
  br i1 %cmp19, label %lor.end.24, label %lor.rhs.20

lor.rhs.20:                                       ; preds = %lor.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load21 = load i32, i32* %20, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 98
  br label %lor.end.24

lor.end.24:                                       ; preds = %lor.rhs.20, %lor.end
  %21 = phi i1 [ true, %lor.end ], [ %cmp23, %lor.rhs.20 ]
  %lor.ext25 = zext i1 %21 to i32
  %reverse = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 10
  store i32 %lor.ext25, i32* %reverse, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %to_addr, align 8
  %to26 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 0
  store %struct.rtx_def* null, %struct.rtx_def** %to26, align 8
  %autinc_to27 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 2
  store i32 1, i32* %autinc_to27, align 4
  %reverse28 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 10
  store i32 1, i32* %reverse28, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %lor.end.24
  %22 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %to_addr29 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 1
  store %struct.rtx_def* %22, %struct.rtx_def** %to_addr29, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8
  %from30 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 4
  store %struct.rtx_def* %23, %struct.rtx_def** %from30, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load31 = load i32, i32* %25, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 97
  br i1 %cmp33, label %lor.end.46, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %if.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load35 = load i32, i32* %27, align 8
  %bf.clear36 = and i32 %bf.load35, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 96
  br i1 %cmp37, label %lor.end.46, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %lor.lhs.false.34
  %28 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load39 = load i32, i32* %29, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp eq i32 %bf.clear40, 99
  br i1 %cmp41, label %lor.end.46, label %lor.rhs.42

lor.rhs.42:                                       ; preds = %lor.lhs.false.38
  %30 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load43 = load i32, i32* %31, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 98
  br label %lor.end.46

lor.end.46:                                       ; preds = %lor.rhs.42, %lor.lhs.false.38, %lor.lhs.false.34, %if.end
  %32 = phi i1 [ true, %lor.lhs.false.38 ], [ true, %lor.lhs.false.34 ], [ true, %if.end ], [ %cmp45, %lor.rhs.42 ]
  %lor.ext47 = zext i1 %32 to i32
  %autinc_from = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 6
  store i32 %lor.ext47, i32* %autinc_from, align 4
  %explicit_inc_from = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 7
  store i32 0, i32* %explicit_inc_from, align 4
  %explicit_inc_to = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 3
  store i32 0, i32* %explicit_inc_to, align 4
  %reverse48 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 10
  %33 = load i32, i32* %reverse48, align 4
  %tobool49 = icmp ne i32 %33, 0
  br i1 %tobool49, label %if.then.50, label %if.end.52

if.then.50:                                       ; preds = %lor.end.46
  %34 = load i64, i64* %len.addr, align 8
  %offset51 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 9
  store i64 %34, i64* %offset51, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.50, %lor.end.46
  %35 = load i64, i64* %len.addr, align 8
  %len53 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 8
  store i64 %35, i64* %len53, align 8
  %autinc_from54 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 6
  %36 = load i32, i32* %autinc_from54, align 4
  %tobool55 = icmp ne i32 %36, 0
  br i1 %tobool55, label %land.lhs.true, label %land.lhs.true.58

land.lhs.true:                                    ; preds = %if.end.52
  %autinc_to56 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 2
  %37 = load i32, i32* %autinc_to56, align 4
  %tobool57 = icmp ne i32 %37, 0
  br i1 %tobool57, label %if.end.162, label %land.lhs.true.58

land.lhs.true.58:                                 ; preds = %land.lhs.true, %if.end.52
  %38 = load i64, i64* %len.addr, align 8
  %39 = load i32, i32* %align.addr, align 4
  %call = call i64 @move_by_pieces_ninsns(i64 %38, i32 %39)
  %cmp59 = icmp ugt i64 %call, 2
  br i1 %cmp59, label %if.then.60, label %if.end.162

if.then.60:                                       ; preds = %land.lhs.true.58
  %40 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %40, i32* %tmode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.60
  %41 = load i32, i32* %tmode, align 4
  %cmp61 = icmp ne i32 %41, 0
  br i1 %cmp61, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %42 = load i32, i32* %tmode, align 4
  %idxprom = sext i32 %42 to i64
  %arrayidx62 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %43 = load i8, i8* %arrayidx62, align 1
  %conv = zext i8 %43 to i32
  %44 = load i32, i32* %max_size, align 4
  %cmp63 = icmp ult i32 %conv, %44
  br i1 %cmp63, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %for.body
  %45 = load i32, i32* %tmode, align 4
  store i32 %45, i32* %mode, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.65, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.66
  %46 = load i32, i32* %tmode, align 4
  %idxprom67 = sext i32 %46 to i64
  %arrayidx68 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom67
  %47 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %47 to i32
  store i32 %conv69, i32* %tmode, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %autinc_from70 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 6
  %48 = load i32, i32* %autinc_from70, align 4
  %tobool71 = icmp ne i32 %48, 0
  br i1 %tobool71, label %if.end.115, label %land.lhs.true.72

land.lhs.true.72:                                 ; preds = %for.end
  %49 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load73 = load i32, i32* %50, align 8
  %bf.clear74 = and i32 %bf.load73, 65535
  %cmp75 = icmp eq i32 %bf.clear74, 67
  br i1 %cmp75, label %if.then.112, label %lor.lhs.false.77

lor.lhs.false.77:                                 ; preds = %land.lhs.true.72
  %51 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load78 = load i32, i32* %52, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  %cmp80 = icmp eq i32 %bf.clear79, 68
  br i1 %cmp80, label %if.then.112, label %lor.lhs.false.82

lor.lhs.false.82:                                 ; preds = %lor.lhs.false.77
  %53 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load83 = load i32, i32* %54, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 54
  br i1 %cmp85, label %if.then.112, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %lor.lhs.false.82
  %55 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load88 = load i32, i32* %56, align 8
  %bf.clear89 = and i32 %bf.load88, 65535
  %cmp90 = icmp eq i32 %bf.clear89, 55
  br i1 %cmp90, label %if.then.112, label %lor.lhs.false.92

lor.lhs.false.92:                                 ; preds = %lor.lhs.false.87
  %57 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load93 = load i32, i32* %58, align 8
  %bf.clear94 = and i32 %bf.load93, 65535
  %cmp95 = icmp eq i32 %bf.clear94, 58
  br i1 %cmp95, label %if.then.112, label %lor.lhs.false.97

lor.lhs.false.97:                                 ; preds = %lor.lhs.false.92
  %59 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %60 = bitcast %struct.rtx_def* %59 to i32*
  %bf.load98 = load i32, i32* %60, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 134
  br i1 %cmp100, label %if.then.112, label %lor.lhs.false.102

lor.lhs.false.102:                                ; preds = %lor.lhs.false.97
  %61 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load103 = load i32, i32* %62, align 8
  %bf.clear104 = and i32 %bf.load103, 65535
  %cmp105 = icmp eq i32 %bf.clear104, 56
  br i1 %cmp105, label %if.then.112, label %lor.lhs.false.107

lor.lhs.false.107:                                ; preds = %lor.lhs.false.102
  %63 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load108 = load i32, i32* %64, align 8
  %bf.clear109 = and i32 %bf.load108, 65535
  %cmp110 = icmp eq i32 %bf.clear109, 140
  br i1 %cmp110, label %if.then.112, label %if.end.115

if.then.112:                                      ; preds = %lor.lhs.false.107, %lor.lhs.false.102, %lor.lhs.false.97, %lor.lhs.false.92, %lor.lhs.false.87, %lor.lhs.false.82, %lor.lhs.false.77, %land.lhs.true.72
  %65 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %call113 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %65)
  %from_addr114 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 5
  store %struct.rtx_def* %call113, %struct.rtx_def** %from_addr114, align 8
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.112, %lor.lhs.false.107, %for.end
  %autinc_to116 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 2
  %66 = load i32, i32* %autinc_to116, align 4
  %tobool117 = icmp ne i32 %66, 0
  br i1 %tobool117, label %if.end.161, label %land.lhs.true.118

land.lhs.true.118:                                ; preds = %if.end.115
  %67 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %68 = bitcast %struct.rtx_def* %67 to i32*
  %bf.load119 = load i32, i32* %68, align 8
  %bf.clear120 = and i32 %bf.load119, 65535
  %cmp121 = icmp eq i32 %bf.clear120, 67
  br i1 %cmp121, label %if.then.158, label %lor.lhs.false.123

lor.lhs.false.123:                                ; preds = %land.lhs.true.118
  %69 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load124 = load i32, i32* %70, align 8
  %bf.clear125 = and i32 %bf.load124, 65535
  %cmp126 = icmp eq i32 %bf.clear125, 68
  br i1 %cmp126, label %if.then.158, label %lor.lhs.false.128

lor.lhs.false.128:                                ; preds = %lor.lhs.false.123
  %71 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %72 = bitcast %struct.rtx_def* %71 to i32*
  %bf.load129 = load i32, i32* %72, align 8
  %bf.clear130 = and i32 %bf.load129, 65535
  %cmp131 = icmp eq i32 %bf.clear130, 54
  br i1 %cmp131, label %if.then.158, label %lor.lhs.false.133

lor.lhs.false.133:                                ; preds = %lor.lhs.false.128
  %73 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load134 = load i32, i32* %74, align 8
  %bf.clear135 = and i32 %bf.load134, 65535
  %cmp136 = icmp eq i32 %bf.clear135, 55
  br i1 %cmp136, label %if.then.158, label %lor.lhs.false.138

lor.lhs.false.138:                                ; preds = %lor.lhs.false.133
  %75 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %76 = bitcast %struct.rtx_def* %75 to i32*
  %bf.load139 = load i32, i32* %76, align 8
  %bf.clear140 = and i32 %bf.load139, 65535
  %cmp141 = icmp eq i32 %bf.clear140, 58
  br i1 %cmp141, label %if.then.158, label %lor.lhs.false.143

lor.lhs.false.143:                                ; preds = %lor.lhs.false.138
  %77 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %78 = bitcast %struct.rtx_def* %77 to i32*
  %bf.load144 = load i32, i32* %78, align 8
  %bf.clear145 = and i32 %bf.load144, 65535
  %cmp146 = icmp eq i32 %bf.clear145, 134
  br i1 %cmp146, label %if.then.158, label %lor.lhs.false.148

lor.lhs.false.148:                                ; preds = %lor.lhs.false.143
  %79 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load149 = load i32, i32* %80, align 8
  %bf.clear150 = and i32 %bf.load149, 65535
  %cmp151 = icmp eq i32 %bf.clear150, 56
  br i1 %cmp151, label %if.then.158, label %lor.lhs.false.153

lor.lhs.false.153:                                ; preds = %lor.lhs.false.148
  %81 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %82 = bitcast %struct.rtx_def* %81 to i32*
  %bf.load154 = load i32, i32* %82, align 8
  %bf.clear155 = and i32 %bf.load154, 65535
  %cmp156 = icmp eq i32 %bf.clear155, 140
  br i1 %cmp156, label %if.then.158, label %if.end.161

if.then.158:                                      ; preds = %lor.lhs.false.153, %lor.lhs.false.148, %lor.lhs.false.143, %lor.lhs.false.138, %lor.lhs.false.133, %lor.lhs.false.128, %lor.lhs.false.123, %land.lhs.true.118
  %83 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %call159 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %83)
  %to_addr160 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 1
  store %struct.rtx_def* %call159, %struct.rtx_def** %to_addr160, align 8
  br label %if.end.161

if.end.161:                                       ; preds = %if.then.158, %lor.lhs.false.153, %if.end.115
  br label %if.end.162

if.end.162:                                       ; preds = %if.end.161, %land.lhs.true.58, %land.lhs.true
  store i32 128, i32* %align.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.196, %if.end.162
  %84 = load i32, i32* %max_size, align 4
  %cmp163 = icmp ugt i32 %84, 1
  br i1 %cmp163, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %85 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %85, i32* %tmode, align 4
  br label %for.cond.165

for.cond.165:                                     ; preds = %for.inc.176, %while.body
  %86 = load i32, i32* %tmode, align 4
  %cmp166 = icmp ne i32 %86, 0
  br i1 %cmp166, label %for.body.168, label %for.end.180

for.body.168:                                     ; preds = %for.cond.165
  %87 = load i32, i32* %tmode, align 4
  %idxprom169 = sext i32 %87 to i64
  %arrayidx170 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom169
  %88 = load i8, i8* %arrayidx170, align 1
  %conv171 = zext i8 %88 to i32
  %89 = load i32, i32* %max_size, align 4
  %cmp172 = icmp ult i32 %conv171, %89
  br i1 %cmp172, label %if.then.174, label %if.end.175

if.then.174:                                      ; preds = %for.body.168
  %90 = load i32, i32* %tmode, align 4
  store i32 %90, i32* %mode, align 4
  br label %if.end.175

if.end.175:                                       ; preds = %if.then.174, %for.body.168
  br label %for.inc.176

for.inc.176:                                      ; preds = %if.end.175
  %91 = load i32, i32* %tmode, align 4
  %idxprom177 = sext i32 %91 to i64
  %arrayidx178 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom177
  %92 = load i8, i8* %arrayidx178, align 1
  %conv179 = zext i8 %92 to i32
  store i32 %conv179, i32* %tmode, align 4
  br label %for.cond.165

for.end.180:                                      ; preds = %for.cond.165
  %93 = load i32, i32* %mode, align 4
  %cmp181 = icmp eq i32 %93, 0
  br i1 %cmp181, label %if.then.183, label %if.end.184

if.then.183:                                      ; preds = %for.end.180
  br label %while.end

if.end.184:                                       ; preds = %for.end.180
  %94 = load i32, i32* %mode, align 4
  %idxprom185 = sext i32 %94 to i64
  %95 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %95, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom185
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx186, i32 0, i32 0
  %96 = load i32, i32* %insn_code, align 4
  store i32 %96, i32* %icode, align 4
  %97 = load i32, i32* %icode, align 4
  %cmp187 = icmp ne i32 %97, 1317
  br i1 %cmp187, label %land.lhs.true.189, label %if.end.196

land.lhs.true.189:                                ; preds = %if.end.184
  %98 = load i32, i32* %align.addr, align 4
  %99 = load i32, i32* %mode, align 4
  %call190 = call i32 @get_mode_alignment(i32 %99)
  %cmp191 = icmp uge i32 %98, %call190
  br i1 %cmp191, label %if.then.193, label %if.end.196

if.then.193:                                      ; preds = %land.lhs.true.189
  %100 = load i32, i32* %icode, align 4
  %idxprom194 = sext i32 %100 to i64
  %arrayidx195 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom194
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx195, i32 0, i32 2
  %101 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %102 = load i32, i32* %mode, align 4
  call void @move_by_pieces_1(%struct.rtx_def* (%struct.rtx_def*, ...)* %101, i32 %102, %struct.move_by_pieces* %data)
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.193, %land.lhs.true.189, %if.end.184
  %103 = load i32, i32* %mode, align 4
  %idxprom197 = sext i32 %103 to i64
  %arrayidx198 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom197
  %104 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %104 to i32
  store i32 %conv199, i32* %max_size, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then.183, %while.cond
  %len200 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %data, i32 0, i32 8
  %105 = load i64, i64* %len200, align 8
  %cmp201 = icmp ugt i64 %105, 0
  br i1 %cmp201, label %if.then.203, label %if.end.204

if.then.203:                                      ; preds = %while.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1503, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.move_by_pieces, i32 0, i32 0)) #6
  unreachable

if.end.204:                                       ; preds = %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @move_by_pieces_ninsns(i64 %l, i32 %align) #0 {
entry:
  %l.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  %n_insns = alloca i64, align 8
  %max_size = alloca i64, align 8
  %mode = alloca i32, align 4
  %tmode = alloca i32, align 4
  %icode = alloca i32, align 4
  store i64 %l, i64* %l.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  store i64 0, i64* %n_insns, align 8
  store i64 17, i64* %max_size, align 8
  store i32 128, i32* %align.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.24, %entry
  %0 = load i64, i64* %max_size, align 8
  %cmp = icmp ugt i64 %0, 1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %mode, align 4
  %1 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %1, i32* %tmode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i32, i32* %tmode, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %tmode, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i64
  %5 = load i64, i64* %max_size, align 8
  %cmp2 = icmp ult i64 %conv, %5
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %tmode, align 4
  store i32 %6, i32* %mode, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %tmode, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom4
  %8 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %8 to i32
  store i32 %conv6, i32* %tmode, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %mode, align 4
  %cmp7 = icmp eq i32 %9, 0
  br i1 %cmp7, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %for.end
  br label %while.end

if.end.10:                                        ; preds = %for.end
  %10 = load i32, i32* %mode, align 4
  %idxprom11 = sext i32 %10 to i64
  %11 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %11, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom11
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx12, i32 0, i32 0
  %12 = load i32, i32* %insn_code, align 4
  store i32 %12, i32* %icode, align 4
  %13 = load i32, i32* %icode, align 4
  %cmp13 = icmp ne i32 %13, 1317
  br i1 %cmp13, label %land.lhs.true, label %if.end.24

land.lhs.true:                                    ; preds = %if.end.10
  %14 = load i32, i32* %align.addr, align 4
  %15 = load i32, i32* %mode, align 4
  %call = call i32 @get_mode_alignment(i32 %15)
  %cmp15 = icmp uge i32 %14, %call
  br i1 %cmp15, label %if.then.17, label %if.end.24

if.then.17:                                       ; preds = %land.lhs.true
  %16 = load i64, i64* %l.addr, align 8
  %17 = load i32, i32* %mode, align 4
  %idxprom18 = sext i32 %17 to i64
  %arrayidx19 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom18
  %18 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %18 to i64
  %div = udiv i64 %16, %conv20
  %19 = load i64, i64* %n_insns, align 8
  %add = add i64 %19, %div
  store i64 %add, i64* %n_insns, align 8
  %20 = load i32, i32* %mode, align 4
  %idxprom21 = sext i32 %20 to i64
  %arrayidx22 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom21
  %21 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %21 to i64
  %22 = load i64, i64* %l.addr, align 8
  %rem = urem i64 %22, %conv23
  store i64 %rem, i64* %l.addr, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.17, %land.lhs.true, %if.end.10
  %23 = load i32, i32* %mode, align 4
  %idxprom25 = sext i32 %23 to i64
  %arrayidx26 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom25
  %24 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %24 to i64
  store i64 %conv27, i64* %max_size, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then.9, %while.cond
  %25 = load i64, i64* %l.addr, align 8
  %tobool = icmp ne i64 %25, 0
  br i1 %tobool, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %while.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1542, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.move_by_pieces_ninsns, i32 0, i32 0)) #6
  unreachable

if.end.29:                                        ; preds = %while.end
  %26 = load i64, i64* %n_insns, align 8
  ret i64 %26
}

declare %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def*) #1

declare i32 @get_mode_alignment(i32) #1

; Function Attrs: nounwind uwtable
define internal void @move_by_pieces_1(%struct.rtx_def* (%struct.rtx_def*, ...)* %genfun, i32 %mode, %struct.move_by_pieces* %data) #0 {
entry:
  %genfun.addr = alloca %struct.rtx_def* (%struct.rtx_def*, ...)*, align 8
  %mode.addr = alloca i32, align 4
  %data.addr = alloca %struct.move_by_pieces*, align 8
  %size = alloca i32, align 4
  %to1 = alloca %struct.rtx_def*, align 8
  %from1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* (%struct.rtx_def*, ...)* %genfun, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.move_by_pieces* %data, %struct.move_by_pieces** %data.addr, align 8
  %0 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %size, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %to1, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.36, %entry
  %2 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %len = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %2, i32 0, i32 8
  %3 = load i64, i64* %len, align 8
  %4 = load i32, i32* %size, align 4
  %conv1 = zext i32 %4 to i64
  %cmp = icmp uge i64 %3, %conv1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %reverse = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %5, i32 0, i32 10
  %6 = load i32, i32* %reverse, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load i32, i32* %size, align 4
  %conv3 = zext i32 %7 to i64
  %8 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %offset = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %8, i32 0, i32 9
  %9 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %9, %conv3
  store i64 %sub, i64* %offset, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %10 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %to = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %10, i32 0, i32 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %to, align 8
  %tobool4 = icmp ne %struct.rtx_def* %11, null
  br i1 %tobool4, label %if.then.5, label %if.end.14

if.then.5:                                        ; preds = %if.end
  %12 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %autinc_to = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %12, i32 0, i32 2
  %13 = load i32, i32* %autinc_to, align 4
  %tobool6 = icmp ne i32 %13, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.5
  %14 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %to8 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %14, i32 0, i32 0
  %15 = load %struct.rtx_def*, %struct.rtx_def** %to8, align 8
  %16 = load i32, i32* %mode.addr, align 4
  %17 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %to_addr = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %17, i32 0, i32 1
  %18 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %19 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %offset9 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %19, i32 0, i32 9
  %20 = load i64, i64* %offset9, align 8
  %call = call %struct.rtx_def* @adjust_automodify_address_1(%struct.rtx_def* %15, i32 %16, %struct.rtx_def* %18, i64 %20, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %to1, align 8
  br label %if.end.13

if.else:                                          ; preds = %if.then.5
  %21 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %to10 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %21, i32 0, i32 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %to10, align 8
  %23 = load i32, i32* %mode.addr, align 4
  %24 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %offset11 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %24, i32 0, i32 9
  %25 = load i64, i64* %offset11, align 8
  %call12 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %22, i32 %23, i64 %25, i32 1, i32 1)
  store %struct.rtx_def* %call12, %struct.rtx_def** %to1, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.7
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  %26 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %autinc_from = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %26, i32 0, i32 6
  %27 = load i32, i32* %autinc_from, align 4
  %tobool15 = icmp ne i32 %27, 0
  br i1 %tobool15, label %if.then.16, label %if.else.19

if.then.16:                                       ; preds = %if.end.14
  %28 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %from = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %28, i32 0, i32 4
  %29 = load %struct.rtx_def*, %struct.rtx_def** %from, align 8
  %30 = load i32, i32* %mode.addr, align 4
  %31 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %from_addr = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %31, i32 0, i32 5
  %32 = load %struct.rtx_def*, %struct.rtx_def** %from_addr, align 8
  %33 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %offset17 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %33, i32 0, i32 9
  %34 = load i64, i64* %offset17, align 8
  %call18 = call %struct.rtx_def* @adjust_automodify_address_1(%struct.rtx_def* %29, i32 %30, %struct.rtx_def* %32, i64 %34, i32 1)
  store %struct.rtx_def* %call18, %struct.rtx_def** %from1, align 8
  br label %if.end.23

if.else.19:                                       ; preds = %if.end.14
  %35 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %from20 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %35, i32 0, i32 4
  %36 = load %struct.rtx_def*, %struct.rtx_def** %from20, align 8
  %37 = load i32, i32* %mode.addr, align 4
  %38 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %offset21 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %38, i32 0, i32 9
  %39 = load i64, i64* %offset21, align 8
  %call22 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %36, i32 %37, i64 %39, i32 1, i32 1)
  store %struct.rtx_def* %call22, %struct.rtx_def** %from1, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.19, %if.then.16
  %40 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %to24 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %40, i32 0, i32 0
  %41 = load %struct.rtx_def*, %struct.rtx_def** %to24, align 8
  %tobool25 = icmp ne %struct.rtx_def* %41, null
  br i1 %tobool25, label %if.then.26, label %if.else.29

if.then.26:                                       ; preds = %if.end.23
  %42 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun.addr, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %to1, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %from1, align 8
  %call27 = call %struct.rtx_def* (%struct.rtx_def*, ...) %42(%struct.rtx_def* %43, %struct.rtx_def* %44)
  %call28 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27)
  br label %if.end.30

if.else.29:                                       ; preds = %if.end.23
  %45 = load i32, i32* %mode.addr, align 4
  %46 = load %struct.rtx_def*, %struct.rtx_def** %from1, align 8
  call void @emit_single_push_insn(i32 %45, %struct.rtx_def* %46, %union.tree_node* null)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.29, %if.then.26
  %47 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %reverse31 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %47, i32 0, i32 10
  %48 = load i32, i32* %reverse31, align 4
  %tobool32 = icmp ne i32 %48, 0
  br i1 %tobool32, label %if.end.36, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  %49 = load i32, i32* %size, align 4
  %conv34 = zext i32 %49 to i64
  %50 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %offset35 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %50, i32 0, i32 9
  %51 = load i64, i64* %offset35, align 8
  %add = add nsw i64 %51, %conv34
  store i64 %add, i64* %offset35, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.33, %if.end.30
  %52 = load i32, i32* %size, align 4
  %conv37 = zext i32 %52 to i64
  %53 = load %struct.move_by_pieces*, %struct.move_by_pieces** %data.addr, align 8
  %len38 = getelementptr inbounds %struct.move_by_pieces, %struct.move_by_pieces* %53, i32 0, i32 8
  %54 = load i64, i64* %len38, align 8
  %sub39 = sub i64 %54, %conv37
  store i64 %sub39, i64* %len38, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_block_move(%struct.rtx_def* %x, %struct.rtx_def* %y, %struct.rtx_def* %size) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca %struct.rtx_def*, align 8
  %retval1 = alloca %struct.rtx_def*, align 8
  %call_expr = alloca %union.tree_node*, align 8
  %arg_list = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  %opalign = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %code = alloca i32, align 4
  %pred = alloca i32 (%struct.rtx_def*, i32)*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %fntype = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %retval1, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %1 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp = icmp ne %struct.mem_attrs* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 1
  %rtmem4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.mem_attrs**
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem4, align 8
  %align5 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %3, i32 0, i32 4
  %4 = load i32, i32* %align5, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ 8, %cond.false ]
  %5 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 1
  %rtmem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**
  %6 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem8, align 8
  %cmp9 = icmp ne %struct.mem_attrs* %6, null
  br i1 %cmp9, label %cond.true.10, label %cond.false.15

cond.true.10:                                     ; preds = %cond.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 1
  %rtmem13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.mem_attrs**
  %8 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem13, align 8
  %align14 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %8, i32 0, i32 4
  %9 = load i32, i32* %align14, align 4
  br label %cond.end.16

cond.false.15:                                    ; preds = %cond.end
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.10
  %cond17 = phi i32 [ %9, %cond.true.10 ], [ 8, %cond.false.15 ]
  %cmp18 = icmp ult i32 %cond, %cond17
  br i1 %cmp18, label %cond.true.19, label %cond.false.32

cond.true.19:                                     ; preds = %cond.end.16
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 1
  %rtmem22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.mem_attrs**
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem22, align 8
  %cmp23 = icmp ne %struct.mem_attrs* %11, null
  br i1 %cmp23, label %cond.true.24, label %cond.false.29

cond.true.24:                                     ; preds = %cond.true.19
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 1
  %rtmem27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.mem_attrs**
  %13 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem27, align 8
  %align28 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %13, i32 0, i32 4
  %14 = load i32, i32* %align28, align 4
  br label %cond.end.30

cond.false.29:                                    ; preds = %cond.true.19
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.29, %cond.true.24
  %cond31 = phi i32 [ %14, %cond.true.24 ], [ 8, %cond.false.29 ]
  br label %cond.end.45

cond.false.32:                                    ; preds = %cond.end.16
  %15 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 1
  %rtmem35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.mem_attrs**
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem35, align 8
  %cmp36 = icmp ne %struct.mem_attrs* %16, null
  br i1 %cmp36, label %cond.true.37, label %cond.false.42

cond.true.37:                                     ; preds = %cond.false.32
  %17 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 1
  %rtmem40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.mem_attrs**
  %18 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem40, align 8
  %align41 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %18, i32 0, i32 4
  %19 = load i32, i32* %align41, align 4
  br label %cond.end.43

cond.false.42:                                    ; preds = %cond.false.32
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.42, %cond.true.37
  %cond44 = phi i32 [ %19, %cond.true.37 ], [ 8, %cond.false.42 ]
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.end.43, %cond.end.30
  %cond46 = phi i32 [ %cond31, %cond.end.30 ], [ %cond44, %cond.end.43 ]
  store i32 %cond46, i32* %align, align 4
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load = load i32, i32* %21, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp47 = icmp ne i32 %bf.clear, 51
  br i1 %cmp47, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.45
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1634, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.emit_block_move, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %cond.end.45
  %22 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load48 = load i32, i32* %23, align 8
  %bf.lshr49 = lshr i32 %bf.load48, 16
  %bf.clear50 = and i32 %bf.lshr49, 255
  %cmp51 = icmp ne i32 %bf.clear50, 51
  br i1 %cmp51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1637, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.emit_block_move, i32 0, i32 0)) #6
  unreachable

if.end.53:                                        ; preds = %if.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %24, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call54 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %25, i32 0)
  store %struct.rtx_def* %call54, %struct.rtx_def** %y.addr, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call55 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %26, i32 0)
  store %struct.rtx_def* %call55, %struct.rtx_def** %size.addr, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load56 = load i32, i32* %28, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp ne i32 %bf.clear57, 66
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.53
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1644, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.emit_block_move, i32 0, i32 0)) #6
  unreachable

if.end.60:                                        ; preds = %if.end.53
  %29 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load61 = load i32, i32* %30, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  %cmp63 = icmp ne i32 %bf.clear62, 66
  br i1 %cmp63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.end.60
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1646, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.emit_block_move, i32 0, i32 0)) #6
  unreachable

if.end.65:                                        ; preds = %if.end.60
  %31 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %cmp66 = icmp eq %struct.rtx_def* %31, null
  br i1 %cmp66, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.end.65
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1648, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.emit_block_move, i32 0, i32 0)) #6
  unreachable

if.end.68:                                        ; preds = %if.end.65
  %32 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load69 = load i32, i32* %33, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 54
  br i1 %cmp71, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.68
  %34 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx73 to i64*
  %35 = load i64, i64* %rtwint, align 8
  %36 = load i32, i32* %align, align 4
  %call74 = call i64 @move_by_pieces_ninsns(i64 %35, i32 %36)
  %37 = load i32, i32* @optimize_size, align 4
  %tobool = icmp ne i32 %37, 0
  br i1 %tobool, label %cond.true.75, label %cond.false.76

cond.true.75:                                     ; preds = %land.lhs.true
  br label %cond.end.77

cond.false.76:                                    ; preds = %land.lhs.true
  %38 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %38, i32 0, i32 10
  %39 = load i32, i32* %move_ratio, align 4
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.76, %cond.true.75
  %cond78 = phi i32 [ 3, %cond.true.75 ], [ %39, %cond.false.76 ]
  %conv = zext i32 %cond78 to i64
  %cmp79 = icmp ult i64 %call74, %conv
  br i1 %cmp79, label %if.then.81, label %if.else

if.then.81:                                       ; preds = %cond.end.77
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 0
  %rtwint84 = bitcast %union.rtunion_def* %arrayidx83 to i64*
  %43 = load i64, i64* %rtwint84, align 8
  %44 = load i32, i32* %align, align 4
  call void @move_by_pieces(%struct.rtx_def* %40, %struct.rtx_def* %41, i64 %43, i32 %44)
  br label %if.end.251

if.else:                                          ; preds = %cond.end.77, %if.end.68
  %45 = load i32, i32* %align, align 4
  %div = udiv i32 %45, 8
  %conv85 = zext i32 %div to i64
  %call86 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv85)
  store %struct.rtx_def* %call86, %struct.rtx_def** %opalign, align 8
  store i32 1, i32* @volatile_ok, align 4
  %46 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %46, i32* %mode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %47 = load i32, i32* %mode, align 4
  %cmp87 = icmp ne i32 %47, 0
  br i1 %cmp87, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %48 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %48 to i64
  %arrayidx89 = getelementptr inbounds [59 x i32], [59 x i32]* @movstr_optab, i32 0, i64 %idxprom
  %49 = load i32, i32* %arrayidx89, align 4
  store i32 %49, i32* %code, align 4
  %50 = load i32, i32* %code, align 4
  %cmp90 = icmp ne i32 %50, 1317
  br i1 %cmp90, label %land.lhs.true.92, label %if.end.167

land.lhs.true.92:                                 ; preds = %for.body
  %51 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load93 = load i32, i32* %52, align 8
  %bf.clear94 = and i32 %bf.load93, 65535
  %cmp95 = icmp eq i32 %bf.clear94, 54
  br i1 %cmp95, label %land.lhs.true.97, label %lor.lhs.false

land.lhs.true.97:                                 ; preds = %land.lhs.true.92
  %53 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i32 0, i64 0
  %rtwint100 = bitcast %union.rtunion_def* %arrayidx99 to i64*
  %54 = load i64, i64* %rtwint100, align 8
  %55 = load i32, i32* %mode, align 4
  %idxprom101 = sext i32 %55 to i64
  %arrayidx102 = getelementptr inbounds [59 x i64], [59 x i64]* @mode_mask_array, i32 0, i64 %idxprom101
  %56 = load i64, i64* %arrayidx102, align 8
  %shr = lshr i64 %56, 1
  %cmp103 = icmp ule i64 %54, %shr
  br i1 %cmp103, label %land.lhs.true.112, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.97, %land.lhs.true.92
  %57 = load i32, i32* %mode, align 4
  %idxprom105 = sext i32 %57 to i64
  %arrayidx106 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom105
  %58 = load i16, i16* %arrayidx106, align 2
  %conv107 = zext i16 %58 to i32
  %59 = load i32, i32* @target_flags, align 4
  %and = and i32 %59, 33554432
  %tobool108 = icmp ne i32 %and, 0
  %cond109 = select i1 %tobool108, i32 64, i32 32
  %cmp110 = icmp sge i32 %conv107, %cond109
  br i1 %cmp110, label %land.lhs.true.112, label %if.end.167

land.lhs.true.112:                                ; preds = %lor.lhs.false, %land.lhs.true.97
  %60 = load i32, i32* %code, align 4
  %idxprom113 = sext i32 %60 to i64
  %arrayidx114 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom113
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx114, i32 0, i32 3
  %61 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx115 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %61, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx115, i32 0, i32 0
  %62 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  store i32 (%struct.rtx_def*, i32)* %62, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %cmp116 = icmp eq i32 (%struct.rtx_def*, i32)* %62, null
  br i1 %cmp116, label %land.lhs.true.121, label %lor.lhs.false.118

lor.lhs.false.118:                                ; preds = %land.lhs.true.112
  %63 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call119 = call i32 %63(%struct.rtx_def* %64, i32 51)
  %tobool120 = icmp ne i32 %call119, 0
  br i1 %tobool120, label %land.lhs.true.121, label %if.end.167

land.lhs.true.121:                                ; preds = %lor.lhs.false.118, %land.lhs.true.112
  %65 = load i32, i32* %code, align 4
  %idxprom122 = sext i32 %65 to i64
  %arrayidx123 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom122
  %operand124 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx123, i32 0, i32 3
  %66 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand124, align 8
  %arrayidx125 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %66, i64 1
  %predicate126 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx125, i32 0, i32 0
  %67 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate126, align 8
  store i32 (%struct.rtx_def*, i32)* %67, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %cmp127 = icmp eq i32 (%struct.rtx_def*, i32)* %67, null
  br i1 %cmp127, label %land.lhs.true.132, label %lor.lhs.false.129

lor.lhs.false.129:                                ; preds = %land.lhs.true.121
  %68 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call130 = call i32 %68(%struct.rtx_def* %69, i32 51)
  %tobool131 = icmp ne i32 %call130, 0
  br i1 %tobool131, label %land.lhs.true.132, label %if.end.167

land.lhs.true.132:                                ; preds = %lor.lhs.false.129, %land.lhs.true.121
  %70 = load i32, i32* %code, align 4
  %idxprom133 = sext i32 %70 to i64
  %arrayidx134 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom133
  %operand135 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx134, i32 0, i32 3
  %71 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand135, align 8
  %arrayidx136 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %71, i64 3
  %predicate137 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx136, i32 0, i32 0
  %72 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate137, align 8
  store i32 (%struct.rtx_def*, i32)* %72, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %cmp138 = icmp eq i32 (%struct.rtx_def*, i32)* %72, null
  br i1 %cmp138, label %if.then.143, label %lor.lhs.false.140

lor.lhs.false.140:                                ; preds = %land.lhs.true.132
  %73 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** %opalign, align 8
  %call141 = call i32 %73(%struct.rtx_def* %74, i32 0)
  %tobool142 = icmp ne i32 %call141, 0
  br i1 %tobool142, label %if.then.143, label %if.end.167

if.then.143:                                      ; preds = %lor.lhs.false.140, %land.lhs.true.132
  %call144 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call144, %struct.rtx_def** %last, align 8
  %75 = load i32, i32* %mode, align 4
  %76 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call145 = call %struct.rtx_def* @convert_to_mode(i32 %75, %struct.rtx_def* %76, i32 1)
  store %struct.rtx_def* %call145, %struct.rtx_def** %op2, align 8
  %77 = load i32, i32* %code, align 4
  %idxprom146 = sext i32 %77 to i64
  %arrayidx147 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom146
  %operand148 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx147, i32 0, i32 3
  %78 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand148, align 8
  %arrayidx149 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %78, i64 2
  %predicate150 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx149, i32 0, i32 0
  %79 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate150, align 8
  store i32 (%struct.rtx_def*, i32)* %79, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %80 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %cmp151 = icmp ne i32 (%struct.rtx_def*, i32)* %80, null
  br i1 %cmp151, label %land.lhs.true.153, label %if.end.158

land.lhs.true.153:                                ; preds = %if.then.143
  %81 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %83 = load i32, i32* %mode, align 4
  %call154 = call i32 %81(%struct.rtx_def* %82, i32 %83)
  %tobool155 = icmp ne i32 %call154, 0
  br i1 %tobool155, label %if.end.158, label %if.then.156

if.then.156:                                      ; preds = %land.lhs.true.153
  %84 = load i32, i32* %mode, align 4
  %85 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call157 = call %struct.rtx_def* @copy_to_mode_reg(i32 %84, %struct.rtx_def* %85)
  store %struct.rtx_def* %call157, %struct.rtx_def** %op2, align 8
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.156, %land.lhs.true.153, %if.then.143
  %86 = load i32, i32* %code, align 4
  %idxprom159 = sext i32 %86 to i64
  %arrayidx160 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom159
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx160, i32 0, i32 2
  %87 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %91 = load %struct.rtx_def*, %struct.rtx_def** %opalign, align 8
  %call161 = call %struct.rtx_def* (%struct.rtx_def*, ...) %87(%struct.rtx_def* %88, %struct.rtx_def* %89, %struct.rtx_def* %90, %struct.rtx_def* %91)
  store %struct.rtx_def* %call161, %struct.rtx_def** %pat, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool162 = icmp ne %struct.rtx_def* %92, null
  br i1 %tobool162, label %if.then.163, label %if.else.165

if.then.163:                                      ; preds = %if.end.158
  %93 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call164 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %93)
  store i32 0, i32* @volatile_ok, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.else.165:                                      ; preds = %if.end.158
  %94 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  call void @delete_insns_since(%struct.rtx_def* %94)
  br label %if.end.166

if.end.166:                                       ; preds = %if.else.165
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %lor.lhs.false.140, %lor.lhs.false.129, %lor.lhs.false.118, %lor.lhs.false, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.167
  %95 = load i32, i32* %mode, align 4
  %idxprom168 = sext i32 %95 to i64
  %arrayidx169 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom168
  %96 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %96 to i32
  store i32 %conv170, i32* %mode, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @volatile_ok, align 4
  %97 = load i32, i32* @target_flags, align 4
  %and171 = and i32 %97, 33554432
  %tobool172 = icmp ne i32 %and171, 0
  %cond173 = select i1 %tobool172, i32 5, i32 4
  %98 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld174 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call176 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond173, %struct.rtx_def* %99)
  store %struct.rtx_def* %call176, %struct.rtx_def** %x.addr, align 8
  %100 = load i32, i32* @target_flags, align 4
  %and177 = and i32 %100, 33554432
  %tobool178 = icmp ne i32 %and177, 0
  %cond179 = select i1 %tobool178, i32 5, i32 4
  %101 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i32 0, i64 0
  %rtx182 = bitcast %union.rtunion_def* %arrayidx181 to %struct.rtx_def**
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rtx182, align 8
  %call183 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond179, %struct.rtx_def* %102)
  store %struct.rtx_def* %call183, %struct.rtx_def** %y.addr, align 8
  %103 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type = bitcast %union.tree_node* %103 to %struct.tree_type*
  %mode184 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6
  %bf.load185 = load i32, i32* %mode184, align 4
  %bf.lshr186 = lshr i32 %bf.load185, 9
  %bf.clear187 = and i32 %bf.lshr186, 127
  %104 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call188 = call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.clear187, %struct.rtx_def* %104)
  store %struct.rtx_def* %call188, %struct.rtx_def** %size.addr, align 8
  %105 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %cmp189 = icmp eq %union.tree_node* %105, null
  br i1 %cmp189, label %if.then.191, label %if.end.209

if.then.191:                                      ; preds = %for.end
  %call192 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))
  store %union.tree_node* %call192, %union.tree_node** @emit_block_move.fn, align 8
  %106 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %call193 = call %union.tree_node* @build_pointer_type(%union.tree_node* %106)
  store %union.tree_node* %call193, %union.tree_node** %fntype, align 8
  %107 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %call194 = call %union.tree_node* @build_function_type(%union.tree_node* %107, %union.tree_node* null)
  store %union.tree_node* %call194, %union.tree_node** %fntype, align 8
  %108 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %109 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %call195 = call %union.tree_node* @build_decl(i32 30, %union.tree_node* %108, %union.tree_node* %109)
  store %union.tree_node* %call195, %union.tree_node** @emit_block_move.fn, align 8
  call void @ggc_add_tree_root(%union.tree_node** @emit_block_move.fn, i32 1)
  %110 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %decl = bitcast %union.tree_node* %110 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %111 = bitcast i48* %external_flag to i64*
  %bf.load196 = load i64, i64* %111, align 8
  %bf.clear197 = and i64 %bf.load196, -257
  %bf.set = or i64 %bf.clear197, 256
  store i64 %bf.set, i64* %111, align 8
  %112 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %common = bitcast %union.tree_node* %112 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load198 = load i32, i32* %public_flag, align 8
  %bf.clear199 = and i32 %bf.load198, -524289
  %bf.set200 = or i32 %bf.clear199, 524288
  store i32 %bf.set200, i32* %public_flag, align 8
  %113 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %decl201 = bitcast %union.tree_node* %113 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl201, i32 0, i32 5
  %114 = bitcast i48* %artificial_flag to i64*
  %bf.load202 = load i64, i64* %114, align 8
  %bf.clear203 = and i64 %bf.load202, -4194305
  %bf.set204 = or i64 %bf.clear203, 4194304
  store i64 %bf.set204, i64* %114, align 8
  %115 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %common205 = bitcast %union.tree_node* %115 to %struct.tree_common*
  %nothrow_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common205, i32 0, i32 2
  %bf.load206 = load i32, i32* %nothrow_flag, align 8
  %bf.clear207 = and i32 %bf.load206, -131073
  %bf.set208 = or i32 %bf.clear207, 131072
  store i32 %bf.set208, i32* %nothrow_flag, align 8
  %116 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  call void @make_decl_rtl(%union.tree_node* %116, i8* null)
  %117 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  call void @assemble_external(%union.tree_node* %117)
  br label %if.end.209

if.end.209:                                       ; preds = %if.then.191, %for.end
  %118 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %call210 = call %union.tree_node* @build_pointer_type(%union.tree_node* %118)
  %119 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call211 = call %union.tree_node* @make_tree(%union.tree_node* %call210, %struct.rtx_def* %119)
  %call212 = call %union.tree_node* @build_tree_list(%union.tree_node* null, %union.tree_node* %call211)
  store %union.tree_node* %call212, %union.tree_node** %arg_list, align 8
  %120 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %call213 = call %union.tree_node* @build_pointer_type(%union.tree_node* %120)
  %121 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call214 = call %union.tree_node* @make_tree(%union.tree_node* %call213, %struct.rtx_def* %121)
  %call215 = call %union.tree_node* @build_tree_list(%union.tree_node* null, %union.tree_node* %call214)
  %122 = load %union.tree_node*, %union.tree_node** %arg_list, align 8
  %common216 = bitcast %union.tree_node* %122 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common216, i32 0, i32 0
  store %union.tree_node* %call215, %union.tree_node** %chain, align 8
  %123 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %124 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call217 = call %union.tree_node* @make_tree(%union.tree_node* %123, %struct.rtx_def* %124)
  %call218 = call %union.tree_node* @build_tree_list(%union.tree_node* null, %union.tree_node* %call217)
  %125 = load %union.tree_node*, %union.tree_node** %arg_list, align 8
  %common219 = bitcast %union.tree_node* %125 to %struct.tree_common*
  %chain220 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common219, i32 0, i32 0
  %126 = load %union.tree_node*, %union.tree_node** %chain220, align 8
  %common221 = bitcast %union.tree_node* %126 to %struct.tree_common*
  %chain222 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common221, i32 0, i32 0
  store %union.tree_node* %call218, %union.tree_node** %chain222, align 8
  %127 = load %union.tree_node*, %union.tree_node** %arg_list, align 8
  %common223 = bitcast %union.tree_node* %127 to %struct.tree_common*
  %chain224 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common223, i32 0, i32 0
  %128 = load %union.tree_node*, %union.tree_node** %chain224, align 8
  %common225 = bitcast %union.tree_node* %128 to %struct.tree_common*
  %chain226 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common225, i32 0, i32 0
  %129 = load %union.tree_node*, %union.tree_node** %chain226, align 8
  %common227 = bitcast %union.tree_node* %129 to %struct.tree_common*
  %chain228 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common227, i32 0, i32 0
  store %union.tree_node* null, %union.tree_node** %chain228, align 8
  %130 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %common229 = bitcast %union.tree_node* %130 to %struct.tree_common*
  %type230 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common229, i32 0, i32 1
  %131 = load %union.tree_node*, %union.tree_node** %type230, align 8
  %call231 = call %union.tree_node* @build_pointer_type(%union.tree_node* %131)
  %132 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %call232 = call %union.tree_node* @build1(i32 121, %union.tree_node* %call231, %union.tree_node* %132)
  store %union.tree_node* %call232, %union.tree_node** %call_expr, align 8
  %133 = load %union.tree_node*, %union.tree_node** @emit_block_move.fn, align 8
  %common233 = bitcast %union.tree_node* %133 to %struct.tree_common*
  %type234 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common233, i32 0, i32 1
  %134 = load %union.tree_node*, %union.tree_node** %type234, align 8
  %common235 = bitcast %union.tree_node* %134 to %struct.tree_common*
  %type236 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common235, i32 0, i32 1
  %135 = load %union.tree_node*, %union.tree_node** %type236, align 8
  %136 = load %union.tree_node*, %union.tree_node** %call_expr, align 8
  %137 = load %union.tree_node*, %union.tree_node** %arg_list, align 8
  %call237 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 53, %union.tree_node* %135, %union.tree_node* %136, %union.tree_node* %137, %union.tree_node* null)
  store %union.tree_node* %call237, %union.tree_node** %call_expr, align 8
  %138 = load %union.tree_node*, %union.tree_node** %call_expr, align 8
  %common238 = bitcast %union.tree_node* %138 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common238, i32 0, i32 2
  %bf.load239 = load i32, i32* %side_effects_flag, align 8
  %bf.clear240 = and i32 %bf.load239, -257
  %bf.set241 = or i32 %bf.clear240, 256
  store i32 %bf.set241, i32* %side_effects_flag, align 8
  %139 = load %union.tree_node*, %union.tree_node** %call_expr, align 8
  %call242 = call %struct.rtx_def* @expand_expr(%union.tree_node* %139, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call242, %struct.rtx_def** %retval1, align 8
  %140 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %141 = bitcast %struct.rtx_def* %140 to i32*
  %bf.load243 = load i32, i32* %141, align 8
  %bf.lshr244 = lshr i32 %bf.load243, 26
  %bf.clear245 = and i32 %bf.lshr244, 1
  %tobool246 = icmp ne i32 %bf.clear245, 0
  br i1 %tobool246, label %if.then.247, label %if.end.250

if.then.247:                                      ; preds = %if.end.209
  %142 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call248 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %142)
  %call249 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call248)
  br label %if.end.250

if.end.250:                                       ; preds = %if.then.247, %if.end.209
  br label %if.end.251

if.end.251:                                       ; preds = %if.end.250, %if.then.81
  %143 = load %struct.rtx_def*, %struct.rtx_def** %retval1, align 8
  store %struct.rtx_def* %143, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.251, %if.then.163
  %144 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %144
}

declare %struct.rtx_def* @get_last_insn() #1

declare %struct.rtx_def* @copy_to_mode_reg(i32, %struct.rtx_def*) #1

declare void @delete_insns_since(%struct.rtx_def*) #1

declare %union.tree_node* @get_identifier(i8*) #1

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #1

declare %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @build_decl(i32, %union.tree_node*, %union.tree_node*) #1

declare void @ggc_add_tree_root(%union.tree_node**, i32) #1

declare void @make_decl_rtl(%union.tree_node*, i8*) #1

declare void @assemble_external(%union.tree_node*) #1

declare %union.tree_node* @build_tree_list(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #1

declare %union.tree_node* @build1(i32, %union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %tmode, i32 %modifier) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %tmode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %type = alloca %union.tree_node*, align 8
  %unsignedp = alloca i32, align 4
  %mode = alloca i32, align 4
  %code = alloca i32, align 4
  %this_optab = alloca %struct.optab*, align 8
  %subtarget = alloca %struct.rtx_def*, align 8
  %original_target = alloca %struct.rtx_def*, align 8
  %ignore = alloca i32, align 4
  %context = alloca %union.tree_node*, align 8
  %function = alloca %union.tree_node*, align 8
  %p = alloca %struct.function*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %to_return = alloca %struct.rtx_def*, align 8
  %saved_input_filename = alloca i8*, align 8
  %saved_lineno = alloca i32, align 4
  %temp1128 = alloca %struct.rtx_def*, align 8
  %old_list = alloca %union.tree_node*, align 8
  %placeholder_expr = alloca %union.tree_node*, align 8
  %vars = alloca %union.tree_node*, align 8
  %vars_need_expansion = alloca i32, align 4
  %elt = alloca %union.tree_node*, align 8
  %constructor = alloca %struct.rtx_def*, align 8
  %exp1 = alloca %union.tree_node*, align 8
  %index = alloca %union.tree_node*, align 8
  %string = alloca %union.tree_node*, align 8
  %array = alloca %union.tree_node*, align 8
  %domain = alloca %union.tree_node*, align 8
  %low_bound = alloca %union.tree_node*, align 8
  %index1513 = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %elem = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %elem1700 = alloca %union.tree_node*, align 8
  %type1748 = alloca %union.tree_node*, align 8
  %mode1753 = alloca i32, align 4
  %elt1807 = alloca %union.tree_node*, align 8
  %bitsize = alloca i64, align 8
  %imode = alloca i32, align 4
  %count = alloca %union.tree_node*, align 8
  %mode1 = alloca i32, align 4
  %bitsize1917 = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %offset = alloca %union.tree_node*, align 8
  %volatilep = alloca i32, align 4
  %tem = alloca %union.tree_node*, align 8
  %orig_op0 = alloca %struct.rtx_def*, align 8
  %mode1996 = alloca i32, align 4
  %offset_rtx = alloca %struct.rtx_def*, align 8
  %nt = alloca %union.tree_node*, align 8
  %memloc = alloca %struct.rtx_def*, align 8
  %ext_mode = alloca i32, align 4
  %new = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %before = alloca %struct.rtx_def*, align 8
  %vtbl_ref = alloca %struct.rtx_def*, align 8
  %set = alloca %union.tree_node*, align 8
  %index2617 = alloca %union.tree_node*, align 8
  %iunsignedp = alloca i32, align 4
  %set_type = alloca %union.tree_node*, align 8
  %set_low_bound = alloca %union.tree_node*, align 8
  %set_high_bound = alloca %union.tree_node*, align 8
  %index_val = alloca %struct.rtx_def*, align 8
  %lo_r = alloca %struct.rtx_def*, align 8
  %hi_r = alloca %struct.rtx_def*, align 8
  %setval = alloca %struct.rtx_def*, align 8
  %setaddr = alloca %struct.rtx_def*, align 8
  %index_mode = alloca i32, align 4
  %rlow = alloca %struct.rtx_def*, align 8
  %diff = alloca %struct.rtx_def*, align 8
  %quo = alloca %struct.rtx_def*, align 8
  %rem2651 = alloca %struct.rtx_def*, align 8
  %addr2652 = alloca %struct.rtx_def*, align 8
  %bit = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  %valtype = alloca %union.tree_node*, align 8
  %result2911 = alloca %struct.rtx_def*, align 8
  %inner_type = alloca %union.tree_node*, align 8
  %inner_mode = alloca i32, align 4
  %inner_type3198 = alloca %union.tree_node*, align 8
  %inner_type3325 = alloca %union.tree_node*, align 8
  %temp_size = alloca i64, align 8
  %new3355 = alloca %struct.rtx_def*, align 8
  %new_with_op0_mode = alloca %struct.rtx_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %constant_part = alloca %struct.rtx_def*, align 8
  %constant_part3593 = alloca %struct.rtx_def*, align 8
  %constant_term = alloca %struct.rtx_def*, align 8
  %op03960 = alloca %struct.rtx_def*, align 8
  %op13965 = alloca %struct.rtx_def*, align 8
  %negated = alloca %union.tree_node*, align 8
  %t1 = alloca %union.tree_node*, align 8
  %innermode = alloca i32, align 4
  %other_optab = alloca %struct.optab*, align 8
  %htem = alloca %struct.rtx_def*, align 8
  %unsignedp4683 = alloca i32, align 4
  %mode14806 = alloca i32, align 4
  %iftrue = alloca %union.tree_node*, align 8
  %iffalse = alloca %union.tree_node*, align 8
  %singleton = alloca %union.tree_node*, align 8
  %binary_op = alloca %union.tree_node*, align 8
  %unary_op = alloca %union.tree_node*, align 8
  %result5338 = alloca %struct.rtx_def*, align 8
  %boptab = alloca %struct.optab*, align 8
  %slot = alloca %union.tree_node*, align 8
  %cleanups = alloca %union.tree_node*, align 8
  %exp15812 = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %lhs5943 = alloca %union.tree_node*, align 8
  %rhs5947 = alloca %union.tree_node*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %inner_type6276 = alloca %union.tree_node*, align 8
  %memloc6282 = alloca %struct.rtx_def*, align 8
  %mode6358 = alloca i32, align 4
  %insns = alloca %struct.rtx_def*, align 8
  %partmode = alloca i32, align 4
  %imag_t = alloca %struct.rtx_def*, align 8
  %insns6423 = alloca %struct.rtx_def*, align 8
  %handler = alloca %union.tree_node*, align 8
  %try_block = alloca %union.tree_node*, align 8
  %finally_block = alloca %union.tree_node*, align 8
  %finally_label = alloca %struct.rtx_def*, align 8
  %done_label = alloca %struct.rtx_def*, align 8
  %return_link = alloca %struct.rtx_def*, align 8
  %cleanup = alloca %union.tree_node*, align 8
  %subr = alloca %struct.rtx_def*, align 8
  %return_link6503 = alloca %struct.rtx_def*, align 8
  %return_address = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store i32 %tmode, i32* %tmode.addr, align 4
  store i32 %modifier, i32* %modifier.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8
  store %union.tree_node* %1, %union.tree_node** %type, align 8
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load = load i32, i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  store i32 %bf.clear, i32* %unsignedp, align 4
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common3 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2
  %bf.load5 = load i32, i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  store i32 %bf.clear6, i32* %code, align 4
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common7 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp = icmp eq i32 %bf.clear10, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common11 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2
  %bf.load13 = load i32, i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 0
  br i1 %cmp15, label %if.then, label %if.end.18

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load i32, i32* %tmode.addr, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %op0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %cmp16 = icmp ne %struct.rtx_def* %8, null
  br i1 %cmp16, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %retval
  br label %return

if.end.18:                                        ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type19 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %mode20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 6
  %bf.load21 = load i32, i32* %mode20, align 4
  %bf.lshr22 = lshr i32 %bf.load21, 9
  %bf.clear23 = and i32 %bf.lshr22, 127
  store i32 %bf.clear23, i32* %mode, align 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call = call %struct.rtx_def* @get_subtarget(%struct.rtx_def* %12)
  store %struct.rtx_def* %call, %struct.rtx_def** %subtarget, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %original_target, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp24 = icmp eq %struct.rtx_def* %14, %15
  br i1 %cmp24, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.18
  %16 = load i32, i32* %code, align 4
  %cmp25 = icmp eq i32 %16, 116
  br i1 %cmp25, label %land.rhs, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.rhs
  %17 = load i32, i32* %code, align 4
  %cmp27 = icmp eq i32 %17, 115
  br i1 %cmp27, label %land.rhs, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %lor.lhs.false.26
  %18 = load i32, i32* %code, align 4
  %cmp29 = icmp eq i32 %18, 114
  br i1 %cmp29, label %land.rhs, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %lor.lhs.false.28
  %19 = load i32, i32* %code, align 4
  %cmp31 = icmp eq i32 %19, 122
  br i1 %cmp31, label %land.rhs, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %lor.lhs.false.30
  %20 = load i32, i32* %code, align 4
  %cmp33 = icmp eq i32 %20, 51
  br i1 %cmp33, label %land.rhs, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %lor.lhs.false.32
  %21 = load i32, i32* %code, align 4
  %cmp35 = icmp eq i32 %21, 117
  br i1 %cmp35, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.lhs.false.34, %lor.lhs.false.32, %lor.lhs.false.30, %lor.lhs.false.28, %lor.lhs.false.26, %lor.rhs
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common36 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %code37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2
  %bf.load38 = load i32, i32* %code37, align 8
  %bf.clear39 = and i32 %bf.load38, 255
  %cmp40 = icmp eq i32 %bf.clear39, 5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false.34
  %23 = phi i1 [ false, %lor.lhs.false.34 ], [ %cmp40, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %if.end.18
  %24 = phi i1 [ true, %if.end.18 ], [ %23, %land.end ]
  %lor.ext = zext i1 %24 to i32
  store i32 %lor.ext, i32* %ignore, align 4
  %25 = load i32, i32* %ignore, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %if.then.41, label %if.end.158

if.then.41:                                       ; preds = %lor.end
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common42 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2
  %bf.load43 = load i32, i32* %side_effects_flag, align 8
  %bf.lshr44 = lshr i32 %bf.load43, 8
  %bf.clear45 = and i32 %bf.lshr44, 1
  %tobool46 = icmp ne i32 %bf.clear45, 0
  br i1 %tobool46, label %if.end.48, label %if.then.47

if.then.47:                                       ; preds = %if.then.41
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %retval
  br label %return

if.end.48:                                        ; preds = %if.then.41
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common49 = bitcast %union.tree_node* %28 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2
  %bf.load50 = load i32, i32* %volatile_flag, align 8
  %bf.lshr51 = lshr i32 %bf.load50, 11
  %bf.clear52 = and i32 %bf.lshr51, 1
  %tobool53 = icmp ne i32 %bf.clear52, 0
  br i1 %tobool53, label %land.lhs.true, label %if.end.73

land.lhs.true:                                    ; preds = %if.end.48
  %29 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common54 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %code55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2
  %bf.load56 = load i32, i32* %code55, align 8
  %bf.clear57 = and i32 %bf.load56, 255
  %cmp58 = icmp ne i32 %bf.clear57, 30
  br i1 %cmp58, label %land.lhs.true.59, label %if.end.73

land.lhs.true.59:                                 ; preds = %land.lhs.true
  %30 = load i32, i32* %mode, align 4
  %cmp60 = icmp ne i32 %30, 0
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.73

land.lhs.true.61:                                 ; preds = %land.lhs.true.59
  %31 = load i32, i32* %mode, align 4
  %cmp62 = icmp ne i32 %31, 51
  br i1 %cmp62, label %land.lhs.true.63, label %if.end.73

land.lhs.true.63:                                 ; preds = %land.lhs.true.61
  %32 = load i32, i32* %modifier.addr, align 4
  %cmp64 = icmp ne i32 %32, 2
  br i1 %cmp64, label %if.then.65, label %if.end.73

if.then.65:                                       ; preds = %land.lhs.true.63
  %33 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %34 = load i32, i32* %modifier.addr, align 4
  %call66 = call %struct.rtx_def* @expand_expr(%union.tree_node* %33, %struct.rtx_def* null, i32 0, i32 %34)
  store %struct.rtx_def* %call66, %struct.rtx_def** %temp, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load67 = load i32, i32* %36, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 66
  br i1 %cmp69, label %if.then.70, label %if.end.72

if.then.70:                                       ; preds = %if.then.65
  %37 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call71 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %37)
  store %struct.rtx_def* %call71, %struct.rtx_def** %temp, align 8
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.70, %if.then.65
  %38 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %retval
  br label %return

if.end.73:                                        ; preds = %land.lhs.true.63, %land.lhs.true.61, %land.lhs.true.59, %land.lhs.true, %if.end.48
  %39 = load i32, i32* %code, align 4
  %idxprom74 = sext i32 %39 to i64
  %arrayidx75 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom74
  %40 = load i8, i8* %arrayidx75, align 1
  %conv = sext i8 %40 to i32
  %cmp76 = icmp eq i32 %conv, 49
  br i1 %cmp76, label %if.then.87, label %lor.lhs.false.78

lor.lhs.false.78:                                 ; preds = %if.end.73
  %41 = load i32, i32* %code, align 4
  %cmp79 = icmp eq i32 %41, 39
  br i1 %cmp79, label %if.then.87, label %lor.lhs.false.81

lor.lhs.false.81:                                 ; preds = %lor.lhs.false.78
  %42 = load i32, i32* %code, align 4
  %cmp82 = icmp eq i32 %42, 41
  br i1 %cmp82, label %if.then.87, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %lor.lhs.false.81
  %43 = load i32, i32* %code, align 4
  %cmp85 = icmp eq i32 %43, 42
  br i1 %cmp85, label %if.then.87, label %if.else

if.then.87:                                       ; preds = %lor.lhs.false.84, %lor.lhs.false.81, %lor.lhs.false.78, %if.end.73
  %44 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp88 = bitcast %union.tree_node* %44 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp88, i32 0, i32 2
  %arrayidx89 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx89, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %47 = load i32, i32* %modifier.addr, align 4
  %call90 = call %struct.rtx_def* @expand_expr(%union.tree_node* %45, %struct.rtx_def* %46, i32 0, i32 %47)
  store %struct.rtx_def* %call90, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false.84
  %48 = load i32, i32* %code, align 4
  %idxprom91 = sext i32 %48 to i64
  %arrayidx92 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom91
  %49 = load i8, i8* %arrayidx92, align 1
  %conv93 = sext i8 %49 to i32
  %cmp94 = icmp eq i32 %conv93, 50
  br i1 %cmp94, label %if.then.108, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %if.else
  %50 = load i32, i32* %code, align 4
  %idxprom97 = sext i32 %50 to i64
  %arrayidx98 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom97
  %51 = load i8, i8* %arrayidx98, align 1
  %conv99 = sext i8 %51 to i32
  %cmp100 = icmp eq i32 %conv99, 60
  br i1 %cmp100, label %if.then.108, label %lor.lhs.false.102

lor.lhs.false.102:                                ; preds = %lor.lhs.false.96
  %52 = load i32, i32* %code, align 4
  %cmp103 = icmp eq i32 %52, 43
  br i1 %cmp103, label %if.then.108, label %lor.lhs.false.105

lor.lhs.false.105:                                ; preds = %lor.lhs.false.102
  %53 = load i32, i32* %code, align 4
  %cmp106 = icmp eq i32 %53, 44
  br i1 %cmp106, label %if.then.108, label %if.else.117

if.then.108:                                      ; preds = %lor.lhs.false.105, %lor.lhs.false.102, %lor.lhs.false.96, %if.else
  %54 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp109 = bitcast %union.tree_node* %54 to %struct.tree_exp*
  %operands110 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp109, i32 0, i32 2
  %arrayidx111 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands110, i32 0, i64 0
  %55 = load %union.tree_node*, %union.tree_node** %arrayidx111, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %57 = load i32, i32* %modifier.addr, align 4
  %call112 = call %struct.rtx_def* @expand_expr(%union.tree_node* %55, %struct.rtx_def* %56, i32 0, i32 %57)
  %58 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp113 = bitcast %union.tree_node* %58 to %struct.tree_exp*
  %operands114 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp113, i32 0, i32 2
  %arrayidx115 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands114, i32 0, i64 1
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx115, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %61 = load i32, i32* %modifier.addr, align 4
  %call116 = call %struct.rtx_def* @expand_expr(%union.tree_node* %59, %struct.rtx_def* %60, i32 0, i32 %61)
  %62 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %retval
  br label %return

if.else.117:                                      ; preds = %lor.lhs.false.105
  %63 = load i32, i32* %code, align 4
  %cmp118 = icmp eq i32 %63, 91
  br i1 %cmp118, label %land.lhs.true.123, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %if.else.117
  %64 = load i32, i32* %code, align 4
  %cmp121 = icmp eq i32 %64, 92
  br i1 %cmp121, label %land.lhs.true.123, label %if.else.138

land.lhs.true.123:                                ; preds = %lor.lhs.false.120, %if.else.117
  %65 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp124 = bitcast %union.tree_node* %65 to %struct.tree_exp*
  %operands125 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp124, i32 0, i32 2
  %arrayidx126 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands125, i32 0, i64 1
  %66 = load %union.tree_node*, %union.tree_node** %arrayidx126, align 8
  %common127 = bitcast %union.tree_node* %66 to %struct.tree_common*
  %side_effects_flag128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2
  %bf.load129 = load i32, i32* %side_effects_flag128, align 8
  %bf.lshr130 = lshr i32 %bf.load129, 8
  %bf.clear131 = and i32 %bf.lshr130, 1
  %tobool132 = icmp ne i32 %bf.clear131, 0
  br i1 %tobool132, label %if.else.138, label %if.then.133

if.then.133:                                      ; preds = %land.lhs.true.123
  %67 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp134 = bitcast %union.tree_node* %67 to %struct.tree_exp*
  %operands135 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp134, i32 0, i32 2
  %arrayidx136 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands135, i32 0, i64 0
  %68 = load %union.tree_node*, %union.tree_node** %arrayidx136, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %70 = load i32, i32* %modifier.addr, align 4
  %call137 = call %struct.rtx_def* @expand_expr(%union.tree_node* %68, %struct.rtx_def* %69, i32 0, i32 %70)
  store %struct.rtx_def* %call137, %struct.rtx_def** %retval
  br label %return

if.else.138:                                      ; preds = %land.lhs.true.123, %lor.lhs.false.120
  %71 = load i32, i32* %code, align 4
  %cmp139 = icmp eq i32 %71, 40
  br i1 %cmp139, label %if.then.141, label %if.end.154

if.then.141:                                      ; preds = %if.else.138
  %72 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp142 = bitcast %union.tree_node* %72 to %struct.tree_exp*
  %operands143 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp142, i32 0, i32 2
  %arrayidx144 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands143, i32 0, i64 0
  %73 = load %union.tree_node*, %union.tree_node** %arrayidx144, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %75 = load i32, i32* %modifier.addr, align 4
  %call145 = call %struct.rtx_def* @expand_expr(%union.tree_node* %73, %struct.rtx_def* %74, i32 0, i32 %75)
  %76 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp146 = bitcast %union.tree_node* %76 to %struct.tree_exp*
  %operands147 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp146, i32 0, i32 2
  %arrayidx148 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands147, i32 0, i64 1
  %77 = load %union.tree_node*, %union.tree_node** %arrayidx148, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %79 = load i32, i32* %modifier.addr, align 4
  %call149 = call %struct.rtx_def* @expand_expr(%union.tree_node* %77, %struct.rtx_def* %78, i32 0, i32 %79)
  %80 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp150 = bitcast %union.tree_node* %80 to %struct.tree_exp*
  %operands151 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp150, i32 0, i32 2
  %arrayidx152 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands151, i32 0, i64 2
  %81 = load %union.tree_node*, %union.tree_node** %arrayidx152, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %83 = load i32, i32* %modifier.addr, align 4
  %call153 = call %struct.rtx_def* @expand_expr(%union.tree_node* %81, %struct.rtx_def* %82, i32 0, i32 %83)
  %84 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %84, %struct.rtx_def** %retval
  br label %return

if.end.154:                                       ; preds = %if.else.138
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.155
  br label %if.end.157

if.end.157:                                       ; preds = %if.end.156
  store %struct.rtx_def* null, %struct.rtx_def** %target.addr, align 8
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %lor.end
  %85 = load i32, i32* @cse_not_expected, align 4
  %tobool159 = icmp ne i32 %85, 0
  br i1 %tobool159, label %if.end.185, label %land.lhs.true.160

land.lhs.true.160:                                ; preds = %if.end.158
  %86 = load i32, i32* %mode, align 4
  %cmp161 = icmp ne i32 %86, 51
  br i1 %cmp161, label %land.lhs.true.163, label %if.end.185

land.lhs.true.163:                                ; preds = %land.lhs.true.160
  %87 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool164 = icmp ne %struct.rtx_def* %87, null
  br i1 %tobool164, label %land.lhs.true.165, label %if.end.185

land.lhs.true.165:                                ; preds = %land.lhs.true.163
  %88 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load166 = load i32, i32* %89, align 8
  %bf.clear167 = and i32 %bf.load166, 65535
  %cmp168 = icmp ne i32 %bf.clear167, 61
  br i1 %cmp168, label %land.lhs.true.174, label %lor.lhs.false.170

lor.lhs.false.170:                                ; preds = %land.lhs.true.165
  %90 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx171 to i32*
  %91 = load i32, i32* %rtuint, align 4
  %cmp172 = icmp ult i32 %91, 53
  br i1 %cmp172, label %land.lhs.true.174, label %if.end.185

land.lhs.true.174:                                ; preds = %lor.lhs.false.170, %land.lhs.true.165
  %92 = load i32, i32* %code, align 4
  %cmp175 = icmp eq i32 %92, 46
  br i1 %cmp175, label %land.lhs.true.177, label %if.then.184

land.lhs.true.177:                                ; preds = %land.lhs.true.174
  %93 = load i32, i32* %mode, align 4
  %idxprom178 = sext i32 %93 to i64
  %arrayidx179 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom178
  %94 = load i8, i8* %arrayidx179, align 1
  %conv180 = zext i8 %94 to i32
  %95 = load i32, i32* @target_flags, align 4
  %and = and i32 %95, 33554432
  %tobool181 = icmp ne i32 %and, 0
  %cond = select i1 %tobool181, i32 8, i32 4
  %cmp182 = icmp sgt i32 %conv180, %cond
  br i1 %cmp182, label %if.end.185, label %if.then.184

if.then.184:                                      ; preds = %land.lhs.true.177, %land.lhs.true.174
  %96 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  store %struct.rtx_def* %96, %struct.rtx_def** %target.addr, align 8
  br label %if.end.185

if.end.185:                                       ; preds = %if.then.184, %land.lhs.true.177, %lor.lhs.false.170, %land.lhs.true.163, %land.lhs.true.160, %if.end.158
  %97 = load i32, i32* %code, align 4
  switch i32 %97, label %sw.default [
    i32 31, label %sw.bb
    i32 35, label %sw.bb.233
    i32 34, label %sw.bb.246
    i32 30, label %sw.bb.306
    i32 36, label %sw.bb.306
    i32 25, label %sw.bb.853
    i32 32, label %sw.bb.870
    i32 26, label %sw.bb.873
    i32 27, label %sw.bb.875
    i32 29, label %sw.bb.875
    i32 144, label %sw.bb.929
    i32 118, label %sw.bb.946
    i32 119, label %sw.bb.1127
    i32 57, label %sw.bb.1140
    i32 58, label %sw.bb.1148
    i32 138, label %sw.bb.1159
    i32 140, label %sw.bb.1178
    i32 142, label %sw.bb.1184
    i32 143, label %sw.bb.1199
    i32 141, label %sw.bb.1212
    i32 52, label %sw.bb.1217
    i32 120, label %sw.bb.1257
    i32 46, label %sw.bb.1284
    i32 41, label %sw.bb.1424
    i32 43, label %sw.bb.1487
    i32 39, label %sw.bb.1785
    i32 40, label %sw.bb.1785
    i32 44, label %sw.bb.1785
    i32 45, label %sw.bb.2538
    i32 42, label %sw.bb.2612
    i32 110, label %sw.bb.2613
    i32 55, label %sw.bb.2788
    i32 56, label %sw.bb.2813
    i32 53, label %sw.bb.2822
    i32 116, label %sw.bb.2880
    i32 115, label %sw.bb.2880
    i32 114, label %sw.bb.2880
    i32 122, label %sw.bb.2880
    i32 117, label %sw.bb.3129
    i32 59, label %sw.bb.3402
    i32 60, label %sw.bb.3941
    i32 61, label %sw.bb.4031
    i32 62, label %sw.bb.4406
    i32 64, label %sw.bb.4406
    i32 63, label %sw.bb.4406
    i32 65, label %sw.bb.4406
    i32 71, label %sw.bb.4406
    i32 70, label %sw.bb.4423
    i32 66, label %sw.bb.4454
    i32 68, label %sw.bb.4454
    i32 67, label %sw.bb.4454
    i32 69, label %sw.bb.4454
    i32 75, label %sw.bb.4471
    i32 74, label %sw.bb.4471
    i32 73, label %sw.bb.4471
    i32 72, label %sw.bb.4472
    i32 76, label %sw.bb.4482
    i32 77, label %sw.bb.4520
    i32 80, label %sw.bb.4542
    i32 79, label %sw.bb.4572
    i32 78, label %sw.bb.4572
    i32 90, label %sw.bb.4700
    i32 81, label %sw.bb.4710
    i32 93, label %sw.bb.4720
    i32 88, label %sw.bb.4720
    i32 94, label %sw.bb.4721
    i32 86, label %sw.bb.4721
    i32 95, label %sw.bb.4722
    i32 87, label %sw.bb.4722
    i32 82, label %sw.bb.4723
    i32 83, label %sw.bb.4723
    i32 84, label %sw.bb.4723
    i32 85, label %sw.bb.4723
    i32 97, label %sw.bb.4739
    i32 98, label %sw.bb.4739
    i32 99, label %sw.bb.4739
    i32 100, label %sw.bb.4739
    i32 101, label %sw.bb.4739
    i32 102, label %sw.bb.4739
    i32 103, label %sw.bb.4739
    i32 104, label %sw.bb.4739
    i32 105, label %sw.bb.4739
    i32 106, label %sw.bb.4739
    i32 107, label %sw.bb.4739
    i32 108, label %sw.bb.4739
    i32 109, label %sw.bb.4739
    i32 91, label %sw.bb.4829
    i32 92, label %sw.bb.4829
    i32 96, label %sw.bb.4872
    i32 47, label %sw.bb.4882
    i32 51, label %sw.bb.4896
    i32 50, label %sw.bb.5808
    i32 49, label %sw.bb.5930
    i32 48, label %sw.bb.5942
    i32 139, label %sw.bb.6055
    i32 130, label %sw.bb.6066
    i32 129, label %sw.bb.6066
    i32 132, label %sw.bb.6068
    i32 131, label %sw.bb.6068
    i32 121, label %sw.bb.6073
    i32 123, label %sw.bb.6356
    i32 125, label %sw.bb.6357
    i32 127, label %sw.bb.6401
    i32 128, label %sw.bb.6407
    i32 126, label %sw.bb.6413
    i32 134, label %sw.bb.6465
    i32 135, label %sw.bb.6473
    i32 136, label %sw.bb.6499
    i32 133, label %sw.bb.6514
    i32 146, label %sw.bb.6519
    i32 124, label %sw.bb.6521
  ]

sw.bb:                                            ; preds = %if.end.185
  %98 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call186 = call %union.tree_node* @decl_function_context(%union.tree_node* %98)
  store %union.tree_node* %call186, %union.tree_node** %function, align 8
  %99 = load %union.tree_node*, %union.tree_node** %function, align 8
  %100 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp187 = icmp ne %union.tree_node* %99, %100
  br i1 %cmp187, label %land.lhs.true.189, label %if.else.201

land.lhs.true.189:                                ; preds = %sw.bb
  %101 = load %union.tree_node*, %union.tree_node** %function, align 8
  %102 = load %union.tree_node*, %union.tree_node** @inline_function_decl, align 8
  %cmp190 = icmp ne %union.tree_node* %101, %102
  br i1 %cmp190, label %land.lhs.true.192, label %if.else.201

land.lhs.true.192:                                ; preds = %land.lhs.true.189
  %103 = load %union.tree_node*, %union.tree_node** %function, align 8
  %cmp193 = icmp ne %union.tree_node* %103, null
  br i1 %cmp193, label %if.then.195, label %if.else.201

if.then.195:                                      ; preds = %land.lhs.true.192
  %104 = load %union.tree_node*, %union.tree_node** %function, align 8
  %call196 = call %struct.function* @find_function_data(%union.tree_node* %104)
  store %struct.function* %call196, %struct.function** %p, align 8
  %105 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call197 = call %struct.rtx_def* @label_rtx(%union.tree_node* %105)
  %106 = load %struct.function*, %struct.function** %p, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %106, i32 0, i32 2
  %107 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_forced_labels = getelementptr inbounds %struct.expr_status, %struct.expr_status* %107, i32 0, i32 5
  %108 = load %struct.rtx_def*, %struct.rtx_def** %x_forced_labels, align 8
  %call198 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call197, %struct.rtx_def* %108)
  %109 = load %struct.function*, %struct.function** %p, align 8
  %expr199 = getelementptr inbounds %struct.function, %struct.function* %109, i32 0, i32 2
  %110 = load %struct.expr_status*, %struct.expr_status** %expr199, align 8
  %x_forced_labels200 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %110, i32 0, i32 5
  store %struct.rtx_def* %call198, %struct.rtx_def** %x_forced_labels200, align 8
  br label %if.end.212

if.else.201:                                      ; preds = %land.lhs.true.192, %land.lhs.true.189, %sw.bb
  %111 = load i32, i32* %modifier.addr, align 4
  %cmp202 = icmp eq i32 %111, 3
  br i1 %cmp202, label %if.then.204, label %if.end.211

if.then.204:                                      ; preds = %if.else.201
  %112 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call205 = call %struct.rtx_def* @label_rtx(%union.tree_node* %112)
  %113 = load %struct.function*, %struct.function** @cfun, align 8
  %expr206 = getelementptr inbounds %struct.function, %struct.function* %113, i32 0, i32 2
  %114 = load %struct.expr_status*, %struct.expr_status** %expr206, align 8
  %x_forced_labels207 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %114, i32 0, i32 5
  %115 = load %struct.rtx_def*, %struct.rtx_def** %x_forced_labels207, align 8
  %call208 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call205, %struct.rtx_def* %115)
  %116 = load %struct.function*, %struct.function** @cfun, align 8
  %expr209 = getelementptr inbounds %struct.function, %struct.function* %116, i32 0, i32 2
  %117 = load %struct.expr_status*, %struct.expr_status** %expr209, align 8
  %x_forced_labels210 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %117, i32 0, i32 5
  store %struct.rtx_def* %call208, %struct.rtx_def** %x_forced_labels210, align 8
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.204, %if.else.201
  br label %if.end.212

if.end.212:                                       ; preds = %if.end.211, %if.then.195
  %118 = load i32, i32* @target_flags, align 4
  %and213 = and i32 %118, 33554432
  %tobool214 = icmp ne i32 %and213, 0
  %cond215 = select i1 %tobool214, i32 5, i32 4
  %119 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call216 = call %struct.rtx_def* @label_rtx(%union.tree_node* %119)
  %call217 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond215, %struct.rtx_def* %call216)
  %call218 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %call217)
  store %struct.rtx_def* %call218, %struct.rtx_def** %temp, align 8
  %120 = load %union.tree_node*, %union.tree_node** %function, align 8
  %121 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp219 = icmp ne %union.tree_node* %120, %121
  br i1 %cmp219, label %land.lhs.true.221, label %if.end.232

land.lhs.true.221:                                ; preds = %if.end.212
  %122 = load %union.tree_node*, %union.tree_node** %function, align 8
  %123 = load %union.tree_node*, %union.tree_node** @inline_function_decl, align 8
  %cmp222 = icmp ne %union.tree_node* %122, %123
  br i1 %cmp222, label %land.lhs.true.224, label %if.end.232

land.lhs.true.224:                                ; preds = %land.lhs.true.221
  %124 = load %union.tree_node*, %union.tree_node** %function, align 8
  %cmp225 = icmp ne %union.tree_node* %124, null
  br i1 %cmp225, label %if.then.227, label %if.end.232

if.then.227:                                      ; preds = %land.lhs.true.224
  %125 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx229 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load230 = load i32, i32* %127, align 8
  %bf.clear231 = and i32 %bf.load230, -134217729
  %bf.set = or i32 %bf.clear231, 134217728
  store i32 %bf.set, i32* %127, align 8
  br label %if.end.232

if.end.232:                                       ; preds = %if.then.227, %land.lhs.true.224, %land.lhs.true.221, %if.end.212
  %128 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %128, %struct.rtx_def** %retval
  br label %return

sw.bb.233:                                        ; preds = %if.end.185
  %129 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl = bitcast %union.tree_node* %129 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool234 = icmp ne %struct.rtx_def* %130, null
  br i1 %tobool234, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.233
  %131 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl235 = bitcast %union.tree_node* %131 to %struct.tree_decl*
  %rtl236 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl235, i32 0, i32 17
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rtl236, align 8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.233
  %133 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %133, i8* null)
  %134 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl237 = bitcast %union.tree_node* %134 to %struct.tree_decl*
  %rtl238 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl237, i32 0, i32 17
  %135 = load %struct.rtx_def*, %struct.rtx_def** %rtl238, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond239 = phi %struct.rtx_def* [ %132, %cond.true ], [ %135, %cond.false ]
  %cmp240 = icmp eq %struct.rtx_def* %cond239, null
  br i1 %cmp240, label %if.then.242, label %if.end.245

if.then.242:                                      ; preds = %cond.end
  %136 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void (%union.tree_node*, i8*, ...) @error_with_decl(%union.tree_node* %136, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i32 0, i32 0))
  %137 = load i32, i32* %mode, align 4
  %idxprom243 = sext i32 %137 to i64
  %arrayidx244 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom243
  %138 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx244, align 8
  store %struct.rtx_def* %138, %struct.rtx_def** %retval
  br label %return

if.end.245:                                       ; preds = %cond.end
  br label %sw.bb.246

sw.bb.246:                                        ; preds = %if.end.185, %if.end.245
  %139 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl247 = bitcast %union.tree_node* %139 to %struct.tree_decl*
  %size = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl247, i32 0, i32 4
  %140 = load %union.tree_node*, %union.tree_node** %size, align 8
  %cmp248 = icmp eq %union.tree_node* %140, null
  br i1 %cmp248, label %land.lhs.true.250, label %if.end.305

land.lhs.true.250:                                ; preds = %sw.bb.246
  %141 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common251 = bitcast %union.tree_node* %141 to %struct.tree_common*
  %type252 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common251, i32 0, i32 1
  %142 = load %union.tree_node*, %union.tree_node** %type252, align 8
  %type253 = bitcast %union.tree_node* %142 to %struct.tree_type*
  %size254 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type253, i32 0, i32 2
  %143 = load %union.tree_node*, %union.tree_node** %size254, align 8
  %cmp255 = icmp ne %union.tree_node* %143, null
  br i1 %cmp255, label %land.lhs.true.257, label %if.end.305

land.lhs.true.257:                                ; preds = %land.lhs.true.250
  %144 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common258 = bitcast %union.tree_node* %144 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common258, i32 0, i32 2
  %bf.load259 = load i32, i32* %static_flag, align 8
  %bf.lshr260 = lshr i32 %bf.load259, 18
  %bf.clear261 = and i32 %bf.lshr260, 1
  %tobool262 = icmp ne i32 %bf.clear261, 0
  br i1 %tobool262, label %if.then.269, label %lor.lhs.false.263

lor.lhs.false.263:                                ; preds = %land.lhs.true.257
  %145 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl264 = bitcast %union.tree_node* %145 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl264, i32 0, i32 5
  %146 = bitcast i48* %external_flag to i64*
  %bf.load265 = load i64, i64* %146, align 8
  %bf.lshr266 = lshr i64 %bf.load265, 8
  %bf.clear267 = and i64 %bf.lshr266, 1
  %bf.cast = trunc i64 %bf.clear267 to i32
  %tobool268 = icmp ne i32 %bf.cast, 0
  br i1 %tobool268, label %if.then.269, label %if.end.305

if.then.269:                                      ; preds = %lor.lhs.false.263, %land.lhs.true.257
  %147 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl270 = bitcast %union.tree_node* %147 to %struct.tree_decl*
  %rtl271 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl270, i32 0, i32 17
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rtl271, align 8
  %cmp272 = icmp ne %struct.rtx_def* %148, null
  br i1 %cmp272, label %cond.true.274, label %cond.false.286

cond.true.274:                                    ; preds = %if.then.269
  %149 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl275 = bitcast %union.tree_node* %149 to %struct.tree_decl*
  %rtl276 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl275, i32 0, i32 17
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtl276, align 8
  %tobool277 = icmp ne %struct.rtx_def* %150, null
  br i1 %tobool277, label %cond.true.278, label %cond.false.281

cond.true.278:                                    ; preds = %cond.true.274
  %151 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl279 = bitcast %union.tree_node* %151 to %struct.tree_decl*
  %rtl280 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl279, i32 0, i32 17
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rtl280, align 8
  br label %cond.end.284

cond.false.281:                                   ; preds = %cond.true.274
  %153 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %153, i8* null)
  %154 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl282 = bitcast %union.tree_node* %154 to %struct.tree_decl*
  %rtl283 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl282, i32 0, i32 17
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtl283, align 8
  br label %cond.end.284

cond.end.284:                                     ; preds = %cond.false.281, %cond.true.278
  %cond285 = phi %struct.rtx_def* [ %152, %cond.true.278 ], [ %155, %cond.false.281 ]
  br label %cond.end.287

cond.false.286:                                   ; preds = %if.then.269
  br label %cond.end.287

cond.end.287:                                     ; preds = %cond.false.286, %cond.end.284
  %cond288 = phi %struct.rtx_def* [ %cond285, %cond.end.284 ], [ null, %cond.false.286 ]
  store %struct.rtx_def* %cond288, %struct.rtx_def** %value, align 8
  %156 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @layout_decl(%union.tree_node* %156, i32 0)
  %157 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %cmp289 = icmp ne %struct.rtx_def* %157, null
  br i1 %cmp289, label %if.then.291, label %if.end.304

if.then.291:                                      ; preds = %cond.end.287
  %158 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl292 = bitcast %union.tree_node* %158 to %struct.tree_decl*
  %mode293 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl292, i32 0, i32 5
  %159 = bitcast i48* %mode293 to i64*
  %bf.load294 = load i64, i64* %159, align 8
  %bf.clear295 = and i64 %bf.load294, 255
  %bf.cast296 = trunc i64 %bf.clear295 to i32
  %160 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load297 = load i32, i32* %161, align 8
  %bf.value = and i32 %bf.cast296, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear298 = and i32 %bf.load297, -16711681
  %bf.set299 = or i32 %bf.clear298, %bf.shl
  store i32 %bf.set299, i32* %161, align 8
  %162 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl300 = bitcast %union.tree_node* %162 to %struct.tree_decl*
  %rtl301 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl300, i32 0, i32 17
  store %struct.rtx_def* null, %struct.rtx_def** %rtl301, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %164 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %163, %union.tree_node* %164, i32 1)
  %165 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %166 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl302 = bitcast %union.tree_node* %166 to %struct.tree_decl*
  %rtl303 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl302, i32 0, i32 17
  store %struct.rtx_def* %165, %struct.rtx_def** %rtl303, align 8
  br label %if.end.304

if.end.304:                                       ; preds = %if.then.291, %cond.end.287
  br label %if.end.305

if.end.305:                                       ; preds = %if.end.304, %lor.lhs.false.263, %land.lhs.true.250, %sw.bb.246
  br label %sw.bb.306

sw.bb.306:                                        ; preds = %if.end.185, %if.end.185, %if.end.305
  %167 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl307 = bitcast %union.tree_node* %167 to %struct.tree_decl*
  %rtl308 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl307, i32 0, i32 17
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rtl308, align 8
  %tobool309 = icmp ne %struct.rtx_def* %168, null
  br i1 %tobool309, label %cond.true.310, label %cond.false.313

cond.true.310:                                    ; preds = %sw.bb.306
  %169 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl311 = bitcast %union.tree_node* %169 to %struct.tree_decl*
  %rtl312 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl311, i32 0, i32 17
  %170 = load %struct.rtx_def*, %struct.rtx_def** %rtl312, align 8
  br label %cond.end.316

cond.false.313:                                   ; preds = %sw.bb.306
  %171 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %171, i8* null)
  %172 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl314 = bitcast %union.tree_node* %172 to %struct.tree_decl*
  %rtl315 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl314, i32 0, i32 17
  %173 = load %struct.rtx_def*, %struct.rtx_def** %rtl315, align 8
  br label %cond.end.316

cond.end.316:                                     ; preds = %cond.false.313, %cond.true.310
  %cond317 = phi %struct.rtx_def* [ %170, %cond.true.310 ], [ %173, %cond.false.313 ]
  %cmp318 = icmp eq %struct.rtx_def* %cond317, null
  br i1 %cmp318, label %if.then.320, label %if.end.321

if.then.320:                                      ; preds = %cond.end.316
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6239, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.321:                                       ; preds = %cond.end.316
  %174 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common322 = bitcast %union.tree_node* %174 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common322, i32 0, i32 2
  %bf.load323 = load i32, i32* %used_flag, align 8
  %bf.lshr324 = lshr i32 %bf.load323, 16
  %bf.clear325 = and i32 %bf.lshr324, 1
  %tobool326 = icmp ne i32 %bf.clear325, 0
  br i1 %tobool326, label %if.end.333, label %if.then.327

if.then.327:                                      ; preds = %if.end.321
  %175 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @assemble_external(%union.tree_node* %175)
  %176 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common328 = bitcast %union.tree_node* %176 to %struct.tree_common*
  %used_flag329 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common328, i32 0, i32 2
  %bf.load330 = load i32, i32* %used_flag329, align 8
  %bf.clear331 = and i32 %bf.load330, -65537
  %bf.set332 = or i32 %bf.clear331, 65536
  store i32 %bf.set332, i32* %used_flag329, align 8
  br label %if.end.333

if.end.333:                                       ; preds = %if.then.327, %if.end.321
  store %struct.rtx_def* null, %struct.rtx_def** %temp, align 8
  %177 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call334 = call %union.tree_node* @decl_function_context(%union.tree_node* %177)
  store %union.tree_node* %call334, %union.tree_node** %context, align 8
  %178 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp335 = icmp ne %union.tree_node* %178, null
  br i1 %cmp335, label %land.lhs.true.337, label %if.else.581

land.lhs.true.337:                                ; preds = %if.end.333
  %179 = load %union.tree_node*, %union.tree_node** %context, align 8
  %180 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp338 = icmp ne %union.tree_node* %179, %180
  br i1 %cmp338, label %land.lhs.true.340, label %if.else.581

land.lhs.true.340:                                ; preds = %land.lhs.true.337
  %181 = load %union.tree_node*, %union.tree_node** %context, align 8
  %182 = load %union.tree_node*, %union.tree_node** @inline_function_decl, align 8
  %cmp341 = icmp ne %union.tree_node* %181, %182
  br i1 %cmp341, label %land.lhs.true.343, label %if.else.581

land.lhs.true.343:                                ; preds = %land.lhs.true.340
  %183 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl344 = bitcast %union.tree_node* %183 to %struct.tree_decl*
  %rtl345 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl344, i32 0, i32 17
  %184 = load %struct.rtx_def*, %struct.rtx_def** %rtl345, align 8
  %tobool346 = icmp ne %struct.rtx_def* %184, null
  br i1 %tobool346, label %cond.true.347, label %cond.false.350

cond.true.347:                                    ; preds = %land.lhs.true.343
  %185 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl348 = bitcast %union.tree_node* %185 to %struct.tree_decl*
  %rtl349 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl348, i32 0, i32 17
  %186 = load %struct.rtx_def*, %struct.rtx_def** %rtl349, align 8
  br label %cond.end.353

cond.false.350:                                   ; preds = %land.lhs.true.343
  %187 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %187, i8* null)
  %188 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl351 = bitcast %union.tree_node* %188 to %struct.tree_decl*
  %rtl352 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl351, i32 0, i32 17
  %189 = load %struct.rtx_def*, %struct.rtx_def** %rtl352, align 8
  br label %cond.end.353

cond.end.353:                                     ; preds = %cond.false.350, %cond.true.347
  %cond354 = phi %struct.rtx_def* [ %186, %cond.true.347 ], [ %189, %cond.false.350 ]
  %190 = bitcast %struct.rtx_def* %cond354 to i32*
  %bf.load355 = load i32, i32* %190, align 8
  %bf.clear356 = and i32 %bf.load355, 65535
  %cmp357 = icmp eq i32 %bf.clear356, 66
  br i1 %cmp357, label %land.lhs.true.359, label %if.then.511

land.lhs.true.359:                                ; preds = %cond.end.353
  %191 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl360 = bitcast %union.tree_node* %191 to %struct.tree_decl*
  %rtl361 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl360, i32 0, i32 17
  %192 = load %struct.rtx_def*, %struct.rtx_def** %rtl361, align 8
  %tobool362 = icmp ne %struct.rtx_def* %192, null
  br i1 %tobool362, label %cond.true.363, label %cond.false.366

cond.true.363:                                    ; preds = %land.lhs.true.359
  %193 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl364 = bitcast %union.tree_node* %193 to %struct.tree_decl*
  %rtl365 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl364, i32 0, i32 17
  %194 = load %struct.rtx_def*, %struct.rtx_def** %rtl365, align 8
  br label %cond.end.369

cond.false.366:                                   ; preds = %land.lhs.true.359
  %195 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %195, i8* null)
  %196 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl367 = bitcast %union.tree_node* %196 to %struct.tree_decl*
  %rtl368 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl367, i32 0, i32 17
  %197 = load %struct.rtx_def*, %struct.rtx_def** %rtl368, align 8
  br label %cond.end.369

cond.end.369:                                     ; preds = %cond.false.366, %cond.true.363
  %cond370 = phi %struct.rtx_def* [ %194, %cond.true.363 ], [ %197, %cond.false.366 ]
  %fld371 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond370, i32 0, i32 1
  %arrayidx372 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld371, i32 0, i64 0
  %rtx373 = bitcast %union.rtunion_def* %arrayidx372 to %struct.rtx_def**
  %198 = load %struct.rtx_def*, %struct.rtx_def** %rtx373, align 8
  %199 = bitcast %struct.rtx_def* %198 to i32*
  %bf.load374 = load i32, i32* %199, align 8
  %bf.clear375 = and i32 %bf.load374, 65535
  %cmp376 = icmp eq i32 %bf.clear375, 67
  br i1 %cmp376, label %if.else.581, label %lor.lhs.false.378

lor.lhs.false.378:                                ; preds = %cond.end.369
  %200 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl379 = bitcast %union.tree_node* %200 to %struct.tree_decl*
  %rtl380 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl379, i32 0, i32 17
  %201 = load %struct.rtx_def*, %struct.rtx_def** %rtl380, align 8
  %tobool381 = icmp ne %struct.rtx_def* %201, null
  br i1 %tobool381, label %cond.true.382, label %cond.false.385

cond.true.382:                                    ; preds = %lor.lhs.false.378
  %202 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl383 = bitcast %union.tree_node* %202 to %struct.tree_decl*
  %rtl384 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl383, i32 0, i32 17
  %203 = load %struct.rtx_def*, %struct.rtx_def** %rtl384, align 8
  br label %cond.end.388

cond.false.385:                                   ; preds = %lor.lhs.false.378
  %204 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %204, i8* null)
  %205 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl386 = bitcast %union.tree_node* %205 to %struct.tree_decl*
  %rtl387 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl386, i32 0, i32 17
  %206 = load %struct.rtx_def*, %struct.rtx_def** %rtl387, align 8
  br label %cond.end.388

cond.end.388:                                     ; preds = %cond.false.385, %cond.true.382
  %cond389 = phi %struct.rtx_def* [ %203, %cond.true.382 ], [ %206, %cond.false.385 ]
  %fld390 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond389, i32 0, i32 1
  %arrayidx391 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld390, i32 0, i64 0
  %rtx392 = bitcast %union.rtunion_def* %arrayidx391 to %struct.rtx_def**
  %207 = load %struct.rtx_def*, %struct.rtx_def** %rtx392, align 8
  %208 = bitcast %struct.rtx_def* %207 to i32*
  %bf.load393 = load i32, i32* %208, align 8
  %bf.clear394 = and i32 %bf.load393, 65535
  %cmp395 = icmp eq i32 %bf.clear394, 68
  br i1 %cmp395, label %if.else.581, label %lor.lhs.false.397

lor.lhs.false.397:                                ; preds = %cond.end.388
  %209 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl398 = bitcast %union.tree_node* %209 to %struct.tree_decl*
  %rtl399 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl398, i32 0, i32 17
  %210 = load %struct.rtx_def*, %struct.rtx_def** %rtl399, align 8
  %tobool400 = icmp ne %struct.rtx_def* %210, null
  br i1 %tobool400, label %cond.true.401, label %cond.false.404

cond.true.401:                                    ; preds = %lor.lhs.false.397
  %211 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl402 = bitcast %union.tree_node* %211 to %struct.tree_decl*
  %rtl403 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl402, i32 0, i32 17
  %212 = load %struct.rtx_def*, %struct.rtx_def** %rtl403, align 8
  br label %cond.end.407

cond.false.404:                                   ; preds = %lor.lhs.false.397
  %213 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %213, i8* null)
  %214 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl405 = bitcast %union.tree_node* %214 to %struct.tree_decl*
  %rtl406 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl405, i32 0, i32 17
  %215 = load %struct.rtx_def*, %struct.rtx_def** %rtl406, align 8
  br label %cond.end.407

cond.end.407:                                     ; preds = %cond.false.404, %cond.true.401
  %cond408 = phi %struct.rtx_def* [ %212, %cond.true.401 ], [ %215, %cond.false.404 ]
  %fld409 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond408, i32 0, i32 1
  %arrayidx410 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld409, i32 0, i64 0
  %rtx411 = bitcast %union.rtunion_def* %arrayidx410 to %struct.rtx_def**
  %216 = load %struct.rtx_def*, %struct.rtx_def** %rtx411, align 8
  %217 = bitcast %struct.rtx_def* %216 to i32*
  %bf.load412 = load i32, i32* %217, align 8
  %bf.clear413 = and i32 %bf.load412, 65535
  %cmp414 = icmp eq i32 %bf.clear413, 54
  br i1 %cmp414, label %if.else.581, label %lor.lhs.false.416

lor.lhs.false.416:                                ; preds = %cond.end.407
  %218 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl417 = bitcast %union.tree_node* %218 to %struct.tree_decl*
  %rtl418 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl417, i32 0, i32 17
  %219 = load %struct.rtx_def*, %struct.rtx_def** %rtl418, align 8
  %tobool419 = icmp ne %struct.rtx_def* %219, null
  br i1 %tobool419, label %cond.true.420, label %cond.false.423

cond.true.420:                                    ; preds = %lor.lhs.false.416
  %220 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl421 = bitcast %union.tree_node* %220 to %struct.tree_decl*
  %rtl422 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl421, i32 0, i32 17
  %221 = load %struct.rtx_def*, %struct.rtx_def** %rtl422, align 8
  br label %cond.end.426

cond.false.423:                                   ; preds = %lor.lhs.false.416
  %222 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %222, i8* null)
  %223 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl424 = bitcast %union.tree_node* %223 to %struct.tree_decl*
  %rtl425 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl424, i32 0, i32 17
  %224 = load %struct.rtx_def*, %struct.rtx_def** %rtl425, align 8
  br label %cond.end.426

cond.end.426:                                     ; preds = %cond.false.423, %cond.true.420
  %cond427 = phi %struct.rtx_def* [ %221, %cond.true.420 ], [ %224, %cond.false.423 ]
  %fld428 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond427, i32 0, i32 1
  %arrayidx429 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld428, i32 0, i64 0
  %rtx430 = bitcast %union.rtunion_def* %arrayidx429 to %struct.rtx_def**
  %225 = load %struct.rtx_def*, %struct.rtx_def** %rtx430, align 8
  %226 = bitcast %struct.rtx_def* %225 to i32*
  %bf.load431 = load i32, i32* %226, align 8
  %bf.clear432 = and i32 %bf.load431, 65535
  %cmp433 = icmp eq i32 %bf.clear432, 55
  br i1 %cmp433, label %if.else.581, label %lor.lhs.false.435

lor.lhs.false.435:                                ; preds = %cond.end.426
  %227 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl436 = bitcast %union.tree_node* %227 to %struct.tree_decl*
  %rtl437 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl436, i32 0, i32 17
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rtl437, align 8
  %tobool438 = icmp ne %struct.rtx_def* %228, null
  br i1 %tobool438, label %cond.true.439, label %cond.false.442

cond.true.439:                                    ; preds = %lor.lhs.false.435
  %229 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl440 = bitcast %union.tree_node* %229 to %struct.tree_decl*
  %rtl441 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl440, i32 0, i32 17
  %230 = load %struct.rtx_def*, %struct.rtx_def** %rtl441, align 8
  br label %cond.end.445

cond.false.442:                                   ; preds = %lor.lhs.false.435
  %231 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %231, i8* null)
  %232 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl443 = bitcast %union.tree_node* %232 to %struct.tree_decl*
  %rtl444 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl443, i32 0, i32 17
  %233 = load %struct.rtx_def*, %struct.rtx_def** %rtl444, align 8
  br label %cond.end.445

cond.end.445:                                     ; preds = %cond.false.442, %cond.true.439
  %cond446 = phi %struct.rtx_def* [ %230, %cond.true.439 ], [ %233, %cond.false.442 ]
  %fld447 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond446, i32 0, i32 1
  %arrayidx448 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld447, i32 0, i64 0
  %rtx449 = bitcast %union.rtunion_def* %arrayidx448 to %struct.rtx_def**
  %234 = load %struct.rtx_def*, %struct.rtx_def** %rtx449, align 8
  %235 = bitcast %struct.rtx_def* %234 to i32*
  %bf.load450 = load i32, i32* %235, align 8
  %bf.clear451 = and i32 %bf.load450, 65535
  %cmp452 = icmp eq i32 %bf.clear451, 58
  br i1 %cmp452, label %if.else.581, label %lor.lhs.false.454

lor.lhs.false.454:                                ; preds = %cond.end.445
  %236 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl455 = bitcast %union.tree_node* %236 to %struct.tree_decl*
  %rtl456 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl455, i32 0, i32 17
  %237 = load %struct.rtx_def*, %struct.rtx_def** %rtl456, align 8
  %tobool457 = icmp ne %struct.rtx_def* %237, null
  br i1 %tobool457, label %cond.true.458, label %cond.false.461

cond.true.458:                                    ; preds = %lor.lhs.false.454
  %238 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl459 = bitcast %union.tree_node* %238 to %struct.tree_decl*
  %rtl460 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl459, i32 0, i32 17
  %239 = load %struct.rtx_def*, %struct.rtx_def** %rtl460, align 8
  br label %cond.end.464

cond.false.461:                                   ; preds = %lor.lhs.false.454
  %240 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %240, i8* null)
  %241 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl462 = bitcast %union.tree_node* %241 to %struct.tree_decl*
  %rtl463 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl462, i32 0, i32 17
  %242 = load %struct.rtx_def*, %struct.rtx_def** %rtl463, align 8
  br label %cond.end.464

cond.end.464:                                     ; preds = %cond.false.461, %cond.true.458
  %cond465 = phi %struct.rtx_def* [ %239, %cond.true.458 ], [ %242, %cond.false.461 ]
  %fld466 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond465, i32 0, i32 1
  %arrayidx467 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld466, i32 0, i64 0
  %rtx468 = bitcast %union.rtunion_def* %arrayidx467 to %struct.rtx_def**
  %243 = load %struct.rtx_def*, %struct.rtx_def** %rtx468, align 8
  %244 = bitcast %struct.rtx_def* %243 to i32*
  %bf.load469 = load i32, i32* %244, align 8
  %bf.clear470 = and i32 %bf.load469, 65535
  %cmp471 = icmp eq i32 %bf.clear470, 134
  br i1 %cmp471, label %if.else.581, label %lor.lhs.false.473

lor.lhs.false.473:                                ; preds = %cond.end.464
  %245 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl474 = bitcast %union.tree_node* %245 to %struct.tree_decl*
  %rtl475 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl474, i32 0, i32 17
  %246 = load %struct.rtx_def*, %struct.rtx_def** %rtl475, align 8
  %tobool476 = icmp ne %struct.rtx_def* %246, null
  br i1 %tobool476, label %cond.true.477, label %cond.false.480

cond.true.477:                                    ; preds = %lor.lhs.false.473
  %247 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl478 = bitcast %union.tree_node* %247 to %struct.tree_decl*
  %rtl479 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl478, i32 0, i32 17
  %248 = load %struct.rtx_def*, %struct.rtx_def** %rtl479, align 8
  br label %cond.end.483

cond.false.480:                                   ; preds = %lor.lhs.false.473
  %249 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %249, i8* null)
  %250 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl481 = bitcast %union.tree_node* %250 to %struct.tree_decl*
  %rtl482 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl481, i32 0, i32 17
  %251 = load %struct.rtx_def*, %struct.rtx_def** %rtl482, align 8
  br label %cond.end.483

cond.end.483:                                     ; preds = %cond.false.480, %cond.true.477
  %cond484 = phi %struct.rtx_def* [ %248, %cond.true.477 ], [ %251, %cond.false.480 ]
  %fld485 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond484, i32 0, i32 1
  %arrayidx486 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld485, i32 0, i64 0
  %rtx487 = bitcast %union.rtunion_def* %arrayidx486 to %struct.rtx_def**
  %252 = load %struct.rtx_def*, %struct.rtx_def** %rtx487, align 8
  %253 = bitcast %struct.rtx_def* %252 to i32*
  %bf.load488 = load i32, i32* %253, align 8
  %bf.clear489 = and i32 %bf.load488, 65535
  %cmp490 = icmp eq i32 %bf.clear489, 56
  br i1 %cmp490, label %if.else.581, label %lor.lhs.false.492

lor.lhs.false.492:                                ; preds = %cond.end.483
  %254 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl493 = bitcast %union.tree_node* %254 to %struct.tree_decl*
  %rtl494 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl493, i32 0, i32 17
  %255 = load %struct.rtx_def*, %struct.rtx_def** %rtl494, align 8
  %tobool495 = icmp ne %struct.rtx_def* %255, null
  br i1 %tobool495, label %cond.true.496, label %cond.false.499

cond.true.496:                                    ; preds = %lor.lhs.false.492
  %256 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl497 = bitcast %union.tree_node* %256 to %struct.tree_decl*
  %rtl498 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl497, i32 0, i32 17
  %257 = load %struct.rtx_def*, %struct.rtx_def** %rtl498, align 8
  br label %cond.end.502

cond.false.499:                                   ; preds = %lor.lhs.false.492
  %258 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %258, i8* null)
  %259 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl500 = bitcast %union.tree_node* %259 to %struct.tree_decl*
  %rtl501 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl500, i32 0, i32 17
  %260 = load %struct.rtx_def*, %struct.rtx_def** %rtl501, align 8
  br label %cond.end.502

cond.end.502:                                     ; preds = %cond.false.499, %cond.true.496
  %cond503 = phi %struct.rtx_def* [ %257, %cond.true.496 ], [ %260, %cond.false.499 ]
  %fld504 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond503, i32 0, i32 1
  %arrayidx505 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld504, i32 0, i64 0
  %rtx506 = bitcast %union.rtunion_def* %arrayidx505 to %struct.rtx_def**
  %261 = load %struct.rtx_def*, %struct.rtx_def** %rtx506, align 8
  %262 = bitcast %struct.rtx_def* %261 to i32*
  %bf.load507 = load i32, i32* %262, align 8
  %bf.clear508 = and i32 %bf.load507, 65535
  %cmp509 = icmp eq i32 %bf.clear508, 140
  br i1 %cmp509, label %if.else.581, label %if.then.511

if.then.511:                                      ; preds = %cond.end.502, %cond.end.353
  %263 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl512 = bitcast %union.tree_node* %263 to %struct.tree_decl*
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl512, i32 0, i32 5
  %264 = bitcast i48* %nonlocal_flag to i64*
  %bf.load513 = load i64, i64* %264, align 8
  %bf.clear514 = and i64 %bf.load513, -513
  %bf.set515 = or i64 %bf.clear514, 512
  store i64 %bf.set515, i64* %264, align 8
  %265 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl516 = bitcast %union.tree_node* %265 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl516, i32 0, i32 5
  %266 = bitcast i48* %regdecl_flag to i64*
  %bf.load517 = load i64, i64* %266, align 8
  %bf.lshr518 = lshr i64 %bf.load517, 10
  %bf.clear519 = and i64 %bf.lshr518, 1
  %bf.cast520 = trunc i64 %bf.clear519 to i32
  %tobool521 = icmp ne i32 %bf.cast520, 0
  br i1 %tobool521, label %if.then.522, label %if.end.523

if.then.522:                                      ; preds = %if.then.511
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6272, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.523:                                       ; preds = %if.then.511
  %267 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call524 = call i32 @mark_addressable(%union.tree_node* %267)
  %268 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl525 = bitcast %union.tree_node* %268 to %struct.tree_decl*
  %rtl526 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl525, i32 0, i32 17
  %269 = load %struct.rtx_def*, %struct.rtx_def** %rtl526, align 8
  %tobool527 = icmp ne %struct.rtx_def* %269, null
  br i1 %tobool527, label %cond.true.528, label %cond.false.531

cond.true.528:                                    ; preds = %if.end.523
  %270 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl529 = bitcast %union.tree_node* %270 to %struct.tree_decl*
  %rtl530 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl529, i32 0, i32 17
  %271 = load %struct.rtx_def*, %struct.rtx_def** %rtl530, align 8
  br label %cond.end.534

cond.false.531:                                   ; preds = %if.end.523
  %272 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %272, i8* null)
  %273 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl532 = bitcast %union.tree_node* %273 to %struct.tree_decl*
  %rtl533 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl532, i32 0, i32 17
  %274 = load %struct.rtx_def*, %struct.rtx_def** %rtl533, align 8
  br label %cond.end.534

cond.end.534:                                     ; preds = %cond.false.531, %cond.true.528
  %cond535 = phi %struct.rtx_def* [ %271, %cond.true.528 ], [ %274, %cond.false.531 ]
  %275 = bitcast %struct.rtx_def* %cond535 to i32*
  %bf.load536 = load i32, i32* %275, align 8
  %bf.clear537 = and i32 %bf.load536, 65535
  %cmp538 = icmp ne i32 %bf.clear537, 66
  br i1 %cmp538, label %if.then.540, label %if.end.541

if.then.540:                                      ; preds = %cond.end.534
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6275, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.541:                                       ; preds = %cond.end.534
  %276 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl542 = bitcast %union.tree_node* %276 to %struct.tree_decl*
  %rtl543 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl542, i32 0, i32 17
  %277 = load %struct.rtx_def*, %struct.rtx_def** %rtl543, align 8
  %tobool544 = icmp ne %struct.rtx_def* %277, null
  br i1 %tobool544, label %cond.true.545, label %cond.false.548

cond.true.545:                                    ; preds = %if.end.541
  %278 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl546 = bitcast %union.tree_node* %278 to %struct.tree_decl*
  %rtl547 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl546, i32 0, i32 17
  %279 = load %struct.rtx_def*, %struct.rtx_def** %rtl547, align 8
  br label %cond.end.551

cond.false.548:                                   ; preds = %if.end.541
  %280 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %280, i8* null)
  %281 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl549 = bitcast %union.tree_node* %281 to %struct.tree_decl*
  %rtl550 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl549, i32 0, i32 17
  %282 = load %struct.rtx_def*, %struct.rtx_def** %rtl550, align 8
  br label %cond.end.551

cond.end.551:                                     ; preds = %cond.false.548, %cond.true.545
  %cond552 = phi %struct.rtx_def* [ %279, %cond.true.545 ], [ %282, %cond.false.548 ]
  %fld553 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond552, i32 0, i32 1
  %arrayidx554 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld553, i32 0, i64 0
  %rtx555 = bitcast %union.rtunion_def* %arrayidx554 to %struct.rtx_def**
  %283 = load %struct.rtx_def*, %struct.rtx_def** %rtx555, align 8
  store %struct.rtx_def* %283, %struct.rtx_def** %addr, align 8
  %284 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %285 = bitcast %struct.rtx_def* %284 to i32*
  %bf.load556 = load i32, i32* %285, align 8
  %bf.clear557 = and i32 %bf.load556, 65535
  %cmp558 = icmp eq i32 %bf.clear557, 66
  br i1 %cmp558, label %if.then.560, label %if.else.566

if.then.560:                                      ; preds = %cond.end.551
  %286 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %287 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld561 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %287, i32 0, i32 1
  %arrayidx562 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld561, i32 0, i64 0
  %rtx563 = bitcast %union.rtunion_def* %arrayidx562 to %struct.rtx_def**
  %288 = load %struct.rtx_def*, %struct.rtx_def** %rtx563, align 8
  %289 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call564 = call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %288, %union.tree_node* %289)
  %call565 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %286, %struct.rtx_def* %call564)
  store %struct.rtx_def* %call565, %struct.rtx_def** %addr, align 8
  br label %if.end.568

if.else.566:                                      ; preds = %cond.end.551
  %290 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %291 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call567 = call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %290, %union.tree_node* %291)
  store %struct.rtx_def* %call567, %struct.rtx_def** %addr, align 8
  br label %if.end.568

if.end.568:                                       ; preds = %if.else.566, %if.then.560
  %292 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl569 = bitcast %union.tree_node* %292 to %struct.tree_decl*
  %rtl570 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl569, i32 0, i32 17
  %293 = load %struct.rtx_def*, %struct.rtx_def** %rtl570, align 8
  %tobool571 = icmp ne %struct.rtx_def* %293, null
  br i1 %tobool571, label %cond.true.572, label %cond.false.575

cond.true.572:                                    ; preds = %if.end.568
  %294 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl573 = bitcast %union.tree_node* %294 to %struct.tree_decl*
  %rtl574 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl573, i32 0, i32 17
  %295 = load %struct.rtx_def*, %struct.rtx_def** %rtl574, align 8
  br label %cond.end.578

cond.false.575:                                   ; preds = %if.end.568
  %296 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %296, i8* null)
  %297 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl576 = bitcast %union.tree_node* %297 to %struct.tree_decl*
  %rtl577 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl576, i32 0, i32 17
  %298 = load %struct.rtx_def*, %struct.rtx_def** %rtl577, align 8
  br label %cond.end.578

cond.end.578:                                     ; preds = %cond.false.575, %cond.true.572
  %cond579 = phi %struct.rtx_def* [ %295, %cond.true.572 ], [ %298, %cond.false.575 ]
  %299 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call580 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %cond579, %struct.rtx_def* %299)
  store %struct.rtx_def* %call580, %struct.rtx_def** %temp, align 8
  br label %if.end.727

if.else.581:                                      ; preds = %cond.end.502, %cond.end.483, %cond.end.464, %cond.end.445, %cond.end.426, %cond.end.407, %cond.end.388, %cond.end.369, %land.lhs.true.340, %land.lhs.true.337, %if.end.333
  %300 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl582 = bitcast %union.tree_node* %300 to %struct.tree_decl*
  %rtl583 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl582, i32 0, i32 17
  %301 = load %struct.rtx_def*, %struct.rtx_def** %rtl583, align 8
  %tobool584 = icmp ne %struct.rtx_def* %301, null
  br i1 %tobool584, label %cond.true.585, label %cond.false.588

cond.true.585:                                    ; preds = %if.else.581
  %302 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl586 = bitcast %union.tree_node* %302 to %struct.tree_decl*
  %rtl587 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl586, i32 0, i32 17
  %303 = load %struct.rtx_def*, %struct.rtx_def** %rtl587, align 8
  br label %cond.end.591

cond.false.588:                                   ; preds = %if.else.581
  %304 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %304, i8* null)
  %305 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl589 = bitcast %union.tree_node* %305 to %struct.tree_decl*
  %rtl590 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl589, i32 0, i32 17
  %306 = load %struct.rtx_def*, %struct.rtx_def** %rtl590, align 8
  br label %cond.end.591

cond.end.591:                                     ; preds = %cond.false.588, %cond.true.585
  %cond592 = phi %struct.rtx_def* [ %303, %cond.true.585 ], [ %306, %cond.false.588 ]
  %307 = bitcast %struct.rtx_def* %cond592 to i32*
  %bf.load593 = load i32, i32* %307, align 8
  %bf.clear594 = and i32 %bf.load593, 65535
  %cmp595 = icmp eq i32 %bf.clear594, 66
  br i1 %cmp595, label %land.lhs.true.597, label %if.else.629

land.lhs.true.597:                                ; preds = %cond.end.591
  %308 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl598 = bitcast %union.tree_node* %308 to %struct.tree_decl*
  %rtl599 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl598, i32 0, i32 17
  %309 = load %struct.rtx_def*, %struct.rtx_def** %rtl599, align 8
  %tobool600 = icmp ne %struct.rtx_def* %309, null
  br i1 %tobool600, label %cond.true.601, label %cond.false.604

cond.true.601:                                    ; preds = %land.lhs.true.597
  %310 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl602 = bitcast %union.tree_node* %310 to %struct.tree_decl*
  %rtl603 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl602, i32 0, i32 17
  %311 = load %struct.rtx_def*, %struct.rtx_def** %rtl603, align 8
  br label %cond.end.607

cond.false.604:                                   ; preds = %land.lhs.true.597
  %312 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %312, i8* null)
  %313 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl605 = bitcast %union.tree_node* %313 to %struct.tree_decl*
  %rtl606 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl605, i32 0, i32 17
  %314 = load %struct.rtx_def*, %struct.rtx_def** %rtl606, align 8
  br label %cond.end.607

cond.end.607:                                     ; preds = %cond.false.604, %cond.true.601
  %cond608 = phi %struct.rtx_def* [ %311, %cond.true.601 ], [ %314, %cond.false.604 ]
  %fld609 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond608, i32 0, i32 1
  %arrayidx610 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld609, i32 0, i64 0
  %rtx611 = bitcast %union.rtunion_def* %arrayidx610 to %struct.rtx_def**
  %315 = load %struct.rtx_def*, %struct.rtx_def** %rtx611, align 8
  %316 = bitcast %struct.rtx_def* %315 to i32*
  %bf.load612 = load i32, i32* %316, align 8
  %bf.clear613 = and i32 %bf.load612, 65535
  %cmp614 = icmp eq i32 %bf.clear613, 61
  br i1 %cmp614, label %if.then.616, label %if.else.629

if.then.616:                                      ; preds = %cond.end.607
  %317 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl617 = bitcast %union.tree_node* %317 to %struct.tree_decl*
  %rtl618 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl617, i32 0, i32 17
  %318 = load %struct.rtx_def*, %struct.rtx_def** %rtl618, align 8
  %tobool619 = icmp ne %struct.rtx_def* %318, null
  br i1 %tobool619, label %cond.true.620, label %cond.false.623

cond.true.620:                                    ; preds = %if.then.616
  %319 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl621 = bitcast %union.tree_node* %319 to %struct.tree_decl*
  %rtl622 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl621, i32 0, i32 17
  %320 = load %struct.rtx_def*, %struct.rtx_def** %rtl622, align 8
  br label %cond.end.626

cond.false.623:                                   ; preds = %if.then.616
  %321 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %321, i8* null)
  %322 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl624 = bitcast %union.tree_node* %322 to %struct.tree_decl*
  %rtl625 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl624, i32 0, i32 17
  %323 = load %struct.rtx_def*, %struct.rtx_def** %rtl625, align 8
  br label %cond.end.626

cond.end.626:                                     ; preds = %cond.false.623, %cond.true.620
  %cond627 = phi %struct.rtx_def* [ %320, %cond.true.620 ], [ %323, %cond.false.623 ]
  %call628 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %cond627)
  store %struct.rtx_def* %call628, %struct.rtx_def** %temp, align 8
  br label %if.end.726

if.else.629:                                      ; preds = %cond.end.607, %cond.end.591
  %324 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl630 = bitcast %union.tree_node* %324 to %struct.tree_decl*
  %rtl631 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl630, i32 0, i32 17
  %325 = load %struct.rtx_def*, %struct.rtx_def** %rtl631, align 8
  %tobool632 = icmp ne %struct.rtx_def* %325, null
  br i1 %tobool632, label %cond.true.633, label %cond.false.636

cond.true.633:                                    ; preds = %if.else.629
  %326 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl634 = bitcast %union.tree_node* %326 to %struct.tree_decl*
  %rtl635 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl634, i32 0, i32 17
  %327 = load %struct.rtx_def*, %struct.rtx_def** %rtl635, align 8
  br label %cond.end.639

cond.false.636:                                   ; preds = %if.else.629
  %328 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %328, i8* null)
  %329 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl637 = bitcast %union.tree_node* %329 to %struct.tree_decl*
  %rtl638 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl637, i32 0, i32 17
  %330 = load %struct.rtx_def*, %struct.rtx_def** %rtl638, align 8
  br label %cond.end.639

cond.end.639:                                     ; preds = %cond.false.636, %cond.true.633
  %cond640 = phi %struct.rtx_def* [ %327, %cond.true.633 ], [ %330, %cond.false.636 ]
  %331 = bitcast %struct.rtx_def* %cond640 to i32*
  %bf.load641 = load i32, i32* %331, align 8
  %bf.clear642 = and i32 %bf.load641, 65535
  %cmp643 = icmp eq i32 %bf.clear642, 66
  br i1 %cmp643, label %land.lhs.true.645, label %if.end.725

land.lhs.true.645:                                ; preds = %cond.end.639
  %332 = load i32, i32* %modifier.addr, align 4
  %cmp646 = icmp ne i32 %332, 2
  br i1 %cmp646, label %land.lhs.true.648, label %if.end.725

land.lhs.true.648:                                ; preds = %land.lhs.true.645
  %333 = load i32, i32* %modifier.addr, align 4
  %cmp649 = icmp ne i32 %333, 1
  br i1 %cmp649, label %land.lhs.true.651, label %if.end.725

land.lhs.true.651:                                ; preds = %land.lhs.true.648
  %334 = load i32, i32* %modifier.addr, align 4
  %cmp652 = icmp ne i32 %334, 3
  br i1 %cmp652, label %land.lhs.true.654, label %if.end.725

land.lhs.true.654:                                ; preds = %land.lhs.true.651
  %335 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl655 = bitcast %union.tree_node* %335 to %struct.tree_decl*
  %mode656 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl655, i32 0, i32 5
  %336 = bitcast i48* %mode656 to i64*
  %bf.load657 = load i64, i64* %336, align 8
  %bf.clear658 = and i64 %bf.load657, 255
  %bf.cast659 = trunc i64 %bf.clear658 to i32
  %337 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl660 = bitcast %union.tree_node* %337 to %struct.tree_decl*
  %rtl661 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl660, i32 0, i32 17
  %338 = load %struct.rtx_def*, %struct.rtx_def** %rtl661, align 8
  %tobool662 = icmp ne %struct.rtx_def* %338, null
  br i1 %tobool662, label %cond.true.663, label %cond.false.666

cond.true.663:                                    ; preds = %land.lhs.true.654
  %339 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl664 = bitcast %union.tree_node* %339 to %struct.tree_decl*
  %rtl665 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl664, i32 0, i32 17
  %340 = load %struct.rtx_def*, %struct.rtx_def** %rtl665, align 8
  br label %cond.end.669

cond.false.666:                                   ; preds = %land.lhs.true.654
  %341 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %341, i8* null)
  %342 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl667 = bitcast %union.tree_node* %342 to %struct.tree_decl*
  %rtl668 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl667, i32 0, i32 17
  %343 = load %struct.rtx_def*, %struct.rtx_def** %rtl668, align 8
  br label %cond.end.669

cond.end.669:                                     ; preds = %cond.false.666, %cond.true.663
  %cond670 = phi %struct.rtx_def* [ %340, %cond.true.663 ], [ %343, %cond.false.666 ]
  %fld671 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond670, i32 0, i32 1
  %arrayidx672 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld671, i32 0, i64 0
  %rtx673 = bitcast %union.rtunion_def* %arrayidx672 to %struct.rtx_def**
  %344 = load %struct.rtx_def*, %struct.rtx_def** %rtx673, align 8
  %call674 = call i32 @memory_address_p(i32 %bf.cast659, %struct.rtx_def* %344)
  %tobool675 = icmp ne i32 %call674, 0
  br i1 %tobool675, label %lor.lhs.false.676, label %if.then.697

lor.lhs.false.676:                                ; preds = %cond.end.669
  %345 = load i32, i32* @flag_force_addr, align 4
  %tobool677 = icmp ne i32 %345, 0
  br i1 %tobool677, label %land.lhs.true.678, label %if.end.725

land.lhs.true.678:                                ; preds = %lor.lhs.false.676
  %346 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl679 = bitcast %union.tree_node* %346 to %struct.tree_decl*
  %rtl680 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl679, i32 0, i32 17
  %347 = load %struct.rtx_def*, %struct.rtx_def** %rtl680, align 8
  %tobool681 = icmp ne %struct.rtx_def* %347, null
  br i1 %tobool681, label %cond.true.682, label %cond.false.685

cond.true.682:                                    ; preds = %land.lhs.true.678
  %348 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl683 = bitcast %union.tree_node* %348 to %struct.tree_decl*
  %rtl684 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl683, i32 0, i32 17
  %349 = load %struct.rtx_def*, %struct.rtx_def** %rtl684, align 8
  br label %cond.end.688

cond.false.685:                                   ; preds = %land.lhs.true.678
  %350 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %350, i8* null)
  %351 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl686 = bitcast %union.tree_node* %351 to %struct.tree_decl*
  %rtl687 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl686, i32 0, i32 17
  %352 = load %struct.rtx_def*, %struct.rtx_def** %rtl687, align 8
  br label %cond.end.688

cond.end.688:                                     ; preds = %cond.false.685, %cond.true.682
  %cond689 = phi %struct.rtx_def* [ %349, %cond.true.682 ], [ %352, %cond.false.685 ]
  %fld690 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond689, i32 0, i32 1
  %arrayidx691 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld690, i32 0, i64 0
  %rtx692 = bitcast %union.rtunion_def* %arrayidx691 to %struct.rtx_def**
  %353 = load %struct.rtx_def*, %struct.rtx_def** %rtx692, align 8
  %354 = bitcast %struct.rtx_def* %353 to i32*
  %bf.load693 = load i32, i32* %354, align 8
  %bf.clear694 = and i32 %bf.load693, 65535
  %cmp695 = icmp ne i32 %bf.clear694, 61
  br i1 %cmp695, label %if.then.697, label %if.end.725

if.then.697:                                      ; preds = %cond.end.688, %cond.end.669
  %355 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl698 = bitcast %union.tree_node* %355 to %struct.tree_decl*
  %rtl699 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl698, i32 0, i32 17
  %356 = load %struct.rtx_def*, %struct.rtx_def** %rtl699, align 8
  %tobool700 = icmp ne %struct.rtx_def* %356, null
  br i1 %tobool700, label %cond.true.701, label %cond.false.704

cond.true.701:                                    ; preds = %if.then.697
  %357 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl702 = bitcast %union.tree_node* %357 to %struct.tree_decl*
  %rtl703 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl702, i32 0, i32 17
  %358 = load %struct.rtx_def*, %struct.rtx_def** %rtl703, align 8
  br label %cond.end.707

cond.false.704:                                   ; preds = %if.then.697
  %359 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %359, i8* null)
  %360 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl705 = bitcast %union.tree_node* %360 to %struct.tree_decl*
  %rtl706 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl705, i32 0, i32 17
  %361 = load %struct.rtx_def*, %struct.rtx_def** %rtl706, align 8
  br label %cond.end.707

cond.end.707:                                     ; preds = %cond.false.704, %cond.true.701
  %cond708 = phi %struct.rtx_def* [ %358, %cond.true.701 ], [ %361, %cond.false.704 ]
  %362 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl709 = bitcast %union.tree_node* %362 to %struct.tree_decl*
  %rtl710 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl709, i32 0, i32 17
  %363 = load %struct.rtx_def*, %struct.rtx_def** %rtl710, align 8
  %tobool711 = icmp ne %struct.rtx_def* %363, null
  br i1 %tobool711, label %cond.true.712, label %cond.false.715

cond.true.712:                                    ; preds = %cond.end.707
  %364 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl713 = bitcast %union.tree_node* %364 to %struct.tree_decl*
  %rtl714 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl713, i32 0, i32 17
  %365 = load %struct.rtx_def*, %struct.rtx_def** %rtl714, align 8
  br label %cond.end.718

cond.false.715:                                   ; preds = %cond.end.707
  %366 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %366, i8* null)
  %367 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl716 = bitcast %union.tree_node* %367 to %struct.tree_decl*
  %rtl717 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl716, i32 0, i32 17
  %368 = load %struct.rtx_def*, %struct.rtx_def** %rtl717, align 8
  br label %cond.end.718

cond.end.718:                                     ; preds = %cond.false.715, %cond.true.712
  %cond719 = phi %struct.rtx_def* [ %365, %cond.true.712 ], [ %368, %cond.false.715 ]
  %fld720 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond719, i32 0, i32 1
  %arrayidx721 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld720, i32 0, i64 0
  %rtx722 = bitcast %union.rtunion_def* %arrayidx721 to %struct.rtx_def**
  %369 = load %struct.rtx_def*, %struct.rtx_def** %rtx722, align 8
  %call723 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %369)
  %call724 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %cond708, %struct.rtx_def* %call723)
  store %struct.rtx_def* %call724, %struct.rtx_def** %temp, align 8
  br label %if.end.725

if.end.725:                                       ; preds = %cond.end.718, %cond.end.688, %lor.lhs.false.676, %land.lhs.true.651, %land.lhs.true.648, %land.lhs.true.645, %cond.end.639
  br label %if.end.726

if.end.726:                                       ; preds = %if.end.725, %cond.end.626
  br label %if.end.727

if.end.727:                                       ; preds = %if.end.726, %cond.end.578
  %370 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp728 = icmp ne %struct.rtx_def* %370, null
  br i1 %cmp728, label %if.then.730, label %if.end.751

if.then.730:                                      ; preds = %if.end.727
  %371 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %372 = bitcast %struct.rtx_def* %371 to i32*
  %bf.load731 = load i32, i32* %372, align 8
  %bf.clear732 = and i32 %bf.load731, 65535
  %cmp733 = icmp eq i32 %bf.clear732, 66
  br i1 %cmp733, label %land.lhs.true.735, label %if.end.750

land.lhs.true.735:                                ; preds = %if.then.730
  %373 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld736 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %373, i32 0, i32 1
  %arrayidx737 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld736, i32 0, i64 0
  %rtx738 = bitcast %union.rtunion_def* %arrayidx737 to %struct.rtx_def**
  %374 = load %struct.rtx_def*, %struct.rtx_def** %rtx738, align 8
  %375 = bitcast %struct.rtx_def* %374 to i32*
  %bf.load739 = load i32, i32* %375, align 8
  %bf.clear740 = and i32 %bf.load739, 65535
  %cmp741 = icmp eq i32 %bf.clear740, 61
  br i1 %cmp741, label %if.then.743, label %if.end.750

if.then.743:                                      ; preds = %land.lhs.true.735
  %376 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld744 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %376, i32 0, i32 1
  %arrayidx745 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld744, i32 0, i64 0
  %rtx746 = bitcast %union.rtunion_def* %arrayidx745 to %struct.rtx_def**
  %377 = load %struct.rtx_def*, %struct.rtx_def** %rtx746, align 8
  %378 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl747 = bitcast %union.tree_node* %378 to %struct.tree_decl*
  %u1 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl747, i32 0, i32 6
  %a = bitcast %union.anon* %u1 to %struct.anon.0*
  %379 = bitcast %struct.anon.0* %a to i32*
  %bf.load748 = load i32, i32* %379, align 4
  %bf.clear749 = and i32 %bf.load748, 16777215
  call void @mark_reg_pointer(%struct.rtx_def* %377, i32 %bf.clear749)
  br label %if.end.750

if.end.750:                                       ; preds = %if.then.743, %land.lhs.true.735, %if.then.730
  %380 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %380, %struct.rtx_def** %retval
  br label %return

if.end.751:                                       ; preds = %if.end.727
  %381 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl752 = bitcast %union.tree_node* %381 to %struct.tree_decl*
  %rtl753 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl752, i32 0, i32 17
  %382 = load %struct.rtx_def*, %struct.rtx_def** %rtl753, align 8
  %tobool754 = icmp ne %struct.rtx_def* %382, null
  br i1 %tobool754, label %cond.true.755, label %cond.false.758

cond.true.755:                                    ; preds = %if.end.751
  %383 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl756 = bitcast %union.tree_node* %383 to %struct.tree_decl*
  %rtl757 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl756, i32 0, i32 17
  %384 = load %struct.rtx_def*, %struct.rtx_def** %rtl757, align 8
  br label %cond.end.761

cond.false.758:                                   ; preds = %if.end.751
  %385 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %385, i8* null)
  %386 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl759 = bitcast %union.tree_node* %386 to %struct.tree_decl*
  %rtl760 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl759, i32 0, i32 17
  %387 = load %struct.rtx_def*, %struct.rtx_def** %rtl760, align 8
  br label %cond.end.761

cond.end.761:                                     ; preds = %cond.false.758, %cond.true.755
  %cond762 = phi %struct.rtx_def* [ %384, %cond.true.755 ], [ %387, %cond.false.758 ]
  %388 = bitcast %struct.rtx_def* %cond762 to i32*
  %bf.load763 = load i32, i32* %388, align 8
  %bf.clear764 = and i32 %bf.load763, 65535
  %cmp765 = icmp eq i32 %bf.clear764, 61
  br i1 %cmp765, label %land.lhs.true.767, label %if.end.841

land.lhs.true.767:                                ; preds = %cond.end.761
  %389 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl768 = bitcast %union.tree_node* %389 to %struct.tree_decl*
  %rtl769 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl768, i32 0, i32 17
  %390 = load %struct.rtx_def*, %struct.rtx_def** %rtl769, align 8
  %tobool770 = icmp ne %struct.rtx_def* %390, null
  br i1 %tobool770, label %cond.true.771, label %cond.false.774

cond.true.771:                                    ; preds = %land.lhs.true.767
  %391 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl772 = bitcast %union.tree_node* %391 to %struct.tree_decl*
  %rtl773 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl772, i32 0, i32 17
  %392 = load %struct.rtx_def*, %struct.rtx_def** %rtl773, align 8
  br label %cond.end.777

cond.false.774:                                   ; preds = %land.lhs.true.767
  %393 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %393, i8* null)
  %394 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl775 = bitcast %union.tree_node* %394 to %struct.tree_decl*
  %rtl776 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl775, i32 0, i32 17
  %395 = load %struct.rtx_def*, %struct.rtx_def** %rtl776, align 8
  br label %cond.end.777

cond.end.777:                                     ; preds = %cond.false.774, %cond.true.771
  %cond778 = phi %struct.rtx_def* [ %392, %cond.true.771 ], [ %395, %cond.false.774 ]
  %396 = bitcast %struct.rtx_def* %cond778 to i32*
  %bf.load779 = load i32, i32* %396, align 8
  %bf.lshr780 = lshr i32 %bf.load779, 16
  %bf.clear781 = and i32 %bf.lshr780, 255
  %397 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl782 = bitcast %union.tree_node* %397 to %struct.tree_decl*
  %mode783 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl782, i32 0, i32 5
  %398 = bitcast i48* %mode783 to i64*
  %bf.load784 = load i64, i64* %398, align 8
  %bf.clear785 = and i64 %bf.load784, 255
  %bf.cast786 = trunc i64 %bf.clear785 to i32
  %cmp787 = icmp ne i32 %bf.clear781, %bf.cast786
  br i1 %cmp787, label %if.then.789, label %if.end.841

if.then.789:                                      ; preds = %cond.end.777
  %399 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl790 = bitcast %union.tree_node* %399 to %struct.tree_decl*
  %rtl791 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl790, i32 0, i32 17
  %400 = load %struct.rtx_def*, %struct.rtx_def** %rtl791, align 8
  %tobool792 = icmp ne %struct.rtx_def* %400, null
  br i1 %tobool792, label %cond.true.793, label %cond.false.796

cond.true.793:                                    ; preds = %if.then.789
  %401 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl794 = bitcast %union.tree_node* %401 to %struct.tree_decl*
  %rtl795 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl794, i32 0, i32 17
  %402 = load %struct.rtx_def*, %struct.rtx_def** %rtl795, align 8
  br label %cond.end.799

cond.false.796:                                   ; preds = %if.then.789
  %403 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %403, i8* null)
  %404 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl797 = bitcast %union.tree_node* %404 to %struct.tree_decl*
  %rtl798 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl797, i32 0, i32 17
  %405 = load %struct.rtx_def*, %struct.rtx_def** %rtl798, align 8
  br label %cond.end.799

cond.end.799:                                     ; preds = %cond.false.796, %cond.true.793
  %cond800 = phi %struct.rtx_def* [ %402, %cond.true.793 ], [ %405, %cond.false.796 ]
  %406 = bitcast %struct.rtx_def* %cond800 to i32*
  %bf.load801 = load i32, i32* %406, align 8
  %bf.lshr802 = lshr i32 %bf.load801, 16
  %bf.clear803 = and i32 %bf.lshr802, 255
  %407 = load %union.tree_node*, %union.tree_node** %type, align 8
  %408 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl804 = bitcast %union.tree_node* %408 to %struct.tree_decl*
  %mode805 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl804, i32 0, i32 5
  %409 = bitcast i48* %mode805 to i64*
  %bf.load806 = load i64, i64* %409, align 8
  %bf.clear807 = and i64 %bf.load806, 255
  %bf.cast808 = trunc i64 %bf.clear807 to i32
  %410 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common809 = bitcast %union.tree_node* %410 to %struct.tree_common*
  %code810 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common809, i32 0, i32 2
  %bf.load811 = load i32, i32* %code810, align 8
  %bf.clear812 = and i32 %bf.load811, 255
  %cmp813 = icmp eq i32 %bf.clear812, 36
  %cond815 = select i1 %cmp813, i32 1, i32 0
  %call816 = call i32 @promote_mode(%union.tree_node* %407, i32 %bf.cast808, i32* %unsignedp, i32 %cond815)
  %cmp817 = icmp ne i32 %bf.clear803, %call816
  br i1 %cmp817, label %if.then.819, label %if.end.820

if.then.819:                                      ; preds = %cond.end.799
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6332, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.820:                                       ; preds = %cond.end.799
  %411 = load i32, i32* %mode, align 4
  %412 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl821 = bitcast %union.tree_node* %412 to %struct.tree_decl*
  %rtl822 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl821, i32 0, i32 17
  %413 = load %struct.rtx_def*, %struct.rtx_def** %rtl822, align 8
  %tobool823 = icmp ne %struct.rtx_def* %413, null
  br i1 %tobool823, label %cond.true.824, label %cond.false.827

cond.true.824:                                    ; preds = %if.end.820
  %414 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl825 = bitcast %union.tree_node* %414 to %struct.tree_decl*
  %rtl826 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl825, i32 0, i32 17
  %415 = load %struct.rtx_def*, %struct.rtx_def** %rtl826, align 8
  br label %cond.end.830

cond.false.827:                                   ; preds = %if.end.820
  %416 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %416, i8* null)
  %417 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl828 = bitcast %union.tree_node* %417 to %struct.tree_decl*
  %rtl829 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl828, i32 0, i32 17
  %418 = load %struct.rtx_def*, %struct.rtx_def** %rtl829, align 8
  br label %cond.end.830

cond.end.830:                                     ; preds = %cond.false.827, %cond.true.824
  %cond831 = phi %struct.rtx_def* [ %415, %cond.true.824 ], [ %418, %cond.false.827 ]
  %call832 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %411, %struct.rtx_def* %cond831)
  store %struct.rtx_def* %call832, %struct.rtx_def** %temp, align 8
  %419 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %420 = bitcast %struct.rtx_def* %419 to i32*
  %bf.load833 = load i32, i32* %420, align 8
  %bf.clear834 = and i32 %bf.load833, -268435457
  %bf.set835 = or i32 %bf.clear834, 268435456
  store i32 %bf.set835, i32* %420, align 8
  %421 = load i32, i32* %unsignedp, align 4
  %422 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %423 = bitcast %struct.rtx_def* %422 to i32*
  %bf.load836 = load i32, i32* %423, align 8
  %bf.value837 = and i32 %421, 1
  %bf.shl838 = shl i32 %bf.value837, 26
  %bf.clear839 = and i32 %bf.load836, -67108865
  %bf.set840 = or i32 %bf.clear839, %bf.shl838
  store i32 %bf.set840, i32* %423, align 8
  %424 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %424, %struct.rtx_def** %retval
  br label %return

if.end.841:                                       ; preds = %cond.end.777, %cond.end.761
  %425 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl842 = bitcast %union.tree_node* %425 to %struct.tree_decl*
  %rtl843 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl842, i32 0, i32 17
  %426 = load %struct.rtx_def*, %struct.rtx_def** %rtl843, align 8
  %tobool844 = icmp ne %struct.rtx_def* %426, null
  br i1 %tobool844, label %cond.true.845, label %cond.false.848

cond.true.845:                                    ; preds = %if.end.841
  %427 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl846 = bitcast %union.tree_node* %427 to %struct.tree_decl*
  %rtl847 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl846, i32 0, i32 17
  %428 = load %struct.rtx_def*, %struct.rtx_def** %rtl847, align 8
  br label %cond.end.851

cond.false.848:                                   ; preds = %if.end.841
  %429 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %429, i8* null)
  %430 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl849 = bitcast %union.tree_node* %430 to %struct.tree_decl*
  %rtl850 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl849, i32 0, i32 17
  %431 = load %struct.rtx_def*, %struct.rtx_def** %rtl850, align 8
  br label %cond.end.851

cond.end.851:                                     ; preds = %cond.false.848, %cond.true.845
  %cond852 = phi %struct.rtx_def* [ %428, %cond.true.845 ], [ %431, %cond.false.848 ]
  store %struct.rtx_def* %cond852, %struct.rtx_def** %retval
  br label %return

sw.bb.853:                                        ; preds = %if.end.185
  %432 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %int_cst = bitcast %union.tree_node* %432 to %struct.tree_int_cst*
  %int_cst854 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst854, i32 0, i32 0
  %433 = load i64, i64* %low, align 8
  %434 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %int_cst855 = bitcast %union.tree_node* %434 to %struct.tree_int_cst*
  %int_cst856 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst855, i32 0, i32 2
  %high = getelementptr inbounds %struct.anon, %struct.anon* %int_cst856, i32 0, i32 1
  %435 = load i64, i64* %high, align 8
  %436 = load i32, i32* %mode, align 4
  %call857 = call %struct.rtx_def* @immed_double_const(i64 %433, i64 %435, i32 %436)
  store %struct.rtx_def* %call857, %struct.rtx_def** %temp, align 8
  %437 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common858 = bitcast %union.tree_node* %437 to %struct.tree_common*
  %static_flag859 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common858, i32 0, i32 2
  %bf.load860 = load i32, i32* %static_flag859, align 8
  %bf.lshr861 = lshr i32 %bf.load860, 18
  %bf.clear862 = and i32 %bf.lshr861, 1
  %tobool863 = icmp ne i32 %bf.clear862, 0
  br i1 %tobool863, label %land.lhs.true.864, label %if.end.869

land.lhs.true.864:                                ; preds = %sw.bb.853
  %438 = load i32, i32* %modifier.addr, align 4
  %cmp865 = icmp ne i32 %438, 3
  br i1 %cmp865, label %if.then.867, label %if.end.869

if.then.867:                                      ; preds = %land.lhs.true.864
  %439 = load i32, i32* %mode, align 4
  %440 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call868 = call %struct.rtx_def* @force_reg(i32 %439, %struct.rtx_def* %440)
  store %struct.rtx_def* %call868, %struct.rtx_def** %temp, align 8
  br label %if.end.869

if.end.869:                                       ; preds = %if.then.867, %land.lhs.true.864, %sw.bb.853
  %441 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %441, %struct.rtx_def** %retval
  br label %return

sw.bb.870:                                        ; preds = %if.end.185
  %442 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl871 = bitcast %union.tree_node* %442 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl871, i32 0, i32 12
  %443 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %444 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call872 = call %struct.rtx_def* @expand_expr(%union.tree_node* %443, %struct.rtx_def* %444, i32 0, i32 0)
  store %struct.rtx_def* %call872, %struct.rtx_def** %retval
  br label %return

sw.bb.873:                                        ; preds = %if.end.185
  %445 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call874 = call %struct.rtx_def* @immed_real_const(%union.tree_node* %445)
  store %struct.rtx_def* %call874, %struct.rtx_def** %retval
  br label %return

sw.bb.875:                                        ; preds = %if.end.185, %if.end.185
  %446 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %real_cst = bitcast %union.tree_node* %446 to %struct.tree_real_cst*
  %rtl876 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1
  %447 = load %struct.rtx_def*, %struct.rtx_def** %rtl876, align 8
  %tobool877 = icmp ne %struct.rtx_def* %447, null
  br i1 %tobool877, label %if.end.880, label %if.then.878

if.then.878:                                      ; preds = %sw.bb.875
  %448 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call879 = call %struct.rtx_def* @output_constant_def(%union.tree_node* %448, i32 1)
  br label %if.end.880

if.end.880:                                       ; preds = %if.then.878, %sw.bb.875
  %449 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %real_cst881 = bitcast %union.tree_node* %449 to %struct.tree_real_cst*
  %rtl882 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst881, i32 0, i32 1
  %450 = load %struct.rtx_def*, %struct.rtx_def** %rtl882, align 8
  %451 = bitcast %struct.rtx_def* %450 to i32*
  %bf.load883 = load i32, i32* %451, align 8
  %bf.clear884 = and i32 %bf.load883, 65535
  %cmp885 = icmp eq i32 %bf.clear884, 66
  br i1 %cmp885, label %land.lhs.true.887, label %if.end.926

land.lhs.true.887:                                ; preds = %if.end.880
  %452 = load i32, i32* %modifier.addr, align 4
  %cmp888 = icmp ne i32 %452, 2
  br i1 %cmp888, label %land.lhs.true.890, label %if.end.926

land.lhs.true.890:                                ; preds = %land.lhs.true.887
  %453 = load i32, i32* %modifier.addr, align 4
  %cmp891 = icmp ne i32 %453, 3
  br i1 %cmp891, label %land.lhs.true.893, label %if.end.926

land.lhs.true.893:                                ; preds = %land.lhs.true.890
  %454 = load i32, i32* %modifier.addr, align 4
  %cmp894 = icmp ne i32 %454, 1
  br i1 %cmp894, label %land.lhs.true.896, label %if.end.926

land.lhs.true.896:                                ; preds = %land.lhs.true.893
  %455 = load i32, i32* %mode, align 4
  %456 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %real_cst897 = bitcast %union.tree_node* %456 to %struct.tree_real_cst*
  %rtl898 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst897, i32 0, i32 1
  %457 = load %struct.rtx_def*, %struct.rtx_def** %rtl898, align 8
  %fld899 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %457, i32 0, i32 1
  %arrayidx900 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld899, i32 0, i64 0
  %rtx901 = bitcast %union.rtunion_def* %arrayidx900 to %struct.rtx_def**
  %458 = load %struct.rtx_def*, %struct.rtx_def** %rtx901, align 8
  %call902 = call i32 @memory_address_p(i32 %455, %struct.rtx_def* %458)
  %tobool903 = icmp ne i32 %call902, 0
  br i1 %tobool903, label %lor.lhs.false.904, label %if.then.916

lor.lhs.false.904:                                ; preds = %land.lhs.true.896
  %459 = load i32, i32* @flag_force_addr, align 4
  %tobool905 = icmp ne i32 %459, 0
  br i1 %tobool905, label %land.lhs.true.906, label %if.end.926

land.lhs.true.906:                                ; preds = %lor.lhs.false.904
  %460 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %real_cst907 = bitcast %union.tree_node* %460 to %struct.tree_real_cst*
  %rtl908 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst907, i32 0, i32 1
  %461 = load %struct.rtx_def*, %struct.rtx_def** %rtl908, align 8
  %fld909 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %461, i32 0, i32 1
  %arrayidx910 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld909, i32 0, i64 0
  %rtx911 = bitcast %union.rtunion_def* %arrayidx910 to %struct.rtx_def**
  %462 = load %struct.rtx_def*, %struct.rtx_def** %rtx911, align 8
  %463 = bitcast %struct.rtx_def* %462 to i32*
  %bf.load912 = load i32, i32* %463, align 8
  %bf.clear913 = and i32 %bf.load912, 65535
  %cmp914 = icmp ne i32 %bf.clear913, 61
  br i1 %cmp914, label %if.then.916, label %if.end.926

if.then.916:                                      ; preds = %land.lhs.true.906, %land.lhs.true.896
  %464 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %real_cst917 = bitcast %union.tree_node* %464 to %struct.tree_real_cst*
  %rtl918 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst917, i32 0, i32 1
  %465 = load %struct.rtx_def*, %struct.rtx_def** %rtl918, align 8
  %466 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %real_cst919 = bitcast %union.tree_node* %466 to %struct.tree_real_cst*
  %rtl920 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst919, i32 0, i32 1
  %467 = load %struct.rtx_def*, %struct.rtx_def** %rtl920, align 8
  %fld921 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %467, i32 0, i32 1
  %arrayidx922 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld921, i32 0, i64 0
  %rtx923 = bitcast %union.rtunion_def* %arrayidx922 to %struct.rtx_def**
  %468 = load %struct.rtx_def*, %struct.rtx_def** %rtx923, align 8
  %call924 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %468)
  %call925 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %465, %struct.rtx_def* %call924)
  store %struct.rtx_def* %call925, %struct.rtx_def** %retval
  br label %return

if.end.926:                                       ; preds = %land.lhs.true.906, %lor.lhs.false.904, %land.lhs.true.893, %land.lhs.true.890, %land.lhs.true.887, %if.end.880
  %469 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %real_cst927 = bitcast %union.tree_node* %469 to %struct.tree_real_cst*
  %rtl928 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst927, i32 0, i32 1
  %470 = load %struct.rtx_def*, %struct.rtx_def** %rtl928, align 8
  store %struct.rtx_def* %470, %struct.rtx_def** %retval
  br label %return

sw.bb.929:                                        ; preds = %if.end.185
  %471 = load i8*, i8** @input_filename, align 8
  store i8* %471, i8** %saved_input_filename, align 8
  %472 = load i32, i32* @lineno, align 4
  store i32 %472, i32* %saved_lineno, align 4
  %473 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp930 = bitcast %union.tree_node* %473 to %struct.tree_exp*
  %operands931 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp930, i32 0, i32 2
  %arrayidx932 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands931, i32 0, i64 1
  %474 = load %union.tree_node*, %union.tree_node** %arrayidx932, align 8
  %identifier = bitcast %union.tree_node* %474 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %475 = load i8*, i8** %str, align 8
  store i8* %475, i8** @input_filename, align 8
  %476 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp933 = bitcast %union.tree_node* %476 to %struct.tree_exp*
  %complexity = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp933, i32 0, i32 1
  %477 = load i32, i32* %complexity, align 4
  %shr = ashr i32 %477, 12
  store i32 %shr, i32* @lineno, align 4
  %478 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common934 = bitcast %union.tree_node* %478 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common934, i32 0, i32 2
  %bf.load935 = load i32, i32* %public_flag, align 8
  %bf.lshr936 = lshr i32 %bf.load935, 19
  %bf.clear937 = and i32 %bf.lshr936, 1
  %tobool938 = icmp ne i32 %bf.clear937, 0
  br i1 %tobool938, label %if.then.939, label %if.end.941

if.then.939:                                      ; preds = %sw.bb.929
  %479 = load i8*, i8** @input_filename, align 8
  %480 = load i32, i32* @lineno, align 4
  %call940 = call %struct.rtx_def* @emit_line_note(i8* %479, i32 %480)
  br label %if.end.941

if.end.941:                                       ; preds = %if.then.939, %sw.bb.929
  %481 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp942 = bitcast %union.tree_node* %481 to %struct.tree_exp*
  %operands943 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp942, i32 0, i32 2
  %arrayidx944 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands943, i32 0, i64 0
  %482 = load %union.tree_node*, %union.tree_node** %arrayidx944, align 8
  %483 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %484 = load i32, i32* %tmode.addr, align 4
  %485 = load i32, i32* %modifier.addr, align 4
  %call945 = call %struct.rtx_def* @expand_expr(%union.tree_node* %482, %struct.rtx_def* %483, i32 %484, i32 %485)
  store %struct.rtx_def* %call945, %struct.rtx_def** %to_return, align 8
  %486 = load i8*, i8** %saved_input_filename, align 8
  store i8* %486, i8** @input_filename, align 8
  %487 = load i32, i32* %saved_lineno, align 4
  store i32 %487, i32* @lineno, align 4
  %488 = load %struct.rtx_def*, %struct.rtx_def** %to_return, align 8
  store %struct.rtx_def* %488, %struct.rtx_def** %retval
  br label %return

sw.bb.946:                                        ; preds = %if.end.185
  %489 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call947 = call %union.tree_node* @decl_function_context(%union.tree_node* %489)
  store %union.tree_node* %call947, %union.tree_node** %context, align 8
  %490 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp948 = icmp eq %union.tree_node* %490, null
  br i1 %cmp948, label %if.then.950, label %if.end.954

if.then.950:                                      ; preds = %sw.bb.946
  %491 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %492 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp951 = bitcast %union.tree_node* %492 to %struct.tree_exp*
  %operands952 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp951, i32 0, i32 2
  %arrayidx953 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands952, i32 0, i64 1
  store %union.tree_node* %491, %union.tree_node** %arrayidx953, align 8
  br label %if.end.954

if.end.954:                                       ; preds = %if.then.950, %sw.bb.946
  %493 = load %union.tree_node*, %union.tree_node** %context, align 8
  %494 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp955 = icmp eq %union.tree_node* %493, %494
  br i1 %cmp955, label %if.then.960, label %lor.lhs.false.957

lor.lhs.false.957:                                ; preds = %if.end.954
  %495 = load %union.tree_node*, %union.tree_node** %context, align 8
  %496 = load %union.tree_node*, %union.tree_node** @inline_function_decl, align 8
  %cmp958 = icmp eq %union.tree_node* %495, %496
  br i1 %cmp958, label %if.then.960, label %if.end.961

if.then.960:                                      ; preds = %lor.lhs.false.957, %if.end.954
  store %union.tree_node* null, %union.tree_node** %context, align 8
  br label %if.end.961

if.end.961:                                       ; preds = %if.then.960, %lor.lhs.false.957
  %497 = load %union.tree_node*, %union.tree_node** %context, align 8
  %tobool962 = icmp ne %union.tree_node* %497, null
  br i1 %tobool962, label %if.then.963, label %if.end.993

if.then.963:                                      ; preds = %if.end.961
  %498 = load %union.tree_node*, %union.tree_node** %context, align 8
  %call964 = call %struct.function* @find_function_data(%union.tree_node* %498)
  %499 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp965 = bitcast %union.tree_node* %499 to %struct.tree_exp*
  %operands966 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp965, i32 0, i32 2
  %arrayidx967 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands966, i32 0, i64 2
  %500 = bitcast %union.tree_node** %arrayidx967 to %struct.rtx_def**
  %501 = load %struct.rtx_def*, %struct.rtx_def** %500, align 8
  store %struct.rtx_def* %501, %struct.rtx_def** %temp, align 8
  %502 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool968 = icmp ne %struct.rtx_def* %502, null
  br i1 %tobool968, label %land.lhs.true.969, label %if.end.978

land.lhs.true.969:                                ; preds = %if.then.963
  %503 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %504 = bitcast %struct.rtx_def* %503 to i32*
  %bf.load970 = load i32, i32* %504, align 8
  %bf.clear971 = and i32 %bf.load970, 65535
  %cmp972 = icmp eq i32 %bf.clear971, 61
  br i1 %cmp972, label %if.then.974, label %if.end.978

if.then.974:                                      ; preds = %land.lhs.true.969
  %505 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @put_var_into_stack(%union.tree_node* %505)
  %506 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp975 = bitcast %union.tree_node* %506 to %struct.tree_exp*
  %operands976 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp975, i32 0, i32 2
  %arrayidx977 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands976, i32 0, i64 2
  %507 = bitcast %union.tree_node** %arrayidx977 to %struct.rtx_def**
  %508 = load %struct.rtx_def*, %struct.rtx_def** %507, align 8
  store %struct.rtx_def* %508, %struct.rtx_def** %temp, align 8
  br label %if.end.978

if.end.978:                                       ; preds = %if.then.974, %land.lhs.true.969, %if.then.963
  %509 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp979 = icmp eq %struct.rtx_def* %509, null
  br i1 %cmp979, label %if.then.986, label %lor.lhs.false.981

lor.lhs.false.981:                                ; preds = %if.end.978
  %510 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %511 = bitcast %struct.rtx_def* %510 to i32*
  %bf.load982 = load i32, i32* %511, align 8
  %bf.clear983 = and i32 %bf.load982, 65535
  %cmp984 = icmp ne i32 %bf.clear983, 66
  br i1 %cmp984, label %if.then.986, label %if.end.987

if.then.986:                                      ; preds = %lor.lhs.false.981, %if.end.978
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6437, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.987:                                       ; preds = %lor.lhs.false.981
  %512 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %513 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld988 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %513, i32 0, i32 1
  %arrayidx989 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld988, i32 0, i64 0
  %rtx990 = bitcast %union.rtunion_def* %arrayidx989 to %struct.rtx_def**
  %514 = load %struct.rtx_def*, %struct.rtx_def** %rtx990, align 8
  %515 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call991 = call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %514, %union.tree_node* %515)
  %call992 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %512, %struct.rtx_def* %call991)
  store %struct.rtx_def* %call992, %struct.rtx_def** %retval
  br label %return

if.end.993:                                       ; preds = %if.end.961
  %516 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp994 = bitcast %union.tree_node* %516 to %struct.tree_exp*
  %operands995 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp994, i32 0, i32 2
  %arrayidx996 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands995, i32 0, i64 2
  %517 = bitcast %union.tree_node** %arrayidx996 to %struct.rtx_def**
  %518 = load %struct.rtx_def*, %struct.rtx_def** %517, align 8
  %cmp997 = icmp eq %struct.rtx_def* %518, null
  br i1 %cmp997, label %if.then.999, label %if.end.1092

if.then.999:                                      ; preds = %if.end.993
  %519 = load i32, i32* %mode, align 4
  %cmp1000 = icmp eq i32 %519, 0
  br i1 %cmp1000, label %if.then.1002, label %if.else.1003

if.then.1002:                                     ; preds = %if.then.999
  %520 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %520, %struct.rtx_def** %temp, align 8
  br label %if.end.1036

if.else.1003:                                     ; preds = %if.then.999
  %521 = load %union.tree_node*, %union.tree_node** %type, align 8
  %522 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1004 = bitcast %union.tree_node* %522 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1004, i32 0, i32 2
  %bf.load1005 = load i32, i32* %readonly_flag, align 8
  %bf.lshr1006 = lshr i32 %bf.load1005, 12
  %bf.clear1007 = and i32 %bf.lshr1006, 1
  %mul = mul nsw i32 %bf.clear1007, 1
  %523 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1008 = bitcast %union.tree_node* %523 to %struct.tree_common*
  %volatile_flag1009 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1008, i32 0, i32 2
  %bf.load1010 = load i32, i32* %volatile_flag1009, align 8
  %bf.lshr1011 = lshr i32 %bf.load1010, 11
  %bf.clear1012 = and i32 %bf.lshr1011, 1
  %mul1013 = mul nsw i32 %bf.clear1012, 2
  %or = or i32 %mul, %mul1013
  %524 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type1014 = bitcast %union.tree_node* %524 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1014, i32 0, i32 6
  %bf.load1015 = load i32, i32* %restrict_flag, align 4
  %bf.lshr1016 = lshr i32 %bf.load1015, 21
  %bf.clear1017 = and i32 %bf.lshr1016, 1
  %mul1018 = mul nsw i32 %bf.clear1017, 4
  %or1019 = or i32 %or, %mul1018
  %525 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1020 = bitcast %union.tree_node* %525 to %struct.tree_common*
  %code1021 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1020, i32 0, i32 2
  %bf.load1022 = load i32, i32* %code1021, align 8
  %bf.clear1023 = and i32 %bf.load1022, 255
  %cmp1024 = icmp eq i32 %bf.clear1023, 20
  br i1 %cmp1024, label %land.rhs.1026, label %land.end.1030

land.rhs.1026:                                    ; preds = %if.else.1003
  %526 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1027 = bitcast %union.tree_node* %526 to %struct.tree_common*
  %type1028 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1027, i32 0, i32 1
  %527 = load %union.tree_node*, %union.tree_node** %type1028, align 8
  %tobool1029 = icmp ne %union.tree_node* %527, null
  br label %land.end.1030

land.end.1030:                                    ; preds = %land.rhs.1026, %if.else.1003
  %528 = phi i1 [ false, %if.else.1003 ], [ %tobool1029, %land.rhs.1026 ]
  %land.ext = zext i1 %528 to i32
  %mul1031 = mul nsw i32 %land.ext, 8
  %or1032 = or i32 %or1019, %mul1031
  %or1033 = or i32 %or1032, 1
  %call1034 = call %union.tree_node* @build_qualified_type(%union.tree_node* %521, i32 %or1033)
  %call1035 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call1034, i32 3, i32 0, i32 0)
  store %struct.rtx_def* %call1035, %struct.rtx_def** %temp, align 8
  br label %if.end.1036

if.end.1036:                                      ; preds = %land.end.1030, %if.then.1002
  %529 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %530 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1037 = bitcast %union.tree_node* %530 to %struct.tree_exp*
  %operands1038 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1037, i32 0, i32 2
  %arrayidx1039 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1038, i32 0, i64 2
  %531 = bitcast %union.tree_node** %arrayidx1039 to %struct.rtx_def**
  store %struct.rtx_def* %529, %struct.rtx_def** %531, align 8
  %532 = load i32, i32* @optimize, align 4
  %tobool1040 = icmp ne i32 %532, 0
  br i1 %tobool1040, label %if.end.1049, label %land.lhs.true.1041

land.lhs.true.1041:                               ; preds = %if.end.1036
  %533 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %534 = bitcast %struct.rtx_def* %533 to i32*
  %bf.load1042 = load i32, i32* %534, align 8
  %bf.clear1043 = and i32 %bf.load1042, 65535
  %cmp1044 = icmp eq i32 %bf.clear1043, 61
  br i1 %cmp1044, label %if.then.1046, label %if.end.1049

if.then.1046:                                     ; preds = %land.lhs.true.1041
  %535 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %536 = load %struct.function*, %struct.function** @cfun, align 8
  %x_save_expr_regs = getelementptr inbounds %struct.function, %struct.function* %536, i32 0, i32 25
  %537 = load %struct.rtx_def*, %struct.rtx_def** %x_save_expr_regs, align 8
  %call1047 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %535, %struct.rtx_def* %537)
  %538 = load %struct.function*, %struct.function** @cfun, align 8
  %x_save_expr_regs1048 = getelementptr inbounds %struct.function, %struct.function* %538, i32 0, i32 25
  store %struct.rtx_def* %call1047, %struct.rtx_def** %x_save_expr_regs1048, align 8
  br label %if.end.1049

if.end.1049:                                      ; preds = %if.then.1046, %land.lhs.true.1041, %if.end.1036
  %539 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %540 = bitcast %struct.rtx_def* %539 to i32*
  %bf.load1050 = load i32, i32* %540, align 8
  %bf.clear1051 = and i32 %bf.load1050, 65535
  %cmp1052 = icmp eq i32 %bf.clear1051, 61
  br i1 %cmp1052, label %land.lhs.true.1054, label %if.end.1073

land.lhs.true.1054:                               ; preds = %if.end.1049
  %541 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %542 = bitcast %struct.rtx_def* %541 to i32*
  %bf.load1055 = load i32, i32* %542, align 8
  %bf.lshr1056 = lshr i32 %bf.load1055, 16
  %bf.clear1057 = and i32 %bf.lshr1056, 255
  %543 = load i32, i32* %mode, align 4
  %cmp1058 = icmp ne i32 %bf.clear1057, %543
  br i1 %cmp1058, label %if.then.1060, label %if.end.1073

if.then.1060:                                     ; preds = %land.lhs.true.1054
  %544 = load i32, i32* %mode, align 4
  %545 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1061 = bitcast %union.tree_node* %545 to %struct.tree_exp*
  %operands1062 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1061, i32 0, i32 2
  %arrayidx1063 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1062, i32 0, i64 2
  %546 = bitcast %union.tree_node** %arrayidx1063 to %struct.rtx_def**
  %547 = load %struct.rtx_def*, %struct.rtx_def** %546, align 8
  %call1064 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %544, %struct.rtx_def* %547)
  store %struct.rtx_def* %call1064, %struct.rtx_def** %temp, align 8
  %548 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %549 = bitcast %struct.rtx_def* %548 to i32*
  %bf.load1065 = load i32, i32* %549, align 8
  %bf.clear1066 = and i32 %bf.load1065, -268435457
  %bf.set1067 = or i32 %bf.clear1066, 268435456
  store i32 %bf.set1067, i32* %549, align 8
  %550 = load i32, i32* %unsignedp, align 4
  %551 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %552 = bitcast %struct.rtx_def* %551 to i32*
  %bf.load1068 = load i32, i32* %552, align 8
  %bf.value1069 = and i32 %550, 1
  %bf.shl1070 = shl i32 %bf.value1069, 26
  %bf.clear1071 = and i32 %bf.load1068, -67108865
  %bf.set1072 = or i32 %bf.clear1071, %bf.shl1070
  store i32 %bf.set1072, i32* %552, align 8
  br label %if.end.1073

if.end.1073:                                      ; preds = %if.then.1060, %land.lhs.true.1054, %if.end.1049
  %553 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %554 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp1074 = icmp eq %struct.rtx_def* %553, %554
  br i1 %cmp1074, label %if.then.1076, label %if.else.1081

if.then.1076:                                     ; preds = %if.end.1073
  %555 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1077 = bitcast %union.tree_node* %555 to %struct.tree_exp*
  %operands1078 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1077, i32 0, i32 2
  %arrayidx1079 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1078, i32 0, i64 0
  %556 = load %union.tree_node*, %union.tree_node** %arrayidx1079, align 8
  %557 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1080 = call %struct.rtx_def* @expand_expr(%union.tree_node* %556, %struct.rtx_def* %557, i32 0, i32 0)
  br label %if.end.1086

if.else.1081:                                     ; preds = %if.end.1073
  %558 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1082 = bitcast %union.tree_node* %558 to %struct.tree_exp*
  %operands1083 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1082, i32 0, i32 2
  %arrayidx1084 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1083, i32 0, i64 0
  %559 = load %union.tree_node*, %union.tree_node** %arrayidx1084, align 8
  %560 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call1085 = call %struct.rtx_def* @store_expr(%union.tree_node* %559, %struct.rtx_def* %560, i32 0)
  br label %if.end.1086

if.end.1086:                                      ; preds = %if.else.1081, %if.then.1076
  %561 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1087 = bitcast %union.tree_node* %561 to %struct.tree_common*
  %used_flag1088 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1087, i32 0, i32 2
  %bf.load1089 = load i32, i32* %used_flag1088, align 8
  %bf.clear1090 = and i32 %bf.load1089, -65537
  %bf.set1091 = or i32 %bf.clear1090, 65536
  store i32 %bf.set1091, i32* %used_flag1088, align 8
  br label %if.end.1092

if.end.1092:                                      ; preds = %if.end.1086, %if.end.993
  %562 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1093 = bitcast %union.tree_node* %562 to %struct.tree_exp*
  %operands1094 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1093, i32 0, i32 2
  %arrayidx1095 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1094, i32 0, i64 2
  %563 = bitcast %union.tree_node** %arrayidx1095 to %struct.rtx_def**
  %564 = load %struct.rtx_def*, %struct.rtx_def** %563, align 8
  %565 = bitcast %struct.rtx_def* %564 to i32*
  %bf.load1096 = load i32, i32* %565, align 8
  %bf.clear1097 = and i32 %bf.load1096, 65535
  %cmp1098 = icmp eq i32 %bf.clear1097, 61
  br i1 %cmp1098, label %land.lhs.true.1100, label %if.end.1123

land.lhs.true.1100:                               ; preds = %if.end.1092
  %566 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1101 = bitcast %union.tree_node* %566 to %struct.tree_exp*
  %operands1102 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1101, i32 0, i32 2
  %arrayidx1103 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1102, i32 0, i64 2
  %567 = bitcast %union.tree_node** %arrayidx1103 to %struct.rtx_def**
  %568 = load %struct.rtx_def*, %struct.rtx_def** %567, align 8
  %569 = bitcast %struct.rtx_def* %568 to i32*
  %bf.load1104 = load i32, i32* %569, align 8
  %bf.lshr1105 = lshr i32 %bf.load1104, 16
  %bf.clear1106 = and i32 %bf.lshr1105, 255
  %570 = load i32, i32* %mode, align 4
  %cmp1107 = icmp ne i32 %bf.clear1106, %570
  br i1 %cmp1107, label %if.then.1109, label %if.end.1123

if.then.1109:                                     ; preds = %land.lhs.true.1100
  %571 = load %union.tree_node*, %union.tree_node** %type, align 8
  %572 = load i32, i32* %mode, align 4
  %call1110 = call i32 @promote_mode(%union.tree_node* %571, i32 %572, i32* %unsignedp, i32 0)
  %573 = load i32, i32* %mode, align 4
  %574 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1111 = bitcast %union.tree_node* %574 to %struct.tree_exp*
  %operands1112 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1111, i32 0, i32 2
  %arrayidx1113 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1112, i32 0, i64 2
  %575 = bitcast %union.tree_node** %arrayidx1113 to %struct.rtx_def**
  %576 = load %struct.rtx_def*, %struct.rtx_def** %575, align 8
  %call1114 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %573, %struct.rtx_def* %576)
  store %struct.rtx_def* %call1114, %struct.rtx_def** %temp, align 8
  %577 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %578 = bitcast %struct.rtx_def* %577 to i32*
  %bf.load1115 = load i32, i32* %578, align 8
  %bf.clear1116 = and i32 %bf.load1115, -268435457
  %bf.set1117 = or i32 %bf.clear1116, 268435456
  store i32 %bf.set1117, i32* %578, align 8
  %579 = load i32, i32* %unsignedp, align 4
  %580 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %581 = bitcast %struct.rtx_def* %580 to i32*
  %bf.load1118 = load i32, i32* %581, align 8
  %bf.value1119 = and i32 %579, 1
  %bf.shl1120 = shl i32 %bf.value1119, 26
  %bf.clear1121 = and i32 %bf.load1118, -67108865
  %bf.set1122 = or i32 %bf.clear1121, %bf.shl1120
  store i32 %bf.set1122, i32* %581, align 8
  %582 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %582, %struct.rtx_def** %retval
  br label %return

if.end.1123:                                      ; preds = %land.lhs.true.1100, %if.end.1092
  %583 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1124 = bitcast %union.tree_node* %583 to %struct.tree_exp*
  %operands1125 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1124, i32 0, i32 2
  %arrayidx1126 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1125, i32 0, i64 2
  %584 = bitcast %union.tree_node** %arrayidx1126 to %struct.rtx_def**
  %585 = load %struct.rtx_def*, %struct.rtx_def** %584, align 8
  store %struct.rtx_def* %585, %struct.rtx_def** %retval
  br label %return

sw.bb.1127:                                       ; preds = %if.end.185
  %586 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1129 = bitcast %union.tree_node* %586 to %struct.tree_exp*
  %operands1130 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1129, i32 0, i32 2
  %arrayidx1131 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1130, i32 0, i64 0
  %587 = load %union.tree_node*, %union.tree_node** %arrayidx1131, align 8
  %588 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %589 = load i32, i32* %tmode.addr, align 4
  %590 = load i32, i32* %modifier.addr, align 4
  %call1132 = call %struct.rtx_def* @expand_expr(%union.tree_node* %587, %struct.rtx_def* %588, i32 %589, i32 %590)
  store %struct.rtx_def* %call1132, %struct.rtx_def** %temp1128, align 8
  %591 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1133 = bitcast %union.tree_node* %591 to %struct.tree_exp*
  %operands1134 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1133, i32 0, i32 2
  %arrayidx1135 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1134, i32 0, i64 0
  %592 = load %union.tree_node*, %union.tree_node** %arrayidx1135, align 8
  %call1136 = call %union.tree_node* @unsave_expr_now(%union.tree_node* %592)
  %593 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1137 = bitcast %union.tree_node* %593 to %struct.tree_exp*
  %operands1138 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1137, i32 0, i32 2
  %arrayidx1139 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1138, i32 0, i64 0
  store %union.tree_node* %call1136, %union.tree_node** %arrayidx1139, align 8
  %594 = load %struct.rtx_def*, %struct.rtx_def** %temp1128, align 8
  store %struct.rtx_def* %594, %struct.rtx_def** %retval
  br label %return

sw.bb.1140:                                       ; preds = %if.end.185
  %595 = load %union.tree_node*, %union.tree_node** @placeholder_list, align 8
  store %union.tree_node* %595, %union.tree_node** %old_list, align 8
  store %union.tree_node* null, %union.tree_node** %placeholder_expr, align 8
  %596 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call1141 = call %union.tree_node* @find_placeholder(%union.tree_node* %596, %union.tree_node** %placeholder_expr)
  store %union.tree_node* %call1141, %union.tree_node** %exp.addr, align 8
  %597 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %cmp1142 = icmp eq %union.tree_node* %597, null
  br i1 %cmp1142, label %if.then.1144, label %if.end.1145

if.then.1144:                                     ; preds = %sw.bb.1140
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6510, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.1145:                                      ; preds = %sw.bb.1140
  %598 = load %union.tree_node*, %union.tree_node** %placeholder_expr, align 8
  %common1146 = bitcast %union.tree_node* %598 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1146, i32 0, i32 0
  %599 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %599, %union.tree_node** @placeholder_list, align 8
  %600 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %601 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %602 = load i32, i32* %tmode.addr, align 4
  %603 = load i32, i32* %modifier.addr, align 4
  %call1147 = call %struct.rtx_def* @expand_expr(%union.tree_node* %600, %struct.rtx_def* %601, i32 %602, i32 %603)
  store %struct.rtx_def* %call1147, %struct.rtx_def** %temp, align 8
  %604 = load %union.tree_node*, %union.tree_node** %old_list, align 8
  store %union.tree_node* %604, %union.tree_node** @placeholder_list, align 8
  %605 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %605, %struct.rtx_def** %retval
  br label %return

sw.bb.1148:                                       ; preds = %if.end.185
  %606 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1149 = bitcast %union.tree_node* %606 to %struct.tree_exp*
  %operands1150 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1149, i32 0, i32 2
  %arrayidx1151 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1150, i32 0, i64 1
  %607 = load %union.tree_node*, %union.tree_node** %arrayidx1151, align 8
  %608 = load %union.tree_node*, %union.tree_node** @placeholder_list, align 8
  %call1152 = call %union.tree_node* @tree_cons(%union.tree_node* %607, %union.tree_node* null, %union.tree_node* %608)
  store %union.tree_node* %call1152, %union.tree_node** @placeholder_list, align 8
  %609 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1153 = bitcast %union.tree_node* %609 to %struct.tree_exp*
  %operands1154 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1153, i32 0, i32 2
  %arrayidx1155 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1154, i32 0, i64 0
  %610 = load %union.tree_node*, %union.tree_node** %arrayidx1155, align 8
  %611 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %612 = load i32, i32* %tmode.addr, align 4
  %613 = load i32, i32* %modifier.addr, align 4
  %call1156 = call %struct.rtx_def* @expand_expr(%union.tree_node* %610, %struct.rtx_def* %611, i32 %612, i32 %613)
  store %struct.rtx_def* %call1156, %struct.rtx_def** %target.addr, align 8
  %614 = load %union.tree_node*, %union.tree_node** @placeholder_list, align 8
  %common1157 = bitcast %union.tree_node* %614 to %struct.tree_common*
  %chain1158 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1157, i32 0, i32 0
  %615 = load %union.tree_node*, %union.tree_node** %chain1158, align 8
  store %union.tree_node* %615, %union.tree_node** @placeholder_list, align 8
  %616 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %616, %struct.rtx_def** %retval
  br label %return

sw.bb.1159:                                       ; preds = %if.end.185
  %617 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1160 = bitcast %union.tree_node* %617 to %struct.tree_exp*
  %operands1161 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1160, i32 0, i32 2
  %arrayidx1162 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1161, i32 0, i64 0
  %618 = load %union.tree_node*, %union.tree_node** %arrayidx1162, align 8
  %common1163 = bitcast %union.tree_node* %618 to %struct.tree_common*
  %code1164 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1163, i32 0, i32 2
  %bf.load1165 = load i32, i32* %code1164, align 8
  %bf.clear1166 = and i32 %bf.load1165, 255
  %cmp1167 = icmp eq i32 %bf.clear1166, 31
  br i1 %cmp1167, label %if.then.1169, label %if.else.1173

if.then.1169:                                     ; preds = %sw.bb.1159
  %619 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1170 = bitcast %union.tree_node* %619 to %struct.tree_exp*
  %operands1171 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1170, i32 0, i32 2
  %arrayidx1172 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1171, i32 0, i64 0
  %620 = load %union.tree_node*, %union.tree_node** %arrayidx1172, align 8
  call void @expand_goto(%union.tree_node* %620)
  br label %if.end.1177

if.else.1173:                                     ; preds = %sw.bb.1159
  %621 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1174 = bitcast %union.tree_node* %621 to %struct.tree_exp*
  %operands1175 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1174, i32 0, i32 2
  %arrayidx1176 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1175, i32 0, i64 0
  %622 = load %union.tree_node*, %union.tree_node** %arrayidx1176, align 8
  call void @expand_computed_goto(%union.tree_node* %622)
  br label %if.end.1177

if.end.1177:                                      ; preds = %if.else.1173, %if.then.1169
  %623 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %623, %struct.rtx_def** %retval
  br label %return

sw.bb.1178:                                       ; preds = %if.end.185
  %624 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1179 = bitcast %union.tree_node* %624 to %struct.tree_exp*
  %operands1180 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1179, i32 0, i32 2
  %arrayidx1181 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1180, i32 0, i64 0
  %625 = load %union.tree_node*, %union.tree_node** %arrayidx1181, align 8
  %call1182 = call %union.tree_node* @invert_truthvalue(%union.tree_node* %625)
  %call1183 = call i32 @expand_exit_loop_if_false(%struct.nesting* null, %union.tree_node* %call1182)
  %626 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %626, %struct.rtx_def** %retval
  br label %return

sw.bb.1184:                                       ; preds = %if.end.185
  %627 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1185 = bitcast %union.tree_node* %627 to %struct.tree_exp*
  %operands1186 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1185, i32 0, i32 2
  %arrayidx1187 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1186, i32 0, i64 1
  %628 = load %union.tree_node*, %union.tree_node** %arrayidx1187, align 8
  %tobool1188 = icmp ne %union.tree_node* %628, null
  br i1 %tobool1188, label %if.then.1189, label %if.end.1193

if.then.1189:                                     ; preds = %sw.bb.1184
  %629 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1190 = bitcast %union.tree_node* %629 to %struct.tree_exp*
  %operands1191 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1190, i32 0, i32 2
  %arrayidx1192 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1191, i32 0, i64 1
  %630 = load %union.tree_node*, %union.tree_node** %arrayidx1192, align 8
  call void @expand_expr_stmt_value(%union.tree_node* %630, i32 0, i32 1)
  br label %if.end.1193

if.end.1193:                                      ; preds = %if.then.1189, %sw.bb.1184
  call void @do_pending_stack_adjust()
  %631 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1194 = bitcast %union.tree_node* %631 to %struct.tree_exp*
  %operands1195 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1194, i32 0, i32 2
  %arrayidx1196 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1195, i32 0, i64 0
  %632 = load %union.tree_node*, %union.tree_node** %arrayidx1196, align 8
  %call1197 = call %struct.rtx_def* @label_rtx(%union.tree_node* %632)
  %call1198 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %call1197)
  %633 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %633, %struct.rtx_def** %retval
  br label %return

sw.bb.1199:                                       ; preds = %if.end.185
  %634 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1200 = bitcast %union.tree_node* %634 to %struct.tree_exp*
  %operands1201 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1200, i32 0, i32 2
  %arrayidx1202 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1201, i32 0, i64 1
  %635 = load %union.tree_node*, %union.tree_node** %arrayidx1202, align 8
  %tobool1203 = icmp ne %union.tree_node* %635, null
  br i1 %tobool1203, label %if.then.1204, label %if.end.1205

if.then.1204:                                     ; preds = %sw.bb.1199
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end.1205

if.end.1205:                                      ; preds = %if.then.1204, %sw.bb.1199
  %636 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1206 = bitcast %union.tree_node* %636 to %struct.tree_exp*
  %operands1207 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1206, i32 0, i32 2
  %arrayidx1208 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1207, i32 0, i64 0
  %637 = load %union.tree_node*, %union.tree_node** %arrayidx1208, align 8
  %exp1209 = bitcast %union.tree_node* %637 to %struct.tree_exp*
  %operands1210 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1209, i32 0, i32 2
  %arrayidx1211 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1210, i32 0, i64 0
  %638 = load %union.tree_node*, %union.tree_node** %arrayidx1211, align 8
  call void @expand_goto(%union.tree_node* %638)
  %639 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %639, %struct.rtx_def** %retval
  br label %return

sw.bb.1212:                                       ; preds = %if.end.185
  call void @push_temp_slots()
  %call1213 = call %struct.nesting* @expand_start_loop(i32 1)
  %640 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1214 = bitcast %union.tree_node* %640 to %struct.tree_exp*
  %operands1215 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1214, i32 0, i32 2
  %arrayidx1216 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1215, i32 0, i64 0
  %641 = load %union.tree_node*, %union.tree_node** %arrayidx1216, align 8
  call void @expand_expr_stmt_value(%union.tree_node* %641, i32 0, i32 1)
  call void @expand_end_loop()
  call void @pop_temp_slots()
  %642 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %642, %struct.rtx_def** %retval
  br label %return

sw.bb.1217:                                       ; preds = %if.end.185
  %643 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1218 = bitcast %union.tree_node* %643 to %struct.tree_exp*
  %operands1219 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1218, i32 0, i32 2
  %arrayidx1220 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1219, i32 0, i64 0
  %644 = load %union.tree_node*, %union.tree_node** %arrayidx1220, align 8
  store %union.tree_node* %644, %union.tree_node** %vars, align 8
  store i32 0, i32* %vars_need_expansion, align 4
  call void @expand_start_bindings_and_block(i32 2, %union.tree_node* null)
  %645 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1221 = bitcast %union.tree_node* %645 to %struct.tree_exp*
  %operands1222 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1221, i32 0, i32 2
  %arrayidx1223 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1222, i32 0, i64 2
  %646 = load %union.tree_node*, %union.tree_node** %arrayidx1223, align 8
  %cmp1224 = icmp ne %union.tree_node* %646, null
  br i1 %cmp1224, label %land.lhs.true.1226, label %if.end.1240

land.lhs.true.1226:                               ; preds = %sw.bb.1217
  %647 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1227 = bitcast %union.tree_node* %647 to %struct.tree_exp*
  %operands1228 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1227, i32 0, i32 2
  %arrayidx1229 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1228, i32 0, i64 2
  %648 = load %union.tree_node*, %union.tree_node** %arrayidx1229, align 8
  %common1230 = bitcast %union.tree_node* %648 to %struct.tree_common*
  %used_flag1231 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1230, i32 0, i32 2
  %bf.load1232 = load i32, i32* %used_flag1231, align 8
  %bf.lshr1233 = lshr i32 %bf.load1232, 16
  %bf.clear1234 = and i32 %bf.lshr1233, 1
  %tobool1235 = icmp ne i32 %bf.clear1234, 0
  br i1 %tobool1235, label %if.end.1240, label %if.then.1236

if.then.1236:                                     ; preds = %land.lhs.true.1226
  %649 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1237 = bitcast %union.tree_node* %649 to %struct.tree_exp*
  %operands1238 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1237, i32 0, i32 2
  %arrayidx1239 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1238, i32 0, i64 2
  %650 = load %union.tree_node*, %union.tree_node** %arrayidx1239, align 8
  call void @insert_block(%union.tree_node* %650)
  br label %if.end.1240

if.end.1240:                                      ; preds = %if.then.1236, %land.lhs.true.1226, %sw.bb.1217
  br label %while.cond

while.cond:                                       ; preds = %if.end.1247, %if.end.1240
  %651 = load %union.tree_node*, %union.tree_node** %vars, align 8
  %tobool1241 = icmp ne %union.tree_node* %651, null
  br i1 %tobool1241, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %652 = load %union.tree_node*, %union.tree_node** %vars, align 8
  %decl1242 = bitcast %union.tree_node* %652 to %struct.tree_decl*
  %rtl1243 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1242, i32 0, i32 17
  %653 = load %struct.rtx_def*, %struct.rtx_def** %rtl1243, align 8
  %cmp1244 = icmp ne %struct.rtx_def* %653, null
  br i1 %cmp1244, label %if.end.1247, label %if.then.1246

if.then.1246:                                     ; preds = %while.body
  store i32 1, i32* %vars_need_expansion, align 4
  %654 = load %union.tree_node*, %union.tree_node** %vars, align 8
  call void @expand_decl(%union.tree_node* %654)
  br label %if.end.1247

if.end.1247:                                      ; preds = %if.then.1246, %while.body
  %655 = load %union.tree_node*, %union.tree_node** %vars, align 8
  call void @expand_decl_init(%union.tree_node* %655)
  %656 = load %union.tree_node*, %union.tree_node** %vars, align 8
  %common1248 = bitcast %union.tree_node* %656 to %struct.tree_common*
  %chain1249 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1248, i32 0, i32 0
  %657 = load %union.tree_node*, %union.tree_node** %chain1249, align 8
  store %union.tree_node* %657, %union.tree_node** %vars, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %658 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1250 = bitcast %union.tree_node* %658 to %struct.tree_exp*
  %operands1251 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1250, i32 0, i32 2
  %arrayidx1252 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1251, i32 0, i64 1
  %659 = load %union.tree_node*, %union.tree_node** %arrayidx1252, align 8
  %660 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %661 = load i32, i32* %tmode.addr, align 4
  %662 = load i32, i32* %modifier.addr, align 4
  %call1253 = call %struct.rtx_def* @expand_expr(%union.tree_node* %659, %struct.rtx_def* %660, i32 %661, i32 %662)
  store %struct.rtx_def* %call1253, %struct.rtx_def** %temp, align 8
  %663 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1254 = bitcast %union.tree_node* %663 to %struct.tree_exp*
  %operands1255 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1254, i32 0, i32 2
  %arrayidx1256 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1255, i32 0, i64 0
  %664 = load %union.tree_node*, %union.tree_node** %arrayidx1256, align 8
  call void @expand_end_bindings(%union.tree_node* %664, i32 0, i32 0)
  %665 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %665, %struct.rtx_def** %retval
  br label %return

sw.bb.1257:                                       ; preds = %if.end.185
  %666 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1258 = bitcast %union.tree_node* %666 to %struct.tree_exp*
  %operands1259 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1258, i32 0, i32 2
  %arrayidx1260 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1259, i32 0, i64 0
  %667 = bitcast %union.tree_node** %arrayidx1260 to %struct.rtx_def**
  %668 = load %struct.rtx_def*, %struct.rtx_def** %667, align 8
  %tobool1261 = icmp ne %struct.rtx_def* %668, null
  br i1 %tobool1261, label %if.then.1262, label %if.end.1277

if.then.1262:                                     ; preds = %sw.bb.1257
  %669 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1263 = bitcast %union.tree_node* %669 to %struct.tree_exp*
  %operands1264 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1263, i32 0, i32 2
  %arrayidx1265 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1264, i32 0, i64 0
  %670 = bitcast %union.tree_node** %arrayidx1265 to %struct.rtx_def**
  %671 = load %struct.rtx_def*, %struct.rtx_def** %670, align 8
  %672 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp1266 = icmp eq %struct.rtx_def* %671, %672
  br i1 %cmp1266, label %if.then.1268, label %if.end.1269

if.then.1268:                                     ; preds = %if.then.1262
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6603, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.1269:                                      ; preds = %if.then.1262
  %673 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1270 = bitcast %union.tree_node* %673 to %struct.tree_exp*
  %operands1271 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1270, i32 0, i32 2
  %arrayidx1272 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1271, i32 0, i64 0
  %674 = bitcast %union.tree_node** %arrayidx1272 to %struct.rtx_def**
  %675 = load %struct.rtx_def*, %struct.rtx_def** %674, align 8
  %call1273 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %675)
  %676 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %677 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1274 = bitcast %union.tree_node* %677 to %struct.tree_exp*
  %operands1275 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1274, i32 0, i32 2
  %arrayidx1276 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1275, i32 0, i64 0
  %678 = bitcast %union.tree_node** %arrayidx1276 to %struct.rtx_def**
  store %struct.rtx_def* %676, %struct.rtx_def** %678, align 8
  br label %if.end.1277

if.end.1277:                                      ; preds = %if.end.1269, %sw.bb.1257
  %679 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1278 = bitcast %union.tree_node* %679 to %struct.tree_exp*
  %operands1279 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1278, i32 0, i32 2
  %arrayidx1280 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1279, i32 0, i64 1
  %680 = bitcast %union.tree_node** %arrayidx1280 to %struct.rtx_def**
  %681 = load %struct.rtx_def*, %struct.rtx_def** %680, align 8
  call void @preserve_rtl_expr_result(%struct.rtx_def* %681)
  %682 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @free_temps_for_rtl_expr(%union.tree_node* %682)
  %683 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1281 = bitcast %union.tree_node* %683 to %struct.tree_exp*
  %operands1282 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1281, i32 0, i32 2
  %arrayidx1283 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1282, i32 0, i64 1
  %684 = bitcast %union.tree_node** %arrayidx1283 to %struct.rtx_def**
  %685 = load %struct.rtx_def*, %struct.rtx_def** %684, align 8
  store %struct.rtx_def* %685, %struct.rtx_def** %retval
  br label %return

sw.bb.1284:                                       ; preds = %if.end.185
  %686 = load i32, i32* %ignore, align 4
  %tobool1285 = icmp ne i32 %686, 0
  br i1 %tobool1285, label %if.then.1286, label %if.else.1295

if.then.1286:                                     ; preds = %sw.bb.1284
  %687 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1287 = bitcast %union.tree_node* %687 to %struct.tree_exp*
  %operands1288 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1287, i32 0, i32 2
  %arrayidx1289 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1288, i32 0, i64 1
  %688 = load %union.tree_node*, %union.tree_node** %arrayidx1289, align 8
  store %union.tree_node* %688, %union.tree_node** %elt, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.1286
  %689 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %tobool1290 = icmp ne %union.tree_node* %689, null
  br i1 %tobool1290, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %690 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %list = bitcast %union.tree_node* %690 to %struct.tree_list*
  %value1291 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %691 = load %union.tree_node*, %union.tree_node** %value1291, align 8
  %692 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1292 = call %struct.rtx_def* @expand_expr(%union.tree_node* %691, %struct.rtx_def* %692, i32 0, i32 0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %693 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common1293 = bitcast %union.tree_node* %693 to %struct.tree_common*
  %chain1294 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1293, i32 0, i32 0
  %694 = load %union.tree_node*, %union.tree_node** %chain1294, align 8
  store %union.tree_node* %694, %union.tree_node** %elt, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %695 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %695, %struct.rtx_def** %retval
  br label %return

if.else.1295:                                     ; preds = %sw.bb.1284
  %696 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1296 = bitcast %union.tree_node* %696 to %struct.tree_common*
  %static_flag1297 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1296, i32 0, i32 2
  %bf.load1298 = load i32, i32* %static_flag1297, align 8
  %bf.lshr1299 = lshr i32 %bf.load1298, 18
  %bf.clear1300 = and i32 %bf.lshr1299, 1
  %tobool1301 = icmp ne i32 %bf.clear1300, 0
  br i1 %tobool1301, label %land.lhs.true.1302, label %lor.lhs.false.1338

land.lhs.true.1302:                               ; preds = %if.else.1295
  %697 = load i32, i32* %mode, align 4
  %cmp1303 = icmp eq i32 %697, 51
  br i1 %cmp1303, label %land.lhs.true.1305, label %lor.lhs.false.1311

land.lhs.true.1305:                               ; preds = %land.lhs.true.1302
  %698 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp1306 = icmp ne %struct.rtx_def* %698, null
  br i1 %cmp1306, label %land.lhs.true.1308, label %if.then.1347

land.lhs.true.1308:                               ; preds = %land.lhs.true.1305
  %699 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %700 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call1309 = call i32 @safe_from_p(%struct.rtx_def* %699, %union.tree_node* %700, i32 1)
  %tobool1310 = icmp ne i32 %call1309, 0
  br i1 %tobool1310, label %lor.lhs.false.1311, label %if.then.1347

lor.lhs.false.1311:                               ; preds = %land.lhs.true.1308, %land.lhs.true.1302
  %701 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1312 = bitcast %union.tree_node* %701 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1312, i32 0, i32 2
  %bf.load1313 = load i32, i32* %addressable_flag, align 8
  %bf.lshr1314 = lshr i32 %bf.load1313, 10
  %bf.clear1315 = and i32 %bf.lshr1314, 1
  %tobool1316 = icmp ne i32 %bf.clear1315, 0
  br i1 %tobool1316, label %if.then.1347, label %lor.lhs.false.1317

lor.lhs.false.1317:                               ; preds = %lor.lhs.false.1311
  %702 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type1318 = bitcast %union.tree_node* %702 to %struct.tree_type*
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1318, i32 0, i32 3
  %703 = load %union.tree_node*, %union.tree_node** %size_unit, align 8
  %call1319 = call i32 @host_integerp(%union.tree_node* %703, i32 1)
  %tobool1320 = icmp ne i32 %call1319, 0
  br i1 %tobool1320, label %land.lhs.true.1321, label %lor.lhs.false.1338

land.lhs.true.1321:                               ; preds = %lor.lhs.false.1317
  %704 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type1322 = bitcast %union.tree_node* %704 to %struct.tree_type*
  %size_unit1323 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1322, i32 0, i32 3
  %705 = load %union.tree_node*, %union.tree_node** %size_unit1323, align 8
  %call1324 = call i64 @tree_low_cst(%union.tree_node* %705, i32 1)
  %706 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type1325 = bitcast %union.tree_node* %706 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1325, i32 0, i32 7
  %707 = load i32, i32* %align, align 4
  %call1326 = call i64 @move_by_pieces_ninsns(i64 %call1324, i32 %707)
  %708 = load i32, i32* @optimize_size, align 4
  %tobool1327 = icmp ne i32 %708, 0
  br i1 %tobool1327, label %cond.true.1328, label %cond.false.1329

cond.true.1328:                                   ; preds = %land.lhs.true.1321
  br label %cond.end.1330

cond.false.1329:                                  ; preds = %land.lhs.true.1321
  %709 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %709, i32 0, i32 10
  %710 = load i32, i32* %move_ratio, align 4
  br label %cond.end.1330

cond.end.1330:                                    ; preds = %cond.false.1329, %cond.true.1328
  %cond1331 = phi i32 [ 3, %cond.true.1328 ], [ %710, %cond.false.1329 ]
  %conv1332 = zext i32 %cond1331 to i64
  %cmp1333 = icmp ult i64 %call1326, %conv1332
  br i1 %cmp1333, label %lor.lhs.false.1338, label %land.lhs.true.1335

land.lhs.true.1335:                               ; preds = %cond.end.1330
  %711 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call1336 = call i32 @mostly_zeros_p(%union.tree_node* %711)
  %tobool1337 = icmp ne i32 %call1336, 0
  br i1 %tobool1337, label %lor.lhs.false.1338, label %if.then.1347

lor.lhs.false.1338:                               ; preds = %land.lhs.true.1335, %cond.end.1330, %lor.lhs.false.1317, %if.else.1295
  %712 = load i32, i32* %modifier.addr, align 4
  %cmp1339 = icmp eq i32 %712, 3
  br i1 %cmp1339, label %land.lhs.true.1341, label %if.else.1360

land.lhs.true.1341:                               ; preds = %lor.lhs.false.1338
  %713 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1342 = bitcast %union.tree_node* %713 to %struct.tree_common*
  %constant_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1342, i32 0, i32 2
  %bf.load1343 = load i32, i32* %constant_flag, align 8
  %bf.lshr1344 = lshr i32 %bf.load1343, 9
  %bf.clear1345 = and i32 %bf.lshr1344, 1
  %tobool1346 = icmp ne i32 %bf.clear1345, 0
  br i1 %tobool1346, label %if.then.1347, label %if.else.1360

if.then.1347:                                     ; preds = %land.lhs.true.1341, %land.lhs.true.1335, %lor.lhs.false.1311, %land.lhs.true.1308, %land.lhs.true.1305
  %714 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call1348 = call %struct.rtx_def* @output_constant_def(%union.tree_node* %714, i32 1)
  store %struct.rtx_def* %call1348, %struct.rtx_def** %constructor, align 8
  %715 = load i32, i32* %modifier.addr, align 4
  %cmp1349 = icmp ne i32 %715, 2
  br i1 %cmp1349, label %land.lhs.true.1351, label %if.end.1359

land.lhs.true.1351:                               ; preds = %if.then.1347
  %716 = load i32, i32* %modifier.addr, align 4
  %cmp1352 = icmp ne i32 %716, 3
  br i1 %cmp1352, label %land.lhs.true.1354, label %if.end.1359

land.lhs.true.1354:                               ; preds = %land.lhs.true.1351
  %717 = load i32, i32* %modifier.addr, align 4
  %cmp1355 = icmp ne i32 %717, 1
  br i1 %cmp1355, label %if.then.1357, label %if.end.1359

if.then.1357:                                     ; preds = %land.lhs.true.1354
  %718 = load %struct.rtx_def*, %struct.rtx_def** %constructor, align 8
  %call1358 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %718)
  store %struct.rtx_def* %call1358, %struct.rtx_def** %constructor, align 8
  br label %if.end.1359

if.end.1359:                                      ; preds = %if.then.1357, %land.lhs.true.1354, %land.lhs.true.1351, %if.then.1347
  %719 = load %struct.rtx_def*, %struct.rtx_def** %constructor, align 8
  store %struct.rtx_def* %719, %struct.rtx_def** %retval
  br label %return

if.else.1360:                                     ; preds = %land.lhs.true.1341, %lor.lhs.false.1338
  %720 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp1361 = icmp eq %struct.rtx_def* %720, null
  br i1 %cmp1361, label %if.then.1371, label %lor.lhs.false.1363

lor.lhs.false.1363:                               ; preds = %if.else.1360
  %721 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %722 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call1364 = call i32 @safe_from_p(%struct.rtx_def* %721, %union.tree_node* %722, i32 1)
  %tobool1365 = icmp ne i32 %call1364, 0
  br i1 %tobool1365, label %lor.lhs.false.1366, label %if.then.1371

lor.lhs.false.1366:                               ; preds = %lor.lhs.false.1363
  %723 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %724 = bitcast %struct.rtx_def* %723 to i32*
  %bf.load1367 = load i32, i32* %724, align 8
  %bf.clear1368 = and i32 %bf.load1367, 65535
  %cmp1369 = icmp eq i32 %bf.clear1368, 39
  br i1 %cmp1369, label %if.then.1371, label %if.end.1420

if.then.1371:                                     ; preds = %lor.lhs.false.1366, %lor.lhs.false.1363, %if.else.1360
  %725 = load %union.tree_node*, %union.tree_node** %type, align 8
  %726 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1372 = bitcast %union.tree_node* %726 to %struct.tree_common*
  %readonly_flag1373 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1372, i32 0, i32 2
  %bf.load1374 = load i32, i32* %readonly_flag1373, align 8
  %bf.lshr1375 = lshr i32 %bf.load1374, 12
  %bf.clear1376 = and i32 %bf.lshr1375, 1
  %mul1377 = mul nsw i32 %bf.clear1376, 1
  %727 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1378 = bitcast %union.tree_node* %727 to %struct.tree_common*
  %volatile_flag1379 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1378, i32 0, i32 2
  %bf.load1380 = load i32, i32* %volatile_flag1379, align 8
  %bf.lshr1381 = lshr i32 %bf.load1380, 11
  %bf.clear1382 = and i32 %bf.lshr1381, 1
  %mul1383 = mul nsw i32 %bf.clear1382, 2
  %or1384 = or i32 %mul1377, %mul1383
  %728 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type1385 = bitcast %union.tree_node* %728 to %struct.tree_type*
  %restrict_flag1386 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1385, i32 0, i32 6
  %bf.load1387 = load i32, i32* %restrict_flag1386, align 4
  %bf.lshr1388 = lshr i32 %bf.load1387, 21
  %bf.clear1389 = and i32 %bf.lshr1388, 1
  %mul1390 = mul nsw i32 %bf.clear1389, 4
  %or1391 = or i32 %or1384, %mul1390
  %729 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1392 = bitcast %union.tree_node* %729 to %struct.tree_common*
  %code1393 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1392, i32 0, i32 2
  %bf.load1394 = load i32, i32* %code1393, align 8
  %bf.clear1395 = and i32 %bf.load1394, 255
  %cmp1396 = icmp eq i32 %bf.clear1395, 20
  br i1 %cmp1396, label %land.rhs.1398, label %land.end.1402

land.rhs.1398:                                    ; preds = %if.then.1371
  %730 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1399 = bitcast %union.tree_node* %730 to %struct.tree_common*
  %type1400 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1399, i32 0, i32 1
  %731 = load %union.tree_node*, %union.tree_node** %type1400, align 8
  %tobool1401 = icmp ne %union.tree_node* %731, null
  br label %land.end.1402

land.end.1402:                                    ; preds = %land.rhs.1398, %if.then.1371
  %732 = phi i1 [ false, %if.then.1371 ], [ %tobool1401, %land.rhs.1398 ]
  %land.ext1403 = zext i1 %732 to i32
  %mul1404 = mul nsw i32 %land.ext1403, 8
  %or1405 = or i32 %or1391, %mul1404
  %733 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1406 = bitcast %union.tree_node* %733 to %struct.tree_common*
  %readonly_flag1407 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1406, i32 0, i32 2
  %bf.load1408 = load i32, i32* %readonly_flag1407, align 8
  %bf.lshr1409 = lshr i32 %bf.load1408, 12
  %bf.clear1410 = and i32 %bf.lshr1409, 1
  %mul1411 = mul nsw i32 %bf.clear1410, 1
  %or1412 = or i32 %or1405, %mul1411
  %call1413 = call %union.tree_node* @build_qualified_type(%union.tree_node* %725, i32 %or1412)
  %734 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1414 = bitcast %union.tree_node* %734 to %struct.tree_common*
  %addressable_flag1415 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1414, i32 0, i32 2
  %bf.load1416 = load i32, i32* %addressable_flag1415, align 8
  %bf.lshr1417 = lshr i32 %bf.load1416, 10
  %bf.clear1418 = and i32 %bf.lshr1417, 1
  %call1419 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call1413, i32 0, i32 %bf.clear1418, i32 1)
  store %struct.rtx_def* %call1419, %struct.rtx_def** %target.addr, align 8
  br label %if.end.1420

if.end.1420:                                      ; preds = %land.end.1402, %lor.lhs.false.1366
  %735 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %736 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %737 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1421 = bitcast %union.tree_node* %737 to %struct.tree_common*
  %type1422 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1421, i32 0, i32 1
  %738 = load %union.tree_node*, %union.tree_node** %type1422, align 8
  %call1423 = call i64 @int_size_in_bytes(%union.tree_node* %738)
  call void @store_constructor(%union.tree_node* %735, %struct.rtx_def* %736, i32 0, i64 %call1423)
  %739 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %739, %struct.rtx_def** %retval
  br label %return

sw.bb.1424:                                       ; preds = %if.end.185
  %740 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1425 = bitcast %union.tree_node* %740 to %struct.tree_exp*
  %operands1426 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1425, i32 0, i32 2
  %arrayidx1427 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1426, i32 0, i64 0
  %741 = load %union.tree_node*, %union.tree_node** %arrayidx1427, align 8
  store %union.tree_node* %741, %union.tree_node** %exp1, align 8
  %742 = load %union.tree_node*, %union.tree_node** %exp1, align 8
  %call1428 = call %union.tree_node* @string_constant(%union.tree_node* %742, %union.tree_node** %index)
  store %union.tree_node* %call1428, %union.tree_node** %string, align 8
  %743 = load %union.tree_node*, %union.tree_node** %string, align 8
  %tobool1429 = icmp ne %union.tree_node* %743, null
  br i1 %tobool1429, label %land.lhs.true.1430, label %if.end.1473

land.lhs.true.1430:                               ; preds = %sw.bb.1424
  %744 = load %union.tree_node*, %union.tree_node** %string, align 8
  %common1431 = bitcast %union.tree_node* %744 to %struct.tree_common*
  %code1432 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1431, i32 0, i32 2
  %bf.load1433 = load i32, i32* %code1432, align 8
  %bf.clear1434 = and i32 %bf.load1433, 255
  %cmp1435 = icmp eq i32 %bf.clear1434, 29
  br i1 %cmp1435, label %land.lhs.true.1437, label %if.end.1473

land.lhs.true.1437:                               ; preds = %land.lhs.true.1430
  %745 = load %union.tree_node*, %union.tree_node** %index, align 8
  %common1438 = bitcast %union.tree_node* %745 to %struct.tree_common*
  %code1439 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1438, i32 0, i32 2
  %bf.load1440 = load i32, i32* %code1439, align 8
  %bf.clear1441 = and i32 %bf.load1440, 255
  %cmp1442 = icmp eq i32 %bf.clear1441, 25
  br i1 %cmp1442, label %land.lhs.true.1444, label %if.end.1473

land.lhs.true.1444:                               ; preds = %land.lhs.true.1437
  %746 = load %union.tree_node*, %union.tree_node** %index, align 8
  %747 = load %union.tree_node*, %union.tree_node** %string, align 8
  %string1445 = bitcast %union.tree_node* %747 to %struct.tree_string*
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1445, i32 0, i32 2
  %748 = load i32, i32* %length, align 4
  %conv1446 = sext i32 %748 to i64
  %call1447 = call i32 @compare_tree_int(%union.tree_node* %746, i64 %conv1446)
  %cmp1448 = icmp slt i32 %call1447, 0
  br i1 %cmp1448, label %land.lhs.true.1450, label %if.end.1473

land.lhs.true.1450:                               ; preds = %land.lhs.true.1444
  %749 = load i32, i32* %mode, align 4
  %idxprom1451 = sext i32 %749 to i64
  %arrayidx1452 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom1451
  %750 = load i32, i32* %arrayidx1452, align 4
  %cmp1453 = icmp eq i32 %750, 1
  br i1 %cmp1453, label %land.lhs.true.1455, label %if.end.1473

land.lhs.true.1455:                               ; preds = %land.lhs.true.1450
  %751 = load i32, i32* %mode, align 4
  %idxprom1456 = sext i32 %751 to i64
  %arrayidx1457 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom1456
  %752 = load i8, i8* %arrayidx1457, align 1
  %conv1458 = zext i8 %752 to i32
  %cmp1459 = icmp eq i32 %conv1458, 1
  br i1 %cmp1459, label %land.lhs.true.1461, label %if.end.1473

land.lhs.true.1461:                               ; preds = %land.lhs.true.1455
  %753 = load i32, i32* %modifier.addr, align 4
  %cmp1462 = icmp ne i32 %753, 4
  br i1 %cmp1462, label %if.then.1464, label %if.end.1473

if.then.1464:                                     ; preds = %land.lhs.true.1461
  %754 = load %union.tree_node*, %union.tree_node** %index, align 8
  %int_cst1465 = bitcast %union.tree_node* %754 to %struct.tree_int_cst*
  %int_cst1466 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1465, i32 0, i32 2
  %low1467 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst1466, i32 0, i32 0
  %755 = load i64, i64* %low1467, align 8
  %756 = load %union.tree_node*, %union.tree_node** %string, align 8
  %string1468 = bitcast %union.tree_node* %756 to %struct.tree_string*
  %pointer = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1468, i32 0, i32 3
  %757 = load i8*, i8** %pointer, align 8
  %arrayidx1469 = getelementptr inbounds i8, i8* %757, i64 %755
  %758 = load i8, i8* %arrayidx1469, align 1
  %conv1470 = sext i8 %758 to i64
  %759 = load i32, i32* %mode, align 4
  %call1471 = call i64 @trunc_int_for_mode(i64 %conv1470, i32 %759)
  %call1472 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call1471)
  store %struct.rtx_def* %call1472, %struct.rtx_def** %retval
  br label %return

if.end.1473:                                      ; preds = %land.lhs.true.1461, %land.lhs.true.1455, %land.lhs.true.1450, %land.lhs.true.1444, %land.lhs.true.1437, %land.lhs.true.1430, %sw.bb.1424
  %760 = load %union.tree_node*, %union.tree_node** %exp1, align 8
  %call1474 = call %struct.rtx_def* @expand_expr(%union.tree_node* %760, %struct.rtx_def* null, i32 0, i32 1)
  store %struct.rtx_def* %call1474, %struct.rtx_def** %op0, align 8
  %761 = load i32, i32* %mode, align 4
  %762 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call1475 = call %struct.rtx_def* @memory_address(i32 %761, %struct.rtx_def* %762)
  store %struct.rtx_def* %call1475, %struct.rtx_def** %op0, align 8
  %763 = load i32, i32* %mode, align 4
  %764 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call1476 = call %struct.rtx_def* @gen_rtx_MEM(i32 %763, %struct.rtx_def* %764)
  store %struct.rtx_def* %call1476, %struct.rtx_def** %temp, align 8
  %765 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %766 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %765, %union.tree_node* %766, i32 0)
  %767 = load i32, i32* %modifier.addr, align 4
  %cmp1477 = icmp eq i32 %767, 4
  br i1 %cmp1477, label %land.lhs.true.1479, label %if.end.1486

land.lhs.true.1479:                               ; preds = %if.end.1473
  %768 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call1480 = call i32 @readonly_fields_p(%union.tree_node* %768)
  %tobool1481 = icmp ne i32 %call1480, 0
  br i1 %tobool1481, label %if.then.1482, label %if.end.1486

if.then.1482:                                     ; preds = %land.lhs.true.1479
  %769 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %770 = bitcast %struct.rtx_def* %769 to i32*
  %bf.load1483 = load i32, i32* %770, align 8
  %bf.clear1484 = and i32 %bf.load1483, -67108865
  %bf.set1485 = or i32 %bf.clear1484, 67108864
  store i32 %bf.set1485, i32* %770, align 8
  br label %if.end.1486

if.end.1486:                                      ; preds = %if.then.1482, %land.lhs.true.1479, %if.end.1473
  %771 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %771, %struct.rtx_def** %retval
  br label %return

sw.bb.1487:                                       ; preds = %if.end.185
  %772 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1488 = bitcast %union.tree_node* %772 to %struct.tree_exp*
  %operands1489 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1488, i32 0, i32 2
  %arrayidx1490 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1489, i32 0, i64 0
  %773 = load %union.tree_node*, %union.tree_node** %arrayidx1490, align 8
  %common1491 = bitcast %union.tree_node* %773 to %struct.tree_common*
  %type1492 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1491, i32 0, i32 1
  %774 = load %union.tree_node*, %union.tree_node** %type1492, align 8
  %common1493 = bitcast %union.tree_node* %774 to %struct.tree_common*
  %code1494 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1493, i32 0, i32 2
  %bf.load1495 = load i32, i32* %code1494, align 8
  %bf.clear1496 = and i32 %bf.load1495, 255
  %cmp1497 = icmp ne i32 %bf.clear1496, 18
  br i1 %cmp1497, label %if.then.1499, label %if.end.1500

if.then.1499:                                     ; preds = %sw.bb.1487
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6703, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.1500:                                      ; preds = %sw.bb.1487
  %775 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1501 = bitcast %union.tree_node* %775 to %struct.tree_exp*
  %operands1502 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1501, i32 0, i32 2
  %arrayidx1503 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1502, i32 0, i64 0
  %776 = load %union.tree_node*, %union.tree_node** %arrayidx1503, align 8
  store %union.tree_node* %776, %union.tree_node** %array, align 8
  %777 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common1504 = bitcast %union.tree_node* %777 to %struct.tree_common*
  %type1505 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1504, i32 0, i32 1
  %778 = load %union.tree_node*, %union.tree_node** %type1505, align 8
  %type1506 = bitcast %union.tree_node* %778 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1506, i32 0, i32 1
  %779 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %779, %union.tree_node** %domain, align 8
  %780 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %tobool1507 = icmp ne %union.tree_node* %780, null
  br i1 %tobool1507, label %cond.true.1508, label %cond.false.1510

cond.true.1508:                                   ; preds = %if.end.1500
  %781 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type1509 = bitcast %union.tree_node* %781 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1509, i32 0, i32 12
  %782 = load %union.tree_node*, %union.tree_node** %minval, align 8
  br label %cond.end.1511

cond.false.1510:                                  ; preds = %if.end.1500
  %783 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  br label %cond.end.1511

cond.end.1511:                                    ; preds = %cond.false.1510, %cond.true.1508
  %cond1512 = phi %union.tree_node* [ %782, %cond.true.1508 ], [ %783, %cond.false.1510 ]
  store %union.tree_node* %cond1512, %union.tree_node** %low_bound, align 8
  %784 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %785 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1514 = bitcast %union.tree_node* %785 to %struct.tree_exp*
  %operands1515 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1514, i32 0, i32 2
  %arrayidx1516 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1515, i32 0, i64 1
  %786 = load %union.tree_node*, %union.tree_node** %arrayidx1516, align 8
  %call1517 = call %union.tree_node* @convert(%union.tree_node* %784, %union.tree_node* %786)
  store %union.tree_node* %call1517, %union.tree_node** %index1513, align 8
  %787 = load %union.tree_node*, %union.tree_node** %low_bound, align 8
  %call1518 = call i32 @integer_zerop(%union.tree_node* %787)
  %tobool1519 = icmp ne i32 %call1518, 0
  br i1 %tobool1519, label %if.end.1523, label %if.then.1520

if.then.1520:                                     ; preds = %cond.end.1511
  %788 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %789 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %790 = load %union.tree_node*, %union.tree_node** %low_bound, align 8
  %call1521 = call %union.tree_node* @convert(%union.tree_node* %789, %union.tree_node* %790)
  %call1522 = call %union.tree_node* @size_diffop(%union.tree_node* %788, %union.tree_node* %call1521)
  store %union.tree_node* %call1522, %union.tree_node** %index1513, align 8
  br label %if.end.1523

if.end.1523:                                      ; preds = %if.then.1520, %cond.end.1511
  %791 = load i32, i32* %modifier.addr, align 4
  %cmp1524 = icmp ne i32 %791, 2
  br i1 %cmp1524, label %land.lhs.true.1526, label %if.end.1571

land.lhs.true.1526:                               ; preds = %if.end.1523
  %792 = load i32, i32* %modifier.addr, align 4
  %cmp1527 = icmp ne i32 %792, 3
  br i1 %cmp1527, label %land.lhs.true.1529, label %if.end.1571

land.lhs.true.1529:                               ; preds = %land.lhs.true.1526
  %793 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common1530 = bitcast %union.tree_node* %793 to %struct.tree_common*
  %code1531 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1530, i32 0, i32 2
  %bf.load1532 = load i32, i32* %code1531, align 8
  %bf.clear1533 = and i32 %bf.load1532, 255
  %cmp1534 = icmp eq i32 %bf.clear1533, 29
  br i1 %cmp1534, label %land.lhs.true.1536, label %if.end.1571

land.lhs.true.1536:                               ; preds = %land.lhs.true.1529
  %794 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %common1537 = bitcast %union.tree_node* %794 to %struct.tree_common*
  %code1538 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1537, i32 0, i32 2
  %bf.load1539 = load i32, i32* %code1538, align 8
  %bf.clear1540 = and i32 %bf.load1539, 255
  %cmp1541 = icmp eq i32 %bf.clear1540, 25
  br i1 %cmp1541, label %land.lhs.true.1543, label %if.end.1571

land.lhs.true.1543:                               ; preds = %land.lhs.true.1536
  %795 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %796 = load %union.tree_node*, %union.tree_node** %array, align 8
  %string1544 = bitcast %union.tree_node* %796 to %struct.tree_string*
  %length1545 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1544, i32 0, i32 2
  %797 = load i32, i32* %length1545, align 4
  %conv1546 = sext i32 %797 to i64
  %call1547 = call i32 @compare_tree_int(%union.tree_node* %795, i64 %conv1546)
  %cmp1548 = icmp slt i32 %call1547, 0
  br i1 %cmp1548, label %land.lhs.true.1550, label %if.end.1571

land.lhs.true.1550:                               ; preds = %land.lhs.true.1543
  %798 = load i32, i32* %mode, align 4
  %idxprom1551 = sext i32 %798 to i64
  %arrayidx1552 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom1551
  %799 = load i32, i32* %arrayidx1552, align 4
  %cmp1553 = icmp eq i32 %799, 1
  br i1 %cmp1553, label %land.lhs.true.1555, label %if.end.1571

land.lhs.true.1555:                               ; preds = %land.lhs.true.1550
  %800 = load i32, i32* %mode, align 4
  %idxprom1556 = sext i32 %800 to i64
  %arrayidx1557 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom1556
  %801 = load i8, i8* %arrayidx1557, align 1
  %conv1558 = zext i8 %801 to i32
  %cmp1559 = icmp eq i32 %conv1558, 1
  br i1 %cmp1559, label %if.then.1561, label %if.end.1571

if.then.1561:                                     ; preds = %land.lhs.true.1555
  %802 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %int_cst1562 = bitcast %union.tree_node* %802 to %struct.tree_int_cst*
  %int_cst1563 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1562, i32 0, i32 2
  %low1564 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst1563, i32 0, i32 0
  %803 = load i64, i64* %low1564, align 8
  %804 = load %union.tree_node*, %union.tree_node** %array, align 8
  %string1565 = bitcast %union.tree_node* %804 to %struct.tree_string*
  %pointer1566 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1565, i32 0, i32 3
  %805 = load i8*, i8** %pointer1566, align 8
  %arrayidx1567 = getelementptr inbounds i8, i8* %805, i64 %803
  %806 = load i8, i8* %arrayidx1567, align 1
  %conv1568 = sext i8 %806 to i64
  %807 = load i32, i32* %mode, align 4
  %call1569 = call i64 @trunc_int_for_mode(i64 %conv1568, i32 %807)
  %call1570 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call1569)
  store %struct.rtx_def* %call1570, %struct.rtx_def** %retval
  br label %return

if.end.1571:                                      ; preds = %land.lhs.true.1555, %land.lhs.true.1550, %land.lhs.true.1543, %land.lhs.true.1536, %land.lhs.true.1529, %land.lhs.true.1526, %if.end.1523
  %808 = load i32, i32* %modifier.addr, align 4
  %cmp1572 = icmp ne i32 %808, 2
  br i1 %cmp1572, label %land.lhs.true.1574, label %if.else.1640

land.lhs.true.1574:                               ; preds = %if.end.1571
  %809 = load i32, i32* %modifier.addr, align 4
  %cmp1575 = icmp ne i32 %809, 3
  br i1 %cmp1575, label %land.lhs.true.1577, label %if.else.1640

land.lhs.true.1577:                               ; preds = %land.lhs.true.1574
  %810 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common1578 = bitcast %union.tree_node* %810 to %struct.tree_common*
  %code1579 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1578, i32 0, i32 2
  %bf.load1580 = load i32, i32* %code1579, align 8
  %bf.clear1581 = and i32 %bf.load1580, 255
  %cmp1582 = icmp eq i32 %bf.clear1581, 46
  br i1 %cmp1582, label %land.lhs.true.1584, label %if.else.1640

land.lhs.true.1584:                               ; preds = %land.lhs.true.1577
  %811 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common1585 = bitcast %union.tree_node* %811 to %struct.tree_common*
  %side_effects_flag1586 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1585, i32 0, i32 2
  %bf.load1587 = load i32, i32* %side_effects_flag1586, align 8
  %bf.lshr1588 = lshr i32 %bf.load1587, 8
  %bf.clear1589 = and i32 %bf.lshr1588, 1
  %tobool1590 = icmp ne i32 %bf.clear1589, 0
  br i1 %tobool1590, label %if.else.1640, label %land.lhs.true.1591

land.lhs.true.1591:                               ; preds = %land.lhs.true.1584
  %812 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %common1592 = bitcast %union.tree_node* %812 to %struct.tree_common*
  %code1593 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1592, i32 0, i32 2
  %bf.load1594 = load i32, i32* %code1593, align 8
  %bf.clear1595 = and i32 %bf.load1594, 255
  %cmp1596 = icmp eq i32 %bf.clear1595, 25
  br i1 %cmp1596, label %land.lhs.true.1598, label %if.else.1640

land.lhs.true.1598:                               ; preds = %land.lhs.true.1591
  %813 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %814 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1599 = bitcast %union.tree_node* %814 to %struct.tree_exp*
  %operands1600 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1599, i32 0, i32 2
  %arrayidx1601 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1600, i32 0, i64 0
  %815 = load %union.tree_node*, %union.tree_node** %arrayidx1601, align 8
  %exp1602 = bitcast %union.tree_node* %815 to %struct.tree_exp*
  %operands1603 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1602, i32 0, i32 2
  %arrayidx1604 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1603, i32 0, i64 1
  %816 = load %union.tree_node*, %union.tree_node** %arrayidx1604, align 8
  %call1605 = call i32 @list_length(%union.tree_node* %816)
  %conv1606 = sext i32 %call1605 to i64
  %call1607 = call i32 @compare_tree_int(%union.tree_node* %813, i64 %conv1606)
  %cmp1608 = icmp sgt i32 0, %call1607
  br i1 %cmp1608, label %if.then.1610, label %if.else.1640

if.then.1610:                                     ; preds = %land.lhs.true.1598
  %817 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1611 = bitcast %union.tree_node* %817 to %struct.tree_exp*
  %operands1612 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1611, i32 0, i32 2
  %arrayidx1613 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1612, i32 0, i64 0
  %818 = load %union.tree_node*, %union.tree_node** %arrayidx1613, align 8
  %exp1614 = bitcast %union.tree_node* %818 to %struct.tree_exp*
  %operands1615 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1614, i32 0, i32 2
  %arrayidx1616 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1615, i32 0, i64 1
  %819 = load %union.tree_node*, %union.tree_node** %arrayidx1616, align 8
  store %union.tree_node* %819, %union.tree_node** %elem, align 8
  %820 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %int_cst1617 = bitcast %union.tree_node* %820 to %struct.tree_int_cst*
  %int_cst1618 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1617, i32 0, i32 2
  %low1619 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst1618, i32 0, i32 0
  %821 = load i64, i64* %low1619, align 8
  store i64 %821, i64* %i, align 8
  br label %for.cond.1620

for.cond.1620:                                    ; preds = %for.inc.1629, %if.then.1610
  %822 = load %union.tree_node*, %union.tree_node** %elem, align 8
  %cmp1621 = icmp ne %union.tree_node* %822, null
  br i1 %cmp1621, label %land.rhs.1623, label %land.end.1626

land.rhs.1623:                                    ; preds = %for.cond.1620
  %823 = load i64, i64* %i, align 8
  %cmp1624 = icmp ne i64 %823, 0
  br label %land.end.1626

land.end.1626:                                    ; preds = %land.rhs.1623, %for.cond.1620
  %824 = phi i1 [ false, %for.cond.1620 ], [ %cmp1624, %land.rhs.1623 ]
  br i1 %824, label %for.body.1628, label %for.end.1632

for.body.1628:                                    ; preds = %land.end.1626
  br label %for.inc.1629

for.inc.1629:                                     ; preds = %for.body.1628
  %825 = load i64, i64* %i, align 8
  %dec = add nsw i64 %825, -1
  store i64 %dec, i64* %i, align 8
  %826 = load %union.tree_node*, %union.tree_node** %elem, align 8
  %common1630 = bitcast %union.tree_node* %826 to %struct.tree_common*
  %chain1631 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1630, i32 0, i32 0
  %827 = load %union.tree_node*, %union.tree_node** %chain1631, align 8
  store %union.tree_node* %827, %union.tree_node** %elem, align 8
  br label %for.cond.1620

for.end.1632:                                     ; preds = %land.end.1626
  %828 = load %union.tree_node*, %union.tree_node** %elem, align 8
  %tobool1633 = icmp ne %union.tree_node* %828, null
  br i1 %tobool1633, label %if.then.1634, label %if.end.1639

if.then.1634:                                     ; preds = %for.end.1632
  %829 = load %union.tree_node*, %union.tree_node** %elem, align 8
  %list1635 = bitcast %union.tree_node* %829 to %struct.tree_list*
  %value1636 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1635, i32 0, i32 2
  %830 = load %union.tree_node*, %union.tree_node** %value1636, align 8
  %call1637 = call %union.tree_node* @fold(%union.tree_node* %830)
  %831 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %832 = load i32, i32* %tmode.addr, align 4
  %833 = load i32, i32* %modifier.addr, align 4
  %call1638 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call1637, %struct.rtx_def* %831, i32 %832, i32 %833)
  store %struct.rtx_def* %call1638, %struct.rtx_def** %retval
  br label %return

if.end.1639:                                      ; preds = %for.end.1632
  br label %if.end.1784

if.else.1640:                                     ; preds = %land.lhs.true.1598, %land.lhs.true.1591, %land.lhs.true.1584, %land.lhs.true.1577, %land.lhs.true.1574, %if.end.1571
  %834 = load i32, i32* @optimize, align 4
  %cmp1641 = icmp sge i32 %834, 1
  br i1 %cmp1641, label %land.lhs.true.1643, label %if.end.1783

land.lhs.true.1643:                               ; preds = %if.else.1640
  %835 = load i32, i32* %modifier.addr, align 4
  %cmp1644 = icmp ne i32 %835, 2
  br i1 %cmp1644, label %land.lhs.true.1646, label %if.end.1783

land.lhs.true.1646:                               ; preds = %land.lhs.true.1643
  %836 = load i32, i32* %modifier.addr, align 4
  %cmp1647 = icmp ne i32 %836, 3
  br i1 %cmp1647, label %land.lhs.true.1649, label %if.end.1783

land.lhs.true.1649:                               ; preds = %land.lhs.true.1646
  %837 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common1650 = bitcast %union.tree_node* %837 to %struct.tree_common*
  %readonly_flag1651 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1650, i32 0, i32 2
  %bf.load1652 = load i32, i32* %readonly_flag1651, align 8
  %bf.lshr1653 = lshr i32 %bf.load1652, 12
  %bf.clear1654 = and i32 %bf.lshr1653, 1
  %tobool1655 = icmp ne i32 %bf.clear1654, 0
  br i1 %tobool1655, label %land.lhs.true.1656, label %if.end.1783

land.lhs.true.1656:                               ; preds = %land.lhs.true.1649
  %838 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common1657 = bitcast %union.tree_node* %838 to %struct.tree_common*
  %side_effects_flag1658 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1657, i32 0, i32 2
  %bf.load1659 = load i32, i32* %side_effects_flag1658, align 8
  %bf.lshr1660 = lshr i32 %bf.load1659, 8
  %bf.clear1661 = and i32 %bf.lshr1660, 1
  %tobool1662 = icmp ne i32 %bf.clear1661, 0
  br i1 %tobool1662, label %if.end.1783, label %land.lhs.true.1663

land.lhs.true.1663:                               ; preds = %land.lhs.true.1656
  %839 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common1664 = bitcast %union.tree_node* %839 to %struct.tree_common*
  %code1665 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1664, i32 0, i32 2
  %bf.load1666 = load i32, i32* %code1665, align 8
  %bf.clear1667 = and i32 %bf.load1666, 255
  %cmp1668 = icmp eq i32 %bf.clear1667, 34
  br i1 %cmp1668, label %land.lhs.true.1670, label %if.end.1783

land.lhs.true.1670:                               ; preds = %land.lhs.true.1663
  %840 = load %union.tree_node*, %union.tree_node** %array, align 8
  %decl1671 = bitcast %union.tree_node* %840 to %struct.tree_decl*
  %initial1672 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1671, i32 0, i32 12
  %841 = load %union.tree_node*, %union.tree_node** %initial1672, align 8
  %tobool1673 = icmp ne %union.tree_node* %841, null
  br i1 %tobool1673, label %land.lhs.true.1674, label %if.end.1783

land.lhs.true.1674:                               ; preds = %land.lhs.true.1670
  %842 = load %union.tree_node*, %union.tree_node** %array, align 8
  %decl1675 = bitcast %union.tree_node* %842 to %struct.tree_decl*
  %initial1676 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1675, i32 0, i32 12
  %843 = load %union.tree_node*, %union.tree_node** %initial1676, align 8
  %common1677 = bitcast %union.tree_node* %843 to %struct.tree_common*
  %code1678 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1677, i32 0, i32 2
  %bf.load1679 = load i32, i32* %code1678, align 8
  %bf.clear1680 = and i32 %bf.load1679, 255
  %cmp1681 = icmp ne i32 %bf.clear1680, 0
  br i1 %cmp1681, label %if.then.1683, label %if.end.1783

if.then.1683:                                     ; preds = %land.lhs.true.1674
  %844 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %common1684 = bitcast %union.tree_node* %844 to %struct.tree_common*
  %code1685 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1684, i32 0, i32 2
  %bf.load1686 = load i32, i32* %code1685, align 8
  %bf.clear1687 = and i32 %bf.load1686, 255
  %cmp1688 = icmp eq i32 %bf.clear1687, 25
  br i1 %cmp1688, label %if.then.1690, label %if.end.1782

if.then.1690:                                     ; preds = %if.then.1683
  %845 = load %union.tree_node*, %union.tree_node** %array, align 8
  %decl1691 = bitcast %union.tree_node* %845 to %struct.tree_decl*
  %initial1692 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1691, i32 0, i32 12
  %846 = load %union.tree_node*, %union.tree_node** %initial1692, align 8
  store %union.tree_node* %846, %union.tree_node** %init, align 8
  %847 = load %union.tree_node*, %union.tree_node** %init, align 8
  %common1693 = bitcast %union.tree_node* %847 to %struct.tree_common*
  %code1694 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1693, i32 0, i32 2
  %bf.load1695 = load i32, i32* %code1694, align 8
  %bf.clear1696 = and i32 %bf.load1695, 255
  %cmp1697 = icmp eq i32 %bf.clear1696, 46
  br i1 %cmp1697, label %if.then.1699, label %if.else.1733

if.then.1699:                                     ; preds = %if.then.1690
  %848 = load %union.tree_node*, %union.tree_node** %init, align 8
  %exp1701 = bitcast %union.tree_node* %848 to %struct.tree_exp*
  %operands1702 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1701, i32 0, i32 2
  %arrayidx1703 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1702, i32 0, i64 1
  %849 = load %union.tree_node*, %union.tree_node** %arrayidx1703, align 8
  store %union.tree_node* %849, %union.tree_node** %elem1700, align 8
  br label %for.cond.1704

for.cond.1704:                                    ; preds = %for.inc.1713, %if.then.1699
  %850 = load %union.tree_node*, %union.tree_node** %elem1700, align 8
  %tobool1705 = icmp ne %union.tree_node* %850, null
  br i1 %tobool1705, label %land.rhs.1706, label %land.end.1710

land.rhs.1706:                                    ; preds = %for.cond.1704
  %851 = load %union.tree_node*, %union.tree_node** %elem1700, align 8
  %list1707 = bitcast %union.tree_node* %851 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1707, i32 0, i32 1
  %852 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %853 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %call1708 = call i32 @tree_int_cst_equal(%union.tree_node* %852, %union.tree_node* %853)
  %tobool1709 = icmp ne i32 %call1708, 0
  %lnot = xor i1 %tobool1709, true
  br label %land.end.1710

land.end.1710:                                    ; preds = %land.rhs.1706, %for.cond.1704
  %854 = phi i1 [ false, %for.cond.1704 ], [ %lnot, %land.rhs.1706 ]
  br i1 %854, label %for.body.1712, label %for.end.1716

for.body.1712:                                    ; preds = %land.end.1710
  br label %for.inc.1713

for.inc.1713:                                     ; preds = %for.body.1712
  %855 = load %union.tree_node*, %union.tree_node** %elem1700, align 8
  %common1714 = bitcast %union.tree_node* %855 to %struct.tree_common*
  %chain1715 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1714, i32 0, i32 0
  %856 = load %union.tree_node*, %union.tree_node** %chain1715, align 8
  store %union.tree_node* %856, %union.tree_node** %elem1700, align 8
  br label %for.cond.1704

for.end.1716:                                     ; preds = %land.end.1710
  %857 = load %union.tree_node*, %union.tree_node** %elem1700, align 8
  %tobool1717 = icmp ne %union.tree_node* %857, null
  br i1 %tobool1717, label %land.lhs.true.1718, label %if.end.1732

land.lhs.true.1718:                               ; preds = %for.end.1716
  %858 = load %union.tree_node*, %union.tree_node** %elem1700, align 8
  %list1719 = bitcast %union.tree_node* %858 to %struct.tree_list*
  %value1720 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1719, i32 0, i32 2
  %859 = load %union.tree_node*, %union.tree_node** %value1720, align 8
  %common1721 = bitcast %union.tree_node* %859 to %struct.tree_common*
  %side_effects_flag1722 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1721, i32 0, i32 2
  %bf.load1723 = load i32, i32* %side_effects_flag1722, align 8
  %bf.lshr1724 = lshr i32 %bf.load1723, 8
  %bf.clear1725 = and i32 %bf.lshr1724, 1
  %tobool1726 = icmp ne i32 %bf.clear1725, 0
  br i1 %tobool1726, label %if.end.1732, label %if.then.1727

if.then.1727:                                     ; preds = %land.lhs.true.1718
  %860 = load %union.tree_node*, %union.tree_node** %elem1700, align 8
  %list1728 = bitcast %union.tree_node* %860 to %struct.tree_list*
  %value1729 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1728, i32 0, i32 2
  %861 = load %union.tree_node*, %union.tree_node** %value1729, align 8
  %call1730 = call %union.tree_node* @fold(%union.tree_node* %861)
  %862 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %863 = load i32, i32* %tmode.addr, align 4
  %864 = load i32, i32* %modifier.addr, align 4
  %call1731 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call1730, %struct.rtx_def* %862, i32 %863, i32 %864)
  store %struct.rtx_def* %call1731, %struct.rtx_def** %retval
  br label %return

if.end.1732:                                      ; preds = %land.lhs.true.1718, %for.end.1716
  br label %if.end.1781

if.else.1733:                                     ; preds = %if.then.1690
  %865 = load %union.tree_node*, %union.tree_node** %init, align 8
  %common1734 = bitcast %union.tree_node* %865 to %struct.tree_common*
  %code1735 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1734, i32 0, i32 2
  %bf.load1736 = load i32, i32* %code1735, align 8
  %bf.clear1737 = and i32 %bf.load1736, 255
  %cmp1738 = icmp eq i32 %bf.clear1737, 29
  br i1 %cmp1738, label %land.lhs.true.1740, label %if.end.1780

land.lhs.true.1740:                               ; preds = %if.else.1733
  %866 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %867 = load %union.tree_node*, %union.tree_node** %init, align 8
  %string1741 = bitcast %union.tree_node* %867 to %struct.tree_string*
  %length1742 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1741, i32 0, i32 2
  %868 = load i32, i32* %length1742, align 4
  %conv1743 = sext i32 %868 to i64
  %call1744 = call i32 @compare_tree_int(%union.tree_node* %866, i64 %conv1743)
  %cmp1745 = icmp sgt i32 0, %call1744
  br i1 %cmp1745, label %if.then.1747, label %if.end.1780

if.then.1747:                                     ; preds = %land.lhs.true.1740
  %869 = load %union.tree_node*, %union.tree_node** %init, align 8
  %common1749 = bitcast %union.tree_node* %869 to %struct.tree_common*
  %type1750 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1749, i32 0, i32 1
  %870 = load %union.tree_node*, %union.tree_node** %type1750, align 8
  %common1751 = bitcast %union.tree_node* %870 to %struct.tree_common*
  %type1752 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1751, i32 0, i32 1
  %871 = load %union.tree_node*, %union.tree_node** %type1752, align 8
  store %union.tree_node* %871, %union.tree_node** %type1748, align 8
  %872 = load %union.tree_node*, %union.tree_node** %type1748, align 8
  %type1754 = bitcast %union.tree_node* %872 to %struct.tree_type*
  %mode1755 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1754, i32 0, i32 6
  %bf.load1756 = load i32, i32* %mode1755, align 4
  %bf.lshr1757 = lshr i32 %bf.load1756, 9
  %bf.clear1758 = and i32 %bf.lshr1757, 127
  store i32 %bf.clear1758, i32* %mode1753, align 4
  %873 = load i32, i32* %mode1753, align 4
  %idxprom1759 = sext i32 %873 to i64
  %arrayidx1760 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom1759
  %874 = load i32, i32* %arrayidx1760, align 4
  %cmp1761 = icmp eq i32 %874, 1
  br i1 %cmp1761, label %land.lhs.true.1763, label %if.end.1779

land.lhs.true.1763:                               ; preds = %if.then.1747
  %875 = load i32, i32* %mode1753, align 4
  %idxprom1764 = sext i32 %875 to i64
  %arrayidx1765 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom1764
  %876 = load i8, i8* %arrayidx1765, align 1
  %conv1766 = zext i8 %876 to i32
  %cmp1767 = icmp eq i32 %conv1766, 1
  br i1 %cmp1767, label %if.then.1769, label %if.end.1779

if.then.1769:                                     ; preds = %land.lhs.true.1763
  %877 = load %union.tree_node*, %union.tree_node** %index1513, align 8
  %int_cst1770 = bitcast %union.tree_node* %877 to %struct.tree_int_cst*
  %int_cst1771 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1770, i32 0, i32 2
  %low1772 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst1771, i32 0, i32 0
  %878 = load i64, i64* %low1772, align 8
  %879 = load %union.tree_node*, %union.tree_node** %init, align 8
  %string1773 = bitcast %union.tree_node* %879 to %struct.tree_string*
  %pointer1774 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1773, i32 0, i32 3
  %880 = load i8*, i8** %pointer1774, align 8
  %arrayidx1775 = getelementptr inbounds i8, i8* %880, i64 %878
  %881 = load i8, i8* %arrayidx1775, align 1
  %conv1776 = sext i8 %881 to i64
  %882 = load i32, i32* %mode1753, align 4
  %call1777 = call i64 @trunc_int_for_mode(i64 %conv1776, i32 %882)
  %call1778 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call1777)
  store %struct.rtx_def* %call1778, %struct.rtx_def** %retval
  br label %return

if.end.1779:                                      ; preds = %land.lhs.true.1763, %if.then.1747
  br label %if.end.1780

if.end.1780:                                      ; preds = %if.end.1779, %land.lhs.true.1740, %if.else.1733
  br label %if.end.1781

if.end.1781:                                      ; preds = %if.end.1780, %if.end.1732
  br label %if.end.1782

if.end.1782:                                      ; preds = %if.end.1781, %if.then.1683
  br label %if.end.1783

if.end.1783:                                      ; preds = %if.end.1782, %land.lhs.true.1674, %land.lhs.true.1670, %land.lhs.true.1663, %land.lhs.true.1656, %land.lhs.true.1649, %land.lhs.true.1646, %land.lhs.true.1643, %if.else.1640
  br label %if.end.1784

if.end.1784:                                      ; preds = %if.end.1783, %if.end.1639
  br label %sw.bb.1785

sw.bb.1785:                                       ; preds = %if.end.185, %if.end.185, %if.end.185, %if.end.1784
  %883 = load i32, i32* %code, align 4
  %cmp1786 = icmp eq i32 %883, 39
  br i1 %cmp1786, label %land.lhs.true.1788, label %if.end.1916

land.lhs.true.1788:                               ; preds = %sw.bb.1785
  %884 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1789 = bitcast %union.tree_node* %884 to %struct.tree_exp*
  %operands1790 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1789, i32 0, i32 2
  %arrayidx1791 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1790, i32 0, i64 0
  %885 = load %union.tree_node*, %union.tree_node** %arrayidx1791, align 8
  %common1792 = bitcast %union.tree_node* %885 to %struct.tree_common*
  %code1793 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1792, i32 0, i32 2
  %bf.load1794 = load i32, i32* %code1793, align 8
  %bf.clear1795 = and i32 %bf.load1794, 255
  %cmp1796 = icmp eq i32 %bf.clear1795, 46
  br i1 %cmp1796, label %land.lhs.true.1798, label %if.end.1916

land.lhs.true.1798:                               ; preds = %land.lhs.true.1788
  %886 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1799 = bitcast %union.tree_node* %886 to %struct.tree_exp*
  %operands1800 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1799, i32 0, i32 2
  %arrayidx1801 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1800, i32 0, i64 0
  %887 = load %union.tree_node*, %union.tree_node** %arrayidx1801, align 8
  %real_cst1802 = bitcast %union.tree_node* %887 to %struct.tree_real_cst*
  %rtl1803 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst1802, i32 0, i32 1
  %888 = load %struct.rtx_def*, %struct.rtx_def** %rtl1803, align 8
  %cmp1804 = icmp eq %struct.rtx_def* %888, null
  br i1 %cmp1804, label %if.then.1806, label %if.end.1916

if.then.1806:                                     ; preds = %land.lhs.true.1798
  %889 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1808 = bitcast %union.tree_node* %889 to %struct.tree_exp*
  %operands1809 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1808, i32 0, i32 2
  %arrayidx1810 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1809, i32 0, i64 0
  %890 = load %union.tree_node*, %union.tree_node** %arrayidx1810, align 8
  %exp1811 = bitcast %union.tree_node* %890 to %struct.tree_exp*
  %operands1812 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1811, i32 0, i32 2
  %arrayidx1813 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1812, i32 0, i64 1
  %891 = load %union.tree_node*, %union.tree_node** %arrayidx1813, align 8
  store %union.tree_node* %891, %union.tree_node** %elt1807, align 8
  br label %for.cond.1814

for.cond.1814:                                    ; preds = %for.inc.1912, %if.then.1806
  %892 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %tobool1815 = icmp ne %union.tree_node* %892, null
  br i1 %tobool1815, label %for.body.1816, label %for.end.1915

for.body.1816:                                    ; preds = %for.cond.1814
  %893 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1817 = bitcast %union.tree_node* %893 to %struct.tree_list*
  %purpose1818 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1817, i32 0, i32 1
  %894 = load %union.tree_node*, %union.tree_node** %purpose1818, align 8
  %895 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1819 = bitcast %union.tree_node* %895 to %struct.tree_exp*
  %operands1820 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1819, i32 0, i32 2
  %arrayidx1821 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1820, i32 0, i64 1
  %896 = load %union.tree_node*, %union.tree_node** %arrayidx1821, align 8
  %cmp1822 = icmp eq %union.tree_node* %894, %896
  br i1 %cmp1822, label %land.lhs.true.1824, label %if.end.1911

land.lhs.true.1824:                               ; preds = %for.body.1816
  %897 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1825 = bitcast %union.tree_node* %897 to %struct.tree_list*
  %purpose1826 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1825, i32 0, i32 1
  %898 = load %union.tree_node*, %union.tree_node** %purpose1826, align 8
  %decl1827 = bitcast %union.tree_node* %898 to %struct.tree_decl*
  %bit_field_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1827, i32 0, i32 5
  %899 = bitcast i48* %bit_field_flag to i64*
  %bf.load1828 = load i64, i64* %899, align 8
  %bf.lshr1829 = lshr i64 %bf.load1828, 12
  %bf.clear1830 = and i64 %bf.lshr1829, 1
  %bf.cast1831 = trunc i64 %bf.clear1830 to i32
  %tobool1832 = icmp ne i32 %bf.cast1831, 0
  br i1 %tobool1832, label %lor.lhs.false.1833, label %if.then.1858

lor.lhs.false.1833:                               ; preds = %land.lhs.true.1824
  %900 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1834 = bitcast %union.tree_node* %900 to %struct.tree_list*
  %purpose1835 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1834, i32 0, i32 1
  %901 = load %union.tree_node*, %union.tree_node** %purpose1835, align 8
  %decl1836 = bitcast %union.tree_node* %901 to %struct.tree_decl*
  %mode1837 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1836, i32 0, i32 5
  %902 = bitcast i48* %mode1837 to i64*
  %bf.load1838 = load i64, i64* %902, align 8
  %bf.clear1839 = and i64 %bf.load1838, 255
  %bf.cast1840 = trunc i64 %bf.clear1839 to i32
  %idxprom1841 = sext i32 %bf.cast1840 to i64
  %arrayidx1842 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom1841
  %903 = load i32, i32* %arrayidx1842, align 4
  %cmp1843 = icmp eq i32 %903, 1
  br i1 %cmp1843, label %land.lhs.true.1845, label %if.end.1911

land.lhs.true.1845:                               ; preds = %lor.lhs.false.1833
  %904 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1846 = bitcast %union.tree_node* %904 to %struct.tree_list*
  %purpose1847 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1846, i32 0, i32 1
  %905 = load %union.tree_node*, %union.tree_node** %purpose1847, align 8
  %decl1848 = bitcast %union.tree_node* %905 to %struct.tree_decl*
  %mode1849 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1848, i32 0, i32 5
  %906 = bitcast i48* %mode1849 to i64*
  %bf.load1850 = load i64, i64* %906, align 8
  %bf.clear1851 = and i64 %bf.load1850, 255
  %bf.cast1852 = trunc i64 %bf.clear1851 to i32
  %idxprom1853 = sext i32 %bf.cast1852 to i64
  %arrayidx1854 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom1853
  %907 = load i16, i16* %arrayidx1854, align 2
  %conv1855 = zext i16 %907 to i32
  %cmp1856 = icmp sle i32 %conv1855, 64
  br i1 %cmp1856, label %if.then.1858, label %if.end.1911

if.then.1858:                                     ; preds = %land.lhs.true.1845, %land.lhs.true.1824
  %908 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1859 = bitcast %union.tree_node* %908 to %struct.tree_list*
  %value1860 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1859, i32 0, i32 2
  %909 = load %union.tree_node*, %union.tree_node** %value1860, align 8
  %910 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %911 = load i32, i32* %tmode.addr, align 4
  %912 = load i32, i32* %modifier.addr, align 4
  %call1861 = call %struct.rtx_def* @expand_expr(%union.tree_node* %909, %struct.rtx_def* %910, i32 %911, i32 %912)
  store %struct.rtx_def* %call1861, %struct.rtx_def** %op0, align 8
  %913 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1862 = bitcast %union.tree_node* %913 to %struct.tree_list*
  %purpose1863 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1862, i32 0, i32 1
  %914 = load %union.tree_node*, %union.tree_node** %purpose1863, align 8
  %decl1864 = bitcast %union.tree_node* %914 to %struct.tree_decl*
  %bit_field_flag1865 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1864, i32 0, i32 5
  %915 = bitcast i48* %bit_field_flag1865 to i64*
  %bf.load1866 = load i64, i64* %915, align 8
  %bf.lshr1867 = lshr i64 %bf.load1866, 12
  %bf.clear1868 = and i64 %bf.lshr1867, 1
  %bf.cast1869 = trunc i64 %bf.clear1868 to i32
  %tobool1870 = icmp ne i32 %bf.cast1869, 0
  br i1 %tobool1870, label %if.then.1871, label %if.end.1910

if.then.1871:                                     ; preds = %if.then.1858
  %916 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1872 = bitcast %union.tree_node* %916 to %struct.tree_list*
  %purpose1873 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1872, i32 0, i32 1
  %917 = load %union.tree_node*, %union.tree_node** %purpose1873, align 8
  %decl1874 = bitcast %union.tree_node* %917 to %struct.tree_decl*
  %size1875 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1874, i32 0, i32 4
  %918 = load %union.tree_node*, %union.tree_node** %size1875, align 8
  %int_cst1876 = bitcast %union.tree_node* %918 to %struct.tree_int_cst*
  %int_cst1877 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst1876, i32 0, i32 2
  %low1878 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst1877, i32 0, i32 0
  %919 = load i64, i64* %low1878, align 8
  store i64 %919, i64* %bitsize, align 8
  %920 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1879 = bitcast %union.tree_node* %920 to %struct.tree_list*
  %purpose1880 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1879, i32 0, i32 1
  %921 = load %union.tree_node*, %union.tree_node** %purpose1880, align 8
  %common1881 = bitcast %union.tree_node* %921 to %struct.tree_common*
  %type1882 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1881, i32 0, i32 1
  %922 = load %union.tree_node*, %union.tree_node** %type1882, align 8
  %type1883 = bitcast %union.tree_node* %922 to %struct.tree_type*
  %mode1884 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1883, i32 0, i32 6
  %bf.load1885 = load i32, i32* %mode1884, align 4
  %bf.lshr1886 = lshr i32 %bf.load1885, 9
  %bf.clear1887 = and i32 %bf.lshr1886, 127
  store i32 %bf.clear1887, i32* %imode, align 4
  %923 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %list1888 = bitcast %union.tree_node* %923 to %struct.tree_list*
  %purpose1889 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1888, i32 0, i32 1
  %924 = load %union.tree_node*, %union.tree_node** %purpose1889, align 8
  %common1890 = bitcast %union.tree_node* %924 to %struct.tree_common*
  %type1891 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1890, i32 0, i32 1
  %925 = load %union.tree_node*, %union.tree_node** %type1891, align 8
  %common1892 = bitcast %union.tree_node* %925 to %struct.tree_common*
  %unsigned_flag1893 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1892, i32 0, i32 2
  %bf.load1894 = load i32, i32* %unsigned_flag1893, align 8
  %bf.lshr1895 = lshr i32 %bf.load1894, 13
  %bf.clear1896 = and i32 %bf.lshr1895, 1
  %tobool1897 = icmp ne i32 %bf.clear1896, 0
  br i1 %tobool1897, label %if.then.1898, label %if.else.1901

if.then.1898:                                     ; preds = %if.then.1871
  %926 = load i64, i64* %bitsize, align 8
  %shl = shl i64 1, %926
  %sub = sub nsw i64 %shl, 1
  %call1899 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub)
  store %struct.rtx_def* %call1899, %struct.rtx_def** %op1, align 8
  %927 = load i32, i32* %imode, align 4
  %928 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %929 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %930 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call1900 = call %struct.rtx_def* @expand_and(i32 %927, %struct.rtx_def* %928, %struct.rtx_def* %929, %struct.rtx_def* %930)
  store %struct.rtx_def* %call1900, %struct.rtx_def** %op0, align 8
  br label %if.end.1909

if.else.1901:                                     ; preds = %if.then.1871
  %931 = load i32, i32* %imode, align 4
  %idxprom1902 = sext i32 %931 to i64
  %arrayidx1903 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom1902
  %932 = load i16, i16* %arrayidx1903, align 2
  %conv1904 = zext i16 %932 to i64
  %933 = load i64, i64* %bitsize, align 8
  %sub1905 = sub nsw i64 %conv1904, %933
  %call1906 = call %union.tree_node* @build_int_2_wide(i64 %sub1905, i64 0)
  store %union.tree_node* %call1906, %union.tree_node** %count, align 8
  %934 = load i32, i32* %imode, align 4
  %935 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %936 = load %union.tree_node*, %union.tree_node** %count, align 8
  %937 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call1907 = call %struct.rtx_def* @expand_shift(i32 82, i32 %934, %struct.rtx_def* %935, %union.tree_node* %936, %struct.rtx_def* %937, i32 0)
  store %struct.rtx_def* %call1907, %struct.rtx_def** %op0, align 8
  %938 = load i32, i32* %imode, align 4
  %939 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %940 = load %union.tree_node*, %union.tree_node** %count, align 8
  %941 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call1908 = call %struct.rtx_def* @expand_shift(i32 83, i32 %938, %struct.rtx_def* %939, %union.tree_node* %940, %struct.rtx_def* %941, i32 0)
  store %struct.rtx_def* %call1908, %struct.rtx_def** %op0, align 8
  br label %if.end.1909

if.end.1909:                                      ; preds = %if.else.1901, %if.then.1898
  br label %if.end.1910

if.end.1910:                                      ; preds = %if.end.1909, %if.then.1858
  %942 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %942, %struct.rtx_def** %retval
  br label %return

if.end.1911:                                      ; preds = %land.lhs.true.1845, %lor.lhs.false.1833, %for.body.1816
  br label %for.inc.1912

for.inc.1912:                                     ; preds = %if.end.1911
  %943 = load %union.tree_node*, %union.tree_node** %elt1807, align 8
  %common1913 = bitcast %union.tree_node* %943 to %struct.tree_common*
  %chain1914 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1913, i32 0, i32 0
  %944 = load %union.tree_node*, %union.tree_node** %chain1914, align 8
  store %union.tree_node* %944, %union.tree_node** %elt1807, align 8
  br label %for.cond.1814

for.end.1915:                                     ; preds = %for.cond.1814
  br label %if.end.1916

if.end.1916:                                      ; preds = %for.end.1915, %land.lhs.true.1798, %land.lhs.true.1788, %sw.bb.1785
  store i32 0, i32* %volatilep, align 4
  %945 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call1918 = call %union.tree_node* @get_inner_reference(%union.tree_node* %945, i64* %bitsize1917, i64* %bitpos, %union.tree_node** %offset, i32* %mode1, i32* %unsignedp, i32* %volatilep)
  store %union.tree_node* %call1918, %union.tree_node** %tem, align 8
  %946 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %947 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %cmp1919 = icmp eq %union.tree_node* %946, %947
  br i1 %cmp1919, label %if.then.1921, label %if.end.1922

if.then.1921:                                     ; preds = %if.end.1916
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6877, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.1922:                                      ; preds = %if.end.1916
  %948 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %949 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common1923 = bitcast %union.tree_node* %949 to %struct.tree_common*
  %type1924 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1923, i32 0, i32 1
  %950 = load %union.tree_node*, %union.tree_node** %type1924, align 8
  %common1925 = bitcast %union.tree_node* %950 to %struct.tree_common*
  %code1926 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1925, i32 0, i32 2
  %bf.load1927 = load i32, i32* %code1926, align 8
  %bf.clear1928 = and i32 %bf.load1927, 255
  %cmp1929 = icmp eq i32 %bf.clear1928, 21
  br i1 %cmp1929, label %land.lhs.true.1931, label %cond.false.1943

land.lhs.true.1931:                               ; preds = %if.end.1922
  %951 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common1932 = bitcast %union.tree_node* %951 to %struct.tree_common*
  %type1933 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1932, i32 0, i32 1
  %952 = load %union.tree_node*, %union.tree_node** %type1933, align 8
  %type1934 = bitcast %union.tree_node* %952 to %struct.tree_type*
  %size1935 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1934, i32 0, i32 2
  %953 = load %union.tree_node*, %union.tree_node** %size1935, align 8
  %common1936 = bitcast %union.tree_node* %953 to %struct.tree_common*
  %code1937 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1936, i32 0, i32 2
  %bf.load1938 = load i32, i32* %code1937, align 8
  %bf.clear1939 = and i32 %bf.load1938, 255
  %cmp1940 = icmp ne i32 %bf.clear1939, 25
  br i1 %cmp1940, label %cond.true.1942, label %cond.false.1943

cond.true.1942:                                   ; preds = %land.lhs.true.1931
  %954 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  br label %cond.end.1944

cond.false.1943:                                  ; preds = %land.lhs.true.1931, %if.end.1922
  br label %cond.end.1944

cond.end.1944:                                    ; preds = %cond.false.1943, %cond.true.1942
  %cond1945 = phi %struct.rtx_def* [ %954, %cond.true.1942 ], [ null, %cond.false.1943 ]
  %955 = load i32, i32* %modifier.addr, align 4
  %cmp1946 = icmp eq i32 %955, 3
  br i1 %cmp1946, label %cond.true.1951, label %lor.lhs.false.1948

lor.lhs.false.1948:                               ; preds = %cond.end.1944
  %956 = load i32, i32* %modifier.addr, align 4
  %cmp1949 = icmp eq i32 %956, 2
  br i1 %cmp1949, label %cond.true.1951, label %cond.false.1952

cond.true.1951:                                   ; preds = %lor.lhs.false.1948, %cond.end.1944
  %957 = load i32, i32* %modifier.addr, align 4
  br label %cond.end.1953

cond.false.1952:                                  ; preds = %lor.lhs.false.1948
  br label %cond.end.1953

cond.end.1953:                                    ; preds = %cond.false.1952, %cond.true.1951
  %cond1954 = phi i32 [ %957, %cond.true.1951 ], [ 0, %cond.false.1952 ]
  %call1955 = call %struct.rtx_def* @expand_expr(%union.tree_node* %948, %struct.rtx_def* %cond1945, i32 0, i32 %cond1954)
  store %struct.rtx_def* %call1955, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %call1955, %struct.rtx_def** %orig_op0, align 8
  %958 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %959 = bitcast %struct.rtx_def* %958 to i32*
  %bf.load1956 = load i32, i32* %959, align 8
  %bf.clear1957 = and i32 %bf.load1956, 65535
  %cmp1958 = icmp eq i32 %bf.clear1957, 67
  br i1 %cmp1958, label %if.then.1995, label %lor.lhs.false.1960

lor.lhs.false.1960:                               ; preds = %cond.end.1953
  %960 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %961 = bitcast %struct.rtx_def* %960 to i32*
  %bf.load1961 = load i32, i32* %961, align 8
  %bf.clear1962 = and i32 %bf.load1961, 65535
  %cmp1963 = icmp eq i32 %bf.clear1962, 68
  br i1 %cmp1963, label %if.then.1995, label %lor.lhs.false.1965

lor.lhs.false.1965:                               ; preds = %lor.lhs.false.1960
  %962 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %963 = bitcast %struct.rtx_def* %962 to i32*
  %bf.load1966 = load i32, i32* %963, align 8
  %bf.clear1967 = and i32 %bf.load1966, 65535
  %cmp1968 = icmp eq i32 %bf.clear1967, 54
  br i1 %cmp1968, label %if.then.1995, label %lor.lhs.false.1970

lor.lhs.false.1970:                               ; preds = %lor.lhs.false.1965
  %964 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %965 = bitcast %struct.rtx_def* %964 to i32*
  %bf.load1971 = load i32, i32* %965, align 8
  %bf.clear1972 = and i32 %bf.load1971, 65535
  %cmp1973 = icmp eq i32 %bf.clear1972, 55
  br i1 %cmp1973, label %if.then.1995, label %lor.lhs.false.1975

lor.lhs.false.1975:                               ; preds = %lor.lhs.false.1970
  %966 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %967 = bitcast %struct.rtx_def* %966 to i32*
  %bf.load1976 = load i32, i32* %967, align 8
  %bf.clear1977 = and i32 %bf.load1976, 65535
  %cmp1978 = icmp eq i32 %bf.clear1977, 58
  br i1 %cmp1978, label %if.then.1995, label %lor.lhs.false.1980

lor.lhs.false.1980:                               ; preds = %lor.lhs.false.1975
  %968 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %969 = bitcast %struct.rtx_def* %968 to i32*
  %bf.load1981 = load i32, i32* %969, align 8
  %bf.clear1982 = and i32 %bf.load1981, 65535
  %cmp1983 = icmp eq i32 %bf.clear1982, 134
  br i1 %cmp1983, label %if.then.1995, label %lor.lhs.false.1985

lor.lhs.false.1985:                               ; preds = %lor.lhs.false.1980
  %970 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %971 = bitcast %struct.rtx_def* %970 to i32*
  %bf.load1986 = load i32, i32* %971, align 8
  %bf.clear1987 = and i32 %bf.load1986, 65535
  %cmp1988 = icmp eq i32 %bf.clear1987, 56
  br i1 %cmp1988, label %if.then.1995, label %lor.lhs.false.1990

lor.lhs.false.1990:                               ; preds = %lor.lhs.false.1985
  %972 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %973 = bitcast %struct.rtx_def* %972 to i32*
  %bf.load1991 = load i32, i32* %973, align 8
  %bf.clear1992 = and i32 %bf.load1991, 65535
  %cmp1993 = icmp eq i32 %bf.clear1992, 140
  br i1 %cmp1993, label %if.then.1995, label %if.end.2015

if.then.1995:                                     ; preds = %lor.lhs.false.1990, %lor.lhs.false.1985, %lor.lhs.false.1980, %lor.lhs.false.1975, %lor.lhs.false.1970, %lor.lhs.false.1965, %lor.lhs.false.1960, %cond.end.1953
  %974 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common1997 = bitcast %union.tree_node* %974 to %struct.tree_common*
  %type1998 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1997, i32 0, i32 1
  %975 = load %union.tree_node*, %union.tree_node** %type1998, align 8
  %type1999 = bitcast %union.tree_node* %975 to %struct.tree_type*
  %mode2000 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1999, i32 0, i32 6
  %bf.load2001 = load i32, i32* %mode2000, align 4
  %bf.lshr2002 = lshr i32 %bf.load2001, 9
  %bf.clear2003 = and i32 %bf.lshr2002, 127
  store i32 %bf.clear2003, i32* %mode1996, align 4
  %976 = load i32, i32* %mode1996, align 4
  %cmp2004 = icmp ne i32 %976, 51
  br i1 %cmp2004, label %land.lhs.true.2006, label %if.else.2011

land.lhs.true.2006:                               ; preds = %if.then.1995
  %977 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %cmp2007 = icmp eq %union.tree_node* %977, null
  br i1 %cmp2007, label %if.then.2009, label %if.else.2011

if.then.2009:                                     ; preds = %land.lhs.true.2006
  %978 = load i32, i32* %mode1996, align 4
  %979 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2010 = call %struct.rtx_def* @force_reg(i32 %978, %struct.rtx_def* %979)
  store %struct.rtx_def* %call2010, %struct.rtx_def** %op0, align 8
  br label %if.end.2014

if.else.2011:                                     ; preds = %land.lhs.true.2006, %if.then.1995
  %980 = load i32, i32* %mode1996, align 4
  %981 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2012 = call %struct.rtx_def* @force_const_mem(i32 %980, %struct.rtx_def* %981)
  %call2013 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %call2012)
  store %struct.rtx_def* %call2013, %struct.rtx_def** %op0, align 8
  br label %if.end.2014

if.end.2014:                                      ; preds = %if.else.2011, %if.then.2009
  br label %if.end.2015

if.end.2015:                                      ; preds = %if.end.2014, %lor.lhs.false.1990
  %982 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %cmp2016 = icmp ne %union.tree_node* %982, null
  br i1 %cmp2016, label %if.then.2018, label %if.end.2178

if.then.2018:                                     ; preds = %if.end.2015
  %983 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call2019 = call %struct.rtx_def* @expand_expr(%union.tree_node* %983, %struct.rtx_def* null, i32 0, i32 1)
  store %struct.rtx_def* %call2019, %struct.rtx_def** %offset_rtx, align 8
  %984 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %985 = bitcast %struct.rtx_def* %984 to i32*
  %bf.load2020 = load i32, i32* %985, align 8
  %bf.clear2021 = and i32 %bf.load2020, 65535
  %cmp2022 = icmp eq i32 %bf.clear2021, 61
  br i1 %cmp2022, label %if.then.2039, label %lor.lhs.false.2024

lor.lhs.false.2024:                               ; preds = %if.then.2018
  %986 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %987 = bitcast %struct.rtx_def* %986 to i32*
  %bf.load2025 = load i32, i32* %987, align 8
  %bf.clear2026 = and i32 %bf.load2025, 65535
  %cmp2027 = icmp eq i32 %bf.clear2026, 63
  br i1 %cmp2027, label %if.then.2039, label %lor.lhs.false.2029

lor.lhs.false.2029:                               ; preds = %lor.lhs.false.2024
  %988 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %989 = bitcast %struct.rtx_def* %988 to i32*
  %bf.load2030 = load i32, i32* %989, align 8
  %bf.clear2031 = and i32 %bf.load2030, 65535
  %cmp2032 = icmp eq i32 %bf.clear2031, 65
  br i1 %cmp2032, label %if.then.2039, label %lor.lhs.false.2034

lor.lhs.false.2034:                               ; preds = %lor.lhs.false.2029
  %990 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %991 = bitcast %struct.rtx_def* %990 to i32*
  %bf.load2035 = load i32, i32* %991, align 8
  %bf.clear2036 = and i32 %bf.load2035, 65535
  %cmp2037 = icmp eq i32 %bf.clear2036, 70
  br i1 %cmp2037, label %if.then.2039, label %if.end.2111

if.then.2039:                                     ; preds = %lor.lhs.false.2034, %lor.lhs.false.2029, %lor.lhs.false.2024, %if.then.2018
  %992 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2040 = bitcast %union.tree_node* %992 to %struct.tree_exp*
  %operands2041 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2040, i32 0, i32 2
  %arrayidx2042 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2041, i32 0, i64 0
  %993 = load %union.tree_node*, %union.tree_node** %arrayidx2042, align 8
  %common2043 = bitcast %union.tree_node* %993 to %struct.tree_common*
  %code2044 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2043, i32 0, i32 2
  %bf.load2045 = load i32, i32* %code2044, align 8
  %bf.clear2046 = and i32 %bf.load2045, 255
  %cmp2047 = icmp eq i32 %bf.clear2046, 118
  br i1 %cmp2047, label %if.then.2049, label %if.else.2059

if.then.2049:                                     ; preds = %if.then.2039
  %994 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2050 = bitcast %union.tree_node* %994 to %struct.tree_exp*
  %operands2051 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2050, i32 0, i32 2
  %arrayidx2052 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2051, i32 0, i64 0
  %995 = load %union.tree_node*, %union.tree_node** %arrayidx2052, align 8
  call void @put_var_into_stack(%union.tree_node* %995)
  %996 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2053 = bitcast %union.tree_node* %996 to %struct.tree_exp*
  %operands2054 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2053, i32 0, i32 2
  %arrayidx2055 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2054, i32 0, i64 0
  %997 = load %union.tree_node*, %union.tree_node** %arrayidx2055, align 8
  %exp2056 = bitcast %union.tree_node* %997 to %struct.tree_exp*
  %operands2057 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2056, i32 0, i32 2
  %arrayidx2058 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2057, i32 0, i64 2
  %998 = bitcast %union.tree_node** %arrayidx2058 to %struct.rtx_def**
  %999 = load %struct.rtx_def*, %struct.rtx_def** %998, align 8
  store %struct.rtx_def* %999, %struct.rtx_def** %op0, align 8
  br label %if.end.2110

if.else.2059:                                     ; preds = %if.then.2039
  %1000 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common2060 = bitcast %union.tree_node* %1000 to %struct.tree_common*
  %type2061 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2060, i32 0, i32 1
  %1001 = load %union.tree_node*, %union.tree_node** %type2061, align 8
  %1002 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common2062 = bitcast %union.tree_node* %1002 to %struct.tree_common*
  %type2063 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2062, i32 0, i32 1
  %1003 = load %union.tree_node*, %union.tree_node** %type2063, align 8
  %common2064 = bitcast %union.tree_node* %1003 to %struct.tree_common*
  %readonly_flag2065 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2064, i32 0, i32 2
  %bf.load2066 = load i32, i32* %readonly_flag2065, align 8
  %bf.lshr2067 = lshr i32 %bf.load2066, 12
  %bf.clear2068 = and i32 %bf.lshr2067, 1
  %mul2069 = mul nsw i32 %bf.clear2068, 1
  %1004 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common2070 = bitcast %union.tree_node* %1004 to %struct.tree_common*
  %type2071 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2070, i32 0, i32 1
  %1005 = load %union.tree_node*, %union.tree_node** %type2071, align 8
  %common2072 = bitcast %union.tree_node* %1005 to %struct.tree_common*
  %volatile_flag2073 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2072, i32 0, i32 2
  %bf.load2074 = load i32, i32* %volatile_flag2073, align 8
  %bf.lshr2075 = lshr i32 %bf.load2074, 11
  %bf.clear2076 = and i32 %bf.lshr2075, 1
  %mul2077 = mul nsw i32 %bf.clear2076, 2
  %or2078 = or i32 %mul2069, %mul2077
  %1006 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common2079 = bitcast %union.tree_node* %1006 to %struct.tree_common*
  %type2080 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2079, i32 0, i32 1
  %1007 = load %union.tree_node*, %union.tree_node** %type2080, align 8
  %type2081 = bitcast %union.tree_node* %1007 to %struct.tree_type*
  %restrict_flag2082 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2081, i32 0, i32 6
  %bf.load2083 = load i32, i32* %restrict_flag2082, align 4
  %bf.lshr2084 = lshr i32 %bf.load2083, 21
  %bf.clear2085 = and i32 %bf.lshr2084, 1
  %mul2086 = mul nsw i32 %bf.clear2085, 4
  %or2087 = or i32 %or2078, %mul2086
  %1008 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common2088 = bitcast %union.tree_node* %1008 to %struct.tree_common*
  %type2089 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2088, i32 0, i32 1
  %1009 = load %union.tree_node*, %union.tree_node** %type2089, align 8
  %common2090 = bitcast %union.tree_node* %1009 to %struct.tree_common*
  %code2091 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2090, i32 0, i32 2
  %bf.load2092 = load i32, i32* %code2091, align 8
  %bf.clear2093 = and i32 %bf.load2092, 255
  %cmp2094 = icmp eq i32 %bf.clear2093, 20
  br i1 %cmp2094, label %land.rhs.2096, label %land.end.2102

land.rhs.2096:                                    ; preds = %if.else.2059
  %1010 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common2097 = bitcast %union.tree_node* %1010 to %struct.tree_common*
  %type2098 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2097, i32 0, i32 1
  %1011 = load %union.tree_node*, %union.tree_node** %type2098, align 8
  %common2099 = bitcast %union.tree_node* %1011 to %struct.tree_common*
  %type2100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2099, i32 0, i32 1
  %1012 = load %union.tree_node*, %union.tree_node** %type2100, align 8
  %tobool2101 = icmp ne %union.tree_node* %1012, null
  br label %land.end.2102

land.end.2102:                                    ; preds = %land.rhs.2096, %if.else.2059
  %1013 = phi i1 [ false, %if.else.2059 ], [ %tobool2101, %land.rhs.2096 ]
  %land.ext2103 = zext i1 %1013 to i32
  %mul2104 = mul nsw i32 %land.ext2103, 8
  %or2105 = or i32 %or2087, %mul2104
  %or2106 = or i32 %or2105, 1
  %call2107 = call %union.tree_node* @build_qualified_type(%union.tree_node* %1001, i32 %or2106)
  store %union.tree_node* %call2107, %union.tree_node** %nt, align 8
  %1014 = load %union.tree_node*, %union.tree_node** %nt, align 8
  %call2108 = call %struct.rtx_def* @assign_temp(%union.tree_node* %1014, i32 1, i32 1, i32 1)
  store %struct.rtx_def* %call2108, %struct.rtx_def** %memloc, align 8
  %1015 = load %struct.rtx_def*, %struct.rtx_def** %memloc, align 8
  %1016 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2109 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1015, %struct.rtx_def* %1016)
  %1017 = load %struct.rtx_def*, %struct.rtx_def** %memloc, align 8
  store %struct.rtx_def* %1017, %struct.rtx_def** %op0, align 8
  br label %if.end.2110

if.end.2110:                                      ; preds = %land.end.2102, %if.then.2049
  br label %if.end.2111

if.end.2111:                                      ; preds = %if.end.2110, %lor.lhs.false.2034
  %1018 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1019 = bitcast %struct.rtx_def* %1018 to i32*
  %bf.load2112 = load i32, i32* %1019, align 8
  %bf.clear2113 = and i32 %bf.load2112, 65535
  %cmp2114 = icmp ne i32 %bf.clear2113, 66
  br i1 %cmp2114, label %if.then.2116, label %if.end.2117

if.then.2116:                                     ; preds = %if.end.2111
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6938, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.2117:                                      ; preds = %if.end.2111
  %1020 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %1021 = bitcast %struct.rtx_def* %1020 to i32*
  %bf.load2118 = load i32, i32* %1021, align 8
  %bf.lshr2119 = lshr i32 %bf.load2118, 16
  %bf.clear2120 = and i32 %bf.lshr2119, 255
  %1022 = load i32, i32* @ptr_mode, align 4
  %cmp2121 = icmp ne i32 %bf.clear2120, %1022
  br i1 %cmp2121, label %if.then.2123, label %if.end.2125

if.then.2123:                                     ; preds = %if.end.2117
  %1023 = load i32, i32* @ptr_mode, align 4
  %1024 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %call2124 = call %struct.rtx_def* @convert_to_mode(i32 %1023, %struct.rtx_def* %1024, i32 0)
  store %struct.rtx_def* %call2124, %struct.rtx_def** %offset_rtx, align 8
  br label %if.end.2125

if.end.2125:                                      ; preds = %if.then.2123, %if.end.2117
  %1025 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1026 = bitcast %struct.rtx_def* %1025 to i32*
  %bf.load2126 = load i32, i32* %1026, align 8
  %bf.clear2127 = and i32 %bf.load2126, 65535
  %cmp2128 = icmp eq i32 %bf.clear2127, 66
  br i1 %cmp2128, label %land.lhs.true.2130, label %if.end.2175

land.lhs.true.2130:                               ; preds = %if.end.2125
  %1027 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1028 = bitcast %struct.rtx_def* %1027 to i32*
  %bf.load2131 = load i32, i32* %1028, align 8
  %bf.lshr2132 = lshr i32 %bf.load2131, 16
  %bf.clear2133 = and i32 %bf.lshr2132, 255
  %cmp2134 = icmp eq i32 %bf.clear2133, 51
  br i1 %cmp2134, label %land.lhs.true.2136, label %if.end.2175

land.lhs.true.2136:                               ; preds = %land.lhs.true.2130
  %1029 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1029, i32 0, i32 1
  %arrayidx2138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2137, i32 0, i64 0
  %rtx2139 = bitcast %union.rtunion_def* %arrayidx2138 to %struct.rtx_def**
  %1030 = load %struct.rtx_def*, %struct.rtx_def** %rtx2139, align 8
  %1031 = bitcast %struct.rtx_def* %1030 to i32*
  %bf.load2140 = load i32, i32* %1031, align 8
  %bf.lshr2141 = lshr i32 %bf.load2140, 16
  %bf.clear2142 = and i32 %bf.lshr2141, 255
  %cmp2143 = icmp ne i32 %bf.clear2142, 0
  br i1 %cmp2143, label %land.lhs.true.2145, label %if.end.2175

land.lhs.true.2145:                               ; preds = %land.lhs.true.2136
  %1032 = load i64, i64* %bitsize1917, align 8
  %cmp2146 = icmp ne i64 %1032, 0
  br i1 %cmp2146, label %land.lhs.true.2148, label %if.end.2175

land.lhs.true.2148:                               ; preds = %land.lhs.true.2145
  %1033 = load i64, i64* %bitpos, align 8
  %1034 = load i64, i64* %bitsize1917, align 8
  %rem = srem i64 %1033, %1034
  %cmp2149 = icmp eq i64 %rem, 0
  br i1 %cmp2149, label %land.lhs.true.2151, label %if.end.2175

land.lhs.true.2151:                               ; preds = %land.lhs.true.2148
  %1035 = load i64, i64* %bitsize1917, align 8
  %1036 = load i32, i32* %mode1, align 4
  %call2152 = call i32 @get_mode_alignment(i32 %1036)
  %conv2153 = zext i32 %call2152 to i64
  %rem2154 = srem i64 %1035, %conv2153
  %cmp2155 = icmp eq i64 %rem2154, 0
  br i1 %cmp2155, label %land.lhs.true.2157, label %if.end.2175

land.lhs.true.2157:                               ; preds = %land.lhs.true.2151
  %1037 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1037, i32 0, i32 1
  %arrayidx2159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2158, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx2159 to %struct.mem_attrs**
  %1038 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp2160 = icmp ne %struct.mem_attrs* %1038, null
  br i1 %cmp2160, label %cond.true.2162, label %cond.false.2167

cond.true.2162:                                   ; preds = %land.lhs.true.2157
  %1039 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1039, i32 0, i32 1
  %arrayidx2164 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2163, i32 0, i64 1
  %rtmem2165 = bitcast %union.rtunion_def* %arrayidx2164 to %struct.mem_attrs**
  %1040 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem2165, align 8
  %align2166 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %1040, i32 0, i32 4
  %1041 = load i32, i32* %align2166, align 4
  br label %cond.end.2168

cond.false.2167:                                  ; preds = %land.lhs.true.2157
  br label %cond.end.2168

cond.end.2168:                                    ; preds = %cond.false.2167, %cond.true.2162
  %cond2169 = phi i32 [ %1041, %cond.true.2162 ], [ 8, %cond.false.2167 ]
  %1042 = load i32, i32* %mode1, align 4
  %call2170 = call i32 @get_mode_alignment(i32 %1042)
  %cmp2171 = icmp eq i32 %cond2169, %call2170
  br i1 %cmp2171, label %if.then.2173, label %if.end.2175

if.then.2173:                                     ; preds = %cond.end.2168
  %1043 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1044 = load i32, i32* %mode1, align 4
  %1045 = load i64, i64* %bitpos, align 8
  %div = sdiv i64 %1045, 8
  %call2174 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1043, i32 %1044, i64 %div, i32 1, i32 1)
  store %struct.rtx_def* %call2174, %struct.rtx_def** %op0, align 8
  store i64 0, i64* %bitpos, align 8
  br label %if.end.2175

if.end.2175:                                      ; preds = %if.then.2173, %cond.end.2168, %land.lhs.true.2151, %land.lhs.true.2148, %land.lhs.true.2145, %land.lhs.true.2136, %land.lhs.true.2130, %if.end.2125
  %1046 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1047 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %1048 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call2176 = call i64 @highest_pow2_factor(%union.tree_node* %1048)
  %call2177 = call %struct.rtx_def* @offset_address(%struct.rtx_def* %1046, %struct.rtx_def* %1047, i64 %call2176)
  store %struct.rtx_def* %call2177, %struct.rtx_def** %op0, align 8
  br label %if.end.2178

if.end.2178:                                      ; preds = %if.end.2175, %if.end.2015
  %1049 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1050 = bitcast %struct.rtx_def* %1049 to i32*
  %bf.load2179 = load i32, i32* %1050, align 8
  %bf.clear2180 = and i32 %bf.load2179, 65535
  %cmp2181 = icmp eq i32 %bf.clear2180, 66
  br i1 %cmp2181, label %land.lhs.true.2183, label %if.end.2193

land.lhs.true.2183:                               ; preds = %if.end.2178
  %1051 = load i64, i64* %bitpos, align 8
  %cmp2184 = icmp eq i64 %1051, 0
  br i1 %cmp2184, label %land.lhs.true.2186, label %if.end.2193

land.lhs.true.2186:                               ; preds = %land.lhs.true.2183
  %1052 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %cmp2187 = icmp ne %union.tree_node* %1052, null
  br i1 %cmp2187, label %land.lhs.true.2189, label %if.end.2193

land.lhs.true.2189:                               ; preds = %land.lhs.true.2186
  %1053 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %1054 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %call2190 = call i32 @is_aligning_offset(%union.tree_node* %1053, %union.tree_node* %1054)
  %tobool2191 = icmp ne i32 %call2190, 0
  br i1 %tobool2191, label %if.then.2192, label %if.end.2193

if.then.2192:                                     ; preds = %land.lhs.true.2189
  %1055 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @set_mem_align(%struct.rtx_def* %1055, i32 128)
  br label %if.end.2193

if.end.2193:                                      ; preds = %if.then.2192, %land.lhs.true.2189, %land.lhs.true.2186, %land.lhs.true.2183, %if.end.2178
  %1056 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1057 = bitcast %struct.rtx_def* %1056 to i32*
  %bf.load2194 = load i32, i32* %1057, align 8
  %bf.clear2195 = and i32 %bf.load2194, 65535
  %cmp2196 = icmp eq i32 %bf.clear2195, 66
  br i1 %cmp2196, label %land.lhs.true.2198, label %if.end.2214

land.lhs.true.2198:                               ; preds = %if.end.2193
  %1058 = load i32, i32* %volatilep, align 4
  %tobool2199 = icmp ne i32 %1058, 0
  br i1 %tobool2199, label %land.lhs.true.2200, label %if.end.2214

land.lhs.true.2200:                               ; preds = %land.lhs.true.2198
  %1059 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1060 = bitcast %struct.rtx_def* %1059 to i32*
  %bf.load2201 = load i32, i32* %1060, align 8
  %bf.lshr2202 = lshr i32 %bf.load2201, 27
  %bf.clear2203 = and i32 %bf.lshr2202, 1
  %tobool2204 = icmp ne i32 %bf.clear2203, 0
  br i1 %tobool2204, label %if.end.2214, label %if.then.2205

if.then.2205:                                     ; preds = %land.lhs.true.2200
  %1061 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1062 = load %struct.rtx_def*, %struct.rtx_def** %orig_op0, align 8
  %cmp2206 = icmp eq %struct.rtx_def* %1061, %1062
  br i1 %cmp2206, label %if.then.2208, label %if.end.2210

if.then.2208:                                     ; preds = %if.then.2205
  %1063 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2209 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1063)
  store %struct.rtx_def* %call2209, %struct.rtx_def** %op0, align 8
  br label %if.end.2210

if.end.2210:                                      ; preds = %if.then.2208, %if.then.2205
  %1064 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1065 = bitcast %struct.rtx_def* %1064 to i32*
  %bf.load2211 = load i32, i32* %1065, align 8
  %bf.clear2212 = and i32 %bf.load2211, -134217729
  %bf.set2213 = or i32 %bf.clear2212, 134217728
  store i32 %bf.set2213, i32* %1065, align 8
  br label %if.end.2214

if.end.2214:                                      ; preds = %if.end.2210, %land.lhs.true.2200, %land.lhs.true.2198, %if.end.2193
  %1066 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1067 = bitcast %struct.rtx_def* %1066 to i32*
  %bf.load2215 = load i32, i32* %1067, align 8
  %bf.clear2216 = and i32 %bf.load2215, 65535
  %cmp2217 = icmp eq i32 %bf.clear2216, 65
  br i1 %cmp2217, label %if.then.2219, label %if.end.2233

if.then.2219:                                     ; preds = %if.end.2214
  %1068 = load i64, i64* %bitpos, align 8
  %cmp2220 = icmp ne i64 %1068, 0
  br i1 %cmp2220, label %if.then.2231, label %lor.lhs.false.2222

lor.lhs.false.2222:                               ; preds = %if.then.2219
  %1069 = load i64, i64* %bitsize1917, align 8
  %1070 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1071 = bitcast %struct.rtx_def* %1070 to i32*
  %bf.load2223 = load i32, i32* %1071, align 8
  %bf.lshr2224 = lshr i32 %bf.load2223, 16
  %bf.clear2225 = and i32 %bf.lshr2224, 255
  %idxprom2226 = sext i32 %bf.clear2225 to i64
  %arrayidx2227 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom2226
  %1072 = load i16, i16* %arrayidx2227, align 2
  %conv2228 = zext i16 %1072 to i64
  %cmp2229 = icmp ne i64 %1069, %conv2228
  br i1 %cmp2229, label %if.then.2231, label %if.end.2232

if.then.2231:                                     ; preds = %lor.lhs.false.2222, %if.then.2219
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 6987, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.2232:                                      ; preds = %lor.lhs.false.2222
  %1073 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1073, %struct.rtx_def** %retval
  br label %return

if.end.2233:                                      ; preds = %if.end.2214
  %1074 = load i32, i32* %mode1, align 4
  %cmp2234 = icmp eq i32 %1074, 0
  br i1 %cmp2234, label %if.then.2309, label %lor.lhs.false.2236

lor.lhs.false.2236:                               ; preds = %if.end.2233
  %1075 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1076 = bitcast %struct.rtx_def* %1075 to i32*
  %bf.load2237 = load i32, i32* %1076, align 8
  %bf.clear2238 = and i32 %bf.load2237, 65535
  %cmp2239 = icmp eq i32 %bf.clear2238, 61
  br i1 %cmp2239, label %if.then.2309, label %lor.lhs.false.2241

lor.lhs.false.2241:                               ; preds = %lor.lhs.false.2236
  %1077 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1078 = bitcast %struct.rtx_def* %1077 to i32*
  %bf.load2242 = load i32, i32* %1078, align 8
  %bf.clear2243 = and i32 %bf.load2242, 65535
  %cmp2244 = icmp eq i32 %bf.clear2243, 63
  br i1 %cmp2244, label %if.then.2309, label %lor.lhs.false.2246

lor.lhs.false.2246:                               ; preds = %lor.lhs.false.2241
  %1079 = load i32, i32* %mode1, align 4
  %cmp2247 = icmp ne i32 %1079, 51
  br i1 %cmp2247, label %land.lhs.true.2249, label %lor.lhs.false.2269

land.lhs.true.2249:                               ; preds = %lor.lhs.false.2246
  %1080 = load i32, i32* %mode1, align 4
  %idxprom2250 = sext i32 %1080 to i64
  %arrayidx2251 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_load, i32 0, i64 %idxprom2250
  %1081 = load i8, i8* %arrayidx2251, align 1
  %tobool2252 = icmp ne i8 %1081, 0
  br i1 %tobool2252, label %lor.lhs.false.2269, label %land.lhs.true.2253

land.lhs.true.2253:                               ; preds = %land.lhs.true.2249
  %1082 = load i32, i32* %mode, align 4
  %idxprom2254 = sext i32 %1082 to i64
  %arrayidx2255 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom2254
  %1083 = load i32, i32* %arrayidx2255, align 4
  %cmp2256 = icmp ne i32 %1083, 5
  br i1 %cmp2256, label %land.lhs.true.2258, label %lor.lhs.false.2269

land.lhs.true.2258:                               ; preds = %land.lhs.true.2253
  %1084 = load i32, i32* %mode, align 4
  %idxprom2259 = sext i32 %1084 to i64
  %arrayidx2260 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom2259
  %1085 = load i32, i32* %arrayidx2260, align 4
  %cmp2261 = icmp ne i32 %1085, 6
  br i1 %cmp2261, label %land.lhs.true.2263, label %lor.lhs.false.2269

land.lhs.true.2263:                               ; preds = %land.lhs.true.2258
  %1086 = load i32, i32* %modifier.addr, align 4
  %cmp2264 = icmp ne i32 %1086, 2
  br i1 %cmp2264, label %land.lhs.true.2266, label %lor.lhs.false.2269

land.lhs.true.2266:                               ; preds = %land.lhs.true.2263
  %1087 = load i32, i32* %modifier.addr, align 4
  %cmp2267 = icmp ne i32 %1087, 3
  br i1 %cmp2267, label %if.then.2309, label %lor.lhs.false.2269

lor.lhs.false.2269:                               ; preds = %land.lhs.true.2266, %land.lhs.true.2263, %land.lhs.true.2258, %land.lhs.true.2253, %land.lhs.true.2249, %lor.lhs.false.2246
  %1088 = load i32, i32* %mode1, align 4
  %cmp2270 = icmp ne i32 %1088, 51
  br i1 %cmp2270, label %land.lhs.true.2272, label %lor.lhs.false.2287

land.lhs.true.2272:                               ; preds = %lor.lhs.false.2269
  br i1 false, label %land.lhs.true.2273, label %lor.lhs.false.2287

land.lhs.true.2273:                               ; preds = %land.lhs.true.2272
  %1089 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common2274 = bitcast %union.tree_node* %1089 to %struct.tree_common*
  %type2275 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2274, i32 0, i32 1
  %1090 = load %union.tree_node*, %union.tree_node** %type2275, align 8
  %type2276 = bitcast %union.tree_node* %1090 to %struct.tree_type*
  %align2277 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2276, i32 0, i32 7
  %1091 = load i32, i32* %align2277, align 4
  %1092 = load i32, i32* %mode, align 4
  %call2278 = call i32 @get_mode_alignment(i32 %1092)
  %cmp2279 = icmp ult i32 %1091, %call2278
  br i1 %cmp2279, label %if.then.2309, label %lor.lhs.false.2281

lor.lhs.false.2281:                               ; preds = %land.lhs.true.2273
  %1093 = load i64, i64* %bitpos, align 8
  %1094 = load i32, i32* %mode, align 4
  %call2282 = call i32 @get_mode_alignment(i32 %1094)
  %conv2283 = zext i32 %call2282 to i64
  %rem2284 = srem i64 %1093, %conv2283
  %cmp2285 = icmp ne i64 %rem2284, 0
  br i1 %cmp2285, label %if.then.2309, label %lor.lhs.false.2287

lor.lhs.false.2287:                               ; preds = %lor.lhs.false.2281, %land.lhs.true.2272, %lor.lhs.false.2269
  %1095 = load i64, i64* %bitsize1917, align 8
  %cmp2288 = icmp sge i64 %1095, 0
  br i1 %cmp2288, label %land.lhs.true.2290, label %if.end.2451

land.lhs.true.2290:                               ; preds = %lor.lhs.false.2287
  %1096 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common2291 = bitcast %union.tree_node* %1096 to %struct.tree_common*
  %type2292 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2291, i32 0, i32 1
  %1097 = load %union.tree_node*, %union.tree_node** %type2292, align 8
  %type2293 = bitcast %union.tree_node* %1097 to %struct.tree_type*
  %size2294 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2293, i32 0, i32 2
  %1098 = load %union.tree_node*, %union.tree_node** %size2294, align 8
  %common2295 = bitcast %union.tree_node* %1098 to %struct.tree_common*
  %code2296 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2295, i32 0, i32 2
  %bf.load2297 = load i32, i32* %code2296, align 8
  %bf.clear2298 = and i32 %bf.load2297, 255
  %cmp2299 = icmp eq i32 %bf.clear2298, 25
  br i1 %cmp2299, label %land.lhs.true.2301, label %if.end.2451

land.lhs.true.2301:                               ; preds = %land.lhs.true.2290
  %1099 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common2302 = bitcast %union.tree_node* %1099 to %struct.tree_common*
  %type2303 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2302, i32 0, i32 1
  %1100 = load %union.tree_node*, %union.tree_node** %type2303, align 8
  %type2304 = bitcast %union.tree_node* %1100 to %struct.tree_type*
  %size2305 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2304, i32 0, i32 2
  %1101 = load %union.tree_node*, %union.tree_node** %size2305, align 8
  %1102 = load i64, i64* %bitsize1917, align 8
  %call2306 = call i32 @compare_tree_int(%union.tree_node* %1101, i64 %1102)
  %cmp2307 = icmp ne i32 0, %call2306
  br i1 %cmp2307, label %if.then.2309, label %if.end.2451

if.then.2309:                                     ; preds = %land.lhs.true.2301, %lor.lhs.false.2281, %land.lhs.true.2273, %land.lhs.true.2266, %lor.lhs.false.2241, %lor.lhs.false.2236, %if.end.2233
  %1103 = load i32, i32* %mode, align 4
  store i32 %1103, i32* %ext_mode, align 4
  %1104 = load i32, i32* %ext_mode, align 4
  %cmp2310 = icmp eq i32 %1104, 51
  br i1 %cmp2310, label %land.lhs.true.2312, label %if.end.2332

land.lhs.true.2312:                               ; preds = %if.then.2309
  %1105 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp2313 = icmp ne %struct.rtx_def* %1105, null
  br i1 %cmp2313, label %land.lhs.true.2315, label %if.then.2329

land.lhs.true.2315:                               ; preds = %land.lhs.true.2312
  %1106 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1107 = bitcast %struct.rtx_def* %1106 to i32*
  %bf.load2316 = load i32, i32* %1107, align 8
  %bf.clear2317 = and i32 %bf.load2316, 65535
  %cmp2318 = icmp eq i32 %bf.clear2317, 66
  br i1 %cmp2318, label %land.lhs.true.2320, label %if.then.2329

land.lhs.true.2320:                               ; preds = %land.lhs.true.2315
  %1108 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1109 = bitcast %struct.rtx_def* %1108 to i32*
  %bf.load2321 = load i32, i32* %1109, align 8
  %bf.clear2322 = and i32 %bf.load2321, 65535
  %cmp2323 = icmp eq i32 %bf.clear2322, 66
  br i1 %cmp2323, label %land.lhs.true.2325, label %if.then.2329

land.lhs.true.2325:                               ; preds = %land.lhs.true.2320
  %1110 = load i64, i64* %bitpos, align 8
  %rem2326 = srem i64 %1110, 8
  %cmp2327 = icmp eq i64 %rem2326, 0
  br i1 %cmp2327, label %if.end.2332, label %if.then.2329

if.then.2329:                                     ; preds = %land.lhs.true.2325, %land.lhs.true.2320, %land.lhs.true.2315, %land.lhs.true.2312
  %1111 = load i64, i64* %bitsize1917, align 8
  %conv2330 = trunc i64 %1111 to i32
  %call2331 = call i32 @mode_for_size(i32 %conv2330, i32 1, i32 1)
  store i32 %call2331, i32* %ext_mode, align 4
  br label %if.end.2332

if.end.2332:                                      ; preds = %if.then.2329, %land.lhs.true.2325, %if.then.2309
  %1112 = load i32, i32* %ext_mode, align 4
  %cmp2333 = icmp eq i32 %1112, 51
  br i1 %cmp2333, label %if.then.2335, label %if.end.2365

if.then.2335:                                     ; preds = %if.end.2332
  %1113 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1114 = bitcast %struct.rtx_def* %1113 to i32*
  %bf.load2336 = load i32, i32* %1114, align 8
  %bf.clear2337 = and i32 %bf.load2336, 65535
  %cmp2338 = icmp ne i32 %bf.clear2337, 66
  br i1 %cmp2338, label %if.then.2352, label %lor.lhs.false.2340

lor.lhs.false.2340:                               ; preds = %if.then.2335
  %1115 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp2341 = icmp ne %struct.rtx_def* %1115, null
  br i1 %cmp2341, label %land.lhs.true.2343, label %lor.lhs.false.2348

land.lhs.true.2343:                               ; preds = %lor.lhs.false.2340
  %1116 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1117 = bitcast %struct.rtx_def* %1116 to i32*
  %bf.load2344 = load i32, i32* %1117, align 8
  %bf.clear2345 = and i32 %bf.load2344, 65535
  %cmp2346 = icmp ne i32 %bf.clear2345, 66
  br i1 %cmp2346, label %if.then.2352, label %lor.lhs.false.2348

lor.lhs.false.2348:                               ; preds = %land.lhs.true.2343, %lor.lhs.false.2340
  %1118 = load i64, i64* %bitpos, align 8
  %rem2349 = srem i64 %1118, 8
  %cmp2350 = icmp ne i64 %rem2349, 0
  br i1 %cmp2350, label %if.then.2352, label %if.end.2353

if.then.2352:                                     ; preds = %lor.lhs.false.2348, %land.lhs.true.2343, %if.then.2335
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7035, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.2353:                                      ; preds = %lor.lhs.false.2348
  %1119 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1120 = load i64, i64* %bitpos, align 8
  %div2354 = sdiv i64 %1120, 8
  %call2355 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1119, i32 0, i64 %div2354, i32 1, i32 1)
  store %struct.rtx_def* %call2355, %struct.rtx_def** %op0, align 8
  %1121 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp2356 = icmp eq %struct.rtx_def* %1121, null
  br i1 %cmp2356, label %if.then.2358, label %if.end.2360

if.then.2358:                                     ; preds = %if.end.2353
  %1122 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call2359 = call %struct.rtx_def* @assign_temp(%union.tree_node* %1122, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %call2359, %struct.rtx_def** %target.addr, align 8
  br label %if.end.2360

if.end.2360:                                      ; preds = %if.then.2358, %if.end.2353
  %1123 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1124 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1125 = load i64, i64* %bitsize1917, align 8
  %add = add nsw i64 %1125, 8
  %sub2361 = sub nsw i64 %add, 1
  %div2362 = sdiv i64 %sub2361, 8
  %call2363 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %div2362)
  %call2364 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %1123, %struct.rtx_def* %1124, %struct.rtx_def* %call2363)
  %1126 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %1126, %struct.rtx_def** %retval
  br label %return

if.end.2365:                                      ; preds = %if.end.2332
  %1127 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2366 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %1127)
  store %struct.rtx_def* %call2366, %struct.rtx_def** %op0, align 8
  %1128 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1129 = bitcast %struct.rtx_def* %1128 to i32*
  %bf.load2367 = load i32, i32* %1129, align 8
  %bf.clear2368 = and i32 %bf.load2367, 65535
  %cmp2369 = icmp eq i32 %bf.clear2368, 66
  br i1 %cmp2369, label %land.lhs.true.2371, label %if.end.2396

land.lhs.true.2371:                               ; preds = %if.end.2365
  %1130 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2372 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1130, i32 0, i32 1
  %arrayidx2373 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2372, i32 0, i64 0
  %rtx2374 = bitcast %union.rtunion_def* %arrayidx2373 to %struct.rtx_def**
  %1131 = load %struct.rtx_def*, %struct.rtx_def** %rtx2374, align 8
  %1132 = bitcast %struct.rtx_def* %1131 to i32*
  %bf.load2375 = load i32, i32* %1132, align 8
  %bf.clear2376 = and i32 %bf.load2375, 65535
  %cmp2377 = icmp eq i32 %bf.clear2376, 61
  br i1 %cmp2377, label %if.then.2379, label %if.end.2396

if.then.2379:                                     ; preds = %land.lhs.true.2371
  %1133 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2380 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1133, i32 0, i32 1
  %arrayidx2381 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2380, i32 0, i64 0
  %rtx2382 = bitcast %union.rtunion_def* %arrayidx2381 to %struct.rtx_def**
  %1134 = load %struct.rtx_def*, %struct.rtx_def** %rtx2382, align 8
  %1135 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2383 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1135, i32 0, i32 1
  %arrayidx2384 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2383, i32 0, i64 1
  %rtmem2385 = bitcast %union.rtunion_def* %arrayidx2384 to %struct.mem_attrs**
  %1136 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem2385, align 8
  %cmp2386 = icmp ne %struct.mem_attrs* %1136, null
  br i1 %cmp2386, label %cond.true.2388, label %cond.false.2393

cond.true.2388:                                   ; preds = %if.then.2379
  %1137 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2389 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1137, i32 0, i32 1
  %arrayidx2390 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2389, i32 0, i64 1
  %rtmem2391 = bitcast %union.rtunion_def* %arrayidx2390 to %struct.mem_attrs**
  %1138 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem2391, align 8
  %align2392 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %1138, i32 0, i32 4
  %1139 = load i32, i32* %align2392, align 4
  br label %cond.end.2394

cond.false.2393:                                  ; preds = %if.then.2379
  br label %cond.end.2394

cond.end.2394:                                    ; preds = %cond.false.2393, %cond.true.2388
  %cond2395 = phi i32 [ %1139, %cond.true.2388 ], [ 8, %cond.false.2393 ]
  call void @mark_reg_pointer(%struct.rtx_def* %1134, i32 %cond2395)
  br label %if.end.2396

if.end.2396:                                      ; preds = %cond.end.2394, %land.lhs.true.2371, %if.end.2365
  %1140 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1141 = load i64, i64* %bitsize1917, align 8
  %1142 = load i64, i64* %bitpos, align 8
  %1143 = load i32, i32* %unsignedp, align 4
  %1144 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1145 = load i32, i32* %ext_mode, align 4
  %1146 = load i32, i32* %ext_mode, align 4
  %1147 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common2397 = bitcast %union.tree_node* %1147 to %struct.tree_common*
  %type2398 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2397, i32 0, i32 1
  %1148 = load %union.tree_node*, %union.tree_node** %type2398, align 8
  %call2399 = call i64 @int_size_in_bytes(%union.tree_node* %1148)
  %call2400 = call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %1140, i64 %1141, i64 %1142, i32 %1143, %struct.rtx_def* %1144, i32 %1145, i32 %1146, i64 %call2399)
  store %struct.rtx_def* %call2400, %struct.rtx_def** %op0, align 8
  %1149 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common2401 = bitcast %union.tree_node* %1149 to %struct.tree_common*
  %code2402 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2401, i32 0, i32 2
  %bf.load2403 = load i32, i32* %code2402, align 8
  %bf.clear2404 = and i32 %bf.load2403, 255
  %cmp2405 = icmp eq i32 %bf.clear2404, 20
  br i1 %cmp2405, label %land.lhs.true.2407, label %if.end.2438

land.lhs.true.2407:                               ; preds = %if.end.2396
  br i1 false, label %land.lhs.true.2408, label %if.end.2438

land.lhs.true.2408:                               ; preds = %land.lhs.true.2407
  %1150 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1151 = bitcast %struct.rtx_def* %1150 to i32*
  %bf.load2409 = load i32, i32* %1151, align 8
  %bf.lshr2410 = lshr i32 %bf.load2409, 16
  %bf.clear2411 = and i32 %bf.lshr2410, 255
  %idxprom2412 = sext i32 %bf.clear2411 to i64
  %arrayidx2413 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom2412
  %1152 = load i32, i32* %arrayidx2413, align 4
  %cmp2414 = icmp eq i32 %1152, 1
  br i1 %cmp2414, label %land.lhs.true.2416, label %if.end.2438

land.lhs.true.2416:                               ; preds = %land.lhs.true.2408
  %1153 = load i64, i64* %bitsize1917, align 8
  %1154 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1155 = bitcast %struct.rtx_def* %1154 to i32*
  %bf.load2417 = load i32, i32* %1155, align 8
  %bf.lshr2418 = lshr i32 %bf.load2417, 16
  %bf.clear2419 = and i32 %bf.lshr2418, 255
  %idxprom2420 = sext i32 %bf.clear2419 to i64
  %arrayidx2421 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom2420
  %1156 = load i16, i16* %arrayidx2421, align 2
  %conv2422 = zext i16 %1156 to i64
  %cmp2423 = icmp slt i64 %1153, %conv2422
  br i1 %cmp2423, label %if.then.2425, label %if.end.2438

if.then.2425:                                     ; preds = %land.lhs.true.2416
  %1157 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1158 = bitcast %struct.rtx_def* %1157 to i32*
  %bf.load2426 = load i32, i32* %1158, align 8
  %bf.lshr2427 = lshr i32 %bf.load2426, 16
  %bf.clear2428 = and i32 %bf.lshr2427, 255
  %1159 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1160 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1161 = bitcast %struct.rtx_def* %1160 to i32*
  %bf.load2429 = load i32, i32* %1161, align 8
  %bf.lshr2430 = lshr i32 %bf.load2429, 16
  %bf.clear2431 = and i32 %bf.lshr2430, 255
  %idxprom2432 = sext i32 %bf.clear2431 to i64
  %arrayidx2433 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom2432
  %1162 = load i16, i16* %arrayidx2433, align 2
  %conv2434 = zext i16 %1162 to i64
  %1163 = load i64, i64* %bitsize1917, align 8
  %sub2435 = sub nsw i64 %conv2434, %1163
  %call2436 = call %union.tree_node* @size_int_wide(i64 %sub2435, i32 0)
  %1164 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2437 = call %struct.rtx_def* @expand_shift(i32 82, i32 %bf.clear2428, %struct.rtx_def* %1159, %union.tree_node* %call2436, %struct.rtx_def* %1164, i32 1)
  store %struct.rtx_def* %call2437, %struct.rtx_def** %op0, align 8
  br label %if.end.2438

if.end.2438:                                      ; preds = %if.then.2425, %land.lhs.true.2416, %land.lhs.true.2408, %land.lhs.true.2407, %if.end.2396
  %1165 = load i32, i32* %mode, align 4
  %cmp2439 = icmp eq i32 %1165, 51
  br i1 %cmp2439, label %if.then.2441, label %if.end.2450

if.then.2441:                                     ; preds = %if.end.2438
  %1166 = load i32, i32* %ext_mode, align 4
  %call2442 = call %union.tree_node* @type_for_mode(i32 %1166, i32 0)
  %call2443 = call %union.tree_node* @build_qualified_type(%union.tree_node* %call2442, i32 1)
  %call2444 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call2443, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %call2444, %struct.rtx_def** %new, align 8
  %1167 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %1168 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2445 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1167, %struct.rtx_def* %1168)
  %1169 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call2446 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1169)
  store %struct.rtx_def* %call2446, %struct.rtx_def** %op0, align 8
  %1170 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1171 = bitcast %struct.rtx_def* %1170 to i32*
  %bf.load2447 = load i32, i32* %1171, align 8
  %bf.clear2448 = and i32 %bf.load2447, -16711681
  %bf.set2449 = or i32 %bf.clear2448, 3342336
  store i32 %bf.set2449, i32* %1171, align 8
  %1172 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1173 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %1172, %union.tree_node* %1173, i32 1)
  br label %if.end.2450

if.end.2450:                                      ; preds = %if.then.2441, %if.end.2438
  %1174 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1174, %struct.rtx_def** %retval
  br label %return

if.end.2451:                                      ; preds = %land.lhs.true.2301, %land.lhs.true.2290, %lor.lhs.false.2287
  %1175 = load i32, i32* %mode, align 4
  %cmp2452 = icmp eq i32 %1175, 51
  br i1 %cmp2452, label %if.then.2454, label %if.end.2455

if.then.2454:                                     ; preds = %if.end.2451
  store i32 51, i32* %mode1, align 4
  br label %if.end.2455

if.end.2455:                                      ; preds = %if.then.2454, %if.end.2451
  %1176 = load i32, i32* %modifier.addr, align 4
  %cmp2456 = icmp eq i32 %1176, 2
  br i1 %cmp2456, label %if.then.2464, label %lor.lhs.false.2458

lor.lhs.false.2458:                               ; preds = %if.end.2455
  %1177 = load i32, i32* %modifier.addr, align 4
  %cmp2459 = icmp eq i32 %1177, 1
  br i1 %cmp2459, label %if.then.2464, label %lor.lhs.false.2461

lor.lhs.false.2461:                               ; preds = %lor.lhs.false.2458
  %1178 = load i32, i32* %modifier.addr, align 4
  %cmp2462 = icmp eq i32 %1178, 3
  br i1 %cmp2462, label %if.then.2464, label %if.else.2467

if.then.2464:                                     ; preds = %lor.lhs.false.2461, %lor.lhs.false.2458, %if.end.2455
  %1179 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1180 = load i32, i32* %mode1, align 4
  %1181 = load i64, i64* %bitpos, align 8
  %div2465 = sdiv i64 %1181, 8
  %call2466 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1179, i32 %1180, i64 %div2465, i32 0, i32 1)
  store %struct.rtx_def* %call2466, %struct.rtx_def** %op0, align 8
  br label %if.end.2470

if.else.2467:                                     ; preds = %lor.lhs.false.2461
  %1182 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1183 = load i32, i32* %mode1, align 4
  %1184 = load i64, i64* %bitpos, align 8
  %div2468 = sdiv i64 %1184, 8
  %call2469 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1182, i32 %1183, i64 %div2468, i32 1, i32 1)
  store %struct.rtx_def* %call2469, %struct.rtx_def** %op0, align 8
  br label %if.end.2470

if.end.2470:                                      ; preds = %if.else.2467, %if.then.2464
  %1185 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1186 = load %struct.rtx_def*, %struct.rtx_def** %orig_op0, align 8
  %cmp2471 = icmp eq %struct.rtx_def* %1185, %1186
  br i1 %cmp2471, label %if.then.2473, label %if.end.2475

if.then.2473:                                     ; preds = %if.end.2470
  %1187 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2474 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1187)
  store %struct.rtx_def* %call2474, %struct.rtx_def** %op0, align 8
  br label %if.end.2475

if.end.2475:                                      ; preds = %if.then.2473, %if.end.2470
  %1188 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1189 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %1188, %union.tree_node* %1189, i32 0)
  %1190 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2476 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1190, i32 0, i32 1
  %arrayidx2477 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2476, i32 0, i64 0
  %rtx2478 = bitcast %union.rtunion_def* %arrayidx2477 to %struct.rtx_def**
  %1191 = load %struct.rtx_def*, %struct.rtx_def** %rtx2478, align 8
  %1192 = bitcast %struct.rtx_def* %1191 to i32*
  %bf.load2479 = load i32, i32* %1192, align 8
  %bf.clear2480 = and i32 %bf.load2479, 65535
  %cmp2481 = icmp eq i32 %bf.clear2480, 61
  br i1 %cmp2481, label %if.then.2483, label %if.end.2500

if.then.2483:                                     ; preds = %if.end.2475
  %1193 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2484 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1193, i32 0, i32 1
  %arrayidx2485 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2484, i32 0, i64 0
  %rtx2486 = bitcast %union.rtunion_def* %arrayidx2485 to %struct.rtx_def**
  %1194 = load %struct.rtx_def*, %struct.rtx_def** %rtx2486, align 8
  %1195 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2487 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1195, i32 0, i32 1
  %arrayidx2488 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2487, i32 0, i64 1
  %rtmem2489 = bitcast %union.rtunion_def* %arrayidx2488 to %struct.mem_attrs**
  %1196 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem2489, align 8
  %cmp2490 = icmp ne %struct.mem_attrs* %1196, null
  br i1 %cmp2490, label %cond.true.2492, label %cond.false.2497

cond.true.2492:                                   ; preds = %if.then.2483
  %1197 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld2493 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1197, i32 0, i32 1
  %arrayidx2494 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2493, i32 0, i64 1
  %rtmem2495 = bitcast %union.rtunion_def* %arrayidx2494 to %struct.mem_attrs**
  %1198 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem2495, align 8
  %align2496 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %1198, i32 0, i32 4
  %1199 = load i32, i32* %align2496, align 4
  br label %cond.end.2498

cond.false.2497:                                  ; preds = %if.then.2483
  br label %cond.end.2498

cond.end.2498:                                    ; preds = %cond.false.2497, %cond.true.2492
  %cond2499 = phi i32 [ %1199, %cond.true.2492 ], [ 8, %cond.false.2497 ]
  call void @mark_reg_pointer(%struct.rtx_def* %1194, i32 %cond2499)
  br label %if.end.2500

if.end.2500:                                      ; preds = %cond.end.2498, %if.end.2475
  %1200 = load i32, i32* %volatilep, align 4
  %1201 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1202 = bitcast %struct.rtx_def* %1201 to i32*
  %bf.load2501 = load i32, i32* %1202, align 8
  %bf.lshr2502 = lshr i32 %bf.load2501, 27
  %bf.clear2503 = and i32 %bf.lshr2502, 1
  %or2504 = or i32 %bf.clear2503, %1200
  %bf.load2505 = load i32, i32* %1202, align 8
  %bf.value2506 = and i32 %or2504, 1
  %bf.shl2507 = shl i32 %bf.value2506, 27
  %bf.clear2508 = and i32 %bf.load2505, -134217729
  %bf.set2509 = or i32 %bf.clear2508, %bf.shl2507
  store i32 %bf.set2509, i32* %1202, align 8
  %1203 = load i32, i32* %mode, align 4
  %1204 = load i32, i32* %mode1, align 4
  %cmp2510 = icmp eq i32 %1203, %1204
  br i1 %cmp2510, label %if.then.2524, label %lor.lhs.false.2512

lor.lhs.false.2512:                               ; preds = %if.end.2500
  %1205 = load i32, i32* %mode1, align 4
  %cmp2513 = icmp eq i32 %1205, 51
  br i1 %cmp2513, label %if.then.2524, label %lor.lhs.false.2515

lor.lhs.false.2515:                               ; preds = %lor.lhs.false.2512
  %1206 = load i32, i32* %mode1, align 4
  %1207 = load i32, i32* %tmode.addr, align 4
  %cmp2516 = icmp eq i32 %1206, %1207
  br i1 %cmp2516, label %if.then.2524, label %lor.lhs.false.2518

lor.lhs.false.2518:                               ; preds = %lor.lhs.false.2515
  %1208 = load i32, i32* %modifier.addr, align 4
  %cmp2519 = icmp eq i32 %1208, 2
  br i1 %cmp2519, label %if.then.2524, label %lor.lhs.false.2521

lor.lhs.false.2521:                               ; preds = %lor.lhs.false.2518
  %1209 = load i32, i32* %modifier.addr, align 4
  %cmp2522 = icmp eq i32 %1209, 3
  br i1 %cmp2522, label %if.then.2524, label %if.else.2525

if.then.2524:                                     ; preds = %lor.lhs.false.2521, %lor.lhs.false.2518, %lor.lhs.false.2515, %lor.lhs.false.2512, %if.end.2500
  %1210 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1210, %struct.rtx_def** %retval
  br label %return

if.else.2525:                                     ; preds = %lor.lhs.false.2521
  %1211 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp2526 = icmp eq %struct.rtx_def* %1211, null
  br i1 %cmp2526, label %if.then.2528, label %if.end.2536

if.then.2528:                                     ; preds = %if.else.2525
  %1212 = load i32, i32* %tmode.addr, align 4
  %cmp2529 = icmp ne i32 %1212, 0
  br i1 %cmp2529, label %cond.true.2531, label %cond.false.2532

cond.true.2531:                                   ; preds = %if.then.2528
  %1213 = load i32, i32* %tmode.addr, align 4
  br label %cond.end.2533

cond.false.2532:                                  ; preds = %if.then.2528
  %1214 = load i32, i32* %mode, align 4
  br label %cond.end.2533

cond.end.2533:                                    ; preds = %cond.false.2532, %cond.true.2531
  %cond2534 = phi i32 [ %1213, %cond.true.2531 ], [ %1214, %cond.false.2532 ]
  %call2535 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond2534)
  store %struct.rtx_def* %call2535, %struct.rtx_def** %target.addr, align 8
  br label %if.end.2536

if.end.2536:                                      ; preds = %cond.end.2533, %if.else.2525
  br label %if.end.2537

if.end.2537:                                      ; preds = %if.end.2536
  %1215 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1216 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1217 = load i32, i32* %unsignedp, align 4
  call void @convert_move(%struct.rtx_def* %1215, %struct.rtx_def* %1216, i32 %1217)
  %1218 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %1218, %struct.rtx_def** %retval
  br label %return

sw.bb.2538:                                       ; preds = %if.end.185
  %call2539 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call2539, %struct.rtx_def** %before, align 8
  %1219 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2540 = bitcast %union.tree_node* %1219 to %struct.tree_exp*
  %operands2541 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2540, i32 0, i32 2
  %arrayidx2542 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2541, i32 0, i64 0
  %1220 = load %union.tree_node*, %union.tree_node** %arrayidx2542, align 8
  %1221 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1222 = load i32, i32* %tmode.addr, align 4
  %1223 = load i32, i32* %modifier.addr, align 4
  %call2543 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1220, %struct.rtx_def* %1221, i32 %1222, i32 %1223)
  store %struct.rtx_def* %call2543, %struct.rtx_def** %subtarget, align 8
  %1224 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %1225 = bitcast %struct.rtx_def* %1224 to i32*
  %bf.load2544 = load i32, i32* %1225, align 8
  %bf.clear2545 = and i32 %bf.load2544, 65535
  %cmp2546 = icmp eq i32 %bf.clear2545, 61
  br i1 %cmp2546, label %if.then.2548, label %if.else.2564

if.then.2548:                                     ; preds = %sw.bb.2538
  %1226 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  store %struct.rtx_def* %1226, %struct.rtx_def** %target.addr, align 8
  %call2549 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call2549, %struct.rtx_def** %insn, align 8
  %1227 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %1228 = load %struct.rtx_def*, %struct.rtx_def** %before, align 8
  %cmp2550 = icmp eq %struct.rtx_def* %1227, %1228
  br i1 %cmp2550, label %if.then.2552, label %if.end.2553

if.then.2552:                                     ; preds = %if.then.2548
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7128, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.2553:                                      ; preds = %if.then.2548
  %1229 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %1230 = bitcast %struct.rtx_def* %1229 to i32*
  %bf.load2554 = load i32, i32* %1230, align 8
  %bf.clear2555 = and i32 %bf.load2554, 65535
  %idxprom2556 = sext i32 %bf.clear2555 to i64
  %arrayidx2557 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom2556
  %1231 = load i8, i8* %arrayidx2557, align 1
  %conv2558 = sext i8 %1231 to i32
  %cmp2559 = icmp eq i32 %conv2558, 105
  br i1 %cmp2559, label %if.end.2563, label %if.then.2561

if.then.2561:                                     ; preds = %if.end.2553
  %1232 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call2562 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %1232)
  store %struct.rtx_def* %call2562, %struct.rtx_def** %insn, align 8
  br label %if.end.2563

if.end.2563:                                      ; preds = %if.then.2561, %if.end.2553
  br label %if.end.2570

if.else.2564:                                     ; preds = %sw.bb.2538
  %1233 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %1234 = bitcast %struct.rtx_def* %1233 to i32*
  %bf.load2565 = load i32, i32* %1234, align 8
  %bf.lshr2566 = lshr i32 %bf.load2565, 16
  %bf.clear2567 = and i32 %bf.lshr2566, 255
  %call2568 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear2567)
  store %struct.rtx_def* %call2568, %struct.rtx_def** %target.addr, align 8
  %1235 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1236 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call2569 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1235, %struct.rtx_def* %1236)
  store %struct.rtx_def* %call2569, %struct.rtx_def** %insn, align 8
  br label %if.end.2570

if.end.2570:                                      ; preds = %if.else.2564, %if.end.2563
  %1237 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2571 = bitcast %union.tree_node* %1237 to %struct.tree_exp*
  %operands2572 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2571, i32 0, i32 2
  %arrayidx2573 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2572, i32 0, i64 1
  %1238 = load %union.tree_node*, %union.tree_node** %arrayidx2573, align 8
  %decl2574 = bitcast %union.tree_node* %1238 to %struct.tree_decl*
  %rtl2575 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2574, i32 0, i32 17
  %1239 = load %struct.rtx_def*, %struct.rtx_def** %rtl2575, align 8
  %tobool2576 = icmp ne %struct.rtx_def* %1239, null
  br i1 %tobool2576, label %cond.true.2577, label %cond.false.2583

cond.true.2577:                                   ; preds = %if.end.2570
  %1240 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2578 = bitcast %union.tree_node* %1240 to %struct.tree_exp*
  %operands2579 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2578, i32 0, i32 2
  %arrayidx2580 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2579, i32 0, i64 1
  %1241 = load %union.tree_node*, %union.tree_node** %arrayidx2580, align 8
  %decl2581 = bitcast %union.tree_node* %1241 to %struct.tree_decl*
  %rtl2582 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2581, i32 0, i32 17
  %1242 = load %struct.rtx_def*, %struct.rtx_def** %rtl2582, align 8
  br label %cond.end.2592

cond.false.2583:                                  ; preds = %if.end.2570
  %1243 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2584 = bitcast %union.tree_node* %1243 to %struct.tree_exp*
  %operands2585 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2584, i32 0, i32 2
  %arrayidx2586 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2585, i32 0, i64 1
  %1244 = load %union.tree_node*, %union.tree_node** %arrayidx2586, align 8
  call void @make_decl_rtl(%union.tree_node* %1244, i8* null)
  %1245 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2587 = bitcast %union.tree_node* %1245 to %struct.tree_exp*
  %operands2588 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2587, i32 0, i32 2
  %arrayidx2589 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2588, i32 0, i64 1
  %1246 = load %union.tree_node*, %union.tree_node** %arrayidx2589, align 8
  %decl2590 = bitcast %union.tree_node* %1246 to %struct.tree_decl*
  %rtl2591 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2590, i32 0, i32 17
  %1247 = load %struct.rtx_def*, %struct.rtx_def** %rtl2591, align 8
  br label %cond.end.2592

cond.end.2592:                                    ; preds = %cond.false.2583, %cond.true.2577
  %cond2593 = phi %struct.rtx_def* [ %1242, %cond.true.2577 ], [ %1247, %cond.false.2583 ]
  %fld2594 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond2593, i32 0, i32 1
  %arrayidx2595 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2594, i32 0, i64 0
  %rtx2596 = bitcast %union.rtunion_def* %arrayidx2595 to %struct.rtx_def**
  %1248 = load %struct.rtx_def*, %struct.rtx_def** %rtx2596, align 8
  store %struct.rtx_def* %1248, %struct.rtx_def** %vtbl_ref, align 8
  %1249 = load %struct.rtx_def*, %struct.rtx_def** %vtbl_ref, align 8
  %1250 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2597 = bitcast %union.tree_node* %1250 to %struct.tree_exp*
  %operands2598 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2597, i32 0, i32 2
  %arrayidx2599 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2598, i32 0, i64 2
  %1251 = load %union.tree_node*, %union.tree_node** %arrayidx2599, align 8
  %call2600 = call i64 @tree_low_cst(%union.tree_node* %1251, i32 0)
  %call2601 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %1249, i64 %call2600)
  store %struct.rtx_def* %call2601, %struct.rtx_def** %vtbl_ref, align 8
  %1252 = load %struct.rtx_def*, %struct.rtx_def** %vtbl_ref, align 8
  %fld2602 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1252, i32 0, i32 1
  %arrayidx2603 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2602, i32 0, i64 0
  %rtx2604 = bitcast %union.rtunion_def* %arrayidx2603 to %struct.rtx_def**
  %1253 = load %struct.rtx_def*, %struct.rtx_def** %rtx2604, align 8
  store %struct.rtx_def* %1253, %struct.rtx_def** %vtbl_ref, align 8
  %1254 = load %struct.rtx_def*, %struct.rtx_def** %vtbl_ref, align 8
  %1255 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld2605 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1255, i32 0, i32 1
  %arrayidx2606 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2605, i32 0, i64 6
  %rtx2607 = bitcast %union.rtunion_def* %arrayidx2606 to %struct.rtx_def**
  %1256 = load %struct.rtx_def*, %struct.rtx_def** %rtx2607, align 8
  %call2608 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 30, %struct.rtx_def* %1254, %struct.rtx_def* %1256)
  %1257 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld2609 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1257, i32 0, i32 1
  %arrayidx2610 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2609, i32 0, i64 6
  %rtx2611 = bitcast %union.rtunion_def* %arrayidx2610 to %struct.rtx_def**
  store %struct.rtx_def* %call2608, %struct.rtx_def** %rtx2611, align 8
  %1258 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %1258, %struct.rtx_def** %retval
  br label %return

sw.bb.2612:                                       ; preds = %if.end.185
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7155, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

sw.bb.2613:                                       ; preds = %if.end.185
  %1259 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2614 = bitcast %union.tree_node* %1259 to %struct.tree_exp*
  %operands2615 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2614, i32 0, i32 2
  %arrayidx2616 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2615, i32 0, i64 0
  %1260 = load %union.tree_node*, %union.tree_node** %arrayidx2616, align 8
  store %union.tree_node* %1260, %union.tree_node** %set, align 8
  %1261 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2618 = bitcast %union.tree_node* %1261 to %struct.tree_exp*
  %operands2619 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2618, i32 0, i32 2
  %arrayidx2620 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2619, i32 0, i64 1
  %1262 = load %union.tree_node*, %union.tree_node** %arrayidx2620, align 8
  store %union.tree_node* %1262, %union.tree_node** %index2617, align 8
  %1263 = load %union.tree_node*, %union.tree_node** %index2617, align 8
  %common2621 = bitcast %union.tree_node* %1263 to %struct.tree_common*
  %type2622 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2621, i32 0, i32 1
  %1264 = load %union.tree_node*, %union.tree_node** %type2622, align 8
  %common2623 = bitcast %union.tree_node* %1264 to %struct.tree_common*
  %unsigned_flag2624 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2623, i32 0, i32 2
  %bf.load2625 = load i32, i32* %unsigned_flag2624, align 8
  %bf.lshr2626 = lshr i32 %bf.load2625, 13
  %bf.clear2627 = and i32 %bf.lshr2626, 1
  store i32 %bf.clear2627, i32* %iunsignedp, align 4
  %1265 = load %union.tree_node*, %union.tree_node** %set, align 8
  %common2628 = bitcast %union.tree_node* %1265 to %struct.tree_common*
  %type2629 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2628, i32 0, i32 1
  %1266 = load %union.tree_node*, %union.tree_node** %type2629, align 8
  store %union.tree_node* %1266, %union.tree_node** %set_type, align 8
  %1267 = load %union.tree_node*, %union.tree_node** %set_type, align 8
  %type2630 = bitcast %union.tree_node* %1267 to %struct.tree_type*
  %values2631 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2630, i32 0, i32 1
  %1268 = load %union.tree_node*, %union.tree_node** %values2631, align 8
  %type2632 = bitcast %union.tree_node* %1268 to %struct.tree_type*
  %minval2633 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2632, i32 0, i32 12
  %1269 = load %union.tree_node*, %union.tree_node** %minval2633, align 8
  store %union.tree_node* %1269, %union.tree_node** %set_low_bound, align 8
  %1270 = load %union.tree_node*, %union.tree_node** %set_type, align 8
  %type2634 = bitcast %union.tree_node* %1270 to %struct.tree_type*
  %values2635 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2634, i32 0, i32 1
  %1271 = load %union.tree_node*, %union.tree_node** %values2635, align 8
  %type2636 = bitcast %union.tree_node* %1271 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2636, i32 0, i32 13
  %1272 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  store %union.tree_node* %1272, %union.tree_node** %set_high_bound, align 8
  %1273 = load %union.tree_node*, %union.tree_node** %index2617, align 8
  %call2637 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1273, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call2637, %struct.rtx_def** %index_val, align 8
  %1274 = load %union.tree_node*, %union.tree_node** %set_low_bound, align 8
  %call2638 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1274, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call2638, %struct.rtx_def** %lo_r, align 8
  %1275 = load %union.tree_node*, %union.tree_node** %set_high_bound, align 8
  %call2639 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1275, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call2639, %struct.rtx_def** %hi_r, align 8
  %1276 = load %union.tree_node*, %union.tree_node** %set, align 8
  %call2640 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1276, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call2640, %struct.rtx_def** %setval, align 8
  %1277 = load %struct.rtx_def*, %struct.rtx_def** %setval, align 8
  %fld2641 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1277, i32 0, i32 1
  %arrayidx2642 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2641, i32 0, i64 0
  %rtx2643 = bitcast %union.rtunion_def* %arrayidx2642 to %struct.rtx_def**
  %1278 = load %struct.rtx_def*, %struct.rtx_def** %rtx2643, align 8
  store %struct.rtx_def* %1278, %struct.rtx_def** %setaddr, align 8
  %1279 = load %union.tree_node*, %union.tree_node** %index2617, align 8
  %common2644 = bitcast %union.tree_node* %1279 to %struct.tree_common*
  %type2645 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2644, i32 0, i32 1
  %1280 = load %union.tree_node*, %union.tree_node** %type2645, align 8
  %type2646 = bitcast %union.tree_node* %1280 to %struct.tree_type*
  %mode2647 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2646, i32 0, i32 6
  %bf.load2648 = load i32, i32* %mode2647, align 4
  %bf.lshr2649 = lshr i32 %bf.load2648, 9
  %bf.clear2650 = and i32 %bf.lshr2649, 127
  store i32 %bf.clear2650, i32* %index_mode, align 4
  %1281 = load %union.tree_node*, %union.tree_node** %set_high_bound, align 8
  %common2653 = bitcast %union.tree_node* %1281 to %struct.tree_common*
  %code2654 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2653, i32 0, i32 2
  %bf.load2655 = load i32, i32* %code2654, align 8
  %bf.clear2656 = and i32 %bf.load2655, 255
  %cmp2657 = icmp eq i32 %bf.clear2656, 25
  br i1 %cmp2657, label %land.lhs.true.2659, label %lor.lhs.false.2669

land.lhs.true.2659:                               ; preds = %sw.bb.2613
  %1282 = load %union.tree_node*, %union.tree_node** %set_low_bound, align 8
  %common2660 = bitcast %union.tree_node* %1282 to %struct.tree_common*
  %code2661 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2660, i32 0, i32 2
  %bf.load2662 = load i32, i32* %code2661, align 8
  %bf.clear2663 = and i32 %bf.load2662, 255
  %cmp2664 = icmp eq i32 %bf.clear2663, 25
  br i1 %cmp2664, label %land.lhs.true.2666, label %lor.lhs.false.2669

land.lhs.true.2666:                               ; preds = %land.lhs.true.2659
  %1283 = load %union.tree_node*, %union.tree_node** %set_high_bound, align 8
  %1284 = load %union.tree_node*, %union.tree_node** %set_low_bound, align 8
  %call2667 = call i32 @tree_int_cst_lt(%union.tree_node* %1283, %union.tree_node* %1284)
  %tobool2668 = icmp ne i32 %call2667, 0
  br i1 %tobool2668, label %if.then.2703, label %lor.lhs.false.2669

lor.lhs.false.2669:                               ; preds = %land.lhs.true.2666, %land.lhs.true.2659, %sw.bb.2613
  %1285 = load %union.tree_node*, %union.tree_node** %index2617, align 8
  %common2670 = bitcast %union.tree_node* %1285 to %struct.tree_common*
  %code2671 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2670, i32 0, i32 2
  %bf.load2672 = load i32, i32* %code2671, align 8
  %bf.clear2673 = and i32 %bf.load2672, 255
  %cmp2674 = icmp eq i32 %bf.clear2673, 25
  br i1 %cmp2674, label %land.lhs.true.2676, label %lor.lhs.false.2686

land.lhs.true.2676:                               ; preds = %lor.lhs.false.2669
  %1286 = load %union.tree_node*, %union.tree_node** %set_low_bound, align 8
  %common2677 = bitcast %union.tree_node* %1286 to %struct.tree_common*
  %code2678 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2677, i32 0, i32 2
  %bf.load2679 = load i32, i32* %code2678, align 8
  %bf.clear2680 = and i32 %bf.load2679, 255
  %cmp2681 = icmp eq i32 %bf.clear2680, 25
  br i1 %cmp2681, label %land.lhs.true.2683, label %lor.lhs.false.2686

land.lhs.true.2683:                               ; preds = %land.lhs.true.2676
  %1287 = load %union.tree_node*, %union.tree_node** %index2617, align 8
  %1288 = load %union.tree_node*, %union.tree_node** %set_low_bound, align 8
  %call2684 = call i32 @tree_int_cst_lt(%union.tree_node* %1287, %union.tree_node* %1288)
  %tobool2685 = icmp ne i32 %call2684, 0
  br i1 %tobool2685, label %if.then.2703, label %lor.lhs.false.2686

lor.lhs.false.2686:                               ; preds = %land.lhs.true.2683, %land.lhs.true.2676, %lor.lhs.false.2669
  %1289 = load %union.tree_node*, %union.tree_node** %set_high_bound, align 8
  %common2687 = bitcast %union.tree_node* %1289 to %struct.tree_common*
  %code2688 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2687, i32 0, i32 2
  %bf.load2689 = load i32, i32* %code2688, align 8
  %bf.clear2690 = and i32 %bf.load2689, 255
  %cmp2691 = icmp eq i32 %bf.clear2690, 25
  br i1 %cmp2691, label %land.lhs.true.2693, label %if.end.2704

land.lhs.true.2693:                               ; preds = %lor.lhs.false.2686
  %1290 = load %union.tree_node*, %union.tree_node** %index2617, align 8
  %common2694 = bitcast %union.tree_node* %1290 to %struct.tree_common*
  %code2695 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2694, i32 0, i32 2
  %bf.load2696 = load i32, i32* %code2695, align 8
  %bf.clear2697 = and i32 %bf.load2696, 255
  %cmp2698 = icmp eq i32 %bf.clear2697, 25
  br i1 %cmp2698, label %land.lhs.true.2700, label %if.end.2704

land.lhs.true.2700:                               ; preds = %land.lhs.true.2693
  %1291 = load %union.tree_node*, %union.tree_node** %set_high_bound, align 8
  %1292 = load %union.tree_node*, %union.tree_node** %index2617, align 8
  %call2701 = call i32 @tree_int_cst_lt(%union.tree_node* %1291, %union.tree_node* %1292)
  %tobool2702 = icmp ne i32 %call2701, 0
  br i1 %tobool2702, label %if.then.2703, label %if.end.2704

if.then.2703:                                     ; preds = %land.lhs.true.2700, %land.lhs.true.2683, %land.lhs.true.2666
  %1293 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %1293, %struct.rtx_def** %retval
  br label %return

if.end.2704:                                      ; preds = %land.lhs.true.2700, %land.lhs.true.2693, %lor.lhs.false.2686
  %1294 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp2705 = icmp eq %struct.rtx_def* %1294, null
  br i1 %cmp2705, label %if.then.2707, label %if.end.2715

if.then.2707:                                     ; preds = %if.end.2704
  %1295 = load i32, i32* %tmode.addr, align 4
  %cmp2708 = icmp ne i32 %1295, 0
  br i1 %cmp2708, label %cond.true.2710, label %cond.false.2711

cond.true.2710:                                   ; preds = %if.then.2707
  %1296 = load i32, i32* %tmode.addr, align 4
  br label %cond.end.2712

cond.false.2711:                                  ; preds = %if.then.2707
  %1297 = load i32, i32* %mode, align 4
  br label %cond.end.2712

cond.end.2712:                                    ; preds = %cond.false.2711, %cond.true.2710
  %cond2713 = phi i32 [ %1296, %cond.true.2710 ], [ %1297, %cond.false.2711 ]
  %call2714 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond2713)
  store %struct.rtx_def* %call2714, %struct.rtx_def** %target.addr, align 8
  br label %if.end.2715

if.end.2715:                                      ; preds = %cond.end.2712, %if.end.2704
  %call2716 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call2716, %struct.rtx_def** %op0, align 8
  %call2717 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call2717, %struct.rtx_def** %op1, align 8
  %1298 = load %struct.rtx_def*, %struct.rtx_def** %index_val, align 8
  %1299 = bitcast %struct.rtx_def* %1298 to i32*
  %bf.load2718 = load i32, i32* %1299, align 8
  %bf.clear2719 = and i32 %bf.load2718, 65535
  %cmp2720 = icmp eq i32 %bf.clear2719, 54
  br i1 %cmp2720, label %land.lhs.true.2722, label %if.then.2727

land.lhs.true.2722:                               ; preds = %if.end.2715
  %1300 = load %struct.rtx_def*, %struct.rtx_def** %lo_r, align 8
  %1301 = bitcast %struct.rtx_def* %1300 to i32*
  %bf.load2723 = load i32, i32* %1301, align 8
  %bf.clear2724 = and i32 %bf.load2723, 65535
  %cmp2725 = icmp eq i32 %bf.clear2724, 54
  br i1 %cmp2725, label %if.end.2731, label %if.then.2727

if.then.2727:                                     ; preds = %land.lhs.true.2722, %if.end.2715
  %1302 = load %struct.rtx_def*, %struct.rtx_def** %index_val, align 8
  %1303 = load %struct.rtx_def*, %struct.rtx_def** %lo_r, align 8
  %1304 = load %struct.rtx_def*, %struct.rtx_def** %index_val, align 8
  %1305 = bitcast %struct.rtx_def* %1304 to i32*
  %bf.load2728 = load i32, i32* %1305, align 8
  %bf.lshr2729 = lshr i32 %bf.load2728, 16
  %bf.clear2730 = and i32 %bf.lshr2729, 255
  %1306 = load i32, i32* %iunsignedp, align 4
  %1307 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %1302, %struct.rtx_def* %1303, i32 107, %struct.rtx_def* null, i32 %bf.clear2730, i32 %1306, %struct.rtx_def* %1307)
  br label %if.end.2731

if.end.2731:                                      ; preds = %if.then.2727, %land.lhs.true.2722
  %1308 = load %struct.rtx_def*, %struct.rtx_def** %index_val, align 8
  %1309 = bitcast %struct.rtx_def* %1308 to i32*
  %bf.load2732 = load i32, i32* %1309, align 8
  %bf.clear2733 = and i32 %bf.load2732, 65535
  %cmp2734 = icmp eq i32 %bf.clear2733, 54
  br i1 %cmp2734, label %land.lhs.true.2736, label %if.then.2741

land.lhs.true.2736:                               ; preds = %if.end.2731
  %1310 = load %struct.rtx_def*, %struct.rtx_def** %hi_r, align 8
  %1311 = bitcast %struct.rtx_def* %1310 to i32*
  %bf.load2737 = load i32, i32* %1311, align 8
  %bf.clear2738 = and i32 %bf.load2737, 65535
  %cmp2739 = icmp eq i32 %bf.clear2738, 54
  br i1 %cmp2739, label %if.end.2745, label %if.then.2741

if.then.2741:                                     ; preds = %land.lhs.true.2736, %if.end.2731
  %1312 = load %struct.rtx_def*, %struct.rtx_def** %index_val, align 8
  %1313 = load %struct.rtx_def*, %struct.rtx_def** %hi_r, align 8
  %1314 = load %struct.rtx_def*, %struct.rtx_def** %index_val, align 8
  %1315 = bitcast %struct.rtx_def* %1314 to i32*
  %bf.load2742 = load i32, i32* %1315, align 8
  %bf.lshr2743 = lshr i32 %bf.load2742, 16
  %bf.clear2744 = and i32 %bf.lshr2743, 255
  %1316 = load i32, i32* %iunsignedp, align 4
  %1317 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %1312, %struct.rtx_def* %1313, i32 105, %struct.rtx_def* null, i32 %bf.clear2744, i32 %1316, %struct.rtx_def* %1317)
  br label %if.end.2745

if.end.2745:                                      ; preds = %if.then.2741, %land.lhs.true.2736
  %1318 = load %struct.rtx_def*, %struct.rtx_def** %lo_r, align 8
  %1319 = bitcast %struct.rtx_def* %1318 to i32*
  %bf.load2746 = load i32, i32* %1319, align 8
  %bf.clear2747 = and i32 %bf.load2746, 65535
  %cmp2748 = icmp eq i32 %bf.clear2747, 54
  br i1 %cmp2748, label %if.then.2750, label %if.else.2755

if.then.2750:                                     ; preds = %if.end.2745
  %1320 = load %struct.rtx_def*, %struct.rtx_def** %lo_r, align 8
  %fld2751 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1320, i32 0, i32 1
  %arrayidx2752 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2751, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx2752 to i64*
  %1321 = load i64, i64* %rtwint, align 8
  %and2753 = and i64 %1321, -257
  %call2754 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %and2753)
  store %struct.rtx_def* %call2754, %struct.rtx_def** %rlow, align 8
  br label %if.end.2758

if.else.2755:                                     ; preds = %if.end.2745
  %1322 = load i32, i32* %index_mode, align 4
  %1323 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 18), align 8
  %1324 = load %struct.rtx_def*, %struct.rtx_def** %lo_r, align 8
  %call2756 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -257)
  %1325 = load i32, i32* %iunsignedp, align 4
  %call2757 = call %struct.rtx_def* @expand_binop(i32 %1322, %struct.optab* %1323, %struct.rtx_def* %1324, %struct.rtx_def* %call2756, %struct.rtx_def* null, i32 %1325, i32 3)
  store %struct.rtx_def* %call2757, %struct.rtx_def** %rlow, align 8
  br label %if.end.2758

if.end.2758:                                      ; preds = %if.else.2755, %if.then.2750
  %1326 = load i32, i32* %index_mode, align 4
  %1327 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  %1328 = load %struct.rtx_def*, %struct.rtx_def** %index_val, align 8
  %1329 = load %struct.rtx_def*, %struct.rtx_def** %rlow, align 8
  %1330 = load i32, i32* %iunsignedp, align 4
  %call2759 = call %struct.rtx_def* @expand_binop(i32 %1326, %struct.optab* %1327, %struct.rtx_def* %1328, %struct.rtx_def* %1329, %struct.rtx_def* null, i32 %1330, i32 3)
  store %struct.rtx_def* %call2759, %struct.rtx_def** %diff, align 8
  %1331 = load i32, i32* %index_mode, align 4
  %1332 = load %struct.rtx_def*, %struct.rtx_def** %diff, align 8
  %call2760 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %1333 = load i32, i32* %iunsignedp, align 4
  %call2761 = call %struct.rtx_def* @expand_divmod(i32 0, i32 62, i32 %1331, %struct.rtx_def* %1332, %struct.rtx_def* %call2760, %struct.rtx_def* null, i32 %1333)
  store %struct.rtx_def* %call2761, %struct.rtx_def** %quo, align 8
  %1334 = load i32, i32* %index_mode, align 4
  %1335 = load %struct.rtx_def*, %struct.rtx_def** %index_val, align 8
  %call2762 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %1336 = load i32, i32* %iunsignedp, align 4
  %call2763 = call %struct.rtx_def* @expand_divmod(i32 1, i32 66, i32 %1334, %struct.rtx_def* %1335, %struct.rtx_def* %call2762, %struct.rtx_def* null, i32 %1336)
  store %struct.rtx_def* %call2763, %struct.rtx_def** %rem2651, align 8
  %1337 = load i32, i32* @byte_mode, align 4
  %1338 = load i32, i32* %index_mode, align 4
  %1339 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  %1340 = load %struct.rtx_def*, %struct.rtx_def** %diff, align 8
  %1341 = load %struct.rtx_def*, %struct.rtx_def** %setaddr, align 8
  %1342 = load i32, i32* %iunsignedp, align 4
  %call2764 = call %struct.rtx_def* @expand_binop(i32 %1338, %struct.optab* %1339, %struct.rtx_def* %1340, %struct.rtx_def* %1341, %struct.rtx_def* null, i32 %1342, i32 3)
  %call2765 = call %struct.rtx_def* @memory_address(i32 %1337, %struct.rtx_def* %call2764)
  store %struct.rtx_def* %call2765, %struct.rtx_def** %addr2652, align 8
  %1343 = load i32, i32* @byte_mode, align 4
  %1344 = load i32, i32* @byte_mode, align 4
  %1345 = load %struct.rtx_def*, %struct.rtx_def** %addr2652, align 8
  %call2766 = call %struct.rtx_def* @gen_rtx_MEM(i32 %1344, %struct.rtx_def* %1345)
  %1346 = load %union.tree_node*, %union.tree_node** %index2617, align 8
  %common2767 = bitcast %union.tree_node* %1346 to %struct.tree_common*
  %type2768 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2767, i32 0, i32 1
  %1347 = load %union.tree_node*, %union.tree_node** %type2768, align 8
  %1348 = load %struct.rtx_def*, %struct.rtx_def** %rem2651, align 8
  %call2769 = call %union.tree_node* @make_tree(%union.tree_node* %1347, %struct.rtx_def* %1348)
  %call2770 = call %struct.rtx_def* @expand_shift(i32 83, i32 %1343, %struct.rtx_def* %call2766, %union.tree_node* %call2769, %struct.rtx_def* null, i32 1)
  store %struct.rtx_def* %call2770, %struct.rtx_def** %bit, align 8
  %1349 = load i32, i32* @byte_mode, align 4
  %1350 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 18), align 8
  %1351 = load %struct.rtx_def*, %struct.rtx_def** %bit, align 8
  %1352 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %1353 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1354 = bitcast %struct.rtx_def* %1353 to i32*
  %bf.load2771 = load i32, i32* %1354, align 8
  %bf.lshr2772 = lshr i32 %bf.load2771, 16
  %bf.clear2773 = and i32 %bf.lshr2772, 255
  %1355 = load i32, i32* @byte_mode, align 4
  %cmp2774 = icmp eq i32 %bf.clear2773, %1355
  br i1 %cmp2774, label %cond.true.2776, label %cond.false.2777

cond.true.2776:                                   ; preds = %if.end.2758
  %1356 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  br label %cond.end.2778

cond.false.2777:                                  ; preds = %if.end.2758
  br label %cond.end.2778

cond.end.2778:                                    ; preds = %cond.false.2777, %cond.true.2776
  %cond2779 = phi %struct.rtx_def* [ %1356, %cond.true.2776 ], [ null, %cond.false.2777 ]
  %call2780 = call %struct.rtx_def* @expand_binop(i32 %1349, %struct.optab* %1350, %struct.rtx_def* %1351, %struct.rtx_def* %1352, %struct.rtx_def* %cond2779, i32 1, i32 3)
  store %struct.rtx_def* %call2780, %struct.rtx_def** %result, align 8
  %1357 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %1358 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp2781 = icmp ne %struct.rtx_def* %1357, %1358
  br i1 %cmp2781, label %if.then.2783, label %if.end.2784

if.then.2783:                                     ; preds = %cond.end.2778
  %1359 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1360 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  call void @convert_move(%struct.rtx_def* %1359, %struct.rtx_def* %1360, i32 1)
  br label %if.end.2784

if.end.2784:                                      ; preds = %if.then.2783, %cond.end.2778
  %1361 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @emit_jump(%struct.rtx_def* %1361)
  %1362 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call2785 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %1362)
  %1363 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1364 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call2786 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1363, %struct.rtx_def* %1364)
  %1365 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2787 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %1365)
  %1366 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %1366, %struct.rtx_def** %retval
  br label %return

sw.bb.2788:                                       ; preds = %if.end.185
  %1367 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2789 = bitcast %union.tree_node* %1367 to %struct.tree_exp*
  %operands2790 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2789, i32 0, i32 2
  %arrayidx2791 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2790, i32 0, i64 2
  %1368 = bitcast %union.tree_node** %arrayidx2791 to %struct.rtx_def**
  %1369 = load %struct.rtx_def*, %struct.rtx_def** %1368, align 8
  %cmp2792 = icmp eq %struct.rtx_def* %1369, null
  br i1 %cmp2792, label %if.then.2794, label %if.end.2809

if.then.2794:                                     ; preds = %sw.bb.2788
  %1370 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2795 = bitcast %union.tree_node* %1370 to %struct.tree_exp*
  %operands2796 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2795, i32 0, i32 2
  %arrayidx2797 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2796, i32 0, i64 0
  %1371 = load %union.tree_node*, %union.tree_node** %arrayidx2797, align 8
  %1372 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1373 = load i32, i32* %tmode.addr, align 4
  %1374 = load i32, i32* %modifier.addr, align 4
  %call2798 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1371, %struct.rtx_def* %1372, i32 %1373, i32 %1374)
  %1375 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2799 = bitcast %union.tree_node* %1375 to %struct.tree_exp*
  %operands2800 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2799, i32 0, i32 2
  %arrayidx2801 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2800, i32 0, i64 2
  %1376 = bitcast %union.tree_node** %arrayidx2801 to %struct.rtx_def**
  store %struct.rtx_def* %call2798, %struct.rtx_def** %1376, align 8
  %1377 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2802 = bitcast %union.tree_node* %1377 to %struct.tree_exp*
  %operands2803 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2802, i32 0, i32 2
  %arrayidx2804 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2803, i32 0, i64 1
  %1378 = load %union.tree_node*, %union.tree_node** %arrayidx2804, align 8
  %call2805 = call i32 @expand_decl_cleanup(%union.tree_node* null, %union.tree_node* %1378)
  %1379 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2806 = bitcast %union.tree_node* %1379 to %struct.tree_exp*
  %operands2807 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2806, i32 0, i32 2
  %arrayidx2808 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2807, i32 0, i64 1
  store %union.tree_node* null, %union.tree_node** %arrayidx2808, align 8
  br label %if.end.2809

if.end.2809:                                      ; preds = %if.then.2794, %sw.bb.2788
  %1380 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2810 = bitcast %union.tree_node* %1380 to %struct.tree_exp*
  %operands2811 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2810, i32 0, i32 2
  %arrayidx2812 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2811, i32 0, i64 2
  %1381 = bitcast %union.tree_node** %arrayidx2812 to %struct.rtx_def**
  %1382 = load %struct.rtx_def*, %struct.rtx_def** %1381, align 8
  store %struct.rtx_def* %1382, %struct.rtx_def** %retval
  br label %return

sw.bb.2813:                                       ; preds = %if.end.185
  call void @expand_start_bindings_and_block(i32 2, %union.tree_node* null)
  %1383 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %1383, i32 0, i32 40
  %1384 = load i32, i32* %x_temp_slot_level, align 4
  %1385 = load %struct.function*, %struct.function** @cfun, align 8
  %x_target_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %1385, i32 0, i32 42
  store i32 %1384, i32* %x_target_temp_slot_level, align 4
  %1386 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2814 = bitcast %union.tree_node* %1386 to %struct.tree_exp*
  %operands2815 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2814, i32 0, i32 2
  %arrayidx2816 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2815, i32 0, i64 0
  %1387 = load %union.tree_node*, %union.tree_node** %arrayidx2816, align 8
  %1388 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1389 = load i32, i32* %tmode.addr, align 4
  %1390 = load i32, i32* %modifier.addr, align 4
  %call2817 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1387, %struct.rtx_def* %1388, i32 %1389, i32 %1390)
  store %struct.rtx_def* %call2817, %struct.rtx_def** %op0, align 8
  %1391 = load i32, i32* %ignore, align 4
  %tobool2818 = icmp ne i32 %1391, 0
  br i1 %tobool2818, label %if.end.2821, label %if.then.2819

if.then.2819:                                     ; preds = %sw.bb.2813
  %1392 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call2820 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %1392)
  store %struct.rtx_def* %call2820, %struct.rtx_def** %op0, align 8
  br label %if.end.2821

if.end.2821:                                      ; preds = %if.then.2819, %sw.bb.2813
  %1393 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %1393)
  call void @expand_end_bindings(%union.tree_node* null, i32 0, i32 0)
  %1394 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1394, %struct.rtx_def** %retval
  br label %return

sw.bb.2822:                                       ; preds = %if.end.185
  %1395 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2823 = bitcast %union.tree_node* %1395 to %struct.tree_exp*
  %operands2824 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2823, i32 0, i32 2
  %arrayidx2825 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2824, i32 0, i64 0
  %1396 = load %union.tree_node*, %union.tree_node** %arrayidx2825, align 8
  %common2826 = bitcast %union.tree_node* %1396 to %struct.tree_common*
  %code2827 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2826, i32 0, i32 2
  %bf.load2828 = load i32, i32* %code2827, align 8
  %bf.clear2829 = and i32 %bf.load2828, 255
  %cmp2830 = icmp eq i32 %bf.clear2829, 121
  br i1 %cmp2830, label %land.lhs.true.2832, label %if.end.2878

land.lhs.true.2832:                               ; preds = %sw.bb.2822
  %1397 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2833 = bitcast %union.tree_node* %1397 to %struct.tree_exp*
  %operands2834 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2833, i32 0, i32 2
  %arrayidx2835 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2834, i32 0, i64 0
  %1398 = load %union.tree_node*, %union.tree_node** %arrayidx2835, align 8
  %exp2836 = bitcast %union.tree_node* %1398 to %struct.tree_exp*
  %operands2837 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2836, i32 0, i32 2
  %arrayidx2838 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2837, i32 0, i64 0
  %1399 = load %union.tree_node*, %union.tree_node** %arrayidx2838, align 8
  %common2839 = bitcast %union.tree_node* %1399 to %struct.tree_common*
  %code2840 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2839, i32 0, i32 2
  %bf.load2841 = load i32, i32* %code2840, align 8
  %bf.clear2842 = and i32 %bf.load2841, 255
  %cmp2843 = icmp eq i32 %bf.clear2842, 30
  br i1 %cmp2843, label %land.lhs.true.2845, label %if.end.2878

land.lhs.true.2845:                               ; preds = %land.lhs.true.2832
  %1400 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2846 = bitcast %union.tree_node* %1400 to %struct.tree_exp*
  %operands2847 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2846, i32 0, i32 2
  %arrayidx2848 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2847, i32 0, i64 0
  %1401 = load %union.tree_node*, %union.tree_node** %arrayidx2848, align 8
  %exp2849 = bitcast %union.tree_node* %1401 to %struct.tree_exp*
  %operands2850 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2849, i32 0, i32 2
  %arrayidx2851 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2850, i32 0, i64 0
  %1402 = load %union.tree_node*, %union.tree_node** %arrayidx2851, align 8
  %decl2852 = bitcast %union.tree_node* %1402 to %struct.tree_decl*
  %built_in_class = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2852, i32 0, i32 5
  %1403 = bitcast i48* %built_in_class to i64*
  %bf.load2853 = load i64, i64* %1403, align 8
  %bf.lshr2854 = lshr i64 %bf.load2853, 29
  %bf.clear2855 = and i64 %bf.lshr2854, 3
  %bf.cast2856 = trunc i64 %bf.clear2855 to i32
  %cmp2857 = icmp ne i32 %bf.cast2856, 0
  br i1 %cmp2857, label %if.then.2859, label %if.end.2878

if.then.2859:                                     ; preds = %land.lhs.true.2845
  %1404 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2860 = bitcast %union.tree_node* %1404 to %struct.tree_exp*
  %operands2861 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2860, i32 0, i32 2
  %arrayidx2862 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2861, i32 0, i64 0
  %1405 = load %union.tree_node*, %union.tree_node** %arrayidx2862, align 8
  %exp2863 = bitcast %union.tree_node* %1405 to %struct.tree_exp*
  %operands2864 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2863, i32 0, i32 2
  %arrayidx2865 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2864, i32 0, i64 0
  %1406 = load %union.tree_node*, %union.tree_node** %arrayidx2865, align 8
  %decl2866 = bitcast %union.tree_node* %1406 to %struct.tree_decl*
  %built_in_class2867 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2866, i32 0, i32 5
  %1407 = bitcast i48* %built_in_class2867 to i64*
  %bf.load2868 = load i64, i64* %1407, align 8
  %bf.lshr2869 = lshr i64 %bf.load2868, 29
  %bf.clear2870 = and i64 %bf.lshr2869, 3
  %bf.cast2871 = trunc i64 %bf.clear2870 to i32
  %cmp2872 = icmp eq i32 %bf.cast2871, 1
  br i1 %cmp2872, label %if.then.2874, label %if.else.2876

if.then.2874:                                     ; preds = %if.then.2859
  %1408 = load %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)** @lang_expand_expr, align 8
  %1409 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %1410 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %1411 = load i32, i32* %tmode.addr, align 4
  %1412 = load i32, i32* %modifier.addr, align 4
  %call2875 = call %struct.rtx_def* %1408(%union.tree_node* %1409, %struct.rtx_def* %1410, i32 %1411, i32 %1412)
  store %struct.rtx_def* %call2875, %struct.rtx_def** %retval
  br label %return

if.else.2876:                                     ; preds = %if.then.2859
  %1413 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %1414 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1415 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %1416 = load i32, i32* %tmode.addr, align 4
  %1417 = load i32, i32* %ignore, align 4
  %call2877 = call %struct.rtx_def* @expand_builtin(%union.tree_node* %1413, %struct.rtx_def* %1414, %struct.rtx_def* %1415, i32 %1416, i32 %1417)
  store %struct.rtx_def* %call2877, %struct.rtx_def** %retval
  br label %return

if.end.2878:                                      ; preds = %land.lhs.true.2845, %land.lhs.true.2832, %sw.bb.2822
  %1418 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %1419 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1420 = load i32, i32* %ignore, align 4
  %call2879 = call %struct.rtx_def* @expand_call(%union.tree_node* %1418, %struct.rtx_def* %1419, i32 %1420)
  store %struct.rtx_def* %call2879, %struct.rtx_def** %retval
  br label %return

sw.bb.2880:                                       ; preds = %if.end.185, %if.end.185, %if.end.185, %if.end.185
  %1421 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2881 = bitcast %union.tree_node* %1421 to %struct.tree_exp*
  %operands2882 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2881, i32 0, i32 2
  %arrayidx2883 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2882, i32 0, i64 0
  %1422 = load %union.tree_node*, %union.tree_node** %arrayidx2883, align 8
  %1423 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp2884 = icmp eq %union.tree_node* %1422, %1423
  br i1 %cmp2884, label %if.then.2886, label %if.end.2887

if.then.2886:                                     ; preds = %sw.bb.2880
  %1424 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %1424, %struct.rtx_def** %retval
  br label %return

if.end.2887:                                      ; preds = %sw.bb.2880
  %1425 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common2888 = bitcast %union.tree_node* %1425 to %struct.tree_common*
  %code2889 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2888, i32 0, i32 2
  %bf.load2890 = load i32, i32* %code2889, align 8
  %bf.clear2891 = and i32 %bf.load2890, 255
  %cmp2892 = icmp eq i32 %bf.clear2891, 21
  br i1 %cmp2892, label %if.then.2894, label %if.end.2982

if.then.2894:                                     ; preds = %if.end.2887
  %1426 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2895 = bitcast %union.tree_node* %1426 to %struct.tree_exp*
  %operands2896 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2895, i32 0, i32 2
  %arrayidx2897 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2896, i32 0, i64 0
  %1427 = load %union.tree_node*, %union.tree_node** %arrayidx2897, align 8
  %common2898 = bitcast %union.tree_node* %1427 to %struct.tree_common*
  %type2899 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2898, i32 0, i32 1
  %1428 = load %union.tree_node*, %union.tree_node** %type2899, align 8
  store %union.tree_node* %1428, %union.tree_node** %valtype, align 8
  %1429 = load i32, i32* %mode, align 4
  %cmp2900 = icmp eq i32 %1429, 51
  br i1 %cmp2900, label %land.lhs.true.2902, label %if.end.2917

land.lhs.true.2902:                               ; preds = %if.then.2894
  %1430 = load %union.tree_node*, %union.tree_node** %valtype, align 8
  %type2903 = bitcast %union.tree_node* %1430 to %struct.tree_type*
  %mode2904 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2903, i32 0, i32 6
  %bf.load2905 = load i32, i32* %mode2904, align 4
  %bf.lshr2906 = lshr i32 %bf.load2905, 9
  %bf.clear2907 = and i32 %bf.lshr2906, 127
  %cmp2908 = icmp eq i32 %bf.clear2907, 51
  br i1 %cmp2908, label %if.then.2910, label %if.end.2917

if.then.2910:                                     ; preds = %land.lhs.true.2902
  %1431 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2912 = bitcast %union.tree_node* %1431 to %struct.tree_exp*
  %operands2913 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2912, i32 0, i32 2
  %arrayidx2914 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2913, i32 0, i64 0
  %1432 = load %union.tree_node*, %union.tree_node** %arrayidx2914, align 8
  %1433 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1434 = load i32, i32* %tmode.addr, align 4
  %1435 = load i32, i32* %modifier.addr, align 4
  %call2915 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1432, %struct.rtx_def* %1433, i32 %1434, i32 %1435)
  store %struct.rtx_def* %call2915, %struct.rtx_def** %result2911, align 8
  %1436 = load %struct.rtx_def*, %struct.rtx_def** %result2911, align 8
  %call2916 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1436)
  store %struct.rtx_def* %call2916, %struct.rtx_def** %result2911, align 8
  %1437 = load %struct.rtx_def*, %struct.rtx_def** %result2911, align 8
  %1438 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %1437, %union.tree_node* %1438, i32 0)
  %1439 = load %struct.rtx_def*, %struct.rtx_def** %result2911, align 8
  store %struct.rtx_def* %1439, %struct.rtx_def** %retval
  br label %return

if.end.2917:                                      ; preds = %land.lhs.true.2902, %if.then.2894
  %1440 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp2918 = icmp eq %struct.rtx_def* %1440, null
  br i1 %cmp2918, label %if.then.2920, label %if.end.2922

if.then.2920:                                     ; preds = %if.end.2917
  %1441 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call2921 = call %struct.rtx_def* @assign_temp(%union.tree_node* %1441, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %call2921, %struct.rtx_def** %target.addr, align 8
  br label %if.end.2922

if.end.2922:                                      ; preds = %if.then.2920, %if.end.2917
  %1442 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1443 = bitcast %struct.rtx_def* %1442 to i32*
  %bf.load2923 = load i32, i32* %1443, align 8
  %bf.clear2924 = and i32 %bf.load2923, 65535
  %cmp2925 = icmp eq i32 %bf.clear2924, 66
  br i1 %cmp2925, label %if.then.2927, label %if.else.2938

if.then.2927:                                     ; preds = %if.end.2922
  %1444 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2928 = bitcast %union.tree_node* %1444 to %struct.tree_exp*
  %operands2929 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2928, i32 0, i32 2
  %arrayidx2930 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2929, i32 0, i64 0
  %1445 = load %union.tree_node*, %union.tree_node** %arrayidx2930, align 8
  %1446 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1447 = load %union.tree_node*, %union.tree_node** %valtype, align 8
  %type2931 = bitcast %union.tree_node* %1447 to %struct.tree_type*
  %mode2932 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2931, i32 0, i32 6
  %bf.load2933 = load i32, i32* %mode2932, align 4
  %bf.lshr2934 = lshr i32 %bf.load2933, 9
  %bf.clear2935 = and i32 %bf.lshr2934, 127
  %call2936 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1446, i32 %bf.clear2935, i64 0, i32 1, i32 1)
  %call2937 = call %struct.rtx_def* @store_expr(%union.tree_node* %1445, %struct.rtx_def* %call2936, i32 0)
  br label %if.end.2981

if.else.2938:                                     ; preds = %if.end.2922
  %1448 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1449 = bitcast %struct.rtx_def* %1448 to i32*
  %bf.load2939 = load i32, i32* %1449, align 8
  %bf.clear2940 = and i32 %bf.load2939, 65535
  %cmp2941 = icmp eq i32 %bf.clear2940, 61
  br i1 %cmp2941, label %if.then.2943, label %if.else.2979

if.then.2943:                                     ; preds = %if.else.2938
  %1450 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1451 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2944 = bitcast %union.tree_node* %1451 to %struct.tree_exp*
  %operands2945 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2944, i32 0, i32 2
  %arrayidx2946 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2945, i32 0, i64 0
  %1452 = load %union.tree_node*, %union.tree_node** %arrayidx2946, align 8
  %common2947 = bitcast %union.tree_node* %1452 to %struct.tree_common*
  %type2948 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2947, i32 0, i32 1
  %1453 = load %union.tree_node*, %union.tree_node** %type2948, align 8
  %call2949 = call i64 @int_size_in_bytes(%union.tree_node* %1453)
  %mul2950 = mul nsw i64 %call2949, 8
  %1454 = load i32, i32* %mode, align 4
  %idxprom2951 = sext i32 %1454 to i64
  %arrayidx2952 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom2951
  %1455 = load i16, i16* %arrayidx2952, align 2
  %conv2953 = zext i16 %1455 to i64
  %cmp2954 = icmp slt i64 %mul2950, %conv2953
  br i1 %cmp2954, label %cond.true.2956, label %cond.false.2964

cond.true.2956:                                   ; preds = %if.then.2943
  %1456 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2957 = bitcast %union.tree_node* %1456 to %struct.tree_exp*
  %operands2958 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2957, i32 0, i32 2
  %arrayidx2959 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2958, i32 0, i64 0
  %1457 = load %union.tree_node*, %union.tree_node** %arrayidx2959, align 8
  %common2960 = bitcast %union.tree_node* %1457 to %struct.tree_common*
  %type2961 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2960, i32 0, i32 1
  %1458 = load %union.tree_node*, %union.tree_node** %type2961, align 8
  %call2962 = call i64 @int_size_in_bytes(%union.tree_node* %1458)
  %mul2963 = mul nsw i64 %call2962, 8
  br label %cond.end.2968

cond.false.2964:                                  ; preds = %if.then.2943
  %1459 = load i32, i32* %mode, align 4
  %idxprom2965 = sext i32 %1459 to i64
  %arrayidx2966 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom2965
  %1460 = load i16, i16* %arrayidx2966, align 2
  %conv2967 = zext i16 %1460 to i64
  br label %cond.end.2968

cond.end.2968:                                    ; preds = %cond.false.2964, %cond.true.2956
  %cond2969 = phi i64 [ %mul2963, %cond.true.2956 ], [ %conv2967, %cond.false.2964 ]
  %1461 = load %union.tree_node*, %union.tree_node** %valtype, align 8
  %type2970 = bitcast %union.tree_node* %1461 to %struct.tree_type*
  %mode2971 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2970, i32 0, i32 6
  %bf.load2972 = load i32, i32* %mode2971, align 4
  %bf.lshr2973 = lshr i32 %bf.load2972, 9
  %bf.clear2974 = and i32 %bf.lshr2973, 127
  %1462 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2975 = bitcast %union.tree_node* %1462 to %struct.tree_exp*
  %operands2976 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2975, i32 0, i32 2
  %arrayidx2977 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2976, i32 0, i64 0
  %1463 = load %union.tree_node*, %union.tree_node** %arrayidx2977, align 8
  %1464 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call2978 = call %struct.rtx_def* @store_field(%struct.rtx_def* %1450, i64 %cond2969, i64 0, i32 %bf.clear2974, %union.tree_node* %1463, i32 0, i32 0, %union.tree_node* %1464, i32 0)
  br label %if.end.2980

if.else.2979:                                     ; preds = %if.else.2938
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7344, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.2980:                                      ; preds = %cond.end.2968
  br label %if.end.2981

if.end.2981:                                      ; preds = %if.end.2980, %if.then.2927
  %1465 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %1465, %struct.rtx_def** %retval
  br label %return

if.end.2982:                                      ; preds = %if.end.2887
  %1466 = load i32, i32* %mode, align 4
  %1467 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2983 = bitcast %union.tree_node* %1467 to %struct.tree_exp*
  %operands2984 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2983, i32 0, i32 2
  %arrayidx2985 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2984, i32 0, i64 0
  %1468 = load %union.tree_node*, %union.tree_node** %arrayidx2985, align 8
  %common2986 = bitcast %union.tree_node* %1468 to %struct.tree_common*
  %type2987 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2986, i32 0, i32 1
  %1469 = load %union.tree_node*, %union.tree_node** %type2987, align 8
  %type2988 = bitcast %union.tree_node* %1469 to %struct.tree_type*
  %mode2989 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2988, i32 0, i32 6
  %bf.load2990 = load i32, i32* %mode2989, align 4
  %bf.lshr2991 = lshr i32 %bf.load2990, 9
  %bf.clear2992 = and i32 %bf.lshr2991, 127
  %cmp2993 = icmp eq i32 %1466, %bf.clear2992
  br i1 %cmp2993, label %if.then.2995, label %if.end.3021

if.then.2995:                                     ; preds = %if.end.2982
  %1470 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2996 = bitcast %union.tree_node* %1470 to %struct.tree_exp*
  %operands2997 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2996, i32 0, i32 2
  %arrayidx2998 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2997, i32 0, i64 0
  %1471 = load %union.tree_node*, %union.tree_node** %arrayidx2998, align 8
  %1472 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1473 = load i32, i32* %modifier.addr, align 4
  %call2999 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1471, %struct.rtx_def* %1472, i32 0, i32 %1473)
  store %struct.rtx_def* %call2999, %struct.rtx_def** %op0, align 8
  %1474 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3000 = bitcast %union.tree_node* %1474 to %struct.tree_exp*
  %operands3001 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3000, i32 0, i32 2
  %arrayidx3002 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3001, i32 0, i64 0
  %1475 = load %union.tree_node*, %union.tree_node** %arrayidx3002, align 8
  %common3003 = bitcast %union.tree_node* %1475 to %struct.tree_common*
  %type3004 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3003, i32 0, i32 1
  %1476 = load %union.tree_node*, %union.tree_node** %type3004, align 8
  %common3005 = bitcast %union.tree_node* %1476 to %struct.tree_common*
  %unsigned_flag3006 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3005, i32 0, i32 2
  %bf.load3007 = load i32, i32* %unsigned_flag3006, align 8
  %bf.lshr3008 = lshr i32 %bf.load3007, 13
  %bf.clear3009 = and i32 %bf.lshr3008, 1
  %1477 = load i32, i32* %unsignedp, align 4
  %cmp3010 = icmp ne i32 %bf.clear3009, %1477
  br i1 %cmp3010, label %land.lhs.true.3012, label %if.end.3020

land.lhs.true.3012:                               ; preds = %if.then.2995
  %1478 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1479 = bitcast %struct.rtx_def* %1478 to i32*
  %bf.load3013 = load i32, i32* %1479, align 8
  %bf.clear3014 = and i32 %bf.load3013, 65535
  %cmp3015 = icmp eq i32 %bf.clear3014, 63
  br i1 %cmp3015, label %if.then.3017, label %if.end.3020

if.then.3017:                                     ; preds = %land.lhs.true.3012
  %1480 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1481 = bitcast %struct.rtx_def* %1480 to i32*
  %bf.load3018 = load i32, i32* %1481, align 8
  %bf.clear3019 = and i32 %bf.load3018, -268435457
  store i32 %bf.clear3019, i32* %1481, align 8
  br label %if.end.3020

if.end.3020:                                      ; preds = %if.then.3017, %land.lhs.true.3012, %if.then.2995
  %1482 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1482, %struct.rtx_def** %retval
  br label %return

if.end.3021:                                      ; preds = %if.end.2982
  %1483 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3022 = bitcast %union.tree_node* %1483 to %struct.tree_exp*
  %operands3023 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3022, i32 0, i32 2
  %arrayidx3024 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3023, i32 0, i64 0
  %1484 = load %union.tree_node*, %union.tree_node** %arrayidx3024, align 8
  %1485 = load i32, i32* %mode, align 4
  %1486 = load i32, i32* %modifier.addr, align 4
  %call3025 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1484, %struct.rtx_def* null, i32 %1485, i32 %1486)
  store %struct.rtx_def* %call3025, %struct.rtx_def** %op0, align 8
  %1487 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1488 = bitcast %struct.rtx_def* %1487 to i32*
  %bf.load3026 = load i32, i32* %1488, align 8
  %bf.lshr3027 = lshr i32 %bf.load3026, 16
  %bf.clear3028 = and i32 %bf.lshr3027, 255
  %1489 = load i32, i32* %mode, align 4
  %cmp3029 = icmp eq i32 %bf.clear3028, %1489
  br i1 %cmp3029, label %if.then.3031, label %if.end.3032

if.then.3031:                                     ; preds = %if.end.3021
  %1490 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1490, %struct.rtx_def** %retval
  br label %return

if.end.3032:                                      ; preds = %if.end.3021
  %1491 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1492 = bitcast %struct.rtx_def* %1491 to i32*
  %bf.load3033 = load i32, i32* %1492, align 8
  %bf.clear3034 = and i32 %bf.load3033, 65535
  %cmp3035 = icmp eq i32 %bf.clear3034, 67
  br i1 %cmp3035, label %if.then.3072, label %lor.lhs.false.3037

lor.lhs.false.3037:                               ; preds = %if.end.3032
  %1493 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1494 = bitcast %struct.rtx_def* %1493 to i32*
  %bf.load3038 = load i32, i32* %1494, align 8
  %bf.clear3039 = and i32 %bf.load3038, 65535
  %cmp3040 = icmp eq i32 %bf.clear3039, 68
  br i1 %cmp3040, label %if.then.3072, label %lor.lhs.false.3042

lor.lhs.false.3042:                               ; preds = %lor.lhs.false.3037
  %1495 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1496 = bitcast %struct.rtx_def* %1495 to i32*
  %bf.load3043 = load i32, i32* %1496, align 8
  %bf.clear3044 = and i32 %bf.load3043, 65535
  %cmp3045 = icmp eq i32 %bf.clear3044, 54
  br i1 %cmp3045, label %if.then.3072, label %lor.lhs.false.3047

lor.lhs.false.3047:                               ; preds = %lor.lhs.false.3042
  %1497 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1498 = bitcast %struct.rtx_def* %1497 to i32*
  %bf.load3048 = load i32, i32* %1498, align 8
  %bf.clear3049 = and i32 %bf.load3048, 65535
  %cmp3050 = icmp eq i32 %bf.clear3049, 55
  br i1 %cmp3050, label %if.then.3072, label %lor.lhs.false.3052

lor.lhs.false.3052:                               ; preds = %lor.lhs.false.3047
  %1499 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1500 = bitcast %struct.rtx_def* %1499 to i32*
  %bf.load3053 = load i32, i32* %1500, align 8
  %bf.clear3054 = and i32 %bf.load3053, 65535
  %cmp3055 = icmp eq i32 %bf.clear3054, 58
  br i1 %cmp3055, label %if.then.3072, label %lor.lhs.false.3057

lor.lhs.false.3057:                               ; preds = %lor.lhs.false.3052
  %1501 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1502 = bitcast %struct.rtx_def* %1501 to i32*
  %bf.load3058 = load i32, i32* %1502, align 8
  %bf.clear3059 = and i32 %bf.load3058, 65535
  %cmp3060 = icmp eq i32 %bf.clear3059, 134
  br i1 %cmp3060, label %if.then.3072, label %lor.lhs.false.3062

lor.lhs.false.3062:                               ; preds = %lor.lhs.false.3057
  %1503 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1504 = bitcast %struct.rtx_def* %1503 to i32*
  %bf.load3063 = load i32, i32* %1504, align 8
  %bf.clear3064 = and i32 %bf.load3063, 65535
  %cmp3065 = icmp eq i32 %bf.clear3064, 56
  br i1 %cmp3065, label %if.then.3072, label %lor.lhs.false.3067

lor.lhs.false.3067:                               ; preds = %lor.lhs.false.3062
  %1505 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1506 = bitcast %struct.rtx_def* %1505 to i32*
  %bf.load3068 = load i32, i32* %1506, align 8
  %bf.clear3069 = and i32 %bf.load3068, 65535
  %cmp3070 = icmp eq i32 %bf.clear3069, 140
  br i1 %cmp3070, label %if.then.3072, label %if.end.3095

if.then.3072:                                     ; preds = %lor.lhs.false.3067, %lor.lhs.false.3062, %lor.lhs.false.3057, %lor.lhs.false.3052, %lor.lhs.false.3047, %lor.lhs.false.3042, %lor.lhs.false.3037, %if.end.3032
  %1507 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3073 = bitcast %union.tree_node* %1507 to %struct.tree_exp*
  %operands3074 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3073, i32 0, i32 2
  %arrayidx3075 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3074, i32 0, i64 0
  %1508 = load %union.tree_node*, %union.tree_node** %arrayidx3075, align 8
  %common3076 = bitcast %union.tree_node* %1508 to %struct.tree_common*
  %type3077 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3076, i32 0, i32 1
  %1509 = load %union.tree_node*, %union.tree_node** %type3077, align 8
  store %union.tree_node* %1509, %union.tree_node** %inner_type, align 8
  %1510 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %type3078 = bitcast %union.tree_node* %1510 to %struct.tree_type*
  %mode3079 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3078, i32 0, i32 6
  %bf.load3080 = load i32, i32* %mode3079, align 4
  %bf.lshr3081 = lshr i32 %bf.load3080, 9
  %bf.clear3082 = and i32 %bf.lshr3081, 127
  store i32 %bf.clear3082, i32* %inner_mode, align 4
  %1511 = load i32, i32* %modifier.addr, align 4
  %cmp3083 = icmp eq i32 %1511, 3
  br i1 %cmp3083, label %if.then.3085, label %if.else.3088

if.then.3085:                                     ; preds = %if.then.3072
  %1512 = load i32, i32* %mode, align 4
  %1513 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1514 = load i32, i32* %inner_mode, align 4
  %1515 = load i32, i32* %mode, align 4
  %1516 = load i32, i32* %inner_mode, align 4
  %call3086 = call i32 @subreg_lowpart_offset(i32 %1515, i32 %1516)
  %call3087 = call %struct.rtx_def* @simplify_gen_subreg(i32 %1512, %struct.rtx_def* %1513, i32 %1514, i32 %call3086)
  store %struct.rtx_def* %call3087, %struct.rtx_def** %retval
  br label %return

if.else.3088:                                     ; preds = %if.then.3072
  %1517 = load i32, i32* %mode, align 4
  %1518 = load i32, i32* %inner_mode, align 4
  %1519 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1520 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %common3089 = bitcast %union.tree_node* %1520 to %struct.tree_common*
  %unsigned_flag3090 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3089, i32 0, i32 2
  %bf.load3091 = load i32, i32* %unsigned_flag3090, align 8
  %bf.lshr3092 = lshr i32 %bf.load3091, 13
  %bf.clear3093 = and i32 %bf.lshr3092, 1
  %call3094 = call %struct.rtx_def* @convert_modes(i32 %1517, i32 %1518, %struct.rtx_def* %1519, i32 %bf.clear3093)
  store %struct.rtx_def* %call3094, %struct.rtx_def** %retval
  br label %return

if.end.3095:                                      ; preds = %lor.lhs.false.3067
  %1521 = load i32, i32* %modifier.addr, align 4
  %cmp3096 = icmp eq i32 %1521, 3
  br i1 %cmp3096, label %if.then.3098, label %if.end.3102

if.then.3098:                                     ; preds = %if.end.3095
  %1522 = load i32, i32* %unsignedp, align 4
  %tobool3099 = icmp ne i32 %1522, 0
  %cond3100 = select i1 %tobool3099, i32 121, i32 120
  %1523 = load i32, i32* %mode, align 4
  %1524 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call3101 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 %cond3100, i32 %1523, %struct.rtx_def* %1524)
  store %struct.rtx_def* %call3101, %struct.rtx_def** %retval
  br label %return

if.end.3102:                                      ; preds = %if.end.3095
  %1525 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp3103 = icmp eq %struct.rtx_def* %1525, null
  br i1 %cmp3103, label %if.then.3105, label %if.else.3117

if.then.3105:                                     ; preds = %if.end.3102
  %1526 = load i32, i32* %mode, align 4
  %1527 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1528 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3106 = bitcast %union.tree_node* %1528 to %struct.tree_exp*
  %operands3107 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3106, i32 0, i32 2
  %arrayidx3108 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3107, i32 0, i64 0
  %1529 = load %union.tree_node*, %union.tree_node** %arrayidx3108, align 8
  %common3109 = bitcast %union.tree_node* %1529 to %struct.tree_common*
  %type3110 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3109, i32 0, i32 1
  %1530 = load %union.tree_node*, %union.tree_node** %type3110, align 8
  %common3111 = bitcast %union.tree_node* %1530 to %struct.tree_common*
  %unsigned_flag3112 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3111, i32 0, i32 2
  %bf.load3113 = load i32, i32* %unsigned_flag3112, align 8
  %bf.lshr3114 = lshr i32 %bf.load3113, 13
  %bf.clear3115 = and i32 %bf.lshr3114, 1
  %call3116 = call %struct.rtx_def* @convert_to_mode(i32 %1526, %struct.rtx_def* %1527, i32 %bf.clear3115)
  store %struct.rtx_def* %call3116, %struct.rtx_def** %retval
  br label %return

if.else.3117:                                     ; preds = %if.end.3102
  %1531 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1532 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1533 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3118 = bitcast %union.tree_node* %1533 to %struct.tree_exp*
  %operands3119 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3118, i32 0, i32 2
  %arrayidx3120 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3119, i32 0, i64 0
  %1534 = load %union.tree_node*, %union.tree_node** %arrayidx3120, align 8
  %common3121 = bitcast %union.tree_node* %1534 to %struct.tree_common*
  %type3122 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3121, i32 0, i32 1
  %1535 = load %union.tree_node*, %union.tree_node** %type3122, align 8
  %common3123 = bitcast %union.tree_node* %1535 to %struct.tree_common*
  %unsigned_flag3124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3123, i32 0, i32 2
  %bf.load3125 = load i32, i32* %unsigned_flag3124, align 8
  %bf.lshr3126 = lshr i32 %bf.load3125, 13
  %bf.clear3127 = and i32 %bf.lshr3126, 1
  call void @convert_move(%struct.rtx_def* %1531, %struct.rtx_def* %1532, i32 %bf.clear3127)
  br label %if.end.3128

if.end.3128:                                      ; preds = %if.else.3117
  %1536 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %1536, %struct.rtx_def** %retval
  br label %return

sw.bb.3129:                                       ; preds = %if.end.185
  %1537 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3130 = bitcast %union.tree_node* %1537 to %struct.tree_exp*
  %operands3131 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3130, i32 0, i32 2
  %arrayidx3132 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3131, i32 0, i64 0
  %1538 = load %union.tree_node*, %union.tree_node** %arrayidx3132, align 8
  %1539 = load i32, i32* %mode, align 4
  %1540 = load i32, i32* %modifier.addr, align 4
  %call3133 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1538, %struct.rtx_def* null, i32 %1539, i32 %1540)
  store %struct.rtx_def* %call3133, %struct.rtx_def** %op0, align 8
  %1541 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3134 = bitcast %union.tree_node* %1541 to %struct.tree_type*
  %mode3135 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3134, i32 0, i32 6
  %bf.load3136 = load i32, i32* %mode3135, align 4
  %bf.lshr3137 = lshr i32 %bf.load3136, 9
  %bf.clear3138 = and i32 %bf.lshr3137, 127
  %1542 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1543 = bitcast %struct.rtx_def* %1542 to i32*
  %bf.load3139 = load i32, i32* %1543, align 8
  %bf.lshr3140 = lshr i32 %bf.load3139, 16
  %bf.clear3141 = and i32 %bf.lshr3140, 255
  %cmp3142 = icmp eq i32 %bf.clear3138, %bf.clear3141
  br i1 %cmp3142, label %if.then.3144, label %if.else.3145

if.then.3144:                                     ; preds = %sw.bb.3129
  br label %if.end.3244

if.else.3145:                                     ; preds = %sw.bb.3129
  %1544 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3146 = bitcast %union.tree_node* %1544 to %struct.tree_type*
  %mode3147 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3146, i32 0, i32 6
  %bf.load3148 = load i32, i32* %mode3147, align 4
  %bf.lshr3149 = lshr i32 %bf.load3148, 9
  %bf.clear3150 = and i32 %bf.lshr3149, 127
  %cmp3151 = icmp ne i32 %bf.clear3150, 51
  br i1 %cmp3151, label %land.lhs.true.3153, label %if.else.3192

land.lhs.true.3153:                               ; preds = %if.else.3145
  %1545 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1546 = bitcast %struct.rtx_def* %1545 to i32*
  %bf.load3154 = load i32, i32* %1546, align 8
  %bf.lshr3155 = lshr i32 %bf.load3154, 16
  %bf.clear3156 = and i32 %bf.lshr3155, 255
  %cmp3157 = icmp ne i32 %bf.clear3156, 51
  br i1 %cmp3157, label %land.lhs.true.3159, label %if.else.3192

land.lhs.true.3159:                               ; preds = %land.lhs.true.3153
  %1547 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3160 = bitcast %union.tree_node* %1547 to %struct.tree_type*
  %mode3161 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3160, i32 0, i32 6
  %bf.load3162 = load i32, i32* %mode3161, align 4
  %bf.lshr3163 = lshr i32 %bf.load3162, 9
  %bf.clear3164 = and i32 %bf.lshr3163, 127
  %idxprom3165 = sext i32 %bf.clear3164 to i64
  %arrayidx3166 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom3165
  %1548 = load i8, i8* %arrayidx3166, align 1
  %conv3167 = zext i8 %1548 to i32
  %1549 = load i32, i32* @target_flags, align 4
  %and3168 = and i32 %1549, 33554432
  %tobool3169 = icmp ne i32 %and3168, 0
  %cond3170 = select i1 %tobool3169, i32 8, i32 4
  %cmp3171 = icmp sle i32 %conv3167, %cond3170
  br i1 %cmp3171, label %land.lhs.true.3173, label %if.else.3192

land.lhs.true.3173:                               ; preds = %land.lhs.true.3159
  %1550 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1551 = bitcast %struct.rtx_def* %1550 to i32*
  %bf.load3174 = load i32, i32* %1551, align 8
  %bf.lshr3175 = lshr i32 %bf.load3174, 16
  %bf.clear3176 = and i32 %bf.lshr3175, 255
  %idxprom3177 = sext i32 %bf.clear3176 to i64
  %arrayidx3178 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom3177
  %1552 = load i8, i8* %arrayidx3178, align 1
  %conv3179 = zext i8 %1552 to i32
  %1553 = load i32, i32* @target_flags, align 4
  %and3180 = and i32 %1553, 33554432
  %tobool3181 = icmp ne i32 %and3180, 0
  %cond3182 = select i1 %tobool3181, i32 8, i32 4
  %cmp3183 = icmp sle i32 %conv3179, %cond3182
  br i1 %cmp3183, label %if.then.3185, label %if.else.3192

if.then.3185:                                     ; preds = %land.lhs.true.3173
  %1554 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3186 = bitcast %union.tree_node* %1554 to %struct.tree_type*
  %mode3187 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3186, i32 0, i32 6
  %bf.load3188 = load i32, i32* %mode3187, align 4
  %bf.lshr3189 = lshr i32 %bf.load3188, 9
  %bf.clear3190 = and i32 %bf.lshr3189, 127
  %1555 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call3191 = call %struct.rtx_def* @gen_lowpart(i32 %bf.clear3190, %struct.rtx_def* %1555)
  store %struct.rtx_def* %call3191, %struct.rtx_def** %op0, align 8
  br label %if.end.3243

if.else.3192:                                     ; preds = %land.lhs.true.3173, %land.lhs.true.3159, %land.lhs.true.3153, %if.else.3145
  %1556 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1557 = bitcast %struct.rtx_def* %1556 to i32*
  %bf.load3193 = load i32, i32* %1557, align 8
  %bf.clear3194 = and i32 %bf.load3193, 65535
  %cmp3195 = icmp ne i32 %bf.clear3194, 66
  br i1 %cmp3195, label %if.then.3197, label %if.end.3242

if.then.3197:                                     ; preds = %if.else.3192
  %1558 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3199 = bitcast %union.tree_node* %1558 to %struct.tree_exp*
  %operands3200 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3199, i32 0, i32 2
  %arrayidx3201 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3200, i32 0, i64 0
  %1559 = load %union.tree_node*, %union.tree_node** %arrayidx3201, align 8
  %common3202 = bitcast %union.tree_node* %1559 to %struct.tree_common*
  %type3203 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3202, i32 0, i32 1
  %1560 = load %union.tree_node*, %union.tree_node** %type3203, align 8
  store %union.tree_node* %1560, %union.tree_node** %inner_type3198, align 8
  %1561 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common3204 = bitcast %union.tree_node* %1561 to %struct.tree_common*
  %addressable_flag3205 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3204, i32 0, i32 2
  %bf.load3206 = load i32, i32* %addressable_flag3205, align 8
  %bf.lshr3207 = lshr i32 %bf.load3206, 10
  %bf.clear3208 = and i32 %bf.lshr3207, 1
  %tobool3209 = icmp ne i32 %bf.clear3208, 0
  br i1 %tobool3209, label %if.then.3210, label %if.end.3211

if.then.3210:                                     ; preds = %if.then.3197
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7418, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.3211:                                      ; preds = %if.then.3197
  %1562 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp3212 = icmp eq %struct.rtx_def* %1562, null
  br i1 %cmp3212, label %if.then.3225, label %lor.lhs.false.3214

lor.lhs.false.3214:                               ; preds = %if.end.3211
  %1563 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1564 = bitcast %struct.rtx_def* %1563 to i32*
  %bf.load3215 = load i32, i32* %1564, align 8
  %bf.lshr3216 = lshr i32 %bf.load3215, 16
  %bf.clear3217 = and i32 %bf.lshr3216, 255
  %1565 = load %union.tree_node*, %union.tree_node** %inner_type3198, align 8
  %type3218 = bitcast %union.tree_node* %1565 to %struct.tree_type*
  %mode3219 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3218, i32 0, i32 6
  %bf.load3220 = load i32, i32* %mode3219, align 4
  %bf.lshr3221 = lshr i32 %bf.load3220, 9
  %bf.clear3222 = and i32 %bf.lshr3221, 127
  %cmp3223 = icmp ne i32 %bf.clear3217, %bf.clear3222
  br i1 %cmp3223, label %if.then.3225, label %if.end.3240

if.then.3225:                                     ; preds = %lor.lhs.false.3214, %if.end.3211
  %1566 = load %union.tree_node*, %union.tree_node** %inner_type3198, align 8
  %type3226 = bitcast %union.tree_node* %1566 to %struct.tree_type*
  %mode3227 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3226, i32 0, i32 6
  %bf.load3228 = load i32, i32* %mode3227, align 4
  %bf.lshr3229 = lshr i32 %bf.load3228, 9
  %bf.clear3230 = and i32 %bf.lshr3229, 127
  %1567 = load %union.tree_node*, %union.tree_node** %inner_type3198, align 8
  %type3231 = bitcast %union.tree_node* %1567 to %struct.tree_type*
  %mode3232 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3231, i32 0, i32 6
  %bf.load3233 = load i32, i32* %mode3232, align 4
  %bf.lshr3234 = lshr i32 %bf.load3233, 9
  %bf.clear3235 = and i32 %bf.lshr3234, 127
  %idxprom3236 = sext i32 %bf.clear3235 to i64
  %arrayidx3237 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom3236
  %1568 = load i8, i8* %arrayidx3237, align 1
  %conv3238 = zext i8 %1568 to i64
  %1569 = load %union.tree_node*, %union.tree_node** %inner_type3198, align 8
  %call3239 = call %struct.rtx_def* @assign_stack_temp_for_type(i32 %bf.clear3230, i64 %conv3238, i32 0, %union.tree_node* %1569)
  store %struct.rtx_def* %call3239, %struct.rtx_def** %target.addr, align 8
  br label %if.end.3240

if.end.3240:                                      ; preds = %if.then.3225, %lor.lhs.false.3214
  %1570 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %1571 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call3241 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1570, %struct.rtx_def* %1571)
  %1572 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %1572, %struct.rtx_def** %op0, align 8
  br label %if.end.3242

if.end.3242:                                      ; preds = %if.end.3240, %if.else.3192
  br label %if.end.3243

if.end.3243:                                      ; preds = %if.end.3242, %if.then.3185
  br label %if.end.3244

if.end.3244:                                      ; preds = %if.end.3243, %if.then.3144
  %1573 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1574 = bitcast %struct.rtx_def* %1573 to i32*
  %bf.load3245 = load i32, i32* %1574, align 8
  %bf.clear3246 = and i32 %bf.load3245, 65535
  %cmp3247 = icmp eq i32 %bf.clear3246, 66
  br i1 %cmp3247, label %if.then.3249, label %if.end.3401

if.then.3249:                                     ; preds = %if.end.3244
  %1575 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call3250 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1575)
  store %struct.rtx_def* %call3250, %struct.rtx_def** %op0, align 8
  %1576 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common3251 = bitcast %union.tree_node* %1576 to %struct.tree_common*
  %nothrow_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3251, i32 0, i32 2
  %bf.load3252 = load i32, i32* %nothrow_flag, align 8
  %bf.lshr3253 = lshr i32 %bf.load3252, 17
  %bf.clear3254 = and i32 %bf.lshr3253, 1
  %tobool3255 = icmp ne i32 %bf.clear3254, 0
  br i1 %tobool3255, label %if.then.3256, label %if.else.3293

if.then.3256:                                     ; preds = %if.then.3249
  %1577 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1578 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1578, i32 0, i32 1
  %arrayidx3258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3257, i32 0, i64 1
  %rtmem3259 = bitcast %union.rtunion_def* %arrayidx3258 to %struct.mem_attrs**
  %1579 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem3259, align 8
  %cmp3260 = icmp ne %struct.mem_attrs* %1579, null
  br i1 %cmp3260, label %cond.true.3262, label %cond.false.3267

cond.true.3262:                                   ; preds = %if.then.3256
  %1580 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1580, i32 0, i32 1
  %arrayidx3264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3263, i32 0, i64 1
  %rtmem3265 = bitcast %union.rtunion_def* %arrayidx3264 to %struct.mem_attrs**
  %1581 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem3265, align 8
  %align3266 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %1581, i32 0, i32 4
  %1582 = load i32, i32* %align3266, align 4
  br label %cond.end.3268

cond.false.3267:                                  ; preds = %if.then.3256
  br label %cond.end.3268

cond.end.3268:                                    ; preds = %cond.false.3267, %cond.true.3262
  %cond3269 = phi i32 [ %1582, %cond.true.3262 ], [ 8, %cond.false.3267 ]
  %1583 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3270 = bitcast %union.tree_node* %1583 to %struct.tree_type*
  %align3271 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3270, i32 0, i32 7
  %1584 = load i32, i32* %align3271, align 4
  %cmp3272 = icmp ugt i32 %cond3269, %1584
  br i1 %cmp3272, label %cond.true.3274, label %cond.false.3288

cond.true.3274:                                   ; preds = %cond.end.3268
  %1585 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3275 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1585, i32 0, i32 1
  %arrayidx3276 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3275, i32 0, i64 1
  %rtmem3277 = bitcast %union.rtunion_def* %arrayidx3276 to %struct.mem_attrs**
  %1586 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem3277, align 8
  %cmp3278 = icmp ne %struct.mem_attrs* %1586, null
  br i1 %cmp3278, label %cond.true.3280, label %cond.false.3285

cond.true.3280:                                   ; preds = %cond.true.3274
  %1587 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3281 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1587, i32 0, i32 1
  %arrayidx3282 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3281, i32 0, i64 1
  %rtmem3283 = bitcast %union.rtunion_def* %arrayidx3282 to %struct.mem_attrs**
  %1588 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem3283, align 8
  %align3284 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %1588, i32 0, i32 4
  %1589 = load i32, i32* %align3284, align 4
  br label %cond.end.3286

cond.false.3285:                                  ; preds = %cond.true.3274
  br label %cond.end.3286

cond.end.3286:                                    ; preds = %cond.false.3285, %cond.true.3280
  %cond3287 = phi i32 [ %1589, %cond.true.3280 ], [ 8, %cond.false.3285 ]
  br label %cond.end.3291

cond.false.3288:                                  ; preds = %cond.end.3268
  %1590 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3289 = bitcast %union.tree_node* %1590 to %struct.tree_type*
  %align3290 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3289, i32 0, i32 7
  %1591 = load i32, i32* %align3290, align 4
  br label %cond.end.3291

cond.end.3291:                                    ; preds = %cond.false.3288, %cond.end.3286
  %cond3292 = phi i32 [ %cond3287, %cond.end.3286 ], [ %1591, %cond.false.3288 ]
  call void @set_mem_align(%struct.rtx_def* %1577, i32 %cond3292)
  br label %if.end.3394

if.else.3293:                                     ; preds = %if.then.3249
  %1592 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3294 = bitcast %union.tree_node* %1592 to %struct.tree_type*
  %mode3295 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3294, i32 0, i32 6
  %bf.load3296 = load i32, i32* %mode3295, align 4
  %bf.lshr3297 = lshr i32 %bf.load3296, 9
  %bf.clear3298 = and i32 %bf.lshr3297, 127
  %cmp3299 = icmp ne i32 %bf.clear3298, 51
  br i1 %cmp3299, label %land.lhs.true.3301, label %if.end.3393

land.lhs.true.3301:                               ; preds = %if.else.3293
  br i1 false, label %land.lhs.true.3302, label %if.end.3393

land.lhs.true.3302:                               ; preds = %land.lhs.true.3301
  %1593 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3303 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1593, i32 0, i32 1
  %arrayidx3304 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3303, i32 0, i64 1
  %rtmem3305 = bitcast %union.rtunion_def* %arrayidx3304 to %struct.mem_attrs**
  %1594 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem3305, align 8
  %cmp3306 = icmp ne %struct.mem_attrs* %1594, null
  br i1 %cmp3306, label %cond.true.3308, label %cond.false.3313

cond.true.3308:                                   ; preds = %land.lhs.true.3302
  %1595 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3309 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1595, i32 0, i32 1
  %arrayidx3310 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3309, i32 0, i64 1
  %rtmem3311 = bitcast %union.rtunion_def* %arrayidx3310 to %struct.mem_attrs**
  %1596 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem3311, align 8
  %align3312 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %1596, i32 0, i32 4
  %1597 = load i32, i32* %align3312, align 4
  br label %cond.end.3314

cond.false.3313:                                  ; preds = %land.lhs.true.3302
  br label %cond.end.3314

cond.end.3314:                                    ; preds = %cond.false.3313, %cond.true.3308
  %cond3315 = phi i32 [ %1597, %cond.true.3308 ], [ 8, %cond.false.3313 ]
  %1598 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3316 = bitcast %union.tree_node* %1598 to %struct.tree_type*
  %mode3317 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3316, i32 0, i32 6
  %bf.load3318 = load i32, i32* %mode3317, align 4
  %bf.lshr3319 = lshr i32 %bf.load3318, 9
  %bf.clear3320 = and i32 %bf.lshr3319, 127
  %call3321 = call i32 @get_mode_alignment(i32 %bf.clear3320)
  %cmp3322 = icmp ult i32 %cond3315, %call3321
  br i1 %cmp3322, label %if.then.3324, label %if.end.3393

if.then.3324:                                     ; preds = %cond.end.3314
  %1599 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3326 = bitcast %union.tree_node* %1599 to %struct.tree_exp*
  %operands3327 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3326, i32 0, i32 2
  %arrayidx3328 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3327, i32 0, i64 0
  %1600 = load %union.tree_node*, %union.tree_node** %arrayidx3328, align 8
  %common3329 = bitcast %union.tree_node* %1600 to %struct.tree_common*
  %type3330 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3329, i32 0, i32 1
  %1601 = load %union.tree_node*, %union.tree_node** %type3330, align 8
  store %union.tree_node* %1601, %union.tree_node** %inner_type3325, align 8
  %1602 = load %union.tree_node*, %union.tree_node** %inner_type3325, align 8
  %call3331 = call i64 @int_size_in_bytes(%union.tree_node* %1602)
  %1603 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3332 = bitcast %union.tree_node* %1603 to %struct.tree_type*
  %mode3333 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3332, i32 0, i32 6
  %bf.load3334 = load i32, i32* %mode3333, align 4
  %bf.lshr3335 = lshr i32 %bf.load3334, 9
  %bf.clear3336 = and i32 %bf.lshr3335, 127
  %idxprom3337 = sext i32 %bf.clear3336 to i64
  %arrayidx3338 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom3337
  %1604 = load i8, i8* %arrayidx3338, align 1
  %conv3339 = zext i8 %1604 to i64
  %cmp3340 = icmp sgt i64 %call3331, %conv3339
  br i1 %cmp3340, label %cond.true.3342, label %cond.false.3344

cond.true.3342:                                   ; preds = %if.then.3324
  %1605 = load %union.tree_node*, %union.tree_node** %inner_type3325, align 8
  %call3343 = call i64 @int_size_in_bytes(%union.tree_node* %1605)
  br label %cond.end.3353

cond.false.3344:                                  ; preds = %if.then.3324
  %1606 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3345 = bitcast %union.tree_node* %1606 to %struct.tree_type*
  %mode3346 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3345, i32 0, i32 6
  %bf.load3347 = load i32, i32* %mode3346, align 4
  %bf.lshr3348 = lshr i32 %bf.load3347, 9
  %bf.clear3349 = and i32 %bf.lshr3348, 127
  %idxprom3350 = sext i32 %bf.clear3349 to i64
  %arrayidx3351 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom3350
  %1607 = load i8, i8* %arrayidx3351, align 1
  %conv3352 = zext i8 %1607 to i64
  br label %cond.end.3353

cond.end.3353:                                    ; preds = %cond.false.3344, %cond.true.3342
  %cond3354 = phi i64 [ %call3343, %cond.true.3342 ], [ %conv3352, %cond.false.3344 ]
  store i64 %cond3354, i64* %temp_size, align 8
  %1608 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3356 = bitcast %union.tree_node* %1608 to %struct.tree_type*
  %mode3357 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3356, i32 0, i32 6
  %bf.load3358 = load i32, i32* %mode3357, align 4
  %bf.lshr3359 = lshr i32 %bf.load3358, 9
  %bf.clear3360 = and i32 %bf.lshr3359, 127
  %1609 = load i64, i64* %temp_size, align 8
  %1610 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call3361 = call %struct.rtx_def* @assign_stack_temp_for_type(i32 %bf.clear3360, i64 %1609, i32 0, %union.tree_node* %1610)
  store %struct.rtx_def* %call3361, %struct.rtx_def** %new3355, align 8
  %1611 = load %struct.rtx_def*, %struct.rtx_def** %new3355, align 8
  %1612 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1613 = bitcast %struct.rtx_def* %1612 to i32*
  %bf.load3362 = load i32, i32* %1613, align 8
  %bf.lshr3363 = lshr i32 %bf.load3362, 16
  %bf.clear3364 = and i32 %bf.lshr3363, 255
  %call3365 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1611, i32 %bf.clear3364, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call3365, %struct.rtx_def** %new_with_op0_mode, align 8
  %1614 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common3366 = bitcast %union.tree_node* %1614 to %struct.tree_common*
  %addressable_flag3367 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3366, i32 0, i32 2
  %bf.load3368 = load i32, i32* %addressable_flag3367, align 8
  %bf.lshr3369 = lshr i32 %bf.load3368, 10
  %bf.clear3370 = and i32 %bf.lshr3369, 1
  %tobool3371 = icmp ne i32 %bf.clear3370, 0
  br i1 %tobool3371, label %if.then.3372, label %if.end.3373

if.then.3372:                                     ; preds = %cond.end.3353
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7452, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.3373:                                      ; preds = %cond.end.3353
  %1615 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1616 = bitcast %struct.rtx_def* %1615 to i32*
  %bf.load3374 = load i32, i32* %1616, align 8
  %bf.lshr3375 = lshr i32 %bf.load3374, 16
  %bf.clear3376 = and i32 %bf.lshr3375, 255
  %cmp3377 = icmp eq i32 %bf.clear3376, 51
  br i1 %cmp3377, label %if.then.3379, label %if.else.3390

if.then.3379:                                     ; preds = %if.end.3373
  %1617 = load %struct.rtx_def*, %struct.rtx_def** %new_with_op0_mode, align 8
  %1618 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1619 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3380 = bitcast %union.tree_node* %1619 to %struct.tree_type*
  %mode3381 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3380, i32 0, i32 6
  %bf.load3382 = load i32, i32* %mode3381, align 4
  %bf.lshr3383 = lshr i32 %bf.load3382, 9
  %bf.clear3384 = and i32 %bf.lshr3383, 127
  %idxprom3385 = sext i32 %bf.clear3384 to i64
  %arrayidx3386 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom3385
  %1620 = load i8, i8* %arrayidx3386, align 1
  %conv3387 = zext i8 %1620 to i64
  %call3388 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv3387)
  %call3389 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %1617, %struct.rtx_def* %1618, %struct.rtx_def* %call3388)
  br label %if.end.3392

if.else.3390:                                     ; preds = %if.end.3373
  %1621 = load %struct.rtx_def*, %struct.rtx_def** %new_with_op0_mode, align 8
  %1622 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call3391 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1621, %struct.rtx_def* %1622)
  br label %if.end.3392

if.end.3392:                                      ; preds = %if.else.3390, %if.then.3379
  %1623 = load %struct.rtx_def*, %struct.rtx_def** %new3355, align 8
  store %struct.rtx_def* %1623, %struct.rtx_def** %op0, align 8
  br label %if.end.3393

if.end.3393:                                      ; preds = %if.end.3392, %cond.end.3314, %land.lhs.true.3301, %if.else.3293
  br label %if.end.3394

if.end.3394:                                      ; preds = %if.end.3393, %cond.end.3291
  %1624 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1625 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3395 = bitcast %union.tree_node* %1625 to %struct.tree_type*
  %mode3396 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3395, i32 0, i32 6
  %bf.load3397 = load i32, i32* %mode3396, align 4
  %bf.lshr3398 = lshr i32 %bf.load3397, 9
  %bf.clear3399 = and i32 %bf.lshr3398, 127
  %call3400 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1624, i32 %bf.clear3399, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call3400, %struct.rtx_def** %op0, align 8
  br label %if.end.3401

if.end.3401:                                      ; preds = %if.end.3394, %if.end.3244
  %1626 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1626, %struct.rtx_def** %retval
  br label %return

sw.bb.3402:                                       ; preds = %if.end.185
  br label %plus_expr

plus_expr:                                        ; preds = %if.else.4012, %sw.bb.3402
  %1627 = load i32, i32* %unsignedp, align 4
  %tobool3403 = icmp ne i32 %1627, 0
  br i1 %tobool3403, label %cond.false.3412, label %land.lhs.true.3404

land.lhs.true.3404:                               ; preds = %plus_expr
  %1628 = load i32, i32* @flag_trapv, align 4
  %tobool3405 = icmp ne i32 %1628, 0
  br i1 %tobool3405, label %land.lhs.true.3406, label %cond.false.3412

land.lhs.true.3406:                               ; preds = %land.lhs.true.3404
  %1629 = load i32, i32* %mode, align 4
  %idxprom3407 = sext i32 %1629 to i64
  %arrayidx3408 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom3407
  %1630 = load i32, i32* %arrayidx3408, align 4
  %cmp3409 = icmp eq i32 %1630, 1
  br i1 %cmp3409, label %cond.true.3411, label %cond.false.3412

cond.true.3411:                                   ; preds = %land.lhs.true.3406
  %1631 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 1), align 8
  br label %cond.end.3413

cond.false.3412:                                  ; preds = %land.lhs.true.3406, %land.lhs.true.3404, %plus_expr
  %1632 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  br label %cond.end.3413

cond.end.3413:                                    ; preds = %cond.false.3412, %cond.true.3411
  %cond3414 = phi %struct.optab* [ %1631, %cond.true.3411 ], [ %1632, %cond.false.3412 ]
  store %struct.optab* %cond3414, %struct.optab** %this_optab, align 8
  %1633 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3415 = bitcast %union.tree_node* %1633 to %struct.tree_exp*
  %operands3416 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3415, i32 0, i32 2
  %arrayidx3417 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3416, i32 0, i64 0
  %1634 = load %union.tree_node*, %union.tree_node** %arrayidx3417, align 8
  %common3418 = bitcast %union.tree_node* %1634 to %struct.tree_common*
  %code3419 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3418, i32 0, i32 2
  %bf.load3420 = load i32, i32* %code3419, align 8
  %bf.clear3421 = and i32 %bf.load3420, 255
  %cmp3422 = icmp eq i32 %bf.clear3421, 59
  br i1 %cmp3422, label %land.lhs.true.3424, label %if.end.3493

land.lhs.true.3424:                               ; preds = %cond.end.3413
  %1635 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3425 = bitcast %union.tree_node* %1635 to %struct.tree_exp*
  %operands3426 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3425, i32 0, i32 2
  %arrayidx3427 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3426, i32 0, i64 0
  %1636 = load %union.tree_node*, %union.tree_node** %arrayidx3427, align 8
  %exp3428 = bitcast %union.tree_node* %1636 to %struct.tree_exp*
  %operands3429 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3428, i32 0, i32 2
  %arrayidx3430 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3429, i32 0, i64 1
  %1637 = load %union.tree_node*, %union.tree_node** %arrayidx3430, align 8
  %common3431 = bitcast %union.tree_node* %1637 to %struct.tree_common*
  %code3432 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3431, i32 0, i32 2
  %bf.load3433 = load i32, i32* %code3432, align 8
  %bf.clear3434 = and i32 %bf.load3433, 255
  %cmp3435 = icmp eq i32 %bf.clear3434, 25
  br i1 %cmp3435, label %land.lhs.true.3437, label %if.end.3493

land.lhs.true.3437:                               ; preds = %land.lhs.true.3424
  %1638 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3438 = bitcast %union.tree_node* %1638 to %struct.tree_exp*
  %operands3439 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3438, i32 0, i32 2
  %arrayidx3440 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3439, i32 0, i64 1
  %1639 = load %union.tree_node*, %union.tree_node** %arrayidx3440, align 8
  %common3441 = bitcast %union.tree_node* %1639 to %struct.tree_common*
  %code3442 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3441, i32 0, i32 2
  %bf.load3443 = load i32, i32* %code3442, align 8
  %bf.clear3444 = and i32 %bf.load3443, 255
  %cmp3445 = icmp eq i32 %bf.clear3444, 120
  br i1 %cmp3445, label %land.lhs.true.3447, label %if.end.3493

land.lhs.true.3447:                               ; preds = %land.lhs.true.3437
  %1640 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3448 = bitcast %union.tree_node* %1640 to %struct.tree_exp*
  %operands3449 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3448, i32 0, i32 2
  %arrayidx3450 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3449, i32 0, i64 1
  %1641 = load %union.tree_node*, %union.tree_node** %arrayidx3450, align 8
  %exp3451 = bitcast %union.tree_node* %1641 to %struct.tree_exp*
  %operands3452 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3451, i32 0, i32 2
  %arrayidx3453 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3452, i32 0, i64 1
  %1642 = bitcast %union.tree_node** %arrayidx3453 to %struct.rtx_def**
  %1643 = load %struct.rtx_def*, %struct.rtx_def** %1642, align 8
  %1644 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp3454 = icmp eq %struct.rtx_def* %1643, %1644
  br i1 %cmp3454, label %if.then.3474, label %lor.lhs.false.3456

lor.lhs.false.3456:                               ; preds = %land.lhs.true.3447
  %1645 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3457 = bitcast %union.tree_node* %1645 to %struct.tree_exp*
  %operands3458 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3457, i32 0, i32 2
  %arrayidx3459 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3458, i32 0, i64 1
  %1646 = load %union.tree_node*, %union.tree_node** %arrayidx3459, align 8
  %exp3460 = bitcast %union.tree_node* %1646 to %struct.tree_exp*
  %operands3461 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3460, i32 0, i32 2
  %arrayidx3462 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3461, i32 0, i64 1
  %1647 = bitcast %union.tree_node** %arrayidx3462 to %struct.rtx_def**
  %1648 = load %struct.rtx_def*, %struct.rtx_def** %1647, align 8
  %1649 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp3463 = icmp eq %struct.rtx_def* %1648, %1649
  br i1 %cmp3463, label %if.then.3474, label %lor.lhs.false.3465

lor.lhs.false.3465:                               ; preds = %lor.lhs.false.3456
  %1650 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3466 = bitcast %union.tree_node* %1650 to %struct.tree_exp*
  %operands3467 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3466, i32 0, i32 2
  %arrayidx3468 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3467, i32 0, i64 1
  %1651 = load %union.tree_node*, %union.tree_node** %arrayidx3468, align 8
  %exp3469 = bitcast %union.tree_node* %1651 to %struct.tree_exp*
  %operands3470 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3469, i32 0, i32 2
  %arrayidx3471 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3470, i32 0, i64 1
  %1652 = bitcast %union.tree_node** %arrayidx3471 to %struct.rtx_def**
  %1653 = load %struct.rtx_def*, %struct.rtx_def** %1652, align 8
  %1654 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp3472 = icmp eq %struct.rtx_def* %1653, %1654
  br i1 %cmp3472, label %if.then.3474, label %if.end.3493

if.then.3474:                                     ; preds = %lor.lhs.false.3465, %lor.lhs.false.3456, %land.lhs.true.3447
  %1655 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3475 = bitcast %union.tree_node* %1655 to %struct.tree_exp*
  %operands3476 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3475, i32 0, i32 2
  %arrayidx3477 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3476, i32 0, i64 1
  %1656 = load %union.tree_node*, %union.tree_node** %arrayidx3477, align 8
  store %union.tree_node* %1656, %union.tree_node** %t, align 8
  %1657 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3478 = bitcast %union.tree_node* %1657 to %struct.tree_exp*
  %operands3479 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3478, i32 0, i32 2
  %arrayidx3480 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3479, i32 0, i64 0
  %1658 = load %union.tree_node*, %union.tree_node** %arrayidx3480, align 8
  %exp3481 = bitcast %union.tree_node* %1658 to %struct.tree_exp*
  %operands3482 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3481, i32 0, i32 2
  %arrayidx3483 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3482, i32 0, i64 0
  %1659 = load %union.tree_node*, %union.tree_node** %arrayidx3483, align 8
  %1660 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3484 = bitcast %union.tree_node* %1660 to %struct.tree_exp*
  %operands3485 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3484, i32 0, i32 2
  %arrayidx3486 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3485, i32 0, i64 1
  store %union.tree_node* %1659, %union.tree_node** %arrayidx3486, align 8
  %1661 = load %union.tree_node*, %union.tree_node** %t, align 8
  %1662 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3487 = bitcast %union.tree_node* %1662 to %struct.tree_exp*
  %operands3488 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3487, i32 0, i32 2
  %arrayidx3489 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3488, i32 0, i64 0
  %1663 = load %union.tree_node*, %union.tree_node** %arrayidx3489, align 8
  %exp3490 = bitcast %union.tree_node* %1663 to %struct.tree_exp*
  %operands3491 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3490, i32 0, i32 2
  %arrayidx3492 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3491, i32 0, i64 0
  store %union.tree_node* %1661, %union.tree_node** %arrayidx3492, align 8
  br label %if.end.3493

if.end.3493:                                      ; preds = %if.then.3474, %lor.lhs.false.3465, %land.lhs.true.3437, %land.lhs.true.3424, %cond.end.3413
  %1664 = load i32, i32* %modifier.addr, align 4
  %cmp3494 = icmp eq i32 %1664, 1
  br i1 %cmp3494, label %if.then.3506, label %lor.lhs.false.3496

lor.lhs.false.3496:                               ; preds = %if.end.3493
  %1665 = load i32, i32* %modifier.addr, align 4
  %cmp3497 = icmp eq i32 %1665, 3
  br i1 %cmp3497, label %if.then.3506, label %lor.lhs.false.3499

lor.lhs.false.3499:                               ; preds = %lor.lhs.false.3496
  %1666 = load i32, i32* %mode, align 4
  %1667 = load i32, i32* @ptr_mode, align 4
  %cmp3500 = icmp eq i32 %1666, %1667
  br i1 %cmp3500, label %land.lhs.true.3502, label %if.end.3684

land.lhs.true.3502:                               ; preds = %lor.lhs.false.3499
  %1668 = load i32, i32* %unsignedp, align 4
  %tobool3503 = icmp ne i32 %1668, 0
  br i1 %tobool3503, label %if.then.3506, label %lor.lhs.false.3504

lor.lhs.false.3504:                               ; preds = %land.lhs.true.3502
  %1669 = load i32, i32* @flag_trapv, align 4
  %tobool3505 = icmp ne i32 %1669, 0
  br i1 %tobool3505, label %if.end.3684, label %if.then.3506

if.then.3506:                                     ; preds = %lor.lhs.false.3504, %land.lhs.true.3502, %lor.lhs.false.3496, %if.end.3493
  %1670 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3507 = bitcast %union.tree_node* %1670 to %struct.tree_exp*
  %operands3508 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3507, i32 0, i32 2
  %arrayidx3509 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3508, i32 0, i64 0
  %1671 = load %union.tree_node*, %union.tree_node** %arrayidx3509, align 8
  %common3510 = bitcast %union.tree_node* %1671 to %struct.tree_common*
  %code3511 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3510, i32 0, i32 2
  %bf.load3512 = load i32, i32* %code3511, align 8
  %bf.clear3513 = and i32 %bf.load3512, 255
  %cmp3514 = icmp eq i32 %bf.clear3513, 25
  br i1 %cmp3514, label %land.lhs.true.3516, label %if.else.3566

land.lhs.true.3516:                               ; preds = %if.then.3506
  %1672 = load i32, i32* %mode, align 4
  %idxprom3517 = sext i32 %1672 to i64
  %arrayidx3518 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom3517
  %1673 = load i16, i16* %arrayidx3518, align 2
  %conv3519 = zext i16 %1673 to i32
  %cmp3520 = icmp sle i32 %conv3519, 64
  br i1 %cmp3520, label %land.lhs.true.3522, label %if.else.3566

land.lhs.true.3522:                               ; preds = %land.lhs.true.3516
  %1674 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3523 = bitcast %union.tree_node* %1674 to %struct.tree_exp*
  %operands3524 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3523, i32 0, i32 2
  %arrayidx3525 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3524, i32 0, i64 1
  %1675 = load %union.tree_node*, %union.tree_node** %arrayidx3525, align 8
  %common3526 = bitcast %union.tree_node* %1675 to %struct.tree_common*
  %constant_flag3527 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3526, i32 0, i32 2
  %bf.load3528 = load i32, i32* %constant_flag3527, align 8
  %bf.lshr3529 = lshr i32 %bf.load3528, 9
  %bf.clear3530 = and i32 %bf.lshr3529, 1
  %tobool3531 = icmp ne i32 %bf.clear3530, 0
  br i1 %tobool3531, label %if.then.3532, label %if.else.3566

if.then.3532:                                     ; preds = %land.lhs.true.3522
  %1676 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3533 = bitcast %union.tree_node* %1676 to %struct.tree_exp*
  %operands3534 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3533, i32 0, i32 2
  %arrayidx3535 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3534, i32 0, i64 1
  %1677 = load %union.tree_node*, %union.tree_node** %arrayidx3535, align 8
  %1678 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call3536 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1677, %struct.rtx_def* %1678, i32 0, i32 1)
  store %struct.rtx_def* %call3536, %struct.rtx_def** %op1, align 8
  %1679 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3537 = bitcast %union.tree_node* %1679 to %struct.tree_exp*
  %operands3538 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3537, i32 0, i32 2
  %arrayidx3539 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3538, i32 0, i64 0
  %1680 = load %union.tree_node*, %union.tree_node** %arrayidx3539, align 8
  %int_cst3540 = bitcast %union.tree_node* %1680 to %struct.tree_int_cst*
  %int_cst3541 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst3540, i32 0, i32 2
  %low3542 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst3541, i32 0, i32 0
  %1681 = load i64, i64* %low3542, align 8
  %1682 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3543 = bitcast %union.tree_node* %1682 to %struct.tree_exp*
  %operands3544 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3543, i32 0, i32 2
  %arrayidx3545 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3544, i32 0, i64 1
  %1683 = load %union.tree_node*, %union.tree_node** %arrayidx3545, align 8
  %common3546 = bitcast %union.tree_node* %1683 to %struct.tree_common*
  %type3547 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3546, i32 0, i32 1
  %1684 = load %union.tree_node*, %union.tree_node** %type3547, align 8
  %type3548 = bitcast %union.tree_node* %1684 to %struct.tree_type*
  %mode3549 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3548, i32 0, i32 6
  %bf.load3550 = load i32, i32* %mode3549, align 4
  %bf.lshr3551 = lshr i32 %bf.load3550, 9
  %bf.clear3552 = and i32 %bf.lshr3551, 127
  %call3553 = call %struct.rtx_def* @immed_double_const(i64 %1681, i64 0, i32 %bf.clear3552)
  store %struct.rtx_def* %call3553, %struct.rtx_def** %constant_part, align 8
  %1685 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %1686 = load %struct.rtx_def*, %struct.rtx_def** %constant_part, align 8
  %fld3554 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1686, i32 0, i32 1
  %arrayidx3555 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3554, i32 0, i64 0
  %rtwint3556 = bitcast %union.rtunion_def* %arrayidx3555 to i64*
  %1687 = load i64, i64* %rtwint3556, align 8
  %call3557 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %1685, i64 %1687)
  store %struct.rtx_def* %call3557, %struct.rtx_def** %op1, align 8
  %1688 = load i32, i32* %modifier.addr, align 4
  %cmp3558 = icmp ne i32 %1688, 1
  br i1 %cmp3558, label %land.lhs.true.3560, label %if.end.3565

land.lhs.true.3560:                               ; preds = %if.then.3532
  %1689 = load i32, i32* %modifier.addr, align 4
  %cmp3561 = icmp ne i32 %1689, 3
  br i1 %cmp3561, label %if.then.3563, label %if.end.3565

if.then.3563:                                     ; preds = %land.lhs.true.3560
  %1690 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %1691 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call3564 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %1690, %struct.rtx_def* %1691)
  store %struct.rtx_def* %call3564, %struct.rtx_def** %op1, align 8
  br label %if.end.3565

if.end.3565:                                      ; preds = %if.then.3563, %land.lhs.true.3560, %if.then.3532
  %1692 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %1692, %struct.rtx_def** %retval
  br label %return

if.else.3566:                                     ; preds = %land.lhs.true.3522, %land.lhs.true.3516, %if.then.3506
  %1693 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3567 = bitcast %union.tree_node* %1693 to %struct.tree_exp*
  %operands3568 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3567, i32 0, i32 2
  %arrayidx3569 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3568, i32 0, i64 1
  %1694 = load %union.tree_node*, %union.tree_node** %arrayidx3569, align 8
  %common3570 = bitcast %union.tree_node* %1694 to %struct.tree_common*
  %code3571 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3570, i32 0, i32 2
  %bf.load3572 = load i32, i32* %code3571, align 8
  %bf.clear3573 = and i32 %bf.load3572, 255
  %cmp3574 = icmp eq i32 %bf.clear3573, 25
  br i1 %cmp3574, label %land.lhs.true.3576, label %if.end.3682

land.lhs.true.3576:                               ; preds = %if.else.3566
  %1695 = load i32, i32* %mode, align 4
  %idxprom3577 = sext i32 %1695 to i64
  %arrayidx3578 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom3577
  %1696 = load i16, i16* %arrayidx3578, align 2
  %conv3579 = zext i16 %1696 to i32
  %cmp3580 = icmp sle i32 %conv3579, 32
  br i1 %cmp3580, label %land.lhs.true.3582, label %if.end.3682

land.lhs.true.3582:                               ; preds = %land.lhs.true.3576
  %1697 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3583 = bitcast %union.tree_node* %1697 to %struct.tree_exp*
  %operands3584 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3583, i32 0, i32 2
  %arrayidx3585 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3584, i32 0, i64 0
  %1698 = load %union.tree_node*, %union.tree_node** %arrayidx3585, align 8
  %common3586 = bitcast %union.tree_node* %1698 to %struct.tree_common*
  %constant_flag3587 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3586, i32 0, i32 2
  %bf.load3588 = load i32, i32* %constant_flag3587, align 8
  %bf.lshr3589 = lshr i32 %bf.load3588, 9
  %bf.clear3590 = and i32 %bf.lshr3589, 1
  %tobool3591 = icmp ne i32 %bf.clear3590, 0
  br i1 %tobool3591, label %if.then.3592, label %if.end.3682

if.then.3592:                                     ; preds = %land.lhs.true.3582
  %1699 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3594 = bitcast %union.tree_node* %1699 to %struct.tree_exp*
  %operands3595 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3594, i32 0, i32 2
  %arrayidx3596 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3595, i32 0, i64 0
  %1700 = load %union.tree_node*, %union.tree_node** %arrayidx3596, align 8
  %1701 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %1702 = load i32, i32* %modifier.addr, align 4
  %cmp3597 = icmp eq i32 %1702, 3
  %cond3599 = select i1 %cmp3597, i32 3, i32 1
  %call3600 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1700, %struct.rtx_def* %1701, i32 0, i32 %cond3599)
  store %struct.rtx_def* %call3600, %struct.rtx_def** %op0, align 8
  %1703 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1704 = bitcast %struct.rtx_def* %1703 to i32*
  %bf.load3601 = load i32, i32* %1704, align 8
  %bf.clear3602 = and i32 %bf.load3601, 65535
  %cmp3603 = icmp eq i32 %bf.clear3602, 67
  br i1 %cmp3603, label %if.end.3652, label %lor.lhs.false.3605

lor.lhs.false.3605:                               ; preds = %if.then.3592
  %1705 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1706 = bitcast %struct.rtx_def* %1705 to i32*
  %bf.load3606 = load i32, i32* %1706, align 8
  %bf.clear3607 = and i32 %bf.load3606, 65535
  %cmp3608 = icmp eq i32 %bf.clear3607, 68
  br i1 %cmp3608, label %if.end.3652, label %lor.lhs.false.3610

lor.lhs.false.3610:                               ; preds = %lor.lhs.false.3605
  %1707 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1708 = bitcast %struct.rtx_def* %1707 to i32*
  %bf.load3611 = load i32, i32* %1708, align 8
  %bf.clear3612 = and i32 %bf.load3611, 65535
  %cmp3613 = icmp eq i32 %bf.clear3612, 54
  br i1 %cmp3613, label %if.end.3652, label %lor.lhs.false.3615

lor.lhs.false.3615:                               ; preds = %lor.lhs.false.3610
  %1709 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1710 = bitcast %struct.rtx_def* %1709 to i32*
  %bf.load3616 = load i32, i32* %1710, align 8
  %bf.clear3617 = and i32 %bf.load3616, 65535
  %cmp3618 = icmp eq i32 %bf.clear3617, 55
  br i1 %cmp3618, label %if.end.3652, label %lor.lhs.false.3620

lor.lhs.false.3620:                               ; preds = %lor.lhs.false.3615
  %1711 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1712 = bitcast %struct.rtx_def* %1711 to i32*
  %bf.load3621 = load i32, i32* %1712, align 8
  %bf.clear3622 = and i32 %bf.load3621, 65535
  %cmp3623 = icmp eq i32 %bf.clear3622, 58
  br i1 %cmp3623, label %if.end.3652, label %lor.lhs.false.3625

lor.lhs.false.3625:                               ; preds = %lor.lhs.false.3620
  %1713 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1714 = bitcast %struct.rtx_def* %1713 to i32*
  %bf.load3626 = load i32, i32* %1714, align 8
  %bf.clear3627 = and i32 %bf.load3626, 65535
  %cmp3628 = icmp eq i32 %bf.clear3627, 134
  br i1 %cmp3628, label %if.end.3652, label %lor.lhs.false.3630

lor.lhs.false.3630:                               ; preds = %lor.lhs.false.3625
  %1715 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1716 = bitcast %struct.rtx_def* %1715 to i32*
  %bf.load3631 = load i32, i32* %1716, align 8
  %bf.clear3632 = and i32 %bf.load3631, 65535
  %cmp3633 = icmp eq i32 %bf.clear3632, 56
  br i1 %cmp3633, label %if.end.3652, label %lor.lhs.false.3635

lor.lhs.false.3635:                               ; preds = %lor.lhs.false.3630
  %1717 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1718 = bitcast %struct.rtx_def* %1717 to i32*
  %bf.load3636 = load i32, i32* %1718, align 8
  %bf.clear3637 = and i32 %bf.load3636, 65535
  %cmp3638 = icmp eq i32 %bf.clear3637, 140
  br i1 %cmp3638, label %if.end.3652, label %if.then.3640

if.then.3640:                                     ; preds = %lor.lhs.false.3635
  %1719 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3641 = bitcast %union.tree_node* %1719 to %struct.tree_exp*
  %operands3642 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3641, i32 0, i32 2
  %arrayidx3643 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3642, i32 0, i64 1
  %1720 = load %union.tree_node*, %union.tree_node** %arrayidx3643, align 8
  %1721 = load i32, i32* %modifier.addr, align 4
  %call3644 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1720, %struct.rtx_def* null, i32 0, i32 %1721)
  store %struct.rtx_def* %call3644, %struct.rtx_def** %op1, align 8
  %1722 = load i32, i32* %modifier.addr, align 4
  %cmp3645 = icmp ne i32 %1722, 1
  br i1 %cmp3645, label %land.lhs.true.3647, label %if.end.3651

land.lhs.true.3647:                               ; preds = %if.then.3640
  %1723 = load i32, i32* %modifier.addr, align 4
  %cmp3648 = icmp ne i32 %1723, 3
  br i1 %cmp3648, label %if.then.3650, label %if.end.3651

if.then.3650:                                     ; preds = %land.lhs.true.3647
  br label %binop2

if.end.3651:                                      ; preds = %land.lhs.true.3647, %if.then.3640
  br label %both_summands

if.end.3652:                                      ; preds = %lor.lhs.false.3635, %lor.lhs.false.3630, %lor.lhs.false.3625, %lor.lhs.false.3620, %lor.lhs.false.3615, %lor.lhs.false.3610, %lor.lhs.false.3605, %if.then.3592
  %1724 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3653 = bitcast %union.tree_node* %1724 to %struct.tree_exp*
  %operands3654 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3653, i32 0, i32 2
  %arrayidx3655 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3654, i32 0, i64 1
  %1725 = load %union.tree_node*, %union.tree_node** %arrayidx3655, align 8
  %int_cst3656 = bitcast %union.tree_node* %1725 to %struct.tree_int_cst*
  %int_cst3657 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst3656, i32 0, i32 2
  %low3658 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst3657, i32 0, i32 0
  %1726 = load i64, i64* %low3658, align 8
  %1727 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3659 = bitcast %union.tree_node* %1727 to %struct.tree_exp*
  %operands3660 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3659, i32 0, i32 2
  %arrayidx3661 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3660, i32 0, i64 0
  %1728 = load %union.tree_node*, %union.tree_node** %arrayidx3661, align 8
  %common3662 = bitcast %union.tree_node* %1728 to %struct.tree_common*
  %type3663 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3662, i32 0, i32 1
  %1729 = load %union.tree_node*, %union.tree_node** %type3663, align 8
  %type3664 = bitcast %union.tree_node* %1729 to %struct.tree_type*
  %mode3665 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3664, i32 0, i32 6
  %bf.load3666 = load i32, i32* %mode3665, align 4
  %bf.lshr3667 = lshr i32 %bf.load3666, 9
  %bf.clear3668 = and i32 %bf.lshr3667, 127
  %call3669 = call %struct.rtx_def* @immed_double_const(i64 %1726, i64 0, i32 %bf.clear3668)
  store %struct.rtx_def* %call3669, %struct.rtx_def** %constant_part3593, align 8
  %1730 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1731 = load %struct.rtx_def*, %struct.rtx_def** %constant_part3593, align 8
  %fld3670 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1731, i32 0, i32 1
  %arrayidx3671 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3670, i32 0, i64 0
  %rtwint3672 = bitcast %union.rtunion_def* %arrayidx3671 to i64*
  %1732 = load i64, i64* %rtwint3672, align 8
  %call3673 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %1730, i64 %1732)
  store %struct.rtx_def* %call3673, %struct.rtx_def** %op0, align 8
  %1733 = load i32, i32* %modifier.addr, align 4
  %cmp3674 = icmp ne i32 %1733, 1
  br i1 %cmp3674, label %land.lhs.true.3676, label %if.end.3681

land.lhs.true.3676:                               ; preds = %if.end.3652
  %1734 = load i32, i32* %modifier.addr, align 4
  %cmp3677 = icmp ne i32 %1734, 3
  br i1 %cmp3677, label %if.then.3679, label %if.end.3681

if.then.3679:                                     ; preds = %land.lhs.true.3676
  %1735 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1736 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call3680 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %1735, %struct.rtx_def* %1736)
  store %struct.rtx_def* %call3680, %struct.rtx_def** %op0, align 8
  br label %if.end.3681

if.end.3681:                                      ; preds = %if.then.3679, %land.lhs.true.3676, %if.end.3652
  %1737 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1737, %struct.rtx_def** %retval
  br label %return

if.end.3682:                                      ; preds = %land.lhs.true.3582, %land.lhs.true.3576, %if.else.3566
  br label %if.end.3683

if.end.3683:                                      ; preds = %if.end.3682
  br label %if.end.3684

if.end.3684:                                      ; preds = %if.end.3683, %lor.lhs.false.3504, %lor.lhs.false.3499
  %1738 = load i32, i32* %modifier.addr, align 4
  %cmp3685 = icmp ne i32 %1738, 1
  br i1 %cmp3685, label %land.lhs.true.3687, label %lor.lhs.false.3690

land.lhs.true.3687:                               ; preds = %if.end.3684
  %1739 = load i32, i32* %modifier.addr, align 4
  %cmp3688 = icmp ne i32 %1739, 3
  br i1 %cmp3688, label %if.then.3693, label %lor.lhs.false.3690

lor.lhs.false.3690:                               ; preds = %land.lhs.true.3687, %if.end.3684
  %1740 = load i32, i32* %mode, align 4
  %1741 = load i32, i32* @ptr_mode, align 4
  %cmp3691 = icmp ne i32 %1740, %1741
  br i1 %cmp3691, label %if.then.3693, label %if.end.3694

if.then.3693:                                     ; preds = %lor.lhs.false.3690, %land.lhs.true.3687
  br label %binop

if.end.3694:                                      ; preds = %lor.lhs.false.3690
  %1742 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %1743 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3695 = bitcast %union.tree_node* %1743 to %struct.tree_exp*
  %operands3696 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3695, i32 0, i32 2
  %arrayidx3697 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3696, i32 0, i64 1
  %1744 = load %union.tree_node*, %union.tree_node** %arrayidx3697, align 8
  %call3698 = call i32 @safe_from_p(%struct.rtx_def* %1742, %union.tree_node* %1744, i32 1)
  %tobool3699 = icmp ne i32 %call3698, 0
  br i1 %tobool3699, label %if.end.3701, label %if.then.3700

if.then.3700:                                     ; preds = %if.end.3694
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.3701

if.end.3701:                                      ; preds = %if.then.3700, %if.end.3694
  %1745 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3702 = bitcast %union.tree_node* %1745 to %struct.tree_exp*
  %operands3703 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3702, i32 0, i32 2
  %arrayidx3704 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3703, i32 0, i64 0
  %1746 = load %union.tree_node*, %union.tree_node** %arrayidx3704, align 8
  %1747 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %1748 = load i32, i32* %modifier.addr, align 4
  %call3705 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1746, %struct.rtx_def* %1747, i32 0, i32 %1748)
  store %struct.rtx_def* %call3705, %struct.rtx_def** %op0, align 8
  %1749 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3706 = bitcast %union.tree_node* %1749 to %struct.tree_exp*
  %operands3707 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3706, i32 0, i32 2
  %arrayidx3708 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3707, i32 0, i64 1
  %1750 = load %union.tree_node*, %union.tree_node** %arrayidx3708, align 8
  %1751 = load i32, i32* %modifier.addr, align 4
  %call3709 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1750, %struct.rtx_def* null, i32 0, i32 %1751)
  store %struct.rtx_def* %call3709, %struct.rtx_def** %op1, align 8
  br label %both_summands

both_summands:                                    ; preds = %if.end.3701, %if.end.3651
  %1752 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1753 = bitcast %struct.rtx_def* %1752 to i32*
  %bf.load3710 = load i32, i32* %1753, align 8
  %bf.clear3711 = and i32 %bf.load3710, 65535
  %cmp3712 = icmp eq i32 %bf.clear3711, 75
  br i1 %cmp3712, label %land.lhs.true.3714, label %if.end.3779

land.lhs.true.3714:                               ; preds = %both_summands
  %1754 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3715 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1754, i32 0, i32 1
  %arrayidx3716 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3715, i32 0, i64 1
  %rtx3717 = bitcast %union.rtunion_def* %arrayidx3716 to %struct.rtx_def**
  %1755 = load %struct.rtx_def*, %struct.rtx_def** %rtx3717, align 8
  %1756 = bitcast %struct.rtx_def* %1755 to i32*
  %bf.load3718 = load i32, i32* %1756, align 8
  %bf.clear3719 = and i32 %bf.load3718, 65535
  %cmp3720 = icmp eq i32 %bf.clear3719, 67
  br i1 %cmp3720, label %if.then.3778, label %lor.lhs.false.3722

lor.lhs.false.3722:                               ; preds = %land.lhs.true.3714
  %1757 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3723 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1757, i32 0, i32 1
  %arrayidx3724 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3723, i32 0, i64 1
  %rtx3725 = bitcast %union.rtunion_def* %arrayidx3724 to %struct.rtx_def**
  %1758 = load %struct.rtx_def*, %struct.rtx_def** %rtx3725, align 8
  %1759 = bitcast %struct.rtx_def* %1758 to i32*
  %bf.load3726 = load i32, i32* %1759, align 8
  %bf.clear3727 = and i32 %bf.load3726, 65535
  %cmp3728 = icmp eq i32 %bf.clear3727, 68
  br i1 %cmp3728, label %if.then.3778, label %lor.lhs.false.3730

lor.lhs.false.3730:                               ; preds = %lor.lhs.false.3722
  %1760 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3731 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1760, i32 0, i32 1
  %arrayidx3732 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3731, i32 0, i64 1
  %rtx3733 = bitcast %union.rtunion_def* %arrayidx3732 to %struct.rtx_def**
  %1761 = load %struct.rtx_def*, %struct.rtx_def** %rtx3733, align 8
  %1762 = bitcast %struct.rtx_def* %1761 to i32*
  %bf.load3734 = load i32, i32* %1762, align 8
  %bf.clear3735 = and i32 %bf.load3734, 65535
  %cmp3736 = icmp eq i32 %bf.clear3735, 54
  br i1 %cmp3736, label %if.then.3778, label %lor.lhs.false.3738

lor.lhs.false.3738:                               ; preds = %lor.lhs.false.3730
  %1763 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3739 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1763, i32 0, i32 1
  %arrayidx3740 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3739, i32 0, i64 1
  %rtx3741 = bitcast %union.rtunion_def* %arrayidx3740 to %struct.rtx_def**
  %1764 = load %struct.rtx_def*, %struct.rtx_def** %rtx3741, align 8
  %1765 = bitcast %struct.rtx_def* %1764 to i32*
  %bf.load3742 = load i32, i32* %1765, align 8
  %bf.clear3743 = and i32 %bf.load3742, 65535
  %cmp3744 = icmp eq i32 %bf.clear3743, 55
  br i1 %cmp3744, label %if.then.3778, label %lor.lhs.false.3746

lor.lhs.false.3746:                               ; preds = %lor.lhs.false.3738
  %1766 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3747 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1766, i32 0, i32 1
  %arrayidx3748 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3747, i32 0, i64 1
  %rtx3749 = bitcast %union.rtunion_def* %arrayidx3748 to %struct.rtx_def**
  %1767 = load %struct.rtx_def*, %struct.rtx_def** %rtx3749, align 8
  %1768 = bitcast %struct.rtx_def* %1767 to i32*
  %bf.load3750 = load i32, i32* %1768, align 8
  %bf.clear3751 = and i32 %bf.load3750, 65535
  %cmp3752 = icmp eq i32 %bf.clear3751, 58
  br i1 %cmp3752, label %if.then.3778, label %lor.lhs.false.3754

lor.lhs.false.3754:                               ; preds = %lor.lhs.false.3746
  %1769 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3755 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1769, i32 0, i32 1
  %arrayidx3756 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3755, i32 0, i64 1
  %rtx3757 = bitcast %union.rtunion_def* %arrayidx3756 to %struct.rtx_def**
  %1770 = load %struct.rtx_def*, %struct.rtx_def** %rtx3757, align 8
  %1771 = bitcast %struct.rtx_def* %1770 to i32*
  %bf.load3758 = load i32, i32* %1771, align 8
  %bf.clear3759 = and i32 %bf.load3758, 65535
  %cmp3760 = icmp eq i32 %bf.clear3759, 134
  br i1 %cmp3760, label %if.then.3778, label %lor.lhs.false.3762

lor.lhs.false.3762:                               ; preds = %lor.lhs.false.3754
  %1772 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3763 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1772, i32 0, i32 1
  %arrayidx3764 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3763, i32 0, i64 1
  %rtx3765 = bitcast %union.rtunion_def* %arrayidx3764 to %struct.rtx_def**
  %1773 = load %struct.rtx_def*, %struct.rtx_def** %rtx3765, align 8
  %1774 = bitcast %struct.rtx_def* %1773 to i32*
  %bf.load3766 = load i32, i32* %1774, align 8
  %bf.clear3767 = and i32 %bf.load3766, 65535
  %cmp3768 = icmp eq i32 %bf.clear3767, 56
  br i1 %cmp3768, label %if.then.3778, label %lor.lhs.false.3770

lor.lhs.false.3770:                               ; preds = %lor.lhs.false.3762
  %1775 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld3771 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1775, i32 0, i32 1
  %arrayidx3772 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3771, i32 0, i64 1
  %rtx3773 = bitcast %union.rtunion_def* %arrayidx3772 to %struct.rtx_def**
  %1776 = load %struct.rtx_def*, %struct.rtx_def** %rtx3773, align 8
  %1777 = bitcast %struct.rtx_def* %1776 to i32*
  %bf.load3774 = load i32, i32* %1777, align 8
  %bf.clear3775 = and i32 %bf.load3774, 65535
  %cmp3776 = icmp eq i32 %bf.clear3775, 140
  br i1 %cmp3776, label %if.then.3778, label %if.end.3779

if.then.3778:                                     ; preds = %lor.lhs.false.3770, %lor.lhs.false.3762, %lor.lhs.false.3754, %lor.lhs.false.3746, %lor.lhs.false.3738, %lor.lhs.false.3730, %lor.lhs.false.3722, %land.lhs.true.3714
  %1778 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1778, %struct.rtx_def** %temp, align 8
  %1779 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %1779, %struct.rtx_def** %op0, align 8
  %1780 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %1780, %struct.rtx_def** %op1, align 8
  br label %if.end.3779

if.end.3779:                                      ; preds = %if.then.3778, %lor.lhs.false.3770, %both_summands
  %1781 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %1782 = bitcast %struct.rtx_def* %1781 to i32*
  %bf.load3780 = load i32, i32* %1782, align 8
  %bf.clear3781 = and i32 %bf.load3780, 65535
  %cmp3782 = icmp eq i32 %bf.clear3781, 75
  br i1 %cmp3782, label %land.lhs.true.3784, label %if.end.3887

land.lhs.true.3784:                               ; preds = %if.end.3779
  %1783 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3785 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1783, i32 0, i32 1
  %arrayidx3786 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3785, i32 0, i64 1
  %rtx3787 = bitcast %union.rtunion_def* %arrayidx3786 to %struct.rtx_def**
  %1784 = load %struct.rtx_def*, %struct.rtx_def** %rtx3787, align 8
  %1785 = bitcast %struct.rtx_def* %1784 to i32*
  %bf.load3788 = load i32, i32* %1785, align 8
  %bf.clear3789 = and i32 %bf.load3788, 65535
  %cmp3790 = icmp eq i32 %bf.clear3789, 67
  br i1 %cmp3790, label %if.then.3848, label %lor.lhs.false.3792

lor.lhs.false.3792:                               ; preds = %land.lhs.true.3784
  %1786 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3793 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1786, i32 0, i32 1
  %arrayidx3794 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3793, i32 0, i64 1
  %rtx3795 = bitcast %union.rtunion_def* %arrayidx3794 to %struct.rtx_def**
  %1787 = load %struct.rtx_def*, %struct.rtx_def** %rtx3795, align 8
  %1788 = bitcast %struct.rtx_def* %1787 to i32*
  %bf.load3796 = load i32, i32* %1788, align 8
  %bf.clear3797 = and i32 %bf.load3796, 65535
  %cmp3798 = icmp eq i32 %bf.clear3797, 68
  br i1 %cmp3798, label %if.then.3848, label %lor.lhs.false.3800

lor.lhs.false.3800:                               ; preds = %lor.lhs.false.3792
  %1789 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3801 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1789, i32 0, i32 1
  %arrayidx3802 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3801, i32 0, i64 1
  %rtx3803 = bitcast %union.rtunion_def* %arrayidx3802 to %struct.rtx_def**
  %1790 = load %struct.rtx_def*, %struct.rtx_def** %rtx3803, align 8
  %1791 = bitcast %struct.rtx_def* %1790 to i32*
  %bf.load3804 = load i32, i32* %1791, align 8
  %bf.clear3805 = and i32 %bf.load3804, 65535
  %cmp3806 = icmp eq i32 %bf.clear3805, 54
  br i1 %cmp3806, label %if.then.3848, label %lor.lhs.false.3808

lor.lhs.false.3808:                               ; preds = %lor.lhs.false.3800
  %1792 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3809 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1792, i32 0, i32 1
  %arrayidx3810 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3809, i32 0, i64 1
  %rtx3811 = bitcast %union.rtunion_def* %arrayidx3810 to %struct.rtx_def**
  %1793 = load %struct.rtx_def*, %struct.rtx_def** %rtx3811, align 8
  %1794 = bitcast %struct.rtx_def* %1793 to i32*
  %bf.load3812 = load i32, i32* %1794, align 8
  %bf.clear3813 = and i32 %bf.load3812, 65535
  %cmp3814 = icmp eq i32 %bf.clear3813, 55
  br i1 %cmp3814, label %if.then.3848, label %lor.lhs.false.3816

lor.lhs.false.3816:                               ; preds = %lor.lhs.false.3808
  %1795 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3817 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1795, i32 0, i32 1
  %arrayidx3818 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3817, i32 0, i64 1
  %rtx3819 = bitcast %union.rtunion_def* %arrayidx3818 to %struct.rtx_def**
  %1796 = load %struct.rtx_def*, %struct.rtx_def** %rtx3819, align 8
  %1797 = bitcast %struct.rtx_def* %1796 to i32*
  %bf.load3820 = load i32, i32* %1797, align 8
  %bf.clear3821 = and i32 %bf.load3820, 65535
  %cmp3822 = icmp eq i32 %bf.clear3821, 58
  br i1 %cmp3822, label %if.then.3848, label %lor.lhs.false.3824

lor.lhs.false.3824:                               ; preds = %lor.lhs.false.3816
  %1798 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3825 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1798, i32 0, i32 1
  %arrayidx3826 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3825, i32 0, i64 1
  %rtx3827 = bitcast %union.rtunion_def* %arrayidx3826 to %struct.rtx_def**
  %1799 = load %struct.rtx_def*, %struct.rtx_def** %rtx3827, align 8
  %1800 = bitcast %struct.rtx_def* %1799 to i32*
  %bf.load3828 = load i32, i32* %1800, align 8
  %bf.clear3829 = and i32 %bf.load3828, 65535
  %cmp3830 = icmp eq i32 %bf.clear3829, 134
  br i1 %cmp3830, label %if.then.3848, label %lor.lhs.false.3832

lor.lhs.false.3832:                               ; preds = %lor.lhs.false.3824
  %1801 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3833 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1801, i32 0, i32 1
  %arrayidx3834 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3833, i32 0, i64 1
  %rtx3835 = bitcast %union.rtunion_def* %arrayidx3834 to %struct.rtx_def**
  %1802 = load %struct.rtx_def*, %struct.rtx_def** %rtx3835, align 8
  %1803 = bitcast %struct.rtx_def* %1802 to i32*
  %bf.load3836 = load i32, i32* %1803, align 8
  %bf.clear3837 = and i32 %bf.load3836, 65535
  %cmp3838 = icmp eq i32 %bf.clear3837, 56
  br i1 %cmp3838, label %if.then.3848, label %lor.lhs.false.3840

lor.lhs.false.3840:                               ; preds = %lor.lhs.false.3832
  %1804 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3841 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1804, i32 0, i32 1
  %arrayidx3842 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3841, i32 0, i64 1
  %rtx3843 = bitcast %union.rtunion_def* %arrayidx3842 to %struct.rtx_def**
  %1805 = load %struct.rtx_def*, %struct.rtx_def** %rtx3843, align 8
  %1806 = bitcast %struct.rtx_def* %1805 to i32*
  %bf.load3844 = load i32, i32* %1806, align 8
  %bf.clear3845 = and i32 %bf.load3844, 65535
  %cmp3846 = icmp eq i32 %bf.clear3845, 140
  br i1 %cmp3846, label %if.then.3848, label %if.end.3887

if.then.3848:                                     ; preds = %lor.lhs.false.3840, %lor.lhs.false.3832, %lor.lhs.false.3824, %lor.lhs.false.3816, %lor.lhs.false.3808, %lor.lhs.false.3800, %lor.lhs.false.3792, %land.lhs.true.3784
  %1807 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %1807, %struct.rtx_def** %constant_term, align 8
  %1808 = load i32, i32* %mode, align 4
  %1809 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3849 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1809, i32 0, i32 1
  %arrayidx3850 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3849, i32 0, i64 0
  %rtx3851 = bitcast %union.rtunion_def* %arrayidx3850 to %struct.rtx_def**
  %1810 = load %struct.rtx_def*, %struct.rtx_def** %rtx3851, align 8
  %1811 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call3852 = call %struct.rtx_def* @simplify_binary_operation(i32 75, i32 %1808, %struct.rtx_def* %1810, %struct.rtx_def* %1811)
  store %struct.rtx_def* %call3852, %struct.rtx_def** %temp, align 8
  %1812 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp3853 = icmp ne %struct.rtx_def* %1812, null
  br i1 %cmp3853, label %if.then.3855, label %if.else.3856

if.then.3855:                                     ; preds = %if.then.3848
  %1813 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %1813, %struct.rtx_def** %op0, align 8
  br label %if.end.3872

if.else.3856:                                     ; preds = %if.then.3848
  %1814 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1815 = bitcast %struct.rtx_def* %1814 to i32*
  %bf.load3857 = load i32, i32* %1815, align 8
  %bf.clear3858 = and i32 %bf.load3857, 65535
  %cmp3859 = icmp eq i32 %bf.clear3858, 78
  br i1 %cmp3859, label %if.then.3861, label %if.else.3866

if.then.3861:                                     ; preds = %if.else.3856
  %1816 = load i32, i32* %mode, align 4
  %1817 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1818 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3862 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1818, i32 0, i32 1
  %arrayidx3863 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3862, i32 0, i64 0
  %rtx3864 = bitcast %union.rtunion_def* %arrayidx3863 to %struct.rtx_def**
  %1819 = load %struct.rtx_def*, %struct.rtx_def** %rtx3864, align 8
  %call3865 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %1816, %struct.rtx_def* %1817, %struct.rtx_def* %1819)
  store %struct.rtx_def* %call3865, %struct.rtx_def** %op0, align 8
  br label %if.end.3871

if.else.3866:                                     ; preds = %if.else.3856
  %1820 = load i32, i32* %mode, align 4
  %1821 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3867 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1821, i32 0, i32 1
  %arrayidx3868 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3867, i32 0, i64 0
  %rtx3869 = bitcast %union.rtunion_def* %arrayidx3868 to %struct.rtx_def**
  %1822 = load %struct.rtx_def*, %struct.rtx_def** %rtx3869, align 8
  %1823 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call3870 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %1820, %struct.rtx_def* %1822, %struct.rtx_def* %1823)
  store %struct.rtx_def* %call3870, %struct.rtx_def** %op0, align 8
  br label %if.end.3871

if.end.3871:                                      ; preds = %if.else.3866, %if.then.3861
  br label %if.end.3872

if.end.3872:                                      ; preds = %if.end.3871, %if.then.3855
  %1824 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call3873 = call %struct.rtx_def* @eliminate_constant_term(%struct.rtx_def* %1824, %struct.rtx_def** %constant_term)
  store %struct.rtx_def* %call3873, %struct.rtx_def** %op0, align 8
  %1825 = load i32, i32* %mode, align 4
  %1826 = load %struct.rtx_def*, %struct.rtx_def** %constant_term, align 8
  %1827 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3874 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1827, i32 0, i32 1
  %arrayidx3875 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3874, i32 0, i64 1
  %rtx3876 = bitcast %union.rtunion_def* %arrayidx3875 to %struct.rtx_def**
  %1828 = load %struct.rtx_def*, %struct.rtx_def** %rtx3876, align 8
  %call3877 = call %struct.rtx_def* @simplify_binary_operation(i32 75, i32 %1825, %struct.rtx_def* %1826, %struct.rtx_def* %1828)
  store %struct.rtx_def* %call3877, %struct.rtx_def** %temp, align 8
  %1829 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp3878 = icmp ne %struct.rtx_def* %1829, null
  br i1 %cmp3878, label %if.then.3880, label %if.else.3881

if.then.3880:                                     ; preds = %if.end.3872
  %1830 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %1830, %struct.rtx_def** %op1, align 8
  br label %if.end.3886

if.else.3881:                                     ; preds = %if.end.3872
  %1831 = load i32, i32* %mode, align 4
  %1832 = load %struct.rtx_def*, %struct.rtx_def** %constant_term, align 8
  %1833 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld3882 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1833, i32 0, i32 1
  %arrayidx3883 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3882, i32 0, i64 1
  %rtx3884 = bitcast %union.rtunion_def* %arrayidx3883 to %struct.rtx_def**
  %1834 = load %struct.rtx_def*, %struct.rtx_def** %rtx3884, align 8
  %call3885 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %1831, %struct.rtx_def* %1832, %struct.rtx_def* %1834)
  store %struct.rtx_def* %call3885, %struct.rtx_def** %op1, align 8
  br label %if.end.3886

if.end.3886:                                      ; preds = %if.else.3881, %if.then.3880
  br label %if.end.3887

if.end.3887:                                      ; preds = %if.end.3886, %lor.lhs.false.3840, %if.end.3779
  %1835 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1836 = bitcast %struct.rtx_def* %1835 to i32*
  %bf.load3888 = load i32, i32* %1836, align 8
  %bf.clear3889 = and i32 %bf.load3888, 65535
  %cmp3890 = icmp eq i32 %bf.clear3889, 67
  br i1 %cmp3890, label %if.then.3932, label %lor.lhs.false.3892

lor.lhs.false.3892:                               ; preds = %if.end.3887
  %1837 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1838 = bitcast %struct.rtx_def* %1837 to i32*
  %bf.load3893 = load i32, i32* %1838, align 8
  %bf.clear3894 = and i32 %bf.load3893, 65535
  %cmp3895 = icmp eq i32 %bf.clear3894, 68
  br i1 %cmp3895, label %if.then.3932, label %lor.lhs.false.3897

lor.lhs.false.3897:                               ; preds = %lor.lhs.false.3892
  %1839 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1840 = bitcast %struct.rtx_def* %1839 to i32*
  %bf.load3898 = load i32, i32* %1840, align 8
  %bf.clear3899 = and i32 %bf.load3898, 65535
  %cmp3900 = icmp eq i32 %bf.clear3899, 54
  br i1 %cmp3900, label %if.then.3932, label %lor.lhs.false.3902

lor.lhs.false.3902:                               ; preds = %lor.lhs.false.3897
  %1841 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1842 = bitcast %struct.rtx_def* %1841 to i32*
  %bf.load3903 = load i32, i32* %1842, align 8
  %bf.clear3904 = and i32 %bf.load3903, 65535
  %cmp3905 = icmp eq i32 %bf.clear3904, 55
  br i1 %cmp3905, label %if.then.3932, label %lor.lhs.false.3907

lor.lhs.false.3907:                               ; preds = %lor.lhs.false.3902
  %1843 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1844 = bitcast %struct.rtx_def* %1843 to i32*
  %bf.load3908 = load i32, i32* %1844, align 8
  %bf.clear3909 = and i32 %bf.load3908, 65535
  %cmp3910 = icmp eq i32 %bf.clear3909, 58
  br i1 %cmp3910, label %if.then.3932, label %lor.lhs.false.3912

lor.lhs.false.3912:                               ; preds = %lor.lhs.false.3907
  %1845 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1846 = bitcast %struct.rtx_def* %1845 to i32*
  %bf.load3913 = load i32, i32* %1846, align 8
  %bf.clear3914 = and i32 %bf.load3913, 65535
  %cmp3915 = icmp eq i32 %bf.clear3914, 134
  br i1 %cmp3915, label %if.then.3932, label %lor.lhs.false.3917

lor.lhs.false.3917:                               ; preds = %lor.lhs.false.3912
  %1847 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1848 = bitcast %struct.rtx_def* %1847 to i32*
  %bf.load3918 = load i32, i32* %1848, align 8
  %bf.clear3919 = and i32 %bf.load3918, 65535
  %cmp3920 = icmp eq i32 %bf.clear3919, 56
  br i1 %cmp3920, label %if.then.3932, label %lor.lhs.false.3922

lor.lhs.false.3922:                               ; preds = %lor.lhs.false.3917
  %1849 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1850 = bitcast %struct.rtx_def* %1849 to i32*
  %bf.load3923 = load i32, i32* %1850, align 8
  %bf.clear3924 = and i32 %bf.load3923, 65535
  %cmp3925 = icmp eq i32 %bf.clear3924, 140
  br i1 %cmp3925, label %if.then.3932, label %lor.lhs.false.3927

lor.lhs.false.3927:                               ; preds = %lor.lhs.false.3922
  %1851 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %1852 = bitcast %struct.rtx_def* %1851 to i32*
  %bf.load3928 = load i32, i32* %1852, align 8
  %bf.clear3929 = and i32 %bf.load3928, 65535
  %cmp3930 = icmp eq i32 %bf.clear3929, 78
  br i1 %cmp3930, label %if.then.3932, label %if.end.3933

if.then.3932:                                     ; preds = %lor.lhs.false.3927, %lor.lhs.false.3922, %lor.lhs.false.3917, %lor.lhs.false.3912, %lor.lhs.false.3907, %lor.lhs.false.3902, %lor.lhs.false.3897, %lor.lhs.false.3892, %if.end.3887
  %1853 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  store %struct.rtx_def* %1853, %struct.rtx_def** %temp, align 8
  %1854 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %1854, %struct.rtx_def** %op1, align 8
  %1855 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %1855, %struct.rtx_def** %op0, align 8
  br label %if.end.3933

if.end.3933:                                      ; preds = %if.then.3932, %lor.lhs.false.3927
  %1856 = load i32, i32* %mode, align 4
  %1857 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1858 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call3934 = call %struct.rtx_def* @simplify_binary_operation(i32 75, i32 %1856, %struct.rtx_def* %1857, %struct.rtx_def* %1858)
  store %struct.rtx_def* %call3934, %struct.rtx_def** %temp, align 8
  %1859 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool3935 = icmp ne %struct.rtx_def* %1859, null
  br i1 %tobool3935, label %cond.true.3936, label %cond.false.3937

cond.true.3936:                                   ; preds = %if.end.3933
  %1860 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  br label %cond.end.3939

cond.false.3937:                                  ; preds = %if.end.3933
  %1861 = load i32, i32* %mode, align 4
  %1862 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1863 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call3938 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %1861, %struct.rtx_def* %1862, %struct.rtx_def* %1863)
  br label %cond.end.3939

cond.end.3939:                                    ; preds = %cond.false.3937, %cond.true.3936
  %cond3940 = phi %struct.rtx_def* [ %1860, %cond.true.3936 ], [ %call3938, %cond.false.3937 ]
  store %struct.rtx_def* %cond3940, %struct.rtx_def** %retval
  br label %return

sw.bb.3941:                                       ; preds = %if.end.185
  %1864 = load i32, i32* %modifier.addr, align 4
  %cmp3942 = icmp eq i32 %1864, 1
  br i1 %cmp3942, label %land.lhs.true.3947, label %lor.lhs.false.3944

lor.lhs.false.3944:                               ; preds = %sw.bb.3941
  %1865 = load i32, i32* %modifier.addr, align 4
  %cmp3945 = icmp eq i32 %1865, 3
  br i1 %cmp3945, label %land.lhs.true.3947, label %if.end.3982

land.lhs.true.3947:                               ; preds = %lor.lhs.false.3944, %sw.bb.3941
  %1866 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3948 = bitcast %union.tree_node* %1866 to %struct.tree_exp*
  %operands3949 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3948, i32 0, i32 2
  %arrayidx3950 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3949, i32 0, i64 0
  %1867 = load %union.tree_node*, %union.tree_node** %arrayidx3950, align 8
  %call3951 = call i32 @really_constant_p(%union.tree_node* %1867)
  %tobool3952 = icmp ne i32 %call3951, 0
  br i1 %tobool3952, label %land.lhs.true.3953, label %if.end.3982

land.lhs.true.3953:                               ; preds = %land.lhs.true.3947
  %1868 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3954 = bitcast %union.tree_node* %1868 to %struct.tree_exp*
  %operands3955 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3954, i32 0, i32 2
  %arrayidx3956 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3955, i32 0, i64 1
  %1869 = load %union.tree_node*, %union.tree_node** %arrayidx3956, align 8
  %call3957 = call i32 @really_constant_p(%union.tree_node* %1869)
  %tobool3958 = icmp ne i32 %call3957, 0
  br i1 %tobool3958, label %if.then.3959, label %if.end.3982

if.then.3959:                                     ; preds = %land.lhs.true.3953
  %1870 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3961 = bitcast %union.tree_node* %1870 to %struct.tree_exp*
  %operands3962 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3961, i32 0, i32 2
  %arrayidx3963 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3962, i32 0, i64 0
  %1871 = load %union.tree_node*, %union.tree_node** %arrayidx3963, align 8
  %1872 = load i32, i32* %modifier.addr, align 4
  %call3964 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1871, %struct.rtx_def* null, i32 0, i32 %1872)
  store %struct.rtx_def* %call3964, %struct.rtx_def** %op03960, align 8
  %1873 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3966 = bitcast %union.tree_node* %1873 to %struct.tree_exp*
  %operands3967 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3966, i32 0, i32 2
  %arrayidx3968 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3967, i32 0, i64 1
  %1874 = load %union.tree_node*, %union.tree_node** %arrayidx3968, align 8
  %1875 = load i32, i32* %modifier.addr, align 4
  %call3969 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1874, %struct.rtx_def* null, i32 0, i32 %1875)
  store %struct.rtx_def* %call3969, %struct.rtx_def** %op13965, align 8
  %1876 = load %struct.rtx_def*, %struct.rtx_def** %op13965, align 8
  %1877 = bitcast %struct.rtx_def* %1876 to i32*
  %bf.load3970 = load i32, i32* %1877, align 8
  %bf.clear3971 = and i32 %bf.load3970, 65535
  %cmp3972 = icmp eq i32 %bf.clear3971, 54
  br i1 %cmp3972, label %if.then.3974, label %if.else.3980

if.then.3974:                                     ; preds = %if.then.3959
  %1878 = load %struct.rtx_def*, %struct.rtx_def** %op03960, align 8
  %1879 = load %struct.rtx_def*, %struct.rtx_def** %op13965, align 8
  %fld3975 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1879, i32 0, i32 1
  %arrayidx3976 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3975, i32 0, i64 0
  %rtwint3977 = bitcast %union.rtunion_def* %arrayidx3976 to i64*
  %1880 = load i64, i64* %rtwint3977, align 8
  %sub3978 = sub nsw i64 0, %1880
  %call3979 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %1878, i64 %sub3978)
  store %struct.rtx_def* %call3979, %struct.rtx_def** %retval
  br label %return

if.else.3980:                                     ; preds = %if.then.3959
  %1881 = load i32, i32* %mode, align 4
  %1882 = load %struct.rtx_def*, %struct.rtx_def** %op03960, align 8
  %1883 = load %struct.rtx_def*, %struct.rtx_def** %op13965, align 8
  %call3981 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 %1881, %struct.rtx_def* %1882, %struct.rtx_def* %1883)
  store %struct.rtx_def* %call3981, %struct.rtx_def** %retval
  br label %return

if.end.3982:                                      ; preds = %land.lhs.true.3953, %land.lhs.true.3947, %lor.lhs.false.3944
  %1884 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3983 = bitcast %union.tree_node* %1884 to %struct.tree_exp*
  %operands3984 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3983, i32 0, i32 2
  %arrayidx3985 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3984, i32 0, i64 1
  %1885 = load %union.tree_node*, %union.tree_node** %arrayidx3985, align 8
  %common3986 = bitcast %union.tree_node* %1885 to %struct.tree_common*
  %code3987 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3986, i32 0, i32 2
  %bf.load3988 = load i32, i32* %code3987, align 8
  %bf.clear3989 = and i32 %bf.load3988, 255
  %cmp3990 = icmp eq i32 %bf.clear3989, 25
  br i1 %cmp3990, label %if.then.3992, label %if.end.4018

if.then.3992:                                     ; preds = %if.end.3982
  %1886 = load %union.tree_node*, %union.tree_node** %type, align 8
  %1887 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3993 = bitcast %union.tree_node* %1887 to %struct.tree_exp*
  %operands3994 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3993, i32 0, i32 2
  %arrayidx3995 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3994, i32 0, i64 1
  %1888 = load %union.tree_node*, %union.tree_node** %arrayidx3995, align 8
  %call3996 = call %union.tree_node* @build1(i32 77, %union.tree_node* %1886, %union.tree_node* %1888)
  %call3997 = call %union.tree_node* @fold(%union.tree_node* %call3996)
  store %union.tree_node* %call3997, %union.tree_node** %negated, align 8
  %1889 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common3998 = bitcast %union.tree_node* %1889 to %struct.tree_common*
  %unsigned_flag3999 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3998, i32 0, i32 2
  %bf.load4000 = load i32, i32* %unsigned_flag3999, align 8
  %bf.lshr4001 = lshr i32 %bf.load4000, 13
  %bf.clear4002 = and i32 %bf.lshr4001, 1
  %tobool4003 = icmp ne i32 %bf.clear4002, 0
  br i1 %tobool4003, label %if.then.4011, label %lor.lhs.false.4004

lor.lhs.false.4004:                               ; preds = %if.then.3992
  %1890 = load %union.tree_node*, %union.tree_node** %negated, align 8
  %common4005 = bitcast %union.tree_node* %1890 to %struct.tree_common*
  %public_flag4006 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4005, i32 0, i32 2
  %bf.load4007 = load i32, i32* %public_flag4006, align 8
  %bf.lshr4008 = lshr i32 %bf.load4007, 19
  %bf.clear4009 = and i32 %bf.lshr4008, 1
  %tobool4010 = icmp ne i32 %bf.clear4009, 0
  br i1 %tobool4010, label %if.then.4011, label %if.else.4012

if.then.4011:                                     ; preds = %lor.lhs.false.4004, %if.then.3992
  br label %if.end.4017

if.else.4012:                                     ; preds = %lor.lhs.false.4004
  %1891 = load %union.tree_node*, %union.tree_node** %type, align 8
  %1892 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4013 = bitcast %union.tree_node* %1892 to %struct.tree_exp*
  %operands4014 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4013, i32 0, i32 2
  %arrayidx4015 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4014, i32 0, i64 0
  %1893 = load %union.tree_node*, %union.tree_node** %arrayidx4015, align 8
  %1894 = load %union.tree_node*, %union.tree_node** %negated, align 8
  %call4016 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %1891, %union.tree_node* %1893, %union.tree_node* %1894)
  store %union.tree_node* %call4016, %union.tree_node** %exp.addr, align 8
  br label %plus_expr

if.end.4017:                                      ; preds = %if.then.4011
  br label %if.end.4018

if.end.4018:                                      ; preds = %if.end.4017, %if.end.3982
  %1895 = load i32, i32* %unsignedp, align 4
  %tobool4019 = icmp ne i32 %1895, 0
  br i1 %tobool4019, label %cond.false.4028, label %land.lhs.true.4020

land.lhs.true.4020:                               ; preds = %if.end.4018
  %1896 = load i32, i32* @flag_trapv, align 4
  %tobool4021 = icmp ne i32 %1896, 0
  br i1 %tobool4021, label %land.lhs.true.4022, label %cond.false.4028

land.lhs.true.4022:                               ; preds = %land.lhs.true.4020
  %1897 = load i32, i32* %mode, align 4
  %idxprom4023 = sext i32 %1897 to i64
  %arrayidx4024 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom4023
  %1898 = load i32, i32* %arrayidx4024, align 4
  %cmp4025 = icmp eq i32 %1898, 1
  br i1 %cmp4025, label %cond.true.4027, label %cond.false.4028

cond.true.4027:                                   ; preds = %land.lhs.true.4022
  %1899 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 3), align 8
  br label %cond.end.4029

cond.false.4028:                                  ; preds = %land.lhs.true.4022, %land.lhs.true.4020, %if.end.4018
  %1900 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  br label %cond.end.4029

cond.end.4029:                                    ; preds = %cond.false.4028, %cond.true.4027
  %cond4030 = phi %struct.optab* [ %1899, %cond.true.4027 ], [ %1900, %cond.false.4028 ]
  store %struct.optab* %cond4030, %struct.optab** %this_optab, align 8
  br label %binop

sw.bb.4031:                                       ; preds = %if.end.185
  %1901 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4032 = bitcast %union.tree_node* %1901 to %struct.tree_exp*
  %operands4033 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4032, i32 0, i32 2
  %arrayidx4034 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4033, i32 0, i64 0
  %1902 = load %union.tree_node*, %union.tree_node** %arrayidx4034, align 8
  %common4035 = bitcast %union.tree_node* %1902 to %struct.tree_common*
  %code4036 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4035, i32 0, i32 2
  %bf.load4037 = load i32, i32* %code4036, align 8
  %bf.clear4038 = and i32 %bf.load4037, 255
  %cmp4039 = icmp eq i32 %bf.clear4038, 25
  br i1 %cmp4039, label %if.then.4041, label %if.end.4054

if.then.4041:                                     ; preds = %sw.bb.4031
  %1903 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4042 = bitcast %union.tree_node* %1903 to %struct.tree_exp*
  %operands4043 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4042, i32 0, i32 2
  %arrayidx4044 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4043, i32 0, i64 0
  %1904 = load %union.tree_node*, %union.tree_node** %arrayidx4044, align 8
  store %union.tree_node* %1904, %union.tree_node** %t1, align 8
  %1905 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4045 = bitcast %union.tree_node* %1905 to %struct.tree_exp*
  %operands4046 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4045, i32 0, i32 2
  %arrayidx4047 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4046, i32 0, i64 1
  %1906 = load %union.tree_node*, %union.tree_node** %arrayidx4047, align 8
  %1907 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4048 = bitcast %union.tree_node* %1907 to %struct.tree_exp*
  %operands4049 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4048, i32 0, i32 2
  %arrayidx4050 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4049, i32 0, i64 0
  store %union.tree_node* %1906, %union.tree_node** %arrayidx4050, align 8
  %1908 = load %union.tree_node*, %union.tree_node** %t1, align 8
  %1909 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4051 = bitcast %union.tree_node* %1909 to %struct.tree_exp*
  %operands4052 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4051, i32 0, i32 2
  %arrayidx4053 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4052, i32 0, i64 1
  store %union.tree_node* %1908, %union.tree_node** %arrayidx4053, align 8
  br label %if.end.4054

if.end.4054:                                      ; preds = %if.then.4041, %sw.bb.4031
  %1910 = load i32, i32* %modifier.addr, align 4
  %cmp4055 = icmp eq i32 %1910, 1
  br i1 %cmp4055, label %land.lhs.true.4057, label %if.end.4091

land.lhs.true.4057:                               ; preds = %if.end.4054
  %1911 = load i32, i32* %mode, align 4
  %1912 = load i32, i32* @ptr_mode, align 4
  %cmp4058 = icmp eq i32 %1911, %1912
  br i1 %cmp4058, label %land.lhs.true.4060, label %if.end.4091

land.lhs.true.4060:                               ; preds = %land.lhs.true.4057
  %1913 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4061 = bitcast %union.tree_node* %1913 to %struct.tree_exp*
  %operands4062 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4061, i32 0, i32 2
  %arrayidx4063 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4062, i32 0, i64 1
  %1914 = load %union.tree_node*, %union.tree_node** %arrayidx4063, align 8
  %call4064 = call i32 @host_integerp(%union.tree_node* %1914, i32 0)
  %tobool4065 = icmp ne i32 %call4064, 0
  br i1 %tobool4065, label %if.then.4066, label %if.end.4091

if.then.4066:                                     ; preds = %land.lhs.true.4060
  %1915 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4067 = bitcast %union.tree_node* %1915 to %struct.tree_exp*
  %operands4068 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4067, i32 0, i32 2
  %arrayidx4069 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4068, i32 0, i64 0
  %1916 = load %union.tree_node*, %union.tree_node** %arrayidx4069, align 8
  %1917 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4070 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1916, %struct.rtx_def* %1917, i32 0, i32 1)
  store %struct.rtx_def* %call4070, %struct.rtx_def** %op0, align 8
  %1918 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1919 = bitcast %struct.rtx_def* %1918 to i32*
  %bf.load4071 = load i32, i32* %1919, align 8
  %bf.clear4072 = and i32 %bf.load4071, 65535
  %cmp4073 = icmp ne i32 %bf.clear4072, 61
  br i1 %cmp4073, label %if.then.4075, label %if.end.4077

if.then.4075:                                     ; preds = %if.then.4066
  %1920 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call4076 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %1920, %struct.rtx_def* null)
  store %struct.rtx_def* %call4076, %struct.rtx_def** %op0, align 8
  br label %if.end.4077

if.end.4077:                                      ; preds = %if.then.4075, %if.then.4066
  %1921 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1922 = bitcast %struct.rtx_def* %1921 to i32*
  %bf.load4078 = load i32, i32* %1922, align 8
  %bf.clear4079 = and i32 %bf.load4078, 65535
  %cmp4080 = icmp ne i32 %bf.clear4079, 61
  br i1 %cmp4080, label %if.then.4082, label %if.end.4084

if.then.4082:                                     ; preds = %if.end.4077
  %1923 = load i32, i32* %mode, align 4
  %1924 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call4083 = call %struct.rtx_def* @copy_to_mode_reg(i32 %1923, %struct.rtx_def* %1924)
  store %struct.rtx_def* %call4083, %struct.rtx_def** %op0, align 8
  br label %if.end.4084

if.end.4084:                                      ; preds = %if.then.4082, %if.end.4077
  %1925 = load i32, i32* %mode, align 4
  %1926 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %1927 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4085 = bitcast %union.tree_node* %1927 to %struct.tree_exp*
  %operands4086 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4085, i32 0, i32 2
  %arrayidx4087 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4086, i32 0, i64 1
  %1928 = load %union.tree_node*, %union.tree_node** %arrayidx4087, align 8
  %call4088 = call i64 @tree_low_cst(%union.tree_node* %1928, i32 0)
  %call4089 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call4088)
  %call4090 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %1925, %struct.rtx_def* %1926, %struct.rtx_def* %call4089)
  store %struct.rtx_def* %call4090, %struct.rtx_def** %retval
  br label %return

if.end.4091:                                      ; preds = %land.lhs.true.4060, %land.lhs.true.4057, %if.end.4054
  %1929 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %1930 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4092 = bitcast %union.tree_node* %1930 to %struct.tree_exp*
  %operands4093 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4092, i32 0, i32 2
  %arrayidx4094 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4093, i32 0, i64 1
  %1931 = load %union.tree_node*, %union.tree_node** %arrayidx4094, align 8
  %call4095 = call i32 @safe_from_p(%struct.rtx_def* %1929, %union.tree_node* %1931, i32 1)
  %tobool4096 = icmp ne i32 %call4095, 0
  br i1 %tobool4096, label %if.end.4098, label %if.then.4097

if.then.4097:                                     ; preds = %if.end.4091
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.4098

if.end.4098:                                      ; preds = %if.then.4097, %if.end.4091
  %1932 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4099 = bitcast %union.tree_node* %1932 to %struct.tree_exp*
  %operands4100 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4099, i32 0, i32 2
  %arrayidx4101 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4100, i32 0, i64 0
  %1933 = load %union.tree_node*, %union.tree_node** %arrayidx4101, align 8
  %common4102 = bitcast %union.tree_node* %1933 to %struct.tree_common*
  %code4103 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4102, i32 0, i32 2
  %bf.load4104 = load i32, i32* %code4103, align 8
  %bf.clear4105 = and i32 %bf.load4104, 255
  %cmp4106 = icmp eq i32 %bf.clear4105, 115
  br i1 %cmp4106, label %land.lhs.true.4108, label %if.end.4396

land.lhs.true.4108:                               ; preds = %if.end.4098
  %1934 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common4109 = bitcast %union.tree_node* %1934 to %struct.tree_common*
  %code4110 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4109, i32 0, i32 2
  %bf.load4111 = load i32, i32* %code4110, align 8
  %bf.clear4112 = and i32 %bf.load4111, 255
  %cmp4113 = icmp eq i32 %bf.clear4112, 6
  br i1 %cmp4113, label %land.lhs.true.4115, label %if.end.4396

land.lhs.true.4115:                               ; preds = %land.lhs.true.4108
  %1935 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4116 = bitcast %union.tree_node* %1935 to %struct.tree_exp*
  %operands4117 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4116, i32 0, i32 2
  %arrayidx4118 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4117, i32 0, i64 0
  %1936 = load %union.tree_node*, %union.tree_node** %arrayidx4118, align 8
  %exp4119 = bitcast %union.tree_node* %1936 to %struct.tree_exp*
  %operands4120 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4119, i32 0, i32 2
  %arrayidx4121 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4120, i32 0, i64 0
  %1937 = load %union.tree_node*, %union.tree_node** %arrayidx4121, align 8
  %common4122 = bitcast %union.tree_node* %1937 to %struct.tree_common*
  %type4123 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4122, i32 0, i32 1
  %1938 = load %union.tree_node*, %union.tree_node** %type4123, align 8
  %type4124 = bitcast %union.tree_node* %1938 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4124, i32 0, i32 6
  %bf.load4125 = load i32, i32* %precision, align 4
  %bf.clear4126 = and i32 %bf.load4125, 511
  %1939 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4127 = bitcast %union.tree_node* %1939 to %struct.tree_exp*
  %operands4128 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4127, i32 0, i32 2
  %arrayidx4129 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4128, i32 0, i64 0
  %1940 = load %union.tree_node*, %union.tree_node** %arrayidx4129, align 8
  %common4130 = bitcast %union.tree_node* %1940 to %struct.tree_common*
  %type4131 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4130, i32 0, i32 1
  %1941 = load %union.tree_node*, %union.tree_node** %type4131, align 8
  %type4132 = bitcast %union.tree_node* %1941 to %struct.tree_type*
  %precision4133 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4132, i32 0, i32 6
  %bf.load4134 = load i32, i32* %precision4133, align 4
  %bf.clear4135 = and i32 %bf.load4134, 511
  %cmp4136 = icmp slt i32 %bf.clear4126, %bf.clear4135
  br i1 %cmp4136, label %land.lhs.true.4138, label %if.end.4396

land.lhs.true.4138:                               ; preds = %land.lhs.true.4115
  %1942 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4139 = bitcast %union.tree_node* %1942 to %struct.tree_exp*
  %operands4140 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4139, i32 0, i32 2
  %arrayidx4141 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4140, i32 0, i64 1
  %1943 = load %union.tree_node*, %union.tree_node** %arrayidx4141, align 8
  %common4142 = bitcast %union.tree_node* %1943 to %struct.tree_common*
  %code4143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4142, i32 0, i32 2
  %bf.load4144 = load i32, i32* %code4143, align 8
  %bf.clear4145 = and i32 %bf.load4144, 255
  %cmp4146 = icmp eq i32 %bf.clear4145, 25
  br i1 %cmp4146, label %land.lhs.true.4148, label %lor.lhs.false.4188

land.lhs.true.4148:                               ; preds = %land.lhs.true.4138
  %1944 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4149 = bitcast %union.tree_node* %1944 to %struct.tree_exp*
  %operands4150 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4149, i32 0, i32 2
  %arrayidx4151 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4150, i32 0, i64 1
  %1945 = load %union.tree_node*, %union.tree_node** %arrayidx4151, align 8
  %1946 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4152 = bitcast %union.tree_node* %1946 to %struct.tree_exp*
  %operands4153 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4152, i32 0, i32 2
  %arrayidx4154 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4153, i32 0, i64 0
  %1947 = load %union.tree_node*, %union.tree_node** %arrayidx4154, align 8
  %exp4155 = bitcast %union.tree_node* %1947 to %struct.tree_exp*
  %operands4156 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4155, i32 0, i32 2
  %arrayidx4157 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4156, i32 0, i64 0
  %1948 = load %union.tree_node*, %union.tree_node** %arrayidx4157, align 8
  %common4158 = bitcast %union.tree_node* %1948 to %struct.tree_common*
  %type4159 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4158, i32 0, i32 1
  %1949 = load %union.tree_node*, %union.tree_node** %type4159, align 8
  %call4160 = call i32 @int_fits_type_p(%union.tree_node* %1945, %union.tree_node* %1949)
  %tobool4161 = icmp ne i32 %call4160, 0
  br i1 %tobool4161, label %land.lhs.true.4162, label %lor.lhs.false.4188

land.lhs.true.4162:                               ; preds = %land.lhs.true.4148
  %1950 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4163 = bitcast %union.tree_node* %1950 to %struct.tree_exp*
  %operands4164 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4163, i32 0, i32 2
  %arrayidx4165 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4164, i32 0, i64 1
  %1951 = load %union.tree_node*, %union.tree_node** %arrayidx4165, align 8
  %common4166 = bitcast %union.tree_node* %1951 to %struct.tree_common*
  %type4167 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4166, i32 0, i32 1
  %1952 = load %union.tree_node*, %union.tree_node** %type4167, align 8
  %type4168 = bitcast %union.tree_node* %1952 to %struct.tree_type*
  %mode4169 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4168, i32 0, i32 6
  %bf.load4170 = load i32, i32* %mode4169, align 4
  %bf.lshr4171 = lshr i32 %bf.load4170, 9
  %bf.clear4172 = and i32 %bf.lshr4171, 127
  %idxprom4173 = sext i32 %bf.clear4172 to i64
  %arrayidx4174 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom4173
  %1953 = load i16, i16* %arrayidx4174, align 2
  %conv4175 = zext i16 %1953 to i32
  %cmp4176 = icmp sgt i32 %conv4175, 64
  br i1 %cmp4176, label %if.then.4254, label %lor.lhs.false.4178

lor.lhs.false.4178:                               ; preds = %land.lhs.true.4162
  %1954 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4179 = bitcast %union.tree_node* %1954 to %struct.tree_exp*
  %operands4180 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4179, i32 0, i32 2
  %arrayidx4181 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4180, i32 0, i64 1
  %1955 = load %union.tree_node*, %union.tree_node** %arrayidx4181, align 8
  %int_cst4182 = bitcast %union.tree_node* %1955 to %struct.tree_int_cst*
  %int_cst4183 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst4182, i32 0, i32 2
  %low4184 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst4183, i32 0, i32 0
  %1956 = load i64, i64* %low4184, align 8
  %call4185 = call i32 @exact_log2_wide(i64 %1956)
  %cmp4186 = icmp slt i32 %call4185, 0
  br i1 %cmp4186, label %if.then.4254, label %lor.lhs.false.4188

lor.lhs.false.4188:                               ; preds = %lor.lhs.false.4178, %land.lhs.true.4148, %land.lhs.true.4138
  %1957 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4189 = bitcast %union.tree_node* %1957 to %struct.tree_exp*
  %operands4190 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4189, i32 0, i32 2
  %arrayidx4191 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4190, i32 0, i64 1
  %1958 = load %union.tree_node*, %union.tree_node** %arrayidx4191, align 8
  %common4192 = bitcast %union.tree_node* %1958 to %struct.tree_common*
  %code4193 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4192, i32 0, i32 2
  %bf.load4194 = load i32, i32* %code4193, align 8
  %bf.clear4195 = and i32 %bf.load4194, 255
  %cmp4196 = icmp eq i32 %bf.clear4195, 115
  br i1 %cmp4196, label %land.lhs.true.4198, label %if.end.4396

land.lhs.true.4198:                               ; preds = %lor.lhs.false.4188
  %1959 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4199 = bitcast %union.tree_node* %1959 to %struct.tree_exp*
  %operands4200 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4199, i32 0, i32 2
  %arrayidx4201 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4200, i32 0, i64 1
  %1960 = load %union.tree_node*, %union.tree_node** %arrayidx4201, align 8
  %exp4202 = bitcast %union.tree_node* %1960 to %struct.tree_exp*
  %operands4203 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4202, i32 0, i32 2
  %arrayidx4204 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4203, i32 0, i64 0
  %1961 = load %union.tree_node*, %union.tree_node** %arrayidx4204, align 8
  %common4205 = bitcast %union.tree_node* %1961 to %struct.tree_common*
  %type4206 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4205, i32 0, i32 1
  %1962 = load %union.tree_node*, %union.tree_node** %type4206, align 8
  %type4207 = bitcast %union.tree_node* %1962 to %struct.tree_type*
  %precision4208 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4207, i32 0, i32 6
  %bf.load4209 = load i32, i32* %precision4208, align 4
  %bf.clear4210 = and i32 %bf.load4209, 511
  %1963 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4211 = bitcast %union.tree_node* %1963 to %struct.tree_exp*
  %operands4212 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4211, i32 0, i32 2
  %arrayidx4213 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4212, i32 0, i64 0
  %1964 = load %union.tree_node*, %union.tree_node** %arrayidx4213, align 8
  %exp4214 = bitcast %union.tree_node* %1964 to %struct.tree_exp*
  %operands4215 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4214, i32 0, i32 2
  %arrayidx4216 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4215, i32 0, i64 0
  %1965 = load %union.tree_node*, %union.tree_node** %arrayidx4216, align 8
  %common4217 = bitcast %union.tree_node* %1965 to %struct.tree_common*
  %type4218 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4217, i32 0, i32 1
  %1966 = load %union.tree_node*, %union.tree_node** %type4218, align 8
  %type4219 = bitcast %union.tree_node* %1966 to %struct.tree_type*
  %precision4220 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4219, i32 0, i32 6
  %bf.load4221 = load i32, i32* %precision4220, align 4
  %bf.clear4222 = and i32 %bf.load4221, 511
  %cmp4223 = icmp eq i32 %bf.clear4210, %bf.clear4222
  br i1 %cmp4223, label %land.lhs.true.4225, label %if.end.4396

land.lhs.true.4225:                               ; preds = %land.lhs.true.4198
  %1967 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4226 = bitcast %union.tree_node* %1967 to %struct.tree_exp*
  %operands4227 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4226, i32 0, i32 2
  %arrayidx4228 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4227, i32 0, i64 1
  %1968 = load %union.tree_node*, %union.tree_node** %arrayidx4228, align 8
  %exp4229 = bitcast %union.tree_node* %1968 to %struct.tree_exp*
  %operands4230 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4229, i32 0, i32 2
  %arrayidx4231 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4230, i32 0, i64 0
  %1969 = load %union.tree_node*, %union.tree_node** %arrayidx4231, align 8
  %common4232 = bitcast %union.tree_node* %1969 to %struct.tree_common*
  %type4233 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4232, i32 0, i32 1
  %1970 = load %union.tree_node*, %union.tree_node** %type4233, align 8
  %common4234 = bitcast %union.tree_node* %1970 to %struct.tree_common*
  %unsigned_flag4235 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4234, i32 0, i32 2
  %bf.load4236 = load i32, i32* %unsigned_flag4235, align 8
  %bf.lshr4237 = lshr i32 %bf.load4236, 13
  %bf.clear4238 = and i32 %bf.lshr4237, 1
  %1971 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4239 = bitcast %union.tree_node* %1971 to %struct.tree_exp*
  %operands4240 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4239, i32 0, i32 2
  %arrayidx4241 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4240, i32 0, i64 0
  %1972 = load %union.tree_node*, %union.tree_node** %arrayidx4241, align 8
  %exp4242 = bitcast %union.tree_node* %1972 to %struct.tree_exp*
  %operands4243 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4242, i32 0, i32 2
  %arrayidx4244 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4243, i32 0, i64 0
  %1973 = load %union.tree_node*, %union.tree_node** %arrayidx4244, align 8
  %common4245 = bitcast %union.tree_node* %1973 to %struct.tree_common*
  %type4246 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4245, i32 0, i32 1
  %1974 = load %union.tree_node*, %union.tree_node** %type4246, align 8
  %common4247 = bitcast %union.tree_node* %1974 to %struct.tree_common*
  %unsigned_flag4248 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4247, i32 0, i32 2
  %bf.load4249 = load i32, i32* %unsigned_flag4248, align 8
  %bf.lshr4250 = lshr i32 %bf.load4249, 13
  %bf.clear4251 = and i32 %bf.lshr4250, 1
  %cmp4252 = icmp eq i32 %bf.clear4238, %bf.clear4251
  br i1 %cmp4252, label %if.then.4254, label %if.end.4396

if.then.4254:                                     ; preds = %land.lhs.true.4225, %lor.lhs.false.4178, %land.lhs.true.4162
  %1975 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4255 = bitcast %union.tree_node* %1975 to %struct.tree_exp*
  %operands4256 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4255, i32 0, i32 2
  %arrayidx4257 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4256, i32 0, i64 0
  %1976 = load %union.tree_node*, %union.tree_node** %arrayidx4257, align 8
  %exp4258 = bitcast %union.tree_node* %1976 to %struct.tree_exp*
  %operands4259 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4258, i32 0, i32 2
  %arrayidx4260 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4259, i32 0, i64 0
  %1977 = load %union.tree_node*, %union.tree_node** %arrayidx4260, align 8
  %common4261 = bitcast %union.tree_node* %1977 to %struct.tree_common*
  %type4262 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4261, i32 0, i32 1
  %1978 = load %union.tree_node*, %union.tree_node** %type4262, align 8
  %type4263 = bitcast %union.tree_node* %1978 to %struct.tree_type*
  %mode4264 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4263, i32 0, i32 6
  %bf.load4265 = load i32, i32* %mode4264, align 4
  %bf.lshr4266 = lshr i32 %bf.load4265, 9
  %bf.clear4267 = and i32 %bf.lshr4266, 127
  store i32 %bf.clear4267, i32* %innermode, align 4
  %1979 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4268 = bitcast %union.tree_node* %1979 to %struct.tree_exp*
  %operands4269 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4268, i32 0, i32 2
  %arrayidx4270 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4269, i32 0, i64 0
  %1980 = load %union.tree_node*, %union.tree_node** %arrayidx4270, align 8
  %exp4271 = bitcast %union.tree_node* %1980 to %struct.tree_exp*
  %operands4272 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4271, i32 0, i32 2
  %arrayidx4273 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4272, i32 0, i64 0
  %1981 = load %union.tree_node*, %union.tree_node** %arrayidx4273, align 8
  %common4274 = bitcast %union.tree_node* %1981 to %struct.tree_common*
  %type4275 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4274, i32 0, i32 1
  %1982 = load %union.tree_node*, %union.tree_node** %type4275, align 8
  %common4276 = bitcast %union.tree_node* %1982 to %struct.tree_common*
  %unsigned_flag4277 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4276, i32 0, i32 2
  %bf.load4278 = load i32, i32* %unsigned_flag4277, align 8
  %bf.lshr4279 = lshr i32 %bf.load4278, 13
  %bf.clear4280 = and i32 %bf.lshr4279, 1
  %tobool4281 = icmp ne i32 %bf.clear4280, 0
  br i1 %tobool4281, label %cond.true.4282, label %cond.false.4283

cond.true.4282:                                   ; preds = %if.then.4254
  %1983 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 8), align 8
  br label %cond.end.4284

cond.false.4283:                                  ; preds = %if.then.4254
  %1984 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 9), align 8
  br label %cond.end.4284

cond.end.4284:                                    ; preds = %cond.false.4283, %cond.true.4282
  %cond4285 = phi %struct.optab* [ %1983, %cond.true.4282 ], [ %1984, %cond.false.4283 ]
  store %struct.optab* %cond4285, %struct.optab** %other_optab, align 8
  %1985 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4286 = bitcast %union.tree_node* %1985 to %struct.tree_exp*
  %operands4287 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4286, i32 0, i32 2
  %arrayidx4288 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4287, i32 0, i64 0
  %1986 = load %union.tree_node*, %union.tree_node** %arrayidx4288, align 8
  %exp4289 = bitcast %union.tree_node* %1986 to %struct.tree_exp*
  %operands4290 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4289, i32 0, i32 2
  %arrayidx4291 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4290, i32 0, i64 0
  %1987 = load %union.tree_node*, %union.tree_node** %arrayidx4291, align 8
  %common4292 = bitcast %union.tree_node* %1987 to %struct.tree_common*
  %type4293 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4292, i32 0, i32 1
  %1988 = load %union.tree_node*, %union.tree_node** %type4293, align 8
  %common4294 = bitcast %union.tree_node* %1988 to %struct.tree_common*
  %unsigned_flag4295 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4294, i32 0, i32 2
  %bf.load4296 = load i32, i32* %unsigned_flag4295, align 8
  %bf.lshr4297 = lshr i32 %bf.load4296, 13
  %bf.clear4298 = and i32 %bf.lshr4297, 1
  %tobool4299 = icmp ne i32 %bf.clear4298, 0
  br i1 %tobool4299, label %cond.true.4300, label %cond.false.4301

cond.true.4300:                                   ; preds = %cond.end.4284
  %1989 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 9), align 8
  br label %cond.end.4302

cond.false.4301:                                  ; preds = %cond.end.4284
  %1990 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 8), align 8
  br label %cond.end.4302

cond.end.4302:                                    ; preds = %cond.false.4301, %cond.true.4300
  %cond4303 = phi %struct.optab* [ %1989, %cond.true.4300 ], [ %1990, %cond.false.4301 ]
  store %struct.optab* %cond4303, %struct.optab** %this_optab, align 8
  %1991 = load i32, i32* %mode, align 4
  %1992 = load i32, i32* %innermode, align 4
  %idxprom4304 = sext i32 %1992 to i64
  %arrayidx4305 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom4304
  %1993 = load i8, i8* %arrayidx4305, align 1
  %conv4306 = zext i8 %1993 to i32
  %cmp4307 = icmp eq i32 %1991, %conv4306
  br i1 %cmp4307, label %if.then.4309, label %if.end.4395

if.then.4309:                                     ; preds = %cond.end.4302
  %1994 = load i32, i32* %mode, align 4
  %idxprom4310 = sext i32 %1994 to i64
  %1995 = load %struct.optab*, %struct.optab** %this_optab, align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %1995, i32 0, i32 1
  %arrayidx4311 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom4310
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx4311, i32 0, i32 0
  %1996 = load i32, i32* %insn_code, align 4
  %cmp4312 = icmp ne i32 %1996, 1317
  br i1 %cmp4312, label %if.then.4314, label %if.else.4345

if.then.4314:                                     ; preds = %if.then.4309
  %1997 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4315 = bitcast %union.tree_node* %1997 to %struct.tree_exp*
  %operands4316 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4315, i32 0, i32 2
  %arrayidx4317 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4316, i32 0, i64 0
  %1998 = load %union.tree_node*, %union.tree_node** %arrayidx4317, align 8
  %exp4318 = bitcast %union.tree_node* %1998 to %struct.tree_exp*
  %operands4319 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4318, i32 0, i32 2
  %arrayidx4320 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4319, i32 0, i64 0
  %1999 = load %union.tree_node*, %union.tree_node** %arrayidx4320, align 8
  %call4321 = call %struct.rtx_def* @expand_expr(%union.tree_node* %1999, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4321, %struct.rtx_def** %op0, align 8
  %2000 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4322 = bitcast %union.tree_node* %2000 to %struct.tree_exp*
  %operands4323 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4322, i32 0, i32 2
  %arrayidx4324 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4323, i32 0, i64 1
  %2001 = load %union.tree_node*, %union.tree_node** %arrayidx4324, align 8
  %common4325 = bitcast %union.tree_node* %2001 to %struct.tree_common*
  %code4326 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4325, i32 0, i32 2
  %bf.load4327 = load i32, i32* %code4326, align 8
  %bf.clear4328 = and i32 %bf.load4327, 255
  %cmp4329 = icmp eq i32 %bf.clear4328, 25
  br i1 %cmp4329, label %if.then.4331, label %if.else.4336

if.then.4331:                                     ; preds = %if.then.4314
  %2002 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4332 = bitcast %union.tree_node* %2002 to %struct.tree_exp*
  %operands4333 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4332, i32 0, i32 2
  %arrayidx4334 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4333, i32 0, i64 1
  %2003 = load %union.tree_node*, %union.tree_node** %arrayidx4334, align 8
  %call4335 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2003, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4335, %struct.rtx_def** %op1, align 8
  br label %if.end.4344

if.else.4336:                                     ; preds = %if.then.4314
  %2004 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4337 = bitcast %union.tree_node* %2004 to %struct.tree_exp*
  %operands4338 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4337, i32 0, i32 2
  %arrayidx4339 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4338, i32 0, i64 1
  %2005 = load %union.tree_node*, %union.tree_node** %arrayidx4339, align 8
  %exp4340 = bitcast %union.tree_node* %2005 to %struct.tree_exp*
  %operands4341 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4340, i32 0, i32 2
  %arrayidx4342 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4341, i32 0, i64 0
  %2006 = load %union.tree_node*, %union.tree_node** %arrayidx4342, align 8
  %call4343 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2006, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4343, %struct.rtx_def** %op1, align 8
  br label %if.end.4344

if.end.4344:                                      ; preds = %if.else.4336, %if.then.4331
  br label %binop2

if.else.4345:                                     ; preds = %if.then.4309
  %2007 = load i32, i32* %mode, align 4
  %idxprom4346 = sext i32 %2007 to i64
  %2008 = load %struct.optab*, %struct.optab** %other_optab, align 8
  %handlers4347 = getelementptr inbounds %struct.optab, %struct.optab* %2008, i32 0, i32 1
  %arrayidx4348 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers4347, i32 0, i64 %idxprom4346
  %insn_code4349 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx4348, i32 0, i32 0
  %2009 = load i32, i32* %insn_code4349, align 4
  %cmp4350 = icmp ne i32 %2009, 1317
  br i1 %cmp4350, label %land.lhs.true.4352, label %if.end.4393

land.lhs.true.4352:                               ; preds = %if.else.4345
  %2010 = load i32, i32* %innermode, align 4
  %2011 = load i32, i32* @word_mode, align 4
  %cmp4353 = icmp eq i32 %2010, %2011
  br i1 %cmp4353, label %if.then.4355, label %if.end.4393

if.then.4355:                                     ; preds = %land.lhs.true.4352
  %2012 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4356 = bitcast %union.tree_node* %2012 to %struct.tree_exp*
  %operands4357 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4356, i32 0, i32 2
  %arrayidx4358 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4357, i32 0, i64 0
  %2013 = load %union.tree_node*, %union.tree_node** %arrayidx4358, align 8
  %exp4359 = bitcast %union.tree_node* %2013 to %struct.tree_exp*
  %operands4360 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4359, i32 0, i32 2
  %arrayidx4361 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4360, i32 0, i64 0
  %2014 = load %union.tree_node*, %union.tree_node** %arrayidx4361, align 8
  %call4362 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2014, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4362, %struct.rtx_def** %op0, align 8
  %2015 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4363 = bitcast %union.tree_node* %2015 to %struct.tree_exp*
  %operands4364 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4363, i32 0, i32 2
  %arrayidx4365 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4364, i32 0, i64 1
  %2016 = load %union.tree_node*, %union.tree_node** %arrayidx4365, align 8
  %common4366 = bitcast %union.tree_node* %2016 to %struct.tree_common*
  %code4367 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4366, i32 0, i32 2
  %bf.load4368 = load i32, i32* %code4367, align 8
  %bf.clear4369 = and i32 %bf.load4368, 255
  %cmp4370 = icmp eq i32 %bf.clear4369, 25
  br i1 %cmp4370, label %if.then.4372, label %if.else.4378

if.then.4372:                                     ; preds = %if.then.4355
  %2017 = load i32, i32* %innermode, align 4
  %2018 = load i32, i32* %mode, align 4
  %2019 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4373 = bitcast %union.tree_node* %2019 to %struct.tree_exp*
  %operands4374 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4373, i32 0, i32 2
  %arrayidx4375 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4374, i32 0, i64 1
  %2020 = load %union.tree_node*, %union.tree_node** %arrayidx4375, align 8
  %call4376 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2020, %struct.rtx_def* null, i32 0, i32 0)
  %2021 = load i32, i32* %unsignedp, align 4
  %call4377 = call %struct.rtx_def* @convert_modes(i32 %2017, i32 %2018, %struct.rtx_def* %call4376, i32 %2021)
  store %struct.rtx_def* %call4377, %struct.rtx_def** %op1, align 8
  br label %if.end.4386

if.else.4378:                                     ; preds = %if.then.4355
  %2022 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4379 = bitcast %union.tree_node* %2022 to %struct.tree_exp*
  %operands4380 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4379, i32 0, i32 2
  %arrayidx4381 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4380, i32 0, i64 1
  %2023 = load %union.tree_node*, %union.tree_node** %arrayidx4381, align 8
  %exp4382 = bitcast %union.tree_node* %2023 to %struct.tree_exp*
  %operands4383 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4382, i32 0, i32 2
  %arrayidx4384 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4383, i32 0, i64 0
  %2024 = load %union.tree_node*, %union.tree_node** %arrayidx4384, align 8
  %call4385 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2024, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4385, %struct.rtx_def** %op1, align 8
  br label %if.end.4386

if.end.4386:                                      ; preds = %if.else.4378, %if.then.4372
  %2025 = load i32, i32* %mode, align 4
  %2026 = load %struct.optab*, %struct.optab** %other_optab, align 8
  %2027 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2028 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2029 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2030 = load i32, i32* %unsignedp, align 4
  %call4387 = call %struct.rtx_def* @expand_binop(i32 %2025, %struct.optab* %2026, %struct.rtx_def* %2027, %struct.rtx_def* %2028, %struct.rtx_def* %2029, i32 %2030, i32 3)
  store %struct.rtx_def* %call4387, %struct.rtx_def** %temp, align 8
  %2031 = load i32, i32* %innermode, align 4
  %2032 = load i32, i32* %innermode, align 4
  %2033 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call4388 = call %struct.rtx_def* @gen_highpart(i32 %2032, %struct.rtx_def* %2033)
  %2034 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2035 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2036 = load i32, i32* %innermode, align 4
  %2037 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call4389 = call %struct.rtx_def* @gen_highpart(i32 %2036, %struct.rtx_def* %2037)
  %2038 = load i32, i32* %unsignedp, align 4
  %call4390 = call %struct.rtx_def* @expand_mult_highpart_adjust(i32 %2031, %struct.rtx_def* %call4388, %struct.rtx_def* %2034, %struct.rtx_def* %2035, %struct.rtx_def* %call4389, i32 %2038)
  store %struct.rtx_def* %call4390, %struct.rtx_def** %htem, align 8
  %2039 = load i32, i32* %innermode, align 4
  %2040 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call4391 = call %struct.rtx_def* @gen_highpart(i32 %2039, %struct.rtx_def* %2040)
  %2041 = load %struct.rtx_def*, %struct.rtx_def** %htem, align 8
  %call4392 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call4391, %struct.rtx_def* %2041)
  %2042 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2042, %struct.rtx_def** %retval
  br label %return

if.end.4393:                                      ; preds = %land.lhs.true.4352, %if.else.4345
  br label %if.end.4394

if.end.4394:                                      ; preds = %if.end.4393
  br label %if.end.4395

if.end.4395:                                      ; preds = %if.end.4394, %cond.end.4302
  br label %if.end.4396

if.end.4396:                                      ; preds = %if.end.4395, %land.lhs.true.4225, %land.lhs.true.4198, %lor.lhs.false.4188, %land.lhs.true.4115, %land.lhs.true.4108, %if.end.4098
  %2043 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4397 = bitcast %union.tree_node* %2043 to %struct.tree_exp*
  %operands4398 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4397, i32 0, i32 2
  %arrayidx4399 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4398, i32 0, i64 0
  %2044 = load %union.tree_node*, %union.tree_node** %arrayidx4399, align 8
  %2045 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4400 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2044, %struct.rtx_def* %2045, i32 0, i32 0)
  store %struct.rtx_def* %call4400, %struct.rtx_def** %op0, align 8
  %2046 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4401 = bitcast %union.tree_node* %2046 to %struct.tree_exp*
  %operands4402 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4401, i32 0, i32 2
  %arrayidx4403 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4402, i32 0, i64 1
  %2047 = load %union.tree_node*, %union.tree_node** %arrayidx4403, align 8
  %call4404 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2047, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4404, %struct.rtx_def** %op1, align 8
  %2048 = load i32, i32* %mode, align 4
  %2049 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2050 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2051 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2052 = load i32, i32* %unsignedp, align 4
  %call4405 = call %struct.rtx_def* @expand_mult(i32 %2048, %struct.rtx_def* %2049, %struct.rtx_def* %2050, %struct.rtx_def* %2051, i32 %2052)
  store %struct.rtx_def* %call4405, %struct.rtx_def** %retval
  br label %return

sw.bb.4406:                                       ; preds = %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185
  %2053 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %2054 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4407 = bitcast %union.tree_node* %2054 to %struct.tree_exp*
  %operands4408 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4407, i32 0, i32 2
  %arrayidx4409 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4408, i32 0, i64 1
  %2055 = load %union.tree_node*, %union.tree_node** %arrayidx4409, align 8
  %call4410 = call i32 @safe_from_p(%struct.rtx_def* %2053, %union.tree_node* %2055, i32 1)
  %tobool4411 = icmp ne i32 %call4410, 0
  br i1 %tobool4411, label %if.end.4413, label %if.then.4412

if.then.4412:                                     ; preds = %sw.bb.4406
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.4413

if.end.4413:                                      ; preds = %if.then.4412, %sw.bb.4406
  %2056 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4414 = bitcast %union.tree_node* %2056 to %struct.tree_exp*
  %operands4415 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4414, i32 0, i32 2
  %arrayidx4416 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4415, i32 0, i64 0
  %2057 = load %union.tree_node*, %union.tree_node** %arrayidx4416, align 8
  %2058 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4417 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2057, %struct.rtx_def* %2058, i32 0, i32 0)
  store %struct.rtx_def* %call4417, %struct.rtx_def** %op0, align 8
  %2059 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4418 = bitcast %union.tree_node* %2059 to %struct.tree_exp*
  %operands4419 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4418, i32 0, i32 2
  %arrayidx4420 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4419, i32 0, i64 1
  %2060 = load %union.tree_node*, %union.tree_node** %arrayidx4420, align 8
  %call4421 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2060, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4421, %struct.rtx_def** %op1, align 8
  %2061 = load i32, i32* %code, align 4
  %2062 = load i32, i32* %mode, align 4
  %2063 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2064 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2065 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2066 = load i32, i32* %unsignedp, align 4
  %call4422 = call %struct.rtx_def* @expand_divmod(i32 0, i32 %2061, i32 %2062, %struct.rtx_def* %2063, %struct.rtx_def* %2064, %struct.rtx_def* %2065, i32 %2066)
  store %struct.rtx_def* %call4422, %struct.rtx_def** %retval
  br label %return

sw.bb.4423:                                       ; preds = %if.end.185
  %2067 = load i32, i32* @flag_unsafe_math_optimizations, align 4
  %tobool4424 = icmp ne i32 %2067, 0
  br i1 %tobool4424, label %land.lhs.true.4425, label %if.end.4453

land.lhs.true.4425:                               ; preds = %sw.bb.4423
  %2068 = load i32, i32* @optimize, align 4
  %tobool4426 = icmp ne i32 %2068, 0
  br i1 %tobool4426, label %land.lhs.true.4427, label %if.end.4453

land.lhs.true.4427:                               ; preds = %land.lhs.true.4425
  %2069 = load i32, i32* @optimize_size, align 4
  %tobool4428 = icmp ne i32 %2069, 0
  br i1 %tobool4428, label %if.end.4453, label %land.lhs.true.4429

land.lhs.true.4429:                               ; preds = %land.lhs.true.4427
  %2070 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common4430 = bitcast %union.tree_node* %2070 to %struct.tree_common*
  %code4431 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4430, i32 0, i32 2
  %bf.load4432 = load i32, i32* %code4431, align 8
  %bf.clear4433 = and i32 %bf.load4432, 255
  %cmp4434 = icmp eq i32 %bf.clear4433, 7
  br i1 %cmp4434, label %land.lhs.true.4436, label %if.end.4453

land.lhs.true.4436:                               ; preds = %land.lhs.true.4429
  %2071 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4437 = bitcast %union.tree_node* %2071 to %struct.tree_exp*
  %operands4438 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4437, i32 0, i32 2
  %arrayidx4439 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4438, i32 0, i64 0
  %2072 = load %union.tree_node*, %union.tree_node** %arrayidx4439, align 8
  %call4440 = call i32 @real_onep(%union.tree_node* %2072)
  %tobool4441 = icmp ne i32 %call4440, 0
  br i1 %tobool4441, label %if.end.4453, label %if.then.4442

if.then.4442:                                     ; preds = %land.lhs.true.4436
  %2073 = load %union.tree_node*, %union.tree_node** %type, align 8
  %2074 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4443 = bitcast %union.tree_node* %2074 to %struct.tree_exp*
  %operands4444 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4443, i32 0, i32 2
  %arrayidx4445 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4444, i32 0, i64 0
  %2075 = load %union.tree_node*, %union.tree_node** %arrayidx4445, align 8
  %2076 = load %union.tree_node*, %union.tree_node** %type, align 8
  %2077 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call4446 = call %union.tree_node* @build_real(%union.tree_node* %2077, %struct.realvaluetype* byval align 8 @dconst1)
  %2078 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4447 = bitcast %union.tree_node* %2078 to %struct.tree_exp*
  %operands4448 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4447, i32 0, i32 2
  %arrayidx4449 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4448, i32 0, i64 1
  %2079 = load %union.tree_node*, %union.tree_node** %arrayidx4449, align 8
  %call4450 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 70, %union.tree_node* %2076, %union.tree_node* %call4446, %union.tree_node* %2079)
  %call4451 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 61, %union.tree_node* %2073, %union.tree_node* %2075, %union.tree_node* %call4450)
  %2080 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2081 = load i32, i32* %tmode.addr, align 4
  %2082 = load i32, i32* %unsignedp, align 4
  %call4452 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call4451, %struct.rtx_def* %2080, i32 %2081, i32 %2082)
  store %struct.rtx_def* %call4452, %struct.rtx_def** %retval
  br label %return

if.end.4453:                                      ; preds = %land.lhs.true.4436, %land.lhs.true.4429, %land.lhs.true.4427, %land.lhs.true.4425, %sw.bb.4423
  %2083 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 10), align 8
  store %struct.optab* %2083, %struct.optab** %this_optab, align 8
  br label %binop

sw.bb.4454:                                       ; preds = %if.end.185, %if.end.185, %if.end.185, %if.end.185
  %2084 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %2085 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4455 = bitcast %union.tree_node* %2085 to %struct.tree_exp*
  %operands4456 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4455, i32 0, i32 2
  %arrayidx4457 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4456, i32 0, i64 1
  %2086 = load %union.tree_node*, %union.tree_node** %arrayidx4457, align 8
  %call4458 = call i32 @safe_from_p(%struct.rtx_def* %2084, %union.tree_node* %2086, i32 1)
  %tobool4459 = icmp ne i32 %call4458, 0
  br i1 %tobool4459, label %if.end.4461, label %if.then.4460

if.then.4460:                                     ; preds = %sw.bb.4454
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.4461

if.end.4461:                                      ; preds = %if.then.4460, %sw.bb.4454
  %2087 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4462 = bitcast %union.tree_node* %2087 to %struct.tree_exp*
  %operands4463 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4462, i32 0, i32 2
  %arrayidx4464 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4463, i32 0, i64 0
  %2088 = load %union.tree_node*, %union.tree_node** %arrayidx4464, align 8
  %2089 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4465 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2088, %struct.rtx_def* %2089, i32 0, i32 0)
  store %struct.rtx_def* %call4465, %struct.rtx_def** %op0, align 8
  %2090 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4466 = bitcast %union.tree_node* %2090 to %struct.tree_exp*
  %operands4467 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4466, i32 0, i32 2
  %arrayidx4468 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4467, i32 0, i64 1
  %2091 = load %union.tree_node*, %union.tree_node** %arrayidx4468, align 8
  %call4469 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2091, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4469, %struct.rtx_def** %op1, align 8
  %2092 = load i32, i32* %code, align 4
  %2093 = load i32, i32* %mode, align 4
  %2094 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2095 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2096 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2097 = load i32, i32* %unsignedp, align 4
  %call4470 = call %struct.rtx_def* @expand_divmod(i32 1, i32 %2092, i32 %2093, %struct.rtx_def* %2094, %struct.rtx_def* %2095, %struct.rtx_def* %2096, i32 %2097)
  store %struct.rtx_def* %call4470, %struct.rtx_def** %retval
  br label %return

sw.bb.4471:                                       ; preds = %if.end.185, %if.end.185, %if.end.185
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7833, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

sw.bb.4472:                                       ; preds = %if.end.185
  %2098 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4473 = bitcast %union.tree_node* %2098 to %struct.tree_exp*
  %operands4474 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4473, i32 0, i32 2
  %arrayidx4475 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4474, i32 0, i64 0
  %2099 = load %union.tree_node*, %union.tree_node** %arrayidx4475, align 8
  %call4476 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2099, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4476, %struct.rtx_def** %op0, align 8
  %2100 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp4477 = icmp eq %struct.rtx_def* %2100, null
  br i1 %cmp4477, label %if.then.4479, label %if.end.4481

if.then.4479:                                     ; preds = %sw.bb.4472
  %2101 = load i32, i32* %mode, align 4
  %call4480 = call %struct.rtx_def* @gen_reg_rtx(i32 %2101)
  store %struct.rtx_def* %call4480, %struct.rtx_def** %target.addr, align 8
  br label %if.end.4481

if.end.4481:                                      ; preds = %if.then.4479, %sw.bb.4472
  %2102 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2103 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2104 = load i32, i32* %unsignedp, align 4
  call void @expand_fix(%struct.rtx_def* %2102, %struct.rtx_def* %2103, i32 %2104)
  %2105 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2105, %struct.rtx_def** %retval
  br label %return

sw.bb.4482:                                       ; preds = %if.end.185
  %2106 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4483 = bitcast %union.tree_node* %2106 to %struct.tree_exp*
  %operands4484 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4483, i32 0, i32 2
  %arrayidx4485 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4484, i32 0, i64 0
  %2107 = load %union.tree_node*, %union.tree_node** %arrayidx4485, align 8
  %call4486 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2107, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4486, %struct.rtx_def** %op0, align 8
  %2108 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp4487 = icmp eq %struct.rtx_def* %2108, null
  br i1 %cmp4487, label %if.then.4489, label %if.end.4491

if.then.4489:                                     ; preds = %sw.bb.4482
  %2109 = load i32, i32* %mode, align 4
  %call4490 = call %struct.rtx_def* @gen_reg_rtx(i32 %2109)
  store %struct.rtx_def* %call4490, %struct.rtx_def** %target.addr, align 8
  br label %if.end.4491

if.end.4491:                                      ; preds = %if.then.4489, %sw.bb.4482
  %2110 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2111 = bitcast %struct.rtx_def* %2110 to i32*
  %bf.load4492 = load i32, i32* %2111, align 8
  %bf.lshr4493 = lshr i32 %bf.load4492, 16
  %bf.clear4494 = and i32 %bf.lshr4493, 255
  %cmp4495 = icmp eq i32 %bf.clear4494, 0
  br i1 %cmp4495, label %if.then.4497, label %if.end.4509

if.then.4497:                                     ; preds = %if.end.4491
  %2112 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4498 = bitcast %union.tree_node* %2112 to %struct.tree_exp*
  %operands4499 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4498, i32 0, i32 2
  %arrayidx4500 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4499, i32 0, i64 0
  %2113 = load %union.tree_node*, %union.tree_node** %arrayidx4500, align 8
  %common4501 = bitcast %union.tree_node* %2113 to %struct.tree_common*
  %type4502 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4501, i32 0, i32 1
  %2114 = load %union.tree_node*, %union.tree_node** %type4502, align 8
  %type4503 = bitcast %union.tree_node* %2114 to %struct.tree_type*
  %mode4504 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4503, i32 0, i32 6
  %bf.load4505 = load i32, i32* %mode4504, align 4
  %bf.lshr4506 = lshr i32 %bf.load4505, 9
  %bf.clear4507 = and i32 %bf.lshr4506, 127
  %2115 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call4508 = call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.clear4507, %struct.rtx_def* %2115)
  store %struct.rtx_def* %call4508, %struct.rtx_def** %op0, align 8
  br label %if.end.4509

if.end.4509:                                      ; preds = %if.then.4497, %if.end.4491
  %2116 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2117 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2118 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4510 = bitcast %union.tree_node* %2118 to %struct.tree_exp*
  %operands4511 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4510, i32 0, i32 2
  %arrayidx4512 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4511, i32 0, i64 0
  %2119 = load %union.tree_node*, %union.tree_node** %arrayidx4512, align 8
  %common4513 = bitcast %union.tree_node* %2119 to %struct.tree_common*
  %type4514 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4513, i32 0, i32 1
  %2120 = load %union.tree_node*, %union.tree_node** %type4514, align 8
  %common4515 = bitcast %union.tree_node* %2120 to %struct.tree_common*
  %unsigned_flag4516 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4515, i32 0, i32 2
  %bf.load4517 = load i32, i32* %unsigned_flag4516, align 8
  %bf.lshr4518 = lshr i32 %bf.load4517, 13
  %bf.clear4519 = and i32 %bf.lshr4518, 1
  call void @expand_float(%struct.rtx_def* %2116, %struct.rtx_def* %2117, i32 %bf.clear4519)
  %2121 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2121, %struct.rtx_def** %retval
  br label %return

sw.bb.4520:                                       ; preds = %if.end.185
  %2122 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4521 = bitcast %union.tree_node* %2122 to %struct.tree_exp*
  %operands4522 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4521, i32 0, i32 2
  %arrayidx4523 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4522, i32 0, i64 0
  %2123 = load %union.tree_node*, %union.tree_node** %arrayidx4523, align 8
  %2124 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4524 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2123, %struct.rtx_def* %2124, i32 0, i32 0)
  store %struct.rtx_def* %call4524, %struct.rtx_def** %op0, align 8
  %2125 = load i32, i32* %mode, align 4
  %2126 = load i32, i32* %unsignedp, align 4
  %tobool4525 = icmp ne i32 %2126, 0
  br i1 %tobool4525, label %cond.false.4534, label %land.lhs.true.4526

land.lhs.true.4526:                               ; preds = %sw.bb.4520
  %2127 = load i32, i32* @flag_trapv, align 4
  %tobool4527 = icmp ne i32 %2127, 0
  br i1 %tobool4527, label %land.lhs.true.4528, label %cond.false.4534

land.lhs.true.4528:                               ; preds = %land.lhs.true.4526
  %2128 = load i32, i32* %mode, align 4
  %idxprom4529 = sext i32 %2128 to i64
  %arrayidx4530 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom4529
  %2129 = load i32, i32* %arrayidx4530, align 4
  %cmp4531 = icmp eq i32 %2129, 1
  br i1 %cmp4531, label %cond.true.4533, label %cond.false.4534

cond.true.4533:                                   ; preds = %land.lhs.true.4528
  %2130 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 33), align 8
  br label %cond.end.4535

cond.false.4534:                                  ; preds = %land.lhs.true.4528, %land.lhs.true.4526, %sw.bb.4520
  %2131 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 32), align 8
  br label %cond.end.4535

cond.end.4535:                                    ; preds = %cond.false.4534, %cond.true.4533
  %cond4536 = phi %struct.optab* [ %2130, %cond.true.4533 ], [ %2131, %cond.false.4534 ]
  %2132 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2133 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call4537 = call %struct.rtx_def* @expand_unop(i32 %2125, %struct.optab* %cond4536, %struct.rtx_def* %2132, %struct.rtx_def* %2133, i32 0)
  store %struct.rtx_def* %call4537, %struct.rtx_def** %temp, align 8
  %2134 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp4538 = icmp eq %struct.rtx_def* %2134, null
  br i1 %cmp4538, label %if.then.4540, label %if.end.4541

if.then.4540:                                     ; preds = %cond.end.4535
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7862, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.4541:                                      ; preds = %cond.end.4535
  %2135 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2135, %struct.rtx_def** %retval
  br label %return

sw.bb.4542:                                       ; preds = %if.end.185
  %2136 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4543 = bitcast %union.tree_node* %2136 to %struct.tree_exp*
  %operands4544 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4543, i32 0, i32 2
  %arrayidx4545 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4544, i32 0, i64 0
  %2137 = load %union.tree_node*, %union.tree_node** %arrayidx4545, align 8
  %2138 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4546 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2137, %struct.rtx_def* %2138, i32 0, i32 0)
  store %struct.rtx_def* %call4546, %struct.rtx_def** %op0, align 8
  %2139 = load i32, i32* %mode, align 4
  %idxprom4547 = sext i32 %2139 to i64
  %arrayidx4548 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom4547
  %2140 = load i32, i32* %arrayidx4548, align 4
  %cmp4549 = icmp eq i32 %2140, 5
  br i1 %cmp4549, label %if.then.4556, label %lor.lhs.false.4551

lor.lhs.false.4551:                               ; preds = %sw.bb.4542
  %2141 = load i32, i32* %mode, align 4
  %idxprom4552 = sext i32 %2141 to i64
  %arrayidx4553 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom4552
  %2142 = load i32, i32* %arrayidx4553, align 4
  %cmp4554 = icmp eq i32 %2142, 6
  br i1 %cmp4554, label %if.then.4556, label %if.end.4558

if.then.4556:                                     ; preds = %lor.lhs.false.4551, %sw.bb.4542
  %2143 = load i32, i32* %mode, align 4
  %2144 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2145 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2146 = load i32, i32* %unsignedp, align 4
  %call4557 = call %struct.rtx_def* @expand_complex_abs(i32 %2143, %struct.rtx_def* %2144, %struct.rtx_def* %2145, i32 %2146)
  store %struct.rtx_def* %call4557, %struct.rtx_def** %retval
  br label %return

if.end.4558:                                      ; preds = %lor.lhs.false.4551
  %2147 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common4559 = bitcast %union.tree_node* %2147 to %struct.tree_common*
  %unsigned_flag4560 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4559, i32 0, i32 2
  %bf.load4561 = load i32, i32* %unsigned_flag4560, align 8
  %bf.lshr4562 = lshr i32 %bf.load4561, 13
  %bf.clear4563 = and i32 %bf.lshr4562, 1
  %tobool4564 = icmp ne i32 %bf.clear4563, 0
  br i1 %tobool4564, label %if.then.4565, label %if.end.4566

if.then.4565:                                     ; preds = %if.end.4558
  %2148 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %2148, %struct.rtx_def** %retval
  br label %return

if.end.4566:                                      ; preds = %if.end.4558
  %2149 = load i32, i32* %mode, align 4
  %2150 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2151 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2152 = load i32, i32* %unsignedp, align 4
  %2153 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2154 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4567 = bitcast %union.tree_node* %2154 to %struct.tree_exp*
  %operands4568 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4567, i32 0, i32 2
  %arrayidx4569 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4568, i32 0, i64 0
  %2155 = load %union.tree_node*, %union.tree_node** %arrayidx4569, align 8
  %call4570 = call i32 @safe_from_p(%struct.rtx_def* %2153, %union.tree_node* %2155, i32 1)
  %call4571 = call %struct.rtx_def* @expand_abs(i32 %2149, %struct.rtx_def* %2150, %struct.rtx_def* %2151, i32 %2152, i32 %call4570)
  store %struct.rtx_def* %call4571, %struct.rtx_def** %retval
  br label %return

sw.bb.4572:                                       ; preds = %if.end.185, %if.end.185
  %2156 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  store %struct.rtx_def* %2156, %struct.rtx_def** %target.addr, align 8
  %2157 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp4573 = icmp eq %struct.rtx_def* %2157, null
  br i1 %cmp4573, label %if.then.4608, label %lor.lhs.false.4575

lor.lhs.false.4575:                               ; preds = %sw.bb.4572
  %2158 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2159 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4576 = bitcast %union.tree_node* %2159 to %struct.tree_exp*
  %operands4577 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4576, i32 0, i32 2
  %arrayidx4578 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4577, i32 0, i64 1
  %2160 = load %union.tree_node*, %union.tree_node** %arrayidx4578, align 8
  %call4579 = call i32 @safe_from_p(%struct.rtx_def* %2158, %union.tree_node* %2160, i32 1)
  %tobool4580 = icmp ne i32 %call4579, 0
  br i1 %tobool4580, label %lor.lhs.false.4581, label %if.then.4608

lor.lhs.false.4581:                               ; preds = %lor.lhs.false.4575
  %2161 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2162 = bitcast %struct.rtx_def* %2161 to i32*
  %bf.load4582 = load i32, i32* %2162, align 8
  %bf.clear4583 = and i32 %bf.load4582, 65535
  %cmp4584 = icmp eq i32 %bf.clear4583, 66
  br i1 %cmp4584, label %land.lhs.true.4586, label %lor.lhs.false.4591

land.lhs.true.4586:                               ; preds = %lor.lhs.false.4581
  %2163 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2164 = bitcast %struct.rtx_def* %2163 to i32*
  %bf.load4587 = load i32, i32* %2164, align 8
  %bf.lshr4588 = lshr i32 %bf.load4587, 27
  %bf.clear4589 = and i32 %bf.lshr4588, 1
  %tobool4590 = icmp ne i32 %bf.clear4589, 0
  br i1 %tobool4590, label %if.then.4608, label %lor.lhs.false.4591

lor.lhs.false.4591:                               ; preds = %land.lhs.true.4586, %lor.lhs.false.4581
  %2165 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2166 = bitcast %struct.rtx_def* %2165 to i32*
  %bf.load4592 = load i32, i32* %2166, align 8
  %bf.lshr4593 = lshr i32 %bf.load4592, 16
  %bf.clear4594 = and i32 %bf.lshr4593, 255
  %2167 = load i32, i32* %mode, align 4
  %cmp4595 = icmp ne i32 %bf.clear4594, %2167
  br i1 %cmp4595, label %if.then.4608, label %lor.lhs.false.4597

lor.lhs.false.4597:                               ; preds = %lor.lhs.false.4591
  %2168 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2169 = bitcast %struct.rtx_def* %2168 to i32*
  %bf.load4598 = load i32, i32* %2169, align 8
  %bf.clear4599 = and i32 %bf.load4598, 65535
  %cmp4600 = icmp eq i32 %bf.clear4599, 61
  br i1 %cmp4600, label %land.lhs.true.4602, label %if.end.4610

land.lhs.true.4602:                               ; preds = %lor.lhs.false.4597
  %2170 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld4603 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2170, i32 0, i32 1
  %arrayidx4604 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4603, i32 0, i64 0
  %rtuint4605 = bitcast %union.rtunion_def* %arrayidx4604 to i32*
  %2171 = load i32, i32* %rtuint4605, align 4
  %cmp4606 = icmp ult i32 %2171, 53
  br i1 %cmp4606, label %if.then.4608, label %if.end.4610

if.then.4608:                                     ; preds = %land.lhs.true.4602, %lor.lhs.false.4591, %land.lhs.true.4586, %lor.lhs.false.4575, %sw.bb.4572
  %2172 = load i32, i32* %mode, align 4
  %call4609 = call %struct.rtx_def* @gen_reg_rtx(i32 %2172)
  store %struct.rtx_def* %call4609, %struct.rtx_def** %target.addr, align 8
  br label %if.end.4610

if.end.4610:                                      ; preds = %if.then.4608, %land.lhs.true.4602, %lor.lhs.false.4597
  %2173 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4611 = bitcast %union.tree_node* %2173 to %struct.tree_exp*
  %operands4612 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4611, i32 0, i32 2
  %arrayidx4613 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4612, i32 0, i64 1
  %2174 = load %union.tree_node*, %union.tree_node** %arrayidx4613, align 8
  %call4614 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2174, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4614, %struct.rtx_def** %op1, align 8
  %2175 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4615 = bitcast %union.tree_node* %2175 to %struct.tree_exp*
  %operands4616 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4615, i32 0, i32 2
  %arrayidx4617 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4616, i32 0, i64 0
  %2176 = load %union.tree_node*, %union.tree_node** %arrayidx4617, align 8
  %2177 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call4618 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2176, %struct.rtx_def* %2177, i32 0, i32 0)
  store %struct.rtx_def* %call4618, %struct.rtx_def** %op0, align 8
  %2178 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common4619 = bitcast %union.tree_node* %2178 to %struct.tree_common*
  %unsigned_flag4620 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4619, i32 0, i32 2
  %bf.load4621 = load i32, i32* %unsigned_flag4620, align 8
  %bf.lshr4622 = lshr i32 %bf.load4621, 13
  %bf.clear4623 = and i32 %bf.lshr4622, 1
  %tobool4624 = icmp ne i32 %bf.clear4623, 0
  br i1 %tobool4624, label %cond.true.4625, label %cond.false.4632

cond.true.4625:                                   ; preds = %if.end.4610
  %2179 = load i32, i32* %code, align 4
  %cmp4626 = icmp eq i32 %2179, 78
  br i1 %cmp4626, label %cond.true.4628, label %cond.false.4629

cond.true.4628:                                   ; preds = %cond.true.4625
  %2180 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 28), align 8
  br label %cond.end.4630

cond.false.4629:                                  ; preds = %cond.true.4625
  %2181 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 29), align 8
  br label %cond.end.4630

cond.end.4630:                                    ; preds = %cond.false.4629, %cond.true.4628
  %cond4631 = phi %struct.optab* [ %2180, %cond.true.4628 ], [ %2181, %cond.false.4629 ]
  br label %cond.end.4639

cond.false.4632:                                  ; preds = %if.end.4610
  %2182 = load i32, i32* %code, align 4
  %cmp4633 = icmp eq i32 %2182, 78
  br i1 %cmp4633, label %cond.true.4635, label %cond.false.4636

cond.true.4635:                                   ; preds = %cond.false.4632
  %2183 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 26), align 8
  br label %cond.end.4637

cond.false.4636:                                  ; preds = %cond.false.4632
  %2184 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 27), align 8
  br label %cond.end.4637

cond.end.4637:                                    ; preds = %cond.false.4636, %cond.true.4635
  %cond4638 = phi %struct.optab* [ %2183, %cond.true.4635 ], [ %2184, %cond.false.4636 ]
  br label %cond.end.4639

cond.end.4639:                                    ; preds = %cond.end.4637, %cond.end.4630
  %cond4640 = phi %struct.optab* [ %cond4631, %cond.end.4630 ], [ %cond4638, %cond.end.4637 ]
  store %struct.optab* %cond4640, %struct.optab** %this_optab, align 8
  %2185 = load i32, i32* %mode, align 4
  %2186 = load %struct.optab*, %struct.optab** %this_optab, align 8
  %2187 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2188 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2189 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2190 = load i32, i32* %unsignedp, align 4
  %call4641 = call %struct.rtx_def* @expand_binop(i32 %2185, %struct.optab* %2186, %struct.rtx_def* %2187, %struct.rtx_def* %2188, %struct.rtx_def* %2189, i32 %2190, i32 2)
  store %struct.rtx_def* %call4641, %struct.rtx_def** %temp, align 8
  %2191 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp4642 = icmp ne %struct.rtx_def* %2191, null
  br i1 %cmp4642, label %if.then.4644, label %if.end.4645

if.then.4644:                                     ; preds = %cond.end.4639
  %2192 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2192, %struct.rtx_def** %retval
  br label %return

if.end.4645:                                      ; preds = %cond.end.4639
  %2193 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2194 = bitcast %struct.rtx_def* %2193 to i32*
  %bf.load4646 = load i32, i32* %2194, align 8
  %bf.clear4647 = and i32 %bf.load4646, 65535
  %cmp4648 = icmp eq i32 %bf.clear4647, 66
  br i1 %cmp4648, label %if.then.4650, label %if.end.4652

if.then.4650:                                     ; preds = %if.end.4645
  %2195 = load i32, i32* %mode, align 4
  %call4651 = call %struct.rtx_def* @gen_reg_rtx(i32 %2195)
  store %struct.rtx_def* %call4651, %struct.rtx_def** %target.addr, align 8
  br label %if.end.4652

if.end.4652:                                      ; preds = %if.then.4650, %if.end.4645
  %2196 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2197 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %cmp4653 = icmp ne %struct.rtx_def* %2196, %2197
  br i1 %cmp4653, label %if.then.4655, label %if.end.4657

if.then.4655:                                     ; preds = %if.end.4652
  %2198 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2199 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call4656 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2198, %struct.rtx_def* %2199)
  br label %if.end.4657

if.end.4657:                                      ; preds = %if.then.4655, %if.end.4652
  %call4658 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call4658, %struct.rtx_def** %op0, align 8
  %2200 = load i32, i32* %mode, align 4
  %idxprom4659 = sext i32 %2200 to i64
  %arrayidx4660 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom4659
  %2201 = load i32, i32* %arrayidx4660, align 4
  %cmp4661 = icmp eq i32 %2201, 1
  br i1 %cmp4661, label %land.lhs.true.4663, label %if.else.4682

land.lhs.true.4663:                               ; preds = %if.end.4657
  %2202 = load i32, i32* %mode, align 4
  %call4664 = call i32 @can_compare_p(i32 104, i32 %2202, i32 0)
  %tobool4665 = icmp ne i32 %call4664, 0
  br i1 %tobool4665, label %if.else.4682, label %if.then.4666

if.then.4666:                                     ; preds = %land.lhs.true.4663
  %2203 = load i32, i32* %code, align 4
  %cmp4667 = icmp eq i32 %2203, 79
  br i1 %cmp4667, label %if.then.4669, label %if.else.4675

if.then.4669:                                     ; preds = %if.then.4666
  %2204 = load i32, i32* %mode, align 4
  %2205 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common4670 = bitcast %union.tree_node* %2205 to %struct.tree_common*
  %unsigned_flag4671 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4670, i32 0, i32 2
  %bf.load4672 = load i32, i32* %unsigned_flag4671, align 8
  %bf.lshr4673 = lshr i32 %bf.load4672, 13
  %bf.clear4674 = and i32 %bf.lshr4673, 1
  %2206 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2207 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2208 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @do_jump_by_parts_greater_rtx(i32 %2204, i32 %bf.clear4674, %struct.rtx_def* %2206, %struct.rtx_def* %2207, %struct.rtx_def* null, %struct.rtx_def* %2208)
  br label %if.end.4681

if.else.4675:                                     ; preds = %if.then.4666
  %2209 = load i32, i32* %mode, align 4
  %2210 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common4676 = bitcast %union.tree_node* %2210 to %struct.tree_common*
  %unsigned_flag4677 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4676, i32 0, i32 2
  %bf.load4678 = load i32, i32* %unsigned_flag4677, align 8
  %bf.lshr4679 = lshr i32 %bf.load4678, 13
  %bf.clear4680 = and i32 %bf.lshr4679, 1
  %2211 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2212 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2213 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @do_jump_by_parts_greater_rtx(i32 %2209, i32 %bf.clear4680, %struct.rtx_def* %2211, %struct.rtx_def* %2212, %struct.rtx_def* null, %struct.rtx_def* %2213)
  br label %if.end.4681

if.end.4681:                                      ; preds = %if.else.4675, %if.then.4669
  br label %if.end.4697

if.else.4682:                                     ; preds = %land.lhs.true.4663, %if.end.4657
  %2214 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4684 = bitcast %union.tree_node* %2214 to %struct.tree_exp*
  %operands4685 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4684, i32 0, i32 2
  %arrayidx4686 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4685, i32 0, i64 1
  %2215 = load %union.tree_node*, %union.tree_node** %arrayidx4686, align 8
  %common4687 = bitcast %union.tree_node* %2215 to %struct.tree_common*
  %type4688 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4687, i32 0, i32 1
  %2216 = load %union.tree_node*, %union.tree_node** %type4688, align 8
  %common4689 = bitcast %union.tree_node* %2216 to %struct.tree_common*
  %unsigned_flag4690 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4689, i32 0, i32 2
  %bf.load4691 = load i32, i32* %unsigned_flag4690, align 8
  %bf.lshr4692 = lshr i32 %bf.load4691, 13
  %bf.clear4693 = and i32 %bf.lshr4692, 1
  store i32 %bf.clear4693, i32* %unsignedp4683, align 4
  %2217 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2218 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2219 = load i32, i32* %code, align 4
  %cmp4694 = icmp eq i32 %2219, 79
  %cond4696 = select i1 %cmp4694, i32 104, i32 106
  %2220 = load i32, i32* %unsignedp4683, align 4
  %2221 = load i32, i32* %mode, align 4
  %2222 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %2217, %struct.rtx_def* %2218, i32 %cond4696, i32 %2220, i32 %2221, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %2222)
  br label %if.end.4697

if.end.4697:                                      ; preds = %if.else.4682, %if.end.4681
  %2223 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2224 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call4698 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2223, %struct.rtx_def* %2224)
  %2225 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call4699 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %2225)
  %2226 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2226, %struct.rtx_def** %retval
  br label %return

sw.bb.4700:                                       ; preds = %if.end.185
  %2227 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4701 = bitcast %union.tree_node* %2227 to %struct.tree_exp*
  %operands4702 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4701, i32 0, i32 2
  %arrayidx4703 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4702, i32 0, i64 0
  %2228 = load %union.tree_node*, %union.tree_node** %arrayidx4703, align 8
  %2229 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4704 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2228, %struct.rtx_def* %2229, i32 0, i32 0)
  store %struct.rtx_def* %call4704, %struct.rtx_def** %op0, align 8
  %2230 = load i32, i32* %mode, align 4
  %2231 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 36), align 8
  %2232 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2233 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call4705 = call %struct.rtx_def* @expand_unop(i32 %2230, %struct.optab* %2231, %struct.rtx_def* %2232, %struct.rtx_def* %2233, i32 1)
  store %struct.rtx_def* %call4705, %struct.rtx_def** %temp, align 8
  %2234 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp4706 = icmp eq %struct.rtx_def* %2234, null
  br i1 %cmp4706, label %if.then.4708, label %if.end.4709

if.then.4708:                                     ; preds = %sw.bb.4700
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7943, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.4709:                                      ; preds = %sw.bb.4700
  %2235 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2235, %struct.rtx_def** %retval
  br label %return

sw.bb.4710:                                       ; preds = %if.end.185
  %2236 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4711 = bitcast %union.tree_node* %2236 to %struct.tree_exp*
  %operands4712 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4711, i32 0, i32 2
  %arrayidx4713 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4712, i32 0, i64 0
  %2237 = load %union.tree_node*, %union.tree_node** %arrayidx4713, align 8
  %2238 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4714 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2237, %struct.rtx_def* %2238, i32 0, i32 0)
  store %struct.rtx_def* %call4714, %struct.rtx_def** %op0, align 8
  %2239 = load i32, i32* %mode, align 4
  %2240 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 37), align 8
  %2241 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2242 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call4715 = call %struct.rtx_def* @expand_unop(i32 %2239, %struct.optab* %2240, %struct.rtx_def* %2241, %struct.rtx_def* %2242, i32 1)
  store %struct.rtx_def* %call4715, %struct.rtx_def** %temp, align 8
  %2243 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp4716 = icmp eq %struct.rtx_def* %2243, null
  br i1 %cmp4716, label %if.then.4718, label %if.end.4719

if.then.4718:                                     ; preds = %sw.bb.4710
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 7950, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.4719:                                      ; preds = %sw.bb.4710
  %2244 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2244, %struct.rtx_def** %retval
  br label %return

sw.bb.4720:                                       ; preds = %if.end.185, %if.end.185
  %2245 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 18), align 8
  store %struct.optab* %2245, %struct.optab** %this_optab, align 8
  br label %binop

sw.bb.4721:                                       ; preds = %if.end.185, %if.end.185
  %2246 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 19), align 8
  store %struct.optab* %2246, %struct.optab** %this_optab, align 8
  br label %binop

sw.bb.4722:                                       ; preds = %if.end.185, %if.end.185
  %2247 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 20), align 8
  store %struct.optab* %2247, %struct.optab** %this_optab, align 8
  br label %binop

sw.bb.4723:                                       ; preds = %if.end.185, %if.end.185, %if.end.185, %if.end.185
  %2248 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %2249 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4724 = bitcast %union.tree_node* %2249 to %struct.tree_exp*
  %operands4725 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4724, i32 0, i32 2
  %arrayidx4726 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4725, i32 0, i64 1
  %2250 = load %union.tree_node*, %union.tree_node** %arrayidx4726, align 8
  %call4727 = call i32 @safe_from_p(%struct.rtx_def* %2248, %union.tree_node* %2250, i32 1)
  %tobool4728 = icmp ne i32 %call4727, 0
  br i1 %tobool4728, label %if.end.4730, label %if.then.4729

if.then.4729:                                     ; preds = %sw.bb.4723
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.4730

if.end.4730:                                      ; preds = %if.then.4729, %sw.bb.4723
  %2251 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4731 = bitcast %union.tree_node* %2251 to %struct.tree_exp*
  %operands4732 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4731, i32 0, i32 2
  %arrayidx4733 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4732, i32 0, i64 0
  %2252 = load %union.tree_node*, %union.tree_node** %arrayidx4733, align 8
  %2253 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call4734 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2252, %struct.rtx_def* %2253, i32 0, i32 0)
  store %struct.rtx_def* %call4734, %struct.rtx_def** %op0, align 8
  %2254 = load i32, i32* %code, align 4
  %2255 = load i32, i32* %mode, align 4
  %2256 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2257 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4735 = bitcast %union.tree_node* %2257 to %struct.tree_exp*
  %operands4736 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4735, i32 0, i32 2
  %arrayidx4737 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4736, i32 0, i64 1
  %2258 = load %union.tree_node*, %union.tree_node** %arrayidx4737, align 8
  %2259 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2260 = load i32, i32* %unsignedp, align 4
  %call4738 = call %struct.rtx_def* @expand_shift(i32 %2254, i32 %2255, %struct.rtx_def* %2256, %union.tree_node* %2258, %struct.rtx_def* %2259, i32 %2260)
  store %struct.rtx_def* %call4738, %struct.rtx_def** %retval
  br label %return

sw.bb.4739:                                       ; preds = %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185, %if.end.185
  %2261 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %2262 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2263 = load i32, i32* %tmode.addr, align 4
  %cmp4740 = icmp ne i32 %2263, 0
  br i1 %cmp4740, label %cond.true.4742, label %cond.false.4743

cond.true.4742:                                   ; preds = %sw.bb.4739
  %2264 = load i32, i32* %tmode.addr, align 4
  br label %cond.end.4744

cond.false.4743:                                  ; preds = %sw.bb.4739
  %2265 = load i32, i32* %mode, align 4
  br label %cond.end.4744

cond.end.4744:                                    ; preds = %cond.false.4743, %cond.true.4742
  %cond4745 = phi i32 [ %2264, %cond.true.4742 ], [ %2265, %cond.false.4743 ]
  %call4746 = call %struct.rtx_def* @do_store_flag(%union.tree_node* %2261, %struct.rtx_def* %2262, i32 %cond4745, i32 0)
  store %struct.rtx_def* %call4746, %struct.rtx_def** %temp, align 8
  %2266 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp4747 = icmp ne %struct.rtx_def* %2266, null
  br i1 %cmp4747, label %if.then.4749, label %if.end.4750

if.then.4749:                                     ; preds = %cond.end.4744
  %2267 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2267, %struct.rtx_def** %retval
  br label %return

if.end.4750:                                      ; preds = %cond.end.4744
  %2268 = load i32, i32* %code, align 4
  %cmp4751 = icmp eq i32 %2268, 102
  br i1 %cmp4751, label %land.lhs.true.4753, label %if.end.4828

land.lhs.true.4753:                               ; preds = %if.end.4750
  %2269 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4754 = bitcast %union.tree_node* %2269 to %struct.tree_exp*
  %operands4755 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4754, i32 0, i32 2
  %arrayidx4756 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4755, i32 0, i64 1
  %2270 = load %union.tree_node*, %union.tree_node** %arrayidx4756, align 8
  %call4757 = call i32 @integer_zerop(%union.tree_node* %2270)
  %tobool4758 = icmp ne i32 %call4757, 0
  br i1 %tobool4758, label %land.lhs.true.4759, label %if.end.4828

land.lhs.true.4759:                               ; preds = %land.lhs.true.4753
  %2271 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %tobool4760 = icmp ne %struct.rtx_def* %2271, null
  br i1 %tobool4760, label %land.lhs.true.4761, label %if.end.4828

land.lhs.true.4761:                               ; preds = %land.lhs.true.4759
  %2272 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %2273 = bitcast %struct.rtx_def* %2272 to i32*
  %bf.load4762 = load i32, i32* %2273, align 8
  %bf.clear4763 = and i32 %bf.load4762, 65535
  %cmp4764 = icmp eq i32 %bf.clear4763, 61
  br i1 %cmp4764, label %land.lhs.true.4766, label %if.end.4828

land.lhs.true.4766:                               ; preds = %land.lhs.true.4761
  %2274 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %2275 = bitcast %struct.rtx_def* %2274 to i32*
  %bf.load4767 = load i32, i32* %2275, align 8
  %bf.lshr4768 = lshr i32 %bf.load4767, 16
  %bf.clear4769 = and i32 %bf.lshr4768, 255
  %2276 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4770 = bitcast %union.tree_node* %2276 to %struct.tree_exp*
  %operands4771 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4770, i32 0, i32 2
  %arrayidx4772 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4771, i32 0, i64 0
  %2277 = load %union.tree_node*, %union.tree_node** %arrayidx4772, align 8
  %common4773 = bitcast %union.tree_node* %2277 to %struct.tree_common*
  %type4774 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4773, i32 0, i32 1
  %2278 = load %union.tree_node*, %union.tree_node** %type4774, align 8
  %type4775 = bitcast %union.tree_node* %2278 to %struct.tree_type*
  %mode4776 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4775, i32 0, i32 6
  %bf.load4777 = load i32, i32* %mode4776, align 4
  %bf.lshr4778 = lshr i32 %bf.load4777, 9
  %bf.clear4779 = and i32 %bf.lshr4778, 127
  %cmp4780 = icmp eq i32 %bf.clear4769, %bf.clear4779
  br i1 %cmp4780, label %if.then.4782, label %if.end.4828

if.then.4782:                                     ; preds = %land.lhs.true.4766
  %2279 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4783 = bitcast %union.tree_node* %2279 to %struct.tree_exp*
  %operands4784 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4783, i32 0, i32 2
  %arrayidx4785 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4784, i32 0, i64 0
  %2280 = load %union.tree_node*, %union.tree_node** %arrayidx4785, align 8
  %2281 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %call4786 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2280, %struct.rtx_def* %2281, i32 0, i32 0)
  store %struct.rtx_def* %call4786, %struct.rtx_def** %temp, align 8
  %2282 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2283 = bitcast %struct.rtx_def* %2282 to i32*
  %bf.load4787 = load i32, i32* %2283, align 8
  %bf.clear4788 = and i32 %bf.load4787, 65535
  %cmp4789 = icmp eq i32 %bf.clear4788, 54
  br i1 %cmp4789, label %if.then.4791, label %if.end.4802

if.then.4791:                                     ; preds = %if.then.4782
  %2284 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld4792 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2284, i32 0, i32 1
  %arrayidx4793 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4792, i32 0, i64 0
  %rtwint4794 = bitcast %union.rtunion_def* %arrayidx4793 to i64*
  %2285 = load i64, i64* %rtwint4794, align 8
  %cmp4795 = icmp ne i64 %2285, 0
  br i1 %cmp4795, label %if.then.4797, label %if.else.4799

if.then.4797:                                     ; preds = %if.then.4791
  %2286 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2287 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call4798 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2286, %struct.rtx_def* %2287)
  br label %if.end.4801

if.else.4799:                                     ; preds = %if.then.4791
  %2288 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2289 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call4800 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2288, %struct.rtx_def* %2289)
  br label %if.end.4801

if.end.4801:                                      ; preds = %if.else.4799, %if.then.4797
  %2290 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2290, %struct.rtx_def** %retval
  br label %return

if.end.4802:                                      ; preds = %if.then.4782
  %2291 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2292 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %cmp4803 = icmp ne %struct.rtx_def* %2291, %2292
  br i1 %cmp4803, label %if.then.4805, label %if.end.4821

if.then.4805:                                     ; preds = %if.end.4802
  %2293 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2294 = bitcast %struct.rtx_def* %2293 to i32*
  %bf.load4807 = load i32, i32* %2294, align 8
  %bf.lshr4808 = lshr i32 %bf.load4807, 16
  %bf.clear4809 = and i32 %bf.lshr4808, 255
  store i32 %bf.clear4809, i32* %mode14806, align 4
  %2295 = load i32, i32* %mode14806, align 4
  %cmp4810 = icmp eq i32 %2295, 0
  br i1 %cmp4810, label %if.then.4812, label %if.end.4819

if.then.4812:                                     ; preds = %if.then.4805
  %2296 = load i32, i32* %tmode.addr, align 4
  %cmp4813 = icmp ne i32 %2296, 0
  br i1 %cmp4813, label %cond.true.4815, label %cond.false.4816

cond.true.4815:                                   ; preds = %if.then.4812
  %2297 = load i32, i32* %tmode.addr, align 4
  br label %cond.end.4817

cond.false.4816:                                  ; preds = %if.then.4812
  %2298 = load i32, i32* %mode, align 4
  br label %cond.end.4817

cond.end.4817:                                    ; preds = %cond.false.4816, %cond.true.4815
  %cond4818 = phi i32 [ %2297, %cond.true.4815 ], [ %2298, %cond.false.4816 ]
  store i32 %cond4818, i32* %mode14806, align 4
  br label %if.end.4819

if.end.4819:                                      ; preds = %cond.end.4817, %if.then.4805
  %2299 = load i32, i32* %mode14806, align 4
  %2300 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call4820 = call %struct.rtx_def* @copy_to_mode_reg(i32 %2299, %struct.rtx_def* %2300)
  store %struct.rtx_def* %call4820, %struct.rtx_def** %temp, align 8
  br label %if.end.4821

if.end.4821:                                      ; preds = %if.end.4819, %if.end.4802
  %call4822 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call4822, %struct.rtx_def** %op1, align 8
  %2301 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2302 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %2303 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2304 = bitcast %struct.rtx_def* %2303 to i32*
  %bf.load4823 = load i32, i32* %2304, align 8
  %bf.lshr4824 = lshr i32 %bf.load4823, 16
  %bf.clear4825 = and i32 %bf.lshr4824, 255
  %2305 = load i32, i32* %unsignedp, align 4
  %2306 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %2301, %struct.rtx_def* %2302, i32 103, %struct.rtx_def* null, i32 %bf.clear4825, i32 %2305, %struct.rtx_def* %2306)
  %2307 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2308 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call4826 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2307, %struct.rtx_def* %2308)
  %2309 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call4827 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %2309)
  %2310 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2310, %struct.rtx_def** %retval
  br label %return

if.end.4828:                                      ; preds = %land.lhs.true.4766, %land.lhs.true.4761, %land.lhs.true.4759, %land.lhs.true.4753, %if.end.4750
  br label %sw.bb.4829

sw.bb.4829:                                       ; preds = %if.end.185, %if.end.185, %if.end.4828
  %2311 = load i32, i32* %ignore, align 4
  %tobool4830 = icmp ne i32 %2311, 0
  br i1 %tobool4830, label %if.end.4858, label %land.lhs.true.4831

land.lhs.true.4831:                               ; preds = %sw.bb.4829
  %2312 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp4832 = icmp eq %struct.rtx_def* %2312, null
  br i1 %cmp4832, label %if.then.4850, label %lor.lhs.false.4834

lor.lhs.false.4834:                               ; preds = %land.lhs.true.4831
  %2313 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2314 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call4835 = call i32 @safe_from_p(%struct.rtx_def* %2313, %union.tree_node* %2314, i32 1)
  %tobool4836 = icmp ne i32 %call4835, 0
  br i1 %tobool4836, label %lor.lhs.false.4837, label %if.then.4850

lor.lhs.false.4837:                               ; preds = %lor.lhs.false.4834
  %2315 = load i32, i32* @optimize, align 4
  %tobool4838 = icmp ne i32 %2315, 0
  br i1 %tobool4838, label %if.end.4858, label %land.lhs.true.4839

land.lhs.true.4839:                               ; preds = %lor.lhs.false.4837
  %2316 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2317 = bitcast %struct.rtx_def* %2316 to i32*
  %bf.load4840 = load i32, i32* %2317, align 8
  %bf.clear4841 = and i32 %bf.load4840, 65535
  %cmp4842 = icmp eq i32 %bf.clear4841, 61
  br i1 %cmp4842, label %land.lhs.true.4844, label %if.end.4858

land.lhs.true.4844:                               ; preds = %land.lhs.true.4839
  %2318 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld4845 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2318, i32 0, i32 1
  %arrayidx4846 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4845, i32 0, i64 0
  %rtuint4847 = bitcast %union.rtunion_def* %arrayidx4846 to i32*
  %2319 = load i32, i32* %rtuint4847, align 4
  %cmp4848 = icmp ult i32 %2319, 53
  br i1 %cmp4848, label %if.then.4850, label %if.end.4858

if.then.4850:                                     ; preds = %land.lhs.true.4844, %lor.lhs.false.4834, %land.lhs.true.4831
  %2320 = load i32, i32* %tmode.addr, align 4
  %cmp4851 = icmp ne i32 %2320, 0
  br i1 %cmp4851, label %cond.true.4853, label %cond.false.4854

cond.true.4853:                                   ; preds = %if.then.4850
  %2321 = load i32, i32* %tmode.addr, align 4
  br label %cond.end.4855

cond.false.4854:                                  ; preds = %if.then.4850
  %2322 = load i32, i32* %mode, align 4
  br label %cond.end.4855

cond.end.4855:                                    ; preds = %cond.false.4854, %cond.true.4853
  %cond4856 = phi i32 [ %2321, %cond.true.4853 ], [ %2322, %cond.false.4854 ]
  %call4857 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond4856)
  store %struct.rtx_def* %call4857, %struct.rtx_def** %target.addr, align 8
  br label %if.end.4858

if.end.4858:                                      ; preds = %cond.end.4855, %land.lhs.true.4844, %land.lhs.true.4839, %lor.lhs.false.4837, %sw.bb.4829
  %2323 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool4859 = icmp ne %struct.rtx_def* %2323, null
  br i1 %tobool4859, label %if.then.4860, label %if.end.4861

if.then.4860:                                     ; preds = %if.end.4858
  %2324 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  call void @emit_clr_insn(%struct.rtx_def* %2324)
  br label %if.end.4861

if.end.4861:                                      ; preds = %if.then.4860, %if.end.4858
  %call4862 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call4862, %struct.rtx_def** %op1, align 8
  %2325 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %2326 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  call void @jumpifnot(%union.tree_node* %2325, %struct.rtx_def* %2326)
  %2327 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool4863 = icmp ne %struct.rtx_def* %2327, null
  br i1 %tobool4863, label %if.then.4864, label %if.end.4865

if.then.4864:                                     ; preds = %if.end.4861
  %2328 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  call void @emit_0_to_1_insn(%struct.rtx_def* %2328)
  br label %if.end.4865

if.end.4865:                                      ; preds = %if.then.4864, %if.end.4861
  %2329 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call4866 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %2329)
  %2330 = load i32, i32* %ignore, align 4
  %tobool4867 = icmp ne i32 %2330, 0
  br i1 %tobool4867, label %cond.true.4868, label %cond.false.4869

cond.true.4868:                                   ; preds = %if.end.4865
  %2331 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.4870

cond.false.4869:                                  ; preds = %if.end.4865
  %2332 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  br label %cond.end.4870

cond.end.4870:                                    ; preds = %cond.false.4869, %cond.true.4868
  %cond4871 = phi %struct.rtx_def* [ %2331, %cond.true.4868 ], [ %2332, %cond.false.4869 ]
  store %struct.rtx_def* %cond4871, %struct.rtx_def** %retval
  br label %return

sw.bb.4872:                                       ; preds = %if.end.185
  %2333 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4873 = bitcast %union.tree_node* %2333 to %struct.tree_exp*
  %operands4874 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4873, i32 0, i32 2
  %arrayidx4875 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4874, i32 0, i64 0
  %2334 = load %union.tree_node*, %union.tree_node** %arrayidx4875, align 8
  %2335 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call4876 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2334, %struct.rtx_def* %2335, i32 0, i32 0)
  store %struct.rtx_def* %call4876, %struct.rtx_def** %op0, align 8
  %2336 = load i32, i32* %mode, align 4
  %2337 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 20), align 8
  %2338 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2339 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %2340 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call4877 = call %struct.rtx_def* @expand_binop(i32 %2336, %struct.optab* %2337, %struct.rtx_def* %2338, %struct.rtx_def* %2339, %struct.rtx_def* %2340, i32 1, i32 3)
  store %struct.rtx_def* %call4877, %struct.rtx_def** %temp, align 8
  %2341 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp4878 = icmp eq %struct.rtx_def* %2341, null
  br i1 %cmp4878, label %if.then.4880, label %if.end.4881

if.then.4880:                                     ; preds = %sw.bb.4872
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8081, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.4881:                                      ; preds = %sw.bb.4872
  %2342 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2342, %struct.rtx_def** %retval
  br label %return

sw.bb.4882:                                       ; preds = %if.end.185
  %2343 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4883 = bitcast %union.tree_node* %2343 to %struct.tree_exp*
  %operands4884 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4883, i32 0, i32 2
  %arrayidx4885 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4884, i32 0, i64 0
  %2344 = load %union.tree_node*, %union.tree_node** %arrayidx4885, align 8
  %2345 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call4886 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2344, %struct.rtx_def* %2345, i32 0, i32 0)
  call void @emit_queue()
  %2346 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4887 = bitcast %union.tree_node* %2346 to %struct.tree_exp*
  %operands4888 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4887, i32 0, i32 2
  %arrayidx4889 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4888, i32 0, i64 1
  %2347 = load %union.tree_node*, %union.tree_node** %arrayidx4889, align 8
  %2348 = load i32, i32* %ignore, align 4
  %tobool4890 = icmp ne i32 %2348, 0
  br i1 %tobool4890, label %cond.true.4891, label %cond.false.4892

cond.true.4891:                                   ; preds = %sw.bb.4882
  %2349 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.4893

cond.false.4892:                                  ; preds = %sw.bb.4882
  %2350 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  br label %cond.end.4893

cond.end.4893:                                    ; preds = %cond.false.4892, %cond.true.4891
  %cond4894 = phi %struct.rtx_def* [ %2349, %cond.true.4891 ], [ %2350, %cond.false.4892 ]
  %call4895 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2347, %struct.rtx_def* %cond4894, i32 0, i32 0)
  store %struct.rtx_def* %call4895, %struct.rtx_def** %retval
  br label %return

sw.bb.4896:                                       ; preds = %if.end.185
  %2351 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4897 = bitcast %union.tree_node* %2351 to %struct.tree_exp*
  %operands4898 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4897, i32 0, i32 2
  %arrayidx4899 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4898, i32 0, i64 1
  %2352 = load %union.tree_node*, %union.tree_node** %arrayidx4899, align 8
  %common4900 = bitcast %union.tree_node* %2352 to %struct.tree_common*
  %code4901 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4900, i32 0, i32 2
  %bf.load4902 = load i32, i32* %code4901, align 8
  %bf.clear4903 = and i32 %bf.load4902, 255
  %cmp4904 = icmp eq i32 %bf.clear4903, 115
  br i1 %cmp4904, label %land.lhs.true.4906, label %if.end.5021

land.lhs.true.4906:                               ; preds = %sw.bb.4896
  %2353 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4907 = bitcast %union.tree_node* %2353 to %struct.tree_exp*
  %operands4908 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4907, i32 0, i32 2
  %arrayidx4909 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4908, i32 0, i64 2
  %2354 = load %union.tree_node*, %union.tree_node** %arrayidx4909, align 8
  %common4910 = bitcast %union.tree_node* %2354 to %struct.tree_common*
  %code4911 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4910, i32 0, i32 2
  %bf.load4912 = load i32, i32* %code4911, align 8
  %bf.clear4913 = and i32 %bf.load4912, 255
  %cmp4914 = icmp eq i32 %bf.clear4913, 115
  br i1 %cmp4914, label %land.lhs.true.4916, label %if.end.5021

land.lhs.true.4916:                               ; preds = %land.lhs.true.4906
  %2355 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4917 = bitcast %union.tree_node* %2355 to %struct.tree_exp*
  %operands4918 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4917, i32 0, i32 2
  %arrayidx4919 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4918, i32 0, i64 1
  %2356 = load %union.tree_node*, %union.tree_node** %arrayidx4919, align 8
  %exp4920 = bitcast %union.tree_node* %2356 to %struct.tree_exp*
  %operands4921 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4920, i32 0, i32 2
  %arrayidx4922 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4921, i32 0, i64 0
  %2357 = load %union.tree_node*, %union.tree_node** %arrayidx4922, align 8
  %common4923 = bitcast %union.tree_node* %2357 to %struct.tree_common*
  %type4924 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4923, i32 0, i32 1
  %2358 = load %union.tree_node*, %union.tree_node** %type4924, align 8
  %2359 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4925 = bitcast %union.tree_node* %2359 to %struct.tree_exp*
  %operands4926 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4925, i32 0, i32 2
  %arrayidx4927 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4926, i32 0, i64 2
  %2360 = load %union.tree_node*, %union.tree_node** %arrayidx4927, align 8
  %exp4928 = bitcast %union.tree_node* %2360 to %struct.tree_exp*
  %operands4929 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4928, i32 0, i32 2
  %arrayidx4930 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4929, i32 0, i64 0
  %2361 = load %union.tree_node*, %union.tree_node** %arrayidx4930, align 8
  %common4931 = bitcast %union.tree_node* %2361 to %struct.tree_common*
  %type4932 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4931, i32 0, i32 1
  %2362 = load %union.tree_node*, %union.tree_node** %type4932, align 8
  %cmp4933 = icmp eq %union.tree_node* %2358, %2362
  br i1 %cmp4933, label %if.then.4935, label %if.end.5021

if.then.4935:                                     ; preds = %land.lhs.true.4916
  %2363 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4936 = bitcast %union.tree_node* %2363 to %struct.tree_exp*
  %operands4937 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4936, i32 0, i32 2
  %arrayidx4938 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4937, i32 0, i64 1
  %2364 = load %union.tree_node*, %union.tree_node** %arrayidx4938, align 8
  %exp4939 = bitcast %union.tree_node* %2364 to %struct.tree_exp*
  %operands4940 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4939, i32 0, i32 2
  %arrayidx4941 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4940, i32 0, i64 0
  %2365 = load %union.tree_node*, %union.tree_node** %arrayidx4941, align 8
  store %union.tree_node* %2365, %union.tree_node** %iftrue, align 8
  %2366 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp4942 = bitcast %union.tree_node* %2366 to %struct.tree_exp*
  %operands4943 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4942, i32 0, i32 2
  %arrayidx4944 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4943, i32 0, i64 2
  %2367 = load %union.tree_node*, %union.tree_node** %arrayidx4944, align 8
  %exp4945 = bitcast %union.tree_node* %2367 to %struct.tree_exp*
  %operands4946 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4945, i32 0, i32 2
  %arrayidx4947 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4946, i32 0, i64 0
  %2368 = load %union.tree_node*, %union.tree_node** %arrayidx4947, align 8
  store %union.tree_node* %2368, %union.tree_node** %iffalse, align 8
  %2369 = load %union.tree_node*, %union.tree_node** %iftrue, align 8
  %common4948 = bitcast %union.tree_node* %2369 to %struct.tree_common*
  %code4949 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4948, i32 0, i32 2
  %bf.load4950 = load i32, i32* %code4949, align 8
  %bf.clear4951 = and i32 %bf.load4950, 255
  %idxprom4952 = sext i32 %bf.clear4951 to i64
  %arrayidx4953 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom4952
  %2370 = load i8, i8* %arrayidx4953, align 1
  %conv4954 = sext i8 %2370 to i32
  %cmp4955 = icmp eq i32 %conv4954, 50
  br i1 %cmp4955, label %land.lhs.true.4957, label %lor.lhs.false.4963

land.lhs.true.4957:                               ; preds = %if.then.4935
  %2371 = load %union.tree_node*, %union.tree_node** %iffalse, align 8
  %2372 = load %union.tree_node*, %union.tree_node** %iftrue, align 8
  %exp4958 = bitcast %union.tree_node* %2372 to %struct.tree_exp*
  %operands4959 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4958, i32 0, i32 2
  %arrayidx4960 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4959, i32 0, i64 0
  %2373 = load %union.tree_node*, %union.tree_node** %arrayidx4960, align 8
  %call4961 = call i32 @operand_equal_p(%union.tree_node* %2371, %union.tree_node* %2373, i32 0)
  %tobool4962 = icmp ne i32 %call4961, 0
  br i1 %tobool4962, label %if.then.5011, label %lor.lhs.false.4963

lor.lhs.false.4963:                               ; preds = %land.lhs.true.4957, %if.then.4935
  %2374 = load %union.tree_node*, %union.tree_node** %iffalse, align 8
  %common4964 = bitcast %union.tree_node* %2374 to %struct.tree_common*
  %code4965 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4964, i32 0, i32 2
  %bf.load4966 = load i32, i32* %code4965, align 8
  %bf.clear4967 = and i32 %bf.load4966, 255
  %idxprom4968 = sext i32 %bf.clear4967 to i64
  %arrayidx4969 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom4968
  %2375 = load i8, i8* %arrayidx4969, align 1
  %conv4970 = sext i8 %2375 to i32
  %cmp4971 = icmp eq i32 %conv4970, 50
  br i1 %cmp4971, label %land.lhs.true.4973, label %lor.lhs.false.4979

land.lhs.true.4973:                               ; preds = %lor.lhs.false.4963
  %2376 = load %union.tree_node*, %union.tree_node** %iftrue, align 8
  %2377 = load %union.tree_node*, %union.tree_node** %iffalse, align 8
  %exp4974 = bitcast %union.tree_node* %2377 to %struct.tree_exp*
  %operands4975 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4974, i32 0, i32 2
  %arrayidx4976 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4975, i32 0, i64 0
  %2378 = load %union.tree_node*, %union.tree_node** %arrayidx4976, align 8
  %call4977 = call i32 @operand_equal_p(%union.tree_node* %2376, %union.tree_node* %2378, i32 0)
  %tobool4978 = icmp ne i32 %call4977, 0
  br i1 %tobool4978, label %if.then.5011, label %lor.lhs.false.4979

lor.lhs.false.4979:                               ; preds = %land.lhs.true.4973, %lor.lhs.false.4963
  %2379 = load %union.tree_node*, %union.tree_node** %iftrue, align 8
  %common4980 = bitcast %union.tree_node* %2379 to %struct.tree_common*
  %code4981 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4980, i32 0, i32 2
  %bf.load4982 = load i32, i32* %code4981, align 8
  %bf.clear4983 = and i32 %bf.load4982, 255
  %idxprom4984 = sext i32 %bf.clear4983 to i64
  %arrayidx4985 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom4984
  %2380 = load i8, i8* %arrayidx4985, align 1
  %conv4986 = sext i8 %2380 to i32
  %cmp4987 = icmp eq i32 %conv4986, 49
  br i1 %cmp4987, label %land.lhs.true.4989, label %lor.lhs.false.4995

land.lhs.true.4989:                               ; preds = %lor.lhs.false.4979
  %2381 = load %union.tree_node*, %union.tree_node** %iffalse, align 8
  %2382 = load %union.tree_node*, %union.tree_node** %iftrue, align 8
  %exp4990 = bitcast %union.tree_node* %2382 to %struct.tree_exp*
  %operands4991 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4990, i32 0, i32 2
  %arrayidx4992 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4991, i32 0, i64 0
  %2383 = load %union.tree_node*, %union.tree_node** %arrayidx4992, align 8
  %call4993 = call i32 @operand_equal_p(%union.tree_node* %2381, %union.tree_node* %2383, i32 0)
  %tobool4994 = icmp ne i32 %call4993, 0
  br i1 %tobool4994, label %if.then.5011, label %lor.lhs.false.4995

lor.lhs.false.4995:                               ; preds = %land.lhs.true.4989, %lor.lhs.false.4979
  %2384 = load %union.tree_node*, %union.tree_node** %iffalse, align 8
  %common4996 = bitcast %union.tree_node* %2384 to %struct.tree_common*
  %code4997 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4996, i32 0, i32 2
  %bf.load4998 = load i32, i32* %code4997, align 8
  %bf.clear4999 = and i32 %bf.load4998, 255
  %idxprom5000 = sext i32 %bf.clear4999 to i64
  %arrayidx5001 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5000
  %2385 = load i8, i8* %arrayidx5001, align 1
  %conv5002 = sext i8 %2385 to i32
  %cmp5003 = icmp eq i32 %conv5002, 49
  br i1 %cmp5003, label %land.lhs.true.5005, label %if.end.5020

land.lhs.true.5005:                               ; preds = %lor.lhs.false.4995
  %2386 = load %union.tree_node*, %union.tree_node** %iftrue, align 8
  %2387 = load %union.tree_node*, %union.tree_node** %iffalse, align 8
  %exp5006 = bitcast %union.tree_node* %2387 to %struct.tree_exp*
  %operands5007 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5006, i32 0, i32 2
  %arrayidx5008 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5007, i32 0, i64 0
  %2388 = load %union.tree_node*, %union.tree_node** %arrayidx5008, align 8
  %call5009 = call i32 @operand_equal_p(%union.tree_node* %2386, %union.tree_node* %2388, i32 0)
  %tobool5010 = icmp ne i32 %call5009, 0
  br i1 %tobool5010, label %if.then.5011, label %if.end.5020

if.then.5011:                                     ; preds = %land.lhs.true.5005, %land.lhs.true.4989, %land.lhs.true.4973, %land.lhs.true.4957
  %2389 = load %union.tree_node*, %union.tree_node** %type, align 8
  %2390 = load %union.tree_node*, %union.tree_node** %iftrue, align 8
  %common5012 = bitcast %union.tree_node* %2390 to %struct.tree_common*
  %type5013 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5012, i32 0, i32 1
  %2391 = load %union.tree_node*, %union.tree_node** %type5013, align 8
  %2392 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5014 = bitcast %union.tree_node* %2392 to %struct.tree_exp*
  %operands5015 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5014, i32 0, i32 2
  %arrayidx5016 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5015, i32 0, i64 0
  %2393 = load %union.tree_node*, %union.tree_node** %arrayidx5016, align 8
  %2394 = load %union.tree_node*, %union.tree_node** %iftrue, align 8
  %2395 = load %union.tree_node*, %union.tree_node** %iffalse, align 8
  %call5017 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 51, %union.tree_node* %2391, %union.tree_node* %2393, %union.tree_node* %2394, %union.tree_node* %2395)
  %call5018 = call %union.tree_node* @build1(i32 115, %union.tree_node* %2389, %union.tree_node* %call5017)
  %2396 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2397 = load i32, i32* %tmode.addr, align 4
  %2398 = load i32, i32* %modifier.addr, align 4
  %call5019 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call5018, %struct.rtx_def* %2396, i32 %2397, i32 %2398)
  store %struct.rtx_def* %call5019, %struct.rtx_def** %retval
  br label %return

if.end.5020:                                      ; preds = %land.lhs.true.5005, %lor.lhs.false.4995
  br label %if.end.5021

if.end.5021:                                      ; preds = %if.end.5020, %land.lhs.true.4916, %land.lhs.true.4906, %sw.bb.4896
  store %union.tree_node* null, %union.tree_node** %singleton, align 8
  store %union.tree_node* null, %union.tree_node** %binary_op, align 8
  store %union.tree_node* null, %union.tree_node** %unary_op, align 8
  %2399 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5022 = bitcast %union.tree_node* %2399 to %struct.tree_exp*
  %operands5023 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5022, i32 0, i32 2
  %arrayidx5024 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5023, i32 0, i64 1
  %2400 = load %union.tree_node*, %union.tree_node** %arrayidx5024, align 8
  %call5025 = call i32 @integer_onep(%union.tree_node* %2400)
  %tobool5026 = icmp ne i32 %call5025, 0
  br i1 %tobool5026, label %land.lhs.true.5027, label %if.end.5070

land.lhs.true.5027:                               ; preds = %if.end.5021
  %2401 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5028 = bitcast %union.tree_node* %2401 to %struct.tree_exp*
  %operands5029 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5028, i32 0, i32 2
  %arrayidx5030 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5029, i32 0, i64 2
  %2402 = load %union.tree_node*, %union.tree_node** %arrayidx5030, align 8
  %call5031 = call i32 @integer_zerop(%union.tree_node* %2402)
  %tobool5032 = icmp ne i32 %call5031, 0
  br i1 %tobool5032, label %land.lhs.true.5033, label %if.end.5070

land.lhs.true.5033:                               ; preds = %land.lhs.true.5027
  %2403 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5034 = bitcast %union.tree_node* %2403 to %struct.tree_exp*
  %operands5035 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5034, i32 0, i32 2
  %arrayidx5036 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5035, i32 0, i64 0
  %2404 = load %union.tree_node*, %union.tree_node** %arrayidx5036, align 8
  %common5037 = bitcast %union.tree_node* %2404 to %struct.tree_common*
  %code5038 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5037, i32 0, i32 2
  %bf.load5039 = load i32, i32* %code5038, align 8
  %bf.clear5040 = and i32 %bf.load5039, 255
  %idxprom5041 = sext i32 %bf.clear5040 to i64
  %arrayidx5042 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5041
  %2405 = load i8, i8* %arrayidx5042, align 1
  %conv5043 = sext i8 %2405 to i32
  %cmp5044 = icmp eq i32 %conv5043, 60
  br i1 %cmp5044, label %if.then.5046, label %if.end.5070

if.then.5046:                                     ; preds = %land.lhs.true.5033
  %2406 = load i32, i32* %ignore, align 4
  %tobool5047 = icmp ne i32 %2406, 0
  br i1 %tobool5047, label %if.then.5048, label %if.end.5053

if.then.5048:                                     ; preds = %if.then.5046
  %2407 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5049 = bitcast %union.tree_node* %2407 to %struct.tree_exp*
  %operands5050 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5049, i32 0, i32 2
  %arrayidx5051 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5050, i32 0, i64 0
  %2408 = load %union.tree_node*, %union.tree_node** %arrayidx5051, align 8
  %2409 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %2410 = load i32, i32* %modifier.addr, align 4
  %call5052 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2408, %struct.rtx_def* %2409, i32 0, i32 %2410)
  %2411 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %2411, %struct.rtx_def** %retval
  br label %return

if.end.5053:                                      ; preds = %if.then.5046
  %2412 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5054 = bitcast %union.tree_node* %2412 to %struct.tree_exp*
  %operands5055 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5054, i32 0, i32 2
  %arrayidx5056 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5055, i32 0, i64 0
  %2413 = load %union.tree_node*, %union.tree_node** %arrayidx5056, align 8
  %2414 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2415 = load i32, i32* %mode, align 4
  %2416 = load i32, i32* %modifier.addr, align 4
  %call5057 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2413, %struct.rtx_def* %2414, i32 %2415, i32 %2416)
  store %struct.rtx_def* %call5057, %struct.rtx_def** %op0, align 8
  %2417 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2418 = bitcast %struct.rtx_def* %2417 to i32*
  %bf.load5058 = load i32, i32* %2418, align 8
  %bf.lshr5059 = lshr i32 %bf.load5058, 16
  %bf.clear5060 = and i32 %bf.lshr5059, 255
  %2419 = load i32, i32* %mode, align 4
  %cmp5061 = icmp eq i32 %bf.clear5060, %2419
  br i1 %cmp5061, label %if.then.5063, label %if.end.5064

if.then.5063:                                     ; preds = %if.end.5053
  %2420 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %2420, %struct.rtx_def** %retval
  br label %return

if.end.5064:                                      ; preds = %if.end.5053
  %2421 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp5065 = icmp eq %struct.rtx_def* %2421, null
  br i1 %cmp5065, label %if.then.5067, label %if.end.5069

if.then.5067:                                     ; preds = %if.end.5064
  %2422 = load i32, i32* %mode, align 4
  %call5068 = call %struct.rtx_def* @gen_reg_rtx(i32 %2422)
  store %struct.rtx_def* %call5068, %struct.rtx_def** %target.addr, align 8
  br label %if.end.5069

if.end.5069:                                      ; preds = %if.then.5067, %if.end.5064
  %2423 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2424 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2425 = load i32, i32* %unsignedp, align 4
  call void @convert_move(%struct.rtx_def* %2423, %struct.rtx_def* %2424, i32 %2425)
  %2426 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2426, %struct.rtx_def** %retval
  br label %return

if.end.5070:                                      ; preds = %land.lhs.true.5033, %land.lhs.true.5027, %if.end.5021
  %2427 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5071 = bitcast %union.tree_node* %2427 to %struct.tree_exp*
  %operands5072 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5071, i32 0, i32 2
  %arrayidx5073 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5072, i32 0, i64 1
  %2428 = load %union.tree_node*, %union.tree_node** %arrayidx5073, align 8
  %common5074 = bitcast %union.tree_node* %2428 to %struct.tree_common*
  %code5075 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5074, i32 0, i32 2
  %bf.load5076 = load i32, i32* %code5075, align 8
  %bf.clear5077 = and i32 %bf.load5076, 255
  %idxprom5078 = sext i32 %bf.clear5077 to i64
  %arrayidx5079 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5078
  %2429 = load i8, i8* %arrayidx5079, align 1
  %conv5080 = sext i8 %2429 to i32
  %cmp5081 = icmp eq i32 %conv5080, 50
  br i1 %cmp5081, label %land.lhs.true.5083, label %if.else.5102

land.lhs.true.5083:                               ; preds = %if.end.5070
  %2430 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5084 = bitcast %union.tree_node* %2430 to %struct.tree_exp*
  %operands5085 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5084, i32 0, i32 2
  %arrayidx5086 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5085, i32 0, i64 2
  %2431 = load %union.tree_node*, %union.tree_node** %arrayidx5086, align 8
  %2432 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5087 = bitcast %union.tree_node* %2432 to %struct.tree_exp*
  %operands5088 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5087, i32 0, i32 2
  %arrayidx5089 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5088, i32 0, i64 1
  %2433 = load %union.tree_node*, %union.tree_node** %arrayidx5089, align 8
  %exp5090 = bitcast %union.tree_node* %2433 to %struct.tree_exp*
  %operands5091 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5090, i32 0, i32 2
  %arrayidx5092 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5091, i32 0, i64 0
  %2434 = load %union.tree_node*, %union.tree_node** %arrayidx5092, align 8
  %call5093 = call i32 @operand_equal_p(%union.tree_node* %2431, %union.tree_node* %2434, i32 0)
  %tobool5094 = icmp ne i32 %call5093, 0
  br i1 %tobool5094, label %if.then.5095, label %if.else.5102

if.then.5095:                                     ; preds = %land.lhs.true.5083
  %2435 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5096 = bitcast %union.tree_node* %2435 to %struct.tree_exp*
  %operands5097 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5096, i32 0, i32 2
  %arrayidx5098 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5097, i32 0, i64 2
  %2436 = load %union.tree_node*, %union.tree_node** %arrayidx5098, align 8
  store %union.tree_node* %2436, %union.tree_node** %singleton, align 8
  %2437 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5099 = bitcast %union.tree_node* %2437 to %struct.tree_exp*
  %operands5100 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5099, i32 0, i32 2
  %arrayidx5101 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5100, i32 0, i64 1
  %2438 = load %union.tree_node*, %union.tree_node** %arrayidx5101, align 8
  store %union.tree_node* %2438, %union.tree_node** %binary_op, align 8
  br label %if.end.5201

if.else.5102:                                     ; preds = %land.lhs.true.5083, %if.end.5070
  %2439 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5103 = bitcast %union.tree_node* %2439 to %struct.tree_exp*
  %operands5104 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5103, i32 0, i32 2
  %arrayidx5105 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5104, i32 0, i64 2
  %2440 = load %union.tree_node*, %union.tree_node** %arrayidx5105, align 8
  %common5106 = bitcast %union.tree_node* %2440 to %struct.tree_common*
  %code5107 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5106, i32 0, i32 2
  %bf.load5108 = load i32, i32* %code5107, align 8
  %bf.clear5109 = and i32 %bf.load5108, 255
  %idxprom5110 = sext i32 %bf.clear5109 to i64
  %arrayidx5111 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5110
  %2441 = load i8, i8* %arrayidx5111, align 1
  %conv5112 = sext i8 %2441 to i32
  %cmp5113 = icmp eq i32 %conv5112, 50
  br i1 %cmp5113, label %land.lhs.true.5115, label %if.else.5134

land.lhs.true.5115:                               ; preds = %if.else.5102
  %2442 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5116 = bitcast %union.tree_node* %2442 to %struct.tree_exp*
  %operands5117 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5116, i32 0, i32 2
  %arrayidx5118 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5117, i32 0, i64 1
  %2443 = load %union.tree_node*, %union.tree_node** %arrayidx5118, align 8
  %2444 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5119 = bitcast %union.tree_node* %2444 to %struct.tree_exp*
  %operands5120 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5119, i32 0, i32 2
  %arrayidx5121 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5120, i32 0, i64 2
  %2445 = load %union.tree_node*, %union.tree_node** %arrayidx5121, align 8
  %exp5122 = bitcast %union.tree_node* %2445 to %struct.tree_exp*
  %operands5123 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5122, i32 0, i32 2
  %arrayidx5124 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5123, i32 0, i64 0
  %2446 = load %union.tree_node*, %union.tree_node** %arrayidx5124, align 8
  %call5125 = call i32 @operand_equal_p(%union.tree_node* %2443, %union.tree_node* %2446, i32 0)
  %tobool5126 = icmp ne i32 %call5125, 0
  br i1 %tobool5126, label %if.then.5127, label %if.else.5134

if.then.5127:                                     ; preds = %land.lhs.true.5115
  %2447 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5128 = bitcast %union.tree_node* %2447 to %struct.tree_exp*
  %operands5129 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5128, i32 0, i32 2
  %arrayidx5130 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5129, i32 0, i64 1
  %2448 = load %union.tree_node*, %union.tree_node** %arrayidx5130, align 8
  store %union.tree_node* %2448, %union.tree_node** %singleton, align 8
  %2449 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5131 = bitcast %union.tree_node* %2449 to %struct.tree_exp*
  %operands5132 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5131, i32 0, i32 2
  %arrayidx5133 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5132, i32 0, i64 2
  %2450 = load %union.tree_node*, %union.tree_node** %arrayidx5133, align 8
  store %union.tree_node* %2450, %union.tree_node** %binary_op, align 8
  br label %if.end.5200

if.else.5134:                                     ; preds = %land.lhs.true.5115, %if.else.5102
  %2451 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5135 = bitcast %union.tree_node* %2451 to %struct.tree_exp*
  %operands5136 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5135, i32 0, i32 2
  %arrayidx5137 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5136, i32 0, i64 1
  %2452 = load %union.tree_node*, %union.tree_node** %arrayidx5137, align 8
  %common5138 = bitcast %union.tree_node* %2452 to %struct.tree_common*
  %code5139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5138, i32 0, i32 2
  %bf.load5140 = load i32, i32* %code5139, align 8
  %bf.clear5141 = and i32 %bf.load5140, 255
  %idxprom5142 = sext i32 %bf.clear5141 to i64
  %arrayidx5143 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5142
  %2453 = load i8, i8* %arrayidx5143, align 1
  %conv5144 = sext i8 %2453 to i32
  %cmp5145 = icmp eq i32 %conv5144, 49
  br i1 %cmp5145, label %land.lhs.true.5147, label %if.else.5166

land.lhs.true.5147:                               ; preds = %if.else.5134
  %2454 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5148 = bitcast %union.tree_node* %2454 to %struct.tree_exp*
  %operands5149 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5148, i32 0, i32 2
  %arrayidx5150 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5149, i32 0, i64 2
  %2455 = load %union.tree_node*, %union.tree_node** %arrayidx5150, align 8
  %2456 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5151 = bitcast %union.tree_node* %2456 to %struct.tree_exp*
  %operands5152 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5151, i32 0, i32 2
  %arrayidx5153 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5152, i32 0, i64 1
  %2457 = load %union.tree_node*, %union.tree_node** %arrayidx5153, align 8
  %exp5154 = bitcast %union.tree_node* %2457 to %struct.tree_exp*
  %operands5155 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5154, i32 0, i32 2
  %arrayidx5156 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5155, i32 0, i64 0
  %2458 = load %union.tree_node*, %union.tree_node** %arrayidx5156, align 8
  %call5157 = call i32 @operand_equal_p(%union.tree_node* %2455, %union.tree_node* %2458, i32 0)
  %tobool5158 = icmp ne i32 %call5157, 0
  br i1 %tobool5158, label %if.then.5159, label %if.else.5166

if.then.5159:                                     ; preds = %land.lhs.true.5147
  %2459 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5160 = bitcast %union.tree_node* %2459 to %struct.tree_exp*
  %operands5161 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5160, i32 0, i32 2
  %arrayidx5162 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5161, i32 0, i64 2
  %2460 = load %union.tree_node*, %union.tree_node** %arrayidx5162, align 8
  store %union.tree_node* %2460, %union.tree_node** %singleton, align 8
  %2461 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5163 = bitcast %union.tree_node* %2461 to %struct.tree_exp*
  %operands5164 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5163, i32 0, i32 2
  %arrayidx5165 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5164, i32 0, i64 1
  %2462 = load %union.tree_node*, %union.tree_node** %arrayidx5165, align 8
  store %union.tree_node* %2462, %union.tree_node** %unary_op, align 8
  br label %if.end.5199

if.else.5166:                                     ; preds = %land.lhs.true.5147, %if.else.5134
  %2463 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5167 = bitcast %union.tree_node* %2463 to %struct.tree_exp*
  %operands5168 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5167, i32 0, i32 2
  %arrayidx5169 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5168, i32 0, i64 2
  %2464 = load %union.tree_node*, %union.tree_node** %arrayidx5169, align 8
  %common5170 = bitcast %union.tree_node* %2464 to %struct.tree_common*
  %code5171 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5170, i32 0, i32 2
  %bf.load5172 = load i32, i32* %code5171, align 8
  %bf.clear5173 = and i32 %bf.load5172, 255
  %idxprom5174 = sext i32 %bf.clear5173 to i64
  %arrayidx5175 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5174
  %2465 = load i8, i8* %arrayidx5175, align 1
  %conv5176 = sext i8 %2465 to i32
  %cmp5177 = icmp eq i32 %conv5176, 49
  br i1 %cmp5177, label %land.lhs.true.5179, label %if.end.5198

land.lhs.true.5179:                               ; preds = %if.else.5166
  %2466 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5180 = bitcast %union.tree_node* %2466 to %struct.tree_exp*
  %operands5181 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5180, i32 0, i32 2
  %arrayidx5182 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5181, i32 0, i64 1
  %2467 = load %union.tree_node*, %union.tree_node** %arrayidx5182, align 8
  %2468 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5183 = bitcast %union.tree_node* %2468 to %struct.tree_exp*
  %operands5184 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5183, i32 0, i32 2
  %arrayidx5185 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5184, i32 0, i64 2
  %2469 = load %union.tree_node*, %union.tree_node** %arrayidx5185, align 8
  %exp5186 = bitcast %union.tree_node* %2469 to %struct.tree_exp*
  %operands5187 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5186, i32 0, i32 2
  %arrayidx5188 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5187, i32 0, i64 0
  %2470 = load %union.tree_node*, %union.tree_node** %arrayidx5188, align 8
  %call5189 = call i32 @operand_equal_p(%union.tree_node* %2467, %union.tree_node* %2470, i32 0)
  %tobool5190 = icmp ne i32 %call5189, 0
  br i1 %tobool5190, label %if.then.5191, label %if.end.5198

if.then.5191:                                     ; preds = %land.lhs.true.5179
  %2471 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5192 = bitcast %union.tree_node* %2471 to %struct.tree_exp*
  %operands5193 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5192, i32 0, i32 2
  %arrayidx5194 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5193, i32 0, i64 1
  %2472 = load %union.tree_node*, %union.tree_node** %arrayidx5194, align 8
  store %union.tree_node* %2472, %union.tree_node** %singleton, align 8
  %2473 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5195 = bitcast %union.tree_node* %2473 to %struct.tree_exp*
  %operands5196 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5195, i32 0, i32 2
  %arrayidx5197 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5196, i32 0, i64 2
  %2474 = load %union.tree_node*, %union.tree_node** %arrayidx5197, align 8
  store %union.tree_node* %2474, %union.tree_node** %unary_op, align 8
  br label %if.end.5198

if.end.5198:                                      ; preds = %if.then.5191, %land.lhs.true.5179, %if.else.5166
  br label %if.end.5199

if.end.5199:                                      ; preds = %if.end.5198, %if.then.5159
  br label %if.end.5200

if.end.5200:                                      ; preds = %if.end.5199, %if.then.5127
  br label %if.end.5201

if.end.5201:                                      ; preds = %if.end.5200, %if.then.5095
  %2475 = load i32, i32* %ignore, align 4
  %tobool5202 = icmp ne i32 %2475, 0
  br i1 %tobool5202, label %if.then.5203, label %if.else.5204

if.then.5203:                                     ; preds = %if.end.5201
  store %struct.rtx_def* null, %struct.rtx_def** %temp, align 8
  br label %if.end.5275

if.else.5204:                                     ; preds = %if.end.5201
  %2476 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %tobool5205 = icmp ne %struct.rtx_def* %2476, null
  br i1 %tobool5205, label %land.lhs.true.5206, label %if.else.5263

land.lhs.true.5206:                               ; preds = %if.else.5204
  %2477 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %2478 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5207 = bitcast %union.tree_node* %2478 to %struct.tree_exp*
  %operands5208 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5207, i32 0, i32 2
  %arrayidx5209 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5208, i32 0, i64 0
  %2479 = load %union.tree_node*, %union.tree_node** %arrayidx5209, align 8
  %call5210 = call i32 @safe_from_p(%struct.rtx_def* %2477, %union.tree_node* %2479, i32 1)
  %tobool5211 = icmp ne i32 %call5210, 0
  br i1 %tobool5211, label %land.lhs.true.5229, label %lor.lhs.false.5212

lor.lhs.false.5212:                               ; preds = %land.lhs.true.5206
  %2480 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %tobool5213 = icmp ne %union.tree_node* %2480, null
  br i1 %tobool5213, label %land.lhs.true.5214, label %if.else.5263

land.lhs.true.5214:                               ; preds = %lor.lhs.false.5212
  %2481 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %2482 = bitcast %struct.rtx_def* %2481 to i32*
  %bf.load5215 = load i32, i32* %2482, align 8
  %bf.clear5216 = and i32 %bf.load5215, 65535
  %cmp5217 = icmp eq i32 %bf.clear5216, 61
  br i1 %cmp5217, label %land.lhs.true.5219, label %if.else.5263

land.lhs.true.5219:                               ; preds = %land.lhs.true.5214
  %2483 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %fld5220 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2483, i32 0, i32 1
  %arrayidx5221 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5220, i32 0, i64 0
  %rtuint5222 = bitcast %union.rtunion_def* %arrayidx5221 to i32*
  %2484 = load i32, i32* %rtuint5222, align 4
  %cmp5223 = icmp uge i32 %2484, 53
  br i1 %cmp5223, label %land.lhs.true.5225, label %if.else.5263

land.lhs.true.5225:                               ; preds = %land.lhs.true.5219
  %2485 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %2486 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %call5226 = call %struct.rtx_def* @var_rtx(%union.tree_node* %2486)
  %cmp5227 = icmp eq %struct.rtx_def* %2485, %call5226
  br i1 %cmp5227, label %land.lhs.true.5229, label %if.else.5263

land.lhs.true.5229:                               ; preds = %land.lhs.true.5225, %land.lhs.true.5206
  %2487 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %2488 = bitcast %struct.rtx_def* %2487 to i32*
  %bf.load5230 = load i32, i32* %2488, align 8
  %bf.lshr5231 = lshr i32 %bf.load5230, 16
  %bf.clear5232 = and i32 %bf.lshr5231, 255
  %2489 = load i32, i32* %mode, align 4
  %cmp5233 = icmp eq i32 %bf.clear5232, %2489
  br i1 %cmp5233, label %land.lhs.true.5235, label %if.else.5263

land.lhs.true.5235:                               ; preds = %land.lhs.true.5229
  %2490 = load i32, i32* %mode, align 4
  %call5236 = call i32 @can_conditionally_move_p(i32 %2490)
  %tobool5237 = icmp ne i32 %call5236, 0
  br i1 %tobool5237, label %lor.lhs.false.5238, label %land.lhs.true.5250

lor.lhs.false.5238:                               ; preds = %land.lhs.true.5235
  %2491 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %2492 = bitcast %struct.rtx_def* %2491 to i32*
  %bf.load5239 = load i32, i32* %2492, align 8
  %bf.clear5240 = and i32 %bf.load5239, 65535
  %cmp5241 = icmp eq i32 %bf.clear5240, 61
  br i1 %cmp5241, label %land.lhs.true.5250, label %lor.lhs.false.5243

lor.lhs.false.5243:                               ; preds = %lor.lhs.false.5238
  %2493 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common5244 = bitcast %union.tree_node* %2493 to %struct.tree_common*
  %addressable_flag5245 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5244, i32 0, i32 2
  %bf.load5246 = load i32, i32* %addressable_flag5245, align 8
  %bf.lshr5247 = lshr i32 %bf.load5246, 10
  %bf.clear5248 = and i32 %bf.lshr5247, 1
  %tobool5249 = icmp ne i32 %bf.clear5248, 0
  br i1 %tobool5249, label %land.lhs.true.5250, label %if.else.5263

land.lhs.true.5250:                               ; preds = %lor.lhs.false.5243, %lor.lhs.false.5238, %land.lhs.true.5235
  %2494 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %2495 = bitcast %struct.rtx_def* %2494 to i32*
  %bf.load5251 = load i32, i32* %2495, align 8
  %bf.clear5252 = and i32 %bf.load5251, 65535
  %cmp5253 = icmp ne i32 %bf.clear5252, 66
  br i1 %cmp5253, label %if.then.5262, label %lor.lhs.false.5255

lor.lhs.false.5255:                               ; preds = %land.lhs.true.5250
  %2496 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common5256 = bitcast %union.tree_node* %2496 to %struct.tree_common*
  %addressable_flag5257 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5256, i32 0, i32 2
  %bf.load5258 = load i32, i32* %addressable_flag5257, align 8
  %bf.lshr5259 = lshr i32 %bf.load5258, 10
  %bf.clear5260 = and i32 %bf.lshr5259, 1
  %tobool5261 = icmp ne i32 %bf.clear5260, 0
  br i1 %tobool5261, label %if.then.5262, label %if.else.5263

if.then.5262:                                     ; preds = %lor.lhs.false.5255, %land.lhs.true.5250
  %2497 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  store %struct.rtx_def* %2497, %struct.rtx_def** %temp, align 8
  br label %if.end.5274

if.else.5263:                                     ; preds = %lor.lhs.false.5255, %lor.lhs.false.5243, %land.lhs.true.5229, %land.lhs.true.5225, %land.lhs.true.5219, %land.lhs.true.5214, %lor.lhs.false.5212, %if.else.5204
  %2498 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common5264 = bitcast %union.tree_node* %2498 to %struct.tree_common*
  %addressable_flag5265 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5264, i32 0, i32 2
  %bf.load5266 = load i32, i32* %addressable_flag5265, align 8
  %bf.lshr5267 = lshr i32 %bf.load5266, 10
  %bf.clear5268 = and i32 %bf.lshr5267, 1
  %tobool5269 = icmp ne i32 %bf.clear5268, 0
  br i1 %tobool5269, label %if.then.5270, label %if.else.5271

if.then.5270:                                     ; preds = %if.else.5263
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8197, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.else.5271:                                     ; preds = %if.else.5263
  %2499 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call5272 = call %struct.rtx_def* @assign_temp(%union.tree_node* %2499, i32 0, i32 0, i32 1)
  store %struct.rtx_def* %call5272, %struct.rtx_def** %temp, align 8
  br label %if.end.5273

if.end.5273:                                      ; preds = %if.else.5271
  br label %if.end.5274

if.end.5274:                                      ; preds = %if.end.5273, %if.then.5262
  br label %if.end.5275

if.end.5275:                                      ; preds = %if.end.5274, %if.then.5203
  %2500 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool5276 = icmp ne %struct.rtx_def* %2500, null
  br i1 %tobool5276, label %land.lhs.true.5277, label %if.end.5466

land.lhs.true.5277:                               ; preds = %if.end.5275
  %2501 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %tobool5278 = icmp ne %union.tree_node* %2501, null
  br i1 %tobool5278, label %land.lhs.true.5279, label %if.end.5466

land.lhs.true.5279:                               ; preds = %land.lhs.true.5277
  %2502 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %tobool5280 = icmp ne %union.tree_node* %2502, null
  br i1 %tobool5280, label %land.lhs.true.5281, label %if.end.5466

land.lhs.true.5281:                               ; preds = %land.lhs.true.5279
  %2503 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5282 = bitcast %union.tree_node* %2503 to %struct.tree_common*
  %code5283 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5282, i32 0, i32 2
  %bf.load5284 = load i32, i32* %code5283, align 8
  %bf.clear5285 = and i32 %bf.load5284, 255
  %cmp5286 = icmp eq i32 %bf.clear5285, 59
  br i1 %cmp5286, label %land.lhs.true.5309, label %lor.lhs.false.5288

lor.lhs.false.5288:                               ; preds = %land.lhs.true.5281
  %2504 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5289 = bitcast %union.tree_node* %2504 to %struct.tree_common*
  %code5290 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5289, i32 0, i32 2
  %bf.load5291 = load i32, i32* %code5290, align 8
  %bf.clear5292 = and i32 %bf.load5291, 255
  %cmp5293 = icmp eq i32 %bf.clear5292, 60
  br i1 %cmp5293, label %land.lhs.true.5309, label %lor.lhs.false.5295

lor.lhs.false.5295:                               ; preds = %lor.lhs.false.5288
  %2505 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5296 = bitcast %union.tree_node* %2505 to %struct.tree_common*
  %code5297 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5296, i32 0, i32 2
  %bf.load5298 = load i32, i32* %code5297, align 8
  %bf.clear5299 = and i32 %bf.load5298, 255
  %cmp5300 = icmp eq i32 %bf.clear5299, 86
  br i1 %cmp5300, label %land.lhs.true.5309, label %lor.lhs.false.5302

lor.lhs.false.5302:                               ; preds = %lor.lhs.false.5295
  %2506 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5303 = bitcast %union.tree_node* %2506 to %struct.tree_common*
  %code5304 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5303, i32 0, i32 2
  %bf.load5305 = load i32, i32* %code5304, align 8
  %bf.clear5306 = and i32 %bf.load5305, 255
  %cmp5307 = icmp eq i32 %bf.clear5306, 87
  br i1 %cmp5307, label %land.lhs.true.5309, label %if.end.5466

land.lhs.true.5309:                               ; preds = %lor.lhs.false.5302, %lor.lhs.false.5295, %lor.lhs.false.5288, %land.lhs.true.5281
  %2507 = load i32, i32* @ix86_branch_cost, align 4
  %cmp5310 = icmp sge i32 %2507, 3
  br i1 %cmp5310, label %cond.true.5312, label %cond.false.5318

cond.true.5312:                                   ; preds = %land.lhs.true.5309
  %2508 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %exp5313 = bitcast %union.tree_node* %2508 to %struct.tree_exp*
  %operands5314 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5313, i32 0, i32 2
  %arrayidx5315 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5314, i32 0, i64 1
  %2509 = load %union.tree_node*, %union.tree_node** %arrayidx5315, align 8
  %call5316 = call i32 @integer_pow2p(%union.tree_node* %2509)
  %tobool5317 = icmp ne i32 %call5316, 0
  br i1 %tobool5317, label %land.lhs.true.5324, label %if.end.5466

cond.false.5318:                                  ; preds = %land.lhs.true.5309
  %2510 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %exp5319 = bitcast %union.tree_node* %2510 to %struct.tree_exp*
  %operands5320 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5319, i32 0, i32 2
  %arrayidx5321 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5320, i32 0, i64 1
  %2511 = load %union.tree_node*, %union.tree_node** %arrayidx5321, align 8
  %call5322 = call i32 @integer_onep(%union.tree_node* %2511)
  %tobool5323 = icmp ne i32 %call5322, 0
  br i1 %tobool5323, label %land.lhs.true.5324, label %if.end.5466

land.lhs.true.5324:                               ; preds = %cond.false.5318, %cond.true.5312
  %2512 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5325 = bitcast %union.tree_node* %2512 to %struct.tree_exp*
  %operands5326 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5325, i32 0, i32 2
  %arrayidx5327 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5326, i32 0, i64 0
  %2513 = load %union.tree_node*, %union.tree_node** %arrayidx5327, align 8
  %common5328 = bitcast %union.tree_node* %2513 to %struct.tree_common*
  %code5329 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5328, i32 0, i32 2
  %bf.load5330 = load i32, i32* %code5329, align 8
  %bf.clear5331 = and i32 %bf.load5330, 255
  %idxprom5332 = sext i32 %bf.clear5331 to i64
  %arrayidx5333 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5332
  %2514 = load i8, i8* %arrayidx5333, align 1
  %conv5334 = sext i8 %2514 to i32
  %cmp5335 = icmp eq i32 %conv5334, 60
  br i1 %cmp5335, label %if.then.5337, label %if.end.5466

if.then.5337:                                     ; preds = %land.lhs.true.5324
  %2515 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5339 = bitcast %union.tree_node* %2515 to %struct.tree_common*
  %code5340 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5339, i32 0, i32 2
  %bf.load5341 = load i32, i32* %code5340, align 8
  %bf.clear5342 = and i32 %bf.load5341, 255
  %cmp5343 = icmp eq i32 %bf.clear5342, 59
  br i1 %cmp5343, label %cond.true.5345, label %cond.false.5360

cond.true.5345:                                   ; preds = %if.then.5337
  %2516 = load i32, i32* @flag_trapv, align 4
  %tobool5346 = icmp ne i32 %2516, 0
  br i1 %tobool5346, label %land.lhs.true.5347, label %cond.false.5357

land.lhs.true.5347:                               ; preds = %cond.true.5345
  %2517 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5348 = bitcast %union.tree_node* %2517 to %struct.tree_common*
  %type5349 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5348, i32 0, i32 1
  %2518 = load %union.tree_node*, %union.tree_node** %type5349, align 8
  %common5350 = bitcast %union.tree_node* %2518 to %struct.tree_common*
  %unsigned_flag5351 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5350, i32 0, i32 2
  %bf.load5352 = load i32, i32* %unsigned_flag5351, align 8
  %bf.lshr5353 = lshr i32 %bf.load5352, 13
  %bf.clear5354 = and i32 %bf.lshr5353, 1
  %tobool5355 = icmp ne i32 %bf.clear5354, 0
  br i1 %tobool5355, label %cond.false.5357, label %cond.true.5356

cond.true.5356:                                   ; preds = %land.lhs.true.5347
  %2519 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 1), align 8
  br label %cond.end.5358

cond.false.5357:                                  ; preds = %land.lhs.true.5347, %cond.true.5345
  %2520 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  br label %cond.end.5358

cond.end.5358:                                    ; preds = %cond.false.5357, %cond.true.5356
  %cond5359 = phi %struct.optab* [ %2519, %cond.true.5356 ], [ %2520, %cond.false.5357 ]
  br label %cond.end.5395

cond.false.5360:                                  ; preds = %if.then.5337
  %2521 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5361 = bitcast %union.tree_node* %2521 to %struct.tree_common*
  %code5362 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5361, i32 0, i32 2
  %bf.load5363 = load i32, i32* %code5362, align 8
  %bf.clear5364 = and i32 %bf.load5363, 255
  %cmp5365 = icmp eq i32 %bf.clear5364, 60
  br i1 %cmp5365, label %cond.true.5367, label %cond.false.5382

cond.true.5367:                                   ; preds = %cond.false.5360
  %2522 = load i32, i32* @flag_trapv, align 4
  %tobool5368 = icmp ne i32 %2522, 0
  br i1 %tobool5368, label %land.lhs.true.5369, label %cond.false.5379

land.lhs.true.5369:                               ; preds = %cond.true.5367
  %2523 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5370 = bitcast %union.tree_node* %2523 to %struct.tree_common*
  %type5371 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5370, i32 0, i32 1
  %2524 = load %union.tree_node*, %union.tree_node** %type5371, align 8
  %common5372 = bitcast %union.tree_node* %2524 to %struct.tree_common*
  %unsigned_flag5373 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5372, i32 0, i32 2
  %bf.load5374 = load i32, i32* %unsigned_flag5373, align 8
  %bf.lshr5375 = lshr i32 %bf.load5374, 13
  %bf.clear5376 = and i32 %bf.lshr5375, 1
  %tobool5377 = icmp ne i32 %bf.clear5376, 0
  br i1 %tobool5377, label %cond.false.5379, label %cond.true.5378

cond.true.5378:                                   ; preds = %land.lhs.true.5369
  %2525 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 3), align 8
  br label %cond.end.5380

cond.false.5379:                                  ; preds = %land.lhs.true.5369, %cond.true.5367
  %2526 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  br label %cond.end.5380

cond.end.5380:                                    ; preds = %cond.false.5379, %cond.true.5378
  %cond5381 = phi %struct.optab* [ %2525, %cond.true.5378 ], [ %2526, %cond.false.5379 ]
  br label %cond.end.5393

cond.false.5382:                                  ; preds = %cond.false.5360
  %2527 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5383 = bitcast %union.tree_node* %2527 to %struct.tree_common*
  %code5384 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5383, i32 0, i32 2
  %bf.load5385 = load i32, i32* %code5384, align 8
  %bf.clear5386 = and i32 %bf.load5385, 255
  %cmp5387 = icmp eq i32 %bf.clear5386, 86
  br i1 %cmp5387, label %cond.true.5389, label %cond.false.5390

cond.true.5389:                                   ; preds = %cond.false.5382
  %2528 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 19), align 8
  br label %cond.end.5391

cond.false.5390:                                  ; preds = %cond.false.5382
  %2529 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 20), align 8
  br label %cond.end.5391

cond.end.5391:                                    ; preds = %cond.false.5390, %cond.true.5389
  %cond5392 = phi %struct.optab* [ %2528, %cond.true.5389 ], [ %2529, %cond.false.5390 ]
  br label %cond.end.5393

cond.end.5393:                                    ; preds = %cond.end.5391, %cond.end.5380
  %cond5394 = phi %struct.optab* [ %cond5381, %cond.end.5380 ], [ %cond5392, %cond.end.5391 ]
  br label %cond.end.5395

cond.end.5395:                                    ; preds = %cond.end.5393, %cond.end.5358
  %cond5396 = phi %struct.optab* [ %cond5359, %cond.end.5358 ], [ %cond5394, %cond.end.5393 ]
  store %struct.optab* %cond5396, %struct.optab** %boptab, align 8
  %2530 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %2531 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5397 = bitcast %union.tree_node* %2531 to %struct.tree_exp*
  %operands5398 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5397, i32 0, i32 2
  %arrayidx5399 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5398, i32 0, i64 1
  %2532 = load %union.tree_node*, %union.tree_node** %arrayidx5399, align 8
  %cmp5400 = icmp eq %union.tree_node* %2530, %2532
  br i1 %cmp5400, label %if.then.5402, label %if.end.5410

if.then.5402:                                     ; preds = %cond.end.5395
  %2533 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5403 = bitcast %union.tree_node* %2533 to %struct.tree_exp*
  %operands5404 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5403, i32 0, i32 2
  %arrayidx5405 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5404, i32 0, i64 0
  %2534 = load %union.tree_node*, %union.tree_node** %arrayidx5405, align 8
  %call5406 = call %union.tree_node* @invert_truthvalue(%union.tree_node* %2534)
  %2535 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5407 = bitcast %union.tree_node* %2535 to %struct.tree_exp*
  %operands5408 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5407, i32 0, i32 2
  %arrayidx5409 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5408, i32 0, i64 0
  store %union.tree_node* %call5406, %union.tree_node** %arrayidx5409, align 8
  br label %if.end.5410

if.end.5410:                                      ; preds = %if.then.5402, %cond.end.5395
  %2536 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5411 = bitcast %union.tree_node* %2536 to %struct.tree_exp*
  %operands5412 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5411, i32 0, i32 2
  %arrayidx5413 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5412, i32 0, i64 0
  %2537 = load %union.tree_node*, %union.tree_node** %arrayidx5413, align 8
  %2538 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2539 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %call5414 = call i32 @safe_from_p(%struct.rtx_def* %2538, %union.tree_node* %2539, i32 1)
  %tobool5415 = icmp ne i32 %call5414, 0
  br i1 %tobool5415, label %cond.true.5416, label %cond.false.5417

cond.true.5416:                                   ; preds = %if.end.5410
  %2540 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  br label %cond.end.5418

cond.false.5417:                                  ; preds = %if.end.5410
  br label %cond.end.5418

cond.end.5418:                                    ; preds = %cond.false.5417, %cond.true.5416
  %cond5419 = phi %struct.rtx_def* [ %2540, %cond.true.5416 ], [ null, %cond.false.5417 ]
  %2541 = load i32, i32* %mode, align 4
  %2542 = load i32, i32* @ix86_branch_cost, align 4
  %cmp5420 = icmp sle i32 %2542, 1
  %conv5421 = zext i1 %cmp5420 to i32
  %call5422 = call %struct.rtx_def* @do_store_flag(%union.tree_node* %2537, %struct.rtx_def* %cond5419, i32 %2541, i32 %conv5421)
  store %struct.rtx_def* %call5422, %struct.rtx_def** %result5338, align 8
  %2543 = load %struct.rtx_def*, %struct.rtx_def** %result5338, align 8
  %cmp5423 = icmp ne %struct.rtx_def* %2543, null
  br i1 %cmp5423, label %land.lhs.true.5425, label %if.end.5445

land.lhs.true.5425:                               ; preds = %cond.end.5418
  %2544 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %exp5426 = bitcast %union.tree_node* %2544 to %struct.tree_exp*
  %operands5427 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5426, i32 0, i32 2
  %arrayidx5428 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5427, i32 0, i64 1
  %2545 = load %union.tree_node*, %union.tree_node** %arrayidx5428, align 8
  %call5429 = call i32 @integer_onep(%union.tree_node* %2545)
  %tobool5430 = icmp ne i32 %call5429, 0
  br i1 %tobool5430, label %if.end.5445, label %if.then.5431

if.then.5431:                                     ; preds = %land.lhs.true.5425
  %2546 = load i32, i32* %mode, align 4
  %2547 = load %struct.rtx_def*, %struct.rtx_def** %result5338, align 8
  %2548 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %exp5432 = bitcast %union.tree_node* %2548 to %struct.tree_exp*
  %operands5433 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5432, i32 0, i32 2
  %arrayidx5434 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5433, i32 0, i64 1
  %2549 = load %union.tree_node*, %union.tree_node** %arrayidx5434, align 8
  %call5435 = call i32 @tree_log2(%union.tree_node* %2549)
  %conv5436 = sext i32 %call5435 to i64
  %call5437 = call %union.tree_node* @build_int_2_wide(i64 %conv5436, i64 0)
  %2550 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2551 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %call5438 = call i32 @safe_from_p(%struct.rtx_def* %2550, %union.tree_node* %2551, i32 1)
  %tobool5439 = icmp ne i32 %call5438, 0
  br i1 %tobool5439, label %cond.true.5440, label %cond.false.5441

cond.true.5440:                                   ; preds = %if.then.5431
  %2552 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  br label %cond.end.5442

cond.false.5441:                                  ; preds = %if.then.5431
  br label %cond.end.5442

cond.end.5442:                                    ; preds = %cond.false.5441, %cond.true.5440
  %cond5443 = phi %struct.rtx_def* [ %2552, %cond.true.5440 ], [ null, %cond.false.5441 ]
  %call5444 = call %struct.rtx_def* @expand_shift(i32 82, i32 %2546, %struct.rtx_def* %2547, %union.tree_node* %call5437, %struct.rtx_def* %cond5443, i32 0)
  store %struct.rtx_def* %call5444, %struct.rtx_def** %result5338, align 8
  br label %if.end.5445

if.end.5445:                                      ; preds = %cond.end.5442, %land.lhs.true.5425, %cond.end.5418
  %2553 = load %struct.rtx_def*, %struct.rtx_def** %result5338, align 8
  %tobool5446 = icmp ne %struct.rtx_def* %2553, null
  br i1 %tobool5446, label %if.then.5447, label %if.else.5450

if.then.5447:                                     ; preds = %if.end.5445
  %2554 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %call5448 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2554, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call5448, %struct.rtx_def** %op1, align 8
  %2555 = load i32, i32* %mode, align 4
  %2556 = load %struct.optab*, %struct.optab** %boptab, align 8
  %2557 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %2558 = load %struct.rtx_def*, %struct.rtx_def** %result5338, align 8
  %2559 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2560 = load i32, i32* %unsignedp, align 4
  %call5449 = call %struct.rtx_def* @expand_binop(i32 %2555, %struct.optab* %2556, %struct.rtx_def* %2557, %struct.rtx_def* %2558, %struct.rtx_def* %2559, i32 %2560, i32 3)
  store %struct.rtx_def* %call5449, %struct.rtx_def** %retval
  br label %return

if.else.5450:                                     ; preds = %if.end.5445
  %2561 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %2562 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5451 = bitcast %union.tree_node* %2562 to %struct.tree_exp*
  %operands5452 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5451, i32 0, i32 2
  %arrayidx5453 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5452, i32 0, i64 1
  %2563 = load %union.tree_node*, %union.tree_node** %arrayidx5453, align 8
  %cmp5454 = icmp eq %union.tree_node* %2561, %2563
  br i1 %cmp5454, label %if.then.5456, label %if.end.5464

if.then.5456:                                     ; preds = %if.else.5450
  %2564 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5457 = bitcast %union.tree_node* %2564 to %struct.tree_exp*
  %operands5458 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5457, i32 0, i32 2
  %arrayidx5459 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5458, i32 0, i64 0
  %2565 = load %union.tree_node*, %union.tree_node** %arrayidx5459, align 8
  %call5460 = call %union.tree_node* @invert_truthvalue(%union.tree_node* %2565)
  %2566 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5461 = bitcast %union.tree_node* %2566 to %struct.tree_exp*
  %operands5462 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5461, i32 0, i32 2
  %arrayidx5463 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5462, i32 0, i64 0
  store %union.tree_node* %call5460, %union.tree_node** %arrayidx5463, align 8
  br label %if.end.5464

if.end.5464:                                      ; preds = %if.then.5456, %if.else.5450
  br label %if.end.5465

if.end.5465:                                      ; preds = %if.end.5464
  br label %if.end.5466

if.end.5466:                                      ; preds = %if.end.5465, %land.lhs.true.5324, %cond.false.5318, %cond.true.5312, %lor.lhs.false.5302, %land.lhs.true.5279, %land.lhs.true.5277, %if.end.5275
  call void @do_pending_stack_adjust()
  %2567 = load %struct.function*, %struct.function** @cfun, align 8
  %expr5467 = getelementptr inbounds %struct.function, %struct.function* %2567, i32 0, i32 2
  %2568 = load %struct.expr_status*, %struct.expr_status** %expr5467, align 8
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2568, i32 0, i32 1
  %2569 = load i32, i32* %x_inhibit_defer_pop, align 4
  %add5468 = add nsw i32 %2569, 1
  store i32 %add5468, i32* %x_inhibit_defer_pop, align 4
  %call5469 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call5469, %struct.rtx_def** %op0, align 8
  %2570 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %tobool5470 = icmp ne %union.tree_node* %2570, null
  br i1 %tobool5470, label %land.lhs.true.5471, label %if.else.5566

land.lhs.true.5471:                               ; preds = %if.end.5466
  %2571 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5472 = bitcast %union.tree_node* %2571 to %struct.tree_exp*
  %operands5473 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5472, i32 0, i32 2
  %arrayidx5474 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5473, i32 0, i64 0
  %2572 = load %union.tree_node*, %union.tree_node** %arrayidx5474, align 8
  %common5475 = bitcast %union.tree_node* %2572 to %struct.tree_common*
  %side_effects_flag5476 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5475, i32 0, i32 2
  %bf.load5477 = load i32, i32* %side_effects_flag5476, align 8
  %bf.lshr5478 = lshr i32 %bf.load5477, 8
  %bf.clear5479 = and i32 %bf.lshr5478, 1
  %tobool5480 = icmp ne i32 %bf.clear5479, 0
  br i1 %tobool5480, label %if.else.5566, label %if.then.5481

if.then.5481:                                     ; preds = %land.lhs.true.5471
  %2573 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp5482 = icmp ne %struct.rtx_def* %2573, null
  br i1 %cmp5482, label %if.then.5484, label %if.else.5507

if.then.5484:                                     ; preds = %if.then.5481
  %2574 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %tobool5485 = icmp ne %union.tree_node* %2574, null
  br i1 %tobool5485, label %land.lhs.true.5486, label %lor.lhs.false.5492

land.lhs.true.5486:                               ; preds = %if.then.5484
  %2575 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2576 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %exp5487 = bitcast %union.tree_node* %2576 to %struct.tree_exp*
  %operands5488 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5487, i32 0, i32 2
  %arrayidx5489 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5488, i32 0, i64 1
  %2577 = load %union.tree_node*, %union.tree_node** %arrayidx5489, align 8
  %call5490 = call i32 @safe_from_p(%struct.rtx_def* %2575, %union.tree_node* %2577, i32 1)
  %tobool5491 = icmp ne i32 %call5490, 0
  br i1 %tobool5491, label %lor.lhs.false.5492, label %if.then.5503

lor.lhs.false.5492:                               ; preds = %land.lhs.true.5486, %if.then.5484
  %2578 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2579 = bitcast %struct.rtx_def* %2578 to i32*
  %bf.load5493 = load i32, i32* %2579, align 8
  %bf.clear5494 = and i32 %bf.load5493, 65535
  %cmp5495 = icmp eq i32 %bf.clear5494, 61
  br i1 %cmp5495, label %land.lhs.true.5497, label %if.end.5505

land.lhs.true.5497:                               ; preds = %lor.lhs.false.5492
  %2580 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld5498 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2580, i32 0, i32 1
  %arrayidx5499 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5498, i32 0, i64 0
  %rtuint5500 = bitcast %union.rtunion_def* %arrayidx5499 to i32*
  %2581 = load i32, i32* %rtuint5500, align 4
  %cmp5501 = icmp ult i32 %2581, 53
  br i1 %cmp5501, label %if.then.5503, label %if.end.5505

if.then.5503:                                     ; preds = %land.lhs.true.5497, %land.lhs.true.5486
  %2582 = load i32, i32* %mode, align 4
  %call5504 = call %struct.rtx_def* @gen_reg_rtx(i32 %2582)
  store %struct.rtx_def* %call5504, %struct.rtx_def** %temp, align 8
  br label %if.end.5505

if.end.5505:                                      ; preds = %if.then.5503, %land.lhs.true.5497, %lor.lhs.false.5492
  %2583 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %2584 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5506 = call %struct.rtx_def* @store_expr(%union.tree_node* %2583, %struct.rtx_def* %2584, i32 0)
  br label %if.end.5514

if.else.5507:                                     ; preds = %if.then.5481
  %2585 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %2586 = load i32, i32* %ignore, align 4
  %tobool5508 = icmp ne i32 %2586, 0
  br i1 %tobool5508, label %cond.true.5509, label %cond.false.5510

cond.true.5509:                                   ; preds = %if.else.5507
  %2587 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.5511

cond.false.5510:                                  ; preds = %if.else.5507
  br label %cond.end.5511

cond.end.5511:                                    ; preds = %cond.false.5510, %cond.true.5509
  %cond5512 = phi %struct.rtx_def* [ %2587, %cond.true.5509 ], [ null, %cond.false.5510 ]
  %call5513 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2585, %struct.rtx_def* %cond5512, i32 0, i32 0)
  br label %if.end.5514

if.end.5514:                                      ; preds = %cond.end.5511, %if.end.5505
  %2588 = load %union.tree_node*, %union.tree_node** %singleton, align 8
  %2589 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5515 = bitcast %union.tree_node* %2589 to %struct.tree_exp*
  %operands5516 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5515, i32 0, i32 2
  %arrayidx5517 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5516, i32 0, i64 1
  %2590 = load %union.tree_node*, %union.tree_node** %arrayidx5517, align 8
  %cmp5518 = icmp eq %union.tree_node* %2588, %2590
  br i1 %cmp5518, label %if.then.5520, label %if.else.5524

if.then.5520:                                     ; preds = %if.end.5514
  %2591 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5521 = bitcast %union.tree_node* %2591 to %struct.tree_exp*
  %operands5522 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5521, i32 0, i32 2
  %arrayidx5523 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5522, i32 0, i64 0
  %2592 = load %union.tree_node*, %union.tree_node** %arrayidx5523, align 8
  %2593 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @jumpif(%union.tree_node* %2592, %struct.rtx_def* %2593)
  br label %if.end.5528

if.else.5524:                                     ; preds = %if.end.5514
  %2594 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5525 = bitcast %union.tree_node* %2594 to %struct.tree_exp*
  %operands5526 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5525, i32 0, i32 2
  %arrayidx5527 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5526, i32 0, i64 0
  %2595 = load %union.tree_node*, %union.tree_node** %arrayidx5527, align 8
  %2596 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @jumpifnot(%union.tree_node* %2595, %struct.rtx_def* %2596)
  br label %if.end.5528

if.end.5528:                                      ; preds = %if.else.5524, %if.then.5520
  call void @start_cleanup_deferral()
  %2597 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %tobool5529 = icmp ne %union.tree_node* %2597, null
  br i1 %tobool5529, label %land.lhs.true.5530, label %if.else.5543

land.lhs.true.5530:                               ; preds = %if.end.5528
  %2598 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp5531 = icmp eq %struct.rtx_def* %2598, null
  br i1 %cmp5531, label %if.then.5533, label %if.else.5543

if.then.5533:                                     ; preds = %land.lhs.true.5530
  %2599 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %exp5534 = bitcast %union.tree_node* %2599 to %struct.tree_exp*
  %operands5535 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5534, i32 0, i32 2
  %arrayidx5536 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5535, i32 0, i64 1
  %2600 = load %union.tree_node*, %union.tree_node** %arrayidx5536, align 8
  %2601 = load i32, i32* %ignore, align 4
  %tobool5537 = icmp ne i32 %2601, 0
  br i1 %tobool5537, label %cond.true.5538, label %cond.false.5539

cond.true.5538:                                   ; preds = %if.then.5533
  %2602 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.5540

cond.false.5539:                                  ; preds = %if.then.5533
  br label %cond.end.5540

cond.end.5540:                                    ; preds = %cond.false.5539, %cond.true.5538
  %cond5541 = phi %struct.rtx_def* [ %2602, %cond.true.5538 ], [ null, %cond.false.5539 ]
  %call5542 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2600, %struct.rtx_def* %cond5541, i32 0, i32 0)
  br label %if.end.5565

if.else.5543:                                     ; preds = %land.lhs.true.5530, %if.end.5528
  %2603 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %tobool5544 = icmp ne %union.tree_node* %2603, null
  br i1 %tobool5544, label %if.then.5545, label %if.else.5556

if.then.5545:                                     ; preds = %if.else.5543
  %2604 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %common5546 = bitcast %union.tree_node* %2604 to %struct.tree_common*
  %code5547 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5546, i32 0, i32 2
  %bf.load5548 = load i32, i32* %code5547, align 8
  %bf.clear5549 = and i32 %bf.load5548, 255
  %2605 = load %union.tree_node*, %union.tree_node** %type, align 8
  %2606 = load %union.tree_node*, %union.tree_node** %type, align 8
  %2607 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5550 = call %union.tree_node* @make_tree(%union.tree_node* %2606, %struct.rtx_def* %2607)
  %2608 = load %union.tree_node*, %union.tree_node** %binary_op, align 8
  %exp5551 = bitcast %union.tree_node* %2608 to %struct.tree_exp*
  %operands5552 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5551, i32 0, i32 2
  %arrayidx5553 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5552, i32 0, i64 1
  %2609 = load %union.tree_node*, %union.tree_node** %arrayidx5553, align 8
  %call5554 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 %bf.clear5549, %union.tree_node* %2605, %union.tree_node* %call5550, %union.tree_node* %2609)
  %2610 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5555 = call %struct.rtx_def* @store_expr(%union.tree_node* %call5554, %struct.rtx_def* %2610, i32 0)
  br label %if.end.5564

if.else.5556:                                     ; preds = %if.else.5543
  %2611 = load %union.tree_node*, %union.tree_node** %unary_op, align 8
  %common5557 = bitcast %union.tree_node* %2611 to %struct.tree_common*
  %code5558 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5557, i32 0, i32 2
  %bf.load5559 = load i32, i32* %code5558, align 8
  %bf.clear5560 = and i32 %bf.load5559, 255
  %2612 = load %union.tree_node*, %union.tree_node** %type, align 8
  %2613 = load %union.tree_node*, %union.tree_node** %type, align 8
  %2614 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5561 = call %union.tree_node* @make_tree(%union.tree_node* %2613, %struct.rtx_def* %2614)
  %call5562 = call %union.tree_node* @build1(i32 %bf.clear5560, %union.tree_node* %2612, %union.tree_node* %call5561)
  %2615 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5563 = call %struct.rtx_def* @store_expr(%union.tree_node* %call5562, %struct.rtx_def* %2615, i32 0)
  br label %if.end.5564

if.end.5564:                                      ; preds = %if.else.5556, %if.then.5545
  br label %if.end.5565

if.end.5565:                                      ; preds = %if.end.5564, %cond.end.5540
  %2616 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %2616, %struct.rtx_def** %op1, align 8
  br label %if.end.5803

if.else.5566:                                     ; preds = %land.lhs.true.5471, %if.end.5466
  %2617 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool5567 = icmp ne %struct.rtx_def* %2617, null
  br i1 %tobool5567, label %land.lhs.true.5568, label %if.else.5653

land.lhs.true.5568:                               ; preds = %if.else.5566
  %2618 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5569 = bitcast %union.tree_node* %2618 to %struct.tree_exp*
  %operands5570 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5569, i32 0, i32 2
  %arrayidx5571 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5570, i32 0, i64 0
  %2619 = load %union.tree_node*, %union.tree_node** %arrayidx5571, align 8
  %common5572 = bitcast %union.tree_node* %2619 to %struct.tree_common*
  %code5573 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5572, i32 0, i32 2
  %bf.load5574 = load i32, i32* %code5573, align 8
  %bf.clear5575 = and i32 %bf.load5574, 255
  %idxprom5576 = sext i32 %bf.clear5575 to i64
  %arrayidx5577 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5576
  %2620 = load i8, i8* %arrayidx5577, align 1
  %conv5578 = sext i8 %2620 to i32
  %cmp5579 = icmp eq i32 %conv5578, 60
  br i1 %cmp5579, label %land.lhs.true.5581, label %if.else.5653

land.lhs.true.5581:                               ; preds = %land.lhs.true.5568
  %2621 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5582 = bitcast %union.tree_node* %2621 to %struct.tree_exp*
  %operands5583 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5582, i32 0, i32 2
  %arrayidx5584 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5583, i32 0, i64 0
  %2622 = load %union.tree_node*, %union.tree_node** %arrayidx5584, align 8
  %exp5585 = bitcast %union.tree_node* %2622 to %struct.tree_exp*
  %operands5586 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5585, i32 0, i32 2
  %arrayidx5587 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5586, i32 0, i64 1
  %2623 = load %union.tree_node*, %union.tree_node** %arrayidx5587, align 8
  %call5588 = call i32 @integer_zerop(%union.tree_node* %2623)
  %tobool5589 = icmp ne i32 %call5588, 0
  br i1 %tobool5589, label %land.lhs.true.5590, label %if.else.5653

land.lhs.true.5590:                               ; preds = %land.lhs.true.5581
  %2624 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5591 = bitcast %union.tree_node* %2624 to %struct.tree_exp*
  %operands5592 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5591, i32 0, i32 2
  %arrayidx5593 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5592, i32 0, i64 0
  %2625 = load %union.tree_node*, %union.tree_node** %arrayidx5593, align 8
  %exp5594 = bitcast %union.tree_node* %2625 to %struct.tree_exp*
  %operands5595 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5594, i32 0, i32 2
  %arrayidx5596 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5595, i32 0, i64 0
  %2626 = load %union.tree_node*, %union.tree_node** %arrayidx5596, align 8
  %2627 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5597 = bitcast %union.tree_node* %2627 to %struct.tree_exp*
  %operands5598 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5597, i32 0, i32 2
  %arrayidx5599 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5598, i32 0, i64 1
  %2628 = load %union.tree_node*, %union.tree_node** %arrayidx5599, align 8
  %call5600 = call i32 @operand_equal_p(%union.tree_node* %2626, %union.tree_node* %2628, i32 0)
  %tobool5601 = icmp ne i32 %call5600, 0
  br i1 %tobool5601, label %land.lhs.true.5602, label %if.else.5653

land.lhs.true.5602:                               ; preds = %land.lhs.true.5590
  %2629 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5603 = bitcast %union.tree_node* %2629 to %struct.tree_exp*
  %operands5604 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5603, i32 0, i32 2
  %arrayidx5605 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5604, i32 0, i64 0
  %2630 = load %union.tree_node*, %union.tree_node** %arrayidx5605, align 8
  %common5606 = bitcast %union.tree_node* %2630 to %struct.tree_common*
  %side_effects_flag5607 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5606, i32 0, i32 2
  %bf.load5608 = load i32, i32* %side_effects_flag5607, align 8
  %bf.lshr5609 = lshr i32 %bf.load5608, 8
  %bf.clear5610 = and i32 %bf.lshr5609, 1
  %tobool5611 = icmp ne i32 %bf.clear5610, 0
  br i1 %tobool5611, label %lor.lhs.false.5612, label %land.lhs.true.5622

lor.lhs.false.5612:                               ; preds = %land.lhs.true.5602
  %2631 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5613 = bitcast %union.tree_node* %2631 to %struct.tree_exp*
  %operands5614 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5613, i32 0, i32 2
  %arrayidx5615 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5614, i32 0, i64 1
  %2632 = load %union.tree_node*, %union.tree_node** %arrayidx5615, align 8
  %common5616 = bitcast %union.tree_node* %2632 to %struct.tree_common*
  %code5617 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5616, i32 0, i32 2
  %bf.load5618 = load i32, i32* %code5617, align 8
  %bf.clear5619 = and i32 %bf.load5618, 255
  %cmp5620 = icmp eq i32 %bf.clear5619, 118
  br i1 %cmp5620, label %land.lhs.true.5622, label %if.else.5653

land.lhs.true.5622:                               ; preds = %lor.lhs.false.5612, %land.lhs.true.5602
  %2633 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2634 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5623 = bitcast %union.tree_node* %2634 to %struct.tree_exp*
  %operands5624 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5623, i32 0, i32 2
  %arrayidx5625 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5624, i32 0, i64 2
  %2635 = load %union.tree_node*, %union.tree_node** %arrayidx5625, align 8
  %call5626 = call i32 @safe_from_p(%struct.rtx_def* %2633, %union.tree_node* %2635, i32 1)
  %tobool5627 = icmp ne i32 %call5626, 0
  br i1 %tobool5627, label %if.then.5628, label %if.else.5653

if.then.5628:                                     ; preds = %land.lhs.true.5622
  %2636 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2637 = bitcast %struct.rtx_def* %2636 to i32*
  %bf.load5629 = load i32, i32* %2637, align 8
  %bf.clear5630 = and i32 %bf.load5629, 65535
  %cmp5631 = icmp eq i32 %bf.clear5630, 61
  br i1 %cmp5631, label %land.lhs.true.5633, label %if.end.5641

land.lhs.true.5633:                               ; preds = %if.then.5628
  %2638 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld5634 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2638, i32 0, i32 1
  %arrayidx5635 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5634, i32 0, i64 0
  %rtuint5636 = bitcast %union.rtunion_def* %arrayidx5635 to i32*
  %2639 = load i32, i32* %rtuint5636, align 4
  %cmp5637 = icmp ult i32 %2639, 53
  br i1 %cmp5637, label %if.then.5639, label %if.end.5641

if.then.5639:                                     ; preds = %land.lhs.true.5633
  %2640 = load i32, i32* %mode, align 4
  %call5640 = call %struct.rtx_def* @gen_reg_rtx(i32 %2640)
  store %struct.rtx_def* %call5640, %struct.rtx_def** %temp, align 8
  br label %if.end.5641

if.end.5641:                                      ; preds = %if.then.5639, %land.lhs.true.5633, %if.then.5628
  %2641 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5642 = bitcast %union.tree_node* %2641 to %struct.tree_exp*
  %operands5643 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5642, i32 0, i32 2
  %arrayidx5644 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5643, i32 0, i64 1
  %2642 = load %union.tree_node*, %union.tree_node** %arrayidx5644, align 8
  %2643 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5645 = call %struct.rtx_def* @store_expr(%union.tree_node* %2642, %struct.rtx_def* %2643, i32 0)
  %2644 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5646 = bitcast %union.tree_node* %2644 to %struct.tree_exp*
  %operands5647 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5646, i32 0, i32 2
  %arrayidx5648 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5647, i32 0, i64 0
  %2645 = load %union.tree_node*, %union.tree_node** %arrayidx5648, align 8
  %2646 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @jumpif(%union.tree_node* %2645, %struct.rtx_def* %2646)
  call void @start_cleanup_deferral()
  %2647 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5649 = bitcast %union.tree_node* %2647 to %struct.tree_exp*
  %operands5650 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5649, i32 0, i32 2
  %arrayidx5651 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5650, i32 0, i64 2
  %2648 = load %union.tree_node*, %union.tree_node** %arrayidx5651, align 8
  %2649 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5652 = call %struct.rtx_def* @store_expr(%union.tree_node* %2648, %struct.rtx_def* %2649, i32 0)
  %2650 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %2650, %struct.rtx_def** %op1, align 8
  br label %if.end.5802

if.else.5653:                                     ; preds = %land.lhs.true.5622, %lor.lhs.false.5612, %land.lhs.true.5590, %land.lhs.true.5581, %land.lhs.true.5568, %if.else.5566
  %2651 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool5654 = icmp ne %struct.rtx_def* %2651, null
  br i1 %tobool5654, label %land.lhs.true.5655, label %if.else.5740

land.lhs.true.5655:                               ; preds = %if.else.5653
  %2652 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5656 = bitcast %union.tree_node* %2652 to %struct.tree_exp*
  %operands5657 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5656, i32 0, i32 2
  %arrayidx5658 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5657, i32 0, i64 0
  %2653 = load %union.tree_node*, %union.tree_node** %arrayidx5658, align 8
  %common5659 = bitcast %union.tree_node* %2653 to %struct.tree_common*
  %code5660 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5659, i32 0, i32 2
  %bf.load5661 = load i32, i32* %code5660, align 8
  %bf.clear5662 = and i32 %bf.load5661, 255
  %idxprom5663 = sext i32 %bf.clear5662 to i64
  %arrayidx5664 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom5663
  %2654 = load i8, i8* %arrayidx5664, align 1
  %conv5665 = sext i8 %2654 to i32
  %cmp5666 = icmp eq i32 %conv5665, 60
  br i1 %cmp5666, label %land.lhs.true.5668, label %if.else.5740

land.lhs.true.5668:                               ; preds = %land.lhs.true.5655
  %2655 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5669 = bitcast %union.tree_node* %2655 to %struct.tree_exp*
  %operands5670 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5669, i32 0, i32 2
  %arrayidx5671 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5670, i32 0, i64 0
  %2656 = load %union.tree_node*, %union.tree_node** %arrayidx5671, align 8
  %exp5672 = bitcast %union.tree_node* %2656 to %struct.tree_exp*
  %operands5673 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5672, i32 0, i32 2
  %arrayidx5674 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5673, i32 0, i64 1
  %2657 = load %union.tree_node*, %union.tree_node** %arrayidx5674, align 8
  %call5675 = call i32 @integer_zerop(%union.tree_node* %2657)
  %tobool5676 = icmp ne i32 %call5675, 0
  br i1 %tobool5676, label %land.lhs.true.5677, label %if.else.5740

land.lhs.true.5677:                               ; preds = %land.lhs.true.5668
  %2658 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5678 = bitcast %union.tree_node* %2658 to %struct.tree_exp*
  %operands5679 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5678, i32 0, i32 2
  %arrayidx5680 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5679, i32 0, i64 0
  %2659 = load %union.tree_node*, %union.tree_node** %arrayidx5680, align 8
  %exp5681 = bitcast %union.tree_node* %2659 to %struct.tree_exp*
  %operands5682 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5681, i32 0, i32 2
  %arrayidx5683 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5682, i32 0, i64 0
  %2660 = load %union.tree_node*, %union.tree_node** %arrayidx5683, align 8
  %2661 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5684 = bitcast %union.tree_node* %2661 to %struct.tree_exp*
  %operands5685 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5684, i32 0, i32 2
  %arrayidx5686 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5685, i32 0, i64 2
  %2662 = load %union.tree_node*, %union.tree_node** %arrayidx5686, align 8
  %call5687 = call i32 @operand_equal_p(%union.tree_node* %2660, %union.tree_node* %2662, i32 0)
  %tobool5688 = icmp ne i32 %call5687, 0
  br i1 %tobool5688, label %land.lhs.true.5689, label %if.else.5740

land.lhs.true.5689:                               ; preds = %land.lhs.true.5677
  %2663 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5690 = bitcast %union.tree_node* %2663 to %struct.tree_exp*
  %operands5691 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5690, i32 0, i32 2
  %arrayidx5692 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5691, i32 0, i64 0
  %2664 = load %union.tree_node*, %union.tree_node** %arrayidx5692, align 8
  %common5693 = bitcast %union.tree_node* %2664 to %struct.tree_common*
  %side_effects_flag5694 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5693, i32 0, i32 2
  %bf.load5695 = load i32, i32* %side_effects_flag5694, align 8
  %bf.lshr5696 = lshr i32 %bf.load5695, 8
  %bf.clear5697 = and i32 %bf.lshr5696, 1
  %tobool5698 = icmp ne i32 %bf.clear5697, 0
  br i1 %tobool5698, label %lor.lhs.false.5699, label %land.lhs.true.5709

lor.lhs.false.5699:                               ; preds = %land.lhs.true.5689
  %2665 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5700 = bitcast %union.tree_node* %2665 to %struct.tree_exp*
  %operands5701 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5700, i32 0, i32 2
  %arrayidx5702 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5701, i32 0, i64 2
  %2666 = load %union.tree_node*, %union.tree_node** %arrayidx5702, align 8
  %common5703 = bitcast %union.tree_node* %2666 to %struct.tree_common*
  %code5704 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5703, i32 0, i32 2
  %bf.load5705 = load i32, i32* %code5704, align 8
  %bf.clear5706 = and i32 %bf.load5705, 255
  %cmp5707 = icmp eq i32 %bf.clear5706, 118
  br i1 %cmp5707, label %land.lhs.true.5709, label %if.else.5740

land.lhs.true.5709:                               ; preds = %lor.lhs.false.5699, %land.lhs.true.5689
  %2667 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2668 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5710 = bitcast %union.tree_node* %2668 to %struct.tree_exp*
  %operands5711 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5710, i32 0, i32 2
  %arrayidx5712 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5711, i32 0, i64 1
  %2669 = load %union.tree_node*, %union.tree_node** %arrayidx5712, align 8
  %call5713 = call i32 @safe_from_p(%struct.rtx_def* %2667, %union.tree_node* %2669, i32 1)
  %tobool5714 = icmp ne i32 %call5713, 0
  br i1 %tobool5714, label %if.then.5715, label %if.else.5740

if.then.5715:                                     ; preds = %land.lhs.true.5709
  %2670 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2671 = bitcast %struct.rtx_def* %2670 to i32*
  %bf.load5716 = load i32, i32* %2671, align 8
  %bf.clear5717 = and i32 %bf.load5716, 65535
  %cmp5718 = icmp eq i32 %bf.clear5717, 61
  br i1 %cmp5718, label %land.lhs.true.5720, label %if.end.5728

land.lhs.true.5720:                               ; preds = %if.then.5715
  %2672 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld5721 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2672, i32 0, i32 1
  %arrayidx5722 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5721, i32 0, i64 0
  %rtuint5723 = bitcast %union.rtunion_def* %arrayidx5722 to i32*
  %2673 = load i32, i32* %rtuint5723, align 4
  %cmp5724 = icmp ult i32 %2673, 53
  br i1 %cmp5724, label %if.then.5726, label %if.end.5728

if.then.5726:                                     ; preds = %land.lhs.true.5720
  %2674 = load i32, i32* %mode, align 4
  %call5727 = call %struct.rtx_def* @gen_reg_rtx(i32 %2674)
  store %struct.rtx_def* %call5727, %struct.rtx_def** %temp, align 8
  br label %if.end.5728

if.end.5728:                                      ; preds = %if.then.5726, %land.lhs.true.5720, %if.then.5715
  %2675 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5729 = bitcast %union.tree_node* %2675 to %struct.tree_exp*
  %operands5730 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5729, i32 0, i32 2
  %arrayidx5731 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5730, i32 0, i64 2
  %2676 = load %union.tree_node*, %union.tree_node** %arrayidx5731, align 8
  %2677 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5732 = call %struct.rtx_def* @store_expr(%union.tree_node* %2676, %struct.rtx_def* %2677, i32 0)
  %2678 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5733 = bitcast %union.tree_node* %2678 to %struct.tree_exp*
  %operands5734 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5733, i32 0, i32 2
  %arrayidx5735 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5734, i32 0, i64 0
  %2679 = load %union.tree_node*, %union.tree_node** %arrayidx5735, align 8
  %2680 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @jumpifnot(%union.tree_node* %2679, %struct.rtx_def* %2680)
  call void @start_cleanup_deferral()
  %2681 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5736 = bitcast %union.tree_node* %2681 to %struct.tree_exp*
  %operands5737 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5736, i32 0, i32 2
  %arrayidx5738 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5737, i32 0, i64 1
  %2682 = load %union.tree_node*, %union.tree_node** %arrayidx5738, align 8
  %2683 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5739 = call %struct.rtx_def* @store_expr(%union.tree_node* %2682, %struct.rtx_def* %2683, i32 0)
  %2684 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %2684, %struct.rtx_def** %op1, align 8
  br label %if.end.5801

if.else.5740:                                     ; preds = %land.lhs.true.5709, %lor.lhs.false.5699, %land.lhs.true.5677, %land.lhs.true.5668, %land.lhs.true.5655, %if.else.5653
  %call5741 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call5741, %struct.rtx_def** %op1, align 8
  %2685 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5742 = bitcast %union.tree_node* %2685 to %struct.tree_exp*
  %operands5743 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5742, i32 0, i32 2
  %arrayidx5744 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5743, i32 0, i64 0
  %2686 = load %union.tree_node*, %union.tree_node** %arrayidx5744, align 8
  %2687 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @jumpifnot(%union.tree_node* %2686, %struct.rtx_def* %2687)
  call void @start_cleanup_deferral()
  %2688 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp5745 = icmp ne %struct.rtx_def* %2688, null
  br i1 %cmp5745, label %land.lhs.true.5747, label %if.else.5760

land.lhs.true.5747:                               ; preds = %if.else.5740
  %2689 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5748 = bitcast %union.tree_node* %2689 to %struct.tree_exp*
  %operands5749 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5748, i32 0, i32 2
  %arrayidx5750 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5749, i32 0, i64 1
  %2690 = load %union.tree_node*, %union.tree_node** %arrayidx5750, align 8
  %common5751 = bitcast %union.tree_node* %2690 to %struct.tree_common*
  %type5752 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5751, i32 0, i32 1
  %2691 = load %union.tree_node*, %union.tree_node** %type5752, align 8
  %2692 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp5753 = icmp ne %union.tree_node* %2691, %2692
  br i1 %cmp5753, label %if.then.5755, label %if.else.5760

if.then.5755:                                     ; preds = %land.lhs.true.5747
  %2693 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5756 = bitcast %union.tree_node* %2693 to %struct.tree_exp*
  %operands5757 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5756, i32 0, i32 2
  %arrayidx5758 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5757, i32 0, i64 1
  %2694 = load %union.tree_node*, %union.tree_node** %arrayidx5758, align 8
  %2695 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5759 = call %struct.rtx_def* @store_expr(%union.tree_node* %2694, %struct.rtx_def* %2695, i32 0)
  br label %if.end.5770

if.else.5760:                                     ; preds = %land.lhs.true.5747, %if.else.5740
  %2696 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5761 = bitcast %union.tree_node* %2696 to %struct.tree_exp*
  %operands5762 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5761, i32 0, i32 2
  %arrayidx5763 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5762, i32 0, i64 1
  %2697 = load %union.tree_node*, %union.tree_node** %arrayidx5763, align 8
  %2698 = load i32, i32* %ignore, align 4
  %tobool5764 = icmp ne i32 %2698, 0
  br i1 %tobool5764, label %cond.true.5765, label %cond.false.5766

cond.true.5765:                                   ; preds = %if.else.5760
  %2699 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.5767

cond.false.5766:                                  ; preds = %if.else.5760
  br label %cond.end.5767

cond.end.5767:                                    ; preds = %cond.false.5766, %cond.true.5765
  %cond5768 = phi %struct.rtx_def* [ %2699, %cond.true.5765 ], [ null, %cond.false.5766 ]
  %call5769 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2697, %struct.rtx_def* %cond5768, i32 0, i32 0)
  br label %if.end.5770

if.end.5770:                                      ; preds = %cond.end.5767, %if.then.5755
  call void @end_cleanup_deferral()
  call void @emit_queue()
  %2700 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call5771 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %2700)
  %call5772 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call5771)
  %call5773 = call %struct.rtx_def* @emit_barrier()
  %2701 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call5774 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %2701)
  call void @start_cleanup_deferral()
  %2702 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp5775 = icmp ne %struct.rtx_def* %2702, null
  br i1 %cmp5775, label %land.lhs.true.5777, label %if.else.5790

land.lhs.true.5777:                               ; preds = %if.end.5770
  %2703 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5778 = bitcast %union.tree_node* %2703 to %struct.tree_exp*
  %operands5779 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5778, i32 0, i32 2
  %arrayidx5780 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5779, i32 0, i64 2
  %2704 = load %union.tree_node*, %union.tree_node** %arrayidx5780, align 8
  %common5781 = bitcast %union.tree_node* %2704 to %struct.tree_common*
  %type5782 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5781, i32 0, i32 1
  %2705 = load %union.tree_node*, %union.tree_node** %type5782, align 8
  %2706 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp5783 = icmp ne %union.tree_node* %2705, %2706
  br i1 %cmp5783, label %if.then.5785, label %if.else.5790

if.then.5785:                                     ; preds = %land.lhs.true.5777
  %2707 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5786 = bitcast %union.tree_node* %2707 to %struct.tree_exp*
  %operands5787 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5786, i32 0, i32 2
  %arrayidx5788 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5787, i32 0, i64 2
  %2708 = load %union.tree_node*, %union.tree_node** %arrayidx5788, align 8
  %2709 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call5789 = call %struct.rtx_def* @store_expr(%union.tree_node* %2708, %struct.rtx_def* %2709, i32 0)
  br label %if.end.5800

if.else.5790:                                     ; preds = %land.lhs.true.5777, %if.end.5770
  %2710 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5791 = bitcast %union.tree_node* %2710 to %struct.tree_exp*
  %operands5792 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5791, i32 0, i32 2
  %arrayidx5793 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5792, i32 0, i64 2
  %2711 = load %union.tree_node*, %union.tree_node** %arrayidx5793, align 8
  %2712 = load i32, i32* %ignore, align 4
  %tobool5794 = icmp ne i32 %2712, 0
  br i1 %tobool5794, label %cond.true.5795, label %cond.false.5796

cond.true.5795:                                   ; preds = %if.else.5790
  %2713 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.5797

cond.false.5796:                                  ; preds = %if.else.5790
  br label %cond.end.5797

cond.end.5797:                                    ; preds = %cond.false.5796, %cond.true.5795
  %cond5798 = phi %struct.rtx_def* [ %2713, %cond.true.5795 ], [ null, %cond.false.5796 ]
  %call5799 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2711, %struct.rtx_def* %cond5798, i32 0, i32 0)
  br label %if.end.5800

if.end.5800:                                      ; preds = %cond.end.5797, %if.then.5785
  br label %if.end.5801

if.end.5801:                                      ; preds = %if.end.5800, %if.end.5728
  br label %if.end.5802

if.end.5802:                                      ; preds = %if.end.5801, %if.end.5641
  br label %if.end.5803

if.end.5803:                                      ; preds = %if.end.5802, %if.end.5565
  call void @end_cleanup_deferral()
  call void @emit_queue()
  %2714 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call5804 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %2714)
  %2715 = load %struct.function*, %struct.function** @cfun, align 8
  %expr5805 = getelementptr inbounds %struct.function, %struct.function* %2715, i32 0, i32 2
  %2716 = load %struct.expr_status*, %struct.expr_status** %expr5805, align 8
  %x_inhibit_defer_pop5806 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %2716, i32 0, i32 1
  %2717 = load i32, i32* %x_inhibit_defer_pop5806, align 4
  %sub5807 = sub nsw i32 %2717, 1
  store i32 %sub5807, i32* %x_inhibit_defer_pop5806, align 4
  %2718 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2718, %struct.rtx_def** %retval
  br label %return

sw.bb.5808:                                       ; preds = %if.end.185
  %2719 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5809 = bitcast %union.tree_node* %2719 to %struct.tree_exp*
  %operands5810 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5809, i32 0, i32 2
  %arrayidx5811 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5810, i32 0, i64 0
  %2720 = load %union.tree_node*, %union.tree_node** %arrayidx5811, align 8
  store %union.tree_node* %2720, %union.tree_node** %slot, align 8
  store %union.tree_node* null, %union.tree_node** %cleanups, align 8
  %2721 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %common5813 = bitcast %union.tree_node* %2721 to %struct.tree_common*
  %code5814 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5813, i32 0, i32 2
  %bf.load5815 = load i32, i32* %code5814, align 8
  %bf.clear5816 = and i32 %bf.load5815, 255
  %cmp5817 = icmp ne i32 %bf.clear5816, 34
  br i1 %cmp5817, label %if.then.5819, label %if.end.5820

if.then.5819:                                     ; preds = %sw.bb.5808
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8399, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.5820:                                      ; preds = %sw.bb.5808
  %2722 = load i32, i32* %ignore, align 4
  %tobool5821 = icmp ne i32 %2722, 0
  br i1 %tobool5821, label %if.end.5823, label %if.then.5822

if.then.5822:                                     ; preds = %if.end.5820
  %2723 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  store %struct.rtx_def* %2723, %struct.rtx_def** %target.addr, align 8
  br label %if.end.5823

if.end.5823:                                      ; preds = %if.then.5822, %if.end.5820
  %2724 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %common5824 = bitcast %union.tree_node* %2724 to %struct.tree_common*
  %used_flag5825 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5824, i32 0, i32 2
  %bf.load5826 = load i32, i32* %used_flag5825, align 8
  %bf.clear5827 = and i32 %bf.load5826, -65537
  %bf.set5828 = or i32 %bf.clear5827, 65536
  store i32 %bf.set5828, i32* %used_flag5825, align 8
  %2725 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp5829 = icmp eq %struct.rtx_def* %2725, null
  br i1 %cmp5829, label %if.then.5831, label %if.else.5882

if.then.5831:                                     ; preds = %if.end.5823
  %2726 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5832 = bitcast %union.tree_node* %2726 to %struct.tree_decl*
  %rtl5833 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5832, i32 0, i32 17
  %2727 = load %struct.rtx_def*, %struct.rtx_def** %rtl5833, align 8
  %cmp5834 = icmp ne %struct.rtx_def* %2727, null
  br i1 %cmp5834, label %if.then.5836, label %if.else.5855

if.then.5836:                                     ; preds = %if.then.5831
  %2728 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5837 = bitcast %union.tree_node* %2728 to %struct.tree_decl*
  %rtl5838 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5837, i32 0, i32 17
  %2729 = load %struct.rtx_def*, %struct.rtx_def** %rtl5838, align 8
  %tobool5839 = icmp ne %struct.rtx_def* %2729, null
  br i1 %tobool5839, label %cond.true.5840, label %cond.false.5843

cond.true.5840:                                   ; preds = %if.then.5836
  %2730 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5841 = bitcast %union.tree_node* %2730 to %struct.tree_decl*
  %rtl5842 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5841, i32 0, i32 17
  %2731 = load %struct.rtx_def*, %struct.rtx_def** %rtl5842, align 8
  br label %cond.end.5846

cond.false.5843:                                  ; preds = %if.then.5836
  %2732 = load %union.tree_node*, %union.tree_node** %slot, align 8
  call void @make_decl_rtl(%union.tree_node* %2732, i8* null)
  %2733 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5844 = bitcast %union.tree_node* %2733 to %struct.tree_decl*
  %rtl5845 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5844, i32 0, i32 17
  %2734 = load %struct.rtx_def*, %struct.rtx_def** %rtl5845, align 8
  br label %cond.end.5846

cond.end.5846:                                    ; preds = %cond.false.5843, %cond.true.5840
  %cond5847 = phi %struct.rtx_def* [ %2731, %cond.true.5840 ], [ %2734, %cond.false.5843 ]
  store %struct.rtx_def* %cond5847, %struct.rtx_def** %target.addr, align 8
  %2735 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5848 = bitcast %union.tree_node* %2735 to %struct.tree_exp*
  %operands5849 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5848, i32 0, i32 2
  %arrayidx5850 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5849, i32 0, i64 1
  %2736 = load %union.tree_node*, %union.tree_node** %arrayidx5850, align 8
  %cmp5851 = icmp eq %union.tree_node* %2736, null
  br i1 %cmp5851, label %if.then.5853, label %if.end.5854

if.then.5853:                                     ; preds = %cond.end.5846
  %2737 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2737, %struct.rtx_def** %retval
  br label %return

if.end.5854:                                      ; preds = %cond.end.5846
  br label %if.end.5881

if.else.5855:                                     ; preds = %if.then.5831
  %2738 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call5856 = call %struct.rtx_def* @assign_temp(%union.tree_node* %2738, i32 2, i32 0, i32 1)
  store %struct.rtx_def* %call5856, %struct.rtx_def** %target.addr, align 8
  %2739 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %2739)
  %2740 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2741 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5857 = bitcast %union.tree_node* %2741 to %struct.tree_decl*
  %rtl5858 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5857, i32 0, i32 17
  store %struct.rtx_def* %2740, %struct.rtx_def** %rtl5858, align 8
  %2742 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %common5859 = bitcast %union.tree_node* %2742 to %struct.tree_common*
  %addressable_flag5860 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5859, i32 0, i32 2
  %bf.load5861 = load i32, i32* %addressable_flag5860, align 8
  %bf.lshr5862 = lshr i32 %bf.load5861, 10
  %bf.clear5863 = and i32 %bf.lshr5862, 1
  %tobool5864 = icmp ne i32 %bf.clear5863, 0
  br i1 %tobool5864, label %if.then.5865, label %if.end.5866

if.then.5865:                                     ; preds = %if.else.5855
  %2743 = load %union.tree_node*, %union.tree_node** %slot, align 8
  call void @put_var_into_stack(%union.tree_node* %2743)
  br label %if.end.5866

if.end.5866:                                      ; preds = %if.then.5865, %if.else.5855
  %2744 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5867 = bitcast %union.tree_node* %2744 to %struct.tree_exp*
  %operands5868 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5867, i32 0, i32 2
  %arrayidx5869 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5868, i32 0, i64 2
  %2745 = load %union.tree_node*, %union.tree_node** %arrayidx5869, align 8
  %cmp5870 = icmp eq %union.tree_node* %2745, null
  br i1 %cmp5870, label %if.then.5872, label %if.end.5877

if.then.5872:                                     ; preds = %if.end.5866
  %2746 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %call5873 = call %union.tree_node* @maybe_build_cleanup(%union.tree_node* %2746)
  %2747 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5874 = bitcast %union.tree_node* %2747 to %struct.tree_exp*
  %operands5875 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5874, i32 0, i32 2
  %arrayidx5876 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5875, i32 0, i64 2
  store %union.tree_node* %call5873, %union.tree_node** %arrayidx5876, align 8
  br label %if.end.5877

if.end.5877:                                      ; preds = %if.then.5872, %if.end.5866
  %2748 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5878 = bitcast %union.tree_node* %2748 to %struct.tree_exp*
  %operands5879 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5878, i32 0, i32 2
  %arrayidx5880 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5879, i32 0, i64 2
  %2749 = load %union.tree_node*, %union.tree_node** %arrayidx5880, align 8
  store %union.tree_node* %2749, %union.tree_node** %cleanups, align 8
  br label %if.end.5881

if.end.5881:                                      ; preds = %if.end.5877, %if.end.5854
  br label %if.end.5918

if.else.5882:                                     ; preds = %if.end.5823
  %2750 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5883 = bitcast %union.tree_node* %2750 to %struct.tree_decl*
  %rtl5884 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5883, i32 0, i32 17
  %2751 = load %struct.rtx_def*, %struct.rtx_def** %rtl5884, align 8
  %cmp5885 = icmp ne %struct.rtx_def* %2751, null
  br i1 %cmp5885, label %if.then.5887, label %if.else.5906

if.then.5887:                                     ; preds = %if.else.5882
  %2752 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5888 = bitcast %union.tree_node* %2752 to %struct.tree_decl*
  %rtl5889 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5888, i32 0, i32 17
  %2753 = load %struct.rtx_def*, %struct.rtx_def** %rtl5889, align 8
  %tobool5890 = icmp ne %struct.rtx_def* %2753, null
  br i1 %tobool5890, label %cond.true.5891, label %cond.false.5894

cond.true.5891:                                   ; preds = %if.then.5887
  %2754 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5892 = bitcast %union.tree_node* %2754 to %struct.tree_decl*
  %rtl5893 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5892, i32 0, i32 17
  %2755 = load %struct.rtx_def*, %struct.rtx_def** %rtl5893, align 8
  br label %cond.end.5897

cond.false.5894:                                  ; preds = %if.then.5887
  %2756 = load %union.tree_node*, %union.tree_node** %slot, align 8
  call void @make_decl_rtl(%union.tree_node* %2756, i8* null)
  %2757 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5895 = bitcast %union.tree_node* %2757 to %struct.tree_decl*
  %rtl5896 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5895, i32 0, i32 17
  %2758 = load %struct.rtx_def*, %struct.rtx_def** %rtl5896, align 8
  br label %cond.end.5897

cond.end.5897:                                    ; preds = %cond.false.5894, %cond.true.5891
  %cond5898 = phi %struct.rtx_def* [ %2755, %cond.true.5891 ], [ %2758, %cond.false.5894 ]
  store %struct.rtx_def* %cond5898, %struct.rtx_def** %target.addr, align 8
  %2759 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5899 = bitcast %union.tree_node* %2759 to %struct.tree_exp*
  %operands5900 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5899, i32 0, i32 2
  %arrayidx5901 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5900, i32 0, i64 1
  %2760 = load %union.tree_node*, %union.tree_node** %arrayidx5901, align 8
  %cmp5902 = icmp eq %union.tree_node* %2760, null
  br i1 %cmp5902, label %if.then.5904, label %if.end.5905

if.then.5904:                                     ; preds = %cond.end.5897
  %2761 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2761, %struct.rtx_def** %retval
  br label %return

if.end.5905:                                      ; preds = %cond.end.5897
  br label %if.end.5917

if.else.5906:                                     ; preds = %if.else.5882
  %2762 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2763 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %decl5907 = bitcast %union.tree_node* %2763 to %struct.tree_decl*
  %rtl5908 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5907, i32 0, i32 17
  store %struct.rtx_def* %2762, %struct.rtx_def** %rtl5908, align 8
  %2764 = load %union.tree_node*, %union.tree_node** %slot, align 8
  %common5909 = bitcast %union.tree_node* %2764 to %struct.tree_common*
  %addressable_flag5910 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5909, i32 0, i32 2
  %bf.load5911 = load i32, i32* %addressable_flag5910, align 8
  %bf.lshr5912 = lshr i32 %bf.load5911, 10
  %bf.clear5913 = and i32 %bf.lshr5912, 1
  %tobool5914 = icmp ne i32 %bf.clear5913, 0
  br i1 %tobool5914, label %if.then.5915, label %if.end.5916

if.then.5915:                                     ; preds = %if.else.5906
  %2765 = load %union.tree_node*, %union.tree_node** %slot, align 8
  call void @put_var_into_stack(%union.tree_node* %2765)
  br label %if.end.5916

if.end.5916:                                      ; preds = %if.then.5915, %if.else.5906
  br label %if.end.5917

if.end.5917:                                      ; preds = %if.end.5916, %if.end.5905
  br label %if.end.5918

if.end.5918:                                      ; preds = %if.end.5917, %if.end.5881
  %2766 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5919 = bitcast %union.tree_node* %2766 to %struct.tree_exp*
  %operands5920 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5919, i32 0, i32 2
  %arrayidx5921 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5920, i32 0, i64 1
  %2767 = load %union.tree_node*, %union.tree_node** %arrayidx5921, align 8
  %2768 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5922 = bitcast %union.tree_node* %2768 to %struct.tree_exp*
  %operands5923 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5922, i32 0, i32 2
  %arrayidx5924 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5923, i32 0, i64 3
  store %union.tree_node* %2767, %union.tree_node** %arrayidx5924, align 8
  store %union.tree_node* %2767, %union.tree_node** %exp15812, align 8
  %2769 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5925 = bitcast %union.tree_node* %2769 to %struct.tree_exp*
  %operands5926 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5925, i32 0, i32 2
  %arrayidx5927 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5926, i32 0, i64 1
  store %union.tree_node* null, %union.tree_node** %arrayidx5927, align 8
  %2770 = load %union.tree_node*, %union.tree_node** %exp15812, align 8
  %2771 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call5928 = call %struct.rtx_def* @store_expr(%union.tree_node* %2770, %struct.rtx_def* %2771, i32 0)
  %2772 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  %call5929 = call i32 @expand_decl_cleanup(%union.tree_node* null, %union.tree_node* %2772)
  %2773 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2773, %struct.rtx_def** %retval
  br label %return

sw.bb.5930:                                       ; preds = %if.end.185
  %2774 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5931 = bitcast %union.tree_node* %2774 to %struct.tree_exp*
  %operands5932 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5931, i32 0, i32 2
  %arrayidx5933 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5932, i32 0, i64 0
  %2775 = load %union.tree_node*, %union.tree_node** %arrayidx5933, align 8
  store %union.tree_node* %2775, %union.tree_node** %lhs, align 8
  %2776 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5934 = bitcast %union.tree_node* %2776 to %struct.tree_exp*
  %operands5935 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5934, i32 0, i32 2
  %arrayidx5936 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5935, i32 0, i64 1
  %2777 = load %union.tree_node*, %union.tree_node** %arrayidx5936, align 8
  store %union.tree_node* %2777, %union.tree_node** %rhs, align 8
  %2778 = load %union.tree_node*, %union.tree_node** %lhs, align 8
  %2779 = load %union.tree_node*, %union.tree_node** %rhs, align 8
  %2780 = load i32, i32* %ignore, align 4
  %tobool5937 = icmp ne i32 %2780, 0
  %lnot5938 = xor i1 %tobool5937, true
  %lnot.ext = zext i1 %lnot5938 to i32
  %2781 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %cmp5939 = icmp ne %struct.rtx_def* %2781, null
  %conv5940 = zext i1 %cmp5939 to i32
  %call5941 = call %struct.rtx_def* @expand_assignment(%union.tree_node* %2778, %union.tree_node* %2779, i32 %lnot.ext, i32 %conv5940)
  store %struct.rtx_def* %call5941, %struct.rtx_def** %temp, align 8
  %2782 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2782, %struct.rtx_def** %retval
  br label %return

sw.bb.5942:                                       ; preds = %if.end.185
  %2783 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5944 = bitcast %union.tree_node* %2783 to %struct.tree_exp*
  %operands5945 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5944, i32 0, i32 2
  %arrayidx5946 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5945, i32 0, i64 0
  %2784 = load %union.tree_node*, %union.tree_node** %arrayidx5946, align 8
  store %union.tree_node* %2784, %union.tree_node** %lhs5943, align 8
  %2785 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5948 = bitcast %union.tree_node* %2785 to %struct.tree_exp*
  %operands5949 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5948, i32 0, i32 2
  %arrayidx5950 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5949, i32 0, i64 1
  %2786 = load %union.tree_node*, %union.tree_node** %arrayidx5950, align 8
  store %union.tree_node* %2786, %union.tree_node** %rhs5947, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %temp, align 8
  %2787 = load i32, i32* %ignore, align 4
  %tobool5951 = icmp ne i32 %2787, 0
  br i1 %tobool5951, label %land.lhs.true.5952, label %if.end.6048

land.lhs.true.5952:                               ; preds = %sw.bb.5942
  %2788 = load %union.tree_node*, %union.tree_node** %lhs5943, align 8
  %common5953 = bitcast %union.tree_node* %2788 to %struct.tree_common*
  %code5954 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5953, i32 0, i32 2
  %bf.load5955 = load i32, i32* %code5954, align 8
  %bf.clear5956 = and i32 %bf.load5955, 255
  %cmp5957 = icmp eq i32 %bf.clear5956, 39
  br i1 %cmp5957, label %land.lhs.true.5959, label %if.end.6048

land.lhs.true.5959:                               ; preds = %land.lhs.true.5952
  %2789 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %common5960 = bitcast %union.tree_node* %2789 to %struct.tree_common*
  %code5961 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5960, i32 0, i32 2
  %bf.load5962 = load i32, i32* %code5961, align 8
  %bf.clear5963 = and i32 %bf.load5962, 255
  %cmp5964 = icmp eq i32 %bf.clear5963, 86
  br i1 %cmp5964, label %land.lhs.true.5973, label %lor.lhs.false.5966

lor.lhs.false.5966:                               ; preds = %land.lhs.true.5959
  %2790 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %common5967 = bitcast %union.tree_node* %2790 to %struct.tree_common*
  %code5968 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5967, i32 0, i32 2
  %bf.load5969 = load i32, i32* %code5968, align 8
  %bf.clear5970 = and i32 %bf.load5969, 255
  %cmp5971 = icmp eq i32 %bf.clear5970, 88
  br i1 %cmp5971, label %land.lhs.true.5973, label %if.end.6048

land.lhs.true.5973:                               ; preds = %lor.lhs.false.5966, %land.lhs.true.5959
  %2791 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %exp5974 = bitcast %union.tree_node* %2791 to %struct.tree_exp*
  %operands5975 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5974, i32 0, i32 2
  %arrayidx5976 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5975, i32 0, i64 0
  %2792 = load %union.tree_node*, %union.tree_node** %arrayidx5976, align 8
  %2793 = load %union.tree_node*, %union.tree_node** %lhs5943, align 8
  %cmp5977 = icmp eq %union.tree_node* %2792, %2793
  br i1 %cmp5977, label %land.lhs.true.5979, label %if.end.6048

land.lhs.true.5979:                               ; preds = %land.lhs.true.5973
  %2794 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %exp5980 = bitcast %union.tree_node* %2794 to %struct.tree_exp*
  %operands5981 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5980, i32 0, i32 2
  %arrayidx5982 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5981, i32 0, i64 1
  %2795 = load %union.tree_node*, %union.tree_node** %arrayidx5982, align 8
  %common5983 = bitcast %union.tree_node* %2795 to %struct.tree_common*
  %code5984 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5983, i32 0, i32 2
  %bf.load5985 = load i32, i32* %code5984, align 8
  %bf.clear5986 = and i32 %bf.load5985, 255
  %cmp5987 = icmp eq i32 %bf.clear5986, 39
  br i1 %cmp5987, label %land.lhs.true.5989, label %if.end.6048

land.lhs.true.5989:                               ; preds = %land.lhs.true.5979
  %2796 = load %union.tree_node*, %union.tree_node** %lhs5943, align 8
  %exp5990 = bitcast %union.tree_node* %2796 to %struct.tree_exp*
  %operands5991 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5990, i32 0, i32 2
  %arrayidx5992 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5991, i32 0, i64 1
  %2797 = load %union.tree_node*, %union.tree_node** %arrayidx5992, align 8
  %decl5993 = bitcast %union.tree_node* %2797 to %struct.tree_decl*
  %size5994 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5993, i32 0, i32 4
  %2798 = load %union.tree_node*, %union.tree_node** %size5994, align 8
  %call5995 = call i32 @integer_onep(%union.tree_node* %2798)
  %tobool5996 = icmp ne i32 %call5995, 0
  br i1 %tobool5996, label %land.lhs.true.5997, label %if.end.6048

land.lhs.true.5997:                               ; preds = %land.lhs.true.5989
  %2799 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %exp5998 = bitcast %union.tree_node* %2799 to %struct.tree_exp*
  %operands5999 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5998, i32 0, i32 2
  %arrayidx6000 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5999, i32 0, i64 1
  %2800 = load %union.tree_node*, %union.tree_node** %arrayidx6000, align 8
  %exp6001 = bitcast %union.tree_node* %2800 to %struct.tree_exp*
  %operands6002 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6001, i32 0, i32 2
  %arrayidx6003 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6002, i32 0, i64 1
  %2801 = load %union.tree_node*, %union.tree_node** %arrayidx6003, align 8
  %decl6004 = bitcast %union.tree_node* %2801 to %struct.tree_decl*
  %size6005 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6004, i32 0, i32 4
  %2802 = load %union.tree_node*, %union.tree_node** %size6005, align 8
  %call6006 = call i32 @integer_onep(%union.tree_node* %2802)
  %tobool6007 = icmp ne i32 %call6006, 0
  br i1 %tobool6007, label %if.then.6008, label %if.end.6048

if.then.6008:                                     ; preds = %land.lhs.true.5997
  %call6009 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call6009, %struct.rtx_def** %label, align 8
  %2803 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %exp6010 = bitcast %union.tree_node* %2803 to %struct.tree_exp*
  %operands6011 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6010, i32 0, i32 2
  %arrayidx6012 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6011, i32 0, i64 1
  %2804 = load %union.tree_node*, %union.tree_node** %arrayidx6012, align 8
  %2805 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %common6013 = bitcast %union.tree_node* %2805 to %struct.tree_common*
  %code6014 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6013, i32 0, i32 2
  %bf.load6015 = load i32, i32* %code6014, align 8
  %bf.clear6016 = and i32 %bf.load6015, 255
  %cmp6017 = icmp eq i32 %bf.clear6016, 86
  br i1 %cmp6017, label %cond.true.6019, label %cond.false.6020

cond.true.6019:                                   ; preds = %if.then.6008
  %2806 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  br label %cond.end.6021

cond.false.6020:                                  ; preds = %if.then.6008
  br label %cond.end.6021

cond.end.6021:                                    ; preds = %cond.false.6020, %cond.true.6019
  %cond6022 = phi %struct.rtx_def* [ %2806, %cond.true.6019 ], [ null, %cond.false.6020 ]
  %2807 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %common6023 = bitcast %union.tree_node* %2807 to %struct.tree_common*
  %code6024 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6023, i32 0, i32 2
  %bf.load6025 = load i32, i32* %code6024, align 8
  %bf.clear6026 = and i32 %bf.load6025, 255
  %cmp6027 = icmp eq i32 %bf.clear6026, 88
  br i1 %cmp6027, label %cond.true.6029, label %cond.false.6030

cond.true.6029:                                   ; preds = %cond.end.6021
  %2808 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  br label %cond.end.6031

cond.false.6030:                                  ; preds = %cond.end.6021
  br label %cond.end.6031

cond.end.6031:                                    ; preds = %cond.false.6030, %cond.true.6029
  %cond6032 = phi %struct.rtx_def* [ %2808, %cond.true.6029 ], [ null, %cond.false.6030 ]
  call void @do_jump(%union.tree_node* %2804, %struct.rtx_def* %cond6022, %struct.rtx_def* %cond6032)
  %2809 = load %union.tree_node*, %union.tree_node** %lhs5943, align 8
  %2810 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %common6033 = bitcast %union.tree_node* %2810 to %struct.tree_common*
  %type6034 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6033, i32 0, i32 1
  %2811 = load %union.tree_node*, %union.tree_node** %type6034, align 8
  %2812 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %common6035 = bitcast %union.tree_node* %2812 to %struct.tree_common*
  %code6036 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6035, i32 0, i32 2
  %bf.load6037 = load i32, i32* %code6036, align 8
  %bf.clear6038 = and i32 %bf.load6037, 255
  %cmp6039 = icmp eq i32 %bf.clear6038, 86
  br i1 %cmp6039, label %cond.true.6041, label %cond.false.6042

cond.true.6041:                                   ; preds = %cond.end.6031
  %2813 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 12), align 8
  br label %cond.end.6043

cond.false.6042:                                  ; preds = %cond.end.6031
  %2814 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  br label %cond.end.6043

cond.end.6043:                                    ; preds = %cond.false.6042, %cond.true.6041
  %cond6044 = phi %union.tree_node* [ %2813, %cond.true.6041 ], [ %2814, %cond.false.6042 ]
  %call6045 = call %union.tree_node* @convert(%union.tree_node* %2811, %union.tree_node* %cond6044)
  %call6046 = call %struct.rtx_def* @expand_assignment(%union.tree_node* %2809, %union.tree_node* %call6045, i32 0, i32 0)
  call void @do_pending_stack_adjust()
  %2815 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call6047 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %2815)
  %2816 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %2816, %struct.rtx_def** %retval
  br label %return

if.end.6048:                                      ; preds = %land.lhs.true.5997, %land.lhs.true.5989, %land.lhs.true.5979, %land.lhs.true.5973, %lor.lhs.false.5966, %land.lhs.true.5952, %sw.bb.5942
  %2817 = load %union.tree_node*, %union.tree_node** %lhs5943, align 8
  %2818 = load %union.tree_node*, %union.tree_node** %rhs5947, align 8
  %2819 = load i32, i32* %ignore, align 4
  %tobool6049 = icmp ne i32 %2819, 0
  %lnot6050 = xor i1 %tobool6049, true
  %lnot.ext6051 = zext i1 %lnot6050 to i32
  %2820 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %cmp6052 = icmp ne %struct.rtx_def* %2820, null
  %conv6053 = zext i1 %cmp6052 to i32
  %call6054 = call %struct.rtx_def* @expand_assignment(%union.tree_node* %2817, %union.tree_node* %2818, i32 %lnot.ext6051, i32 %conv6053)
  store %struct.rtx_def* %call6054, %struct.rtx_def** %temp, align 8
  %2821 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %2821, %struct.rtx_def** %retval
  br label %return

sw.bb.6055:                                       ; preds = %if.end.185
  %2822 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6056 = bitcast %union.tree_node* %2822 to %struct.tree_exp*
  %operands6057 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6056, i32 0, i32 2
  %arrayidx6058 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6057, i32 0, i64 0
  %2823 = load %union.tree_node*, %union.tree_node** %arrayidx6058, align 8
  %tobool6059 = icmp ne %union.tree_node* %2823, null
  br i1 %tobool6059, label %if.else.6061, label %if.then.6060

if.then.6060:                                     ; preds = %sw.bb.6055
  call void @expand_null_return()
  br label %if.end.6065

if.else.6061:                                     ; preds = %sw.bb.6055
  %2824 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6062 = bitcast %union.tree_node* %2824 to %struct.tree_exp*
  %operands6063 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6062, i32 0, i32 2
  %arrayidx6064 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6063, i32 0, i64 0
  %2825 = load %union.tree_node*, %union.tree_node** %arrayidx6064, align 8
  call void @expand_return(%union.tree_node* %2825)
  br label %if.end.6065

if.end.6065:                                      ; preds = %if.else.6061, %if.then.6060
  %2826 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %2826, %struct.rtx_def** %retval
  br label %return

sw.bb.6066:                                       ; preds = %if.end.185, %if.end.185
  %2827 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %2828 = load i32, i32* %ignore, align 4
  %call6067 = call %struct.rtx_def* @expand_increment(%union.tree_node* %2827, i32 0, i32 %2828)
  store %struct.rtx_def* %call6067, %struct.rtx_def** %retval
  br label %return

sw.bb.6068:                                       ; preds = %if.end.185, %if.end.185
  %2829 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %2830 = load i32, i32* %ignore, align 4
  %tobool6069 = icmp ne i32 %2830, 0
  %lnot6070 = xor i1 %tobool6069, true
  %lnot.ext6071 = zext i1 %lnot6070 to i32
  %2831 = load i32, i32* %ignore, align 4
  %call6072 = call %struct.rtx_def* @expand_increment(%union.tree_node* %2829, i32 %lnot.ext6071, i32 %2831)
  store %struct.rtx_def* %call6072, %struct.rtx_def** %retval
  br label %return

sw.bb.6073:                                       ; preds = %if.end.185
  %2832 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6074 = bitcast %union.tree_node* %2832 to %struct.tree_exp*
  %operands6075 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6074, i32 0, i32 2
  %arrayidx6076 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6075, i32 0, i64 0
  %2833 = load %union.tree_node*, %union.tree_node** %arrayidx6076, align 8
  %common6077 = bitcast %union.tree_node* %2833 to %struct.tree_common*
  %code6078 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6077, i32 0, i32 2
  %bf.load6079 = load i32, i32* %code6078, align 8
  %bf.clear6080 = and i32 %bf.load6079, 255
  %cmp6081 = icmp eq i32 %bf.clear6080, 30
  br i1 %cmp6081, label %land.lhs.true.6083, label %if.else.6114

land.lhs.true.6083:                               ; preds = %sw.bb.6073
  %2834 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6084 = bitcast %union.tree_node* %2834 to %struct.tree_exp*
  %operands6085 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6084, i32 0, i32 2
  %arrayidx6086 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6085, i32 0, i64 0
  %2835 = load %union.tree_node*, %union.tree_node** %arrayidx6086, align 8
  %call6087 = call %union.tree_node* @decl_function_context(%union.tree_node* %2835)
  %cmp6088 = icmp ne %union.tree_node* %call6087, null
  br i1 %cmp6088, label %land.lhs.true.6090, label %if.else.6114

land.lhs.true.6090:                               ; preds = %land.lhs.true.6083
  %2836 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6091 = bitcast %union.tree_node* %2836 to %struct.tree_exp*
  %operands6092 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6091, i32 0, i32 2
  %arrayidx6093 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6092, i32 0, i64 0
  %2837 = load %union.tree_node*, %union.tree_node** %arrayidx6093, align 8
  %decl6094 = bitcast %union.tree_node* %2837 to %struct.tree_decl*
  %regdecl_flag6095 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6094, i32 0, i32 5
  %2838 = bitcast i48* %regdecl_flag6095 to i64*
  %bf.load6096 = load i64, i64* %2838, align 8
  %bf.lshr6097 = lshr i64 %bf.load6096, 10
  %bf.clear6098 = and i64 %bf.lshr6097, 1
  %bf.cast6099 = trunc i64 %bf.clear6098 to i32
  %tobool6100 = icmp ne i32 %bf.cast6099, 0
  br i1 %tobool6100, label %if.else.6114, label %land.lhs.true.6101

land.lhs.true.6101:                               ; preds = %land.lhs.true.6090
  %2839 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common6102 = bitcast %union.tree_node* %2839 to %struct.tree_common*
  %static_flag6103 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6102, i32 0, i32 2
  %bf.load6104 = load i32, i32* %static_flag6103, align 8
  %bf.lshr6105 = lshr i32 %bf.load6104, 18
  %bf.clear6106 = and i32 %bf.lshr6105, 1
  %tobool6107 = icmp ne i32 %bf.clear6106, 0
  br i1 %tobool6107, label %if.else.6114, label %if.then.6108

if.then.6108:                                     ; preds = %land.lhs.true.6101
  %2840 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6109 = bitcast %union.tree_node* %2840 to %struct.tree_exp*
  %operands6110 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6109, i32 0, i32 2
  %arrayidx6111 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6110, i32 0, i64 0
  %2841 = load %union.tree_node*, %union.tree_node** %arrayidx6111, align 8
  %call6112 = call %struct.rtx_def* @trampoline_address(%union.tree_node* %2841)
  store %struct.rtx_def* %call6112, %struct.rtx_def** %op0, align 8
  %2842 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2843 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call6113 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %2842, %struct.rtx_def* %2843)
  store %struct.rtx_def* %call6113, %struct.rtx_def** %op0, align 8
  br label %if.end.6319

if.else.6114:                                     ; preds = %land.lhs.true.6101, %land.lhs.true.6090, %land.lhs.true.6083, %sw.bb.6073
  %2844 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6115 = bitcast %union.tree_node* %2844 to %struct.tree_exp*
  %operands6116 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6115, i32 0, i32 2
  %arrayidx6117 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6116, i32 0, i64 0
  %2845 = load %union.tree_node*, %union.tree_node** %arrayidx6117, align 8
  %common6118 = bitcast %union.tree_node* %2845 to %struct.tree_common*
  %code6119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6118, i32 0, i32 2
  %bf.load6120 = load i32, i32* %code6119, align 8
  %bf.clear6121 = and i32 %bf.load6120, 255
  %cmp6122 = icmp eq i32 %bf.clear6121, 0
  br i1 %cmp6122, label %if.then.6124, label %if.else.6125

if.then.6124:                                     ; preds = %if.else.6114
  %2846 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %2846, %struct.rtx_def** %retval
  br label %return

if.else.6125:                                     ; preds = %if.else.6114
  %2847 = load %struct.function*, %struct.function** @cfun, align 8
  %cmp6126 = icmp eq %struct.function* %2847, null
  br i1 %cmp6126, label %land.lhs.true.6128, label %if.else.6159

land.lhs.true.6128:                               ; preds = %if.else.6125
  %2848 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6129 = bitcast %union.tree_node* %2848 to %struct.tree_exp*
  %operands6130 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6129, i32 0, i32 2
  %arrayidx6131 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6130, i32 0, i64 0
  %2849 = load %union.tree_node*, %union.tree_node** %arrayidx6131, align 8
  %common6132 = bitcast %union.tree_node* %2849 to %struct.tree_common*
  %code6133 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6132, i32 0, i32 2
  %bf.load6134 = load i32, i32* %code6133, align 8
  %bf.clear6135 = and i32 %bf.load6134, 255
  %cmp6136 = icmp eq i32 %bf.clear6135, 46
  br i1 %cmp6136, label %if.then.6151, label %lor.lhs.false.6138

lor.lhs.false.6138:                               ; preds = %land.lhs.true.6128
  %2850 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6139 = bitcast %union.tree_node* %2850 to %struct.tree_exp*
  %operands6140 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6139, i32 0, i32 2
  %arrayidx6141 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6140, i32 0, i64 0
  %2851 = load %union.tree_node*, %union.tree_node** %arrayidx6141, align 8
  %common6142 = bitcast %union.tree_node* %2851 to %struct.tree_common*
  %code6143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6142, i32 0, i32 2
  %bf.load6144 = load i32, i32* %code6143, align 8
  %bf.clear6145 = and i32 %bf.load6144, 255
  %idxprom6146 = sext i32 %bf.clear6145 to i64
  %arrayidx6147 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom6146
  %2852 = load i8, i8* %arrayidx6147, align 1
  %conv6148 = sext i8 %2852 to i32
  %cmp6149 = icmp eq i32 %conv6148, 99
  br i1 %cmp6149, label %if.then.6151, label %if.else.6159

if.then.6151:                                     ; preds = %lor.lhs.false.6138, %land.lhs.true.6128
  %2853 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6152 = bitcast %union.tree_node* %2853 to %struct.tree_exp*
  %operands6153 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6152, i32 0, i32 2
  %arrayidx6154 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6153, i32 0, i64 0
  %2854 = load %union.tree_node*, %union.tree_node** %arrayidx6154, align 8
  %call6155 = call %struct.rtx_def* @output_constant_def(%union.tree_node* %2854, i32 0)
  %fld6156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call6155, i32 0, i32 1
  %arrayidx6157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6156, i32 0, i64 0
  %rtx6158 = bitcast %union.rtunion_def* %arrayidx6157 to %struct.rtx_def**
  %2855 = load %struct.rtx_def*, %struct.rtx_def** %rtx6158, align 8
  store %struct.rtx_def* %2855, %struct.rtx_def** %op0, align 8
  br label %if.end.6317

if.else.6159:                                     ; preds = %lor.lhs.false.6138, %if.else.6125
  %2856 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6160 = bitcast %union.tree_node* %2856 to %struct.tree_exp*
  %operands6161 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6160, i32 0, i32 2
  %arrayidx6162 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6161, i32 0, i64 0
  %2857 = load %union.tree_node*, %union.tree_node** %arrayidx6162, align 8
  %2858 = load i32, i32* %ignore, align 4
  %tobool6163 = icmp ne i32 %2858, 0
  br i1 %tobool6163, label %cond.true.6164, label %cond.false.6165

cond.true.6164:                                   ; preds = %if.else.6159
  %2859 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.6166

cond.false.6165:                                  ; preds = %if.else.6159
  br label %cond.end.6166

cond.end.6166:                                    ; preds = %cond.false.6165, %cond.true.6164
  %cond6167 = phi %struct.rtx_def* [ %2859, %cond.true.6164 ], [ null, %cond.false.6165 ]
  %2860 = load i32, i32* %modifier.addr, align 4
  %cmp6168 = icmp eq i32 %2860, 3
  br i1 %cmp6168, label %cond.true.6170, label %cond.false.6171

cond.true.6170:                                   ; preds = %cond.end.6166
  %2861 = load i32, i32* %modifier.addr, align 4
  br label %cond.end.6172

cond.false.6171:                                  ; preds = %cond.end.6166
  br label %cond.end.6172

cond.end.6172:                                    ; preds = %cond.false.6171, %cond.true.6170
  %cond6173 = phi i32 [ %2861, %cond.true.6170 ], [ 2, %cond.false.6171 ]
  %call6174 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2857, %struct.rtx_def* %cond6167, i32 0, i32 %cond6173)
  store %struct.rtx_def* %call6174, %struct.rtx_def** %op0, align 8
  %2862 = load i32, i32* %ignore, align 4
  %tobool6175 = icmp ne i32 %2862, 0
  br i1 %tobool6175, label %if.then.6176, label %if.end.6177

if.then.6176:                                     ; preds = %cond.end.6172
  %2863 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %2863, %struct.rtx_def** %retval
  br label %return

if.end.6177:                                      ; preds = %cond.end.6172
  %2864 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6178 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %2864, i32 1)
  store %struct.rtx_def* %call6178, %struct.rtx_def** %op0, align 8
  %2865 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2866 = bitcast %struct.rtx_def* %2865 to i32*
  %bf.load6179 = load i32, i32* %2866, align 8
  %bf.clear6180 = and i32 %bf.load6179, 65535
  %cmp6181 = icmp eq i32 %bf.clear6180, 67
  br i1 %cmp6181, label %if.then.6218, label %lor.lhs.false.6183

lor.lhs.false.6183:                               ; preds = %if.end.6177
  %2867 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2868 = bitcast %struct.rtx_def* %2867 to i32*
  %bf.load6184 = load i32, i32* %2868, align 8
  %bf.clear6185 = and i32 %bf.load6184, 65535
  %cmp6186 = icmp eq i32 %bf.clear6185, 68
  br i1 %cmp6186, label %if.then.6218, label %lor.lhs.false.6188

lor.lhs.false.6188:                               ; preds = %lor.lhs.false.6183
  %2869 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2870 = bitcast %struct.rtx_def* %2869 to i32*
  %bf.load6189 = load i32, i32* %2870, align 8
  %bf.clear6190 = and i32 %bf.load6189, 65535
  %cmp6191 = icmp eq i32 %bf.clear6190, 54
  br i1 %cmp6191, label %if.then.6218, label %lor.lhs.false.6193

lor.lhs.false.6193:                               ; preds = %lor.lhs.false.6188
  %2871 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2872 = bitcast %struct.rtx_def* %2871 to i32*
  %bf.load6194 = load i32, i32* %2872, align 8
  %bf.clear6195 = and i32 %bf.load6194, 65535
  %cmp6196 = icmp eq i32 %bf.clear6195, 55
  br i1 %cmp6196, label %if.then.6218, label %lor.lhs.false.6198

lor.lhs.false.6198:                               ; preds = %lor.lhs.false.6193
  %2873 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2874 = bitcast %struct.rtx_def* %2873 to i32*
  %bf.load6199 = load i32, i32* %2874, align 8
  %bf.clear6200 = and i32 %bf.load6199, 65535
  %cmp6201 = icmp eq i32 %bf.clear6200, 58
  br i1 %cmp6201, label %if.then.6218, label %lor.lhs.false.6203

lor.lhs.false.6203:                               ; preds = %lor.lhs.false.6198
  %2875 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2876 = bitcast %struct.rtx_def* %2875 to i32*
  %bf.load6204 = load i32, i32* %2876, align 8
  %bf.clear6205 = and i32 %bf.load6204, 65535
  %cmp6206 = icmp eq i32 %bf.clear6205, 134
  br i1 %cmp6206, label %if.then.6218, label %lor.lhs.false.6208

lor.lhs.false.6208:                               ; preds = %lor.lhs.false.6203
  %2877 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2878 = bitcast %struct.rtx_def* %2877 to i32*
  %bf.load6209 = load i32, i32* %2878, align 8
  %bf.clear6210 = and i32 %bf.load6209, 65535
  %cmp6211 = icmp eq i32 %bf.clear6210, 56
  br i1 %cmp6211, label %if.then.6218, label %lor.lhs.false.6213

lor.lhs.false.6213:                               ; preds = %lor.lhs.false.6208
  %2879 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2880 = bitcast %struct.rtx_def* %2879 to i32*
  %bf.load6214 = load i32, i32* %2880, align 8
  %bf.clear6215 = and i32 %bf.load6214, 65535
  %cmp6216 = icmp eq i32 %bf.clear6215, 140
  br i1 %cmp6216, label %if.then.6218, label %if.else.6230

if.then.6218:                                     ; preds = %lor.lhs.false.6213, %lor.lhs.false.6208, %lor.lhs.false.6203, %lor.lhs.false.6198, %lor.lhs.false.6193, %lor.lhs.false.6188, %lor.lhs.false.6183, %if.end.6177
  %2881 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6219 = bitcast %union.tree_node* %2881 to %struct.tree_exp*
  %operands6220 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6219, i32 0, i32 2
  %arrayidx6221 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6220, i32 0, i64 0
  %2882 = load %union.tree_node*, %union.tree_node** %arrayidx6221, align 8
  %common6222 = bitcast %union.tree_node* %2882 to %struct.tree_common*
  %type6223 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6222, i32 0, i32 1
  %2883 = load %union.tree_node*, %union.tree_node** %type6223, align 8
  %type6224 = bitcast %union.tree_node* %2883 to %struct.tree_type*
  %mode6225 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6224, i32 0, i32 6
  %bf.load6226 = load i32, i32* %mode6225, align 4
  %bf.lshr6227 = lshr i32 %bf.load6226, 9
  %bf.clear6228 = and i32 %bf.lshr6227, 127
  %2884 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6229 = call %struct.rtx_def* @force_const_mem(i32 %bf.clear6228, %struct.rtx_def* %2884)
  store %struct.rtx_def* %call6229, %struct.rtx_def** %op0, align 8
  br label %if.end.6296

if.else.6230:                                     ; preds = %lor.lhs.false.6213
  %2885 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2886 = bitcast %struct.rtx_def* %2885 to i32*
  %bf.load6231 = load i32, i32* %2886, align 8
  %bf.clear6232 = and i32 %bf.load6231, 65535
  %cmp6233 = icmp eq i32 %bf.clear6232, 61
  br i1 %cmp6233, label %if.then.6255, label %lor.lhs.false.6235

lor.lhs.false.6235:                               ; preds = %if.else.6230
  %2887 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2888 = bitcast %struct.rtx_def* %2887 to i32*
  %bf.load6236 = load i32, i32* %2888, align 8
  %bf.clear6237 = and i32 %bf.load6236, 65535
  %cmp6238 = icmp eq i32 %bf.clear6237, 63
  br i1 %cmp6238, label %if.then.6255, label %lor.lhs.false.6240

lor.lhs.false.6240:                               ; preds = %lor.lhs.false.6235
  %2889 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2890 = bitcast %struct.rtx_def* %2889 to i32*
  %bf.load6241 = load i32, i32* %2890, align 8
  %bf.clear6242 = and i32 %bf.load6241, 65535
  %cmp6243 = icmp eq i32 %bf.clear6242, 65
  br i1 %cmp6243, label %if.then.6255, label %lor.lhs.false.6245

lor.lhs.false.6245:                               ; preds = %lor.lhs.false.6240
  %2891 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2892 = bitcast %struct.rtx_def* %2891 to i32*
  %bf.load6246 = load i32, i32* %2892, align 8
  %bf.clear6247 = and i32 %bf.load6246, 65535
  %cmp6248 = icmp eq i32 %bf.clear6247, 70
  br i1 %cmp6248, label %if.then.6255, label %lor.lhs.false.6250

lor.lhs.false.6250:                               ; preds = %lor.lhs.false.6245
  %2893 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2894 = bitcast %struct.rtx_def* %2893 to i32*
  %bf.load6251 = load i32, i32* %2894, align 8
  %bf.clear6252 = and i32 %bf.load6251, 65535
  %cmp6253 = icmp eq i32 %bf.clear6252, 39
  br i1 %cmp6253, label %if.then.6255, label %if.end.6295

if.then.6255:                                     ; preds = %lor.lhs.false.6250, %lor.lhs.false.6245, %lor.lhs.false.6240, %lor.lhs.false.6235, %if.else.6230
  %2895 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6256 = bitcast %union.tree_node* %2895 to %struct.tree_exp*
  %operands6257 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6256, i32 0, i32 2
  %arrayidx6258 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6257, i32 0, i64 0
  %2896 = load %union.tree_node*, %union.tree_node** %arrayidx6258, align 8
  %common6259 = bitcast %union.tree_node* %2896 to %struct.tree_common*
  %code6260 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6259, i32 0, i32 2
  %bf.load6261 = load i32, i32* %code6260, align 8
  %bf.clear6262 = and i32 %bf.load6261, 255
  %cmp6263 = icmp eq i32 %bf.clear6262, 118
  br i1 %cmp6263, label %if.then.6265, label %if.else.6275

if.then.6265:                                     ; preds = %if.then.6255
  %2897 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6266 = bitcast %union.tree_node* %2897 to %struct.tree_exp*
  %operands6267 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6266, i32 0, i32 2
  %arrayidx6268 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6267, i32 0, i64 0
  %2898 = load %union.tree_node*, %union.tree_node** %arrayidx6268, align 8
  call void @put_var_into_stack(%union.tree_node* %2898)
  %2899 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6269 = bitcast %union.tree_node* %2899 to %struct.tree_exp*
  %operands6270 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6269, i32 0, i32 2
  %arrayidx6271 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6270, i32 0, i64 0
  %2900 = load %union.tree_node*, %union.tree_node** %arrayidx6271, align 8
  %exp6272 = bitcast %union.tree_node* %2900 to %struct.tree_exp*
  %operands6273 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6272, i32 0, i32 2
  %arrayidx6274 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6273, i32 0, i64 2
  %2901 = bitcast %union.tree_node** %arrayidx6274 to %struct.rtx_def**
  %2902 = load %struct.rtx_def*, %struct.rtx_def** %2901, align 8
  store %struct.rtx_def* %2902, %struct.rtx_def** %op0, align 8
  br label %if.end.6294

if.else.6275:                                     ; preds = %if.then.6255
  %2903 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6277 = bitcast %union.tree_node* %2903 to %struct.tree_exp*
  %operands6278 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6277, i32 0, i32 2
  %arrayidx6279 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6278, i32 0, i64 0
  %2904 = load %union.tree_node*, %union.tree_node** %arrayidx6279, align 8
  %common6280 = bitcast %union.tree_node* %2904 to %struct.tree_common*
  %type6281 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6280, i32 0, i32 1
  %2905 = load %union.tree_node*, %union.tree_node** %type6281, align 8
  store %union.tree_node* %2905, %union.tree_node** %inner_type6276, align 8
  %2906 = load %union.tree_node*, %union.tree_node** %inner_type6276, align 8
  %call6283 = call %struct.rtx_def* @assign_temp(%union.tree_node* %2906, i32 1, i32 1, i32 1)
  store %struct.rtx_def* %call6283, %struct.rtx_def** %memloc6282, align 8
  %2907 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2908 = bitcast %struct.rtx_def* %2907 to i32*
  %bf.load6284 = load i32, i32* %2908, align 8
  %bf.clear6285 = and i32 %bf.load6284, 65535
  %cmp6286 = icmp eq i32 %bf.clear6285, 39
  br i1 %cmp6286, label %if.then.6288, label %if.else.6291

if.then.6288:                                     ; preds = %if.else.6275
  %2909 = load %struct.rtx_def*, %struct.rtx_def** %memloc6282, align 8
  %2910 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2911 = load %union.tree_node*, %union.tree_node** %inner_type6276, align 8
  %call6289 = call i64 @int_size_in_bytes(%union.tree_node* %2911)
  %conv6290 = trunc i64 %call6289 to i32
  call void @emit_group_store(%struct.rtx_def* %2909, %struct.rtx_def* %2910, i32 %conv6290)
  br label %if.end.6293

if.else.6291:                                     ; preds = %if.else.6275
  %2912 = load %struct.rtx_def*, %struct.rtx_def** %memloc6282, align 8
  %2913 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6292 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2912, %struct.rtx_def* %2913)
  br label %if.end.6293

if.end.6293:                                      ; preds = %if.else.6291, %if.then.6288
  %2914 = load %struct.rtx_def*, %struct.rtx_def** %memloc6282, align 8
  store %struct.rtx_def* %2914, %struct.rtx_def** %op0, align 8
  br label %if.end.6294

if.end.6294:                                      ; preds = %if.end.6293, %if.then.6265
  br label %if.end.6295

if.end.6295:                                      ; preds = %if.end.6294, %lor.lhs.false.6250
  br label %if.end.6296

if.end.6296:                                      ; preds = %if.end.6295, %if.then.6218
  %2915 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2916 = bitcast %struct.rtx_def* %2915 to i32*
  %bf.load6297 = load i32, i32* %2916, align 8
  %bf.clear6298 = and i32 %bf.load6297, 65535
  %cmp6299 = icmp ne i32 %bf.clear6298, 66
  br i1 %cmp6299, label %if.then.6301, label %if.end.6302

if.then.6301:                                     ; preds = %if.end.6296
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8635, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.6302:                                      ; preds = %if.end.6296
  %2917 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @mark_temp_addr_taken(%struct.rtx_def* %2917)
  %2918 = load i32, i32* %modifier.addr, align 4
  %cmp6303 = icmp eq i32 %2918, 1
  br i1 %cmp6303, label %if.then.6308, label %lor.lhs.false.6305

lor.lhs.false.6305:                               ; preds = %if.end.6302
  %2919 = load i32, i32* %modifier.addr, align 4
  %cmp6306 = icmp eq i32 %2919, 3
  br i1 %cmp6306, label %if.then.6308, label %if.end.6312

if.then.6308:                                     ; preds = %lor.lhs.false.6305, %if.end.6302
  %2920 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld6309 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2920, i32 0, i32 1
  %arrayidx6310 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6309, i32 0, i64 0
  %rtx6311 = bitcast %union.rtunion_def* %arrayidx6310 to %struct.rtx_def**
  %2921 = load %struct.rtx_def*, %struct.rtx_def** %rtx6311, align 8
  store %struct.rtx_def* %2921, %struct.rtx_def** %op0, align 8
  %2922 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %2922, %struct.rtx_def** %retval
  br label %return

if.end.6312:                                      ; preds = %lor.lhs.false.6305
  %2923 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld6313 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2923, i32 0, i32 1
  %arrayidx6314 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6313, i32 0, i64 0
  %rtx6315 = bitcast %union.rtunion_def* %arrayidx6314 to %struct.rtx_def**
  %2924 = load %struct.rtx_def*, %struct.rtx_def** %rtx6315, align 8
  %2925 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call6316 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %2924, %struct.rtx_def* %2925)
  store %struct.rtx_def* %call6316, %struct.rtx_def** %op0, align 8
  br label %if.end.6317

if.end.6317:                                      ; preds = %if.end.6312, %if.then.6151
  br label %if.end.6318

if.end.6318:                                      ; preds = %if.end.6317
  br label %if.end.6319

if.end.6319:                                      ; preds = %if.end.6318, %if.then.6108
  %2926 = load i32, i32* @flag_force_addr, align 4
  %tobool6320 = icmp ne i32 %2926, 0
  br i1 %tobool6320, label %land.lhs.true.6321, label %if.end.6340

land.lhs.true.6321:                               ; preds = %if.end.6319
  %2927 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2928 = bitcast %struct.rtx_def* %2927 to i32*
  %bf.load6322 = load i32, i32* %2928, align 8
  %bf.clear6323 = and i32 %bf.load6322, 65535
  %cmp6324 = icmp ne i32 %bf.clear6323, 61
  br i1 %cmp6324, label %land.lhs.true.6326, label %if.end.6340

land.lhs.true.6326:                               ; preds = %land.lhs.true.6321
  %2929 = load i32, i32* %modifier.addr, align 4
  %cmp6327 = icmp ne i32 %2929, 2
  br i1 %cmp6327, label %land.lhs.true.6329, label %if.end.6340

land.lhs.true.6329:                               ; preds = %land.lhs.true.6326
  %2930 = load i32, i32* %modifier.addr, align 4
  %cmp6330 = icmp ne i32 %2930, 3
  br i1 %cmp6330, label %land.lhs.true.6332, label %if.end.6340

land.lhs.true.6332:                               ; preds = %land.lhs.true.6329
  %2931 = load i32, i32* %modifier.addr, align 4
  %cmp6333 = icmp ne i32 %2931, 1
  br i1 %cmp6333, label %if.then.6335, label %if.end.6340

if.then.6335:                                     ; preds = %land.lhs.true.6332
  %2932 = load i32, i32* @target_flags, align 4
  %and6336 = and i32 %2932, 33554432
  %tobool6337 = icmp ne i32 %and6336, 0
  %cond6338 = select i1 %tobool6337, i32 5, i32 4
  %2933 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6339 = call %struct.rtx_def* @force_reg(i32 %cond6338, %struct.rtx_def* %2933)
  store %struct.rtx_def* %call6339, %struct.rtx_def** %op0, align 8
  br label %if.end.6340

if.end.6340:                                      ; preds = %if.then.6335, %land.lhs.true.6332, %land.lhs.true.6329, %land.lhs.true.6326, %land.lhs.true.6321, %if.end.6319
  %2934 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2935 = bitcast %struct.rtx_def* %2934 to i32*
  %bf.load6341 = load i32, i32* %2935, align 8
  %bf.clear6342 = and i32 %bf.load6341, 65535
  %cmp6343 = icmp eq i32 %bf.clear6342, 61
  br i1 %cmp6343, label %land.lhs.true.6345, label %if.end.6355

land.lhs.true.6345:                               ; preds = %if.end.6340
  %2936 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2937 = bitcast %struct.rtx_def* %2936 to i32*
  %bf.load6346 = load i32, i32* %2937, align 8
  %bf.lshr6347 = lshr i32 %bf.load6346, 27
  %bf.clear6348 = and i32 %bf.lshr6347, 1
  %tobool6349 = icmp ne i32 %bf.clear6348, 0
  br i1 %tobool6349, label %if.end.6355, label %if.then.6350

if.then.6350:                                     ; preds = %land.lhs.true.6345
  %2938 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2939 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common6351 = bitcast %union.tree_node* %2939 to %struct.tree_common*
  %type6352 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6351, i32 0, i32 1
  %2940 = load %union.tree_node*, %union.tree_node** %type6352, align 8
  %type6353 = bitcast %union.tree_node* %2940 to %struct.tree_type*
  %align6354 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6353, i32 0, i32 7
  %2941 = load i32, i32* %align6354, align 4
  call void @mark_reg_pointer(%struct.rtx_def* %2938, i32 %2941)
  br label %if.end.6355

if.end.6355:                                      ; preds = %if.then.6350, %land.lhs.true.6345, %if.end.6340
  %2942 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %2942, %struct.rtx_def** %retval
  br label %return

sw.bb.6356:                                       ; preds = %if.end.185
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8704, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

sw.bb.6357:                                       ; preds = %if.end.185
  %2943 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common6359 = bitcast %union.tree_node* %2943 to %struct.tree_common*
  %type6360 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6359, i32 0, i32 1
  %2944 = load %union.tree_node*, %union.tree_node** %type6360, align 8
  %common6361 = bitcast %union.tree_node* %2944 to %struct.tree_common*
  %type6362 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6361, i32 0, i32 1
  %2945 = load %union.tree_node*, %union.tree_node** %type6362, align 8
  %type6363 = bitcast %union.tree_node* %2945 to %struct.tree_type*
  %mode6364 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6363, i32 0, i32 6
  %bf.load6365 = load i32, i32* %mode6364, align 4
  %bf.lshr6366 = lshr i32 %bf.load6365, 9
  %bf.clear6367 = and i32 %bf.lshr6366, 127
  store i32 %bf.clear6367, i32* %mode6358, align 4
  %2946 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6368 = bitcast %union.tree_node* %2946 to %struct.tree_exp*
  %operands6369 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6368, i32 0, i32 2
  %arrayidx6370 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6369, i32 0, i64 0
  %2947 = load %union.tree_node*, %union.tree_node** %arrayidx6370, align 8
  %call6371 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2947, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call6371, %struct.rtx_def** %op0, align 8
  %2948 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6372 = bitcast %union.tree_node* %2948 to %struct.tree_exp*
  %operands6373 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6372, i32 0, i32 2
  %arrayidx6374 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6373, i32 0, i64 1
  %2949 = load %union.tree_node*, %union.tree_node** %arrayidx6374, align 8
  %call6375 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2949, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call6375, %struct.rtx_def** %op1, align 8
  %2950 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool6376 = icmp ne %struct.rtx_def* %2950, null
  br i1 %tobool6376, label %if.end.6386, label %if.then.6377

if.then.6377:                                     ; preds = %sw.bb.6357
  %2951 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common6378 = bitcast %union.tree_node* %2951 to %struct.tree_common*
  %type6379 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6378, i32 0, i32 1
  %2952 = load %union.tree_node*, %union.tree_node** %type6379, align 8
  %type6380 = bitcast %union.tree_node* %2952 to %struct.tree_type*
  %mode6381 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6380, i32 0, i32 6
  %bf.load6382 = load i32, i32* %mode6381, align 4
  %bf.lshr6383 = lshr i32 %bf.load6382, 9
  %bf.clear6384 = and i32 %bf.lshr6383, 127
  %call6385 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear6384)
  store %struct.rtx_def* %call6385, %struct.rtx_def** %target.addr, align 8
  br label %if.end.6386

if.end.6386:                                      ; preds = %if.then.6377, %sw.bb.6357
  call void @start_sequence()
  %2953 = load i32, i32* %mode6358, align 4
  %2954 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call6387 = call %struct.rtx_def* @gen_realpart(i32 %2953, %struct.rtx_def* %2954)
  %2955 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6388 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call6387, %struct.rtx_def* %2955)
  %2956 = load i32, i32* %mode6358, align 4
  %2957 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call6389 = call %struct.rtx_def* @gen_imagpart(i32 %2956, %struct.rtx_def* %2957)
  %2958 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call6390 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call6389, %struct.rtx_def* %2958)
  %call6391 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call6391, %struct.rtx_def** %insns, align 8
  call void @end_sequence()
  %2959 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2960 = bitcast %struct.rtx_def* %2959 to i32*
  %bf.load6392 = load i32, i32* %2960, align 8
  %bf.clear6393 = and i32 %bf.load6392, 65535
  %cmp6394 = icmp ne i32 %bf.clear6393, 65
  br i1 %cmp6394, label %if.then.6396, label %if.else.6398

if.then.6396:                                     ; preds = %if.end.6386
  %2961 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %2962 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %2963 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %2964 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call6397 = call %struct.rtx_def* @emit_no_conflict_block(%struct.rtx_def* %2961, %struct.rtx_def* %2962, %struct.rtx_def* %2963, %struct.rtx_def* %2964, %struct.rtx_def* null)
  br label %if.end.6400

if.else.6398:                                     ; preds = %if.end.6386
  %2965 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %call6399 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %2965)
  br label %if.end.6400

if.end.6400:                                      ; preds = %if.else.6398, %if.then.6396
  %2966 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %2966, %struct.rtx_def** %retval
  br label %return

sw.bb.6401:                                       ; preds = %if.end.185
  %2967 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6402 = bitcast %union.tree_node* %2967 to %struct.tree_exp*
  %operands6403 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6402, i32 0, i32 2
  %arrayidx6404 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6403, i32 0, i64 0
  %2968 = load %union.tree_node*, %union.tree_node** %arrayidx6404, align 8
  %call6405 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2968, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call6405, %struct.rtx_def** %op0, align 8
  %2969 = load i32, i32* %mode, align 4
  %2970 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6406 = call %struct.rtx_def* @gen_realpart(i32 %2969, %struct.rtx_def* %2970)
  store %struct.rtx_def* %call6406, %struct.rtx_def** %retval
  br label %return

sw.bb.6407:                                       ; preds = %if.end.185
  %2971 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6408 = bitcast %union.tree_node* %2971 to %struct.tree_exp*
  %operands6409 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6408, i32 0, i32 2
  %arrayidx6410 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6409, i32 0, i64 0
  %2972 = load %union.tree_node*, %union.tree_node** %arrayidx6410, align 8
  %call6411 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2972, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call6411, %struct.rtx_def** %op0, align 8
  %2973 = load i32, i32* %mode, align 4
  %2974 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6412 = call %struct.rtx_def* @gen_imagpart(i32 %2973, %struct.rtx_def* %2974)
  store %struct.rtx_def* %call6412, %struct.rtx_def** %retval
  br label %return

sw.bb.6413:                                       ; preds = %if.end.185
  %2975 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common6414 = bitcast %union.tree_node* %2975 to %struct.tree_common*
  %type6415 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6414, i32 0, i32 1
  %2976 = load %union.tree_node*, %union.tree_node** %type6415, align 8
  %common6416 = bitcast %union.tree_node* %2976 to %struct.tree_common*
  %type6417 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6416, i32 0, i32 1
  %2977 = load %union.tree_node*, %union.tree_node** %type6417, align 8
  %type6418 = bitcast %union.tree_node* %2977 to %struct.tree_type*
  %mode6419 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6418, i32 0, i32 6
  %bf.load6420 = load i32, i32* %mode6419, align 4
  %bf.lshr6421 = lshr i32 %bf.load6420, 9
  %bf.clear6422 = and i32 %bf.lshr6421, 127
  store i32 %bf.clear6422, i32* %partmode, align 4
  %2978 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6424 = bitcast %union.tree_node* %2978 to %struct.tree_exp*
  %operands6425 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6424, i32 0, i32 2
  %arrayidx6426 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6425, i32 0, i64 0
  %2979 = load %union.tree_node*, %union.tree_node** %arrayidx6426, align 8
  %call6427 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2979, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call6427, %struct.rtx_def** %op0, align 8
  %2980 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool6428 = icmp ne %struct.rtx_def* %2980, null
  br i1 %tobool6428, label %if.end.6431, label %if.then.6429

if.then.6429:                                     ; preds = %sw.bb.6413
  %2981 = load i32, i32* %mode, align 4
  %call6430 = call %struct.rtx_def* @gen_reg_rtx(i32 %2981)
  store %struct.rtx_def* %call6430, %struct.rtx_def** %target.addr, align 8
  br label %if.end.6431

if.end.6431:                                      ; preds = %if.then.6429, %sw.bb.6413
  call void @start_sequence()
  %2982 = load i32, i32* %partmode, align 4
  %2983 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call6432 = call %struct.rtx_def* @gen_realpart(i32 %2982, %struct.rtx_def* %2983)
  %2984 = load i32, i32* %partmode, align 4
  %2985 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6433 = call %struct.rtx_def* @gen_realpart(i32 %2984, %struct.rtx_def* %2985)
  %call6434 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call6432, %struct.rtx_def* %call6433)
  %2986 = load i32, i32* %partmode, align 4
  %2987 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call6435 = call %struct.rtx_def* @gen_imagpart(i32 %2986, %struct.rtx_def* %2987)
  store %struct.rtx_def* %call6435, %struct.rtx_def** %imag_t, align 8
  %2988 = load i32, i32* %partmode, align 4
  %2989 = load i32, i32* %unsignedp, align 4
  %tobool6436 = icmp ne i32 %2989, 0
  br i1 %tobool6436, label %cond.false.6445, label %land.lhs.true.6437

land.lhs.true.6437:                               ; preds = %if.end.6431
  %2990 = load i32, i32* @flag_trapv, align 4
  %tobool6438 = icmp ne i32 %2990, 0
  br i1 %tobool6438, label %land.lhs.true.6439, label %cond.false.6445

land.lhs.true.6439:                               ; preds = %land.lhs.true.6437
  %2991 = load i32, i32* %partmode, align 4
  %idxprom6440 = sext i32 %2991 to i64
  %arrayidx6441 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom6440
  %2992 = load i32, i32* %arrayidx6441, align 4
  %cmp6442 = icmp eq i32 %2992, 1
  br i1 %cmp6442, label %cond.true.6444, label %cond.false.6445

cond.true.6444:                                   ; preds = %land.lhs.true.6439
  %2993 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 33), align 8
  br label %cond.end.6446

cond.false.6445:                                  ; preds = %land.lhs.true.6439, %land.lhs.true.6437, %if.end.6431
  %2994 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 32), align 8
  br label %cond.end.6446

cond.end.6446:                                    ; preds = %cond.false.6445, %cond.true.6444
  %cond6447 = phi %struct.optab* [ %2993, %cond.true.6444 ], [ %2994, %cond.false.6445 ]
  %2995 = load i32, i32* %partmode, align 4
  %2996 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6448 = call %struct.rtx_def* @gen_imagpart(i32 %2995, %struct.rtx_def* %2996)
  %2997 = load %struct.rtx_def*, %struct.rtx_def** %imag_t, align 8
  %call6449 = call %struct.rtx_def* @expand_unop(i32 %2988, %struct.optab* %cond6447, %struct.rtx_def* %call6448, %struct.rtx_def* %2997, i32 0)
  store %struct.rtx_def* %call6449, %struct.rtx_def** %temp, align 8
  %2998 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %2999 = load %struct.rtx_def*, %struct.rtx_def** %imag_t, align 8
  %cmp6450 = icmp ne %struct.rtx_def* %2998, %2999
  br i1 %cmp6450, label %if.then.6452, label %if.end.6454

if.then.6452:                                     ; preds = %cond.end.6446
  %3000 = load %struct.rtx_def*, %struct.rtx_def** %imag_t, align 8
  %3001 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call6453 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3000, %struct.rtx_def* %3001)
  br label %if.end.6454

if.end.6454:                                      ; preds = %if.then.6452, %cond.end.6446
  %call6455 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call6455, %struct.rtx_def** %insns6423, align 8
  call void @end_sequence()
  %3002 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %3003 = bitcast %struct.rtx_def* %3002 to i32*
  %bf.load6456 = load i32, i32* %3003, align 8
  %bf.clear6457 = and i32 %bf.load6456, 65535
  %cmp6458 = icmp ne i32 %bf.clear6457, 65
  br i1 %cmp6458, label %if.then.6460, label %if.else.6462

if.then.6460:                                     ; preds = %if.end.6454
  %3004 = load %struct.rtx_def*, %struct.rtx_def** %insns6423, align 8
  %3005 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %3006 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call6461 = call %struct.rtx_def* @emit_no_conflict_block(%struct.rtx_def* %3004, %struct.rtx_def* %3005, %struct.rtx_def* %3006, %struct.rtx_def* null, %struct.rtx_def* null)
  br label %if.end.6464

if.else.6462:                                     ; preds = %if.end.6454
  %3007 = load %struct.rtx_def*, %struct.rtx_def** %insns6423, align 8
  %call6463 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %3007)
  br label %if.end.6464

if.end.6464:                                      ; preds = %if.else.6462, %if.then.6460
  %3008 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %3008, %struct.rtx_def** %retval
  br label %return

sw.bb.6465:                                       ; preds = %if.end.185
  %3009 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6466 = bitcast %union.tree_node* %3009 to %struct.tree_exp*
  %operands6467 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6466, i32 0, i32 2
  %arrayidx6468 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6467, i32 0, i64 1
  %3010 = load %union.tree_node*, %union.tree_node** %arrayidx6468, align 8
  store %union.tree_node* %3010, %union.tree_node** %handler, align 8
  call void @expand_eh_region_start()
  %3011 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6469 = bitcast %union.tree_node* %3011 to %struct.tree_exp*
  %operands6470 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6469, i32 0, i32 2
  %arrayidx6471 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6470, i32 0, i64 0
  %3012 = load %union.tree_node*, %union.tree_node** %arrayidx6471, align 8
  %call6472 = call %struct.rtx_def* @expand_expr(%union.tree_node* %3012, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call6472, %struct.rtx_def** %op0, align 8
  %3013 = load %union.tree_node*, %union.tree_node** %handler, align 8
  call void @expand_eh_region_end_cleanup(%union.tree_node* %3013)
  %3014 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %3014, %struct.rtx_def** %retval
  br label %return

sw.bb.6473:                                       ; preds = %if.end.185
  %3015 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6474 = bitcast %union.tree_node* %3015 to %struct.tree_exp*
  %operands6475 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6474, i32 0, i32 2
  %arrayidx6476 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6475, i32 0, i64 0
  %3016 = load %union.tree_node*, %union.tree_node** %arrayidx6476, align 8
  store %union.tree_node* %3016, %union.tree_node** %try_block, align 8
  %3017 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6477 = bitcast %union.tree_node* %3017 to %struct.tree_exp*
  %operands6478 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6477, i32 0, i32 2
  %arrayidx6479 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6478, i32 0, i64 1
  %3018 = load %union.tree_node*, %union.tree_node** %arrayidx6479, align 8
  store %union.tree_node* %3018, %union.tree_node** %finally_block, align 8
  %call6480 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call6480, %struct.rtx_def** %finally_label, align 8
  %call6481 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call6481, %struct.rtx_def** %done_label, align 8
  %3019 = load i32, i32* @target_flags, align 4
  %and6482 = and i32 %3019, 33554432
  %tobool6483 = icmp ne i32 %and6482, 0
  %cond6484 = select i1 %tobool6483, i32 5, i32 4
  %call6485 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond6484)
  store %struct.rtx_def* %call6485, %struct.rtx_def** %return_link, align 8
  %3020 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %3021 = load %struct.rtx_def*, %struct.rtx_def** %finally_label, align 8
  %3022 = bitcast %struct.rtx_def* %3021 to %union.tree_node*
  %3023 = load %struct.rtx_def*, %struct.rtx_def** %return_link, align 8
  %3024 = bitcast %struct.rtx_def* %3023 to %union.tree_node*
  %call6486 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 136, %union.tree_node* %3020, %union.tree_node* %3022, %union.tree_node* %3024)
  store %union.tree_node* %call6486, %union.tree_node** %cleanup, align 8
  %3025 = load %union.tree_node*, %union.tree_node** %cleanup, align 8
  %common6487 = bitcast %union.tree_node* %3025 to %struct.tree_common*
  %side_effects_flag6488 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6487, i32 0, i32 2
  %bf.load6489 = load i32, i32* %side_effects_flag6488, align 8
  %bf.clear6490 = and i32 %bf.load6489, -257
  %bf.set6491 = or i32 %bf.clear6490, 256
  store i32 %bf.set6491, i32* %side_effects_flag6488, align 8
  call void @expand_start_bindings_and_block(i32 2, %union.tree_node* null)
  %3026 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level6492 = getelementptr inbounds %struct.function, %struct.function* %3026, i32 0, i32 40
  %3027 = load i32, i32* %x_temp_slot_level6492, align 4
  %3028 = load %struct.function*, %struct.function** @cfun, align 8
  %x_target_temp_slot_level6493 = getelementptr inbounds %struct.function, %struct.function* %3028, i32 0, i32 42
  store i32 %3027, i32* %x_target_temp_slot_level6493, align 4
  %3029 = load %union.tree_node*, %union.tree_node** %cleanup, align 8
  %call6494 = call i32 @expand_decl_cleanup(%union.tree_node* null, %union.tree_node* %3029)
  %3030 = load %union.tree_node*, %union.tree_node** %try_block, align 8
  %3031 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %3032 = load i32, i32* %tmode.addr, align 4
  %3033 = load i32, i32* %modifier.addr, align 4
  %call6495 = call %struct.rtx_def* @expand_expr(%union.tree_node* %3030, %struct.rtx_def* %3031, i32 %3032, i32 %3033)
  store %struct.rtx_def* %call6495, %struct.rtx_def** %op0, align 8
  %3034 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %3034)
  call void @expand_end_bindings(%union.tree_node* null, i32 0, i32 0)
  %3035 = load %struct.rtx_def*, %struct.rtx_def** %done_label, align 8
  call void @emit_jump(%struct.rtx_def* %3035)
  %3036 = load %struct.rtx_def*, %struct.rtx_def** %finally_label, align 8
  %call6496 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %3036)
  %3037 = load %union.tree_node*, %union.tree_node** %finally_block, align 8
  %3038 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call6497 = call %struct.rtx_def* @expand_expr(%union.tree_node* %3037, %struct.rtx_def* %3038, i32 0, i32 0)
  %3039 = load %struct.rtx_def*, %struct.rtx_def** %return_link, align 8
  call void @emit_indirect_jump(%struct.rtx_def* %3039)
  %3040 = load %struct.rtx_def*, %struct.rtx_def** %done_label, align 8
  %call6498 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %3040)
  %3041 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %3041, %struct.rtx_def** %retval
  br label %return

sw.bb.6499:                                       ; preds = %if.end.185
  %3042 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6500 = bitcast %union.tree_node* %3042 to %struct.tree_exp*
  %operands6501 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6500, i32 0, i32 2
  %arrayidx6502 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6501, i32 0, i64 0
  %3043 = load %union.tree_node*, %union.tree_node** %arrayidx6502, align 8
  %3044 = bitcast %union.tree_node* %3043 to %struct.rtx_def*
  store %struct.rtx_def* %3044, %struct.rtx_def** %subr, align 8
  %3045 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6504 = bitcast %union.tree_node* %3045 to %struct.tree_exp*
  %operands6505 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6504, i32 0, i32 2
  %arrayidx6506 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6505, i32 0, i64 1
  %3046 = bitcast %union.tree_node** %arrayidx6506 to %struct.rtx_def**
  %3047 = load %struct.rtx_def*, %struct.rtx_def** %3046, align 8
  store %struct.rtx_def* %3047, %struct.rtx_def** %return_link6503, align 8
  %call6507 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call6507, %struct.rtx_def** %return_address, align 8
  %3048 = load %struct.rtx_def*, %struct.rtx_def** %return_link6503, align 8
  %3049 = load i32, i32* @target_flags, align 4
  %and6508 = and i32 %3049, 33554432
  %tobool6509 = icmp ne i32 %and6508, 0
  %cond6510 = select i1 %tobool6509, i32 5, i32 4
  %3050 = load %struct.rtx_def*, %struct.rtx_def** %return_address, align 8
  %call6511 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond6510, %struct.rtx_def* %3050)
  %call6512 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3048, %struct.rtx_def* %call6511)
  %3051 = load %struct.rtx_def*, %struct.rtx_def** %subr, align 8
  call void @emit_jump(%struct.rtx_def* %3051)
  %3052 = load %struct.rtx_def*, %struct.rtx_def** %return_address, align 8
  %call6513 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %3052)
  %3053 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %3053, %struct.rtx_def** %retval
  br label %return

sw.bb.6514:                                       ; preds = %if.end.185
  %3054 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6515 = bitcast %union.tree_node* %3054 to %struct.tree_exp*
  %operands6516 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6515, i32 0, i32 2
  %arrayidx6517 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6516, i32 0, i64 0
  %3055 = load %union.tree_node*, %union.tree_node** %arrayidx6517, align 8
  %3056 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call6518 = call %struct.rtx_def* @expand_builtin_va_arg(%union.tree_node* %3055, %union.tree_node* %3056)
  store %struct.rtx_def* %call6518, %struct.rtx_def** %retval
  br label %return

sw.bb.6519:                                       ; preds = %if.end.185
  %3057 = load %struct.function*, %struct.function** @cfun, align 8
  %call6520 = call %struct.rtx_def* @get_exception_pointer(%struct.function* %3057)
  store %struct.rtx_def* %call6520, %struct.rtx_def** %retval
  br label %return

sw.bb.6521:                                       ; preds = %if.end.185
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8853, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

sw.default:                                       ; preds = %if.end.185
  %3058 = load %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)** @lang_expand_expr, align 8
  %3059 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %3060 = load %struct.rtx_def*, %struct.rtx_def** %original_target, align 8
  %3061 = load i32, i32* %tmode.addr, align 4
  %3062 = load i32, i32* %modifier.addr, align 4
  %call6522 = call %struct.rtx_def* %3058(%union.tree_node* %3059, %struct.rtx_def* %3060, i32 %3061, i32 %3062)
  store %struct.rtx_def* %call6522, %struct.rtx_def** %retval
  br label %return

binop:                                            ; preds = %sw.bb.4722, %sw.bb.4721, %sw.bb.4720, %if.end.4453, %cond.end.4029, %if.then.3693
  %3063 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %3064 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6523 = bitcast %union.tree_node* %3064 to %struct.tree_exp*
  %operands6524 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6523, i32 0, i32 2
  %arrayidx6525 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6524, i32 0, i64 1
  %3065 = load %union.tree_node*, %union.tree_node** %arrayidx6525, align 8
  %call6526 = call i32 @safe_from_p(%struct.rtx_def* %3063, %union.tree_node* %3065, i32 1)
  %tobool6527 = icmp ne i32 %call6526, 0
  br i1 %tobool6527, label %if.end.6529, label %if.then.6528

if.then.6528:                                     ; preds = %binop
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.6529

if.end.6529:                                      ; preds = %if.then.6528, %binop
  %3066 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6530 = bitcast %union.tree_node* %3066 to %struct.tree_exp*
  %operands6531 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6530, i32 0, i32 2
  %arrayidx6532 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6531, i32 0, i64 0
  %3067 = load %union.tree_node*, %union.tree_node** %arrayidx6532, align 8
  %3068 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call6533 = call %struct.rtx_def* @expand_expr(%union.tree_node* %3067, %struct.rtx_def* %3068, i32 0, i32 0)
  store %struct.rtx_def* %call6533, %struct.rtx_def** %op0, align 8
  %3069 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6534 = bitcast %union.tree_node* %3069 to %struct.tree_exp*
  %operands6535 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6534, i32 0, i32 2
  %arrayidx6536 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6535, i32 0, i64 1
  %3070 = load %union.tree_node*, %union.tree_node** %arrayidx6536, align 8
  %call6537 = call %struct.rtx_def* @expand_expr(%union.tree_node* %3070, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call6537, %struct.rtx_def** %op1, align 8
  br label %binop2

binop2:                                           ; preds = %if.end.6529, %if.end.4344, %if.then.3650
  %3071 = load i32, i32* %mode, align 4
  %3072 = load %struct.optab*, %struct.optab** %this_optab, align 8
  %3073 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %3074 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %3075 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %3076 = load i32, i32* %unsignedp, align 4
  %call6538 = call %struct.rtx_def* @expand_binop(i32 %3071, %struct.optab* %3072, %struct.rtx_def* %3073, %struct.rtx_def* %3074, %struct.rtx_def* %3075, i32 %3076, i32 3)
  store %struct.rtx_def* %call6538, %struct.rtx_def** %temp, align 8
  %3077 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %cmp6539 = icmp eq %struct.rtx_def* %3077, null
  br i1 %cmp6539, label %if.then.6541, label %if.end.6542

if.then.6541:                                     ; preds = %binop2
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 8870, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_expr, i32 0, i32 0)) #6
  unreachable

if.end.6542:                                      ; preds = %binop2
  %3078 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %3078, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.6542, %sw.default, %sw.bb.6519, %sw.bb.6514, %sw.bb.6499, %sw.bb.6473, %sw.bb.6465, %if.end.6464, %sw.bb.6407, %sw.bb.6401, %if.end.6400, %if.end.6355, %if.then.6308, %if.then.6176, %if.then.6124, %sw.bb.6068, %sw.bb.6066, %if.end.6065, %if.end.6048, %cond.end.6043, %sw.bb.5930, %if.end.5918, %if.then.5904, %if.then.5853, %if.end.5803, %if.then.5447, %if.end.5069, %if.then.5063, %if.then.5048, %if.then.5011, %cond.end.4893, %if.end.4881, %cond.end.4870, %if.end.4821, %if.end.4801, %if.then.4749, %if.end.4730, %if.end.4719, %if.end.4709, %if.end.4697, %if.then.4644, %if.end.4566, %if.then.4565, %if.then.4556, %if.end.4541, %if.end.4509, %if.end.4481, %if.end.4461, %if.then.4442, %if.end.4413, %if.end.4396, %if.end.4386, %if.end.4084, %if.else.3980, %if.then.3974, %cond.end.3939, %if.end.3681, %if.end.3565, %if.end.3401, %if.end.3128, %if.then.3105, %if.then.3098, %if.else.3088, %if.then.3085, %if.then.3031, %if.end.3020, %if.end.2981, %if.then.2910, %if.then.2886, %if.end.2878, %if.else.2876, %if.then.2874, %if.end.2821, %if.end.2809, %if.end.2784, %if.then.2703, %cond.end.2592, %if.end.2537, %if.then.2524, %if.end.2450, %if.end.2360, %if.end.2232, %if.end.1910, %if.then.1769, %if.then.1727, %if.then.1634, %if.then.1561, %if.end.1486, %if.then.1464, %if.end.1420, %if.end.1359, %for.end, %if.end.1277, %while.end, %sw.bb.1212, %if.end.1205, %if.end.1193, %sw.bb.1178, %if.end.1177, %sw.bb.1148, %if.end.1145, %sw.bb.1127, %if.end.1123, %if.then.1109, %if.end.987, %if.end.941, %if.end.926, %if.then.916, %sw.bb.873, %sw.bb.870, %if.end.869, %cond.end.851, %cond.end.830, %if.end.750, %if.then.242, %if.end.232, %if.then.141, %if.then.133, %if.then.108, %if.then.87, %if.end.72, %if.then.47, %if.end, %if.then.17
  %3079 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %3079
}

; Function Attrs: nounwind uwtable
define void @move_block_to_reg(i32 %regno, %struct.rtx_def* %x, i32 %nregs, i32 %mode) #0 {
entry:
  %regno.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %nregs.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %nregs, i32* %nregs.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* %nregs.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 67
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load2 = load i32, i32* %4, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 68
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load6 = load i32, i32* %6, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 54
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.5
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load10 = load i32, i32* %8, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 55
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.9
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load14 = load i32, i32* %10, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 58
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.13
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load18 = load i32, i32* %12, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 134
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %lor.lhs.false.17
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load22 = load i32, i32* %14, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 56
  br i1 %cmp24, label %land.lhs.true, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.21
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load26 = load i32, i32* %16, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 140
  br i1 %cmp28, label %land.lhs.true, label %if.end.31

land.lhs.true:                                    ; preds = %lor.lhs.false.25, %lor.lhs.false.21, %lor.lhs.false.17, %lor.lhs.false.13, %lor.lhs.false.9, %lor.lhs.false.5, %lor.lhs.false, %if.end
  br i1 true, label %if.end.31, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true
  %17 = load i32, i32* %mode.addr, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call %struct.rtx_def* @force_const_mem(i32 %17, %struct.rtx_def* %18)
  %call30 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %call)
  store %struct.rtx_def* %call30, %struct.rtx_def** %x.addr, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.29, %land.lhs.true, %lor.lhs.false.25
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.31
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %nregs.addr, align 4
  %cmp32 = icmp slt i32 %19, %20
  br i1 %cmp32, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i32, i32* @word_mode, align 4
  %22 = load i32, i32* %regno.addr, align 4
  %23 = load i32, i32* %i, align 4
  %add = add nsw i32 %22, %23
  %call33 = call %struct.rtx_def* @gen_rtx_REG(i32 %21, i32 %add)
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %mode.addr, align 4
  %call34 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %24, i32 %25, i32 %26)
  %call35 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call33, %struct.rtx_def* %call34)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

declare %struct.rtx_def* @validize_mem(%struct.rtx_def*) #1

declare %struct.rtx_def* @force_const_mem(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @operand_subword_force(%struct.rtx_def*, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @move_block_from_reg(i32 %regno, %struct.rtx_def* %x, i32 %nregs, i32 %size) #0 {
entry:
  %regno.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %nregs.addr = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %mode = alloca i32, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %shift = alloca %struct.rtx_def*, align 8
  %tem29 = alloca %struct.rtx_def*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %nregs, i32* %nregs.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %nregs.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 8, i32 4
  %cmp1 = icmp sle i32 %1, %cond
  br i1 %cmp1, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* %size.addr, align 4
  %mul = mul nsw i32 %3, 8
  %call = call i32 @mode_for_size(i32 %mul, i32 1, i32 0)
  store i32 %call, i32* %mode, align 4
  %cmp2 = icmp ne i32 %call, 51
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %5 = load i32, i32* %mode, align 4
  %call4 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %4, i32 %5, i64 0, i32 1, i32 1)
  %6 = load i32, i32* %mode, align 4
  %7 = load i32, i32* %regno.addr, align 4
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 %6, i32 %7)
  %call6 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call4, %struct.rtx_def* %call5)
  br label %for.end

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %8 = load i32, i32* %size.addr, align 4
  %9 = load i32, i32* @target_flags, align 4
  %and8 = and i32 %9, 33554432
  %tobool9 = icmp ne i32 %and8, 0
  %cond10 = select i1 %tobool9, i32 8, i32 4
  %cmp11 = icmp slt i32 %8, %cond10
  br i1 %cmp11, label %land.lhs.true.12, label %if.end.26

land.lhs.true.12:                                 ; preds = %if.end.7
  br i1 false, label %if.then.13, label %if.end.26

if.then.13:                                       ; preds = %land.lhs.true.12
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call14 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %10, i32 0, i32 1, i32 51)
  store %struct.rtx_def* %call14, %struct.rtx_def** %tem, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %cmp15 = icmp eq %struct.rtx_def* %11, null
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.then.13
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1896, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.move_block_from_reg, i32 0, i32 0)) #6
  unreachable

if.end.17:                                        ; preds = %if.then.13
  %12 = load i32, i32* @word_mode, align 4
  %13 = load i32, i32* @word_mode, align 4
  %14 = load i32, i32* %regno.addr, align 4
  %call18 = call %struct.rtx_def* @gen_rtx_REG(i32 %13, i32 %14)
  %15 = load i32, i32* @target_flags, align 4
  %and19 = and i32 %15, 33554432
  %tobool20 = icmp ne i32 %and19, 0
  %cond21 = select i1 %tobool20, i32 8, i32 4
  %16 = load i32, i32* %size.addr, align 4
  %sub = sub nsw i32 %cond21, %16
  %mul22 = mul nsw i32 %sub, 8
  %conv = sext i32 %mul22 to i64
  %call23 = call %union.tree_node* @build_int_2_wide(i64 %conv, i64 0)
  %call24 = call %struct.rtx_def* @expand_shift(i32 82, i32 %12, %struct.rtx_def* %call18, %union.tree_node* %call23, %struct.rtx_def* null, i32 0)
  store %struct.rtx_def* %call24, %struct.rtx_def** %shift, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %shift, align 8
  %call25 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %17, %struct.rtx_def* %18)
  br label %for.end

if.end.26:                                        ; preds = %land.lhs.true.12, %if.end.7
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.26
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %nregs.addr, align 4
  %cmp27 = icmp slt i32 %19, %20
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %22 = load i32, i32* %i, align 4
  %call30 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %21, i32 %22, i32 1, i32 51)
  store %struct.rtx_def* %call30, %struct.rtx_def** %tem29, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %tem29, align 8
  %cmp31 = icmp eq %struct.rtx_def* %23, null
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1928, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.move_block_from_reg, i32 0, i32 0)) #6
  unreachable

if.end.34:                                        ; preds = %for.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tem29, align 8
  %25 = load i32, i32* @word_mode, align 4
  %26 = load i32, i32* %regno.addr, align 4
  %27 = load i32, i32* %i, align 4
  %add = add nsw i32 %26, %27
  %call35 = call %struct.rtx_def* @gen_rtx_REG(i32 %25, i32 %add)
  %call36 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %24, %struct.rtx_def* %call35)
  br label %for.inc

for.inc:                                          ; preds = %if.end.34
  %28 = load i32, i32* %i, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %if.then.3, %if.end.17, %for.cond
  ret void
}

declare i32 @mode_for_size(i32, i32, i32) #1

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @emit_group_load(%struct.rtx_def* %dst, %struct.rtx_def* %orig_src, i32 %ssize) #0 {
entry:
  %dst.addr = alloca %struct.rtx_def*, align 8
  %orig_src.addr = alloca %struct.rtx_def*, align 8
  %ssize.addr = alloca i32, align 4
  %tmps = alloca %struct.rtx_def**, align 8
  %src = alloca %struct.rtx_def*, align 8
  %start = alloca i32, align 4
  %i = alloca i32, align 4
  %mode = alloca i32, align 4
  %bytepos = alloca i64, align 8
  %bytelen = alloca i32, align 4
  %shift = alloca i32, align 4
  %mem = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %dst, %struct.rtx_def** %dst.addr, align 8
  store %struct.rtx_def* %orig_src, %struct.rtx_def** %orig_src.addr, align 8
  store i32 %ssize, i32* %ssize.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 39
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1953, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.emit_group_load, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %3 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %3, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %start, align 4
  br label %if.end.5

if.else:                                          ; preds = %if.end
  store i32 1, i32* %start, align 4
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtvec8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec8, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %7, i32 0, i32 0
  %8 = load i32, i32* %num_elem, align 4
  %conv = sext i32 %8 to i64
  %mul = mul i64 8, %conv
  %9 = alloca i8, i64 %mul
  %10 = bitcast i8* %9 to %struct.rtx_def**
  store %struct.rtx_def** %10, %struct.rtx_def*** %tmps, align 8
  %11 = load i32, i32* %start, align 4
  store i32 %11, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.5
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 0
  %rtvec11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtvec_def**
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec11, align 8
  %num_elem12 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 0
  %15 = load i32, i32* %num_elem12, align 4
  %cmp13 = icmp slt i32 %12, %15
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtvec17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtvec_def**
  %18 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec17, align 8
  %elem18 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %18, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem18, i32 0, i64 %idxprom
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx22, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load23 = load i32, i32* %21, align 8
  %bf.lshr = lshr i32 %bf.load23, 16
  %bf.clear24 = and i32 %bf.lshr, 255
  store i32 %bf.clear24, i32* %mode, align 4
  %22 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %22 to i64
  %23 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtvec28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %24 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec28, align 8
  %elem29 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %24, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem29, i32 0, i64 %idxprom25
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx30, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 1
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx35 to i64*
  %27 = load i64, i64* %rtwint, align 8
  store i64 %27, i64* %bytepos, align 8
  %28 = load i32, i32* %mode, align 4
  %idxprom36 = sext i32 %28 to i64
  %arrayidx37 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom36
  %29 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %29 to i32
  store i32 %conv38, i32* %bytelen, align 4
  store i32 0, i32* %shift, align 4
  %30 = load i32, i32* %ssize.addr, align 4
  %cmp39 = icmp sge i32 %30, 0
  br i1 %cmp39, label %land.lhs.true, label %if.end.58

land.lhs.true:                                    ; preds = %for.body
  %31 = load i64, i64* %bytepos, align 8
  %32 = load i32, i32* %bytelen, align 4
  %conv41 = zext i32 %32 to i64
  %add = add nsw i64 %31, %conv41
  %33 = load i32, i32* %ssize.addr, align 4
  %conv42 = sext i32 %33 to i64
  %cmp43 = icmp sgt i64 %add, %conv42
  br i1 %cmp43, label %if.then.45, label %if.end.58

if.then.45:                                       ; preds = %land.lhs.true
  %34 = load i32, i32* %bytelen, align 4
  %conv46 = zext i32 %34 to i64
  %35 = load i32, i32* %ssize.addr, align 4
  %conv47 = sext i32 %35 to i64
  %36 = load i64, i64* %bytepos, align 8
  %sub = sub nsw i64 %conv47, %36
  %sub48 = sub nsw i64 %conv46, %sub
  %mul49 = mul nsw i64 %sub48, 8
  %conv50 = trunc i64 %mul49 to i32
  store i32 %conv50, i32* %shift, align 4
  %37 = load i32, i32* %ssize.addr, align 4
  %conv51 = sext i32 %37 to i64
  %38 = load i64, i64* %bytepos, align 8
  %sub52 = sub nsw i64 %conv51, %38
  %conv53 = trunc i64 %sub52 to i32
  store i32 %conv53, i32* %bytelen, align 4
  %39 = load i32, i32* %bytelen, align 4
  %cmp54 = icmp ule i32 %39, 0
  br i1 %cmp54, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.then.45
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1978, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.emit_group_load, i32 0, i32 0)) #6
  unreachable

if.end.57:                                        ; preds = %if.then.45
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %land.lhs.true, %for.body
  %40 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  store %struct.rtx_def* %40, %struct.rtx_def** %src, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load59 = load i32, i32* %42, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %cmp61 = icmp ne i32 %bf.clear60, 66
  br i1 %cmp61, label %land.lhs.true.63, label %if.end.128

land.lhs.true.63:                                 ; preds = %if.end.58
  %43 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load64 = load i32, i32* %44, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %cmp66 = icmp eq i32 %bf.clear65, 67
  br i1 %cmp66, label %lor.lhs.false.102, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.63
  %45 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load68 = load i32, i32* %46, align 8
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 68
  br i1 %cmp70, label %lor.lhs.false.102, label %lor.lhs.false.72

lor.lhs.false.72:                                 ; preds = %lor.lhs.false
  %47 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load73 = load i32, i32* %48, align 8
  %bf.clear74 = and i32 %bf.load73, 65535
  %cmp75 = icmp eq i32 %bf.clear74, 54
  br i1 %cmp75, label %lor.lhs.false.102, label %lor.lhs.false.77

lor.lhs.false.77:                                 ; preds = %lor.lhs.false.72
  %49 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load78 = load i32, i32* %50, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  %cmp80 = icmp eq i32 %bf.clear79, 55
  br i1 %cmp80, label %lor.lhs.false.102, label %lor.lhs.false.82

lor.lhs.false.82:                                 ; preds = %lor.lhs.false.77
  %51 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load83 = load i32, i32* %52, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 58
  br i1 %cmp85, label %lor.lhs.false.102, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %lor.lhs.false.82
  %53 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load88 = load i32, i32* %54, align 8
  %bf.clear89 = and i32 %bf.load88, 65535
  %cmp90 = icmp eq i32 %bf.clear89, 134
  br i1 %cmp90, label %lor.lhs.false.102, label %lor.lhs.false.92

lor.lhs.false.92:                                 ; preds = %lor.lhs.false.87
  %55 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load93 = load i32, i32* %56, align 8
  %bf.clear94 = and i32 %bf.load93, 65535
  %cmp95 = icmp eq i32 %bf.clear94, 56
  br i1 %cmp95, label %lor.lhs.false.102, label %lor.lhs.false.97

lor.lhs.false.97:                                 ; preds = %lor.lhs.false.92
  %57 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load98 = load i32, i32* %58, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 140
  br i1 %cmp100, label %lor.lhs.false.102, label %if.then.114

lor.lhs.false.102:                                ; preds = %lor.lhs.false.97, %lor.lhs.false.92, %lor.lhs.false.87, %lor.lhs.false.82, %lor.lhs.false.77, %lor.lhs.false.72, %lor.lhs.false, %land.lhs.true.63
  %59 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %60 = bitcast %struct.rtx_def* %59 to i32*
  %bf.load103 = load i32, i32* %60, align 8
  %bf.lshr104 = lshr i32 %bf.load103, 16
  %bf.clear105 = and i32 %bf.lshr104, 255
  %61 = load i32, i32* %mode, align 4
  %cmp106 = icmp ne i32 %bf.clear105, %61
  br i1 %cmp106, label %land.lhs.true.108, label %if.end.128

land.lhs.true.108:                                ; preds = %lor.lhs.false.102
  %62 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load109 = load i32, i32* %63, align 8
  %bf.lshr110 = lshr i32 %bf.load109, 16
  %bf.clear111 = and i32 %bf.lshr110, 255
  %cmp112 = icmp ne i32 %bf.clear111, 0
  br i1 %cmp112, label %if.then.114, label %if.end.128

if.then.114:                                      ; preds = %land.lhs.true.108, %lor.lhs.false.97
  %64 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %65 = bitcast %struct.rtx_def* %64 to i32*
  %bf.load115 = load i32, i32* %65, align 8
  %bf.lshr116 = lshr i32 %bf.load115, 16
  %bf.clear117 = and i32 %bf.lshr116, 255
  %cmp118 = icmp eq i32 %bf.clear117, 0
  br i1 %cmp118, label %if.then.120, label %if.else.121

if.then.120:                                      ; preds = %if.then.114
  %66 = load i32, i32* %mode, align 4
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %66)
  store %struct.rtx_def* %call, %struct.rtx_def** %src, align 8
  br label %if.end.126

if.else.121:                                      ; preds = %if.then.114
  %67 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %68 = bitcast %struct.rtx_def* %67 to i32*
  %bf.load122 = load i32, i32* %68, align 8
  %bf.lshr123 = lshr i32 %bf.load122, 16
  %bf.clear124 = and i32 %bf.lshr123, 255
  %call125 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear124)
  store %struct.rtx_def* %call125, %struct.rtx_def** %src, align 8
  br label %if.end.126

if.end.126:                                       ; preds = %if.else.121, %if.then.120
  %69 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %70 = load %struct.rtx_def*, %struct.rtx_def** %orig_src.addr, align 8
  %call127 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %69, %struct.rtx_def* %70)
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.126, %land.lhs.true.108, %lor.lhs.false.102, %if.end.58
  %71 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %72 = bitcast %struct.rtx_def* %71 to i32*
  %bf.load129 = load i32, i32* %72, align 8
  %bf.clear130 = and i32 %bf.load129, 65535
  %cmp131 = icmp eq i32 %bf.clear130, 66
  br i1 %cmp131, label %land.lhs.true.133, label %if.else.164

land.lhs.true.133:                                ; preds = %if.end.128
  %73 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx135 to %struct.mem_attrs**
  %74 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp136 = icmp ne %struct.mem_attrs* %74, null
  br i1 %cmp136, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.133
  %75 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i32 0, i64 1
  %rtmem140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.mem_attrs**
  %76 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem140, align 8
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %76, i32 0, i32 4
  %77 = load i32, i32* %align, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.133
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %77, %cond.true ], [ 8, %cond.false ]
  %78 = load i32, i32* %mode, align 4
  %call141 = call i32 @get_mode_alignment(i32 %78)
  %cmp142 = icmp uge i32 %cond, %call141
  br i1 %cmp142, label %land.lhs.true.144, label %if.else.164

land.lhs.true.144:                                ; preds = %cond.end
  %79 = load i64, i64* %bytepos, align 8
  %mul145 = mul nsw i64 %79, 8
  %80 = load i32, i32* %mode, align 4
  %call146 = call i32 @get_mode_alignment(i32 %80)
  %conv147 = zext i32 %call146 to i64
  %rem = srem i64 %mul145, %conv147
  %cmp148 = icmp eq i64 %rem, 0
  br i1 %cmp148, label %land.lhs.true.150, label %if.else.164

land.lhs.true.150:                                ; preds = %land.lhs.true.144
  %81 = load i32, i32* %bytelen, align 4
  %82 = load i32, i32* %mode, align 4
  %idxprom151 = sext i32 %82 to i64
  %arrayidx152 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom151
  %83 = load i8, i8* %arrayidx152, align 1
  %conv153 = zext i8 %83 to i32
  %cmp154 = icmp eq i32 %81, %conv153
  br i1 %cmp154, label %if.then.156, label %if.else.164

if.then.156:                                      ; preds = %land.lhs.true.150
  %84 = load i32, i32* %mode, align 4
  %call157 = call %struct.rtx_def* @gen_reg_rtx(i32 %84)
  %85 = load i32, i32* %i, align 4
  %idxprom158 = sext i32 %85 to i64
  %86 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx159 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %86, i64 %idxprom158
  store %struct.rtx_def* %call157, %struct.rtx_def** %arrayidx159, align 8
  %87 = load i32, i32* %i, align 4
  %idxprom160 = sext i32 %87 to i64
  %88 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx161 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %88, i64 %idxprom160
  %89 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx161, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %91 = load i32, i32* %mode, align 4
  %92 = load i64, i64* %bytepos, align 8
  %call162 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %90, i32 %91, i64 %92, i32 1, i32 1)
  %call163 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %89, %struct.rtx_def* %call162)
  br label %if.end.382

if.else.164:                                      ; preds = %land.lhs.true.150, %land.lhs.true.144, %cond.end, %if.end.128
  %93 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %bf.load165 = load i32, i32* %94, align 8
  %bf.clear166 = and i32 %bf.load165, 65535
  %cmp167 = icmp eq i32 %bf.clear166, 65
  br i1 %cmp167, label %if.then.169, label %if.else.318

if.then.169:                                      ; preds = %if.else.164
  %95 = load i64, i64* %bytepos, align 8
  %cmp170 = icmp eq i64 %95, 0
  br i1 %cmp170, label %land.lhs.true.172, label %lor.lhs.false.184

land.lhs.true.172:                                ; preds = %if.then.169
  %96 = load i32, i32* %bytelen, align 4
  %97 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i32 0, i64 0
  %rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtx175, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load176 = load i32, i32* %99, align 8
  %bf.lshr177 = lshr i32 %bf.load176, 16
  %bf.clear178 = and i32 %bf.lshr177, 255
  %idxprom179 = sext i32 %bf.clear178 to i64
  %arrayidx180 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom179
  %100 = load i8, i8* %arrayidx180, align 1
  %conv181 = zext i8 %100 to i32
  %cmp182 = icmp eq i32 %96, %conv181
  br i1 %cmp182, label %if.then.208, label %lor.lhs.false.184

lor.lhs.false.184:                                ; preds = %land.lhs.true.172, %if.then.169
  %101 = load i64, i64* %bytepos, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i32 0, i64 0
  %rtx187 = bitcast %union.rtunion_def* %arrayidx186 to %struct.rtx_def**
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rtx187, align 8
  %104 = bitcast %struct.rtx_def* %103 to i32*
  %bf.load188 = load i32, i32* %104, align 8
  %bf.lshr189 = lshr i32 %bf.load188, 16
  %bf.clear190 = and i32 %bf.lshr189, 255
  %idxprom191 = sext i32 %bf.clear190 to i64
  %arrayidx192 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom191
  %105 = load i8, i8* %arrayidx192, align 1
  %conv193 = zext i8 %105 to i64
  %cmp194 = icmp eq i64 %101, %conv193
  br i1 %cmp194, label %land.lhs.true.196, label %if.else.297

land.lhs.true.196:                                ; preds = %lor.lhs.false.184
  %106 = load i32, i32* %bytelen, align 4
  %107 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i32 0, i64 1
  %rtx199 = bitcast %union.rtunion_def* %arrayidx198 to %struct.rtx_def**
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtx199, align 8
  %109 = bitcast %struct.rtx_def* %108 to i32*
  %bf.load200 = load i32, i32* %109, align 8
  %bf.lshr201 = lshr i32 %bf.load200, 16
  %bf.clear202 = and i32 %bf.lshr201, 255
  %idxprom203 = sext i32 %bf.clear202 to i64
  %arrayidx204 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom203
  %110 = load i8, i8* %arrayidx204, align 1
  %conv205 = zext i8 %110 to i32
  %cmp206 = icmp eq i32 %106, %conv205
  br i1 %cmp206, label %if.then.208, label %if.else.297

if.then.208:                                      ; preds = %land.lhs.true.196, %land.lhs.true.172
  %111 = load i64, i64* %bytepos, align 8
  %cmp209 = icmp ne i64 %111, 0
  %conv210 = zext i1 %cmp209 to i32
  %idxprom211 = sext i32 %conv210 to i64
  %112 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld212, i32 0, i64 %idxprom211
  %rtx214 = bitcast %union.rtunion_def* %arrayidx213 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx214, align 8
  %114 = load i32, i32* %i, align 4
  %idxprom215 = sext i32 %114 to i64
  %115 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx216 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %115, i64 %idxprom215
  store %struct.rtx_def* %113, %struct.rtx_def** %arrayidx216, align 8
  %116 = load i32, i32* %i, align 4
  %idxprom217 = sext i32 %116 to i64
  %117 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx218 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %117, i64 %idxprom217
  %118 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx218, align 8
  %119 = bitcast %struct.rtx_def* %118 to i32*
  %bf.load219 = load i32, i32* %119, align 8
  %bf.clear220 = and i32 %bf.load219, 65535
  %cmp221 = icmp eq i32 %bf.clear220, 67
  br i1 %cmp221, label %if.end.296, label %lor.lhs.false.223

lor.lhs.false.223:                                ; preds = %if.then.208
  %120 = load i32, i32* %i, align 4
  %idxprom224 = sext i32 %120 to i64
  %121 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx225 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %121, i64 %idxprom224
  %122 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx225, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load226 = load i32, i32* %123, align 8
  %bf.clear227 = and i32 %bf.load226, 65535
  %cmp228 = icmp eq i32 %bf.clear227, 68
  br i1 %cmp228, label %if.end.296, label %lor.lhs.false.230

lor.lhs.false.230:                                ; preds = %lor.lhs.false.223
  %124 = load i32, i32* %i, align 4
  %idxprom231 = sext i32 %124 to i64
  %125 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx232 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %125, i64 %idxprom231
  %126 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx232, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load233 = load i32, i32* %127, align 8
  %bf.clear234 = and i32 %bf.load233, 65535
  %cmp235 = icmp eq i32 %bf.clear234, 54
  br i1 %cmp235, label %if.end.296, label %lor.lhs.false.237

lor.lhs.false.237:                                ; preds = %lor.lhs.false.230
  %128 = load i32, i32* %i, align 4
  %idxprom238 = sext i32 %128 to i64
  %129 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx239 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %129, i64 %idxprom238
  %130 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx239, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %bf.load240 = load i32, i32* %131, align 8
  %bf.clear241 = and i32 %bf.load240, 65535
  %cmp242 = icmp eq i32 %bf.clear241, 55
  br i1 %cmp242, label %if.end.296, label %lor.lhs.false.244

lor.lhs.false.244:                                ; preds = %lor.lhs.false.237
  %132 = load i32, i32* %i, align 4
  %idxprom245 = sext i32 %132 to i64
  %133 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx246 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %133, i64 %idxprom245
  %134 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx246, align 8
  %135 = bitcast %struct.rtx_def* %134 to i32*
  %bf.load247 = load i32, i32* %135, align 8
  %bf.clear248 = and i32 %bf.load247, 65535
  %cmp249 = icmp eq i32 %bf.clear248, 58
  br i1 %cmp249, label %if.end.296, label %lor.lhs.false.251

lor.lhs.false.251:                                ; preds = %lor.lhs.false.244
  %136 = load i32, i32* %i, align 4
  %idxprom252 = sext i32 %136 to i64
  %137 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx253 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %137, i64 %idxprom252
  %138 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx253, align 8
  %139 = bitcast %struct.rtx_def* %138 to i32*
  %bf.load254 = load i32, i32* %139, align 8
  %bf.clear255 = and i32 %bf.load254, 65535
  %cmp256 = icmp eq i32 %bf.clear255, 134
  br i1 %cmp256, label %if.end.296, label %lor.lhs.false.258

lor.lhs.false.258:                                ; preds = %lor.lhs.false.251
  %140 = load i32, i32* %i, align 4
  %idxprom259 = sext i32 %140 to i64
  %141 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx260 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %141, i64 %idxprom259
  %142 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx260, align 8
  %143 = bitcast %struct.rtx_def* %142 to i32*
  %bf.load261 = load i32, i32* %143, align 8
  %bf.clear262 = and i32 %bf.load261, 65535
  %cmp263 = icmp eq i32 %bf.clear262, 56
  br i1 %cmp263, label %if.end.296, label %lor.lhs.false.265

lor.lhs.false.265:                                ; preds = %lor.lhs.false.258
  %144 = load i32, i32* %i, align 4
  %idxprom266 = sext i32 %144 to i64
  %145 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx267 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %145, i64 %idxprom266
  %146 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx267, align 8
  %147 = bitcast %struct.rtx_def* %146 to i32*
  %bf.load268 = load i32, i32* %147, align 8
  %bf.clear269 = and i32 %bf.load268, 65535
  %cmp270 = icmp eq i32 %bf.clear269, 140
  br i1 %cmp270, label %if.end.296, label %land.lhs.true.272

land.lhs.true.272:                                ; preds = %lor.lhs.false.265
  %148 = load i32, i32* %i, align 4
  %idxprom273 = sext i32 %148 to i64
  %149 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx274 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %149, i64 %idxprom273
  %150 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx274, align 8
  %151 = bitcast %struct.rtx_def* %150 to i32*
  %bf.load275 = load i32, i32* %151, align 8
  %bf.clear276 = and i32 %bf.load275, 65535
  %cmp277 = icmp ne i32 %bf.clear276, 61
  br i1 %cmp277, label %if.then.287, label %lor.lhs.false.279

lor.lhs.false.279:                                ; preds = %land.lhs.true.272
  %152 = load i32, i32* %i, align 4
  %idxprom280 = sext i32 %152 to i64
  %153 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx281 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %153, i64 %idxprom280
  %154 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx281, align 8
  %155 = bitcast %struct.rtx_def* %154 to i32*
  %bf.load282 = load i32, i32* %155, align 8
  %bf.lshr283 = lshr i32 %bf.load282, 16
  %bf.clear284 = and i32 %bf.lshr283, 255
  %156 = load i32, i32* %mode, align 4
  %cmp285 = icmp ne i32 %bf.clear284, %156
  br i1 %cmp285, label %if.then.287, label %if.end.296

if.then.287:                                      ; preds = %lor.lhs.false.279, %land.lhs.true.272
  %157 = load i32, i32* %i, align 4
  %idxprom288 = sext i32 %157 to i64
  %158 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx289 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %158, i64 %idxprom288
  %159 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx289, align 8
  %160 = load i32, i32* %bytelen, align 4
  %mul290 = mul i32 %160, 8
  %conv291 = zext i32 %mul290 to i64
  %161 = load i32, i32* %mode, align 4
  %162 = load i32, i32* %mode, align 4
  %163 = load i32, i32* %ssize.addr, align 4
  %conv292 = sext i32 %163 to i64
  %call293 = call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %159, i64 %conv291, i64 0, i32 1, %struct.rtx_def* null, i32 %161, i32 %162, i64 %conv292)
  %164 = load i32, i32* %i, align 4
  %idxprom294 = sext i32 %164 to i64
  %165 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx295 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %165, i64 %idxprom294
  store %struct.rtx_def* %call293, %struct.rtx_def** %arrayidx295, align 8
  br label %if.end.296

if.end.296:                                       ; preds = %if.then.287, %lor.lhs.false.279, %lor.lhs.false.265, %lor.lhs.false.258, %lor.lhs.false.251, %lor.lhs.false.244, %lor.lhs.false.237, %lor.lhs.false.230, %lor.lhs.false.223, %if.then.208
  br label %if.end.317

if.else.297:                                      ; preds = %land.lhs.true.196, %lor.lhs.false.184
  %166 = load i64, i64* %bytepos, align 8
  %cmp298 = icmp eq i64 %166, 0
  br i1 %cmp298, label %if.then.300, label %if.else.315

if.then.300:                                      ; preds = %if.else.297
  %167 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %168 = bitcast %struct.rtx_def* %167 to i32*
  %bf.load301 = load i32, i32* %168, align 8
  %bf.lshr302 = lshr i32 %bf.load301, 16
  %bf.clear303 = and i32 %bf.lshr302, 255
  %169 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %170 = bitcast %struct.rtx_def* %169 to i32*
  %bf.load304 = load i32, i32* %170, align 8
  %bf.lshr305 = lshr i32 %bf.load304, 16
  %bf.clear306 = and i32 %bf.lshr305, 255
  %idxprom307 = sext i32 %bf.clear306 to i64
  %arrayidx308 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom307
  %171 = load i8, i8* %arrayidx308, align 1
  %conv309 = zext i8 %171 to i64
  %call310 = call %struct.rtx_def* @assign_stack_temp(i32 %bf.clear303, i64 %conv309, i32 0)
  store %struct.rtx_def* %call310, %struct.rtx_def** %mem, align 8
  %172 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %173 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call311 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %172, %struct.rtx_def* %173)
  %174 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %175 = load i32, i32* %mode, align 4
  %call312 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %174, i32 %175, i64 0, i32 1, i32 1)
  %176 = load i32, i32* %i, align 4
  %idxprom313 = sext i32 %176 to i64
  %177 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx314 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %177, i64 %idxprom313
  store %struct.rtx_def* %call312, %struct.rtx_def** %arrayidx314, align 8
  br label %if.end.316

if.else.315:                                      ; preds = %if.else.297
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2028, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.emit_group_load, i32 0, i32 0)) #6
  unreachable

if.end.316:                                       ; preds = %if.then.300
  br label %if.end.317

if.end.317:                                       ; preds = %if.end.316, %if.end.296
  br label %if.end.381

if.else.318:                                      ; preds = %if.else.164
  %178 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %179 = bitcast %struct.rtx_def* %178 to i32*
  %bf.load319 = load i32, i32* %179, align 8
  %bf.clear320 = and i32 %bf.load319, 65535
  %cmp321 = icmp eq i32 %bf.clear320, 67
  br i1 %cmp321, label %if.then.369, label %lor.lhs.false.323

lor.lhs.false.323:                                ; preds = %if.else.318
  %180 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %181 = bitcast %struct.rtx_def* %180 to i32*
  %bf.load324 = load i32, i32* %181, align 8
  %bf.clear325 = and i32 %bf.load324, 65535
  %cmp326 = icmp eq i32 %bf.clear325, 68
  br i1 %cmp326, label %if.then.369, label %lor.lhs.false.328

lor.lhs.false.328:                                ; preds = %lor.lhs.false.323
  %182 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %183 = bitcast %struct.rtx_def* %182 to i32*
  %bf.load329 = load i32, i32* %183, align 8
  %bf.clear330 = and i32 %bf.load329, 65535
  %cmp331 = icmp eq i32 %bf.clear330, 54
  br i1 %cmp331, label %if.then.369, label %lor.lhs.false.333

lor.lhs.false.333:                                ; preds = %lor.lhs.false.328
  %184 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %185 = bitcast %struct.rtx_def* %184 to i32*
  %bf.load334 = load i32, i32* %185, align 8
  %bf.clear335 = and i32 %bf.load334, 65535
  %cmp336 = icmp eq i32 %bf.clear335, 55
  br i1 %cmp336, label %if.then.369, label %lor.lhs.false.338

lor.lhs.false.338:                                ; preds = %lor.lhs.false.333
  %186 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %187 = bitcast %struct.rtx_def* %186 to i32*
  %bf.load339 = load i32, i32* %187, align 8
  %bf.clear340 = and i32 %bf.load339, 65535
  %cmp341 = icmp eq i32 %bf.clear340, 58
  br i1 %cmp341, label %if.then.369, label %lor.lhs.false.343

lor.lhs.false.343:                                ; preds = %lor.lhs.false.338
  %188 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %189 = bitcast %struct.rtx_def* %188 to i32*
  %bf.load344 = load i32, i32* %189, align 8
  %bf.clear345 = and i32 %bf.load344, 65535
  %cmp346 = icmp eq i32 %bf.clear345, 134
  br i1 %cmp346, label %if.then.369, label %lor.lhs.false.348

lor.lhs.false.348:                                ; preds = %lor.lhs.false.343
  %190 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %191 = bitcast %struct.rtx_def* %190 to i32*
  %bf.load349 = load i32, i32* %191, align 8
  %bf.clear350 = and i32 %bf.load349, 65535
  %cmp351 = icmp eq i32 %bf.clear350, 56
  br i1 %cmp351, label %if.then.369, label %lor.lhs.false.353

lor.lhs.false.353:                                ; preds = %lor.lhs.false.348
  %192 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %193 = bitcast %struct.rtx_def* %192 to i32*
  %bf.load354 = load i32, i32* %193, align 8
  %bf.clear355 = and i32 %bf.load354, 65535
  %cmp356 = icmp eq i32 %bf.clear355, 140
  br i1 %cmp356, label %if.then.369, label %lor.lhs.false.358

lor.lhs.false.358:                                ; preds = %lor.lhs.false.353
  %194 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %195 = bitcast %struct.rtx_def* %194 to i32*
  %bf.load359 = load i32, i32* %195, align 8
  %bf.clear360 = and i32 %bf.load359, 65535
  %cmp361 = icmp eq i32 %bf.clear360, 61
  br i1 %cmp361, label %land.lhs.true.363, label %if.else.372

land.lhs.true.363:                                ; preds = %lor.lhs.false.358
  %196 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %197 = bitcast %struct.rtx_def* %196 to i32*
  %bf.load364 = load i32, i32* %197, align 8
  %bf.lshr365 = lshr i32 %bf.load364, 16
  %bf.clear366 = and i32 %bf.lshr365, 255
  %198 = load i32, i32* %mode, align 4
  %cmp367 = icmp eq i32 %bf.clear366, %198
  br i1 %cmp367, label %if.then.369, label %if.else.372

if.then.369:                                      ; preds = %land.lhs.true.363, %lor.lhs.false.353, %lor.lhs.false.348, %lor.lhs.false.343, %lor.lhs.false.338, %lor.lhs.false.333, %lor.lhs.false.328, %lor.lhs.false.323, %if.else.318
  %199 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %200 = load i32, i32* %i, align 4
  %idxprom370 = sext i32 %200 to i64
  %201 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx371 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %201, i64 %idxprom370
  store %struct.rtx_def* %199, %struct.rtx_def** %arrayidx371, align 8
  br label %if.end.380

if.else.372:                                      ; preds = %land.lhs.true.363, %lor.lhs.false.358
  %202 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %203 = load i32, i32* %bytelen, align 4
  %mul373 = mul i32 %203, 8
  %conv374 = zext i32 %mul373 to i64
  %204 = load i64, i64* %bytepos, align 8
  %mul375 = mul nsw i64 %204, 8
  %205 = load i32, i32* %mode, align 4
  %206 = load i32, i32* %mode, align 4
  %207 = load i32, i32* %ssize.addr, align 4
  %conv376 = sext i32 %207 to i64
  %call377 = call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %202, i64 %conv374, i64 %mul375, i32 1, %struct.rtx_def* null, i32 %205, i32 %206, i64 %conv376)
  %208 = load i32, i32* %i, align 4
  %idxprom378 = sext i32 %208 to i64
  %209 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx379 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %209, i64 %idxprom378
  store %struct.rtx_def* %call377, %struct.rtx_def** %arrayidx379, align 8
  br label %if.end.380

if.end.380:                                       ; preds = %if.else.372, %if.then.369
  br label %if.end.381

if.end.381:                                       ; preds = %if.end.380, %if.end.317
  br label %if.end.382

if.end.382:                                       ; preds = %if.end.381, %if.then.156
  br label %for.inc

for.inc:                                          ; preds = %if.end.382
  %210 = load i32, i32* %i, align 4
  %inc = add nsw i32 %210, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @emit_queue()
  %211 = load i32, i32* %start, align 4
  store i32 %211, i32* %i, align 4
  br label %for.cond.383

for.cond.383:                                     ; preds = %for.inc.403, %for.end
  %212 = load i32, i32* %i, align 4
  %213 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %fld384 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %213, i32 0, i32 1
  %arrayidx385 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld384, i32 0, i64 0
  %rtvec386 = bitcast %union.rtunion_def* %arrayidx385 to %struct.rtvec_def**
  %214 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec386, align 8
  %num_elem387 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %214, i32 0, i32 0
  %215 = load i32, i32* %num_elem387, align 4
  %cmp388 = icmp slt i32 %212, %215
  br i1 %cmp388, label %for.body.390, label %for.end.405

for.body.390:                                     ; preds = %for.cond.383
  %216 = load i32, i32* %i, align 4
  %idxprom391 = sext i32 %216 to i64
  %217 = load %struct.rtx_def*, %struct.rtx_def** %dst.addr, align 8
  %fld392 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %217, i32 0, i32 1
  %arrayidx393 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld392, i32 0, i64 0
  %rtvec394 = bitcast %union.rtunion_def* %arrayidx393 to %struct.rtvec_def**
  %218 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec394, align 8
  %elem395 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %218, i32 0, i32 1
  %arrayidx396 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem395, i32 0, i64 %idxprom391
  %219 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx396, align 8
  %fld397 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1
  %arrayidx398 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld397, i32 0, i64 0
  %rtx399 = bitcast %union.rtunion_def* %arrayidx398 to %struct.rtx_def**
  %220 = load %struct.rtx_def*, %struct.rtx_def** %rtx399, align 8
  %221 = load i32, i32* %i, align 4
  %idxprom400 = sext i32 %221 to i64
  %222 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx401 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %222, i64 %idxprom400
  %223 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx401, align 8
  %call402 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %220, %struct.rtx_def* %223)
  br label %for.inc.403

for.inc.403:                                      ; preds = %for.body.390
  %224 = load i32, i32* %i, align 4
  %inc404 = add nsw i32 %224, 1
  store i32 %inc404, i32* %i, align 4
  br label %for.cond.383

for.end.405:                                      ; preds = %for.cond.383
  ret void
}

declare %struct.rtx_def* @extract_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*, i32, i32, i64) #1

declare %struct.rtx_def* @assign_stack_temp(i32, i64, i32) #1

; Function Attrs: nounwind uwtable
define void @emit_group_store(%struct.rtx_def* %orig_dst, %struct.rtx_def* %src, i32 %ssize) #0 {
entry:
  %orig_dst.addr = alloca %struct.rtx_def*, align 8
  %src.addr = alloca %struct.rtx_def*, align 8
  %ssize.addr = alloca i32, align 4
  %tmps = alloca %struct.rtx_def**, align 8
  %dst = alloca %struct.rtx_def*, align 8
  %start = alloca i32, align 4
  %i = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %bytepos = alloca i64, align 8
  %mode = alloca i32, align 4
  %bytelen = alloca i32, align 4
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %orig_dst, %struct.rtx_def** %orig_dst.addr, align 8
  store %struct.rtx_def* %src, %struct.rtx_def** %src.addr, align 8
  store i32 %ssize, i32* %ssize.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 39
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2063, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.emit_group_store, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %3 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %3, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %start, align 4
  br label %if.end.5

if.else:                                          ; preds = %if.end
  store i32 1, i32* %start, align 4
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtvec8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec8, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %7, i32 0, i32 0
  %8 = load i32, i32* %num_elem, align 4
  %conv = sext i32 %8 to i64
  %mul = mul i64 8, %conv
  %9 = alloca i8, i64 %mul
  %10 = bitcast i8* %9 to %struct.rtx_def**
  store %struct.rtx_def** %10, %struct.rtx_def*** %tmps, align 8
  %11 = load i32, i32* %start, align 4
  store i32 %11, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.5
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 0
  %rtvec11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtvec_def**
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec11, align 8
  %num_elem12 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 0
  %15 = load i32, i32* %num_elem12, align 4
  %cmp13 = icmp slt i32 %12, %15
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtvec17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtvec_def**
  %18 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec17, align 8
  %elem18 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %18, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem18, i32 0, i64 %idxprom
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx22, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %reg, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load23 = load i32, i32* %22, align 8
  %bf.lshr = lshr i32 %bf.load23, 16
  %bf.clear24 = and i32 %bf.lshr, 255
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear24)
  %23 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %23 to i64
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 %idxprom25
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx26, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %25 to i64
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %26, i64 %idxprom27
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call29 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %27, %struct.rtx_def* %28)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @emit_queue()
  %30 = load %struct.rtx_def*, %struct.rtx_def** %orig_dst.addr, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %dst, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load30 = load i32, i32* %32, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 39
  br i1 %cmp32, label %if.then.34, label %if.else.44

if.then.34:                                       ; preds = %for.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %call35 = call i32 @rtx_equal_p(%struct.rtx_def* %33, %struct.rtx_def* %34)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.then.34
  br label %if.end.201

if.end.38:                                        ; preds = %if.then.34
  %35 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load39 = load i32, i32* %36, align 8
  %bf.lshr40 = lshr i32 %bf.load39, 16
  %bf.clear41 = and i32 %bf.lshr40, 255
  %37 = load i32, i32* %ssize.addr, align 4
  %conv42 = sext i32 %37 to i64
  %call43 = call %struct.rtx_def* @assign_stack_temp(i32 %bf.clear41, i64 %conv42, i32 0)
  store %struct.rtx_def* %call43, %struct.rtx_def** %temp, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %40 = load i32, i32* %ssize.addr, align 4
  call void @emit_group_store(%struct.rtx_def* %38, %struct.rtx_def* %39, i32 %40)
  %41 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %43 = load i32, i32* %ssize.addr, align 4
  call void @emit_group_load(%struct.rtx_def* %41, %struct.rtx_def* %42, i32 %43)
  br label %if.end.201

if.else.44:                                       ; preds = %for.end
  %44 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load45 = load i32, i32* %45, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp ne i32 %bf.clear46, 66
  br i1 %cmp47, label %land.lhs.true, label %if.end.59

land.lhs.true:                                    ; preds = %if.else.44
  %46 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load49 = load i32, i32* %47, align 8
  %bf.clear50 = and i32 %bf.load49, 65535
  %cmp51 = icmp ne i32 %bf.clear50, 65
  br i1 %cmp51, label %if.then.53, label %if.end.59

if.then.53:                                       ; preds = %land.lhs.true
  %48 = load %struct.rtx_def*, %struct.rtx_def** %orig_dst.addr, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load54 = load i32, i32* %49, align 8
  %bf.lshr55 = lshr i32 %bf.load54, 16
  %bf.clear56 = and i32 %bf.lshr55, 255
  %call57 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear56)
  store %struct.rtx_def* %call57, %struct.rtx_def** %dst, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call58 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %50, %struct.rtx_def* %51)
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.53, %land.lhs.true, %if.else.44
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59
  %52 = load i32, i32* %start, align 4
  store i32 %52, i32* %i, align 4
  br label %for.cond.61

for.cond.61:                                      ; preds = %for.inc.192, %if.end.60
  %53 = load i32, i32* %i, align 4
  %54 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i32 0, i64 0
  %rtvec64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtvec_def**
  %55 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec64, align 8
  %num_elem65 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %55, i32 0, i32 0
  %56 = load i32, i32* %num_elem65, align 4
  %cmp66 = icmp slt i32 %53, %56
  br i1 %cmp66, label %for.body.68, label %for.end.194

for.body.68:                                      ; preds = %for.cond.61
  %57 = load i32, i32* %i, align 4
  %idxprom69 = sext i32 %57 to i64
  %58 = load %struct.rtx_def*, %struct.rtx_def** %src.addr, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 0
  %rtvec72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtvec_def**
  %59 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec72, align 8
  %elem73 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %59, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem73, i32 0, i64 %idxprom69
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx74, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 1
  %rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx77, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx79 to i64*
  %62 = load i64, i64* %rtwint, align 8
  store i64 %62, i64* %bytepos, align 8
  %63 = load i32, i32* %i, align 4
  %idxprom80 = sext i32 %63 to i64
  %64 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx81 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %64, i64 %idxprom80
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx81, align 8
  %66 = bitcast %struct.rtx_def* %65 to i32*
  %bf.load82 = load i32, i32* %66, align 8
  %bf.lshr83 = lshr i32 %bf.load82, 16
  %bf.clear84 = and i32 %bf.lshr83, 255
  store i32 %bf.clear84, i32* %mode, align 4
  %67 = load i32, i32* %mode, align 4
  %idxprom85 = sext i32 %67 to i64
  %arrayidx86 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom85
  %68 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %68 to i32
  store i32 %conv87, i32* %bytelen, align 4
  %69 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  store %struct.rtx_def* %69, %struct.rtx_def** %dest, align 8
  %70 = load i32, i32* %ssize.addr, align 4
  %cmp88 = icmp sge i32 %70, 0
  br i1 %cmp88, label %land.lhs.true.90, label %if.end.98

land.lhs.true.90:                                 ; preds = %for.body.68
  %71 = load i64, i64* %bytepos, align 8
  %72 = load i32, i32* %bytelen, align 4
  %conv91 = zext i32 %72 to i64
  %add = add nsw i64 %71, %conv91
  %73 = load i32, i32* %ssize.addr, align 4
  %conv92 = sext i32 %73 to i64
  %cmp93 = icmp sgt i64 %add, %conv92
  br i1 %cmp93, label %if.then.95, label %if.end.98

if.then.95:                                       ; preds = %land.lhs.true.90
  %74 = load i32, i32* %ssize.addr, align 4
  %conv96 = sext i32 %74 to i64
  %75 = load i64, i64* %bytepos, align 8
  %sub = sub nsw i64 %conv96, %75
  %conv97 = trunc i64 %sub to i32
  store i32 %conv97, i32* %bytelen, align 4
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.95, %land.lhs.true.90, %for.body.68
  %76 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load99 = load i32, i32* %77, align 8
  %bf.clear100 = and i32 %bf.load99, 65535
  %cmp101 = icmp eq i32 %bf.clear100, 65
  br i1 %cmp101, label %if.then.103, label %if.end.150

if.then.103:                                      ; preds = %if.end.98
  %78 = load i64, i64* %bytepos, align 8
  %79 = load i32, i32* %bytelen, align 4
  %conv104 = zext i32 %79 to i64
  %add105 = add nsw i64 %78, %conv104
  %80 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %fld106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i32 0, i64 0
  %rtx108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtx_def**
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtx108, align 8
  %82 = bitcast %struct.rtx_def* %81 to i32*
  %bf.load109 = load i32, i32* %82, align 8
  %bf.lshr110 = lshr i32 %bf.load109, 16
  %bf.clear111 = and i32 %bf.lshr110, 255
  %idxprom112 = sext i32 %bf.clear111 to i64
  %arrayidx113 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom112
  %83 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %83 to i64
  %cmp115 = icmp sle i64 %add105, %conv114
  br i1 %cmp115, label %if.then.117, label %if.else.121

if.then.117:                                      ; preds = %if.then.103
  %84 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %fld118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i32 0, i64 0
  %rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rtx120, align 8
  store %struct.rtx_def* %85, %struct.rtx_def** %dest, align 8
  br label %if.end.149

if.else.121:                                      ; preds = %if.then.103
  %86 = load i64, i64* %bytepos, align 8
  %87 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %fld122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i32 0, i64 0
  %rtx124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx124, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load125 = load i32, i32* %89, align 8
  %bf.lshr126 = lshr i32 %bf.load125, 16
  %bf.clear127 = and i32 %bf.lshr126, 255
  %idxprom128 = sext i32 %bf.clear127 to i64
  %arrayidx129 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom128
  %90 = load i8, i8* %arrayidx129, align 1
  %conv130 = zext i8 %90 to i64
  %cmp131 = icmp sge i64 %86, %conv130
  br i1 %cmp131, label %if.then.133, label %if.else.147

if.then.133:                                      ; preds = %if.else.121
  %91 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %fld134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i32 0, i64 0
  %rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rtx136, align 8
  %93 = bitcast %struct.rtx_def* %92 to i32*
  %bf.load137 = load i32, i32* %93, align 8
  %bf.lshr138 = lshr i32 %bf.load137, 16
  %bf.clear139 = and i32 %bf.lshr138, 255
  %idxprom140 = sext i32 %bf.clear139 to i64
  %arrayidx141 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom140
  %94 = load i8, i8* %arrayidx141, align 1
  %conv142 = zext i8 %94 to i64
  %95 = load i64, i64* %bytepos, align 8
  %sub143 = sub nsw i64 %95, %conv142
  store i64 %sub143, i64* %bytepos, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %fld144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i32 0, i64 1
  %rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx146, align 8
  store %struct.rtx_def* %97, %struct.rtx_def** %dest, align 8
  br label %if.end.148

if.else.147:                                      ; preds = %if.else.121
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2142, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.emit_group_store, i32 0, i32 0)) #6
  unreachable

if.end.148:                                       ; preds = %if.then.133
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.then.117
  br label %if.end.150

if.end.150:                                       ; preds = %if.end.149, %if.end.98
  %98 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load151 = load i32, i32* %99, align 8
  %bf.clear152 = and i32 %bf.load151, 65535
  %cmp153 = icmp eq i32 %bf.clear152, 66
  br i1 %cmp153, label %land.lhs.true.155, label %if.else.183

land.lhs.true.155:                                ; preds = %if.end.150
  %100 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx157 to %struct.mem_attrs**
  %101 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp158 = icmp ne %struct.mem_attrs* %101, null
  br i1 %cmp158, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.155
  %102 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i32 0, i64 1
  %rtmem162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.mem_attrs**
  %103 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem162, align 8
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %103, i32 0, i32 4
  %104 = load i32, i32* %align, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.155
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %104, %cond.true ], [ 8, %cond.false ]
  %105 = load i32, i32* %mode, align 4
  %call163 = call i32 @get_mode_alignment(i32 %105)
  %cmp164 = icmp uge i32 %cond, %call163
  br i1 %cmp164, label %land.lhs.true.166, label %if.else.183

land.lhs.true.166:                                ; preds = %cond.end
  %106 = load i64, i64* %bytepos, align 8
  %mul167 = mul nsw i64 %106, 8
  %107 = load i32, i32* %mode, align 4
  %call168 = call i32 @get_mode_alignment(i32 %107)
  %conv169 = zext i32 %call168 to i64
  %rem = srem i64 %mul167, %conv169
  %cmp170 = icmp eq i64 %rem, 0
  br i1 %cmp170, label %land.lhs.true.172, label %if.else.183

land.lhs.true.172:                                ; preds = %land.lhs.true.166
  %108 = load i32, i32* %bytelen, align 4
  %109 = load i32, i32* %mode, align 4
  %idxprom173 = sext i32 %109 to i64
  %arrayidx174 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom173
  %110 = load i8, i8* %arrayidx174, align 1
  %conv175 = zext i8 %110 to i32
  %cmp176 = icmp eq i32 %108, %conv175
  br i1 %cmp176, label %if.then.178, label %if.else.183

if.then.178:                                      ; preds = %land.lhs.true.172
  %111 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %112 = load i32, i32* %mode, align 4
  %113 = load i64, i64* %bytepos, align 8
  %call179 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %111, i32 %112, i64 %113, i32 1, i32 1)
  %114 = load i32, i32* %i, align 4
  %idxprom180 = sext i32 %114 to i64
  %115 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx181 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %115, i64 %idxprom180
  %116 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx181, align 8
  %call182 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call179, %struct.rtx_def* %116)
  br label %if.end.191

if.else.183:                                      ; preds = %land.lhs.true.172, %land.lhs.true.166, %cond.end, %if.end.150
  %117 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %118 = load i32, i32* %bytelen, align 4
  %mul184 = mul i32 %118, 8
  %conv185 = zext i32 %mul184 to i64
  %119 = load i64, i64* %bytepos, align 8
  %mul186 = mul nsw i64 %119, 8
  %120 = load i32, i32* %mode, align 4
  %121 = load i32, i32* %i, align 4
  %idxprom187 = sext i32 %121 to i64
  %122 = load %struct.rtx_def**, %struct.rtx_def*** %tmps, align 8
  %arrayidx188 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %122, i64 %idxprom187
  %123 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx188, align 8
  %124 = load i32, i32* %ssize.addr, align 4
  %conv189 = sext i32 %124 to i64
  %call190 = call %struct.rtx_def* @store_bit_field(%struct.rtx_def* %117, i64 %conv185, i64 %mul186, i32 %120, %struct.rtx_def* %123, i64 %conv189)
  br label %if.end.191

if.end.191:                                       ; preds = %if.else.183, %if.then.178
  br label %for.inc.192

for.inc.192:                                      ; preds = %if.end.191
  %125 = load i32, i32* %i, align 4
  %inc193 = add nsw i32 %125, 1
  store i32 %inc193, i32* %i, align 4
  br label %for.cond.61

for.end.194:                                      ; preds = %for.cond.61
  call void @emit_queue()
  %126 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load195 = load i32, i32* %127, align 8
  %bf.clear196 = and i32 %bf.load195, 65535
  %cmp197 = icmp eq i32 %bf.clear196, 61
  br i1 %cmp197, label %if.then.199, label %if.end.201

if.then.199:                                      ; preds = %for.end.194
  %128 = load %struct.rtx_def*, %struct.rtx_def** %orig_dst.addr, align 8
  %129 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %call200 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %128, %struct.rtx_def* %129)
  br label %if.end.201

if.end.201:                                       ; preds = %if.then.37, %if.end.38, %if.then.199, %for.end.194
  ret void
}

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @store_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*, i64) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @copy_blkmode_from_reg(%struct.rtx_def* %tgtblk, %struct.rtx_def* %srcreg, %union.tree_node* %type) #0 {
entry:
  %tgtblk.addr = alloca %struct.rtx_def*, align 8
  %srcreg.addr = alloca %struct.rtx_def*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %bytes = alloca i64, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dst = alloca %struct.rtx_def*, align 8
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %xbitpos = alloca i64, align 8
  %big_endian_correction = alloca i64, align 8
  store %struct.rtx_def* %tgtblk, %struct.rtx_def** %tgtblk.addr, align 8
  store %struct.rtx_def* %srcreg, %struct.rtx_def** %srcreg.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %0)
  store i64 %call, i64* %bytes, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %src, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %dst, align 8
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 7
  %2 = load i32, i32* %align, align 4
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %cmp = icmp ult i32 %2, %cond
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type2 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %align3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 7
  %5 = load i32, i32* %align3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %6, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 64, i32 32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond7 = phi i32 [ %5, %cond.true ], [ %cond6, %cond.false ]
  %conv = zext i32 %cond7 to i64
  store i64 %conv, i64* %bitsize, align 8
  store i64 0, i64* %big_endian_correction, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tgtblk.addr, align 8
  %cmp8 = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 12
  %bf.clear = and i32 %bf.lshr, 1
  %mul = mul nsw i32 %bf.clear, 1
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common10 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2
  %bf.load11 = load i32, i32* %volatile_flag, align 8
  %bf.lshr12 = lshr i32 %bf.load11, 11
  %bf.clear13 = and i32 %bf.lshr12, 1
  %mul14 = mul nsw i32 %bf.clear13, 2
  %or = or i32 %mul, %mul14
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type15 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 6
  %bf.load16 = load i32, i32* %restrict_flag, align 4
  %bf.lshr17 = lshr i32 %bf.load16, 21
  %bf.clear18 = and i32 %bf.lshr17, 1
  %mul19 = mul nsw i32 %bf.clear18, 4
  %or20 = or i32 %or, %mul19
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common21 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2
  %bf.load22 = load i32, i32* %code, align 8
  %bf.clear23 = and i32 %bf.load22, 255
  %cmp24 = icmp eq i32 %bf.clear23, 20
  br i1 %cmp24, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common26 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %type27, align 8
  %tobool28 = icmp ne %union.tree_node* %14, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %15 = phi i1 [ false, %if.then ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %15 to i32
  %mul29 = mul nsw i32 %land.ext, 8
  %or30 = or i32 %or20, %mul29
  %or31 = or i32 %or30, 1
  %call32 = call %union.tree_node* @build_qualified_type(%union.tree_node* %8, i32 %or31)
  %call33 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call32, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %call33, %struct.rtx_def** %tgtblk.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %tgtblk.addr, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %16)
  br label %if.end

if.end:                                           ; preds = %land.end, %cond.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load34 = load i32, i32* %18, align 8
  %bf.lshr35 = lshr i32 %bf.load34, 16
  %bf.clear36 = and i32 %bf.lshr35, 255
  %cmp37 = icmp ne i32 %bf.clear36, 51
  br i1 %cmp37, label %land.lhs.true, label %if.end.54

land.lhs.true:                                    ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load39 = load i32, i32* %20, align 8
  %bf.lshr40 = lshr i32 %bf.load39, 16
  %bf.clear41 = and i32 %bf.lshr40, 255
  %idxprom = sext i32 %bf.clear41 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %21 = load i8, i8* %arrayidx, align 1
  %conv42 = zext i8 %21 to i32
  %22 = load i32, i32* @target_flags, align 4
  %and43 = and i32 %22, 33554432
  %tobool44 = icmp ne i32 %and43, 0
  %cond45 = select i1 %tobool44, i32 8, i32 4
  %cmp46 = icmp slt i32 %conv42, %cond45
  br i1 %cmp46, label %if.then.48, label %if.end.54

if.then.48:                                       ; preds = %land.lhs.true
  %23 = load i32, i32* @word_mode, align 4
  %24 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common49 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2
  %bf.load50 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr51 = lshr i32 %bf.load50, 13
  %bf.clear52 = and i32 %bf.lshr51, 1
  %call53 = call %struct.rtx_def* @convert_to_mode(i32 %23, %struct.rtx_def* %24, i32 %bf.clear52)
  store %struct.rtx_def* %call53, %struct.rtx_def** %srcreg.addr, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.48, %land.lhs.true, %if.end
  store i64 0, i64* %bitpos, align 8
  %26 = load i64, i64* %big_endian_correction, align 8
  store i64 %26, i64* %xbitpos, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.54
  %27 = load i64, i64* %bitpos, align 8
  %28 = load i64, i64* %bytes, align 8
  %mul55 = mul i64 %28, 8
  %cmp56 = icmp ult i64 %27, %mul55
  br i1 %cmp56, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i64, i64* %xbitpos, align 8
  %30 = load i32, i32* @target_flags, align 4
  %and58 = and i32 %30, 33554432
  %tobool59 = icmp ne i32 %and58, 0
  %cond60 = select i1 %tobool59, i32 64, i32 32
  %conv61 = sext i32 %cond60 to i64
  %rem = urem i64 %29, %conv61
  %cmp62 = icmp eq i64 %rem, 0
  br i1 %cmp62, label %if.then.66, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %31 = load i64, i64* %xbitpos, align 8
  %32 = load i64, i64* %big_endian_correction, align 8
  %cmp64 = icmp eq i64 %31, %32
  br i1 %cmp64, label %if.then.66, label %if.end.76

if.then.66:                                       ; preds = %lor.lhs.false, %for.body
  %33 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  %34 = load i64, i64* %xbitpos, align 8
  %35 = load i32, i32* @target_flags, align 4
  %and67 = and i32 %35, 33554432
  %tobool68 = icmp ne i32 %and67, 0
  %cond69 = select i1 %tobool68, i32 64, i32 32
  %conv70 = sext i32 %cond69 to i64
  %div = udiv i64 %34, %conv70
  %conv71 = trunc i64 %div to i32
  %36 = load %struct.rtx_def*, %struct.rtx_def** %srcreg.addr, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load72 = load i32, i32* %37, align 8
  %bf.lshr73 = lshr i32 %bf.load72, 16
  %bf.clear74 = and i32 %bf.lshr73, 255
  %call75 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %33, i32 %conv71, i32 %bf.clear74)
  store %struct.rtx_def* %call75, %struct.rtx_def** %src, align 8
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.66, %lor.lhs.false
  %38 = load i64, i64* %bitpos, align 8
  %39 = load i32, i32* @target_flags, align 4
  %and77 = and i32 %39, 33554432
  %tobool78 = icmp ne i32 %and77, 0
  %cond79 = select i1 %tobool78, i32 64, i32 32
  %conv80 = sext i32 %cond79 to i64
  %rem81 = urem i64 %38, %conv80
  %cmp82 = icmp eq i64 %rem81, 0
  br i1 %cmp82, label %if.then.84, label %if.end.92

if.then.84:                                       ; preds = %if.end.76
  %40 = load %struct.rtx_def*, %struct.rtx_def** %tgtblk.addr, align 8
  %41 = load i64, i64* %bitpos, align 8
  %42 = load i32, i32* @target_flags, align 4
  %and85 = and i32 %42, 33554432
  %tobool86 = icmp ne i32 %and85, 0
  %cond87 = select i1 %tobool86, i32 64, i32 32
  %conv88 = sext i32 %cond87 to i64
  %div89 = udiv i64 %41, %conv88
  %conv90 = trunc i64 %div89 to i32
  %call91 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %40, i32 %conv90, i32 1, i32 51)
  store %struct.rtx_def* %call91, %struct.rtx_def** %dst, align 8
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.84, %if.end.76
  %43 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %44 = load i64, i64* %bitsize, align 8
  %45 = load i64, i64* %bitpos, align 8
  %46 = load i32, i32* @target_flags, align 4
  %and93 = and i32 %46, 33554432
  %tobool94 = icmp ne i32 %and93, 0
  %cond95 = select i1 %tobool94, i32 64, i32 32
  %conv96 = sext i32 %cond95 to i64
  %rem97 = urem i64 %45, %conv96
  %47 = load i32, i32* @word_mode, align 4
  %48 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %49 = load i64, i64* %bitsize, align 8
  %50 = load i64, i64* %xbitpos, align 8
  %51 = load i32, i32* @target_flags, align 4
  %and98 = and i32 %51, 33554432
  %tobool99 = icmp ne i32 %and98, 0
  %cond100 = select i1 %tobool99, i32 64, i32 32
  %conv101 = sext i32 %cond100 to i64
  %rem102 = urem i64 %50, %conv101
  %52 = load i32, i32* @word_mode, align 4
  %53 = load i32, i32* @word_mode, align 4
  %54 = load i32, i32* @target_flags, align 4
  %and103 = and i32 %54, 33554432
  %tobool104 = icmp ne i32 %and103, 0
  %cond105 = select i1 %tobool104, i32 64, i32 32
  %conv106 = sext i32 %cond105 to i64
  %call107 = call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %48, i64 %49, i64 %rem102, i32 1, %struct.rtx_def* null, i32 %52, i32 %53, i64 %conv106)
  %55 = load i32, i32* @target_flags, align 4
  %and108 = and i32 %55, 33554432
  %tobool109 = icmp ne i32 %and108, 0
  %cond110 = select i1 %tobool109, i32 64, i32 32
  %conv111 = sext i32 %cond110 to i64
  %call112 = call %struct.rtx_def* @store_bit_field(%struct.rtx_def* %43, i64 %44, i64 %rem97, i32 %47, %struct.rtx_def* %call107, i64 %conv111)
  br label %for.inc

for.inc:                                          ; preds = %if.end.92
  %56 = load i64, i64* %bitsize, align 8
  %57 = load i64, i64* %bitpos, align 8
  %add = add i64 %57, %56
  store i64 %add, i64* %bitpos, align 8
  %58 = load i64, i64* %bitsize, align 8
  %59 = load i64, i64* %xbitpos, align 8
  %add113 = add i64 %59, %58
  store i64 %add113, i64* %xbitpos, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %60 = load %struct.rtx_def*, %struct.rtx_def** %tgtblk.addr, align 8
  ret %struct.rtx_def* %60
}

declare i64 @int_size_in_bytes(%union.tree_node*) #1

declare %struct.rtx_def* @assign_temp(%union.tree_node*, i32, i32, i32) #1

declare %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #1

declare void @preserve_temp_slots(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %reg) #0 {
entry:
  %call_fusage.addr = alloca %struct.rtx_def**, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %call_fusage, %struct.rtx_def*** %call_fusage.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 61
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32, i32* %rtuint, align 4
  %cmp1 = icmp uge i32 %3, 53
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2261, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__FUNCTION__.use_reg, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %call_fusage.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %call_fusage.addr, align 8
  store %struct.rtx_def* %call2, %struct.rtx_def** %7, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @use_regs(%struct.rtx_def** %call_fusage, i32 %regno, i32 %nregs) #0 {
entry:
  %call_fusage.addr = alloca %struct.rtx_def**, align 8
  %regno.addr = alloca i32, align 4
  %nregs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.rtx_def** %call_fusage, %struct.rtx_def*** %call_fusage.addr, align 8
  store i32 %regno, i32* %regno.addr, align 4
  store i32 %nregs, i32* %nregs.addr, align 4
  %0 = load i32, i32* %regno.addr, align 4
  %1 = load i32, i32* %nregs.addr, align 4
  %add = add nsw i32 %0, %1
  %cmp = icmp sgt i32 %add, 53
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2280, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__FUNCTION__.use_regs, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nregs.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %call_fusage.addr, align 8
  %5 = load i32, i32* %regno.addr, align 4
  %6 = load i32, i32* %i, align 4
  %add2 = add nsw i32 %5, %6
  %idxprom = sext i32 %add2 to i64
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @reg_raw_mode, i32 0, i64 %idxprom
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32, i32* %regno.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %8, %9
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %7, i32 %add3)
  call void @use_reg(%struct.rtx_def** %4, %struct.rtx_def* %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @use_group_regs(%struct.rtx_def** %call_fusage, %struct.rtx_def* %regs) #0 {
entry:
  %call_fusage.addr = alloca %struct.rtx_def**, align 8
  %regs.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %call_fusage, %struct.rtx_def*** %call_fusage.addr, align 8
  store %struct.rtx_def* %regs, %struct.rtx_def** %regs.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.rtx_def*, %struct.rtx_def** %regs.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %2 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %2, i32 0, i32 0
  %3 = load i32, i32* %num_elem, align 4
  %cmp = icmp slt i32 %0, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.rtx_def*, %struct.rtx_def** %regs.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtvec3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec3, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %6, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %reg, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %cmp7 = icmp ne %struct.rtx_def* %9, null
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %10 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load = load i32, i32* %11, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp8 = icmp eq i32 %bf.clear, 61
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %call_fusage.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  call void @use_reg(%struct.rtx_def** %12, %struct.rtx_def* %13)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @can_store_by_pieces(i64 %len, %struct.rtx_def* (i8*, i64, i32)* %constfun, i8* %constfundata, i32 %align) #0 {
entry:
  %retval = alloca i32, align 4
  %len.addr = alloca i64, align 8
  %constfun.addr = alloca %struct.rtx_def* (i8*, i64, i32)*, align 8
  %constfundata.addr = alloca i8*, align 8
  %align.addr = alloca i32, align 4
  %max_size = alloca i64, align 8
  %l = alloca i64, align 8
  %offset = alloca i64, align 8
  %mode = alloca i32, align 4
  %tmode = alloca i32, align 4
  %icode = alloca i32, align 4
  %reverse = alloca i32, align 4
  %cst = alloca %struct.rtx_def*, align 8
  %size = alloca i32, align 4
  store i64 %len, i64* %len.addr, align 8
  store %struct.rtx_def* (i8*, i64, i32)* %constfun, %struct.rtx_def* (i8*, i64, i32)** %constfun.addr, align 8
  store i8* %constfundata, i8** %constfundata.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  store i64 0, i64* %offset, align 8
  %0 = load i64, i64* %len.addr, align 8
  %1 = load i32, i32* %align.addr, align 4
  %call = call i64 @move_by_pieces_ninsns(i64 %0, i32 %1)
  %2 = load i32, i32* @optimize_size, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %3, i32 0, i32 10
  %4 = load i32, i32* %move_ratio, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 3, %cond.true ], [ %4, %cond.false ]
  %conv = zext i32 %cond to i64
  %cmp = icmp ult i64 %call, %conv
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  store i32 128, i32* %align.addr, align 4
  store i32 0, i32* %reverse, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.62, %if.end
  %5 = load i32, i32* %reverse, align 4
  %cmp2 = icmp sle i32 %5, 0
  br i1 %cmp2, label %for.body, label %for.end.63

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %len.addr, align 8
  store i64 %6, i64* %l, align 8
  store i32 0, i32* %mode, align 4
  %7 = load i32, i32* @target_flags, align 4
  %and = and i32 %7, 33554432
  %tobool4 = icmp ne i32 %and, 0
  %cond5 = select i1 %tobool4, i32 8, i32 4
  %add = add nsw i32 %cond5, 1
  %conv6 = sext i32 %add to i64
  store i64 %conv6, i64* %max_size, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.53, %for.body
  %8 = load i64, i64* %max_size, align 8
  %cmp7 = icmp ugt i64 %8, 1
  br i1 %cmp7, label %while.body, label %while.end.57

while.body:                                       ; preds = %while.cond
  %9 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %9, i32* %tmode, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %while.body
  %10 = load i32, i32* %tmode, align 4
  %cmp10 = icmp ne i32 %10, 0
  br i1 %cmp10, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.9
  %11 = load i32, i32* %tmode, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %12 = load i8, i8* %arrayidx, align 1
  %conv13 = zext i8 %12 to i64
  %13 = load i64, i64* %max_size, align 8
  %cmp14 = icmp ult i64 %conv13, %13
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %for.body.12
  %14 = load i32, i32* %tmode, align 4
  store i32 %14, i32* %mode, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %for.body.12
  br label %for.inc

for.inc:                                          ; preds = %if.end.17
  %15 = load i32, i32* %tmode, align 4
  %idxprom18 = sext i32 %15 to i64
  %arrayidx19 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom18
  %16 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %16 to i32
  store i32 %conv20, i32* %tmode, align 4
  br label %for.cond.9

for.end:                                          ; preds = %for.cond.9
  %17 = load i32, i32* %mode, align 4
  %cmp21 = icmp eq i32 %17, 0
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %for.end
  br label %while.end.57

if.end.24:                                        ; preds = %for.end
  %18 = load i32, i32* %mode, align 4
  %idxprom25 = sext i32 %18 to i64
  %19 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %19, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom25
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx26, i32 0, i32 0
  %20 = load i32, i32* %insn_code, align 4
  store i32 %20, i32* %icode, align 4
  %21 = load i32, i32* %icode, align 4
  %cmp27 = icmp ne i32 %21, 1317
  br i1 %cmp27, label %land.lhs.true, label %if.end.53

land.lhs.true:                                    ; preds = %if.end.24
  %22 = load i32, i32* %align.addr, align 4
  %23 = load i32, i32* %mode, align 4
  %call29 = call i32 @get_mode_alignment(i32 %23)
  %cmp30 = icmp uge i32 %22, %call29
  br i1 %cmp30, label %if.then.32, label %if.end.53

if.then.32:                                       ; preds = %land.lhs.true
  %24 = load i32, i32* %mode, align 4
  %idxprom33 = sext i32 %24 to i64
  %arrayidx34 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom33
  %25 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %25 to i32
  store i32 %conv35, i32* %size, align 4
  br label %while.cond.36

while.cond.36:                                    ; preds = %if.end.50, %if.then.32
  %26 = load i64, i64* %l, align 8
  %27 = load i32, i32* %size, align 4
  %conv37 = zext i32 %27 to i64
  %cmp38 = icmp uge i64 %26, %conv37
  br i1 %cmp38, label %while.body.40, label %while.end

while.body.40:                                    ; preds = %while.cond.36
  %28 = load i32, i32* %reverse, align 4
  %tobool41 = icmp ne i32 %28, 0
  br i1 %tobool41, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %while.body.40
  %29 = load i32, i32* %size, align 4
  %conv43 = zext i32 %29 to i64
  %30 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %30, %conv43
  store i64 %sub, i64* %offset, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %while.body.40
  %31 = load %struct.rtx_def* (i8*, i64, i32)*, %struct.rtx_def* (i8*, i64, i32)** %constfun.addr, align 8
  %32 = load i8*, i8** %constfundata.addr, align 8
  %33 = load i64, i64* %offset, align 8
  %34 = load i32, i32* %mode, align 4
  %call45 = call %struct.rtx_def* %31(i8* %32, i64 %33, i32 %34)
  store %struct.rtx_def* %call45, %struct.rtx_def** %cst, align 8
  %35 = load i32, i32* %reverse, align 4
  %tobool46 = icmp ne i32 %35, 0
  br i1 %tobool46, label %if.end.50, label %if.then.47

if.then.47:                                       ; preds = %if.end.44
  %36 = load i32, i32* %size, align 4
  %conv48 = zext i32 %36 to i64
  %37 = load i64, i64* %offset, align 8
  %add49 = add nsw i64 %37, %conv48
  store i64 %add49, i64* %offset, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.47, %if.end.44
  %38 = load i32, i32* %size, align 4
  %conv51 = zext i32 %38 to i64
  %39 = load i64, i64* %l, align 8
  %sub52 = sub i64 %39, %conv51
  store i64 %sub52, i64* %l, align 8
  br label %while.cond.36

while.end:                                        ; preds = %while.cond.36
  br label %if.end.53

if.end.53:                                        ; preds = %while.end, %land.lhs.true, %if.end.24
  %40 = load i32, i32* %mode, align 4
  %idxprom54 = sext i32 %40 to i64
  %arrayidx55 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom54
  %41 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %41 to i64
  store i64 %conv56, i64* %max_size, align 8
  br label %while.cond

while.end.57:                                     ; preds = %if.then.23, %while.cond
  %42 = load i64, i64* %l, align 8
  %cmp58 = icmp ne i64 %42, 0
  br i1 %cmp58, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %while.end.57
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2378, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.can_store_by_pieces, i32 0, i32 0)) #6
  unreachable

if.end.61:                                        ; preds = %while.end.57
  br label %for.inc.62

for.inc.62:                                       ; preds = %if.end.61
  %43 = load i32, i32* %reverse, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %reverse, align 4
  br label %for.cond

for.end.63:                                       ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.63, %if.then
  %44 = load i32, i32* %retval
  ret i32 %44
}

; Function Attrs: nounwind uwtable
define void @store_by_pieces(%struct.rtx_def* %to, i64 %len, %struct.rtx_def* (i8*, i64, i32)* %constfun, i8* %constfundata, i32 %align) #0 {
entry:
  %to.addr = alloca %struct.rtx_def*, align 8
  %len.addr = alloca i64, align 8
  %constfun.addr = alloca %struct.rtx_def* (i8*, i64, i32)*, align 8
  %constfundata.addr = alloca i8*, align 8
  %align.addr = alloca i32, align 4
  %data = alloca %struct.store_by_pieces, align 8
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store %struct.rtx_def* (i8*, i64, i32)* %constfun, %struct.rtx_def* (i8*, i64, i32)** %constfun.addr, align 8
  store i8* %constfundata, i8** %constfundata.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  %0 = load i64, i64* %len.addr, align 8
  %1 = load i32, i32* %align.addr, align 4
  %call = call i64 @move_by_pieces_ninsns(i64 %0, i32 %1)
  %2 = load i32, i32* @optimize_size, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %3, i32 0, i32 10
  %4 = load i32, i32* %move_ratio, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 3, %cond.true ], [ %4, %cond.false ]
  %conv = zext i32 %cond to i64
  %cmp = icmp ult i64 %call, %conv
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2400, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.store_by_pieces, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %call2 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %5, i32 1)
  store %struct.rtx_def* %call2, %struct.rtx_def** %to.addr, align 8
  %6 = load %struct.rtx_def* (i8*, i64, i32)*, %struct.rtx_def* (i8*, i64, i32)** %constfun.addr, align 8
  %constfun3 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %data, i32 0, i32 6
  store %struct.rtx_def* (i8*, i64, i32)* %6, %struct.rtx_def* (i8*, i64, i32)** %constfun3, align 8
  %7 = load i8*, i8** %constfundata.addr, align 8
  %constfundata4 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %data, i32 0, i32 7
  store i8* %7, i8** %constfundata4, align 8
  %8 = load i64, i64* %len.addr, align 8
  %len5 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %data, i32 0, i32 4
  store i64 %8, i64* %len5, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %to6 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %data, i32 0, i32 0
  store %struct.rtx_def* %9, %struct.rtx_def** %to6, align 8
  %10 = load i32, i32* %align.addr, align 4
  call void @store_by_pieces_1(%struct.store_by_pieces* %data, i32 %10)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @store_by_pieces_1(%struct.store_by_pieces* %data, i32 %align) #0 {
entry:
  %data.addr = alloca %struct.store_by_pieces*, align 8
  %align.addr = alloca i32, align 4
  %to_addr = alloca %struct.rtx_def*, align 8
  %max_size = alloca i64, align 8
  %mode = alloca i32, align 4
  %tmode = alloca i32, align 4
  %icode = alloca i32, align 4
  store %struct.store_by_pieces* %data, %struct.store_by_pieces** %data.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  %0 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %to = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %0, i32 0, i32 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %to, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %to_addr, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 8, i32 4
  %add = add nsw i32 %cond, 1
  %conv = sext i32 %add to i64
  store i64 %conv, i64* %max_size, align 8
  store i32 0, i32* %mode, align 4
  %4 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %offset = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %4, i32 0, i32 5
  store i64 0, i64* %offset, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %6 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %to_addr1 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %6, i32 0, i32 1
  store %struct.rtx_def* %5, %struct.rtx_def** %to_addr1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 97
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load3 = load i32, i32* %10, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 96
  br i1 %cmp5, label %lor.end, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %11 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load8 = load i32, i32* %12, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 99
  br i1 %cmp10, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.7
  %13 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load12 = load i32, i32* %14, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp eq i32 %bf.clear13, 98
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.7, %lor.lhs.false, %entry
  %15 = phi i1 [ true, %lor.lhs.false.7 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp14, %lor.rhs ]
  %lor.ext = zext i1 %15 to i32
  %16 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %autinc_to = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %16, i32 0, i32 2
  store i32 %lor.ext, i32* %autinc_to, align 4
  %17 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %explicit_inc_to = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %17, i32 0, i32 3
  store i32 0, i32* %explicit_inc_to, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load16 = load i32, i32* %19, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp eq i32 %bf.clear17, 96
  br i1 %cmp18, label %lor.end.25, label %lor.rhs.20

lor.rhs.20:                                       ; preds = %lor.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load21 = load i32, i32* %21, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 98
  br label %lor.end.25

lor.end.25:                                       ; preds = %lor.rhs.20, %lor.end
  %22 = phi i1 [ true, %lor.end ], [ %cmp23, %lor.rhs.20 ]
  %lor.ext26 = zext i1 %22 to i32
  %23 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %reverse = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %23, i32 0, i32 8
  store i32 %lor.ext26, i32* %reverse, align 4
  %24 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %reverse27 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %24, i32 0, i32 8
  %25 = load i32, i32* %reverse27, align 4
  %tobool28 = icmp ne i32 %25, 0
  br i1 %tobool28, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end.25
  %26 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %len = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %26, i32 0, i32 4
  %27 = load i64, i64* %len, align 8
  %28 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %offset29 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %28, i32 0, i32 5
  store i64 %27, i64* %offset29, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.end.25
  %29 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %autinc_to30 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %29, i32 0, i32 2
  %30 = load i32, i32* %autinc_to30, align 4
  %tobool31 = icmp ne i32 %30, 0
  br i1 %tobool31, label %if.end.93, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %31 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %len32 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %31, i32 0, i32 4
  %32 = load i64, i64* %len32, align 8
  %33 = load i32, i32* %align.addr, align 4
  %call = call i64 @move_by_pieces_ninsns(i64 %32, i32 %33)
  %cmp33 = icmp ugt i64 %call, 2
  br i1 %cmp33, label %if.then.35, label %if.end.93

if.then.35:                                       ; preds = %land.lhs.true
  %34 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %34, i32* %tmode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.35
  %35 = load i32, i32* %tmode, align 4
  %cmp36 = icmp ne i32 %35, 0
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load i32, i32* %tmode, align 4
  %idxprom = sext i32 %36 to i64
  %arrayidx38 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %37 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %37 to i64
  %38 = load i64, i64* %max_size, align 8
  %cmp40 = icmp ult i64 %conv39, %38
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %for.body
  %39 = load i32, i32* %tmode, align 4
  store i32 %39, i32* %mode, align 4
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.43
  %40 = load i32, i32* %tmode, align 4
  %idxprom44 = sext i32 %40 to i64
  %arrayidx45 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom44
  %41 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %41 to i32
  store i32 %conv46, i32* %tmode, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %42 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %autinc_to47 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %42, i32 0, i32 2
  %43 = load i32, i32* %autinc_to47, align 4
  %tobool48 = icmp ne i32 %43, 0
  br i1 %tobool48, label %if.end.92, label %land.lhs.true.49

land.lhs.true.49:                                 ; preds = %for.end
  %44 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load50 = load i32, i32* %45, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 67
  br i1 %cmp52, label %if.then.89, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %land.lhs.true.49
  %46 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load55 = load i32, i32* %47, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 68
  br i1 %cmp57, label %if.then.89, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %lor.lhs.false.54
  %48 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load60 = load i32, i32* %49, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 54
  br i1 %cmp62, label %if.then.89, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %lor.lhs.false.59
  %50 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load65 = load i32, i32* %51, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 55
  br i1 %cmp67, label %if.then.89, label %lor.lhs.false.69

lor.lhs.false.69:                                 ; preds = %lor.lhs.false.64
  %52 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load70 = load i32, i32* %53, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 58
  br i1 %cmp72, label %if.then.89, label %lor.lhs.false.74

lor.lhs.false.74:                                 ; preds = %lor.lhs.false.69
  %54 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load75 = load i32, i32* %55, align 8
  %bf.clear76 = and i32 %bf.load75, 65535
  %cmp77 = icmp eq i32 %bf.clear76, 134
  br i1 %cmp77, label %if.then.89, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %lor.lhs.false.74
  %56 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %bf.load80 = load i32, i32* %57, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %cmp82 = icmp eq i32 %bf.clear81, 56
  br i1 %cmp82, label %if.then.89, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %lor.lhs.false.79
  %58 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load85 = load i32, i32* %59, align 8
  %bf.clear86 = and i32 %bf.load85, 65535
  %cmp87 = icmp eq i32 %bf.clear86, 140
  br i1 %cmp87, label %if.then.89, label %if.end.92

if.then.89:                                       ; preds = %lor.lhs.false.84, %lor.lhs.false.79, %lor.lhs.false.74, %lor.lhs.false.69, %lor.lhs.false.64, %lor.lhs.false.59, %lor.lhs.false.54, %land.lhs.true.49
  %60 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %call90 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %60)
  %61 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %to_addr91 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %61, i32 0, i32 1
  store %struct.rtx_def* %call90, %struct.rtx_def** %to_addr91, align 8
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.89, %lor.lhs.false.84, %for.end
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %land.lhs.true, %if.end
  store i32 128, i32* %align.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.127, %if.end.93
  %62 = load i64, i64* %max_size, align 8
  %cmp94 = icmp ugt i64 %62, 1
  br i1 %cmp94, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %63 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %63, i32* %tmode, align 4
  br label %for.cond.96

for.cond.96:                                      ; preds = %for.inc.107, %while.body
  %64 = load i32, i32* %tmode, align 4
  %cmp97 = icmp ne i32 %64, 0
  br i1 %cmp97, label %for.body.99, label %for.end.111

for.body.99:                                      ; preds = %for.cond.96
  %65 = load i32, i32* %tmode, align 4
  %idxprom100 = sext i32 %65 to i64
  %arrayidx101 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom100
  %66 = load i8, i8* %arrayidx101, align 1
  %conv102 = zext i8 %66 to i64
  %67 = load i64, i64* %max_size, align 8
  %cmp103 = icmp ult i64 %conv102, %67
  br i1 %cmp103, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %for.body.99
  %68 = load i32, i32* %tmode, align 4
  store i32 %68, i32* %mode, align 4
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.105, %for.body.99
  br label %for.inc.107

for.inc.107:                                      ; preds = %if.end.106
  %69 = load i32, i32* %tmode, align 4
  %idxprom108 = sext i32 %69 to i64
  %arrayidx109 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom108
  %70 = load i8, i8* %arrayidx109, align 1
  %conv110 = zext i8 %70 to i32
  store i32 %conv110, i32* %tmode, align 4
  br label %for.cond.96

for.end.111:                                      ; preds = %for.cond.96
  %71 = load i32, i32* %mode, align 4
  %cmp112 = icmp eq i32 %71, 0
  br i1 %cmp112, label %if.then.114, label %if.end.115

if.then.114:                                      ; preds = %for.end.111
  br label %while.end

if.end.115:                                       ; preds = %for.end.111
  %72 = load i32, i32* %mode, align 4
  %idxprom116 = sext i32 %72 to i64
  %73 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %73, i32 0, i32 1
  %arrayidx117 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom116
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx117, i32 0, i32 0
  %74 = load i32, i32* %insn_code, align 4
  store i32 %74, i32* %icode, align 4
  %75 = load i32, i32* %icode, align 4
  %cmp118 = icmp ne i32 %75, 1317
  br i1 %cmp118, label %land.lhs.true.120, label %if.end.127

land.lhs.true.120:                                ; preds = %if.end.115
  %76 = load i32, i32* %align.addr, align 4
  %77 = load i32, i32* %mode, align 4
  %call121 = call i32 @get_mode_alignment(i32 %77)
  %cmp122 = icmp uge i32 %76, %call121
  br i1 %cmp122, label %if.then.124, label %if.end.127

if.then.124:                                      ; preds = %land.lhs.true.120
  %78 = load i32, i32* %icode, align 4
  %idxprom125 = sext i32 %78 to i64
  %arrayidx126 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom125
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx126, i32 0, i32 2
  %79 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %80 = load i32, i32* %mode, align 4
  %81 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  call void @store_by_pieces_2(%struct.rtx_def* (%struct.rtx_def*, ...)* %79, i32 %80, %struct.store_by_pieces* %81)
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.124, %land.lhs.true.120, %if.end.115
  %82 = load i32, i32* %mode, align 4
  %idxprom128 = sext i32 %82 to i64
  %arrayidx129 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom128
  %83 = load i8, i8* %arrayidx129, align 1
  %conv130 = zext i8 %83 to i64
  store i64 %conv130, i64* %max_size, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then.114, %while.cond
  %84 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %len131 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %84, i32 0, i32 4
  %85 = load i64, i64* %len131, align 8
  %cmp132 = icmp ne i64 %85, 0
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %while.end
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2524, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.store_by_pieces_1, i32 0, i32 0)) #6
  unreachable

if.end.135:                                       ; preds = %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @clear_storage(%struct.rtx_def* %object, %struct.rtx_def* %size) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %object.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca %struct.rtx_def*, align 8
  %call_expr = alloca %union.tree_node*, align 8
  %arg_list = alloca %union.tree_node*, align 8
  %retval1 = alloca %struct.rtx_def*, align 8
  %align = alloca i32, align 4
  %opalign = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %code = alloca i32, align 4
  %pred = alloca i32 (%struct.rtx_def*, i32)*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %fntype = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %object, %struct.rtx_def** %object.addr, align 8
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %retval1, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %cond.true, label %cond.false.8

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %3 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp2 = icmp ne %struct.mem_attrs* %3, null
  br i1 %cmp2, label %cond.true.3, label %cond.false

cond.true.3:                                      ; preds = %cond.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 1
  %rtmem6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.mem_attrs**
  %5 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem6, align 8
  %align7 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %5, i32 0, i32 4
  %6 = load i32, i32* %align7, align 4
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.3
  %cond = phi i32 [ %6, %cond.true.3 ], [ 8, %cond.false ]
  br label %cond.end.11

cond.false.8:                                     ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load9 = load i32, i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load9, 16
  %bf.clear10 = and i32 %bf.lshr, 255
  %call = call i32 @get_mode_alignment(i32 %bf.clear10)
  br label %cond.end.11

cond.end.11:                                      ; preds = %cond.false.8, %cond.end
  %cond12 = phi i32 [ %cond, %cond.end ], [ %call, %cond.false.8 ]
  store i32 %cond12, i32* %align, align 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load13 = load i32, i32* %10, align 8
  %bf.lshr14 = lshr i32 %bf.load13, 16
  %bf.clear15 = and i32 %bf.lshr14, 255
  %cmp16 = icmp ne i32 %bf.clear15, 51
  br i1 %cmp16, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.end.11
  %11 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load17 = load i32, i32* %12, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 54
  br i1 %cmp19, label %land.lhs.true.20, label %if.else

land.lhs.true.20:                                 ; preds = %land.lhs.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load21 = load i32, i32* %14, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 16
  %bf.clear23 = and i32 %bf.lshr22, 255
  %idxprom = sext i32 %bf.clear23 to i64
  %arrayidx24 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx24, align 1
  %conv = zext i8 %15 to i32
  %16 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx26 to i64*
  %17 = load i64, i64* %rtwint, align 8
  %conv27 = trunc i64 %17 to i32
  %cmp28 = icmp eq i32 %conv, %conv27
  br i1 %cmp28, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.20
  %18 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load30 = load i32, i32* %20, align 8
  %bf.lshr31 = lshr i32 %bf.load30, 16
  %bf.clear32 = and i32 %bf.lshr31, 255
  %idxprom33 = sext i32 %bf.clear32 to i64
  %arrayidx34 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom33
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %call35 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %18, %struct.rtx_def* %21)
  br label %if.end.207

if.else:                                          ; preds = %land.lhs.true.20, %land.lhs.true, %cond.end.11
  %22 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call36 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %22, i32 1)
  store %struct.rtx_def* %call36, %struct.rtx_def** %object.addr, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call37 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %23, i32 0)
  store %struct.rtx_def* %call37, %struct.rtx_def** %size.addr, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load38 = load i32, i32* %25, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 54
  br i1 %cmp40, label %land.lhs.true.42, label %if.else.58

land.lhs.true.42:                                 ; preds = %if.else
  %26 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtwint45 = bitcast %union.rtunion_def* %arrayidx44 to i64*
  %27 = load i64, i64* %rtwint45, align 8
  %28 = load i32, i32* %align, align 4
  %call46 = call i64 @move_by_pieces_ninsns(i64 %27, i32 %28)
  %29 = load i32, i32* @optimize_size, align 4
  %tobool = icmp ne i32 %29, 0
  br i1 %tobool, label %cond.true.47, label %cond.false.48

cond.true.47:                                     ; preds = %land.lhs.true.42
  br label %cond.end.49

cond.false.48:                                    ; preds = %land.lhs.true.42
  %30 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %30, i32 0, i32 10
  %31 = load i32, i32* %move_ratio, align 4
  br label %cond.end.49

cond.end.49:                                      ; preds = %cond.false.48, %cond.true.47
  %cond50 = phi i32 [ 3, %cond.true.47 ], [ %31, %cond.false.48 ]
  %conv51 = zext i32 %cond50 to i64
  %cmp52 = icmp ult i64 %call46, %conv51
  br i1 %cmp52, label %if.then.54, label %if.else.58

if.then.54:                                       ; preds = %cond.end.49
  %32 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtwint57 = bitcast %union.rtunion_def* %arrayidx56 to i64*
  %34 = load i64, i64* %rtwint57, align 8
  %35 = load i32, i32* %align, align 4
  call void @clear_by_pieces(%struct.rtx_def* %32, i64 %34, i32 %35)
  br label %if.end.206

if.else.58:                                       ; preds = %cond.end.49, %if.else
  %36 = load i32, i32* %align, align 4
  %div = udiv i32 %36, 8
  %conv59 = zext i32 %div to i64
  %call60 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv59)
  store %struct.rtx_def* %call60, %struct.rtx_def** %opalign, align 8
  %37 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %37, i32* %mode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.58
  %38 = load i32, i32* %mode, align 4
  %cmp61 = icmp ne i32 %38, 0
  br i1 %cmp61, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load i32, i32* %mode, align 4
  %idxprom63 = sext i32 %39 to i64
  %arrayidx64 = getelementptr inbounds [59 x i32], [59 x i32]* @clrstr_optab, i32 0, i64 %idxprom63
  %40 = load i32, i32* %arrayidx64, align 4
  store i32 %40, i32* %code, align 4
  %41 = load i32, i32* %code, align 4
  %cmp65 = icmp ne i32 %41, 1317
  br i1 %cmp65, label %land.lhs.true.67, label %if.end.130

land.lhs.true.67:                                 ; preds = %for.body
  %42 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load68 = load i32, i32* %43, align 8
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 54
  br i1 %cmp70, label %land.lhs.true.72, label %lor.lhs.false

land.lhs.true.72:                                 ; preds = %land.lhs.true.67
  %44 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtwint75 = bitcast %union.rtunion_def* %arrayidx74 to i64*
  %45 = load i64, i64* %rtwint75, align 8
  %46 = load i32, i32* %mode, align 4
  %idxprom76 = sext i32 %46 to i64
  %arrayidx77 = getelementptr inbounds [59 x i64], [59 x i64]* @mode_mask_array, i32 0, i64 %idxprom76
  %47 = load i64, i64* %arrayidx77, align 8
  %shr = lshr i64 %47, 1
  %cmp78 = icmp ule i64 %45, %shr
  br i1 %cmp78, label %land.lhs.true.87, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.72, %land.lhs.true.67
  %48 = load i32, i32* %mode, align 4
  %idxprom80 = sext i32 %48 to i64
  %arrayidx81 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom80
  %49 = load i16, i16* %arrayidx81, align 2
  %conv82 = zext i16 %49 to i32
  %50 = load i32, i32* @target_flags, align 4
  %and = and i32 %50, 33554432
  %tobool83 = icmp ne i32 %and, 0
  %cond84 = select i1 %tobool83, i32 64, i32 32
  %cmp85 = icmp sge i32 %conv82, %cond84
  br i1 %cmp85, label %land.lhs.true.87, label %if.end.130

land.lhs.true.87:                                 ; preds = %lor.lhs.false, %land.lhs.true.72
  %51 = load i32, i32* %code, align 4
  %idxprom88 = sext i32 %51 to i64
  %arrayidx89 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom88
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx89, i32 0, i32 3
  %52 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx90 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %52, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx90, i32 0, i32 0
  %53 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  store i32 (%struct.rtx_def*, i32)* %53, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %cmp91 = icmp eq i32 (%struct.rtx_def*, i32)* %53, null
  br i1 %cmp91, label %land.lhs.true.96, label %lor.lhs.false.93

lor.lhs.false.93:                                 ; preds = %land.lhs.true.87
  %54 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call94 = call i32 %54(%struct.rtx_def* %55, i32 51)
  %tobool95 = icmp ne i32 %call94, 0
  br i1 %tobool95, label %land.lhs.true.96, label %if.end.130

land.lhs.true.96:                                 ; preds = %lor.lhs.false.93, %land.lhs.true.87
  %56 = load i32, i32* %code, align 4
  %idxprom97 = sext i32 %56 to i64
  %arrayidx98 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom97
  %operand99 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx98, i32 0, i32 3
  %57 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand99, align 8
  %arrayidx100 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %57, i64 2
  %predicate101 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx100, i32 0, i32 0
  %58 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate101, align 8
  store i32 (%struct.rtx_def*, i32)* %58, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %cmp102 = icmp eq i32 (%struct.rtx_def*, i32)* %58, null
  br i1 %cmp102, label %if.then.107, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %land.lhs.true.96
  %59 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %opalign, align 8
  %call105 = call i32 %59(%struct.rtx_def* %60, i32 0)
  %tobool106 = icmp ne i32 %call105, 0
  br i1 %tobool106, label %if.then.107, label %if.end.130

if.then.107:                                      ; preds = %lor.lhs.false.104, %land.lhs.true.96
  %call108 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call108, %struct.rtx_def** %last, align 8
  %61 = load i32, i32* %mode, align 4
  %62 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call109 = call %struct.rtx_def* @convert_to_mode(i32 %61, %struct.rtx_def* %62, i32 1)
  store %struct.rtx_def* %call109, %struct.rtx_def** %op1, align 8
  %63 = load i32, i32* %code, align 4
  %idxprom110 = sext i32 %63 to i64
  %arrayidx111 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom110
  %operand112 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx111, i32 0, i32 3
  %64 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand112, align 8
  %arrayidx113 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %64, i64 1
  %predicate114 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx113, i32 0, i32 0
  %65 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate114, align 8
  store i32 (%struct.rtx_def*, i32)* %65, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %66 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %cmp115 = icmp ne i32 (%struct.rtx_def*, i32)* %66, null
  br i1 %cmp115, label %land.lhs.true.117, label %if.end

land.lhs.true.117:                                ; preds = %if.then.107
  %67 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %69 = load i32, i32* %mode, align 4
  %call118 = call i32 %67(%struct.rtx_def* %68, i32 %69)
  %tobool119 = icmp ne i32 %call118, 0
  br i1 %tobool119, label %if.end, label %if.then.120

if.then.120:                                      ; preds = %land.lhs.true.117
  %70 = load i32, i32* %mode, align 4
  %71 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call121 = call %struct.rtx_def* @copy_to_mode_reg(i32 %70, %struct.rtx_def* %71)
  store %struct.rtx_def* %call121, %struct.rtx_def** %op1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.120, %land.lhs.true.117, %if.then.107
  %72 = load i32, i32* %code, align 4
  %idxprom122 = sext i32 %72 to i64
  %arrayidx123 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom122
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx123, i32 0, i32 2
  %73 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %opalign, align 8
  %call124 = call %struct.rtx_def* (%struct.rtx_def*, ...) %73(%struct.rtx_def* %74, %struct.rtx_def* %75, %struct.rtx_def* %76)
  store %struct.rtx_def* %call124, %struct.rtx_def** %pat, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool125 = icmp ne %struct.rtx_def* %77, null
  br i1 %tobool125, label %if.then.126, label %if.else.128

if.then.126:                                      ; preds = %if.end
  %78 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call127 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %78)
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.else.128:                                      ; preds = %if.end
  %79 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  call void @delete_insns_since(%struct.rtx_def* %79)
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.128
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %lor.lhs.false.104, %lor.lhs.false.93, %lor.lhs.false, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.130
  %80 = load i32, i32* %mode, align 4
  %idxprom131 = sext i32 %80 to i64
  %arrayidx132 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom131
  %81 = load i8, i8* %arrayidx132, align 1
  %conv133 = zext i8 %81 to i32
  store i32 %conv133, i32* %mode, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %82 = load i32, i32* @target_flags, align 4
  %and134 = and i32 %82, 33554432
  %tobool135 = icmp ne i32 %and134, 0
  %cond136 = select i1 %tobool135, i32 5, i32 4
  %83 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %fld137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call139 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond136, %struct.rtx_def* %84)
  store %struct.rtx_def* %call139, %struct.rtx_def** %object.addr, align 8
  %85 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type = bitcast %union.tree_node* %85 to %struct.tree_type*
  %mode140 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6
  %bf.load141 = load i32, i32* %mode140, align 4
  %bf.lshr142 = lshr i32 %bf.load141, 9
  %bf.clear143 = and i32 %bf.lshr142, 127
  %86 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call144 = call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.clear143, %struct.rtx_def* %86)
  store %struct.rtx_def* %call144, %struct.rtx_def** %size.addr, align 8
  %87 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %cmp145 = icmp eq %union.tree_node* %87, null
  br i1 %cmp145, label %if.then.147, label %if.end.165

if.then.147:                                      ; preds = %for.end
  %call148 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  store %union.tree_node* %call148, %union.tree_node** @clear_storage.fn, align 8
  %88 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %call149 = call %union.tree_node* @build_pointer_type(%union.tree_node* %88)
  store %union.tree_node* %call149, %union.tree_node** %fntype, align 8
  %89 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %call150 = call %union.tree_node* @build_function_type(%union.tree_node* %89, %union.tree_node* null)
  store %union.tree_node* %call150, %union.tree_node** %fntype, align 8
  %90 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %91 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %call151 = call %union.tree_node* @build_decl(i32 30, %union.tree_node* %90, %union.tree_node* %91)
  store %union.tree_node* %call151, %union.tree_node** @clear_storage.fn, align 8
  call void @ggc_add_tree_root(%union.tree_node** @clear_storage.fn, i32 1)
  %92 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %decl = bitcast %union.tree_node* %92 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %93 = bitcast i48* %external_flag to i64*
  %bf.load152 = load i64, i64* %93, align 8
  %bf.clear153 = and i64 %bf.load152, -257
  %bf.set = or i64 %bf.clear153, 256
  store i64 %bf.set, i64* %93, align 8
  %94 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %common = bitcast %union.tree_node* %94 to %struct.tree_common*
  %public_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load154 = load i32, i32* %public_flag, align 8
  %bf.clear155 = and i32 %bf.load154, -524289
  %bf.set156 = or i32 %bf.clear155, 524288
  store i32 %bf.set156, i32* %public_flag, align 8
  %95 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %decl157 = bitcast %union.tree_node* %95 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl157, i32 0, i32 5
  %96 = bitcast i48* %artificial_flag to i64*
  %bf.load158 = load i64, i64* %96, align 8
  %bf.clear159 = and i64 %bf.load158, -4194305
  %bf.set160 = or i64 %bf.clear159, 4194304
  store i64 %bf.set160, i64* %96, align 8
  %97 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %common161 = bitcast %union.tree_node* %97 to %struct.tree_common*
  %nothrow_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common161, i32 0, i32 2
  %bf.load162 = load i32, i32* %nothrow_flag, align 8
  %bf.clear163 = and i32 %bf.load162, -131073
  %bf.set164 = or i32 %bf.clear163, 131072
  store i32 %bf.set164, i32* %nothrow_flag, align 8
  %98 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  call void @make_decl_rtl(%union.tree_node* %98, i8* null)
  %99 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  call void @assemble_external(%union.tree_node* %99)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.147, %for.end
  %100 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %call166 = call %union.tree_node* @build_pointer_type(%union.tree_node* %100)
  %101 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call167 = call %union.tree_node* @make_tree(%union.tree_node* %call166, %struct.rtx_def* %101)
  %call168 = call %union.tree_node* @build_tree_list(%union.tree_node* null, %union.tree_node* %call167)
  store %union.tree_node* %call168, %union.tree_node** %arg_list, align 8
  %102 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call169 = call %union.tree_node* @make_tree(%union.tree_node* %102, %struct.rtx_def* %103)
  %call170 = call %union.tree_node* @build_tree_list(%union.tree_node* null, %union.tree_node* %call169)
  %104 = load %union.tree_node*, %union.tree_node** %arg_list, align 8
  %common171 = bitcast %union.tree_node* %104 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 0
  store %union.tree_node* %call170, %union.tree_node** %chain, align 8
  %105 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call172 = call %union.tree_node* @make_tree(%union.tree_node* %105, %struct.rtx_def* %106)
  %call173 = call %union.tree_node* @build_tree_list(%union.tree_node* null, %union.tree_node* %call172)
  %107 = load %union.tree_node*, %union.tree_node** %arg_list, align 8
  %common174 = bitcast %union.tree_node* %107 to %struct.tree_common*
  %chain175 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common174, i32 0, i32 0
  %108 = load %union.tree_node*, %union.tree_node** %chain175, align 8
  %common176 = bitcast %union.tree_node* %108 to %struct.tree_common*
  %chain177 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common176, i32 0, i32 0
  store %union.tree_node* %call173, %union.tree_node** %chain177, align 8
  %109 = load %union.tree_node*, %union.tree_node** %arg_list, align 8
  %common178 = bitcast %union.tree_node* %109 to %struct.tree_common*
  %chain179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 0
  %110 = load %union.tree_node*, %union.tree_node** %chain179, align 8
  %common180 = bitcast %union.tree_node* %110 to %struct.tree_common*
  %chain181 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common180, i32 0, i32 0
  %111 = load %union.tree_node*, %union.tree_node** %chain181, align 8
  %common182 = bitcast %union.tree_node* %111 to %struct.tree_common*
  %chain183 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common182, i32 0, i32 0
  store %union.tree_node* null, %union.tree_node** %chain183, align 8
  %112 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %common184 = bitcast %union.tree_node* %112 to %struct.tree_common*
  %type185 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common184, i32 0, i32 1
  %113 = load %union.tree_node*, %union.tree_node** %type185, align 8
  %call186 = call %union.tree_node* @build_pointer_type(%union.tree_node* %113)
  %114 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %call187 = call %union.tree_node* @build1(i32 121, %union.tree_node* %call186, %union.tree_node* %114)
  store %union.tree_node* %call187, %union.tree_node** %call_expr, align 8
  %115 = load %union.tree_node*, %union.tree_node** @clear_storage.fn, align 8
  %common188 = bitcast %union.tree_node* %115 to %struct.tree_common*
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 1
  %116 = load %union.tree_node*, %union.tree_node** %type189, align 8
  %common190 = bitcast %union.tree_node* %116 to %struct.tree_common*
  %type191 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common190, i32 0, i32 1
  %117 = load %union.tree_node*, %union.tree_node** %type191, align 8
  %118 = load %union.tree_node*, %union.tree_node** %call_expr, align 8
  %119 = load %union.tree_node*, %union.tree_node** %arg_list, align 8
  %call192 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 53, %union.tree_node* %117, %union.tree_node* %118, %union.tree_node* %119, %union.tree_node* null)
  store %union.tree_node* %call192, %union.tree_node** %call_expr, align 8
  %120 = load %union.tree_node*, %union.tree_node** %call_expr, align 8
  %common193 = bitcast %union.tree_node* %120 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common193, i32 0, i32 2
  %bf.load194 = load i32, i32* %side_effects_flag, align 8
  %bf.clear195 = and i32 %bf.load194, -257
  %bf.set196 = or i32 %bf.clear195, 256
  store i32 %bf.set196, i32* %side_effects_flag, align 8
  %121 = load %union.tree_node*, %union.tree_node** %call_expr, align 8
  %call197 = call %struct.rtx_def* @expand_expr(%union.tree_node* %121, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call197, %struct.rtx_def** %retval1, align 8
  %122 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load198 = load i32, i32* %123, align 8
  %bf.lshr199 = lshr i32 %bf.load198, 26
  %bf.clear200 = and i32 %bf.lshr199, 1
  %tobool201 = icmp ne i32 %bf.clear200, 0
  br i1 %tobool201, label %if.then.202, label %if.end.205

if.then.202:                                      ; preds = %if.end.165
  %124 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call203 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %124)
  %call204 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call203)
  br label %if.end.205

if.end.205:                                       ; preds = %if.then.202, %if.end.165
  br label %if.end.206

if.end.206:                                       ; preds = %if.end.205, %if.then.54
  br label %if.end.207

if.end.207:                                       ; preds = %if.end.206, %if.then
  %125 = load %struct.rtx_def*, %struct.rtx_def** %retval1, align 8
  store %struct.rtx_def* %125, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.207, %if.then.126
  %126 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %126
}

; Function Attrs: nounwind uwtable
define internal void @clear_by_pieces(%struct.rtx_def* %to, i64 %len, i32 %align) #0 {
entry:
  %to.addr = alloca %struct.rtx_def*, align 8
  %len.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  %data = alloca %struct.store_by_pieces, align 8
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  %constfun = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %data, i32 0, i32 6
  store %struct.rtx_def* (i8*, i64, i32)* @clear_by_pieces_1, %struct.rtx_def* (i8*, i64, i32)** %constfun, align 8
  %constfundata = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %data, i32 0, i32 7
  store i8* null, i8** %constfundata, align 8
  %0 = load i64, i64* %len.addr, align 8
  %len1 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %data, i32 0, i32 4
  store i64 %0, i64* %len1, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8
  %to2 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %data, i32 0, i32 0
  store %struct.rtx_def* %1, %struct.rtx_def** %to2, align 8
  %2 = load i32, i32* %align.addr, align 4
  call void @store_by_pieces_1(%struct.store_by_pieces* %data, i32 %2)
  ret void
}

declare i32 @memory_address_p(i32, %struct.rtx_def*) #1

declare i32 @push_operand(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %submode = alloca i32, align 4
  %class = alloca i32, align 4
  %stack = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %offset1 = alloca i64, align 8
  %offset2 = alloca i64, align 8
  %realpart_x = alloca %struct.rtx_def*, align 8
  %realpart_y = alloca %struct.rtx_def*, align 8
  %imagpart_x = alloca %struct.rtx_def*, align 8
  %imagpart_y = alloca %struct.rtx_def*, align 8
  %packed_dest_p = alloca i32, align 4
  %packed_src_p = alloca i32, align 4
  %reg_class = alloca i32, align 4
  %reg_mode = alloca i32, align 4
  %mem = alloca %struct.rtx_def*, align 8
  %cmem = alloca %struct.rtx_def*, align 8
  %sreg = alloca %struct.rtx_def*, align 8
  %sreg191 = alloca %struct.rtx_def*, align 8
  %last_insn = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %inner = alloca %struct.rtx_def*, align 8
  %need_clobber = alloca i32, align 4
  %i = alloca i32, align 4
  %temp259 = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %xpart = alloca %struct.rtx_def*, align 8
  %ypart = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %mode, align 4
  %2 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %class, align 4
  %4 = load i32, i32* %mode, align 4
  %cmp = icmp uge i32 %4, 59
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2819, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.emit_move_insn_1, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %mode, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %6, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom1
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx2, i32 0, i32 0
  %7 = load i32, i32* %insn_code, align 4
  %cmp3 = icmp ne i32 %7, 1317
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %8 = load i32, i32* %mode, align 4
  %idxprom5 = sext i32 %8 to i64
  %9 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers6 = getelementptr inbounds %struct.optab, %struct.optab* %9, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers6, i32 0, i64 %idxprom5
  %insn_code8 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx7, i32 0, i32 0
  %10 = load i32, i32* %insn_code8, align 4
  %idxprom9 = sext i32 %10 to i64
  %arrayidx10 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom9
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx10, i32 0, i32 2
  %11 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call = call %struct.rtx_def* (%struct.rtx_def*, ...) %11(%struct.rtx_def* %12, %struct.rtx_def* %13)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  store %struct.rtx_def* %call11, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %if.end
  %14 = load i32, i32* %class, align 4
  %cmp12 = icmp eq i32 %14, 6
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %15 = load i32, i32* %class, align 4
  %cmp13 = icmp eq i32 %15, 5
  br i1 %cmp13, label %land.lhs.true, label %if.else.243

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.else
  %16 = load i32, i32* %mode, align 4
  %idxprom14 = sext i32 %16 to i64
  %arrayidx15 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_unit_size, i32 0, i64 %idxprom14
  %17 = load i8, i8* %arrayidx15, align 1
  %conv = zext i8 %17 to i32
  %mul = mul nsw i32 %conv, 8
  %18 = load i32, i32* %class, align 4
  %cmp16 = icmp eq i32 %18, 5
  %cond = select i1 %cmp16, i32 1, i32 2
  %call18 = call i32 @mode_for_size(i32 %mul, i32 %cond, i32 0)
  store i32 %call18, i32* %submode, align 4
  %cmp19 = icmp ne i32 51, %call18
  br i1 %cmp19, label %land.lhs.true.21, label %if.else.243

land.lhs.true.21:                                 ; preds = %land.lhs.true
  %19 = load i32, i32* %submode, align 4
  %idxprom22 = sext i32 %19 to i64
  %20 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers23 = getelementptr inbounds %struct.optab, %struct.optab* %20, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers23, i32 0, i64 %idxprom22
  %insn_code25 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx24, i32 0, i32 0
  %21 = load i32, i32* %insn_code25, align 4
  %cmp26 = icmp ne i32 %21, 1317
  br i1 %cmp26, label %if.then.28, label %if.else.243

if.then.28:                                       ; preds = %land.lhs.true.21
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load29 = load i32, i32* %24, align 8
  %bf.lshr30 = lshr i32 %bf.load29, 16
  %bf.clear31 = and i32 %bf.lshr30, 255
  %call32 = call i32 @push_operand(%struct.rtx_def* %22, i32 %bf.clear31)
  store i32 %call32, i32* %stack, align 4
  %25 = load i32, i32* %stack, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %land.lhs.true.33, label %if.else.103

land.lhs.true.33:                                 ; preds = %if.then.28
  %26 = load i32, i32* @target_flags, align 4
  %and = and i32 %26, 33554432
  %tobool34 = icmp ne i32 %and, 0
  br i1 %tobool34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.33
  %27 = load i32, i32* %submode, align 4
  %idxprom35 = sext i32 %27 to i64
  %arrayidx36 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom35
  %28 = load i8, i8* %arrayidx36, align 1
  %conv37 = zext i8 %28 to i32
  %add = add nsw i32 %conv37, 7
  %and38 = and i32 %add, -8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.33
  %29 = load i32, i32* %submode, align 4
  %idxprom39 = sext i32 %29 to i64
  %arrayidx40 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom39
  %30 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %30 to i32
  %add42 = add nsw i32 %conv41, 1
  %and43 = and i32 %add42, -2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond44 = phi i32 [ %and38, %cond.true ], [ %and43, %cond.false ]
  %31 = load i32, i32* %submode, align 4
  %idxprom45 = sext i32 %31 to i64
  %arrayidx46 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom45
  %32 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %32 to i32
  %cmp48 = icmp ne i32 %cond44, %conv47
  br i1 %cmp48, label %if.then.50, label %if.else.103

if.then.50:                                       ; preds = %cond.end
  %33 = load i32, i32* @target_flags, align 4
  %and51 = and i32 %33, 33554432
  %tobool52 = icmp ne i32 %and51, 0
  %cond53 = select i1 %tobool52, i32 5, i32 4
  %34 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %36 = load i32, i32* @target_flags, align 4
  %and54 = and i32 %36, 33554432
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %cond.true.56, label %cond.false.65

cond.true.56:                                     ; preds = %if.then.50
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load57 = load i32, i32* %38, align 8
  %bf.lshr58 = lshr i32 %bf.load57, 16
  %bf.clear59 = and i32 %bf.lshr58, 255
  %idxprom60 = sext i32 %bf.clear59 to i64
  %arrayidx61 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom60
  %39 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %39 to i32
  %add63 = add nsw i32 %conv62, 7
  %and64 = and i32 %add63, -8
  br label %cond.end.74

cond.false.65:                                    ; preds = %if.then.50
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load66 = load i32, i32* %41, align 8
  %bf.lshr67 = lshr i32 %bf.load66, 16
  %bf.clear68 = and i32 %bf.lshr67, 255
  %idxprom69 = sext i32 %bf.clear68 to i64
  %arrayidx70 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom69
  %42 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %42 to i32
  %add72 = add nsw i32 %conv71, 1
  %and73 = and i32 %add72, -2
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.false.65, %cond.true.56
  %cond75 = phi i32 [ %and64, %cond.true.56 ], [ %and73, %cond.false.65 ]
  %conv76 = sext i32 %cond75 to i64
  %call77 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv76)
  %43 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call78 = call %struct.rtx_def* @expand_binop(i32 %cond53, %struct.optab* %34, %struct.rtx_def* %35, %struct.rtx_def* %call77, %struct.rtx_def* %43, i32 0, i32 3)
  store %struct.rtx_def* %call78, %struct.rtx_def** %temp, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp79 = icmp ne %struct.rtx_def* %44, %45
  br i1 %cmp79, label %if.then.81, label %if.end.83

if.then.81:                                       ; preds = %cond.end.74
  %46 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call82 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %46, %struct.rtx_def* %47)
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.81, %cond.end.74
  store i64 0, i64* %offset1, align 8
  %48 = load i32, i32* %submode, align 4
  %idxprom84 = sext i32 %48 to i64
  %arrayidx85 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom84
  %49 = load i8, i8* %arrayidx85, align 1
  %conv86 = zext i8 %49 to i64
  store i64 %conv86, i64* %offset2, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %51 = load i32, i32* %submode, align 4
  %52 = load i32, i32* @target_flags, align 4
  %and87 = and i32 %52, 33554432
  %tobool88 = icmp ne i32 %and87, 0
  %cond89 = select i1 %tobool88, i32 5, i32 4
  %53 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %54 = load i64, i64* %offset1, align 8
  %call90 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %54)
  %call91 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond89, %struct.rtx_def* %53, %struct.rtx_def* %call90)
  %call92 = call %struct.rtx_def* @change_address(%struct.rtx_def* %50, i32 %51, %struct.rtx_def* %call91)
  %55 = load i32, i32* %submode, align 4
  %56 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call93 = call %struct.rtx_def* @gen_realpart(i32 %55, %struct.rtx_def* %56)
  %call94 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call92, %struct.rtx_def* %call93)
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %58 = load i32, i32* %submode, align 4
  %59 = load i32, i32* @target_flags, align 4
  %and95 = and i32 %59, 33554432
  %tobool96 = icmp ne i32 %and95, 0
  %cond97 = select i1 %tobool96, i32 5, i32 4
  %60 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %61 = load i64, i64* %offset2, align 8
  %call98 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %61)
  %call99 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond97, %struct.rtx_def* %60, %struct.rtx_def* %call98)
  %call100 = call %struct.rtx_def* @change_address(%struct.rtx_def* %57, i32 %58, %struct.rtx_def* %call99)
  %62 = load i32, i32* %submode, align 4
  %63 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call101 = call %struct.rtx_def* @gen_imagpart(i32 %62, %struct.rtx_def* %63)
  %call102 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call100, %struct.rtx_def* %call101)
  br label %if.end.241

if.else.103:                                      ; preds = %cond.end, %if.then.28
  %64 = load i32, i32* %stack, align 4
  %tobool104 = icmp ne i32 %64, 0
  br i1 %tobool104, label %if.then.105, label %if.else.132

if.then.105:                                      ; preds = %if.else.103
  %65 = load i32, i32* %submode, align 4
  %idxprom106 = sext i32 %65 to i64
  %66 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers107 = getelementptr inbounds %struct.optab, %struct.optab* %66, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers107, i32 0, i64 %idxprom106
  %insn_code109 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx108, i32 0, i32 0
  %67 = load i32, i32* %insn_code109, align 4
  %idxprom110 = sext i32 %67 to i64
  %arrayidx111 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom110
  %genfun112 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx111, i32 0, i32 2
  %68 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun112, align 8
  %69 = load i32, i32* %submode, align 4
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call114 = call %struct.rtx_def* @gen_rtx_MEM(i32 %69, %struct.rtx_def* %71)
  %72 = load i32, i32* %submode, align 4
  %73 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call115 = call %struct.rtx_def* @gen_imagpart(i32 %72, %struct.rtx_def* %73)
  %call116 = call %struct.rtx_def* (%struct.rtx_def*, ...) %68(%struct.rtx_def* %call114, %struct.rtx_def* %call115)
  %call117 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call116)
  %74 = load i32, i32* %submode, align 4
  %idxprom118 = sext i32 %74 to i64
  %75 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers119 = getelementptr inbounds %struct.optab, %struct.optab* %75, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers119, i32 0, i64 %idxprom118
  %insn_code121 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx120, i32 0, i32 0
  %76 = load i32, i32* %insn_code121, align 4
  %idxprom122 = sext i32 %76 to i64
  %arrayidx123 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom122
  %genfun124 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx123, i32 0, i32 2
  %77 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun124, align 8
  %78 = load i32, i32* %submode, align 4
  %79 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i32 0, i64 0
  %rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rtx127, align 8
  %call128 = call %struct.rtx_def* @gen_rtx_MEM(i32 %78, %struct.rtx_def* %80)
  %81 = load i32, i32* %submode, align 4
  %82 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call129 = call %struct.rtx_def* @gen_realpart(i32 %81, %struct.rtx_def* %82)
  %call130 = call %struct.rtx_def* (%struct.rtx_def*, ...) %77(%struct.rtx_def* %call128, %struct.rtx_def* %call129)
  %call131 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call130)
  br label %if.end.240

if.else.132:                                      ; preds = %if.else.103
  %83 = load i32, i32* %mode, align 4
  %idxprom133 = sext i32 %83 to i64
  %arrayidx134 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom133
  %84 = load i16, i16* %arrayidx134, align 2
  %conv135 = zext i16 %84 to i32
  %85 = load i32, i32* @target_flags, align 4
  %and136 = and i32 %85, 33554432
  %tobool137 = icmp ne i32 %and136, 0
  %cond138 = select i1 %tobool137, i32 64, i32 32
  %mul139 = mul nsw i32 2, %cond138
  %cmp140 = icmp slt i32 %conv135, %mul139
  br i1 %cmp140, label %land.lhs.true.142, label %if.end.197

land.lhs.true.142:                                ; preds = %if.else.132
  %86 = load i32, i32* @reload_in_progress, align 4
  %87 = load i32, i32* @reload_completed, align 4
  %or = or i32 %86, %87
  %cmp143 = icmp eq i32 %or, 0
  br i1 %cmp143, label %if.then.145, label %if.end.197

if.then.145:                                      ; preds = %land.lhs.true.142
  %88 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load146 = load i32, i32* %89, align 8
  %bf.clear147 = and i32 %bf.load146, 65535
  %cmp148 = icmp eq i32 %bf.clear147, 61
  br i1 %cmp148, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.145
  %90 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx151 to i32*
  %91 = load i32, i32* %rtuint, align 4
  %cmp152 = icmp ult i32 %91, 53
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.145
  %92 = phi i1 [ false, %if.then.145 ], [ %cmp152, %land.rhs ]
  %land.ext = zext i1 %92 to i32
  store i32 %land.ext, i32* %packed_dest_p, align 4
  %93 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %bf.load154 = load i32, i32* %94, align 8
  %bf.clear155 = and i32 %bf.load154, 65535
  %cmp156 = icmp eq i32 %bf.clear155, 61
  br i1 %cmp156, label %land.rhs.158, label %land.end.164

land.rhs.158:                                     ; preds = %land.end
  %95 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i32 0, i64 0
  %rtuint161 = bitcast %union.rtunion_def* %arrayidx160 to i32*
  %96 = load i32, i32* %rtuint161, align 4
  %cmp162 = icmp ult i32 %96, 53
  br label %land.end.164

land.end.164:                                     ; preds = %land.rhs.158, %land.end
  %97 = phi i1 [ false, %land.end ], [ %cmp162, %land.rhs.158 ]
  %land.ext165 = zext i1 %97 to i32
  store i32 %land.ext165, i32* %packed_src_p, align 4
  %98 = load i32, i32* %packed_dest_p, align 4
  %tobool166 = icmp ne i32 %98, 0
  br i1 %tobool166, label %if.then.169, label %lor.lhs.false.167

lor.lhs.false.167:                                ; preds = %land.end.164
  %99 = load i32, i32* %packed_src_p, align 4
  %tobool168 = icmp ne i32 %99, 0
  br i1 %tobool168, label %if.then.169, label %if.end.196

if.then.169:                                      ; preds = %lor.lhs.false.167, %land.end.164
  %100 = load i32, i32* %class, align 4
  %cmp170 = icmp eq i32 %100, 6
  %cond172 = select i1 %cmp170, i32 2, i32 1
  store i32 %cond172, i32* %reg_class, align 4
  %101 = load i32, i32* %mode, align 4
  %idxprom173 = sext i32 %101 to i64
  %arrayidx174 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom173
  %102 = load i16, i16* %arrayidx174, align 2
  %conv175 = zext i16 %102 to i32
  %103 = load i32, i32* %reg_class, align 4
  %call176 = call i32 @mode_for_size(i32 %conv175, i32 %103, i32 1)
  store i32 %call176, i32* %reg_mode, align 4
  %104 = load i32, i32* %reg_mode, align 4
  %cmp177 = icmp ne i32 %104, 51
  br i1 %cmp177, label %if.then.179, label %if.end.195

if.then.179:                                      ; preds = %if.then.169
  %105 = load i32, i32* %reg_mode, align 4
  %106 = load i32, i32* %mode, align 4
  %idxprom180 = sext i32 %106 to i64
  %arrayidx181 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom180
  %107 = load i8, i8* %arrayidx181, align 1
  %conv182 = zext i8 %107 to i64
  %call183 = call %struct.rtx_def* @assign_stack_temp(i32 %105, i64 %conv182, i32 0)
  store %struct.rtx_def* %call183, %struct.rtx_def** %mem, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %109 = load i32, i32* %mode, align 4
  %call184 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %108, i32 %109, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call184, %struct.rtx_def** %cmem, align 8
  %110 = load %struct.function*, %struct.function** @cfun, align 8
  %cannot_inline = getelementptr inbounds %struct.function, %struct.function* %110, i32 0, i32 16
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i32 0, i32 0), i8** %cannot_inline, align 8
  %111 = load i32, i32* %packed_dest_p, align 4
  %tobool185 = icmp ne i32 %111, 0
  br i1 %tobool185, label %if.then.186, label %if.else.190

if.then.186:                                      ; preds = %if.then.179
  %112 = load i32, i32* %reg_mode, align 4
  %113 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call187 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %112, %struct.rtx_def* %113, i32 0)
  store %struct.rtx_def* %call187, %struct.rtx_def** %sreg, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %cmem, align 8
  %115 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call188 = call %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def* %114, %struct.rtx_def* %115)
  %116 = load %struct.rtx_def*, %struct.rtx_def** %sreg, align 8
  %117 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call189 = call %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def* %116, %struct.rtx_def* %117)
  store %struct.rtx_def* %call189, %struct.rtx_def** %retval
  br label %return

if.else.190:                                      ; preds = %if.then.179
  %118 = load i32, i32* %reg_mode, align 4
  %119 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call192 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %118, %struct.rtx_def* %119, i32 0)
  store %struct.rtx_def* %call192, %struct.rtx_def** %sreg191, align 8
  %120 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %sreg191, align 8
  %call193 = call %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def* %120, %struct.rtx_def* %121)
  %122 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %123 = load %struct.rtx_def*, %struct.rtx_def** %cmem, align 8
  %call194 = call %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def* %122, %struct.rtx_def* %123)
  store %struct.rtx_def* %call194, %struct.rtx_def** %retval
  br label %return

if.end.195:                                       ; preds = %if.then.169
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.195, %lor.lhs.false.167
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %land.lhs.true.142, %if.else.132
  %124 = load i32, i32* %submode, align 4
  %125 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call198 = call %struct.rtx_def* @gen_realpart(i32 %124, %struct.rtx_def* %125)
  store %struct.rtx_def* %call198, %struct.rtx_def** %realpart_x, align 8
  %126 = load i32, i32* %submode, align 4
  %127 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call199 = call %struct.rtx_def* @gen_realpart(i32 %126, %struct.rtx_def* %127)
  store %struct.rtx_def* %call199, %struct.rtx_def** %realpart_y, align 8
  %128 = load i32, i32* %submode, align 4
  %129 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call200 = call %struct.rtx_def* @gen_imagpart(i32 %128, %struct.rtx_def* %129)
  store %struct.rtx_def* %call200, %struct.rtx_def** %imagpart_x, align 8
  %130 = load i32, i32* %submode, align 4
  %131 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call201 = call %struct.rtx_def* @gen_imagpart(i32 %130, %struct.rtx_def* %131)
  store %struct.rtx_def* %call201, %struct.rtx_def** %imagpart_y, align 8
  %132 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %cmp202 = icmp ne %struct.rtx_def* %132, %133
  br i1 %cmp202, label %land.lhs.true.204, label %if.end.221

land.lhs.true.204:                                ; preds = %if.end.197
  %134 = load i32, i32* @reload_in_progress, align 4
  %tobool205 = icmp ne i32 %134, 0
  br i1 %tobool205, label %if.end.221, label %lor.lhs.false.206

lor.lhs.false.206:                                ; preds = %land.lhs.true.204
  %135 = load i32, i32* @reload_completed, align 4
  %tobool207 = icmp ne i32 %135, 0
  br i1 %tobool207, label %if.end.221, label %land.lhs.true.208

land.lhs.true.208:                                ; preds = %lor.lhs.false.206
  %136 = load %struct.rtx_def*, %struct.rtx_def** %realpart_x, align 8
  %137 = bitcast %struct.rtx_def* %136 to i32*
  %bf.load209 = load i32, i32* %137, align 8
  %bf.clear210 = and i32 %bf.load209, 65535
  %cmp211 = icmp eq i32 %bf.clear210, 63
  br i1 %cmp211, label %if.then.218, label %lor.lhs.false.213

lor.lhs.false.213:                                ; preds = %land.lhs.true.208
  %138 = load %struct.rtx_def*, %struct.rtx_def** %imagpart_x, align 8
  %139 = bitcast %struct.rtx_def* %138 to i32*
  %bf.load214 = load i32, i32* %139, align 8
  %bf.clear215 = and i32 %bf.load214, 65535
  %cmp216 = icmp eq i32 %bf.clear215, 63
  br i1 %cmp216, label %if.then.218, label %if.end.221

if.then.218:                                      ; preds = %lor.lhs.false.213, %land.lhs.true.208
  %140 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call219 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %140)
  %call220 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call219)
  br label %if.end.221

if.end.221:                                       ; preds = %if.then.218, %lor.lhs.false.213, %lor.lhs.false.206, %land.lhs.true.204, %if.end.197
  %141 = load i32, i32* %submode, align 4
  %idxprom222 = sext i32 %141 to i64
  %142 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers223 = getelementptr inbounds %struct.optab, %struct.optab* %142, i32 0, i32 1
  %arrayidx224 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers223, i32 0, i64 %idxprom222
  %insn_code225 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx224, i32 0, i32 0
  %143 = load i32, i32* %insn_code225, align 4
  %idxprom226 = sext i32 %143 to i64
  %arrayidx227 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom226
  %genfun228 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx227, i32 0, i32 2
  %144 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun228, align 8
  %145 = load %struct.rtx_def*, %struct.rtx_def** %realpart_x, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %realpart_y, align 8
  %call229 = call %struct.rtx_def* (%struct.rtx_def*, ...) %144(%struct.rtx_def* %145, %struct.rtx_def* %146)
  %call230 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call229)
  %147 = load i32, i32* %submode, align 4
  %idxprom231 = sext i32 %147 to i64
  %148 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 30), align 8
  %handlers232 = getelementptr inbounds %struct.optab, %struct.optab* %148, i32 0, i32 1
  %arrayidx233 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers232, i32 0, i64 %idxprom231
  %insn_code234 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx233, i32 0, i32 0
  %149 = load i32, i32* %insn_code234, align 4
  %idxprom235 = sext i32 %149 to i64
  %arrayidx236 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom235
  %genfun237 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx236, i32 0, i32 2
  %150 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun237, align 8
  %151 = load %struct.rtx_def*, %struct.rtx_def** %imagpart_x, align 8
  %152 = load %struct.rtx_def*, %struct.rtx_def** %imagpart_y, align 8
  %call238 = call %struct.rtx_def* (%struct.rtx_def*, ...) %150(%struct.rtx_def* %151, %struct.rtx_def* %152)
  %call239 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call238)
  br label %if.end.240

if.end.240:                                       ; preds = %if.end.221, %if.then.105
  br label %if.end.241

if.end.241:                                       ; preds = %if.end.240, %if.end.83
  %call242 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call242, %struct.rtx_def** %retval
  br label %return

if.else.243:                                      ; preds = %land.lhs.true.21, %land.lhs.true, %lor.lhs.false
  %153 = load i32, i32* %mode, align 4
  %idxprom244 = sext i32 %153 to i64
  %arrayidx245 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom244
  %154 = load i8, i8* %arrayidx245, align 1
  %conv246 = zext i8 %154 to i32
  %155 = load i32, i32* @target_flags, align 4
  %and247 = and i32 %155, 33554432
  %tobool248 = icmp ne i32 %and247, 0
  %cond249 = select i1 %tobool248, i32 8, i32 4
  %cmp250 = icmp sgt i32 %conv246, %cond249
  br i1 %cmp250, label %if.then.252, label %if.else.465

if.then.252:                                      ; preds = %if.else.243
  store %struct.rtx_def* null, %struct.rtx_def** %last_insn, align 8
  %156 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %158 = bitcast %struct.rtx_def* %157 to i32*
  %bf.load253 = load i32, i32* %158, align 8
  %bf.lshr254 = lshr i32 %bf.load253, 16
  %bf.clear255 = and i32 %bf.lshr254, 255
  %call256 = call i32 @push_operand(%struct.rtx_def* %156, i32 %bf.clear255)
  %tobool257 = icmp ne i32 %call256, 0
  br i1 %tobool257, label %if.then.258, label %if.end.331

if.then.258:                                      ; preds = %if.then.252
  %159 = load i32, i32* @target_flags, align 4
  %and260 = and i32 %159, 33554432
  %tobool261 = icmp ne i32 %and260, 0
  %cond262 = select i1 %tobool261, i32 5, i32 4
  %160 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  %161 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %162 = load i32, i32* @target_flags, align 4
  %and263 = and i32 %162, 33554432
  %tobool264 = icmp ne i32 %and263, 0
  br i1 %tobool264, label %cond.true.265, label %cond.false.274

cond.true.265:                                    ; preds = %if.then.258
  %163 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %164 = bitcast %struct.rtx_def* %163 to i32*
  %bf.load266 = load i32, i32* %164, align 8
  %bf.lshr267 = lshr i32 %bf.load266, 16
  %bf.clear268 = and i32 %bf.lshr267, 255
  %idxprom269 = sext i32 %bf.clear268 to i64
  %arrayidx270 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom269
  %165 = load i8, i8* %arrayidx270, align 1
  %conv271 = zext i8 %165 to i32
  %add272 = add nsw i32 %conv271, 7
  %and273 = and i32 %add272, -8
  br label %cond.end.283

cond.false.274:                                   ; preds = %if.then.258
  %166 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %167 = bitcast %struct.rtx_def* %166 to i32*
  %bf.load275 = load i32, i32* %167, align 8
  %bf.lshr276 = lshr i32 %bf.load275, 16
  %bf.clear277 = and i32 %bf.lshr276, 255
  %idxprom278 = sext i32 %bf.clear277 to i64
  %arrayidx279 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom278
  %168 = load i8, i8* %arrayidx279, align 1
  %conv280 = zext i8 %168 to i32
  %add281 = add nsw i32 %conv280, 1
  %and282 = and i32 %add281, -2
  br label %cond.end.283

cond.end.283:                                     ; preds = %cond.false.274, %cond.true.265
  %cond284 = phi i32 [ %and273, %cond.true.265 ], [ %and282, %cond.false.274 ]
  %conv285 = sext i32 %cond284 to i64
  %call286 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv285)
  %169 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call287 = call %struct.rtx_def* @expand_binop(i32 %cond262, %struct.optab* %160, %struct.rtx_def* %161, %struct.rtx_def* %call286, %struct.rtx_def* %169, i32 0, i32 3)
  store %struct.rtx_def* %call287, %struct.rtx_def** %temp259, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %temp259, align 8
  %171 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp288 = icmp ne %struct.rtx_def* %170, %171
  br i1 %cmp288, label %if.then.290, label %if.end.292

if.then.290:                                      ; preds = %cond.end.283
  %172 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %173 = load %struct.rtx_def*, %struct.rtx_def** %temp259, align 8
  %call291 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %172, %struct.rtx_def* %173)
  br label %if.end.292

if.end.292:                                       ; preds = %if.then.290, %cond.end.283
  %174 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld293 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1
  %arrayidx294 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld293, i32 0, i64 0
  %rtx295 = bitcast %union.rtunion_def* %arrayidx294 to %struct.rtx_def**
  %175 = load %struct.rtx_def*, %struct.rtx_def** %rtx295, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load296 = load i32, i32* %176, align 8
  %bf.clear297 = and i32 %bf.load296, 65535
  store i32 %bf.clear297, i32* %code, align 4
  %177 = load i32, i32* %code, align 4
  %cmp298 = icmp eq i32 %177, 99
  br i1 %cmp298, label %if.then.300, label %if.else.312

if.then.300:                                      ; preds = %if.end.292
  %178 = load i32, i32* @target_flags, align 4
  %and301 = and i32 %178, 33554432
  %tobool302 = icmp ne i32 %and301, 0
  %cond303 = select i1 %tobool302, i32 5, i32 4
  %179 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %180 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %181 = bitcast %struct.rtx_def* %180 to i32*
  %bf.load304 = load i32, i32* %181, align 8
  %bf.lshr305 = lshr i32 %bf.load304, 16
  %bf.clear306 = and i32 %bf.lshr305, 255
  %idxprom307 = sext i32 %bf.clear306 to i64
  %arrayidx308 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom307
  %182 = load i8, i8* %arrayidx308, align 1
  %conv309 = zext i8 %182 to i64
  %sub = sub nsw i64 0, %conv309
  %call310 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub)
  %call311 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond303, %struct.rtx_def* %179, %struct.rtx_def* %call310)
  store %struct.rtx_def* %call311, %struct.rtx_def** %temp259, align 8
  br label %if.end.329

if.else.312:                                      ; preds = %if.end.292
  %183 = load i32, i32* %code, align 4
  %cmp313 = icmp eq i32 %183, 98
  br i1 %cmp313, label %if.then.315, label %if.else.327

if.then.315:                                      ; preds = %if.else.312
  %184 = load i32, i32* @target_flags, align 4
  %and316 = and i32 %184, 33554432
  %tobool317 = icmp ne i32 %and316, 0
  %cond318 = select i1 %tobool317, i32 5, i32 4
  %185 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %186 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %187 = bitcast %struct.rtx_def* %186 to i32*
  %bf.load319 = load i32, i32* %187, align 8
  %bf.lshr320 = lshr i32 %bf.load319, 16
  %bf.clear321 = and i32 %bf.lshr320, 255
  %idxprom322 = sext i32 %bf.clear321 to i64
  %arrayidx323 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom322
  %188 = load i8, i8* %arrayidx323, align 1
  %conv324 = zext i8 %188 to i64
  %call325 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv324)
  %call326 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond318, %struct.rtx_def* %185, %struct.rtx_def* %call325)
  store %struct.rtx_def* %call326, %struct.rtx_def** %temp259, align 8
  br label %if.end.328

if.else.327:                                      ; preds = %if.else.312
  %189 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  store %struct.rtx_def* %189, %struct.rtx_def** %temp259, align 8
  br label %if.end.328

if.end.328:                                       ; preds = %if.else.327, %if.then.315
  br label %if.end.329

if.end.329:                                       ; preds = %if.end.328, %if.then.300
  %190 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %191 = load %struct.rtx_def*, %struct.rtx_def** %temp259, align 8
  %call330 = call %struct.rtx_def* @change_address(%struct.rtx_def* %190, i32 0, %struct.rtx_def* %191)
  store %struct.rtx_def* %call330, %struct.rtx_def** %x.addr, align 8
  br label %if.end.331

if.end.331:                                       ; preds = %if.end.329, %if.then.252
  %192 = load i32, i32* @reload_in_progress, align 4
  %tobool332 = icmp ne i32 %192, 0
  br i1 %tobool332, label %land.lhs.true.333, label %if.end.350

land.lhs.true.333:                                ; preds = %if.end.331
  %193 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %194 = bitcast %struct.rtx_def* %193 to i32*
  %bf.load334 = load i32, i32* %194, align 8
  %bf.clear335 = and i32 %bf.load334, 65535
  %cmp336 = icmp eq i32 %bf.clear335, 66
  br i1 %cmp336, label %land.lhs.true.338, label %if.end.350

land.lhs.true.338:                                ; preds = %land.lhs.true.333
  %195 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld339 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %195, i32 0, i32 1
  %arrayidx340 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld339, i32 0, i64 0
  %rtx341 = bitcast %union.rtunion_def* %arrayidx340 to %struct.rtx_def**
  %call342 = call %struct.rtx_def* @find_replacement(%struct.rtx_def** %rtx341)
  store %struct.rtx_def* %call342, %struct.rtx_def** %inner, align 8
  %196 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld343 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %196, i32 0, i32 1
  %arrayidx344 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld343, i32 0, i64 0
  %rtx345 = bitcast %union.rtunion_def* %arrayidx344 to %struct.rtx_def**
  %197 = load %struct.rtx_def*, %struct.rtx_def** %rtx345, align 8
  %cmp346 = icmp ne %struct.rtx_def* %call342, %197
  br i1 %cmp346, label %if.then.348, label %if.end.350

if.then.348:                                      ; preds = %land.lhs.true.338
  %198 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %199 = load %struct.rtx_def*, %struct.rtx_def** %inner, align 8
  %call349 = call %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def* %198, %struct.rtx_def* %199)
  store %struct.rtx_def* %call349, %struct.rtx_def** %x.addr, align 8
  br label %if.end.350

if.end.350:                                       ; preds = %if.then.348, %land.lhs.true.338, %land.lhs.true.333, %if.end.331
  %200 = load i32, i32* @reload_in_progress, align 4
  %tobool351 = icmp ne i32 %200, 0
  br i1 %tobool351, label %land.lhs.true.352, label %if.end.369

land.lhs.true.352:                                ; preds = %if.end.350
  %201 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %202 = bitcast %struct.rtx_def* %201 to i32*
  %bf.load353 = load i32, i32* %202, align 8
  %bf.clear354 = and i32 %bf.load353, 65535
  %cmp355 = icmp eq i32 %bf.clear354, 66
  br i1 %cmp355, label %land.lhs.true.357, label %if.end.369

land.lhs.true.357:                                ; preds = %land.lhs.true.352
  %203 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld358 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %203, i32 0, i32 1
  %arrayidx359 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld358, i32 0, i64 0
  %rtx360 = bitcast %union.rtunion_def* %arrayidx359 to %struct.rtx_def**
  %call361 = call %struct.rtx_def* @find_replacement(%struct.rtx_def** %rtx360)
  store %struct.rtx_def* %call361, %struct.rtx_def** %inner, align 8
  %204 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %fld362 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1
  %arrayidx363 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld362, i32 0, i64 0
  %rtx364 = bitcast %union.rtunion_def* %arrayidx363 to %struct.rtx_def**
  %205 = load %struct.rtx_def*, %struct.rtx_def** %rtx364, align 8
  %cmp365 = icmp ne %struct.rtx_def* %call361, %205
  br i1 %cmp365, label %if.then.367, label %if.end.369

if.then.367:                                      ; preds = %land.lhs.true.357
  %206 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %207 = load %struct.rtx_def*, %struct.rtx_def** %inner, align 8
  %call368 = call %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def* %206, %struct.rtx_def* %207)
  store %struct.rtx_def* %call368, %struct.rtx_def** %y.addr, align 8
  br label %if.end.369

if.end.369:                                       ; preds = %if.then.367, %land.lhs.true.357, %land.lhs.true.352, %if.end.350
  call void @start_sequence()
  store i32 0, i32* %need_clobber, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.369
  %208 = load i32, i32* %i, align 4
  %209 = load i32, i32* %mode, align 4
  %idxprom370 = sext i32 %209 to i64
  %arrayidx371 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom370
  %210 = load i8, i8* %arrayidx371, align 1
  %conv372 = zext i8 %210 to i32
  %211 = load i32, i32* @target_flags, align 4
  %and373 = and i32 %211, 33554432
  %tobool374 = icmp ne i32 %and373, 0
  %cond375 = select i1 %tobool374, i32 8, i32 4
  %sub376 = sub nsw i32 %cond375, 1
  %add377 = add nsw i32 %conv372, %sub376
  %212 = load i32, i32* @target_flags, align 4
  %and378 = and i32 %212, 33554432
  %tobool379 = icmp ne i32 %and378, 0
  %cond380 = select i1 %tobool379, i32 8, i32 4
  %div = sdiv i32 %add377, %cond380
  %cmp381 = icmp slt i32 %208, %div
  br i1 %cmp381, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %213 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %214 = load i32, i32* %i, align 4
  %215 = load i32, i32* %mode, align 4
  %call383 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %213, i32 %214, i32 1, i32 %215)
  store %struct.rtx_def* %call383, %struct.rtx_def** %xpart, align 8
  %216 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %217 = load i32, i32* %i, align 4
  %218 = load i32, i32* %mode, align 4
  %call384 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %216, i32 %217, i32 1, i32 %218)
  store %struct.rtx_def* %call384, %struct.rtx_def** %ypart, align 8
  %219 = load %struct.rtx_def*, %struct.rtx_def** %ypart, align 8
  %cmp385 = icmp eq %struct.rtx_def* %219, null
  br i1 %cmp385, label %land.lhs.true.387, label %if.else.430

land.lhs.true.387:                                ; preds = %for.body
  %220 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %221 = bitcast %struct.rtx_def* %220 to i32*
  %bf.load388 = load i32, i32* %221, align 8
  %bf.clear389 = and i32 %bf.load388, 65535
  %cmp390 = icmp eq i32 %bf.clear389, 67
  br i1 %cmp390, label %if.then.427, label %lor.lhs.false.392

lor.lhs.false.392:                                ; preds = %land.lhs.true.387
  %222 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %223 = bitcast %struct.rtx_def* %222 to i32*
  %bf.load393 = load i32, i32* %223, align 8
  %bf.clear394 = and i32 %bf.load393, 65535
  %cmp395 = icmp eq i32 %bf.clear394, 68
  br i1 %cmp395, label %if.then.427, label %lor.lhs.false.397

lor.lhs.false.397:                                ; preds = %lor.lhs.false.392
  %224 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %225 = bitcast %struct.rtx_def* %224 to i32*
  %bf.load398 = load i32, i32* %225, align 8
  %bf.clear399 = and i32 %bf.load398, 65535
  %cmp400 = icmp eq i32 %bf.clear399, 54
  br i1 %cmp400, label %if.then.427, label %lor.lhs.false.402

lor.lhs.false.402:                                ; preds = %lor.lhs.false.397
  %226 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %227 = bitcast %struct.rtx_def* %226 to i32*
  %bf.load403 = load i32, i32* %227, align 8
  %bf.clear404 = and i32 %bf.load403, 65535
  %cmp405 = icmp eq i32 %bf.clear404, 55
  br i1 %cmp405, label %if.then.427, label %lor.lhs.false.407

lor.lhs.false.407:                                ; preds = %lor.lhs.false.402
  %228 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %229 = bitcast %struct.rtx_def* %228 to i32*
  %bf.load408 = load i32, i32* %229, align 8
  %bf.clear409 = and i32 %bf.load408, 65535
  %cmp410 = icmp eq i32 %bf.clear409, 58
  br i1 %cmp410, label %if.then.427, label %lor.lhs.false.412

lor.lhs.false.412:                                ; preds = %lor.lhs.false.407
  %230 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %231 = bitcast %struct.rtx_def* %230 to i32*
  %bf.load413 = load i32, i32* %231, align 8
  %bf.clear414 = and i32 %bf.load413, 65535
  %cmp415 = icmp eq i32 %bf.clear414, 134
  br i1 %cmp415, label %if.then.427, label %lor.lhs.false.417

lor.lhs.false.417:                                ; preds = %lor.lhs.false.412
  %232 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %233 = bitcast %struct.rtx_def* %232 to i32*
  %bf.load418 = load i32, i32* %233, align 8
  %bf.clear419 = and i32 %bf.load418, 65535
  %cmp420 = icmp eq i32 %bf.clear419, 56
  br i1 %cmp420, label %if.then.427, label %lor.lhs.false.422

lor.lhs.false.422:                                ; preds = %lor.lhs.false.417
  %234 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %235 = bitcast %struct.rtx_def* %234 to i32*
  %bf.load423 = load i32, i32* %235, align 8
  %bf.clear424 = and i32 %bf.load423, 65535
  %cmp425 = icmp eq i32 %bf.clear424, 140
  br i1 %cmp425, label %if.then.427, label %if.else.430

if.then.427:                                      ; preds = %lor.lhs.false.422, %lor.lhs.false.417, %lor.lhs.false.412, %lor.lhs.false.407, %lor.lhs.false.402, %lor.lhs.false.397, %lor.lhs.false.392, %land.lhs.true.387
  %236 = load i32, i32* %mode, align 4
  %237 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %call428 = call %struct.rtx_def* @force_const_mem(i32 %236, %struct.rtx_def* %237)
  store %struct.rtx_def* %call428, %struct.rtx_def** %y.addr, align 8
  %238 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %239 = load i32, i32* %i, align 4
  %240 = load i32, i32* %mode, align 4
  %call429 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %238, i32 %239, i32 1, i32 %240)
  store %struct.rtx_def* %call429, %struct.rtx_def** %ypart, align 8
  br label %if.end.436

if.else.430:                                      ; preds = %lor.lhs.false.422, %for.body
  %241 = load %struct.rtx_def*, %struct.rtx_def** %ypart, align 8
  %cmp431 = icmp eq %struct.rtx_def* %241, null
  br i1 %cmp431, label %if.then.433, label %if.end.435

if.then.433:                                      ; preds = %if.else.430
  %242 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %243 = load i32, i32* %i, align 4
  %244 = load i32, i32* %mode, align 4
  %call434 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %242, i32 %243, i32 %244)
  store %struct.rtx_def* %call434, %struct.rtx_def** %ypart, align 8
  br label %if.end.435

if.end.435:                                       ; preds = %if.then.433, %if.else.430
  br label %if.end.436

if.end.436:                                       ; preds = %if.end.435, %if.then.427
  %245 = load %struct.rtx_def*, %struct.rtx_def** %xpart, align 8
  %cmp437 = icmp eq %struct.rtx_def* %245, null
  br i1 %cmp437, label %if.then.442, label %lor.lhs.false.439

lor.lhs.false.439:                                ; preds = %if.end.436
  %246 = load %struct.rtx_def*, %struct.rtx_def** %ypart, align 8
  %cmp440 = icmp eq %struct.rtx_def* %246, null
  br i1 %cmp440, label %if.then.442, label %if.end.443

if.then.442:                                      ; preds = %lor.lhs.false.439, %if.end.436
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3077, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.emit_move_insn_1, i32 0, i32 0)) #6
  unreachable

if.end.443:                                       ; preds = %lor.lhs.false.439
  %247 = load %struct.rtx_def*, %struct.rtx_def** %xpart, align 8
  %248 = bitcast %struct.rtx_def* %247 to i32*
  %bf.load444 = load i32, i32* %248, align 8
  %bf.clear445 = and i32 %bf.load444, 65535
  %cmp446 = icmp eq i32 %bf.clear445, 63
  %conv447 = zext i1 %cmp446 to i32
  %249 = load i32, i32* %need_clobber, align 4
  %or448 = or i32 %249, %conv447
  store i32 %or448, i32* %need_clobber, align 4
  %250 = load %struct.rtx_def*, %struct.rtx_def** %xpart, align 8
  %251 = load %struct.rtx_def*, %struct.rtx_def** %ypart, align 8
  %call449 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %250, %struct.rtx_def* %251)
  store %struct.rtx_def* %call449, %struct.rtx_def** %last_insn, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.443
  %252 = load i32, i32* %i, align 4
  %inc = add nsw i32 %252, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call450 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call450, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %253 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %254 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8
  %cmp451 = icmp ne %struct.rtx_def* %253, %254
  br i1 %cmp451, label %land.lhs.true.453, label %if.end.463

land.lhs.true.453:                                ; preds = %for.end
  %255 = load i32, i32* @reload_in_progress, align 4
  %tobool454 = icmp ne i32 %255, 0
  br i1 %tobool454, label %if.end.463, label %lor.lhs.false.455

lor.lhs.false.455:                                ; preds = %land.lhs.true.453
  %256 = load i32, i32* @reload_completed, align 4
  %tobool456 = icmp ne i32 %256, 0
  br i1 %tobool456, label %if.end.463, label %land.lhs.true.457

land.lhs.true.457:                                ; preds = %lor.lhs.false.455
  %257 = load i32, i32* %need_clobber, align 4
  %cmp458 = icmp ne i32 %257, 0
  br i1 %cmp458, label %if.then.460, label %if.end.463

if.then.460:                                      ; preds = %land.lhs.true.457
  %258 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call461 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %258)
  %call462 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call461)
  br label %if.end.463

if.end.463:                                       ; preds = %if.then.460, %land.lhs.true.457, %lor.lhs.false.455, %land.lhs.true.453, %for.end
  %259 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call464 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %259)
  %260 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  store %struct.rtx_def* %260, %struct.rtx_def** %retval
  br label %return

if.else.465:                                      ; preds = %if.else.243
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3101, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.emit_move_insn_1, i32 0, i32 0)) #6
  unreachable

return:                                           ; preds = %if.end.463, %if.end.241, %if.else.190, %if.then.186, %if.then.4
  %261 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %261
}

declare %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @expand_binop(i32, %struct.optab*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare %struct.rtx_def* @change_address(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_realpart(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_imagpart(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_SUBREG(i32, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @find_replacement(%struct.rtx_def**) #1

declare %struct.rtx_def* @gen_sequence() #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @push_block(%struct.rtx_def* %size, i32 %extra, i32 %below) #0 {
entry:
  %size.addr = alloca %struct.rtx_def*, align 8
  %extra.addr = alloca i32, align 4
  %below.addr = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  store i32 %extra, i32* %extra.addr, align 4
  store i32 %below, i32* %below.addr, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load i32, i32* @ptr_mode, align 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call = call %struct.rtx_def* @convert_modes(i32 %cond, i32 %1, %struct.rtx_def* %2, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %size.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 67
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load1 = load i32, i32* %6, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 68
  br i1 %cmp3, label %if.then, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load5 = load i32, i32* %8, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 54
  br i1 %cmp7, label %if.then, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load9 = load i32, i32* %10, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 55
  br i1 %cmp11, label %if.then, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load13 = load i32, i32* %12, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 58
  br i1 %cmp15, label %if.then, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %lor.lhs.false.12
  %13 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load17 = load i32, i32* %14, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 134
  br i1 %cmp19, label %if.then, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.16
  %15 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load21 = load i32, i32* %16, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 56
  br i1 %cmp23, label %if.then, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.20
  %17 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load25 = load i32, i32* %18, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 140
  br i1 %cmp27, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.24, %lor.lhs.false.20, %lor.lhs.false.16, %lor.lhs.false.12, %lor.lhs.false.8, %lor.lhs.false.4, %lor.lhs.false, %entry
  %19 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %20 = load i32, i32* %extra.addr, align 4
  %conv = sext i32 %20 to i64
  %call28 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %19, i64 %conv)
  call void @anti_adjust_stack(%struct.rtx_def* %call28)
  br label %if.end.51

if.else:                                          ; preds = %lor.lhs.false.24
  %21 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load29 = load i32, i32* %22, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 61
  br i1 %cmp31, label %land.lhs.true, label %if.else.36

land.lhs.true:                                    ; preds = %if.else
  %23 = load i32, i32* %extra.addr, align 4
  %cmp33 = icmp eq i32 %23, 0
  br i1 %cmp33, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %land.lhs.true
  %24 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  call void @anti_adjust_stack(%struct.rtx_def* %24)
  br label %if.end.50

if.else.36:                                       ; preds = %land.lhs.true, %if.else
  %25 = load i32, i32* @target_flags, align 4
  %and37 = and i32 %25, 33554432
  %tobool38 = icmp ne i32 %and37, 0
  %cond39 = select i1 %tobool38, i32 5, i32 4
  %26 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call40 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond39, %struct.rtx_def* %26)
  store %struct.rtx_def* %call40, %struct.rtx_def** %temp, align 8
  %27 = load i32, i32* %extra.addr, align 4
  %cmp41 = icmp ne i32 %27, 0
  br i1 %cmp41, label %if.then.43, label %if.end

if.then.43:                                       ; preds = %if.else.36
  %28 = load i32, i32* @target_flags, align 4
  %and44 = and i32 %28, 33554432
  %tobool45 = icmp ne i32 %and44, 0
  %cond46 = select i1 %tobool45, i32 5, i32 4
  %29 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %31 = load i32, i32* %extra.addr, align 4
  %conv47 = sext i32 %31 to i64
  %call48 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv47)
  %32 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call49 = call %struct.rtx_def* @expand_binop(i32 %cond46, %struct.optab* %29, %struct.rtx_def* %30, %struct.rtx_def* %call48, %struct.rtx_def* %32, i32 0, i32 3)
  store %struct.rtx_def* %call49, %struct.rtx_def** %temp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.43, %if.else.36
  %33 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  call void @anti_adjust_stack(%struct.rtx_def* %33)
  br label %if.end.50

if.end.50:                                        ; preds = %if.end, %if.then.35
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then
  %34 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 9), align 8
  store %struct.rtx_def* %34, %struct.rtx_def** %temp, align 8
  %35 = load i32, i32* %extra.addr, align 4
  %cmp52 = icmp ne i32 %35, 0
  br i1 %cmp52, label %land.lhs.true.54, label %if.end.59

land.lhs.true.54:                                 ; preds = %if.end.51
  %36 = load i32, i32* %below.addr, align 4
  %tobool55 = icmp ne i32 %36, 0
  br i1 %tobool55, label %if.then.56, label %if.end.59

if.then.56:                                       ; preds = %land.lhs.true.54
  %37 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %38 = load i32, i32* %extra.addr, align 4
  %conv57 = sext i32 %38 to i64
  %call58 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %37, i64 %conv57)
  store %struct.rtx_def* %call58, %struct.rtx_def** %temp, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.56, %land.lhs.true.54, %if.end.51
  %39 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  %40 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call60 = call %struct.rtx_def* @memory_address(i32 %39, %struct.rtx_def* %40)
  ret %struct.rtx_def* %call60
}

declare void @anti_adjust_stack(%struct.rtx_def*) #1

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #1

declare %struct.rtx_def* @memory_address(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @emit_push_insn(%struct.rtx_def* %x, i32 %mode, %union.tree_node* %type, %struct.rtx_def* %size, i32 %align, i32 %partial, %struct.rtx_def* %reg, i32 %extra, %struct.rtx_def* %args_addr, %struct.rtx_def* %args_so_far, i32 %reg_parm_stack_space, %struct.rtx_def* %alignment_pad) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca i32, align 4
  %partial.addr = alloca i32, align 4
  %reg.addr = alloca %struct.rtx_def*, align 8
  %extra.addr = alloca i32, align 4
  %args_addr.addr = alloca %struct.rtx_def*, align 8
  %args_so_far.addr = alloca %struct.rtx_def*, align 8
  %reg_parm_stack_space.addr = alloca i32, align 4
  %alignment_pad.addr = alloca %struct.rtx_def*, align 8
  %xinner = alloca %struct.rtx_def*, align 8
  %stack_direction = alloca i32, align 4
  %where_pad = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %used = alloca i32, align 4
  %offset = alloca i32, align 4
  %skip = alloca i32, align 4
  %target = alloca %struct.rtx_def*, align 8
  %opalign = alloca %struct.rtx_def*, align 8
  %mode164 = alloca i32, align 4
  %code = alloca i32, align 4
  %pred = alloca i32 (%struct.rtx_def*, i32)*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %size291 = alloca i32, align 4
  %i = alloca i32, align 4
  %not_stack = alloca i32, align 4
  %offset299 = alloca i32, align 4
  %args_offset = alloca i32, align 4
  %skip312 = alloca i32, align 4
  %addr = alloca %struct.rtx_def*, align 8
  %target425 = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  store i32 %partial, i32* %partial.addr, align 4
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store i32 %extra, i32* %extra.addr, align 4
  store %struct.rtx_def* %args_addr, %struct.rtx_def** %args_addr.addr, align 8
  store %struct.rtx_def* %args_so_far, %struct.rtx_def** %args_so_far.addr, align 8
  store i32 %reg_parm_stack_space, i32* %reg_parm_stack_space.addr, align 4
  store %struct.rtx_def* %alignment_pad, %struct.rtx_def** %alignment_pad.addr, align 8
  store i32 2, i32* %stack_direction, align 4
  store i32 1, i32* %where_pad, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %call, %struct.rtx_def** %xinner, align 8
  %1 = load i32, i32* %mode.addr, align 4
  %cmp = icmp eq i32 %1, 51
  br i1 %cmp, label %if.then, label %if.else.287

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %partial.addr, align 4
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 8, i32 4
  %mul = mul nsw i32 %2, %cond
  store i32 %mul, i32* %used, align 4
  %4 = load i32, i32* %used, align 4
  %5 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %5, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond3 = select i1 %tobool2, i32 64, i32 32
  %div = sdiv i32 %cond3, 8
  %rem = srem i32 %4, %div
  store i32 %rem, i32* %offset, align 4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %cmp4 = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3301, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.emit_push_insn, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %if.then
  %7 = load i32, i32* %offset, align 4
  %8 = load i32, i32* %used, align 4
  %sub = sub nsw i32 %8, %7
  store i32 %sub, i32* %used, align 4
  %9 = load i32, i32* %partial.addr, align 4
  %cmp6 = icmp ne i32 %9, 0
  br i1 %cmp6, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %xinner, align 8
  %11 = load i32, i32* %used, align 4
  %conv = sext i32 %11 to i64
  %call8 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %10, i32 51, i64 %conv, i32 1, i32 1)
  store %struct.rtx_def* %call8, %struct.rtx_def** %xinner, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.7, %if.end
  %12 = load i32, i32* %reg_parm_stack_space.addr, align 4
  %cmp10 = icmp eq i32 %12, 0
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.9
  br label %cond.end

cond.false:                                       ; preds = %if.end.9
  %13 = load i32, i32* %used, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond12 = phi i32 [ 0, %cond.true ], [ %13, %cond.false ]
  store i32 %cond12, i32* %skip, align 4
  %14 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %cmp13 = icmp eq %struct.rtx_def* %14, null
  br i1 %cmp13, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.end
  %15 = load i32, i32* @target_flags, align 4
  %and15 = and i32 %15, 2048
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.else, label %land.lhs.true.17

land.lhs.true.17:                                 ; preds = %land.lhs.true
  %16 = load i32, i32* @target_flags, align 4
  %and18 = and i32 %16, 4096
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.else, label %land.lhs.true.20

land.lhs.true.20:                                 ; preds = %land.lhs.true.17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load = load i32, i32* %18, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp21 = icmp eq i32 %bf.clear, 54
  br i1 %cmp21, label %land.lhs.true.23, label %if.else

land.lhs.true.23:                                 ; preds = %land.lhs.true.20
  %19 = load i32, i32* %skip, align 4
  %cmp24 = icmp eq i32 %19, 0
  br i1 %cmp24, label %land.lhs.true.26, label %if.else

land.lhs.true.26:                                 ; preds = %land.lhs.true.23
  %20 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %21 = load i64, i64* %rtwint, align 8
  %conv27 = trunc i64 %21 to i32
  %22 = load i32, i32* %used, align 4
  %sub28 = sub i32 %conv27, %22
  %conv29 = zext i32 %sub28 to i64
  %23 = load i32, i32* %align.addr, align 4
  %call30 = call i64 @move_by_pieces_ninsns(i64 %conv29, i32 %23)
  %24 = load i32, i32* @optimize_size, align 4
  %tobool31 = icmp ne i32 %24, 0
  br i1 %tobool31, label %cond.true.32, label %cond.false.33

cond.true.32:                                     ; preds = %land.lhs.true.26
  br label %cond.end.34

cond.false.33:                                    ; preds = %land.lhs.true.26
  %25 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %25, i32 0, i32 10
  %26 = load i32, i32* %move_ratio, align 4
  br label %cond.end.34

cond.end.34:                                      ; preds = %cond.false.33, %cond.true.32
  %cond35 = phi i32 [ 3, %cond.true.32 ], [ %26, %cond.false.33 ]
  %conv36 = zext i32 %cond35 to i64
  %cmp37 = icmp ult i64 %call30, %conv36
  br i1 %cmp37, label %land.lhs.true.39, label %if.else

land.lhs.true.39:                                 ; preds = %cond.end.34
  %27 = load i32, i32* @target_flags, align 4
  %and40 = and i32 %27, 33554432
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %cond.true.42, label %cond.false.47

cond.true.42:                                     ; preds = %land.lhs.true.39
  %28 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtwint45 = bitcast %union.rtunion_def* %arrayidx44 to i64*
  %29 = load i64, i64* %rtwint45, align 8
  %add = add nsw i64 %29, 7
  %and46 = and i64 %add, -8
  br label %cond.end.53

cond.false.47:                                    ; preds = %land.lhs.true.39
  %30 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtwint50 = bitcast %union.rtunion_def* %arrayidx49 to i64*
  %31 = load i64, i64* %rtwint50, align 8
  %add51 = add nsw i64 %31, 1
  %and52 = and i64 %add51, -2
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.47, %cond.true.42
  %cond54 = phi i64 [ %and46, %cond.true.42 ], [ %and52, %cond.false.47 ]
  %32 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtwint57 = bitcast %union.rtunion_def* %arrayidx56 to i64*
  %33 = load i64, i64* %rtwint57, align 8
  %cmp58 = icmp eq i64 %cond54, %33
  br i1 %cmp58, label %if.then.60, label %if.else

if.then.60:                                       ; preds = %cond.end.53
  %34 = load i32, i32* %extra.addr, align 4
  %tobool61 = icmp ne i32 %34, 0
  br i1 %tobool61, label %land.lhs.true.62, label %if.end.74

land.lhs.true.62:                                 ; preds = %if.then.60
  %35 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %cmp63 = icmp eq %struct.rtx_def* %35, null
  br i1 %cmp63, label %land.lhs.true.65, label %if.end.74

land.lhs.true.65:                                 ; preds = %land.lhs.true.62
  %36 = load i32, i32* %where_pad, align 4
  %cmp66 = icmp ne i32 %36, 0
  br i1 %cmp66, label %land.lhs.true.68, label %if.end.74

land.lhs.true.68:                                 ; preds = %land.lhs.true.65
  %37 = load i32, i32* %where_pad, align 4
  %38 = load i32, i32* %stack_direction, align 4
  %cmp69 = icmp ne i32 %37, %38
  br i1 %cmp69, label %if.then.71, label %if.end.74

if.then.71:                                       ; preds = %land.lhs.true.68
  %39 = load i32, i32* %extra.addr, align 4
  %conv72 = sext i32 %39 to i64
  %call73 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv72)
  call void @anti_adjust_stack(%struct.rtx_def* %call73)
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.71, %land.lhs.true.68, %land.lhs.true.65, %land.lhs.true.62, %if.then.60
  %40 = load %struct.rtx_def*, %struct.rtx_def** %xinner, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtwint77 = bitcast %union.rtunion_def* %arrayidx76 to i64*
  %42 = load i64, i64* %rtwint77, align 8
  %43 = load i32, i32* %used, align 4
  %conv78 = sext i32 %43 to i64
  %sub79 = sub nsw i64 %42, %conv78
  %44 = load i32, i32* %align.addr, align 4
  call void @move_by_pieces(%struct.rtx_def* null, %struct.rtx_def* %40, i64 %sub79, i32 %44)
  br label %if.end.286

if.else:                                          ; preds = %cond.end.53, %cond.end.34, %land.lhs.true.23, %land.lhs.true.20, %land.lhs.true.17, %land.lhs.true, %cond.end
  %45 = load i32, i32* %partial.addr, align 4
  %cmp80 = icmp ne i32 %45, 0
  br i1 %cmp80, label %if.then.82, label %if.end.101

if.then.82:                                       ; preds = %if.else
  %46 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load83 = load i32, i32* %47, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 54
  br i1 %cmp85, label %if.then.87, label %if.else.94

if.then.87:                                       ; preds = %if.then.82
  %48 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtwint90 = bitcast %union.rtunion_def* %arrayidx89 to i64*
  %49 = load i64, i64* %rtwint90, align 8
  %50 = load i32, i32* %used, align 4
  %conv91 = sext i32 %50 to i64
  %sub92 = sub nsw i64 %49, %conv91
  %call93 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub92)
  store %struct.rtx_def* %call93, %struct.rtx_def** %size.addr, align 8
  br label %if.end.100

if.else.94:                                       ; preds = %if.then.82
  %51 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load95 = load i32, i32* %52, align 8
  %bf.lshr = lshr i32 %bf.load95, 16
  %bf.clear96 = and i32 %bf.lshr, 255
  %53 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %55 = load i32, i32* %used, align 4
  %conv97 = sext i32 %55 to i64
  %call98 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv97)
  %call99 = call %struct.rtx_def* @expand_binop(i32 %bf.clear96, %struct.optab* %53, %struct.rtx_def* %54, %struct.rtx_def* %call98, %struct.rtx_def* null, i32 0, i32 3)
  store %struct.rtx_def* %call99, %struct.rtx_def** %size.addr, align 8
  br label %if.end.100

if.end.100:                                       ; preds = %if.else.94, %if.then.87
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %if.else
  %56 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %tobool102 = icmp ne %struct.rtx_def* %56, null
  br i1 %tobool102, label %if.else.107, label %if.then.103

if.then.103:                                      ; preds = %if.end.101
  %57 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %58 = load i32, i32* %extra.addr, align 4
  %59 = load i32, i32* %where_pad, align 4
  %cmp104 = icmp eq i32 %59, 2
  %conv105 = zext i1 %cmp104 to i32
  %call106 = call %struct.rtx_def* @push_block(%struct.rtx_def* %57, i32 %58, i32 %conv105)
  store %struct.rtx_def* %call106, %struct.rtx_def** %temp, align 8
  store i32 0, i32* %extra.addr, align 4
  br label %if.end.129

if.else.107:                                      ; preds = %if.end.101
  %60 = load %struct.rtx_def*, %struct.rtx_def** %args_so_far.addr, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load108 = load i32, i32* %61, align 8
  %bf.clear109 = and i32 %bf.load108, 65535
  %cmp110 = icmp eq i32 %bf.clear109, 54
  br i1 %cmp110, label %if.then.112, label %if.else.120

if.then.112:                                      ; preds = %if.else.107
  %62 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %63 = load i32, i32* %skip, align 4
  %conv113 = sext i32 %63 to i64
  %64 = load %struct.rtx_def*, %struct.rtx_def** %args_so_far.addr, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 0
  %rtwint116 = bitcast %union.rtunion_def* %arrayidx115 to i64*
  %65 = load i64, i64* %rtwint116, align 8
  %add117 = add nsw i64 %conv113, %65
  %call118 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %62, i64 %add117)
  %call119 = call %struct.rtx_def* @memory_address(i32 51, %struct.rtx_def* %call118)
  store %struct.rtx_def* %call119, %struct.rtx_def** %temp, align 8
  br label %if.end.128

if.else.120:                                      ; preds = %if.else.107
  %66 = load i32, i32* @target_flags, align 4
  %and121 = and i32 %66, 33554432
  %tobool122 = icmp ne i32 %and121, 0
  %cond123 = select i1 %tobool122, i32 5, i32 4
  %67 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %68 = load %struct.rtx_def*, %struct.rtx_def** %args_so_far.addr, align 8
  %call124 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond123, %struct.rtx_def* %67, %struct.rtx_def* %68)
  %69 = load i32, i32* %skip, align 4
  %conv125 = sext i32 %69 to i64
  %call126 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %call124, i64 %conv125)
  %call127 = call %struct.rtx_def* @memory_address(i32 51, %struct.rtx_def* %call126)
  store %struct.rtx_def* %call127, %struct.rtx_def** %temp, align 8
  br label %if.end.128

if.end.128:                                       ; preds = %if.else.120, %if.then.112
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.then.103
  %70 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call130 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %70)
  store %struct.rtx_def* %call130, %struct.rtx_def** %target, align 8
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %cmp131 = icmp ne %union.tree_node* %71, null
  br i1 %cmp131, label %if.then.133, label %if.else.134

if.then.133:                                      ; preds = %if.end.129
  %72 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %72, %union.tree_node* %73, i32 1)
  %74 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  call void @set_mem_alias_set(%struct.rtx_def* %74, i64 0)
  br label %if.end.135

if.else.134:                                      ; preds = %if.end.129
  %75 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %76 = load i32, i32* %align.addr, align 4
  call void @set_mem_align(%struct.rtx_def* %75, i32 %76)
  br label %if.end.135

if.end.135:                                       ; preds = %if.else.134, %if.then.133
  %77 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %78 = bitcast %struct.rtx_def* %77 to i32*
  %bf.load136 = load i32, i32* %78, align 8
  %bf.clear137 = and i32 %bf.load136, 65535
  %cmp138 = icmp eq i32 %bf.clear137, 54
  br i1 %cmp138, label %land.lhs.true.140, label %if.else.160

land.lhs.true.140:                                ; preds = %if.end.135
  %79 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld141, i32 0, i64 0
  %rtwint143 = bitcast %union.rtunion_def* %arrayidx142 to i64*
  %80 = load i64, i64* %rtwint143, align 8
  %conv144 = trunc i64 %80 to i32
  %conv145 = zext i32 %conv144 to i64
  %81 = load i32, i32* %align.addr, align 4
  %call146 = call i64 @move_by_pieces_ninsns(i64 %conv145, i32 %81)
  %82 = load i32, i32* @optimize_size, align 4
  %tobool147 = icmp ne i32 %82, 0
  br i1 %tobool147, label %cond.true.148, label %cond.false.149

cond.true.148:                                    ; preds = %land.lhs.true.140
  br label %cond.end.151

cond.false.149:                                   ; preds = %land.lhs.true.140
  %83 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8
  %move_ratio150 = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %83, i32 0, i32 10
  %84 = load i32, i32* %move_ratio150, align 4
  br label %cond.end.151

cond.end.151:                                     ; preds = %cond.false.149, %cond.true.148
  %cond152 = phi i32 [ 3, %cond.true.148 ], [ %84, %cond.false.149 ]
  %conv153 = zext i32 %cond152 to i64
  %cmp154 = icmp ult i64 %call146, %conv153
  br i1 %cmp154, label %if.then.156, label %if.else.160

if.then.156:                                      ; preds = %cond.end.151
  %85 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %86 = load %struct.rtx_def*, %struct.rtx_def** %xinner, align 8
  %87 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i32 0, i64 0
  %rtwint159 = bitcast %union.rtunion_def* %arrayidx158 to i64*
  %88 = load i64, i64* %rtwint159, align 8
  %89 = load i32, i32* %align.addr, align 4
  call void @move_by_pieces(%struct.rtx_def* %85, %struct.rtx_def* %86, i64 %88, i32 %89)
  br label %ret

if.else.160:                                      ; preds = %cond.end.151, %if.end.135
  %90 = load i32, i32* %align.addr, align 4
  %div161 = udiv i32 %90, 8
  %conv162 = zext i32 %div161 to i64
  %call163 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv162)
  store %struct.rtx_def* %call163, %struct.rtx_def** %opalign, align 8
  %91 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %91, i32* %mode164, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.160
  %92 = load i32, i32* %mode164, align 4
  %cmp165 = icmp ne i32 %92, 0
  br i1 %cmp165, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %93 = load i32, i32* %mode164, align 4
  %idxprom = sext i32 %93 to i64
  %arrayidx167 = getelementptr inbounds [59 x i32], [59 x i32]* @movstr_optab, i32 0, i64 %idxprom
  %94 = load i32, i32* %arrayidx167, align 4
  store i32 %94, i32* %code, align 4
  %95 = load i32, i32* %code, align 4
  %cmp168 = icmp ne i32 %95, 1317
  br i1 %cmp168, label %land.lhs.true.170, label %if.end.243

land.lhs.true.170:                                ; preds = %for.body
  %96 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %97 = bitcast %struct.rtx_def* %96 to i32*
  %bf.load171 = load i32, i32* %97, align 8
  %bf.clear172 = and i32 %bf.load171, 65535
  %cmp173 = icmp eq i32 %bf.clear172, 54
  br i1 %cmp173, label %land.lhs.true.175, label %lor.lhs.false

land.lhs.true.175:                                ; preds = %land.lhs.true.170
  %98 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %fld176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %arrayidx177 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld176, i32 0, i64 0
  %rtwint178 = bitcast %union.rtunion_def* %arrayidx177 to i64*
  %99 = load i64, i64* %rtwint178, align 8
  %100 = load i32, i32* %mode164, align 4
  %idxprom179 = sext i32 %100 to i64
  %arrayidx180 = getelementptr inbounds [59 x i64], [59 x i64]* @mode_mask_array, i32 0, i64 %idxprom179
  %101 = load i64, i64* %arrayidx180, align 8
  %shr = lshr i64 %101, 1
  %cmp181 = icmp ule i64 %99, %shr
  br i1 %cmp181, label %land.lhs.true.191, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.175, %land.lhs.true.170
  %102 = load i32, i32* %mode164, align 4
  %idxprom183 = sext i32 %102 to i64
  %arrayidx184 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom183
  %103 = load i16, i16* %arrayidx184, align 2
  %conv185 = zext i16 %103 to i32
  %104 = load i32, i32* @target_flags, align 4
  %and186 = and i32 %104, 33554432
  %tobool187 = icmp ne i32 %and186, 0
  %cond188 = select i1 %tobool187, i32 64, i32 32
  %cmp189 = icmp sge i32 %conv185, %cond188
  br i1 %cmp189, label %land.lhs.true.191, label %if.end.243

land.lhs.true.191:                                ; preds = %lor.lhs.false, %land.lhs.true.175
  %105 = load i32, i32* %code, align 4
  %idxprom192 = sext i32 %105 to i64
  %arrayidx193 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom192
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx193, i32 0, i32 3
  %106 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx194 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %106, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx194, i32 0, i32 0
  %107 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  store i32 (%struct.rtx_def*, i32)* %107, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %tobool195 = icmp ne i32 (%struct.rtx_def*, i32)* %107, null
  br i1 %tobool195, label %lor.lhs.false.196, label %land.lhs.true.199

lor.lhs.false.196:                                ; preds = %land.lhs.true.191
  %108 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %109 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %call197 = call i32 %108(%struct.rtx_def* %109, i32 51)
  %tobool198 = icmp ne i32 %call197, 0
  br i1 %tobool198, label %land.lhs.true.199, label %if.end.243

land.lhs.true.199:                                ; preds = %lor.lhs.false.196, %land.lhs.true.191
  %110 = load i32, i32* %code, align 4
  %idxprom200 = sext i32 %110 to i64
  %arrayidx201 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom200
  %operand202 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx201, i32 0, i32 3
  %111 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand202, align 8
  %arrayidx203 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %111, i64 1
  %predicate204 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx203, i32 0, i32 0
  %112 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate204, align 8
  store i32 (%struct.rtx_def*, i32)* %112, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %tobool205 = icmp ne i32 (%struct.rtx_def*, i32)* %112, null
  br i1 %tobool205, label %lor.lhs.false.206, label %land.lhs.true.209

lor.lhs.false.206:                                ; preds = %land.lhs.true.199
  %113 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %xinner, align 8
  %call207 = call i32 %113(%struct.rtx_def* %114, i32 51)
  %tobool208 = icmp ne i32 %call207, 0
  br i1 %tobool208, label %land.lhs.true.209, label %if.end.243

land.lhs.true.209:                                ; preds = %lor.lhs.false.206, %land.lhs.true.199
  %115 = load i32, i32* %code, align 4
  %idxprom210 = sext i32 %115 to i64
  %arrayidx211 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom210
  %operand212 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx211, i32 0, i32 3
  %116 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand212, align 8
  %arrayidx213 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %116, i64 3
  %predicate214 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx213, i32 0, i32 0
  %117 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate214, align 8
  store i32 (%struct.rtx_def*, i32)* %117, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %tobool215 = icmp ne i32 (%struct.rtx_def*, i32)* %117, null
  br i1 %tobool215, label %lor.lhs.false.216, label %if.then.219

lor.lhs.false.216:                                ; preds = %land.lhs.true.209
  %118 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %opalign, align 8
  %call217 = call i32 %118(%struct.rtx_def* %119, i32 0)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.then.219, label %if.end.243

if.then.219:                                      ; preds = %lor.lhs.false.216, %land.lhs.true.209
  %120 = load i32, i32* %mode164, align 4
  %121 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %call220 = call %struct.rtx_def* @convert_to_mode(i32 %120, %struct.rtx_def* %121, i32 1)
  store %struct.rtx_def* %call220, %struct.rtx_def** %op2, align 8
  %call221 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call221, %struct.rtx_def** %last, align 8
  %122 = load i32, i32* %code, align 4
  %idxprom222 = sext i32 %122 to i64
  %arrayidx223 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom222
  %operand224 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx223, i32 0, i32 3
  %123 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand224, align 8
  %arrayidx225 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %123, i64 2
  %predicate226 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx225, i32 0, i32 0
  %124 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate226, align 8
  store i32 (%struct.rtx_def*, i32)* %124, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %125 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %cmp227 = icmp ne i32 (%struct.rtx_def*, i32)* %125, null
  br i1 %cmp227, label %land.lhs.true.229, label %if.end.234

land.lhs.true.229:                                ; preds = %if.then.219
  %126 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %127 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %128 = load i32, i32* %mode164, align 4
  %call230 = call i32 %126(%struct.rtx_def* %127, i32 %128)
  %tobool231 = icmp ne i32 %call230, 0
  br i1 %tobool231, label %if.end.234, label %if.then.232

if.then.232:                                      ; preds = %land.lhs.true.229
  %129 = load i32, i32* %mode164, align 4
  %130 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call233 = call %struct.rtx_def* @copy_to_mode_reg(i32 %129, %struct.rtx_def* %130)
  store %struct.rtx_def* %call233, %struct.rtx_def** %op2, align 8
  br label %if.end.234

if.end.234:                                       ; preds = %if.then.232, %land.lhs.true.229, %if.then.219
  %131 = load i32, i32* %code, align 4
  %idxprom235 = sext i32 %131 to i64
  %arrayidx236 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom235
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx236, i32 0, i32 2
  %132 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %xinner, align 8
  %135 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %136 = load %struct.rtx_def*, %struct.rtx_def** %opalign, align 8
  %call237 = call %struct.rtx_def* (%struct.rtx_def*, ...) %132(%struct.rtx_def* %133, %struct.rtx_def* %134, %struct.rtx_def* %135, %struct.rtx_def* %136)
  store %struct.rtx_def* %call237, %struct.rtx_def** %pat, align 8
  %137 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %tobool238 = icmp ne %struct.rtx_def* %137, null
  br i1 %tobool238, label %if.then.239, label %if.else.241

if.then.239:                                      ; preds = %if.end.234
  %138 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call240 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %138)
  br label %ret

if.else.241:                                      ; preds = %if.end.234
  %139 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  call void @delete_insns_since(%struct.rtx_def* %139)
  br label %if.end.242

if.end.242:                                       ; preds = %if.else.241
  br label %if.end.243

if.end.243:                                       ; preds = %if.end.242, %lor.lhs.false.216, %lor.lhs.false.206, %lor.lhs.false.196, %lor.lhs.false, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.243
  %140 = load i32, i32* %mode164, align 4
  %idxprom244 = sext i32 %140 to i64
  %arrayidx245 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom244
  %141 = load i8, i8* %arrayidx245, align 1
  %conv246 = zext i8 %141 to i32
  store i32 %conv246, i32* %mode164, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.247

if.end.247:                                       ; preds = %for.end
  %142 = load i32, i32* @target_flags, align 4
  %and248 = and i32 %142, 4096
  %tobool249 = icmp ne i32 %and248, 0
  br i1 %tobool249, label %if.end.259, label %if.then.250

if.then.250:                                      ; preds = %if.end.247
  %143 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 8), align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call251 = call i32 @reg_mentioned_p(%struct.rtx_def* %143, %struct.rtx_def* %144)
  %tobool252 = icmp ne i32 %call251, 0
  br i1 %tobool252, label %if.then.256, label %lor.lhs.false.253

lor.lhs.false.253:                                ; preds = %if.then.250
  %145 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 9), align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call254 = call i32 @reg_mentioned_p(%struct.rtx_def* %145, %struct.rtx_def* %146)
  %tobool255 = icmp ne i32 %call254, 0
  br i1 %tobool255, label %if.then.256, label %if.end.258

if.then.256:                                      ; preds = %lor.lhs.false.253, %if.then.250
  %147 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call257 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %147)
  store %struct.rtx_def* %call257, %struct.rtx_def** %temp, align 8
  br label %if.end.258

if.end.258:                                       ; preds = %if.then.256, %lor.lhs.false.253
  br label %if.end.259

if.end.259:                                       ; preds = %if.end.258, %if.end.247
  %148 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %148, i32 0, i32 2
  %149 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status, %struct.expr_status* %149, i32 0, i32 1
  %150 = load i32, i32* %x_inhibit_defer_pop, align 4
  %add260 = add nsw i32 %150, 1
  store i32 %add260, i32* %x_inhibit_defer_pop, align 4
  %151 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 11), align 8
  %152 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %153 = load i32, i32* @target_flags, align 4
  %and261 = and i32 %153, 33554432
  %tobool262 = icmp ne i32 %and261, 0
  %cond263 = select i1 %tobool262, i32 5, i32 4
  %154 = load %struct.rtx_def*, %struct.rtx_def** %xinner, align 8
  %fld264 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx265 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld264, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx265 to %struct.rtx_def**
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %156 = load i32, i32* @target_flags, align 4
  %and266 = and i32 %156, 33554432
  %tobool267 = icmp ne i32 %and266, 0
  %cond268 = select i1 %tobool267, i32 5, i32 4
  %157 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type269 = bitcast %union.tree_node* %157 to %struct.tree_type*
  %mode270 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type269, i32 0, i32 6
  %bf.load271 = load i32, i32* %mode270, align 4
  %bf.lshr272 = lshr i32 %bf.load271, 9
  %bf.clear273 = and i32 %bf.lshr272, 127
  %158 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %159 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %common = bitcast %union.tree_node* %159 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load274 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr275 = lshr i32 %bf.load274, 13
  %bf.clear276 = and i32 %bf.lshr275, 1
  %call277 = call %struct.rtx_def* @convert_to_mode(i32 %bf.clear273, %struct.rtx_def* %158, i32 %bf.clear276)
  %160 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type278 = bitcast %union.tree_node* %160 to %struct.tree_type*
  %mode279 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type278, i32 0, i32 6
  %bf.load280 = load i32, i32* %mode279, align 4
  %bf.lshr281 = lshr i32 %bf.load280, 9
  %bf.clear282 = and i32 %bf.lshr281, 127
  call void (%struct.rtx_def*, i32, i32, i32, ...) @emit_library_call(%struct.rtx_def* %151, i32 0, i32 0, i32 3, %struct.rtx_def* %152, i32 %cond263, %struct.rtx_def* %155, i32 %cond268, %struct.rtx_def* %call277, i32 %bf.clear282)
  %161 = load %struct.function*, %struct.function** @cfun, align 8
  %expr283 = getelementptr inbounds %struct.function, %struct.function* %161, i32 0, i32 2
  %162 = load %struct.expr_status*, %struct.expr_status** %expr283, align 8
  %x_inhibit_defer_pop284 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %162, i32 0, i32 1
  %163 = load i32, i32* %x_inhibit_defer_pop284, align 4
  %sub285 = sub nsw i32 %163, 1
  store i32 %sub285, i32* %x_inhibit_defer_pop284, align 4
  br label %if.end.286

if.end.286:                                       ; preds = %if.end.259, %if.end.74
  br label %if.end.475

if.else.287:                                      ; preds = %entry
  %164 = load i32, i32* %partial.addr, align 4
  %cmp288 = icmp sgt i32 %164, 0
  br i1 %cmp288, label %if.then.290, label %if.else.424

if.then.290:                                      ; preds = %if.else.287
  %165 = load i32, i32* %mode.addr, align 4
  %idxprom292 = sext i32 %165 to i64
  %arrayidx293 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom292
  %166 = load i8, i8* %arrayidx293, align 1
  %conv294 = zext i8 %166 to i32
  %167 = load i32, i32* @target_flags, align 4
  %and295 = and i32 %167, 33554432
  %tobool296 = icmp ne i32 %and295, 0
  %cond297 = select i1 %tobool296, i32 8, i32 4
  %div298 = sdiv i32 %conv294, %cond297
  store i32 %div298, i32* %size291, align 4
  %168 = load i32, i32* %partial.addr, align 4
  %169 = load i32, i32* @target_flags, align 4
  %and300 = and i32 %169, 33554432
  %tobool301 = icmp ne i32 %and300, 0
  %cond302 = select i1 %tobool301, i32 64, i32 32
  %170 = load i32, i32* @target_flags, align 4
  %and303 = and i32 %170, 33554432
  %tobool304 = icmp ne i32 %and303, 0
  %cond305 = select i1 %tobool304, i32 64, i32 32
  %div306 = sdiv i32 %cond302, %cond305
  %rem307 = srem i32 %168, %div306
  store i32 %rem307, i32* %offset299, align 4
  %171 = load %struct.rtx_def*, %struct.rtx_def** %args_so_far.addr, align 8
  %fld308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1
  %arrayidx309 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld308, i32 0, i64 0
  %rtwint310 = bitcast %union.rtunion_def* %arrayidx309 to i64*
  %172 = load i64, i64* %rtwint310, align 8
  %conv311 = trunc i64 %172 to i32
  store i32 %conv311, i32* %args_offset, align 4
  %173 = load i32, i32* %extra.addr, align 4
  %tobool313 = icmp ne i32 %173, 0
  br i1 %tobool313, label %land.lhs.true.314, label %if.end.326

land.lhs.true.314:                                ; preds = %if.then.290
  %174 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %cmp315 = icmp eq %struct.rtx_def* %174, null
  br i1 %cmp315, label %land.lhs.true.317, label %if.end.326

land.lhs.true.317:                                ; preds = %land.lhs.true.314
  %175 = load i32, i32* %where_pad, align 4
  %cmp318 = icmp ne i32 %175, 0
  br i1 %cmp318, label %land.lhs.true.320, label %if.end.326

land.lhs.true.320:                                ; preds = %land.lhs.true.317
  %176 = load i32, i32* %where_pad, align 4
  %177 = load i32, i32* %stack_direction, align 4
  %cmp321 = icmp ne i32 %176, %177
  br i1 %cmp321, label %if.then.323, label %if.end.326

if.then.323:                                      ; preds = %land.lhs.true.320
  %178 = load i32, i32* %extra.addr, align 4
  %conv324 = sext i32 %178 to i64
  %call325 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv324)
  call void @anti_adjust_stack(%struct.rtx_def* %call325)
  br label %if.end.326

if.end.326:                                       ; preds = %if.then.323, %land.lhs.true.320, %land.lhs.true.317, %land.lhs.true.314, %if.then.290
  %179 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %cmp327 = icmp eq %struct.rtx_def* %179, null
  br i1 %cmp327, label %if.then.329, label %if.end.330

if.then.329:                                      ; preds = %if.end.326
  store i32 0, i32* %offset299, align 4
  br label %if.end.330

if.end.330:                                       ; preds = %if.then.329, %if.end.326
  %180 = load i32, i32* %partial.addr, align 4
  %181 = load i32, i32* %offset299, align 4
  %sub331 = sub nsw i32 %180, %181
  store i32 %sub331, i32* %not_stack, align 4
  %182 = load i32, i32* %reg_parm_stack_space.addr, align 4
  %cmp332 = icmp eq i32 %182, 0
  br i1 %cmp332, label %cond.true.334, label %cond.false.335

cond.true.334:                                    ; preds = %if.end.330
  br label %cond.end.336

cond.false.335:                                   ; preds = %if.end.330
  %183 = load i32, i32* %not_stack, align 4
  br label %cond.end.336

cond.end.336:                                     ; preds = %cond.false.335, %cond.true.334
  %cond337 = phi i32 [ 0, %cond.true.334 ], [ %183, %cond.false.335 ]
  store i32 %cond337, i32* %skip312, align 4
  %184 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %185 = bitcast %struct.rtx_def* %184 to i32*
  %bf.load338 = load i32, i32* %185, align 8
  %bf.clear339 = and i32 %bf.load338, 65535
  %cmp340 = icmp eq i32 %bf.clear339, 67
  br i1 %cmp340, label %land.lhs.true.377, label %lor.lhs.false.342

lor.lhs.false.342:                                ; preds = %cond.end.336
  %186 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %187 = bitcast %struct.rtx_def* %186 to i32*
  %bf.load343 = load i32, i32* %187, align 8
  %bf.clear344 = and i32 %bf.load343, 65535
  %cmp345 = icmp eq i32 %bf.clear344, 68
  br i1 %cmp345, label %land.lhs.true.377, label %lor.lhs.false.347

lor.lhs.false.347:                                ; preds = %lor.lhs.false.342
  %188 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %189 = bitcast %struct.rtx_def* %188 to i32*
  %bf.load348 = load i32, i32* %189, align 8
  %bf.clear349 = and i32 %bf.load348, 65535
  %cmp350 = icmp eq i32 %bf.clear349, 54
  br i1 %cmp350, label %land.lhs.true.377, label %lor.lhs.false.352

lor.lhs.false.352:                                ; preds = %lor.lhs.false.347
  %190 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %191 = bitcast %struct.rtx_def* %190 to i32*
  %bf.load353 = load i32, i32* %191, align 8
  %bf.clear354 = and i32 %bf.load353, 65535
  %cmp355 = icmp eq i32 %bf.clear354, 55
  br i1 %cmp355, label %land.lhs.true.377, label %lor.lhs.false.357

lor.lhs.false.357:                                ; preds = %lor.lhs.false.352
  %192 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %193 = bitcast %struct.rtx_def* %192 to i32*
  %bf.load358 = load i32, i32* %193, align 8
  %bf.clear359 = and i32 %bf.load358, 65535
  %cmp360 = icmp eq i32 %bf.clear359, 58
  br i1 %cmp360, label %land.lhs.true.377, label %lor.lhs.false.362

lor.lhs.false.362:                                ; preds = %lor.lhs.false.357
  %194 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %195 = bitcast %struct.rtx_def* %194 to i32*
  %bf.load363 = load i32, i32* %195, align 8
  %bf.clear364 = and i32 %bf.load363, 65535
  %cmp365 = icmp eq i32 %bf.clear364, 134
  br i1 %cmp365, label %land.lhs.true.377, label %lor.lhs.false.367

lor.lhs.false.367:                                ; preds = %lor.lhs.false.362
  %196 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %197 = bitcast %struct.rtx_def* %196 to i32*
  %bf.load368 = load i32, i32* %197, align 8
  %bf.clear369 = and i32 %bf.load368, 65535
  %cmp370 = icmp eq i32 %bf.clear369, 56
  br i1 %cmp370, label %land.lhs.true.377, label %lor.lhs.false.372

lor.lhs.false.372:                                ; preds = %lor.lhs.false.367
  %198 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %199 = bitcast %struct.rtx_def* %198 to i32*
  %bf.load373 = load i32, i32* %199, align 8
  %bf.clear374 = and i32 %bf.load373, 65535
  %cmp375 = icmp eq i32 %bf.clear374, 140
  br i1 %cmp375, label %land.lhs.true.377, label %if.end.381

land.lhs.true.377:                                ; preds = %lor.lhs.false.372, %lor.lhs.false.367, %lor.lhs.false.362, %lor.lhs.false.357, %lor.lhs.false.352, %lor.lhs.false.347, %lor.lhs.false.342, %cond.end.336
  br i1 true, label %if.end.381, label %if.then.378

if.then.378:                                      ; preds = %land.lhs.true.377
  %200 = load i32, i32* %mode.addr, align 4
  %201 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call379 = call %struct.rtx_def* @force_const_mem(i32 %200, %struct.rtx_def* %201)
  %call380 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %call379)
  store %struct.rtx_def* %call380, %struct.rtx_def** %x.addr, align 8
  br label %if.end.381

if.end.381:                                       ; preds = %if.then.378, %land.lhs.true.377, %lor.lhs.false.372
  %202 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %203 = bitcast %struct.rtx_def* %202 to i32*
  %bf.load382 = load i32, i32* %203, align 8
  %bf.clear383 = and i32 %bf.load382, 65535
  %cmp384 = icmp eq i32 %bf.clear383, 61
  br i1 %cmp384, label %land.lhs.true.386, label %if.end.401

land.lhs.true.386:                                ; preds = %if.end.381
  %204 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx388 to i32*
  %205 = load i32, i32* %rtuint, align 4
  %cmp389 = icmp ult i32 %205, 53
  br i1 %cmp389, label %land.lhs.true.391, label %if.end.401

land.lhs.true.391:                                ; preds = %land.lhs.true.386
  %206 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %207 = bitcast %struct.rtx_def* %206 to i32*
  %bf.load392 = load i32, i32* %207, align 8
  %bf.lshr393 = lshr i32 %bf.load392, 16
  %bf.clear394 = and i32 %bf.lshr393, 255
  %idxprom395 = sext i32 %bf.clear394 to i64
  %arrayidx396 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom395
  %208 = load i32, i32* %arrayidx396, align 4
  %cmp397 = icmp ne i32 %208, 1
  br i1 %cmp397, label %if.then.399, label %if.end.401

if.then.399:                                      ; preds = %land.lhs.true.391
  %209 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call400 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %209)
  store %struct.rtx_def* %call400, %struct.rtx_def** %x.addr, align 8
  br label %if.end.401

if.end.401:                                       ; preds = %if.then.399, %land.lhs.true.391, %land.lhs.true.386, %if.end.381
  %210 = load i32, i32* %size291, align 4
  %sub402 = sub nsw i32 %210, 1
  store i32 %sub402, i32* %i, align 4
  br label %for.cond.403

for.cond.403:                                     ; preds = %for.inc.422, %if.end.401
  %211 = load i32, i32* %i, align 4
  %212 = load i32, i32* %not_stack, align 4
  %cmp404 = icmp sge i32 %211, %212
  br i1 %cmp404, label %for.body.406, label %for.end.423

for.body.406:                                     ; preds = %for.cond.403
  %213 = load i32, i32* %i, align 4
  %214 = load i32, i32* %not_stack, align 4
  %215 = load i32, i32* %offset299, align 4
  %add407 = add nsw i32 %214, %215
  %cmp408 = icmp sge i32 %213, %add407
  br i1 %cmp408, label %if.then.410, label %if.end.421

if.then.410:                                      ; preds = %for.body.406
  %216 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %217 = load i32, i32* %i, align 4
  %218 = load i32, i32* %mode.addr, align 4
  %call411 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %216, i32 %217, i32 %218)
  %219 = load i32, i32* @word_mode, align 4
  %220 = load i32, i32* %align.addr, align 4
  %221 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %222 = load i32, i32* %args_offset, align 4
  %223 = load i32, i32* %i, align 4
  %224 = load i32, i32* %not_stack, align 4
  %sub412 = sub nsw i32 %223, %224
  %225 = load i32, i32* %skip312, align 4
  %add413 = add nsw i32 %sub412, %225
  %226 = load i32, i32* @target_flags, align 4
  %and414 = and i32 %226, 33554432
  %tobool415 = icmp ne i32 %and414, 0
  %cond416 = select i1 %tobool415, i32 8, i32 4
  %mul417 = mul nsw i32 %add413, %cond416
  %add418 = add nsw i32 %222, %mul417
  %conv419 = sext i32 %add418 to i64
  %call420 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv419)
  %227 = load i32, i32* %reg_parm_stack_space.addr, align 4
  %228 = load %struct.rtx_def*, %struct.rtx_def** %alignment_pad.addr, align 8
  call void @emit_push_insn(%struct.rtx_def* %call411, i32 %219, %union.tree_node* null, %struct.rtx_def* null, i32 %220, i32 0, %struct.rtx_def* null, i32 0, %struct.rtx_def* %221, %struct.rtx_def* %call420, i32 %227, %struct.rtx_def* %228)
  br label %if.end.421

if.end.421:                                       ; preds = %if.then.410, %for.body.406
  br label %for.inc.422

for.inc.422:                                      ; preds = %if.end.421
  %229 = load i32, i32* %i, align 4
  %dec = add nsw i32 %229, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond.403

for.end.423:                                      ; preds = %for.cond.403
  br label %if.end.474

if.else.424:                                      ; preds = %if.else.287
  store %struct.rtx_def* null, %struct.rtx_def** %target425, align 8
  %230 = load i32, i32* %extra.addr, align 4
  %tobool426 = icmp ne i32 %230, 0
  br i1 %tobool426, label %land.lhs.true.427, label %if.end.439

land.lhs.true.427:                                ; preds = %if.else.424
  %231 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %cmp428 = icmp eq %struct.rtx_def* %231, null
  br i1 %cmp428, label %land.lhs.true.430, label %if.end.439

land.lhs.true.430:                                ; preds = %land.lhs.true.427
  %232 = load i32, i32* %where_pad, align 4
  %cmp431 = icmp ne i32 %232, 0
  br i1 %cmp431, label %land.lhs.true.433, label %if.end.439

land.lhs.true.433:                                ; preds = %land.lhs.true.430
  %233 = load i32, i32* %where_pad, align 4
  %234 = load i32, i32* %stack_direction, align 4
  %cmp434 = icmp ne i32 %233, %234
  br i1 %cmp434, label %if.then.436, label %if.end.439

if.then.436:                                      ; preds = %land.lhs.true.433
  %235 = load i32, i32* %extra.addr, align 4
  %conv437 = sext i32 %235 to i64
  %call438 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv437)
  call void @anti_adjust_stack(%struct.rtx_def* %call438)
  br label %if.end.439

if.end.439:                                       ; preds = %if.then.436, %land.lhs.true.433, %land.lhs.true.430, %land.lhs.true.427, %if.else.424
  %236 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %cmp440 = icmp eq %struct.rtx_def* %236, null
  br i1 %cmp440, label %land.lhs.true.442, label %if.else.449

land.lhs.true.442:                                ; preds = %if.end.439
  %237 = load i32, i32* @target_flags, align 4
  %and443 = and i32 %237, 2048
  %tobool444 = icmp ne i32 %and443, 0
  br i1 %tobool444, label %if.else.449, label %land.lhs.true.445

land.lhs.true.445:                                ; preds = %land.lhs.true.442
  %238 = load i32, i32* @target_flags, align 4
  %and446 = and i32 %238, 4096
  %tobool447 = icmp ne i32 %and446, 0
  br i1 %tobool447, label %if.else.449, label %if.then.448

if.then.448:                                      ; preds = %land.lhs.true.445
  %239 = load i32, i32* %mode.addr, align 4
  %240 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %241 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @emit_single_push_insn(i32 %239, %struct.rtx_def* %240, %union.tree_node* %241)
  br label %if.end.473

if.else.449:                                      ; preds = %land.lhs.true.445, %land.lhs.true.442, %if.end.439
  %242 = load %struct.rtx_def*, %struct.rtx_def** %args_so_far.addr, align 8
  %243 = bitcast %struct.rtx_def* %242 to i32*
  %bf.load450 = load i32, i32* %243, align 8
  %bf.clear451 = and i32 %bf.load450, 65535
  %cmp452 = icmp eq i32 %bf.clear451, 54
  br i1 %cmp452, label %if.then.454, label %if.else.460

if.then.454:                                      ; preds = %if.else.449
  %244 = load i32, i32* %mode.addr, align 4
  %245 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %246 = load %struct.rtx_def*, %struct.rtx_def** %args_so_far.addr, align 8
  %fld455 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %246, i32 0, i32 1
  %arrayidx456 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld455, i32 0, i64 0
  %rtwint457 = bitcast %union.rtunion_def* %arrayidx456 to i64*
  %247 = load i64, i64* %rtwint457, align 8
  %call458 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %245, i64 %247)
  %call459 = call %struct.rtx_def* @memory_address(i32 %244, %struct.rtx_def* %call458)
  store %struct.rtx_def* %call459, %struct.rtx_def** %addr, align 8
  br label %if.end.466

if.else.460:                                      ; preds = %if.else.449
  %248 = load i32, i32* %mode.addr, align 4
  %249 = load i32, i32* @target_flags, align 4
  %and461 = and i32 %249, 33554432
  %tobool462 = icmp ne i32 %and461, 0
  %cond463 = select i1 %tobool462, i32 5, i32 4
  %250 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %251 = load %struct.rtx_def*, %struct.rtx_def** %args_so_far.addr, align 8
  %call464 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond463, %struct.rtx_def* %250, %struct.rtx_def* %251)
  %call465 = call %struct.rtx_def* @memory_address(i32 %248, %struct.rtx_def* %call464)
  store %struct.rtx_def* %call465, %struct.rtx_def** %addr, align 8
  br label %if.end.466

if.end.466:                                       ; preds = %if.else.460, %if.then.454
  %252 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  store %struct.rtx_def* %252, %struct.rtx_def** %target425, align 8
  %253 = load i32, i32* %mode.addr, align 4
  %254 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call467 = call %struct.rtx_def* @gen_rtx_MEM(i32 %253, %struct.rtx_def* %254)
  store %struct.rtx_def* %call467, %struct.rtx_def** %dest, align 8
  %255 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %cmp468 = icmp ne %union.tree_node* %255, null
  br i1 %cmp468, label %if.then.470, label %if.end.471

if.then.470:                                      ; preds = %if.end.466
  %256 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %257 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %256, %union.tree_node* %257, i32 1)
  %258 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  call void @set_mem_alias_set(%struct.rtx_def* %258, i64 0)
  br label %if.end.471

if.end.471:                                       ; preds = %if.then.470, %if.end.466
  %259 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %260 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call472 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %259, %struct.rtx_def* %260)
  br label %if.end.473

if.end.473:                                       ; preds = %if.end.471, %if.then.448
  br label %if.end.474

if.end.474:                                       ; preds = %if.end.473, %for.end.423
  br label %if.end.475

if.end.475:                                       ; preds = %if.end.474, %if.end.286
  br label %ret

ret:                                              ; preds = %if.end.475, %if.then.239, %if.then.156
  %261 = load i32, i32* %partial.addr, align 4
  %cmp476 = icmp sgt i32 %261, 0
  br i1 %cmp476, label %land.lhs.true.478, label %if.end.492

land.lhs.true.478:                                ; preds = %ret
  %262 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %cmp479 = icmp ne %struct.rtx_def* %262, null
  br i1 %cmp479, label %if.then.481, label %if.end.492

if.then.481:                                      ; preds = %land.lhs.true.478
  %263 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %264 = bitcast %struct.rtx_def* %263 to i32*
  %bf.load482 = load i32, i32* %264, align 8
  %bf.clear483 = and i32 %bf.load482, 65535
  %cmp484 = icmp eq i32 %bf.clear483, 39
  br i1 %cmp484, label %if.then.486, label %if.else.487

if.then.486:                                      ; preds = %if.then.481
  %265 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %266 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  call void @emit_group_load(%struct.rtx_def* %265, %struct.rtx_def* %266, i32 -1)
  br label %if.end.491

if.else.487:                                      ; preds = %if.then.481
  %267 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld488 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %267, i32 0, i32 1
  %arrayidx489 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld488, i32 0, i64 0
  %rtuint490 = bitcast %union.rtunion_def* %arrayidx489 to i32*
  %268 = load i32, i32* %rtuint490, align 4
  %269 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %270 = load i32, i32* %partial.addr, align 4
  %271 = load i32, i32* %mode.addr, align 4
  call void @move_block_to_reg(i32 %268, %struct.rtx_def* %269, i32 %270, i32 %271)
  br label %if.end.491

if.end.491:                                       ; preds = %if.else.487, %if.then.486
  br label %if.end.492

if.end.492:                                       ; preds = %if.end.491, %land.lhs.true.478, %ret
  %272 = load i32, i32* %extra.addr, align 4
  %tobool493 = icmp ne i32 %272, 0
  br i1 %tobool493, label %land.lhs.true.494, label %if.end.503

land.lhs.true.494:                                ; preds = %if.end.492
  %273 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %cmp495 = icmp eq %struct.rtx_def* %273, null
  br i1 %cmp495, label %land.lhs.true.497, label %if.end.503

land.lhs.true.497:                                ; preds = %land.lhs.true.494
  %274 = load i32, i32* %where_pad, align 4
  %275 = load i32, i32* %stack_direction, align 4
  %cmp498 = icmp eq i32 %274, %275
  br i1 %cmp498, label %if.then.500, label %if.end.503

if.then.500:                                      ; preds = %land.lhs.true.497
  %276 = load i32, i32* %extra.addr, align 4
  %conv501 = sext i32 %276 to i64
  %call502 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv501)
  call void @anti_adjust_stack(%struct.rtx_def* %call502)
  br label %if.end.503

if.end.503:                                       ; preds = %if.then.500, %land.lhs.true.497, %land.lhs.true.494, %if.end.492
  %277 = load %struct.rtx_def*, %struct.rtx_def** %alignment_pad.addr, align 8
  %tobool504 = icmp ne %struct.rtx_def* %277, null
  br i1 %tobool504, label %land.lhs.true.505, label %if.end.509

land.lhs.true.505:                                ; preds = %if.end.503
  %278 = load %struct.rtx_def*, %struct.rtx_def** %args_addr.addr, align 8
  %cmp506 = icmp eq %struct.rtx_def* %278, null
  br i1 %cmp506, label %if.then.508, label %if.end.509

if.then.508:                                      ; preds = %land.lhs.true.505
  %279 = load %struct.rtx_def*, %struct.rtx_def** %alignment_pad.addr, align 8
  call void @anti_adjust_stack(%struct.rtx_def* %279)
  br label %if.end.509

if.end.509:                                       ; preds = %if.then.508, %land.lhs.true.505, %if.end.503
  ret void
}

declare void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #1

declare void @set_mem_alias_set(%struct.rtx_def*, i64) #1

declare void @set_mem_align(%struct.rtx_def*, i32) #1

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @emit_library_call(%struct.rtx_def*, i32, i32, i32, ...) #1

; Function Attrs: nounwind uwtable
define internal void @emit_single_push_insn(i32 %mode, %struct.rtx_def* %x, %union.tree_node* %type) #0 {
entry:
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %dest_addr = alloca %struct.rtx_def*, align 8
  %rounded_size = alloca i32, align 4
  %dest = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %pred = alloca i32 (%struct.rtx_def*, i32)*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %add = add nsw i32 %conv, 7
  %and1 = and i32 %add, -8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4
  %idxprom2 = sext i32 %3 to i64
  %arrayidx3 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom2
  %4 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %4 to i32
  %add5 = add nsw i32 %conv4, 1
  %and6 = and i32 %add5, -2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and1, %cond.true ], [ %and6, %cond.false ]
  store i32 %cond, i32* %rounded_size, align 4
  %5 = load i32, i32* @target_flags, align 4
  %and7 = and i32 %5, 33554432
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true.9, label %cond.false.15

cond.true.9:                                      ; preds = %cond.end
  %6 = load i32, i32* %mode.addr, align 4
  %idxprom10 = sext i32 %6 to i64
  %arrayidx11 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom10
  %7 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %7 to i32
  %add13 = add nsw i32 %conv12, 7
  %and14 = and i32 %add13, -8
  br label %cond.end.21

cond.false.15:                                    ; preds = %cond.end
  %8 = load i32, i32* %mode.addr, align 4
  %idxprom16 = sext i32 %8 to i64
  %arrayidx17 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom16
  %9 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %9 to i32
  %add19 = add nsw i32 %conv18, 1
  %and20 = and i32 %add19, -2
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.15, %cond.true.9
  %cond22 = phi i32 [ %and14, %cond.true.9 ], [ %and20, %cond.false.15 ]
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 2
  %11 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status, %struct.expr_status* %11, i32 0, i32 2
  %12 = load i32, i32* %x_stack_pointer_delta, align 4
  %add23 = add nsw i32 %12, %cond22
  store i32 %add23, i32* %x_stack_pointer_delta, align 4
  %13 = load i32, i32* %mode.addr, align 4
  %idxprom24 = sext i32 %13 to i64
  %14 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 48), align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %14, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom24
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx25, i32 0, i32 0
  %15 = load i32, i32* %insn_code, align 4
  store i32 %15, i32* %icode, align 4
  %16 = load i32, i32* %icode, align 4
  %cmp = icmp ne i32 %16, 1317
  br i1 %cmp, label %if.then, label %if.end.38

if.then:                                          ; preds = %cond.end.21
  %17 = load i32, i32* %icode, align 4
  %idxprom27 = sext i32 %17 to i64
  %arrayidx28 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom27
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx28, i32 0, i32 3
  %18 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx29 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %18, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx29, i32 0, i32 0
  %19 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  store i32 (%struct.rtx_def*, i32)* %19, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %tobool30 = icmp ne i32 (%struct.rtx_def*, i32)* %19, null
  br i1 %tobool30, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %20 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %pred, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %22 = load i32, i32* %mode.addr, align 4
  %call = call i32 %20(%struct.rtx_def* %21, i32 %22)
  %tobool31 = icmp ne i32 %call, 0
  br i1 %tobool31, label %if.end, label %if.then.32

if.then.32:                                       ; preds = %land.lhs.true
  %23 = load i32, i32* %mode.addr, align 4
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call33 = call %struct.rtx_def* @force_reg(i32 %23, %struct.rtx_def* %24)
  store %struct.rtx_def* %call33, %struct.rtx_def** %x.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.32, %land.lhs.true, %if.then
  %25 = load i32, i32* %icode, align 4
  %idxprom34 = sext i32 %25 to i64
  %arrayidx35 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom34
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx35, i32 0, i32 2
  %26 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call36 = call %struct.rtx_def* (%struct.rtx_def*, ...) %26(%struct.rtx_def* %27)
  %call37 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call36)
  br label %return

if.end.38:                                        ; preds = %cond.end.21
  %28 = load i32, i32* %mode.addr, align 4
  %idxprom39 = sext i32 %28 to i64
  %arrayidx40 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom39
  %29 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %29 to i32
  %30 = load i32, i32* %rounded_size, align 4
  %cmp42 = icmp eq i32 %conv41, %30
  br i1 %cmp42, label %if.then.44, label %if.else

if.then.44:                                       ; preds = %if.end.38
  %31 = load i32, i32* @target_flags, align 4
  %and45 = and i32 %31, 33554432
  %tobool46 = icmp ne i32 %and45, 0
  %cond47 = select i1 %tobool46, i32 5, i32 4
  %32 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call48 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 %cond47, %struct.rtx_def* %32)
  store %struct.rtx_def* %call48, %struct.rtx_def** %dest_addr, align 8
  br label %if.end.59

if.else:                                          ; preds = %if.end.38
  %33 = load i32, i32* @target_flags, align 4
  %and49 = and i32 %33, 33554432
  %tobool50 = icmp ne i32 %and49, 0
  %cond51 = select i1 %tobool50, i32 5, i32 4
  %34 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %35 = load i32, i32* %rounded_size, align 4
  %conv52 = zext i32 %35 to i64
  %sub = sub nsw i64 0, %conv52
  %call53 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub)
  %call54 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond51, %struct.rtx_def* %34, %struct.rtx_def* %call53)
  store %struct.rtx_def* %call54, %struct.rtx_def** %dest_addr, align 8
  %36 = load i32, i32* @target_flags, align 4
  %and55 = and i32 %36, 33554432
  %tobool56 = icmp ne i32 %and55, 0
  %cond57 = select i1 %tobool56, i32 5, i32 4
  %37 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %dest_addr, align 8
  %call58 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 100, i32 %cond57, %struct.rtx_def* %37, %struct.rtx_def* %38)
  store %struct.rtx_def* %call58, %struct.rtx_def** %dest_addr, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.else, %if.then.44
  %39 = load i32, i32* %mode.addr, align 4
  %40 = load %struct.rtx_def*, %struct.rtx_def** %dest_addr, align 8
  %call60 = call %struct.rtx_def* @gen_rtx_MEM(i32 %39, %struct.rtx_def* %40)
  store %struct.rtx_def* %call60, %struct.rtx_def** %dest, align 8
  %41 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %cmp61 = icmp ne %union.tree_node* %41, null
  br i1 %cmp61, label %if.then.63, label %if.end.67

if.then.63:                                       ; preds = %if.end.59
  %42 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %42, %union.tree_node* %43, i32 1)
  %44 = load i32, i32* @flag_optimize_sibling_calls, align 4
  %tobool64 = icmp ne i32 %44, 0
  br i1 %tobool64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %if.then.63
  %45 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  call void @set_mem_alias_set(%struct.rtx_def* %45, i64 0)
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.65, %if.then.63
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.end.59
  %46 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call68 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %46, %struct.rtx_def* %47)
  br label %return

return:                                           ; preds = %if.end.67, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @expand_assignment(%union.tree_node* %to, %union.tree_node* %from, i32 %want_value, i32 %suggest_reg) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %to.addr = alloca %union.tree_node*, align 8
  %from.addr = alloca %union.tree_node*, align 8
  %want_value.addr = alloca i32, align 4
  %suggest_reg.addr = alloca i32, align 4
  %to_rtx = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  %mode1 = alloca i32, align 4
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %orig_to_rtx = alloca %struct.rtx_def*, align 8
  %offset = alloca %union.tree_node*, align 8
  %unsignedp = alloca i32, align 4
  %volatilep = alloca i32, align 4
  %tem = alloca %union.tree_node*, align 8
  %offset_rtx = alloca %struct.rtx_def*, align 8
  %old_expr = alloca %union.tree_node*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %from_rtx = alloca %struct.rtx_def*, align 8
  %size405 = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %to, %union.tree_node** %to.addr, align 8
  store %union.tree_node* %from, %union.tree_node** %from.addr, align 8
  store i32 %want_value, i32* %want_value.addr, align 4
  store i32 %suggest_reg, i32* %suggest_reg.addr, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %to_rtx, align 8
  %0 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %1, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %result, align 8
  %2 = load i32, i32* %want_value.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %3, %cond.true ], [ null, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common1 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 39
  br i1 %cmp5, label %if.then.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common6 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2
  %bf.load8 = load i32, i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 40
  br i1 %cmp10, label %if.then.23, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common12 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %code13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load14 = load i32, i32* %code13, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %cmp16 = icmp eq i32 %bf.clear15, 43
  br i1 %cmp16, label %if.then.23, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.11
  %7 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common18 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 44
  br i1 %cmp22, label %if.then.23, label %if.end.256

if.then.23:                                       ; preds = %lor.lhs.false.17, %lor.lhs.false.11, %lor.lhs.false, %if.end
  store i32 0, i32* %volatilep, align 4
  call void @push_temp_slots()
  %8 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %call24 = call %union.tree_node* @get_inner_reference(%union.tree_node* %8, i64* %bitsize, i64* %bitpos, %union.tree_node** %offset, i32* %mode1, i32* %unsignedp, i32* %volatilep)
  store %union.tree_node* %call24, %union.tree_node** %tem, align 8
  %9 = load i32, i32* %mode1, align 4
  %cmp25 = icmp eq i32 %9, 0
  br i1 %cmp25, label %land.lhs.true, label %if.end.29

land.lhs.true:                                    ; preds = %if.then.23
  %10 = load i32, i32* %want_value.addr, align 4
  %tobool26 = icmp ne i32 %10, 0
  br i1 %tobool26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %call28 = call %union.tree_node* @stabilize_reference(%union.tree_node* %11)
  store %union.tree_node* %call28, %union.tree_node** %tem, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %land.lhs.true, %if.then.23
  %12 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %call30 = call %struct.rtx_def* @expand_expr(%union.tree_node* %12, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call30, %struct.rtx_def** %to_rtx, align 8
  store %struct.rtx_def* %call30, %struct.rtx_def** %orig_to_rtx, align 8
  %13 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %cmp31 = icmp ne %union.tree_node* %13, null
  br i1 %cmp31, label %if.then.32, label %if.end.88

if.then.32:                                       ; preds = %if.end.29
  %14 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call33 = call %struct.rtx_def* @expand_expr(%union.tree_node* %14, %struct.rtx_def* null, i32 0, i32 1)
  store %struct.rtx_def* %call33, %struct.rtx_def** %offset_rtx, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load34 = load i32, i32* %16, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp ne i32 %bf.clear35, 66
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.then.32
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3686, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.expand_assignment, i32 0, i32 0)) #6
  unreachable

if.end.38:                                        ; preds = %if.then.32
  %17 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load39 = load i32, i32* %18, align 8
  %bf.lshr = lshr i32 %bf.load39, 16
  %bf.clear40 = and i32 %bf.lshr, 255
  %19 = load i32, i32* @ptr_mode, align 4
  %cmp41 = icmp ne i32 %bf.clear40, %19
  br i1 %cmp41, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %if.end.38
  %20 = load i32, i32* @ptr_mode, align 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %call43 = call %struct.rtx_def* @convert_to_mode(i32 %20, %struct.rtx_def* %21, i32 0)
  store %struct.rtx_def* %call43, %struct.rtx_def** %offset_rtx, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %if.end.38
  %22 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load45 = load i32, i32* %23, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 66
  br i1 %cmp47, label %land.lhs.true.48, label %if.end.84

land.lhs.true.48:                                 ; preds = %if.end.44
  %24 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load49 = load i32, i32* %25, align 8
  %bf.lshr50 = lshr i32 %bf.load49, 16
  %bf.clear51 = and i32 %bf.lshr50, 255
  %cmp52 = icmp eq i32 %bf.clear51, 51
  br i1 %cmp52, label %land.lhs.true.53, label %if.end.84

land.lhs.true.53:                                 ; preds = %land.lhs.true.48
  %26 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %28 = bitcast %struct.rtx_def* %27 to i32*
  %bf.load54 = load i32, i32* %28, align 8
  %bf.lshr55 = lshr i32 %bf.load54, 16
  %bf.clear56 = and i32 %bf.lshr55, 255
  %cmp57 = icmp ne i32 %bf.clear56, 0
  br i1 %cmp57, label %land.lhs.true.58, label %if.end.84

land.lhs.true.58:                                 ; preds = %land.lhs.true.53
  %29 = load i64, i64* %bitsize, align 8
  %cmp59 = icmp sgt i64 %29, 0
  br i1 %cmp59, label %land.lhs.true.60, label %if.end.84

land.lhs.true.60:                                 ; preds = %land.lhs.true.58
  %30 = load i64, i64* %bitpos, align 8
  %31 = load i64, i64* %bitsize, align 8
  %rem = srem i64 %30, %31
  %cmp61 = icmp eq i64 %rem, 0
  br i1 %cmp61, label %land.lhs.true.62, label %if.end.84

land.lhs.true.62:                                 ; preds = %land.lhs.true.60
  %32 = load i64, i64* %bitsize, align 8
  %33 = load i32, i32* %mode1, align 4
  %call63 = call i32 @get_mode_alignment(i32 %33)
  %conv = zext i32 %call63 to i64
  %rem64 = srem i64 %32, %conv
  %cmp65 = icmp eq i64 %rem64, 0
  br i1 %cmp65, label %land.lhs.true.67, label %if.end.84

land.lhs.true.67:                                 ; preds = %land.lhs.true.62
  %34 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx69 to %struct.mem_attrs**
  %35 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp70 = icmp ne %struct.mem_attrs* %35, null
  br i1 %cmp70, label %cond.true.72, label %cond.false.76

cond.true.72:                                     ; preds = %land.lhs.true.67
  %36 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 1
  %rtmem75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.mem_attrs**
  %37 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem75, align 8
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %37, i32 0, i32 4
  %38 = load i32, i32* %align, align 4
  br label %cond.end.77

cond.false.76:                                    ; preds = %land.lhs.true.67
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.76, %cond.true.72
  %cond78 = phi i32 [ %38, %cond.true.72 ], [ 8, %cond.false.76 ]
  %39 = load i32, i32* %mode1, align 4
  %call79 = call i32 @get_mode_alignment(i32 %39)
  %cmp80 = icmp eq i32 %cond78, %call79
  br i1 %cmp80, label %if.then.82, label %if.end.84

if.then.82:                                       ; preds = %cond.end.77
  %40 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %41 = load i32, i32* %mode1, align 4
  %42 = load i64, i64* %bitpos, align 8
  %div = sdiv i64 %42, 8
  %call83 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %40, i32 %41, i64 %div, i32 1, i32 1)
  store %struct.rtx_def* %call83, %struct.rtx_def** %to_rtx, align 8
  store i64 0, i64* %bitpos, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.82, %cond.end.77, %land.lhs.true.62, %land.lhs.true.60, %land.lhs.true.58, %land.lhs.true.53, %land.lhs.true.48, %if.end.44
  %43 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %45 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common85 = bitcast %union.tree_node* %45 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 1
  %46 = load %union.tree_node*, %union.tree_node** %type, align 8
  %47 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call86 = call i64 @highest_pow2_factor_for_type(%union.tree_node* %46, %union.tree_node* %47)
  %call87 = call %struct.rtx_def* @offset_address(%struct.rtx_def* %43, %struct.rtx_def* %44, i64 %call86)
  store %struct.rtx_def* %call87, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.84, %if.end.29
  %48 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load89 = load i32, i32* %49, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 66
  br i1 %cmp91, label %if.then.93, label %if.end.158

if.then.93:                                       ; preds = %if.end.88
  %50 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 1
  %rtmem96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.mem_attrs**
  %51 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem96, align 8
  %cmp97 = icmp eq %struct.mem_attrs* %51, null
  br i1 %cmp97, label %cond.true.99, label %cond.false.100

cond.true.99:                                     ; preds = %if.then.93
  br label %cond.end.104

cond.false.100:                                   ; preds = %if.then.93
  %52 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 1
  %rtmem103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.mem_attrs**
  %53 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem103, align 8
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %53, i32 0, i32 1
  %54 = load %union.tree_node*, %union.tree_node** %expr, align 8
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.100, %cond.true.99
  %cond105 = phi %union.tree_node* [ null, %cond.true.99 ], [ %54, %cond.false.100 ]
  store %union.tree_node* %cond105, %union.tree_node** %old_expr, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %call106 = call %struct.rtx_def* @shallow_copy_rtx(%struct.rtx_def* %55)
  store %struct.rtx_def* %call106, %struct.rtx_def** %to_rtx, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %57 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %56, %union.tree_node* %57, i32 0)
  %58 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i32 0, i64 1
  %rtmem109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.mem_attrs**
  %59 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem109, align 8
  %cmp110 = icmp eq %struct.mem_attrs* %59, null
  br i1 %cmp110, label %cond.true.112, label %cond.false.113

cond.true.112:                                    ; preds = %cond.end.104
  br label %cond.end.118

cond.false.113:                                   ; preds = %cond.end.104
  %60 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i32 0, i64 1
  %rtmem116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.mem_attrs**
  %61 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem116, align 8
  %expr117 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %61, i32 0, i32 1
  %62 = load %union.tree_node*, %union.tree_node** %expr117, align 8
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.false.113, %cond.true.112
  %cond119 = phi %union.tree_node* [ null, %cond.true.112 ], [ %62, %cond.false.113 ]
  %63 = load %union.tree_node*, %union.tree_node** %old_expr, align 8
  %cmp120 = icmp ne %union.tree_node* %cond119, %63
  br i1 %cmp120, label %land.lhs.true.122, label %if.end.157

land.lhs.true.122:                                ; preds = %cond.end.118
  %64 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 1
  %rtmem125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.mem_attrs**
  %65 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem125, align 8
  %cmp126 = icmp eq %struct.mem_attrs* %65, null
  br i1 %cmp126, label %cond.true.128, label %cond.false.129

cond.true.128:                                    ; preds = %land.lhs.true.122
  br i1 false, label %land.lhs.true.135, label %if.end.157

cond.false.129:                                   ; preds = %land.lhs.true.122
  %66 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i32 0, i64 1
  %rtmem132 = bitcast %union.rtunion_def* %arrayidx131 to %struct.mem_attrs**
  %67 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem132, align 8
  %offset133 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %67, i32 0, i32 2
  %68 = load %struct.rtx_def*, %struct.rtx_def** %offset133, align 8
  %tobool134 = icmp ne %struct.rtx_def* %68, null
  br i1 %tobool134, label %land.lhs.true.135, label %if.end.157

land.lhs.true.135:                                ; preds = %cond.false.129, %cond.true.128
  %69 = load i64, i64* %bitpos, align 8
  %div136 = sdiv i64 %69, 8
  %cmp137 = icmp ne i64 %div136, 0
  br i1 %cmp137, label %if.then.139, label %if.end.157

if.then.139:                                      ; preds = %land.lhs.true.135
  %70 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i32 0, i64 1
  %rtmem142 = bitcast %union.rtunion_def* %arrayidx141 to %struct.mem_attrs**
  %72 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem142, align 8
  %cmp143 = icmp eq %struct.mem_attrs* %72, null
  br i1 %cmp143, label %cond.true.145, label %cond.false.146

cond.true.145:                                    ; preds = %if.then.139
  br label %cond.end.151

cond.false.146:                                   ; preds = %if.then.139
  %73 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld147, i32 0, i64 1
  %rtmem149 = bitcast %union.rtunion_def* %arrayidx148 to %struct.mem_attrs**
  %74 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem149, align 8
  %offset150 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %74, i32 0, i32 2
  %75 = load %struct.rtx_def*, %struct.rtx_def** %offset150, align 8
  br label %cond.end.151

cond.end.151:                                     ; preds = %cond.false.146, %cond.true.145
  %cond152 = phi %struct.rtx_def* [ null, %cond.true.145 ], [ %75, %cond.false.146 ]
  %fld153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond152, i32 0, i32 1
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx154 to i64*
  %76 = load i64, i64* %rtwint, align 8
  %77 = load i64, i64* %bitpos, align 8
  %div155 = sdiv i64 %77, 8
  %sub = sub nsw i64 %76, %div155
  %call156 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub)
  call void @set_mem_offset(%struct.rtx_def* %70, %struct.rtx_def* %call156)
  br label %if.end.157

if.end.157:                                       ; preds = %cond.end.151, %land.lhs.true.135, %cond.false.129, %cond.true.128, %cond.end.118
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %if.end.88
  %78 = load i32, i32* %volatilep, align 4
  %tobool159 = icmp ne i32 %78, 0
  br i1 %tobool159, label %land.lhs.true.160, label %if.end.173

land.lhs.true.160:                                ; preds = %if.end.158
  %79 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load161 = load i32, i32* %80, align 8
  %bf.clear162 = and i32 %bf.load161, 65535
  %cmp163 = icmp eq i32 %bf.clear162, 66
  br i1 %cmp163, label %if.then.165, label %if.end.173

if.then.165:                                      ; preds = %land.lhs.true.160
  %81 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %orig_to_rtx, align 8
  %cmp166 = icmp eq %struct.rtx_def* %81, %82
  br i1 %cmp166, label %if.then.168, label %if.end.170

if.then.168:                                      ; preds = %if.then.165
  %83 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %call169 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %83)
  store %struct.rtx_def* %call169, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.168, %if.then.165
  %84 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %85 = bitcast %struct.rtx_def* %84 to i32*
  %bf.load171 = load i32, i32* %85, align 8
  %bf.clear172 = and i32 %bf.load171, -134217729
  %bf.set = or i32 %bf.clear172, 134217728
  store i32 %bf.set, i32* %85, align 8
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.170, %land.lhs.true.160, %if.end.158
  %86 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common174 = bitcast %union.tree_node* %86 to %struct.tree_common*
  %code175 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common174, i32 0, i32 2
  %bf.load176 = load i32, i32* %code175, align 8
  %bf.clear177 = and i32 %bf.load176, 255
  %cmp178 = icmp eq i32 %bf.clear177, 39
  br i1 %cmp178, label %land.lhs.true.180, label %if.end.196

land.lhs.true.180:                                ; preds = %if.end.173
  %87 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %exp = bitcast %union.tree_node* %87 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx181 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %88 = load %union.tree_node*, %union.tree_node** %arrayidx181, align 8
  %common182 = bitcast %union.tree_node* %88 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common182, i32 0, i32 2
  %bf.load183 = load i32, i32* %readonly_flag, align 8
  %bf.lshr184 = lshr i32 %bf.load183, 12
  %bf.clear185 = and i32 %bf.lshr184, 1
  %tobool186 = icmp ne i32 %bf.clear185, 0
  br i1 %tobool186, label %if.then.187, label %if.end.196

if.then.187:                                      ; preds = %land.lhs.true.180
  %89 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %orig_to_rtx, align 8
  %cmp188 = icmp eq %struct.rtx_def* %89, %90
  br i1 %cmp188, label %if.then.190, label %if.end.192

if.then.190:                                      ; preds = %if.then.187
  %91 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %call191 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %91)
  store %struct.rtx_def* %call191, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.192

if.end.192:                                       ; preds = %if.then.190, %if.then.187
  %92 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %93 = bitcast %struct.rtx_def* %92 to i32*
  %bf.load193 = load i32, i32* %93, align 8
  %bf.clear194 = and i32 %bf.load193, -67108865
  %bf.set195 = or i32 %bf.clear194, 67108864
  store i32 %bf.set195, i32* %93, align 8
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.192, %land.lhs.true.180, %if.end.173
  %94 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load197 = load i32, i32* %95, align 8
  %bf.clear198 = and i32 %bf.load197, 65535
  %cmp199 = icmp eq i32 %bf.clear198, 66
  br i1 %cmp199, label %land.lhs.true.201, label %if.end.213

land.lhs.true.201:                                ; preds = %if.end.196
  %96 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %call202 = call i32 @can_address_p(%union.tree_node* %96)
  %tobool203 = icmp ne i32 %call202, 0
  br i1 %tobool203, label %if.end.213, label %if.then.204

if.then.204:                                      ; preds = %land.lhs.true.201
  %97 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %98 = load %struct.rtx_def*, %struct.rtx_def** %orig_to_rtx, align 8
  %cmp205 = icmp eq %struct.rtx_def* %97, %98
  br i1 %cmp205, label %if.then.207, label %if.end.209

if.then.207:                                      ; preds = %if.then.204
  %99 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %call208 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %99)
  store %struct.rtx_def* %call208, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.209

if.end.209:                                       ; preds = %if.then.207, %if.then.204
  %100 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load210 = load i32, i32* %101, align 8
  %bf.clear211 = and i32 %bf.load210, -16777217
  %bf.set212 = or i32 %bf.clear211, 16777216
  store i32 %bf.set212, i32* %101, align 8
  br label %if.end.213

if.end.213:                                       ; preds = %if.end.209, %land.lhs.true.201, %if.end.196
  %102 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %103 = load i64, i64* %bitsize, align 8
  %104 = load i64, i64* %bitpos, align 8
  %105 = load i32, i32* %mode1, align 4
  %106 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %107 = load i32, i32* %want_value.addr, align 4
  %tobool214 = icmp ne i32 %107, 0
  br i1 %tobool214, label %cond.true.215, label %cond.false.222

cond.true.215:                                    ; preds = %if.end.213
  %108 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common216 = bitcast %union.tree_node* %108 to %struct.tree_common*
  %type217 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common216, i32 0, i32 1
  %109 = load %union.tree_node*, %union.tree_node** %type217, align 8
  %type218 = bitcast %union.tree_node* %109 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type218, i32 0, i32 6
  %bf.load219 = load i32, i32* %mode, align 4
  %bf.lshr220 = lshr i32 %bf.load219, 9
  %bf.clear221 = and i32 %bf.lshr220, 127
  br label %cond.end.223

cond.false.222:                                   ; preds = %if.end.213
  br label %cond.end.223

cond.end.223:                                     ; preds = %cond.false.222, %cond.true.215
  %cond224 = phi i32 [ %bf.clear221, %cond.true.215 ], [ 0, %cond.false.222 ]
  %110 = load i32, i32* %unsignedp, align 4
  %111 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common225 = bitcast %union.tree_node* %111 to %struct.tree_common*
  %type226 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common225, i32 0, i32 1
  %112 = load %union.tree_node*, %union.tree_node** %type226, align 8
  %113 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %call227 = call i64 @get_alias_set(%union.tree_node* %113)
  %conv228 = trunc i64 %call227 to i32
  %call229 = call %struct.rtx_def* @store_field(%struct.rtx_def* %102, i64 %103, i64 %104, i32 %105, %union.tree_node* %106, i32 %cond224, i32 %110, %union.tree_node* %112, i32 %conv228)
  store %struct.rtx_def* %call229, %struct.rtx_def** %result, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %114)
  call void @free_temp_slots()
  call void @pop_temp_slots()
  %115 = load i32, i32* %want_value.addr, align 4
  %tobool230 = icmp ne i32 %115, 0
  br i1 %tobool230, label %cond.true.231, label %cond.false.253

cond.true.231:                                    ; preds = %cond.end.223
  %116 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common232 = bitcast %union.tree_node* %116 to %struct.tree_common*
  %type233 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common232, i32 0, i32 1
  %117 = load %union.tree_node*, %union.tree_node** %type233, align 8
  %type234 = bitcast %union.tree_node* %117 to %struct.tree_type*
  %mode235 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type234, i32 0, i32 6
  %bf.load236 = load i32, i32* %mode235, align 4
  %bf.lshr237 = lshr i32 %bf.load236, 9
  %bf.clear238 = and i32 %bf.lshr237, 127
  %118 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %common239 = bitcast %union.tree_node* %118 to %struct.tree_common*
  %type240 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common239, i32 0, i32 1
  %119 = load %union.tree_node*, %union.tree_node** %type240, align 8
  %type241 = bitcast %union.tree_node* %119 to %struct.tree_type*
  %mode242 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type241, i32 0, i32 6
  %bf.load243 = load i32, i32* %mode242, align 4
  %bf.lshr244 = lshr i32 %bf.load243, 9
  %bf.clear245 = and i32 %bf.lshr244, 127
  %120 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %121 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common246 = bitcast %union.tree_node* %121 to %struct.tree_common*
  %type247 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common246, i32 0, i32 1
  %122 = load %union.tree_node*, %union.tree_node** %type247, align 8
  %common248 = bitcast %union.tree_node* %122 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common248, i32 0, i32 2
  %bf.load249 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr250 = lshr i32 %bf.load249, 13
  %bf.clear251 = and i32 %bf.lshr250, 1
  %call252 = call %struct.rtx_def* @convert_modes(i32 %bf.clear238, i32 %bf.clear245, %struct.rtx_def* %120, i32 %bf.clear251)
  br label %cond.end.254

cond.false.253:                                   ; preds = %cond.end.223
  br label %cond.end.254

cond.end.254:                                     ; preds = %cond.false.253, %cond.true.231
  %cond255 = phi %struct.rtx_def* [ %call252, %cond.true.231 ], [ null, %cond.false.253 ]
  store %struct.rtx_def* %cond255, %struct.rtx_def** %retval
  br label %return

if.end.256:                                       ; preds = %lor.lhs.false.17
  %123 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %common257 = bitcast %union.tree_node* %123 to %struct.tree_common*
  %code258 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common257, i32 0, i32 2
  %bf.load259 = load i32, i32* %code258, align 8
  %bf.clear260 = and i32 %bf.load259, 255
  %cmp261 = icmp eq i32 %bf.clear260, 53
  br i1 %cmp261, label %land.lhs.true.263, label %if.end.337

land.lhs.true.263:                                ; preds = %if.end.256
  %124 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %call264 = call i32 @aggregate_value_p(%union.tree_node* %124)
  %tobool265 = icmp ne i32 %call264, 0
  br i1 %tobool265, label %if.end.337, label %land.lhs.true.266

land.lhs.true.266:                                ; preds = %land.lhs.true.263
  %125 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %common267 = bitcast %union.tree_node* %125 to %struct.tree_common*
  %type268 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common267, i32 0, i32 1
  %126 = load %union.tree_node*, %union.tree_node** %type268, align 8
  %type269 = bitcast %union.tree_node* %126 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type269, i32 0, i32 2
  %127 = load %union.tree_node*, %union.tree_node** %size, align 8
  %common270 = bitcast %union.tree_node* %127 to %struct.tree_common*
  %code271 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common270, i32 0, i32 2
  %bf.load272 = load i32, i32* %code271, align 8
  %bf.clear273 = and i32 %bf.load272, 255
  %cmp274 = icmp eq i32 %bf.clear273, 25
  br i1 %cmp274, label %land.lhs.true.276, label %if.end.337

land.lhs.true.276:                                ; preds = %land.lhs.true.266
  %128 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common277 = bitcast %union.tree_node* %128 to %struct.tree_common*
  %code278 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common277, i32 0, i32 2
  %bf.load279 = load i32, i32* %code278, align 8
  %bf.clear280 = and i32 %bf.load279, 255
  %cmp281 = icmp eq i32 %bf.clear280, 34
  br i1 %cmp281, label %land.lhs.true.290, label %lor.lhs.false.283

lor.lhs.false.283:                                ; preds = %land.lhs.true.276
  %129 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common284 = bitcast %union.tree_node* %129 to %struct.tree_common*
  %code285 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common284, i32 0, i32 2
  %bf.load286 = load i32, i32* %code285, align 8
  %bf.clear287 = and i32 %bf.load286, 255
  %cmp288 = icmp eq i32 %bf.clear287, 35
  br i1 %cmp288, label %land.lhs.true.290, label %if.then.304

land.lhs.true.290:                                ; preds = %lor.lhs.false.283, %land.lhs.true.276
  %130 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %decl = bitcast %union.tree_node* %130 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %131 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool291 = icmp ne %struct.rtx_def* %131, null
  br i1 %tobool291, label %cond.true.292, label %cond.false.295

cond.true.292:                                    ; preds = %land.lhs.true.290
  %132 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %decl293 = bitcast %union.tree_node* %132 to %struct.tree_decl*
  %rtl294 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl293, i32 0, i32 17
  %133 = load %struct.rtx_def*, %struct.rtx_def** %rtl294, align 8
  br label %cond.end.298

cond.false.295:                                   ; preds = %land.lhs.true.290
  %134 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %134, i8* null)
  %135 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %decl296 = bitcast %union.tree_node* %135 to %struct.tree_decl*
  %rtl297 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl296, i32 0, i32 17
  %136 = load %struct.rtx_def*, %struct.rtx_def** %rtl297, align 8
  br label %cond.end.298

cond.end.298:                                     ; preds = %cond.false.295, %cond.true.292
  %cond299 = phi %struct.rtx_def* [ %133, %cond.true.292 ], [ %136, %cond.false.295 ]
  %137 = bitcast %struct.rtx_def* %cond299 to i32*
  %bf.load300 = load i32, i32* %137, align 8
  %bf.clear301 = and i32 %bf.load300, 65535
  %cmp302 = icmp eq i32 %bf.clear301, 61
  br i1 %cmp302, label %if.end.337, label %if.then.304

if.then.304:                                      ; preds = %cond.end.298, %lor.lhs.false.283
  call void @push_temp_slots()
  %138 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %call305 = call %struct.rtx_def* @expand_expr(%union.tree_node* %138, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call305, %struct.rtx_def** %value, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %cmp306 = icmp eq %struct.rtx_def* %139, null
  br i1 %cmp306, label %if.then.308, label %if.end.310

if.then.308:                                      ; preds = %if.then.304
  %140 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %call309 = call %struct.rtx_def* @expand_expr(%union.tree_node* %140, %struct.rtx_def* null, i32 0, i32 4)
  store %struct.rtx_def* %call309, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.310

if.end.310:                                       ; preds = %if.then.308, %if.then.304
  %141 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %142 = bitcast %struct.rtx_def* %141 to i32*
  %bf.load311 = load i32, i32* %142, align 8
  %bf.clear312 = and i32 %bf.load311, 65535
  %cmp313 = icmp eq i32 %bf.clear312, 39
  br i1 %cmp313, label %if.then.315, label %if.else

if.then.315:                                      ; preds = %if.end.310
  %143 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %145 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %common316 = bitcast %union.tree_node* %145 to %struct.tree_common*
  %type317 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common316, i32 0, i32 1
  %146 = load %union.tree_node*, %union.tree_node** %type317, align 8
  %call318 = call i64 @int_size_in_bytes(%union.tree_node* %146)
  %conv319 = trunc i64 %call318 to i32
  call void @emit_group_load(%struct.rtx_def* %143, %struct.rtx_def* %144, i32 %conv319)
  br label %if.end.331

if.else:                                          ; preds = %if.end.310
  %147 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %148 = bitcast %struct.rtx_def* %147 to i32*
  %bf.load320 = load i32, i32* %148, align 8
  %bf.lshr321 = lshr i32 %bf.load320, 16
  %bf.clear322 = and i32 %bf.lshr321, 255
  %cmp323 = icmp eq i32 %bf.clear322, 51
  br i1 %cmp323, label %if.then.325, label %if.else.328

if.then.325:                                      ; preds = %if.else
  %149 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %150 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %151 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %call326 = call %struct.rtx_def* @expr_size(%union.tree_node* %151)
  %call327 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %149, %struct.rtx_def* %150, %struct.rtx_def* %call326)
  br label %if.end.330

if.else.328:                                      ; preds = %if.else
  %152 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %153 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %call329 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %152, %struct.rtx_def* %153)
  br label %if.end.330

if.end.330:                                       ; preds = %if.else.328, %if.then.325
  br label %if.end.331

if.end.331:                                       ; preds = %if.end.330, %if.then.315
  %154 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %154)
  call void @free_temp_slots()
  call void @pop_temp_slots()
  %155 = load i32, i32* %want_value.addr, align 4
  %tobool332 = icmp ne i32 %155, 0
  br i1 %tobool332, label %cond.true.333, label %cond.false.334

cond.true.333:                                    ; preds = %if.end.331
  %156 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  br label %cond.end.335

cond.false.334:                                   ; preds = %if.end.331
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.false.334, %cond.true.333
  %cond336 = phi %struct.rtx_def* [ %156, %cond.true.333 ], [ null, %cond.false.334 ]
  store %struct.rtx_def* %cond336, %struct.rtx_def** %retval
  br label %return

if.end.337:                                       ; preds = %cond.end.298, %land.lhs.true.266, %land.lhs.true.263, %if.end.256
  %157 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %cmp338 = icmp eq %struct.rtx_def* %157, null
  br i1 %cmp338, label %if.then.340, label %if.end.342

if.then.340:                                      ; preds = %if.end.337
  %158 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %call341 = call %struct.rtx_def* @expand_expr(%union.tree_node* %158, %struct.rtx_def* null, i32 0, i32 4)
  store %struct.rtx_def* %call341, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.342

if.end.342:                                       ; preds = %if.then.340, %if.end.337
  %159 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common343 = bitcast %union.tree_node* %159 to %struct.tree_common*
  %code344 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common343, i32 0, i32 2
  %bf.load345 = load i32, i32* %code344, align 8
  %bf.clear346 = and i32 %bf.load345, 255
  %cmp347 = icmp eq i32 %bf.clear346, 36
  br i1 %cmp347, label %land.lhs.true.349, label %if.end.381

land.lhs.true.349:                                ; preds = %if.end.342
  %160 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load350 = load i32, i32* %161, align 8
  %bf.clear351 = and i32 %bf.load350, 65535
  %cmp352 = icmp eq i32 %bf.clear351, 61
  br i1 %cmp352, label %if.then.359, label %lor.lhs.false.354

lor.lhs.false.354:                                ; preds = %land.lhs.true.349
  %162 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %163 = bitcast %struct.rtx_def* %162 to i32*
  %bf.load355 = load i32, i32* %163, align 8
  %bf.clear356 = and i32 %bf.load355, 65535
  %cmp357 = icmp eq i32 %bf.clear356, 39
  br i1 %cmp357, label %if.then.359, label %if.end.381

if.then.359:                                      ; preds = %lor.lhs.false.354, %land.lhs.true.349
  call void @push_temp_slots()
  %164 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %165 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %166 = bitcast %struct.rtx_def* %165 to i32*
  %bf.load360 = load i32, i32* %166, align 8
  %bf.lshr361 = lshr i32 %bf.load360, 16
  %bf.clear362 = and i32 %bf.lshr361, 255
  %call363 = call %struct.rtx_def* @expand_expr(%union.tree_node* %164, %struct.rtx_def* null, i32 %bf.clear362, i32 0)
  store %struct.rtx_def* %call363, %struct.rtx_def** %temp, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %168 = bitcast %struct.rtx_def* %167 to i32*
  %bf.load364 = load i32, i32* %168, align 8
  %bf.clear365 = and i32 %bf.load364, 65535
  %cmp366 = icmp eq i32 %bf.clear365, 39
  br i1 %cmp366, label %if.then.368, label %if.else.373

if.then.368:                                      ; preds = %if.then.359
  %169 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %171 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %common369 = bitcast %union.tree_node* %171 to %struct.tree_common*
  %type370 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common369, i32 0, i32 1
  %172 = load %union.tree_node*, %union.tree_node** %type370, align 8
  %call371 = call i64 @int_size_in_bytes(%union.tree_node* %172)
  %conv372 = trunc i64 %call371 to i32
  call void @emit_group_load(%struct.rtx_def* %169, %struct.rtx_def* %170, i32 %conv372)
  br label %if.end.375

if.else.373:                                      ; preds = %if.then.359
  %173 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %174 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call374 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %173, %struct.rtx_def* %174)
  br label %if.end.375

if.end.375:                                       ; preds = %if.else.373, %if.then.368
  %175 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %175)
  call void @free_temp_slots()
  call void @pop_temp_slots()
  %176 = load i32, i32* %want_value.addr, align 4
  %tobool376 = icmp ne i32 %176, 0
  br i1 %tobool376, label %cond.true.377, label %cond.false.378

cond.true.377:                                    ; preds = %if.end.375
  %177 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  br label %cond.end.379

cond.false.378:                                   ; preds = %if.end.375
  br label %cond.end.379

cond.end.379:                                     ; preds = %cond.false.378, %cond.true.377
  %cond380 = phi %struct.rtx_def* [ %177, %cond.true.377 ], [ null, %cond.false.378 ]
  store %struct.rtx_def* %cond380, %struct.rtx_def** %retval
  br label %return

if.end.381:                                       ; preds = %lor.lhs.false.354, %if.end.342
  %178 = load %union.tree_node*, %union.tree_node** %to.addr, align 8
  %common382 = bitcast %union.tree_node* %178 to %struct.tree_common*
  %code383 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common382, i32 0, i32 2
  %bf.load384 = load i32, i32* %code383, align 8
  %bf.clear385 = and i32 %bf.load384, 255
  %cmp386 = icmp eq i32 %bf.clear385, 36
  br i1 %cmp386, label %land.lhs.true.388, label %if.end.440

land.lhs.true.388:                                ; preds = %if.end.381
  %179 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %common389 = bitcast %union.tree_node* %179 to %struct.tree_common*
  %code390 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common389, i32 0, i32 2
  %bf.load391 = load i32, i32* %code390, align 8
  %bf.clear392 = and i32 %bf.load391, 255
  %cmp393 = icmp eq i32 %bf.clear392, 41
  br i1 %cmp393, label %land.lhs.true.395, label %if.end.440

land.lhs.true.395:                                ; preds = %land.lhs.true.388
  %180 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %180, i32 0, i32 56
  %181 = bitcast i24* %returns_struct to i32*
  %bf.load396 = load i32, i32* %181, align 8
  %bf.clear397 = and i32 %bf.load396, 1
  %tobool398 = icmp ne i32 %bf.clear397, 0
  br i1 %tobool398, label %land.lhs.true.399, label %if.end.440

land.lhs.true.399:                                ; preds = %land.lhs.true.395
  %182 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %182, i32 0, i32 56
  %183 = bitcast i24* %returns_pcc_struct to i32*
  %bf.load400 = load i32, i32* %183, align 8
  %bf.lshr401 = lshr i32 %bf.load400, 1
  %bf.clear402 = and i32 %bf.lshr401, 1
  %tobool403 = icmp ne i32 %bf.clear402, 0
  br i1 %tobool403, label %if.end.440, label %if.then.404

if.then.404:                                      ; preds = %land.lhs.true.399
  call void @push_temp_slots()
  %184 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %call406 = call %struct.rtx_def* @expr_size(%union.tree_node* %184)
  store %struct.rtx_def* %call406, %struct.rtx_def** %size405, align 8
  %185 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %call407 = call %struct.rtx_def* @expand_expr(%union.tree_node* %185, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call407, %struct.rtx_def** %from_rtx, align 8
  %186 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 12), align 8
  %187 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld408 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %187, i32 0, i32 1
  %arrayidx409 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld408, i32 0, i64 0
  %rtx410 = bitcast %union.rtunion_def* %arrayidx409 to %struct.rtx_def**
  %188 = load %struct.rtx_def*, %struct.rtx_def** %rtx410, align 8
  %189 = load i32, i32* @target_flags, align 4
  %and = and i32 %189, 33554432
  %tobool411 = icmp ne i32 %and, 0
  %cond412 = select i1 %tobool411, i32 5, i32 4
  %190 = load %struct.rtx_def*, %struct.rtx_def** %from_rtx, align 8
  %fld413 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %190, i32 0, i32 1
  %arrayidx414 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld413, i32 0, i64 0
  %rtx415 = bitcast %union.rtunion_def* %arrayidx414 to %struct.rtx_def**
  %191 = load %struct.rtx_def*, %struct.rtx_def** %rtx415, align 8
  %192 = load i32, i32* @target_flags, align 4
  %and416 = and i32 %192, 33554432
  %tobool417 = icmp ne i32 %and416, 0
  %cond418 = select i1 %tobool417, i32 5, i32 4
  %193 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type419 = bitcast %union.tree_node* %193 to %struct.tree_type*
  %mode420 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type419, i32 0, i32 6
  %bf.load421 = load i32, i32* %mode420, align 4
  %bf.lshr422 = lshr i32 %bf.load421, 9
  %bf.clear423 = and i32 %bf.lshr422, 127
  %194 = load %struct.rtx_def*, %struct.rtx_def** %size405, align 8
  %195 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %common424 = bitcast %union.tree_node* %195 to %struct.tree_common*
  %unsigned_flag425 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common424, i32 0, i32 2
  %bf.load426 = load i32, i32* %unsigned_flag425, align 8
  %bf.lshr427 = lshr i32 %bf.load426, 13
  %bf.clear428 = and i32 %bf.lshr427, 1
  %call429 = call %struct.rtx_def* @convert_to_mode(i32 %bf.clear423, %struct.rtx_def* %194, i32 %bf.clear428)
  %196 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type430 = bitcast %union.tree_node* %196 to %struct.tree_type*
  %mode431 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type430, i32 0, i32 6
  %bf.load432 = load i32, i32* %mode431, align 4
  %bf.lshr433 = lshr i32 %bf.load432, 9
  %bf.clear434 = and i32 %bf.lshr433, 127
  call void (%struct.rtx_def*, i32, i32, i32, ...) @emit_library_call(%struct.rtx_def* %186, i32 0, i32 0, i32 3, %struct.rtx_def* %188, i32 %cond412, %struct.rtx_def* %191, i32 %cond418, %struct.rtx_def* %call429, i32 %bf.clear434)
  %197 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %197)
  call void @free_temp_slots()
  call void @pop_temp_slots()
  %198 = load i32, i32* %want_value.addr, align 4
  %tobool435 = icmp ne i32 %198, 0
  br i1 %tobool435, label %cond.true.436, label %cond.false.437

cond.true.436:                                    ; preds = %if.then.404
  %199 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  br label %cond.end.438

cond.false.437:                                   ; preds = %if.then.404
  br label %cond.end.438

cond.end.438:                                     ; preds = %cond.false.437, %cond.true.436
  %cond439 = phi %struct.rtx_def* [ %199, %cond.true.436 ], [ null, %cond.false.437 ]
  store %struct.rtx_def* %cond439, %struct.rtx_def** %retval
  br label %return

if.end.440:                                       ; preds = %land.lhs.true.399, %land.lhs.true.395, %land.lhs.true.388, %if.end.381
  call void @push_temp_slots()
  %200 = load %union.tree_node*, %union.tree_node** %from.addr, align 8
  %201 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %202 = load i32, i32* %want_value.addr, align 4
  %call441 = call %struct.rtx_def* @store_expr(%union.tree_node* %200, %struct.rtx_def* %201, i32 %202)
  store %struct.rtx_def* %call441, %struct.rtx_def** %result, align 8
  %203 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %203)
  call void @free_temp_slots()
  call void @pop_temp_slots()
  %204 = load i32, i32* %want_value.addr, align 4
  %tobool442 = icmp ne i32 %204, 0
  br i1 %tobool442, label %cond.true.443, label %cond.false.444

cond.true.443:                                    ; preds = %if.end.440
  %205 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  br label %cond.end.445

cond.false.444:                                   ; preds = %if.end.440
  br label %cond.end.445

cond.end.445:                                     ; preds = %cond.false.444, %cond.true.443
  %cond446 = phi %struct.rtx_def* [ %205, %cond.true.443 ], [ null, %cond.false.444 ]
  store %struct.rtx_def* %cond446, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %cond.end.445, %cond.end.438, %cond.end.379, %cond.end.335, %cond.end.254, %cond.end
  %206 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %206
}

declare void @push_temp_slots() #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_inner_reference(%union.tree_node* %exp, i64* %pbitsize, i64* %pbitpos, %union.tree_node** %poffset, i32* %pmode, i32* %punsignedp, i32* %pvolatilep) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %pbitsize.addr = alloca i64*, align 8
  %pbitpos.addr = alloca i64*, align 8
  %poffset.addr = alloca %union.tree_node**, align 8
  %pmode.addr = alloca i32*, align 8
  %punsignedp.addr = alloca i32*, align 8
  %pvolatilep.addr = alloca i32*, align 8
  %size_tree = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %offset = alloca %union.tree_node*, align 8
  %bit_offset = alloca %union.tree_node*, align 8
  %placeholder_ptr = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %this_offset = alloca %union.tree_node*, align 8
  %index = alloca %union.tree_node*, align 8
  %array = alloca %union.tree_node*, align 8
  %domain = alloca %union.tree_node*, align 8
  %low_bound = alloca %union.tree_node*, align 8
  %unit_size = alloca %union.tree_node*, align 8
  %new = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store i64* %pbitsize, i64** %pbitsize.addr, align 8
  store i64* %pbitpos, i64** %pbitpos.addr, align 8
  store %union.tree_node** %poffset, %union.tree_node*** %poffset.addr, align 8
  store i32* %pmode, i32** %pmode.addr, align 8
  store i32* %punsignedp, i32** %punsignedp.addr, align 8
  store i32* %pvolatilep, i32** %pvolatilep.addr, align 8
  store %union.tree_node* null, %union.tree_node** %size_tree, align 8
  store i32 0, i32* %mode, align 4
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 15), align 8
  store %union.tree_node* %0, %union.tree_node** %offset, align 8
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 17), align 8
  store %union.tree_node* %1, %union.tree_node** %bit_offset, align 8
  store %union.tree_node* null, %union.tree_node** %placeholder_ptr, align 8
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 39
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %3 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %decl = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %size = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 4
  %5 = load %union.tree_node*, %union.tree_node** %size, align 8
  store %union.tree_node* %5, %union.tree_node** %size_tree, align 8
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2 = bitcast %union.tree_node* %6 to %struct.tree_exp*
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 2
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i32 0, i64 1
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8
  %decl5 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %bit_field_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl5, i32 0, i32 5
  %8 = bitcast i48* %bit_field_flag to i64*
  %bf.load6 = load i64, i64* %8, align 8
  %bf.lshr = lshr i64 %bf.load6, 12
  %bf.clear7 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear7 to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end, label %if.then.8

if.then.8:                                        ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp9 = bitcast %union.tree_node* %9 to %struct.tree_exp*
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 2
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i32 0, i64 1
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8
  %decl12 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %mode13 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl12, i32 0, i32 5
  %11 = bitcast i48* %mode13 to i64*
  %bf.load14 = load i64, i64* %11, align 8
  %bf.clear15 = and i64 %bf.load14, 255
  %bf.cast16 = trunc i64 %bf.clear15 to i32
  store i32 %bf.cast16, i32* %mode, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp17 = bitcast %union.tree_node* %12 to %struct.tree_exp*
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 2
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i32 0, i64 1
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8
  %common20 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2
  %bf.load21 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 13
  %bf.clear23 = and i32 %bf.lshr22, 1
  %14 = load i32*, i32** %punsignedp.addr, align 8
  store i32 %bf.clear23, i32* %14, align 4
  br label %if.end.62

if.else:                                          ; preds = %entry
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common24 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %code25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2
  %bf.load26 = load i32, i32* %code25, align 8
  %bf.clear27 = and i32 %bf.load26, 255
  %cmp28 = icmp eq i32 %bf.clear27, 40
  br i1 %cmp28, label %if.then.29, label %if.else.38

if.then.29:                                       ; preds = %if.else
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp30 = bitcast %union.tree_node* %16 to %struct.tree_exp*
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 2
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i32 0, i64 1
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8
  store %union.tree_node* %17, %union.tree_node** %size_tree, align 8
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common33 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %unsigned_flag34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2
  %bf.load35 = load i32, i32* %unsigned_flag34, align 8
  %bf.lshr36 = lshr i32 %bf.load35, 13
  %bf.clear37 = and i32 %bf.lshr36, 1
  %19 = load i32*, i32** %punsignedp.addr, align 8
  store i32 %bf.clear37, i32* %19, align 4
  br label %if.end.61

if.else.38:                                       ; preds = %if.else
  %20 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common39 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 1
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type40 = bitcast %union.tree_node* %21 to %struct.tree_type*
  %mode41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 6
  %bf.load42 = load i32, i32* %mode41, align 4
  %bf.lshr43 = lshr i32 %bf.load42, 9
  %bf.clear44 = and i32 %bf.lshr43, 127
  store i32 %bf.clear44, i32* %mode, align 4
  %22 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common45 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 1
  %23 = load %union.tree_node*, %union.tree_node** %type46, align 8
  %common47 = bitcast %union.tree_node* %23 to %struct.tree_common*
  %unsigned_flag48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2
  %bf.load49 = load i32, i32* %unsigned_flag48, align 8
  %bf.lshr50 = lshr i32 %bf.load49, 13
  %bf.clear51 = and i32 %bf.lshr50, 1
  %24 = load i32*, i32** %punsignedp.addr, align 8
  store i32 %bf.clear51, i32* %24, align 4
  %25 = load i32, i32* %mode, align 4
  %cmp52 = icmp eq i32 %25, 51
  br i1 %cmp52, label %if.then.53, label %if.else.58

if.then.53:                                       ; preds = %if.else.38
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common54 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %type55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 1
  %27 = load %union.tree_node*, %union.tree_node** %type55, align 8
  %type56 = bitcast %union.tree_node* %27 to %struct.tree_type*
  %size57 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 2
  %28 = load %union.tree_node*, %union.tree_node** %size57, align 8
  store %union.tree_node* %28, %union.tree_node** %size_tree, align 8
  br label %if.end.60

if.else.58:                                       ; preds = %if.else.38
  %29 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %29 to i64
  %arrayidx59 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %30 = load i16, i16* %arrayidx59, align 2
  %conv = zext i16 %30 to i64
  %31 = load i64*, i64** %pbitsize.addr, align 8
  store i64 %conv, i64* %31, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.58, %if.then.53
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.then.29
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.end
  %32 = load %union.tree_node*, %union.tree_node** %size_tree, align 8
  %cmp63 = icmp ne %union.tree_node* %32, null
  br i1 %cmp63, label %if.then.65, label %if.end.71

if.then.65:                                       ; preds = %if.end.62
  %33 = load %union.tree_node*, %union.tree_node** %size_tree, align 8
  %call = call i32 @host_integerp(%union.tree_node* %33, i32 1)
  %tobool66 = icmp ne i32 %call, 0
  br i1 %tobool66, label %if.else.68, label %if.then.67

if.then.67:                                       ; preds = %if.then.65
  store i32 51, i32* %mode, align 4
  %34 = load i64*, i64** %pbitsize.addr, align 8
  store i64 -1, i64* %34, align 8
  br label %if.end.70

if.else.68:                                       ; preds = %if.then.65
  %35 = load %union.tree_node*, %union.tree_node** %size_tree, align 8
  %call69 = call i64 @tree_low_cst(%union.tree_node* %35, i32 1)
  %36 = load i64*, i64** %pbitsize.addr, align 8
  store i64 %call69, i64* %36, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.68, %if.then.67
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end.62
  br label %while.body

while.body:                                       ; preds = %if.end.71, %if.end.196, %if.end.257
  %37 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common72 = bitcast %union.tree_node* %37 to %struct.tree_common*
  %code73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2
  %bf.load74 = load i32, i32* %code73, align 8
  %bf.clear75 = and i32 %bf.load74, 255
  %cmp76 = icmp eq i32 %bf.clear75, 40
  br i1 %cmp76, label %if.then.78, label %if.else.83

if.then.78:                                       ; preds = %while.body
  %38 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8
  %39 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp79 = bitcast %union.tree_node* %39 to %struct.tree_exp*
  %operands80 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp79, i32 0, i32 2
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands80, i32 0, i64 2
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8
  %call82 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %38, %union.tree_node* %40)
  store %union.tree_node* %call82, %union.tree_node** %bit_offset, align 8
  br label %if.end.250

if.else.83:                                       ; preds = %while.body
  %41 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common84 = bitcast %union.tree_node* %41 to %struct.tree_common*
  %code85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2
  %bf.load86 = load i32, i32* %code85, align 8
  %bf.clear87 = and i32 %bf.load86, 255
  %cmp88 = icmp eq i32 %bf.clear87, 39
  br i1 %cmp88, label %if.then.90, label %if.else.113

if.then.90:                                       ; preds = %if.else.83
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp91 = bitcast %union.tree_node* %42 to %struct.tree_exp*
  %operands92 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp91, i32 0, i32 2
  %arrayidx93 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands92, i32 0, i64 1
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx93, align 8
  store %union.tree_node* %43, %union.tree_node** %field, align 8
  %44 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl94 = bitcast %union.tree_node* %44 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl94, i32 0, i32 10
  %45 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %45, %union.tree_node** %this_offset, align 8
  %46 = load %union.tree_node*, %union.tree_node** %this_offset, align 8
  %cmp95 = icmp eq %union.tree_node* %46, null
  br i1 %cmp95, label %if.then.97, label %if.else.98

if.then.97:                                       ; preds = %if.then.90
  br label %while.end

if.else.98:                                       ; preds = %if.then.90
  %47 = load %union.tree_node*, %union.tree_node** %this_offset, align 8
  %common99 = bitcast %union.tree_node* %47 to %struct.tree_common*
  %constant_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 2
  %bf.load100 = load i32, i32* %constant_flag, align 8
  %bf.lshr101 = lshr i32 %bf.load100, 9
  %bf.clear102 = and i32 %bf.lshr101, 1
  %tobool103 = icmp ne i32 %bf.clear102, 0
  br i1 %tobool103, label %if.end.108, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else.98
  %48 = load %union.tree_node*, %union.tree_node** %this_offset, align 8
  %call104 = call i32 @contains_placeholder_p(%union.tree_node* %48)
  %tobool105 = icmp ne i32 %call104, 0
  br i1 %tobool105, label %if.then.106, label %if.end.108

if.then.106:                                      ; preds = %land.lhs.true
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %50 = load %union.tree_node*, %union.tree_node** %this_offset, align 8
  %51 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call107 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 58, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* %51)
  store %union.tree_node* %call107, %union.tree_node** %this_offset, align 8
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.106, %land.lhs.true, %if.else.98
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108
  %52 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %53 = load %union.tree_node*, %union.tree_node** %this_offset, align 8
  %call110 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %52, %union.tree_node* %53)
  store %union.tree_node* %call110, %union.tree_node** %offset, align 8
  %54 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8
  %55 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl111 = bitcast %union.tree_node* %55 to %struct.tree_decl*
  %u2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl111, i32 0, i32 19
  %t = bitcast %union.anon.1* %u2 to %union.tree_node**
  %56 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call112 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %54, %union.tree_node* %56)
  store %union.tree_node* %call112, %union.tree_node** %bit_offset, align 8
  br label %if.end.249

if.else.113:                                      ; preds = %if.else.83
  %57 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common114 = bitcast %union.tree_node* %57 to %struct.tree_common*
  %code115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 2
  %bf.load116 = load i32, i32* %code115, align 8
  %bf.clear117 = and i32 %bf.load116, 255
  %cmp118 = icmp eq i32 %bf.clear117, 43
  br i1 %cmp118, label %if.then.126, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.113
  %58 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common120 = bitcast %union.tree_node* %58 to %struct.tree_common*
  %code121 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common120, i32 0, i32 2
  %bf.load122 = load i32, i32* %code121, align 8
  %bf.clear123 = and i32 %bf.load122, 255
  %cmp124 = icmp eq i32 %bf.clear123, 44
  br i1 %cmp124, label %if.then.126, label %if.else.183

if.then.126:                                      ; preds = %lor.lhs.false, %if.else.113
  %59 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp127 = bitcast %union.tree_node* %59 to %struct.tree_exp*
  %operands128 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp127, i32 0, i32 2
  %arrayidx129 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands128, i32 0, i64 1
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx129, align 8
  store %union.tree_node* %60, %union.tree_node** %index, align 8
  %61 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp130 = bitcast %union.tree_node* %61 to %struct.tree_exp*
  %operands131 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp130, i32 0, i32 2
  %arrayidx132 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands131, i32 0, i64 0
  %62 = load %union.tree_node*, %union.tree_node** %arrayidx132, align 8
  store %union.tree_node* %62, %union.tree_node** %array, align 8
  %63 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common133 = bitcast %union.tree_node* %63 to %struct.tree_common*
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 1
  %64 = load %union.tree_node*, %union.tree_node** %type134, align 8
  %type135 = bitcast %union.tree_node* %64 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type135, i32 0, i32 1
  %65 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %65, %union.tree_node** %domain, align 8
  %66 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %tobool136 = icmp ne %union.tree_node* %66, null
  br i1 %tobool136, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.126
  %67 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type137 = bitcast %union.tree_node* %67 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type137, i32 0, i32 12
  %68 = load %union.tree_node*, %union.tree_node** %minval, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.126
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %68, %cond.true ], [ null, %cond.false ]
  store %union.tree_node* %cond, %union.tree_node** %low_bound, align 8
  %69 = load %union.tree_node*, %union.tree_node** %array, align 8
  %common138 = bitcast %union.tree_node* %69 to %struct.tree_common*
  %type139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 1
  %70 = load %union.tree_node*, %union.tree_node** %type139, align 8
  %common140 = bitcast %union.tree_node* %70 to %struct.tree_common*
  %type141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 1
  %71 = load %union.tree_node*, %union.tree_node** %type141, align 8
  %type142 = bitcast %union.tree_node* %71 to %struct.tree_type*
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type142, i32 0, i32 3
  %72 = load %union.tree_node*, %union.tree_node** %size_unit, align 8
  store %union.tree_node* %72, %union.tree_node** %unit_size, align 8
  %73 = load %union.tree_node*, %union.tree_node** %low_bound, align 8
  %cmp143 = icmp ne %union.tree_node* %73, null
  br i1 %cmp143, label %land.lhs.true.145, label %if.end.153

land.lhs.true.145:                                ; preds = %cond.end
  %74 = load %union.tree_node*, %union.tree_node** %low_bound, align 8
  %call146 = call i32 @integer_zerop(%union.tree_node* %74)
  %tobool147 = icmp ne i32 %call146, 0
  br i1 %tobool147, label %if.end.153, label %if.then.148

if.then.148:                                      ; preds = %land.lhs.true.145
  %75 = load %union.tree_node*, %union.tree_node** %index, align 8
  %common149 = bitcast %union.tree_node* %75 to %struct.tree_common*
  %type150 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common149, i32 0, i32 1
  %76 = load %union.tree_node*, %union.tree_node** %type150, align 8
  %77 = load %union.tree_node*, %union.tree_node** %index, align 8
  %78 = load %union.tree_node*, %union.tree_node** %low_bound, align 8
  %call151 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %76, %union.tree_node* %77, %union.tree_node* %78)
  %call152 = call %union.tree_node* @fold(%union.tree_node* %call151)
  store %union.tree_node* %call152, %union.tree_node** %index, align 8
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.148, %land.lhs.true.145, %cond.end
  %79 = load %union.tree_node*, %union.tree_node** %index, align 8
  %common154 = bitcast %union.tree_node* %79 to %struct.tree_common*
  %constant_flag155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 2
  %bf.load156 = load i32, i32* %constant_flag155, align 8
  %bf.lshr157 = lshr i32 %bf.load156, 9
  %bf.clear158 = and i32 %bf.lshr157, 1
  %tobool159 = icmp ne i32 %bf.clear158, 0
  br i1 %tobool159, label %if.end.167, label %land.lhs.true.160

land.lhs.true.160:                                ; preds = %if.end.153
  %80 = load %union.tree_node*, %union.tree_node** %index, align 8
  %call161 = call i32 @contains_placeholder_p(%union.tree_node* %80)
  %tobool162 = icmp ne i32 %call161, 0
  br i1 %tobool162, label %if.then.163, label %if.end.167

if.then.163:                                      ; preds = %land.lhs.true.160
  %81 = load %union.tree_node*, %union.tree_node** %index, align 8
  %common164 = bitcast %union.tree_node* %81 to %struct.tree_common*
  %type165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 1
  %82 = load %union.tree_node*, %union.tree_node** %type165, align 8
  %83 = load %union.tree_node*, %union.tree_node** %index, align 8
  %84 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call166 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 58, %union.tree_node* %82, %union.tree_node* %83, %union.tree_node* %84)
  store %union.tree_node* %call166, %union.tree_node** %index, align 8
  br label %if.end.167

if.end.167:                                       ; preds = %if.then.163, %land.lhs.true.160, %if.end.153
  %85 = load %union.tree_node*, %union.tree_node** %unit_size, align 8
  %common168 = bitcast %union.tree_node* %85 to %struct.tree_common*
  %constant_flag169 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common168, i32 0, i32 2
  %bf.load170 = load i32, i32* %constant_flag169, align 8
  %bf.lshr171 = lshr i32 %bf.load170, 9
  %bf.clear172 = and i32 %bf.lshr171, 1
  %tobool173 = icmp ne i32 %bf.clear172, 0
  br i1 %tobool173, label %if.end.179, label %land.lhs.true.174

land.lhs.true.174:                                ; preds = %if.end.167
  %86 = load %union.tree_node*, %union.tree_node** %unit_size, align 8
  %call175 = call i32 @contains_placeholder_p(%union.tree_node* %86)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.then.177, label %if.end.179

if.then.177:                                      ; preds = %land.lhs.true.174
  %87 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %88 = load %union.tree_node*, %union.tree_node** %unit_size, align 8
  %89 = load %union.tree_node*, %union.tree_node** %array, align 8
  %call178 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 58, %union.tree_node* %87, %union.tree_node* %88, %union.tree_node* %89)
  store %union.tree_node* %call178, %union.tree_node** %unit_size, align 8
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.177, %land.lhs.true.174, %if.end.167
  %90 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %92 = load %union.tree_node*, %union.tree_node** %index, align 8
  %call180 = call %union.tree_node* @convert(%union.tree_node* %91, %union.tree_node* %92)
  %93 = load %union.tree_node*, %union.tree_node** %unit_size, align 8
  %call181 = call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call180, %union.tree_node* %93)
  %call182 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %90, %union.tree_node* %call181)
  store %union.tree_node* %call182, %union.tree_node** %offset, align 8
  br label %if.end.248

if.else.183:                                      ; preds = %lor.lhs.false
  %94 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common184 = bitcast %union.tree_node* %94 to %struct.tree_common*
  %code185 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common184, i32 0, i32 2
  %bf.load186 = load i32, i32* %code185, align 8
  %bf.clear187 = and i32 %bf.load186, 255
  %cmp188 = icmp eq i32 %bf.clear187, 57
  br i1 %cmp188, label %if.then.190, label %if.else.197

if.then.190:                                      ; preds = %if.else.183
  %95 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call191 = call %union.tree_node* @find_placeholder(%union.tree_node* %95, %union.tree_node** %placeholder_ptr)
  store %union.tree_node* %call191, %union.tree_node** %new, align 8
  %96 = load %union.tree_node*, %union.tree_node** %new, align 8
  %cmp192 = icmp eq %union.tree_node* %96, null
  br i1 %cmp192, label %if.then.194, label %if.else.195

if.then.194:                                      ; preds = %if.then.190
  br label %while.end

if.else.195:                                      ; preds = %if.then.190
  %97 = load %union.tree_node*, %union.tree_node** %new, align 8
  store %union.tree_node* %97, %union.tree_node** %exp.addr, align 8
  br label %if.end.196

if.end.196:                                       ; preds = %if.else.195
  br label %while.body

if.else.197:                                      ; preds = %if.else.183
  %98 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common198 = bitcast %union.tree_node* %98 to %struct.tree_common*
  %code199 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common198, i32 0, i32 2
  %bf.load200 = load i32, i32* %code199, align 8
  %bf.clear201 = and i32 %bf.load200, 255
  %cmp202 = icmp ne i32 %bf.clear201, 116
  br i1 %cmp202, label %land.lhs.true.204, label %if.end.246

land.lhs.true.204:                                ; preds = %if.else.197
  %99 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common205 = bitcast %union.tree_node* %99 to %struct.tree_common*
  %code206 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common205, i32 0, i32 2
  %bf.load207 = load i32, i32* %code206, align 8
  %bf.clear208 = and i32 %bf.load207, 255
  %cmp209 = icmp ne i32 %bf.clear208, 117
  br i1 %cmp209, label %land.lhs.true.211, label %if.end.246

land.lhs.true.211:                                ; preds = %land.lhs.true.204
  %100 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common212 = bitcast %union.tree_node* %100 to %struct.tree_common*
  %code213 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common212, i32 0, i32 2
  %bf.load214 = load i32, i32* %code213, align 8
  %bf.clear215 = and i32 %bf.load214, 255
  %cmp216 = icmp eq i32 %bf.clear215, 115
  br i1 %cmp216, label %land.lhs.true.225, label %lor.lhs.false.218

lor.lhs.false.218:                                ; preds = %land.lhs.true.211
  %101 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common219 = bitcast %union.tree_node* %101 to %struct.tree_common*
  %code220 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common219, i32 0, i32 2
  %bf.load221 = load i32, i32* %code220, align 8
  %bf.clear222 = and i32 %bf.load221, 255
  %cmp223 = icmp eq i32 %bf.clear222, 114
  br i1 %cmp223, label %land.lhs.true.225, label %if.then.245

land.lhs.true.225:                                ; preds = %lor.lhs.false.218, %land.lhs.true.211
  %102 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common226 = bitcast %union.tree_node* %102 to %struct.tree_common*
  %type227 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common226, i32 0, i32 1
  %103 = load %union.tree_node*, %union.tree_node** %type227, align 8
  %type228 = bitcast %union.tree_node* %103 to %struct.tree_type*
  %mode229 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type228, i32 0, i32 6
  %bf.load230 = load i32, i32* %mode229, align 4
  %bf.lshr231 = lshr i32 %bf.load230, 9
  %bf.clear232 = and i32 %bf.lshr231, 127
  %104 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp233 = bitcast %union.tree_node* %104 to %struct.tree_exp*
  %operands234 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp233, i32 0, i32 2
  %arrayidx235 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands234, i32 0, i64 0
  %105 = load %union.tree_node*, %union.tree_node** %arrayidx235, align 8
  %common236 = bitcast %union.tree_node* %105 to %struct.tree_common*
  %type237 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common236, i32 0, i32 1
  %106 = load %union.tree_node*, %union.tree_node** %type237, align 8
  %type238 = bitcast %union.tree_node* %106 to %struct.tree_type*
  %mode239 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type238, i32 0, i32 6
  %bf.load240 = load i32, i32* %mode239, align 4
  %bf.lshr241 = lshr i32 %bf.load240, 9
  %bf.clear242 = and i32 %bf.lshr241, 127
  %cmp243 = icmp eq i32 %bf.clear232, %bf.clear242
  br i1 %cmp243, label %if.end.246, label %if.then.245

if.then.245:                                      ; preds = %land.lhs.true.225, %lor.lhs.false.218
  br label %while.end

if.end.246:                                       ; preds = %land.lhs.true.225, %land.lhs.true.204, %if.else.197
  br label %if.end.247

if.end.247:                                       ; preds = %if.end.246
  br label %if.end.248

if.end.248:                                       ; preds = %if.end.247, %if.end.179
  br label %if.end.249

if.end.249:                                       ; preds = %if.end.248, %if.end.109
  br label %if.end.250

if.end.250:                                       ; preds = %if.end.249, %if.then.78
  %107 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common251 = bitcast %union.tree_node* %107 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common251, i32 0, i32 2
  %bf.load252 = load i32, i32* %volatile_flag, align 8
  %bf.lshr253 = lshr i32 %bf.load252, 11
  %bf.clear254 = and i32 %bf.lshr253, 1
  %tobool255 = icmp ne i32 %bf.clear254, 0
  br i1 %tobool255, label %if.then.256, label %if.end.257

if.then.256:                                      ; preds = %if.end.250
  %108 = load i32*, i32** %pvolatilep.addr, align 8
  store i32 1, i32* %108, align 4
  br label %if.end.257

if.end.257:                                       ; preds = %if.then.256, %if.end.250
  %109 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp258 = bitcast %union.tree_node* %109 to %struct.tree_exp*
  %operands259 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp258, i32 0, i32 2
  %arrayidx260 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands259, i32 0, i64 0
  %110 = load %union.tree_node*, %union.tree_node** %arrayidx260, align 8
  store %union.tree_node* %110, %union.tree_node** %exp.addr, align 8
  br label %while.body

while.end:                                        ; preds = %if.then.245, %if.then.194, %if.then.97
  %111 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call261 = call i32 @host_integerp(%union.tree_node* %111, i32 0)
  %tobool262 = icmp ne i32 %call261, 0
  br i1 %tobool262, label %land.lhs.true.263, label %if.else.277

land.lhs.true.263:                                ; preds = %while.end
  %112 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 3), align 8
  %113 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call264 = call %union.tree_node* @convert(%union.tree_node* %112, %union.tree_node* %113)
  %114 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 19), align 8
  %call265 = call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call264, %union.tree_node* %114)
  store %union.tree_node* %call265, %union.tree_node** %tem, align 8
  %cmp266 = icmp ne %union.tree_node* null, %call265
  br i1 %cmp266, label %land.lhs.true.268, label %if.else.277

land.lhs.true.268:                                ; preds = %land.lhs.true.263
  %115 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %116 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8
  %call269 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %115, %union.tree_node* %116)
  store %union.tree_node* %call269, %union.tree_node** %tem, align 8
  %cmp270 = icmp ne %union.tree_node* null, %call269
  br i1 %cmp270, label %land.lhs.true.272, label %if.else.277

land.lhs.true.272:                                ; preds = %land.lhs.true.268
  %117 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %call273 = call i32 @host_integerp(%union.tree_node* %117, i32 0)
  %tobool274 = icmp ne i32 %call273, 0
  br i1 %tobool274, label %if.then.275, label %if.else.277

if.then.275:                                      ; preds = %land.lhs.true.272
  %118 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %call276 = call i64 @tree_low_cst(%union.tree_node* %118, i32 0)
  %119 = load i64*, i64** %pbitpos.addr, align 8
  store i64 %call276, i64* %119, align 8
  %120 = load %union.tree_node**, %union.tree_node*** %poffset.addr, align 8
  store %union.tree_node* null, %union.tree_node** %120, align 8
  br label %if.end.279

if.else.277:                                      ; preds = %land.lhs.true.272, %land.lhs.true.268, %land.lhs.true.263, %while.end
  %121 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8
  %call278 = call i64 @tree_low_cst(%union.tree_node* %121, i32 0)
  %122 = load i64*, i64** %pbitpos.addr, align 8
  store i64 %call278, i64* %122, align 8
  %123 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %124 = load %union.tree_node**, %union.tree_node*** %poffset.addr, align 8
  store %union.tree_node* %123, %union.tree_node** %124, align 8
  br label %if.end.279

if.end.279:                                       ; preds = %if.else.277, %if.then.275
  %125 = load i32, i32* %mode, align 4
  %126 = load i32*, i32** %pmode.addr, align 8
  store i32 %125, i32* %126, align 4
  %127 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  ret %union.tree_node* %127
}

declare %union.tree_node* @stabilize_reference(%union.tree_node*) #1

declare %struct.rtx_def* @offset_address(%struct.rtx_def*, %struct.rtx_def*, i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @highest_pow2_factor_for_type(%union.tree_node* %type, %union.tree_node* %exp) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %type_align = alloca i64, align 8
  %factor = alloca i64, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call = call i64 @highest_pow2_factor(%union.tree_node* %0)
  store i64 %call, i64* %factor, align 8
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 7
  %2 = load i32, i32* %align, align 4
  %div = udiv i32 %2, 8
  %conv = zext i32 %div to i64
  store i64 %conv, i64* %type_align, align 8
  %3 = load i64, i64* %factor, align 8
  %4 = load i64, i64* %type_align, align 8
  %cmp = icmp sgt i64 %3, %4
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load i64, i64* %factor, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load i64, i64* %type_align, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %6, %cond.false ]
  ret i64 %cond
}

declare %struct.rtx_def* @shallow_copy_rtx(%struct.rtx_def*) #1

declare void @set_mem_offset(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @can_address_p(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @store_field(%struct.rtx_def* %target, i64 %bitsize, i64 %bitpos, i32 %mode, %union.tree_node* %exp, i32 %value_mode, i32 %unsignedp, %union.tree_node* %type, i32 %alias_set) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %bitsize.addr = alloca i64, align 8
  %bitpos.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %value_mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %alias_set.addr = alloca i32, align 4
  %width_mask = alloca i64, align 8
  %object = alloca %struct.rtx_def*, align 8
  %blk_object = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %count = alloca %union.tree_node*, align 8
  %tmode = alloca i32, align 4
  %addr = alloca %struct.rtx_def*, align 8
  %to_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store i64 %bitsize, i64* %bitsize.addr, align 8
  store i64 %bitpos, i64* %bitpos.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store i32 %value_mode, i32* %value_mode.addr, align 4
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %alias_set, i32* %alias_set.addr, align 4
  store i64 0, i64* %width_mask, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %bitsize.addr, align 8
  %cmp1 = icmp eq i64 %2, 0
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %3, %struct.rtx_def* %4, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %if.end
  %5 = load i64, i64* %bitsize.addr, align 8
  %cmp3 = icmp sge i64 %5, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %if.else
  %6 = load i64, i64* %bitsize.addr, align 8
  %cmp4 = icmp slt i64 %6, 64
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %land.lhs.true
  %7 = load i64, i64* %bitsize.addr, align 8
  %shl = shl i64 1, %7
  %sub = sub nsw i64 %shl, 1
  store i64 %sub, i64* %width_mask, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %land.lhs.true, %if.else
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.6
  %8 = load i32, i32* %mode.addr, align 4
  %cmp8 = icmp eq i32 %8, 51
  br i1 %cmp8, label %land.lhs.true.9, label %if.end.54

land.lhs.true.9:                                  ; preds = %if.end.7
  %9 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load10 = load i32, i32* %10, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 61
  br i1 %cmp12, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load13 = load i32, i32* %12, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 63
  br i1 %cmp15, label %if.then.16, label %if.end.54

if.then.16:                                       ; preds = %lor.lhs.false, %land.lhs.true.9
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common17 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2
  %bf.load18 = load i32, i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load18, 12
  %bf.clear19 = and i32 %bf.lshr, 1
  %mul = mul nsw i32 %bf.clear19, 1
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common20 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2
  %bf.load21 = load i32, i32* %volatile_flag, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 11
  %bf.clear23 = and i32 %bf.lshr22, 1
  %mul24 = mul nsw i32 %bf.clear23, 2
  %or = or i32 %mul, %mul24
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type25 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 6
  %bf.load26 = load i32, i32* %restrict_flag, align 4
  %bf.lshr27 = lshr i32 %bf.load26, 21
  %bf.clear28 = and i32 %bf.lshr27, 1
  %mul29 = mul nsw i32 %bf.clear28, 4
  %or30 = or i32 %or, %mul29
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common31 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %code32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2
  %bf.load33 = load i32, i32* %code32, align 8
  %bf.clear34 = and i32 %bf.load33, 255
  %cmp35 = icmp eq i32 %bf.clear34, 20
  br i1 %cmp35, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.16
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common36 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %type37, align 8
  %tobool = icmp ne %union.tree_node* %19, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.16
  %20 = phi i1 [ false, %if.then.16 ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %20 to i32
  %mul38 = mul nsw i32 %land.ext, 8
  %or39 = or i32 %or30, %mul38
  %or40 = or i32 %or39, 1
  %call41 = call %union.tree_node* @build_qualified_type(%union.tree_node* %13, i32 %or40)
  %call42 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call41, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %call42, %struct.rtx_def** %object, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %object, align 8
  %call43 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %21, i32 51, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call43, %struct.rtx_def** %blk_object, align 8
  %22 = load i64, i64* %bitsize.addr, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load44 = load i32, i32* %24, align 8
  %bf.lshr45 = lshr i32 %bf.load44, 16
  %bf.clear46 = and i32 %bf.lshr45, 255
  %idxprom = sext i32 %bf.clear46 to i64
  %arrayidx = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %25 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %25 to i64
  %cmp47 = icmp ne i64 %22, %conv
  br i1 %cmp47, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %land.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %object, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call50 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %26, %struct.rtx_def* %27)
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.49, %land.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %blk_object, align 8
  %29 = load i64, i64* %bitsize.addr, align 8
  %30 = load i64, i64* %bitpos.addr, align 8
  %31 = load i32, i32* %mode.addr, align 4
  %32 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %34 = load i32, i32* %alias_set.addr, align 4
  %call52 = call %struct.rtx_def* @store_field(%struct.rtx_def* %28, i64 %29, i64 %30, i32 %31, %union.tree_node* %32, i32 0, i32 0, %union.tree_node* %33, i32 %34)
  %35 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %object, align 8
  %call53 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %35, %struct.rtx_def* %36)
  %37 = load %struct.rtx_def*, %struct.rtx_def** %blk_object, align 8
  store %struct.rtx_def* %37, %struct.rtx_def** %retval
  br label %return

if.end.54:                                        ; preds = %lor.lhs.false, %if.end.7
  %38 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load55 = load i32, i32* %39, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 65
  br i1 %cmp57, label %if.then.59, label %if.end.65

if.then.59:                                       ; preds = %if.end.54
  %40 = load i64, i64* %bitpos.addr, align 8
  %cmp60 = icmp ne i64 %40, 0
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.then.59
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5092, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.store_field, i32 0, i32 0)) #6
  unreachable

if.end.63:                                        ; preds = %if.then.59
  %41 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call64 = call %struct.rtx_def* @store_expr(%union.tree_node* %41, %struct.rtx_def* %42, i32 0)
  store %struct.rtx_def* %call64, %struct.rtx_def** %retval
  br label %return

if.end.65:                                        ; preds = %if.end.54
  %43 = load i32, i32* %mode.addr, align 4
  %cmp66 = icmp eq i32 %43, 0
  br i1 %cmp66, label %if.then.134, label %lor.lhs.false.68

lor.lhs.false.68:                                 ; preds = %if.end.65
  %44 = load i32, i32* %mode.addr, align 4
  %cmp69 = icmp ne i32 %44, 51
  br i1 %cmp69, label %land.lhs.true.71, label %lor.lhs.false.85

land.lhs.true.71:                                 ; preds = %lor.lhs.false.68
  %45 = load i32, i32* %mode.addr, align 4
  %idxprom72 = sext i32 %45 to i64
  %arrayidx73 = getelementptr inbounds [59 x i8], [59 x i8]* @direct_store, i32 0, i64 %idxprom72
  %46 = load i8, i8* %arrayidx73, align 1
  %tobool74 = icmp ne i8 %46, 0
  br i1 %tobool74, label %lor.lhs.false.85, label %land.lhs.true.75

land.lhs.true.75:                                 ; preds = %land.lhs.true.71
  %47 = load i32, i32* %mode.addr, align 4
  %idxprom76 = sext i32 %47 to i64
  %arrayidx77 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom76
  %48 = load i32, i32* %arrayidx77, align 4
  %cmp78 = icmp ne i32 %48, 5
  br i1 %cmp78, label %land.lhs.true.80, label %lor.lhs.false.85

land.lhs.true.80:                                 ; preds = %land.lhs.true.75
  %49 = load i32, i32* %mode.addr, align 4
  %idxprom81 = sext i32 %49 to i64
  %arrayidx82 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom81
  %50 = load i32, i32* %arrayidx82, align 4
  %cmp83 = icmp ne i32 %50, 6
  br i1 %cmp83, label %if.then.134, label %lor.lhs.false.85

lor.lhs.false.85:                                 ; preds = %land.lhs.true.80, %land.lhs.true.75, %land.lhs.true.71, %lor.lhs.false.68
  %51 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load86 = load i32, i32* %52, align 8
  %bf.clear87 = and i32 %bf.load86, 65535
  %cmp88 = icmp eq i32 %bf.clear87, 61
  br i1 %cmp88, label %if.then.134, label %lor.lhs.false.90

lor.lhs.false.90:                                 ; preds = %lor.lhs.false.85
  %53 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load91 = load i32, i32* %54, align 8
  %bf.clear92 = and i32 %bf.load91, 65535
  %cmp93 = icmp eq i32 %bf.clear92, 63
  br i1 %cmp93, label %if.then.134, label %lor.lhs.false.95

lor.lhs.false.95:                                 ; preds = %lor.lhs.false.90
  %55 = load i32, i32* %mode.addr, align 4
  %cmp96 = icmp ne i32 %55, 51
  br i1 %cmp96, label %land.lhs.true.98, label %lor.lhs.false.113

land.lhs.true.98:                                 ; preds = %lor.lhs.false.95
  br i1 false, label %land.lhs.true.99, label %lor.lhs.false.113

land.lhs.true.99:                                 ; preds = %land.lhs.true.98
  %56 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx100 to %struct.mem_attrs**
  %57 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp101 = icmp ne %struct.mem_attrs* %57, null
  br i1 %cmp101, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.99
  %58 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i32 0, i64 1
  %rtmem105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.mem_attrs**
  %59 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem105, align 8
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %59, i32 0, i32 4
  %60 = load i32, i32* %align, align 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.99
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %60, %cond.true ], [ 8, %cond.false ]
  %61 = load i32, i32* %mode.addr, align 4
  %call106 = call i32 @get_mode_alignment(i32 %61)
  %cmp107 = icmp ult i32 %cond, %call106
  br i1 %cmp107, label %if.then.134, label %lor.lhs.false.109

lor.lhs.false.109:                                ; preds = %cond.end
  %62 = load i64, i64* %bitpos.addr, align 8
  %63 = load i32, i32* %mode.addr, align 4
  %call110 = call i32 @get_mode_alignment(i32 %63)
  %conv111 = zext i32 %call110 to i64
  %rem = srem i64 %62, %conv111
  %tobool112 = icmp ne i64 %rem, 0
  br i1 %tobool112, label %if.then.134, label %lor.lhs.false.113

lor.lhs.false.113:                                ; preds = %lor.lhs.false.109, %land.lhs.true.98, %lor.lhs.false.95
  %64 = load i64, i64* %bitsize.addr, align 8
  %cmp114 = icmp sge i64 %64, 0
  br i1 %cmp114, label %land.lhs.true.116, label %if.else.242

land.lhs.true.116:                                ; preds = %lor.lhs.false.113
  %65 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common117 = bitcast %union.tree_node* %65 to %struct.tree_common*
  %type118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 1
  %66 = load %union.tree_node*, %union.tree_node** %type118, align 8
  %type119 = bitcast %union.tree_node* %66 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type119, i32 0, i32 2
  %67 = load %union.tree_node*, %union.tree_node** %size, align 8
  %common120 = bitcast %union.tree_node* %67 to %struct.tree_common*
  %code121 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common120, i32 0, i32 2
  %bf.load122 = load i32, i32* %code121, align 8
  %bf.clear123 = and i32 %bf.load122, 255
  %cmp124 = icmp eq i32 %bf.clear123, 25
  br i1 %cmp124, label %land.lhs.true.126, label %if.else.242

land.lhs.true.126:                                ; preds = %land.lhs.true.116
  %68 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common127 = bitcast %union.tree_node* %68 to %struct.tree_common*
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 1
  %69 = load %union.tree_node*, %union.tree_node** %type128, align 8
  %type129 = bitcast %union.tree_node* %69 to %struct.tree_type*
  %size130 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type129, i32 0, i32 2
  %70 = load %union.tree_node*, %union.tree_node** %size130, align 8
  %71 = load i64, i64* %bitsize.addr, align 8
  %call131 = call i32 @compare_tree_int(%union.tree_node* %70, i64 %71)
  %cmp132 = icmp ne i32 %call131, 0
  br i1 %cmp132, label %if.then.134, label %if.else.242

if.then.134:                                      ; preds = %land.lhs.true.126, %lor.lhs.false.109, %cond.end, %lor.lhs.false.90, %lor.lhs.false.85, %land.lhs.true.80, %if.end.65
  %72 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call135 = call %struct.rtx_def* @expand_expr(%union.tree_node* %72, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call135, %struct.rtx_def** %temp, align 8
  %73 = load i32, i32* %mode.addr, align 4
  %cmp136 = icmp ne i32 %73, 0
  br i1 %cmp136, label %land.lhs.true.138, label %if.end.160

land.lhs.true.138:                                ; preds = %if.then.134
  %74 = load i32, i32* %mode.addr, align 4
  %cmp139 = icmp ne i32 %74, 51
  br i1 %cmp139, label %land.lhs.true.141, label %if.end.160

land.lhs.true.141:                                ; preds = %land.lhs.true.138
  %75 = load i32, i32* %mode.addr, align 4
  %76 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common142 = bitcast %union.tree_node* %76 to %struct.tree_common*
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 1
  %77 = load %union.tree_node*, %union.tree_node** %type143, align 8
  %type144 = bitcast %union.tree_node* %77 to %struct.tree_type*
  %mode145 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type144, i32 0, i32 6
  %bf.load146 = load i32, i32* %mode145, align 4
  %bf.lshr147 = lshr i32 %bf.load146, 9
  %bf.clear148 = and i32 %bf.lshr147, 127
  %cmp149 = icmp ne i32 %75, %bf.clear148
  br i1 %cmp149, label %if.then.151, label %if.end.160

if.then.151:                                      ; preds = %land.lhs.true.141
  %78 = load i32, i32* %mode.addr, align 4
  %79 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common152 = bitcast %union.tree_node* %79 to %struct.tree_common*
  %type153 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common152, i32 0, i32 1
  %80 = load %union.tree_node*, %union.tree_node** %type153, align 8
  %type154 = bitcast %union.tree_node* %80 to %struct.tree_type*
  %mode155 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type154, i32 0, i32 6
  %bf.load156 = load i32, i32* %mode155, align 4
  %bf.lshr157 = lshr i32 %bf.load156, 9
  %bf.clear158 = and i32 %bf.lshr157, 127
  %81 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call159 = call %struct.rtx_def* @convert_modes(i32 %78, i32 %bf.clear158, %struct.rtx_def* %81, i32 1)
  store %struct.rtx_def* %call159, %struct.rtx_def** %temp, align 8
  br label %if.end.160

if.end.160:                                       ; preds = %if.then.151, %land.lhs.true.141, %land.lhs.true.138, %if.then.134
  %82 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %83 = bitcast %struct.rtx_def* %82 to i32*
  %bf.load161 = load i32, i32* %83, align 8
  %bf.lshr162 = lshr i32 %bf.load161, 16
  %bf.clear163 = and i32 %bf.lshr162, 255
  %cmp164 = icmp eq i32 %bf.clear163, 51
  br i1 %cmp164, label %land.lhs.true.166, label %if.end.199

land.lhs.true.166:                                ; preds = %if.end.160
  %84 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %85 = bitcast %struct.rtx_def* %84 to i32*
  %bf.load167 = load i32, i32* %85, align 8
  %bf.lshr168 = lshr i32 %bf.load167, 16
  %bf.clear169 = and i32 %bf.lshr168, 255
  %cmp170 = icmp eq i32 %bf.clear169, 51
  br i1 %cmp170, label %if.then.172, label %if.end.199

if.then.172:                                      ; preds = %land.lhs.true.166
  %86 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %87 = bitcast %struct.rtx_def* %86 to i32*
  %bf.load173 = load i32, i32* %87, align 8
  %bf.clear174 = and i32 %bf.load173, 65535
  %cmp175 = icmp ne i32 %bf.clear174, 66
  br i1 %cmp175, label %if.then.186, label %lor.lhs.false.177

lor.lhs.false.177:                                ; preds = %if.then.172
  %88 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load178 = load i32, i32* %89, align 8
  %bf.clear179 = and i32 %bf.load178, 65535
  %cmp180 = icmp ne i32 %bf.clear179, 66
  br i1 %cmp180, label %if.then.186, label %lor.lhs.false.182

lor.lhs.false.182:                                ; preds = %lor.lhs.false.177
  %90 = load i64, i64* %bitpos.addr, align 8
  %rem183 = srem i64 %90, 8
  %cmp184 = icmp ne i64 %rem183, 0
  br i1 %cmp184, label %if.then.186, label %if.end.187

if.then.186:                                      ; preds = %lor.lhs.false.182, %lor.lhs.false.177, %if.then.172
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5145, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.store_field, i32 0, i32 0)) #6
  unreachable

if.end.187:                                       ; preds = %lor.lhs.false.182
  %91 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %92 = load i64, i64* %bitpos.addr, align 8
  %div = sdiv i64 %92, 8
  %call188 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %91, i32 0, i64 %div, i32 1, i32 1)
  store %struct.rtx_def* %call188, %struct.rtx_def** %target.addr, align 8
  %93 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %94 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %95 = load i64, i64* %bitsize.addr, align 8
  %add = add nsw i64 %95, 8
  %sub189 = sub nsw i64 %add, 1
  %div190 = sdiv i64 %sub189, 8
  %call191 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %div190)
  %call192 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %93, %struct.rtx_def* %94, %struct.rtx_def* %call191)
  %96 = load i32, i32* %value_mode.addr, align 4
  %cmp193 = icmp eq i32 %96, 0
  br i1 %cmp193, label %cond.true.195, label %cond.false.196

cond.true.195:                                    ; preds = %if.end.187
  %97 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.197

cond.false.196:                                   ; preds = %if.end.187
  %98 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  br label %cond.end.197

cond.end.197:                                     ; preds = %cond.false.196, %cond.true.195
  %cond198 = phi %struct.rtx_def* [ %97, %cond.true.195 ], [ %98, %cond.false.196 ]
  store %struct.rtx_def* %cond198, %struct.rtx_def** %retval
  br label %return

if.end.199:                                       ; preds = %land.lhs.true.166, %if.end.160
  %99 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %100 = load i64, i64* %bitsize.addr, align 8
  %101 = load i64, i64* %bitpos.addr, align 8
  %102 = load i32, i32* %mode.addr, align 4
  %103 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %104 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call200 = call i64 @int_size_in_bytes(%union.tree_node* %104)
  %call201 = call %struct.rtx_def* @store_bit_field(%struct.rtx_def* %99, i64 %100, i64 %101, i32 %102, %struct.rtx_def* %103, i64 %call200)
  %105 = load i32, i32* %value_mode.addr, align 4
  %cmp202 = icmp ne i32 %105, 0
  br i1 %cmp202, label %if.then.204, label %if.end.241

if.then.204:                                      ; preds = %if.end.199
  %106 = load i64, i64* %width_mask, align 8
  %cmp205 = icmp ne i64 %106, 0
  br i1 %cmp205, label %land.lhs.true.207, label %if.end.238

land.lhs.true.207:                                ; preds = %if.then.204
  %107 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %108 = bitcast %struct.rtx_def* %107 to i32*
  %bf.load208 = load i32, i32* %108, align 8
  %bf.clear209 = and i32 %bf.load208, 65535
  %cmp210 = icmp eq i32 %bf.clear209, 66
  br i1 %cmp210, label %land.lhs.true.212, label %if.then.217

land.lhs.true.212:                                ; preds = %land.lhs.true.207
  %109 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %110 = bitcast %struct.rtx_def* %109 to i32*
  %bf.load213 = load i32, i32* %110, align 8
  %bf.lshr214 = lshr i32 %bf.load213, 27
  %bf.clear215 = and i32 %bf.lshr214, 1
  %tobool216 = icmp ne i32 %bf.clear215, 0
  br i1 %tobool216, label %if.end.238, label %if.then.217

if.then.217:                                      ; preds = %land.lhs.true.212, %land.lhs.true.207
  %111 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %112 = bitcast %struct.rtx_def* %111 to i32*
  %bf.load218 = load i32, i32* %112, align 8
  %bf.lshr219 = lshr i32 %bf.load218, 16
  %bf.clear220 = and i32 %bf.lshr219, 255
  store i32 %bf.clear220, i32* %tmode, align 4
  %113 = load i32, i32* %tmode, align 4
  %cmp221 = icmp eq i32 %113, 0
  br i1 %cmp221, label %if.then.223, label %if.end.224

if.then.223:                                      ; preds = %if.then.217
  %114 = load i32, i32* %value_mode.addr, align 4
  store i32 %114, i32* %tmode, align 4
  br label %if.end.224

if.end.224:                                       ; preds = %if.then.223, %if.then.217
  %115 = load i32, i32* %unsignedp.addr, align 4
  %tobool225 = icmp ne i32 %115, 0
  br i1 %tobool225, label %if.then.226, label %if.end.230

if.then.226:                                      ; preds = %if.end.224
  %116 = load i32, i32* %tmode, align 4
  %117 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %118 = load i64, i64* %width_mask, align 8
  %119 = load i32, i32* %tmode, align 4
  %call227 = call i64 @trunc_int_for_mode(i64 %118, i32 %119)
  %call228 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call227)
  %call229 = call %struct.rtx_def* @expand_and(i32 %116, %struct.rtx_def* %117, %struct.rtx_def* %call228, %struct.rtx_def* null)
  store %struct.rtx_def* %call229, %struct.rtx_def** %retval
  br label %return

if.end.230:                                       ; preds = %if.end.224
  %120 = load i32, i32* %tmode, align 4
  %idxprom231 = sext i32 %120 to i64
  %arrayidx232 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom231
  %121 = load i16, i16* %arrayidx232, align 2
  %conv233 = zext i16 %121 to i64
  %122 = load i64, i64* %bitsize.addr, align 8
  %sub234 = sub nsw i64 %conv233, %122
  %call235 = call %union.tree_node* @build_int_2_wide(i64 %sub234, i64 0)
  store %union.tree_node* %call235, %union.tree_node** %count, align 8
  %123 = load i32, i32* %tmode, align 4
  %124 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %125 = load %union.tree_node*, %union.tree_node** %count, align 8
  %call236 = call %struct.rtx_def* @expand_shift(i32 82, i32 %123, %struct.rtx_def* %124, %union.tree_node* %125, %struct.rtx_def* null, i32 0)
  store %struct.rtx_def* %call236, %struct.rtx_def** %temp, align 8
  %126 = load i32, i32* %tmode, align 4
  %127 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %128 = load %union.tree_node*, %union.tree_node** %count, align 8
  %call237 = call %struct.rtx_def* @expand_shift(i32 83, i32 %126, %struct.rtx_def* %127, %union.tree_node* %128, %struct.rtx_def* null, i32 0)
  store %struct.rtx_def* %call237, %struct.rtx_def** %retval
  br label %return

if.end.238:                                       ; preds = %land.lhs.true.212, %if.then.204
  %129 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %130 = load i64, i64* %bitsize.addr, align 8
  %131 = load i64, i64* %bitpos.addr, align 8
  %132 = load i32, i32* %unsignedp.addr, align 4
  %133 = load i32, i32* %value_mode.addr, align 4
  %134 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call239 = call i64 @int_size_in_bytes(%union.tree_node* %134)
  %call240 = call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %129, i64 %130, i64 %131, i32 %132, %struct.rtx_def* null, i32 %133, i32 0, i64 %call239)
  store %struct.rtx_def* %call240, %struct.rtx_def** %retval
  br label %return

if.end.241:                                       ; preds = %if.end.199
  %135 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %135, %struct.rtx_def** %retval
  br label %return

if.else.242:                                      ; preds = %land.lhs.true.126, %land.lhs.true.116, %lor.lhs.false.113
  %136 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld243 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %arrayidx244 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld243, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx244 to %struct.rtx_def**
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %137, %struct.rtx_def** %addr, align 8
  %138 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %138, %struct.rtx_def** %to_rtx, align 8
  %139 = load i32, i32* %value_mode.addr, align 4
  %cmp245 = icmp ne i32 %139, 0
  br i1 %cmp245, label %land.lhs.true.247, label %if.end.305

land.lhs.true.247:                                ; preds = %if.else.242
  %140 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %141 = bitcast %struct.rtx_def* %140 to i32*
  %bf.load248 = load i32, i32* %141, align 8
  %bf.clear249 = and i32 %bf.load248, 65535
  %cmp250 = icmp ne i32 %bf.clear249, 61
  br i1 %cmp250, label %land.lhs.true.252, label %if.end.305

land.lhs.true.252:                                ; preds = %land.lhs.true.247
  %142 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %143 = bitcast %struct.rtx_def* %142 to i32*
  %bf.load253 = load i32, i32* %143, align 8
  %bf.clear254 = and i32 %bf.load253, 65535
  %cmp255 = icmp eq i32 %bf.clear254, 67
  br i1 %cmp255, label %if.end.305, label %lor.lhs.false.257

lor.lhs.false.257:                                ; preds = %land.lhs.true.252
  %144 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %145 = bitcast %struct.rtx_def* %144 to i32*
  %bf.load258 = load i32, i32* %145, align 8
  %bf.clear259 = and i32 %bf.load258, 65535
  %cmp260 = icmp eq i32 %bf.clear259, 68
  br i1 %cmp260, label %if.end.305, label %lor.lhs.false.262

lor.lhs.false.262:                                ; preds = %lor.lhs.false.257
  %146 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %147 = bitcast %struct.rtx_def* %146 to i32*
  %bf.load263 = load i32, i32* %147, align 8
  %bf.clear264 = and i32 %bf.load263, 65535
  %cmp265 = icmp eq i32 %bf.clear264, 54
  br i1 %cmp265, label %if.end.305, label %lor.lhs.false.267

lor.lhs.false.267:                                ; preds = %lor.lhs.false.262
  %148 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %149 = bitcast %struct.rtx_def* %148 to i32*
  %bf.load268 = load i32, i32* %149, align 8
  %bf.clear269 = and i32 %bf.load268, 65535
  %cmp270 = icmp eq i32 %bf.clear269, 58
  br i1 %cmp270, label %if.end.305, label %lor.lhs.false.272

lor.lhs.false.272:                                ; preds = %lor.lhs.false.267
  %150 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %151 = bitcast %struct.rtx_def* %150 to i32*
  %bf.load273 = load i32, i32* %151, align 8
  %bf.clear274 = and i32 %bf.load273, 65535
  %cmp275 = icmp eq i32 %bf.clear274, 55
  br i1 %cmp275, label %if.end.305, label %land.lhs.true.277

land.lhs.true.277:                                ; preds = %lor.lhs.false.272
  %152 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %153 = bitcast %struct.rtx_def* %152 to i32*
  %bf.load278 = load i32, i32* %153, align 8
  %bf.clear279 = and i32 %bf.load278, 65535
  %cmp280 = icmp eq i32 %bf.clear279, 75
  br i1 %cmp280, label %land.lhs.true.282, label %if.then.302

land.lhs.true.282:                                ; preds = %land.lhs.true.277
  %154 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld283 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx284 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld283, i32 0, i64 1
  %rtx285 = bitcast %union.rtunion_def* %arrayidx284 to %struct.rtx_def**
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtx285, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %bf.load286 = load i32, i32* %156, align 8
  %bf.clear287 = and i32 %bf.load286, 65535
  %cmp288 = icmp eq i32 %bf.clear287, 54
  br i1 %cmp288, label %land.lhs.true.290, label %if.then.302

land.lhs.true.290:                                ; preds = %land.lhs.true.282
  %157 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld291 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %157, i32 0, i32 1
  %arrayidx292 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld291, i32 0, i64 0
  %rtx293 = bitcast %union.rtunion_def* %arrayidx292 to %struct.rtx_def**
  %158 = load %struct.rtx_def*, %struct.rtx_def** %rtx293, align 8
  %159 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %cmp294 = icmp eq %struct.rtx_def* %158, %159
  br i1 %cmp294, label %if.end.305, label %lor.lhs.false.296

lor.lhs.false.296:                                ; preds = %land.lhs.true.290
  %160 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld297 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1
  %arrayidx298 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld297, i32 0, i64 0
  %rtx299 = bitcast %union.rtunion_def* %arrayidx298 to %struct.rtx_def**
  %161 = load %struct.rtx_def*, %struct.rtx_def** %rtx299, align 8
  %162 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %cmp300 = icmp eq %struct.rtx_def* %161, %162
  br i1 %cmp300, label %if.end.305, label %if.then.302

if.then.302:                                      ; preds = %lor.lhs.false.296, %land.lhs.true.282, %land.lhs.true.277
  %163 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %164 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call303 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %164)
  %call304 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %163, %struct.rtx_def* %call303)
  store %struct.rtx_def* %call304, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.305

if.end.305:                                       ; preds = %if.then.302, %lor.lhs.false.296, %land.lhs.true.290, %lor.lhs.false.272, %lor.lhs.false.267, %lor.lhs.false.262, %lor.lhs.false.257, %land.lhs.true.252, %land.lhs.true.247, %if.else.242
  %165 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %166 = load i32, i32* %mode.addr, align 4
  %167 = load i64, i64* %bitpos.addr, align 8
  %div306 = sdiv i64 %167, 8
  %call307 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %165, i32 %166, i64 %div306, i32 1, i32 1)
  store %struct.rtx_def* %call307, %struct.rtx_def** %to_rtx, align 8
  %168 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %169 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp308 = icmp eq %struct.rtx_def* %168, %169
  br i1 %cmp308, label %if.then.310, label %if.end.312

if.then.310:                                      ; preds = %if.end.305
  %170 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %call311 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %170)
  store %struct.rtx_def* %call311, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.312

if.end.312:                                       ; preds = %if.then.310, %if.end.305
  br label %do.body

do.body:                                          ; preds = %if.end.312
  %171 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %172 = bitcast %struct.rtx_def* %171 to i32*
  %bf.load313 = load i32, i32* %172, align 8
  %bf.clear314 = and i32 %bf.load313, -268435457
  %bf.set = or i32 %bf.clear314, 268435456
  store i32 %bf.set, i32* %172, align 8
  %173 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %174 = bitcast %struct.rtx_def* %173 to i32*
  %bf.load315 = load i32, i32* %174, align 8
  %bf.clear316 = and i32 %bf.load315, 2147483647
  store i32 %bf.clear316, i32* %174, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %175 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load317 = load i32, i32* %176, align 8
  %bf.lshr318 = lshr i32 %bf.load317, 24
  %bf.clear319 = and i32 %bf.lshr318, 1
  %tobool320 = icmp ne i32 %bf.clear319, 0
  br i1 %tobool320, label %if.end.338, label %land.lhs.true.321

land.lhs.true.321:                                ; preds = %do.end
  %177 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld322 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1
  %arrayidx323 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld322, i32 0, i64 1
  %rtmem324 = bitcast %union.rtunion_def* %arrayidx323 to %struct.mem_attrs**
  %178 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem324, align 8
  %cmp325 = icmp eq %struct.mem_attrs* %178, null
  br i1 %cmp325, label %cond.true.327, label %cond.false.328

cond.true.327:                                    ; preds = %land.lhs.true.321
  br label %cond.end.332

cond.false.328:                                   ; preds = %land.lhs.true.321
  %179 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %fld329 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1
  %arrayidx330 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld329, i32 0, i64 1
  %rtmem331 = bitcast %union.rtunion_def* %arrayidx330 to %struct.mem_attrs**
  %180 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem331, align 8
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %180, i32 0, i32 0
  %181 = load i64, i64* %alias, align 8
  br label %cond.end.332

cond.end.332:                                     ; preds = %cond.false.328, %cond.true.327
  %cond333 = phi i64 [ 0, %cond.true.327 ], [ %181, %cond.false.328 ]
  %cmp334 = icmp ne i64 %cond333, 0
  br i1 %cmp334, label %if.then.336, label %if.end.338

if.then.336:                                      ; preds = %cond.end.332
  %182 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %183 = load i32, i32* %alias_set.addr, align 4
  %conv337 = sext i32 %183 to i64
  call void @set_mem_alias_set(%struct.rtx_def* %182, i64 %conv337)
  br label %if.end.338

if.end.338:                                       ; preds = %if.then.336, %cond.end.332, %do.end
  %184 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %185 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %186 = load i32, i32* %value_mode.addr, align 4
  %cmp339 = icmp ne i32 %186, 0
  %conv340 = zext i1 %cmp339 to i32
  %call341 = call %struct.rtx_def* @store_expr(%union.tree_node* %184, %struct.rtx_def* %185, i32 %conv340)
  store %struct.rtx_def* %call341, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.338, %if.end.241, %if.end.238, %if.end.230, %if.then.226, %cond.end.197, %if.end.63, %if.end.51, %if.then.2, %if.then
  %187 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %187
}

declare i64 @get_alias_set(%union.tree_node*) #1

declare void @free_temp_slots() #1

declare void @pop_temp_slots() #1

declare i32 @aggregate_value_p(%union.tree_node*) #1

declare %struct.rtx_def* @expr_size(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @store_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %want_value) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %want_value.addr = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %dont_return_target = alloca i32, align 4
  %dont_store_target = alloca i32, align 4
  %lab1 = alloca %struct.rtx_def*, align 8
  %lab2 = alloca %struct.rtx_def*, align 8
  %inner_target = alloca %struct.rtx_def*, align 8
  %unsignedp = alloca i32, align 4
  %size = alloca %struct.rtx_def*, align 8
  %copy_size = alloca %union.tree_node*, align 8
  %copy_size_rtx = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store i32 %want_value, i32* %want_value.addr, align 4
  store i32 0, i32* %dont_return_target, align 4
  store i32 0, i32* %dont_store_target, align 4
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 47
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %1 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %2, %struct.rtx_def* %3, i32 0, i32 0)
  call void @emit_queue()
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2 = bitcast %union.tree_node* %4 to %struct.tree_exp*
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 2
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i32 0, i64 1
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %7 = load i32, i32* %want_value.addr, align 4
  %call5 = call %struct.rtx_def* @store_expr(%union.tree_node* %5, %struct.rtx_def* %6, i32 %7)
  store %struct.rtx_def* %call5, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common6 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2
  %bf.load8 = load i32, i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 51
  br i1 %cmp10, label %land.lhs.true, label %if.else.36

land.lhs.true:                                    ; preds = %if.else
  %9 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load11 = load i32, i32* %10, align 8
  %bf.lshr = lshr i32 %bf.load11, 16
  %bf.clear12 = and i32 %bf.lshr, 255
  %cmp13 = icmp eq i32 %bf.clear12, 51
  br i1 %cmp13, label %if.then.14, label %if.else.36

if.then.14:                                       ; preds = %land.lhs.true
  %call15 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call15, %struct.rtx_def** %lab1, align 8
  %call16 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call16, %struct.rtx_def** %lab2, align 8
  call void @emit_queue()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call17 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %11, i32 1)
  store %struct.rtx_def* %call17, %struct.rtx_def** %target.addr, align 8
  call void @do_pending_stack_adjust()
  %12 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 2
  %13 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status, %struct.expr_status* %13, i32 0, i32 1
  %14 = load i32, i32* %x_inhibit_defer_pop, align 4
  %add = add nsw i32 %14, 1
  store i32 %add, i32* %x_inhibit_defer_pop, align 4
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp18 = bitcast %union.tree_node* %15 to %struct.tree_exp*
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 2
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i32 0, i64 0
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %lab1, align 8
  call void @jumpifnot(%union.tree_node* %16, %struct.rtx_def* %17)
  call void @start_cleanup_deferral()
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp21 = bitcast %union.tree_node* %18 to %struct.tree_exp*
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 2
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i32 0, i64 1
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call24 = call %struct.rtx_def* @store_expr(%union.tree_node* %19, %struct.rtx_def* %20, i32 0)
  call void @end_cleanup_deferral()
  call void @emit_queue()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %lab2, align 8
  %call25 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %21)
  %call26 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call25)
  %call27 = call %struct.rtx_def* @emit_barrier()
  %22 = load %struct.rtx_def*, %struct.rtx_def** %lab1, align 8
  %call28 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %22)
  call void @start_cleanup_deferral()
  %23 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp29 = bitcast %union.tree_node* %23 to %struct.tree_exp*
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 2
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i32 0, i64 2
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call32 = call %struct.rtx_def* @store_expr(%union.tree_node* %24, %struct.rtx_def* %25, i32 0)
  call void @end_cleanup_deferral()
  call void @emit_queue()
  %26 = load %struct.rtx_def*, %struct.rtx_def** %lab2, align 8
  %call33 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %26)
  %27 = load %struct.function*, %struct.function** @cfun, align 8
  %expr34 = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 2
  %28 = load %struct.expr_status*, %struct.expr_status** %expr34, align 8
  %x_inhibit_defer_pop35 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %28, i32 0, i32 1
  %29 = load i32, i32* %x_inhibit_defer_pop35, align 4
  %sub = sub nsw i32 %29, 1
  store i32 %sub, i32* %x_inhibit_defer_pop35, align 4
  %30 = load i32, i32* %want_value.addr, align 4
  %tobool = icmp ne i32 %30, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.14
  %31 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %31, %cond.true ], [ null, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %retval
  br label %return

if.else.36:                                       ; preds = %land.lhs.true, %if.else
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call37 = call i32 @queued_subexp_p(%struct.rtx_def* %32)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then.39, label %if.else.71

if.then.39:                                       ; preds = %if.else.36
  %33 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load40 = load i32, i32* %34, align 8
  %bf.lshr41 = lshr i32 %bf.load40, 16
  %bf.clear42 = and i32 %bf.lshr41, 255
  %cmp43 = icmp ne i32 %bf.clear42, 51
  br i1 %cmp43, label %land.lhs.true.44, label %if.else.58

land.lhs.true.44:                                 ; preds = %if.then.39
  %35 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load45 = load i32, i32* %36, align 8
  %bf.lshr46 = lshr i32 %bf.load45, 16
  %bf.clear47 = and i32 %bf.lshr46, 255
  %cmp48 = icmp ne i32 %bf.clear47, 0
  br i1 %cmp48, label %if.then.49, label %if.else.58

if.then.49:                                       ; preds = %land.lhs.true.44
  %37 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load50 = load i32, i32* %38, align 8
  %bf.lshr51 = lshr i32 %bf.load50, 16
  %bf.clear52 = and i32 %bf.lshr51, 255
  %call53 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear52)
  store %struct.rtx_def* %call53, %struct.rtx_def** %temp, align 8
  %39 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load54 = load i32, i32* %42, align 8
  %bf.lshr55 = lshr i32 %bf.load54, 16
  %bf.clear56 = and i32 %bf.lshr55, 255
  %call57 = call %struct.rtx_def* @expand_expr(%union.tree_node* %39, %struct.rtx_def* %40, i32 %bf.clear56, i32 0)
  store %struct.rtx_def* %call57, %struct.rtx_def** %temp, align 8
  br label %if.end

if.else.58:                                       ; preds = %land.lhs.true.44, %if.then.39
  %43 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load59 = load i32, i32* %45, align 8
  %bf.lshr60 = lshr i32 %bf.load59, 16
  %bf.clear61 = and i32 %bf.lshr60, 255
  %call62 = call %struct.rtx_def* @expand_expr(%union.tree_node* %43, %struct.rtx_def* null, i32 %bf.clear61, i32 0)
  store %struct.rtx_def* %call62, %struct.rtx_def** %temp, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.58, %if.then.49
  %46 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load63 = load i32, i32* %47, align 8
  %bf.lshr64 = lshr i32 %bf.load63, 27
  %bf.clear65 = and i32 %bf.lshr64, 1
  %tobool66 = icmp ne i32 %bf.clear65, 0
  br i1 %tobool66, label %if.end.70, label %land.lhs.true.67

land.lhs.true.67:                                 ; preds = %if.end
  %48 = load i32, i32* %want_value.addr, align 4
  %tobool68 = icmp ne i32 %48, 0
  br i1 %tobool68, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %land.lhs.true.67
  store i32 1, i32* %dont_return_target, align 4
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.69, %land.lhs.true.67, %if.end
  br label %if.end.401

if.else.71:                                       ; preds = %if.else.36
  %49 = load i32, i32* %want_value.addr, align 4
  %tobool72 = icmp ne i32 %49, 0
  br i1 %tobool72, label %land.lhs.true.73, label %if.else.115

land.lhs.true.73:                                 ; preds = %if.else.71
  %50 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load74 = load i32, i32* %51, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 66
  br i1 %cmp76, label %land.lhs.true.77, label %if.else.115

land.lhs.true.77:                                 ; preds = %land.lhs.true.73
  %52 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load78 = load i32, i32* %53, align 8
  %bf.lshr79 = lshr i32 %bf.load78, 27
  %bf.clear80 = and i32 %bf.lshr79, 1
  %tobool81 = icmp ne i32 %bf.clear80, 0
  br i1 %tobool81, label %if.else.115, label %land.lhs.true.82

land.lhs.true.82:                                 ; preds = %land.lhs.true.77
  %54 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %55 = bitcast %struct.rtx_def* %54 to i32*
  %bf.load83 = load i32, i32* %55, align 8
  %bf.lshr84 = lshr i32 %bf.load83, 16
  %bf.clear85 = and i32 %bf.lshr84, 255
  %cmp86 = icmp ne i32 %bf.clear85, 51
  br i1 %cmp86, label %if.then.87, label %if.else.115

if.then.87:                                       ; preds = %land.lhs.true.82
  %56 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load88 = load i32, i32* %59, align 8
  %bf.lshr89 = lshr i32 %bf.load88, 16
  %bf.clear90 = and i32 %bf.lshr89, 255
  %call91 = call %struct.rtx_def* @expand_expr(%union.tree_node* %56, %struct.rtx_def* %57, i32 %bf.clear90, i32 0)
  store %struct.rtx_def* %call91, %struct.rtx_def** %temp, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load92 = load i32, i32* %61, align 8
  %bf.lshr93 = lshr i32 %bf.load92, 16
  %bf.clear94 = and i32 %bf.lshr93, 255
  %cmp95 = icmp ne i32 %bf.clear94, 51
  br i1 %cmp95, label %land.lhs.true.96, label %if.end.114

land.lhs.true.96:                                 ; preds = %if.then.87
  %62 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load97 = load i32, i32* %63, align 8
  %bf.lshr98 = lshr i32 %bf.load97, 16
  %bf.clear99 = and i32 %bf.lshr98, 255
  %cmp100 = icmp ne i32 %bf.clear99, 0
  br i1 %cmp100, label %if.then.101, label %if.end.114

if.then.101:                                      ; preds = %land.lhs.true.96
  %64 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp102 = icmp eq %struct.rtx_def* %64, %65
  br i1 %cmp102, label %if.then.111, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.101
  %66 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call103 = call i32 @rtx_equal_p(%struct.rtx_def* %66, %struct.rtx_def* %67)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %land.lhs.true.105, label %if.end.112

land.lhs.true.105:                                ; preds = %lor.lhs.false
  %68 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call106 = call i32 @side_effects_p(%struct.rtx_def* %68)
  %tobool107 = icmp ne i32 %call106, 0
  br i1 %tobool107, label %if.end.112, label %land.lhs.true.108

land.lhs.true.108:                                ; preds = %land.lhs.true.105
  %69 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call109 = call i32 @side_effects_p(%struct.rtx_def* %69)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end.112, label %if.then.111

if.then.111:                                      ; preds = %land.lhs.true.108, %if.then.101
  store i32 1, i32* %dont_store_target, align 4
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.111, %land.lhs.true.108, %land.lhs.true.105, %lor.lhs.false
  %70 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call113 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %70)
  store %struct.rtx_def* %call113, %struct.rtx_def** %temp, align 8
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.112, %land.lhs.true.96, %if.then.87
  store i32 1, i32* %dont_return_target, align 4
  br label %if.end.400

if.else.115:                                      ; preds = %land.lhs.true.82, %land.lhs.true.77, %land.lhs.true.73, %if.else.71
  %71 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %72 = bitcast %struct.rtx_def* %71 to i32*
  %bf.load116 = load i32, i32* %72, align 8
  %bf.clear117 = and i32 %bf.load116, 65535
  %cmp118 = icmp eq i32 %bf.clear117, 63
  br i1 %cmp118, label %land.lhs.true.119, label %if.else.337

land.lhs.true.119:                                ; preds = %if.else.115
  %73 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load120 = load i32, i32* %74, align 8
  %bf.lshr121 = lshr i32 %bf.load120, 28
  %bf.clear122 = and i32 %bf.lshr121, 1
  %tobool123 = icmp ne i32 %bf.clear122, 0
  br i1 %tobool123, label %if.then.124, label %if.else.337

if.then.124:                                      ; preds = %land.lhs.true.119
  store %struct.rtx_def* null, %struct.rtx_def** %inner_target, align 8
  %75 = load i32, i32* %want_value.addr, align 4
  %tobool125 = icmp ne i32 %75, 0
  br i1 %tobool125, label %if.end.195, label %land.lhs.true.126

land.lhs.true.126:                                ; preds = %if.then.124
  %76 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common127 = bitcast %union.tree_node* %76 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 1
  %77 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common128 = bitcast %union.tree_node* %77 to %struct.tree_common*
  %code129 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common128, i32 0, i32 2
  %bf.load130 = load i32, i32* %code129, align 8
  %bf.clear131 = and i32 %bf.load130, 255
  %cmp132 = icmp eq i32 %bf.clear131, 6
  br i1 %cmp132, label %land.lhs.true.157, label %lor.lhs.false.133

lor.lhs.false.133:                                ; preds = %land.lhs.true.126
  %78 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common134 = bitcast %union.tree_node* %78 to %struct.tree_common*
  %type135 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 1
  %79 = load %union.tree_node*, %union.tree_node** %type135, align 8
  %common136 = bitcast %union.tree_node* %79 to %struct.tree_common*
  %code137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2
  %bf.load138 = load i32, i32* %code137, align 8
  %bf.clear139 = and i32 %bf.load138, 255
  %cmp140 = icmp eq i32 %bf.clear139, 10
  br i1 %cmp140, label %land.lhs.true.157, label %lor.lhs.false.141

lor.lhs.false.141:                                ; preds = %lor.lhs.false.133
  %80 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common142 = bitcast %union.tree_node* %80 to %struct.tree_common*
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 1
  %81 = load %union.tree_node*, %union.tree_node** %type143, align 8
  %common144 = bitcast %union.tree_node* %81 to %struct.tree_common*
  %code145 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common144, i32 0, i32 2
  %bf.load146 = load i32, i32* %code145, align 8
  %bf.clear147 = and i32 %bf.load146, 255
  %cmp148 = icmp eq i32 %bf.clear147, 11
  br i1 %cmp148, label %land.lhs.true.157, label %lor.lhs.false.149

lor.lhs.false.149:                                ; preds = %lor.lhs.false.141
  %82 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common150 = bitcast %union.tree_node* %82 to %struct.tree_common*
  %type151 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common150, i32 0, i32 1
  %83 = load %union.tree_node*, %union.tree_node** %type151, align 8
  %common152 = bitcast %union.tree_node* %83 to %struct.tree_common*
  %code153 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common152, i32 0, i32 2
  %bf.load154 = load i32, i32* %code153, align 8
  %bf.clear155 = and i32 %bf.load154, 255
  %cmp156 = icmp eq i32 %bf.clear155, 12
  br i1 %cmp156, label %land.lhs.true.157, label %if.end.195

land.lhs.true.157:                                ; preds = %lor.lhs.false.149, %lor.lhs.false.141, %lor.lhs.false.133, %land.lhs.true.126
  %84 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common158 = bitcast %union.tree_node* %84 to %struct.tree_common*
  %type159 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common158, i32 0, i32 1
  %85 = load %union.tree_node*, %union.tree_node** %type159, align 8
  %common160 = bitcast %union.tree_node* %85 to %struct.tree_common*
  %type161 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common160, i32 0, i32 1
  %86 = load %union.tree_node*, %union.tree_node** %type161, align 8
  %cmp162 = icmp eq %union.tree_node* %86, null
  br i1 %cmp162, label %if.then.163, label %if.end.195

if.then.163:                                      ; preds = %land.lhs.true.157
  %87 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common164 = bitcast %union.tree_node* %87 to %struct.tree_common*
  %type165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 1
  %88 = load %union.tree_node*, %union.tree_node** %type165, align 8
  %common166 = bitcast %union.tree_node* %88 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common166, i32 0, i32 2
  %bf.load167 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr168 = lshr i32 %bf.load167, 13
  %bf.clear169 = and i32 %bf.lshr168, 1
  %89 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %90 = bitcast %struct.rtx_def* %89 to i32*
  %bf.load170 = load i32, i32* %90, align 8
  %bf.lshr171 = lshr i32 %bf.load170, 26
  %bf.clear172 = and i32 %bf.lshr171, 1
  %cmp173 = icmp ne i32 %bf.clear169, %bf.clear172
  br i1 %cmp173, label %if.then.174, label %if.end.182

if.then.174:                                      ; preds = %if.then.163
  %91 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %92 = bitcast %struct.rtx_def* %91 to i32*
  %bf.load175 = load i32, i32* %92, align 8
  %bf.lshr176 = lshr i32 %bf.load175, 26
  %bf.clear177 = and i32 %bf.lshr176, 1
  %93 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common178 = bitcast %union.tree_node* %93 to %struct.tree_common*
  %type179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 1
  %94 = load %union.tree_node*, %union.tree_node** %type179, align 8
  %call180 = call %union.tree_node* @signed_or_unsigned_type(i32 %bf.clear177, %union.tree_node* %94)
  %95 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call181 = call %union.tree_node* @convert(%union.tree_node* %call180, %union.tree_node* %95)
  store %union.tree_node* %call181, %union.tree_node** %exp.addr, align 8
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.174, %if.then.163
  %96 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load184 = load i32, i32* %98, align 8
  %bf.lshr185 = lshr i32 %bf.load184, 16
  %bf.clear186 = and i32 %bf.lshr185, 255
  %99 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %100 = bitcast %struct.rtx_def* %99 to i32*
  %bf.load187 = load i32, i32* %100, align 8
  %bf.lshr188 = lshr i32 %bf.load187, 26
  %bf.clear189 = and i32 %bf.lshr188, 1
  %call190 = call %union.tree_node* @type_for_mode(i32 %bf.clear186, i32 %bf.clear189)
  %101 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call191 = call %union.tree_node* @convert(%union.tree_node* %call190, %union.tree_node* %101)
  store %union.tree_node* %call191, %union.tree_node** %exp.addr, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld192 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i32 0, i64 0
  %rtx194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rtx194, align 8
  store %struct.rtx_def* %103, %struct.rtx_def** %inner_target, align 8
  br label %if.end.195

if.end.195:                                       ; preds = %if.end.182, %land.lhs.true.157, %lor.lhs.false.149, %if.then.124
  %104 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %105 = load %struct.rtx_def*, %struct.rtx_def** %inner_target, align 8
  %call196 = call %struct.rtx_def* @expand_expr(%union.tree_node* %104, %struct.rtx_def* %105, i32 0, i32 0)
  store %struct.rtx_def* %call196, %struct.rtx_def** %temp, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %107 = bitcast %struct.rtx_def* %106 to i32*
  %bf.load197 = load i32, i32* %107, align 8
  %bf.clear198 = and i32 %bf.load197, 65535
  %cmp199 = icmp eq i32 %bf.clear198, 66
  br i1 %cmp199, label %land.lhs.true.200, label %if.end.218

land.lhs.true.200:                                ; preds = %if.end.195
  %108 = load i32, i32* %want_value.addr, align 4
  %tobool201 = icmp ne i32 %108, 0
  br i1 %tobool201, label %land.lhs.true.202, label %if.end.218

land.lhs.true.202:                                ; preds = %land.lhs.true.200
  %109 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %110 = bitcast %struct.rtx_def* %109 to i32*
  %bf.load203 = load i32, i32* %110, align 8
  %bf.lshr204 = lshr i32 %bf.load203, 27
  %bf.clear205 = and i32 %bf.lshr204, 1
  %tobool206 = icmp ne i32 %bf.clear205, 0
  br i1 %tobool206, label %if.then.216, label %lor.lhs.false.207

lor.lhs.false.207:                                ; preds = %land.lhs.true.202
  %111 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld208 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1
  %arrayidx209 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld208, i32 0, i64 0
  %rtx210 = bitcast %union.rtunion_def* %arrayidx209 to %struct.rtx_def**
  %112 = load %struct.rtx_def*, %struct.rtx_def** %rtx210, align 8
  %113 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld211 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %arrayidx212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld211, i32 0, i64 0
  %rtx213 = bitcast %union.rtunion_def* %arrayidx212 to %struct.rtx_def**
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rtx213, align 8
  %call214 = call i32 @reg_mentioned_p(%struct.rtx_def* %112, %struct.rtx_def* %114)
  %tobool215 = icmp ne i32 %call214, 0
  br i1 %tobool215, label %if.then.216, label %if.end.218

if.then.216:                                      ; preds = %lor.lhs.false.207, %land.lhs.true.202
  %115 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call217 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %115)
  store %struct.rtx_def* %call217, %struct.rtx_def** %temp, align 8
  br label %if.end.218

if.end.218:                                       ; preds = %if.then.216, %lor.lhs.false.207, %land.lhs.true.200, %if.end.195
  %116 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load219 = load i32, i32* %117, align 8
  %bf.clear220 = and i32 %bf.load219, 65535
  %cmp221 = icmp eq i32 %bf.clear220, 67
  br i1 %cmp221, label %land.lhs.true.250, label %lor.lhs.false.222

lor.lhs.false.222:                                ; preds = %if.end.218
  %118 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %119 = bitcast %struct.rtx_def* %118 to i32*
  %bf.load223 = load i32, i32* %119, align 8
  %bf.clear224 = and i32 %bf.load223, 65535
  %cmp225 = icmp eq i32 %bf.clear224, 68
  br i1 %cmp225, label %land.lhs.true.250, label %lor.lhs.false.226

lor.lhs.false.226:                                ; preds = %lor.lhs.false.222
  %120 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %bf.load227 = load i32, i32* %121, align 8
  %bf.clear228 = and i32 %bf.load227, 65535
  %cmp229 = icmp eq i32 %bf.clear228, 54
  br i1 %cmp229, label %land.lhs.true.250, label %lor.lhs.false.230

lor.lhs.false.230:                                ; preds = %lor.lhs.false.226
  %122 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load231 = load i32, i32* %123, align 8
  %bf.clear232 = and i32 %bf.load231, 65535
  %cmp233 = icmp eq i32 %bf.clear232, 55
  br i1 %cmp233, label %land.lhs.true.250, label %lor.lhs.false.234

lor.lhs.false.234:                                ; preds = %lor.lhs.false.230
  %124 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %125 = bitcast %struct.rtx_def* %124 to i32*
  %bf.load235 = load i32, i32* %125, align 8
  %bf.clear236 = and i32 %bf.load235, 65535
  %cmp237 = icmp eq i32 %bf.clear236, 58
  br i1 %cmp237, label %land.lhs.true.250, label %lor.lhs.false.238

lor.lhs.false.238:                                ; preds = %lor.lhs.false.234
  %126 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load239 = load i32, i32* %127, align 8
  %bf.clear240 = and i32 %bf.load239, 65535
  %cmp241 = icmp eq i32 %bf.clear240, 134
  br i1 %cmp241, label %land.lhs.true.250, label %lor.lhs.false.242

lor.lhs.false.242:                                ; preds = %lor.lhs.false.238
  %128 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %129 = bitcast %struct.rtx_def* %128 to i32*
  %bf.load243 = load i32, i32* %129, align 8
  %bf.clear244 = and i32 %bf.load243, 65535
  %cmp245 = icmp eq i32 %bf.clear244, 56
  br i1 %cmp245, label %land.lhs.true.250, label %lor.lhs.false.246

lor.lhs.false.246:                                ; preds = %lor.lhs.false.242
  %130 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %bf.load247 = load i32, i32* %131, align 8
  %bf.clear248 = and i32 %bf.load247, 65535
  %cmp249 = icmp eq i32 %bf.clear248, 140
  br i1 %cmp249, label %land.lhs.true.250, label %if.end.282

land.lhs.true.250:                                ; preds = %lor.lhs.false.246, %lor.lhs.false.242, %lor.lhs.false.238, %lor.lhs.false.234, %lor.lhs.false.230, %lor.lhs.false.226, %lor.lhs.false.222, %if.end.218
  %132 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %133 = bitcast %struct.rtx_def* %132 to i32*
  %bf.load251 = load i32, i32* %133, align 8
  %bf.lshr252 = lshr i32 %bf.load251, 16
  %bf.clear253 = and i32 %bf.lshr252, 255
  %cmp254 = icmp eq i32 %bf.clear253, 0
  br i1 %cmp254, label %if.then.255, label %if.end.282

if.then.255:                                      ; preds = %land.lhs.true.250
  %134 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %135 = bitcast %struct.rtx_def* %134 to i32*
  %bf.load256 = load i32, i32* %135, align 8
  %bf.lshr257 = lshr i32 %bf.load256, 16
  %bf.clear258 = and i32 %bf.lshr257, 255
  %136 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common259 = bitcast %union.tree_node* %136 to %struct.tree_common*
  %type260 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common259, i32 0, i32 1
  %137 = load %union.tree_node*, %union.tree_node** %type260, align 8
  %type261 = bitcast %union.tree_node* %137 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type261, i32 0, i32 6
  %bf.load262 = load i32, i32* %mode, align 4
  %bf.lshr263 = lshr i32 %bf.load262, 9
  %bf.clear264 = and i32 %bf.lshr263, 127
  %138 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %140 = bitcast %struct.rtx_def* %139 to i32*
  %bf.load265 = load i32, i32* %140, align 8
  %bf.lshr266 = lshr i32 %bf.load265, 26
  %bf.clear267 = and i32 %bf.lshr266, 1
  %call268 = call %struct.rtx_def* @convert_modes(i32 %bf.clear258, i32 %bf.clear264, %struct.rtx_def* %138, i32 %bf.clear267)
  store %struct.rtx_def* %call268, %struct.rtx_def** %temp, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld269 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1
  %arrayidx270 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld269, i32 0, i64 0
  %rtx271 = bitcast %union.rtunion_def* %arrayidx270 to %struct.rtx_def**
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rtx271, align 8
  %143 = bitcast %struct.rtx_def* %142 to i32*
  %bf.load272 = load i32, i32* %143, align 8
  %bf.lshr273 = lshr i32 %bf.load272, 16
  %bf.clear274 = and i32 %bf.lshr273, 255
  %144 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %145 = bitcast %struct.rtx_def* %144 to i32*
  %bf.load275 = load i32, i32* %145, align 8
  %bf.lshr276 = lshr i32 %bf.load275, 16
  %bf.clear277 = and i32 %bf.lshr276, 255
  %146 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %148 = bitcast %struct.rtx_def* %147 to i32*
  %bf.load278 = load i32, i32* %148, align 8
  %bf.lshr279 = lshr i32 %bf.load278, 26
  %bf.clear280 = and i32 %bf.lshr279, 1
  %call281 = call %struct.rtx_def* @convert_modes(i32 %bf.clear274, i32 %bf.clear277, %struct.rtx_def* %146, i32 %bf.clear280)
  store %struct.rtx_def* %call281, %struct.rtx_def** %temp, align 8
  br label %if.end.282

if.end.282:                                       ; preds = %if.then.255, %land.lhs.true.250, %lor.lhs.false.246
  %149 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld283 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %arrayidx284 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld283, i32 0, i64 0
  %rtx285 = bitcast %union.rtunion_def* %arrayidx284 to %struct.rtx_def**
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtx285, align 8
  %151 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %152 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %153 = bitcast %struct.rtx_def* %152 to i32*
  %bf.load286 = load i32, i32* %153, align 8
  %bf.lshr287 = lshr i32 %bf.load286, 26
  %bf.clear288 = and i32 %bf.lshr287, 1
  call void @convert_move(%struct.rtx_def* %150, %struct.rtx_def* %151, i32 %bf.clear288)
  %154 = load i32, i32* %want_value.addr, align 4
  %tobool289 = icmp ne i32 %154, 0
  br i1 %tobool289, label %land.lhs.true.290, label %if.end.331

land.lhs.true.290:                                ; preds = %if.end.282
  %155 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %bf.load291 = load i32, i32* %156, align 8
  %bf.lshr292 = lshr i32 %bf.load291, 16
  %bf.clear293 = and i32 %bf.lshr292, 255
  %157 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %158 = bitcast %struct.rtx_def* %157 to i32*
  %bf.load294 = load i32, i32* %158, align 8
  %bf.lshr295 = lshr i32 %bf.load294, 16
  %bf.clear296 = and i32 %bf.lshr295, 255
  %cmp297 = icmp ne i32 %bf.clear293, %bf.clear296
  br i1 %cmp297, label %if.then.298, label %if.end.331

if.then.298:                                      ; preds = %land.lhs.true.290
  %159 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %160 = bitcast %struct.rtx_def* %159 to i32*
  %bf.load299 = load i32, i32* %160, align 8
  %bf.lshr300 = lshr i32 %bf.load299, 16
  %bf.clear301 = and i32 %bf.lshr300, 255
  %cmp302 = icmp ne i32 %bf.clear301, 0
  br i1 %cmp302, label %if.then.303, label %if.else.316

if.then.303:                                      ; preds = %if.then.298
  %161 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %162 = bitcast %struct.rtx_def* %161 to i32*
  %bf.load304 = load i32, i32* %162, align 8
  %bf.lshr305 = lshr i32 %bf.load304, 16
  %bf.clear306 = and i32 %bf.lshr305, 255
  %163 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call307 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %bf.clear306, %struct.rtx_def* %163)
  store %struct.rtx_def* %call307, %struct.rtx_def** %temp, align 8
  %164 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %165 = bitcast %struct.rtx_def* %164 to i32*
  %bf.load308 = load i32, i32* %165, align 8
  %bf.clear309 = and i32 %bf.load308, -268435457
  %bf.set = or i32 %bf.clear309, 268435456
  store i32 %bf.set, i32* %165, align 8
  %166 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %167 = bitcast %struct.rtx_def* %166 to i32*
  %bf.load310 = load i32, i32* %167, align 8
  %bf.lshr311 = lshr i32 %bf.load310, 26
  %bf.clear312 = and i32 %bf.lshr311, 1
  %168 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %169 = bitcast %struct.rtx_def* %168 to i32*
  %bf.load313 = load i32, i32* %169, align 8
  %bf.value = and i32 %bf.clear312, 1
  %bf.shl = shl i32 %bf.value, 26
  %bf.clear314 = and i32 %bf.load313, -67108865
  %bf.set315 = or i32 %bf.clear314, %bf.shl
  store i32 %bf.set315, i32* %169, align 8
  br label %if.end.330

if.else.316:                                      ; preds = %if.then.298
  %170 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %171 = bitcast %struct.rtx_def* %170 to i32*
  %bf.load317 = load i32, i32* %171, align 8
  %bf.lshr318 = lshr i32 %bf.load317, 16
  %bf.clear319 = and i32 %bf.lshr318, 255
  %172 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld320 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %arrayidx321 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld320, i32 0, i64 0
  %rtx322 = bitcast %union.rtunion_def* %arrayidx321 to %struct.rtx_def**
  %173 = load %struct.rtx_def*, %struct.rtx_def** %rtx322, align 8
  %174 = bitcast %struct.rtx_def* %173 to i32*
  %bf.load323 = load i32, i32* %174, align 8
  %bf.lshr324 = lshr i32 %bf.load323, 16
  %bf.clear325 = and i32 %bf.lshr324, 255
  %175 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %176 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %177 = bitcast %struct.rtx_def* %176 to i32*
  %bf.load326 = load i32, i32* %177, align 8
  %bf.lshr327 = lshr i32 %bf.load326, 26
  %bf.clear328 = and i32 %bf.lshr327, 1
  %call329 = call %struct.rtx_def* @convert_modes(i32 %bf.clear319, i32 %bf.clear325, %struct.rtx_def* %175, i32 %bf.clear328)
  store %struct.rtx_def* %call329, %struct.rtx_def** %temp, align 8
  br label %if.end.330

if.end.330:                                       ; preds = %if.else.316, %if.then.303
  br label %if.end.331

if.end.331:                                       ; preds = %if.end.330, %land.lhs.true.290, %if.end.282
  %178 = load i32, i32* %want_value.addr, align 4
  %tobool332 = icmp ne i32 %178, 0
  br i1 %tobool332, label %cond.true.333, label %cond.false.334

cond.true.333:                                    ; preds = %if.end.331
  %179 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  br label %cond.end.335

cond.false.334:                                   ; preds = %if.end.331
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.false.334, %cond.true.333
  %cond336 = phi %struct.rtx_def* [ %179, %cond.true.333 ], [ null, %cond.false.334 ]
  store %struct.rtx_def* %cond336, %struct.rtx_def** %retval
  br label %return

if.else.337:                                      ; preds = %land.lhs.true.119, %if.else.115
  %180 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %182 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %183 = bitcast %struct.rtx_def* %182 to i32*
  %bf.load338 = load i32, i32* %183, align 8
  %bf.lshr339 = lshr i32 %bf.load338, 16
  %bf.clear340 = and i32 %bf.lshr339, 255
  %call341 = call %struct.rtx_def* @expand_expr(%union.tree_node* %180, %struct.rtx_def* %181, i32 %bf.clear340, i32 0)
  store %struct.rtx_def* %call341, %struct.rtx_def** %temp, align 8
  %184 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %tobool342 = icmp ne %struct.rtx_def* %184, null
  br i1 %tobool342, label %land.lhs.true.343, label %land.lhs.true.351

land.lhs.true.343:                                ; preds = %if.else.337
  %185 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %186 = bitcast %struct.rtx_def* %185 to i32*
  %bf.load344 = load i32, i32* %186, align 8
  %bf.clear345 = and i32 %bf.load344, 65535
  %cmp346 = icmp eq i32 %bf.clear345, 61
  br i1 %cmp346, label %land.lhs.true.347, label %land.lhs.true.351

land.lhs.true.347:                                ; preds = %land.lhs.true.343
  %187 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld348 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %187, i32 0, i32 1
  %arrayidx349 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld348, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx349 to i32*
  %188 = load i32, i32* %rtuint, align 4
  %cmp350 = icmp ult i32 %188, 53
  br i1 %cmp350, label %if.end.398, label %land.lhs.true.351

land.lhs.true.351:                                ; preds = %land.lhs.true.347, %land.lhs.true.343, %if.else.337
  %189 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %190 = bitcast %struct.rtx_def* %189 to i32*
  %bf.load352 = load i32, i32* %190, align 8
  %bf.clear353 = and i32 %bf.load352, 65535
  %cmp354 = icmp eq i32 %bf.clear353, 66
  br i1 %cmp354, label %land.lhs.true.355, label %land.lhs.true.360

land.lhs.true.355:                                ; preds = %land.lhs.true.351
  %191 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %192 = bitcast %struct.rtx_def* %191 to i32*
  %bf.load356 = load i32, i32* %192, align 8
  %bf.lshr357 = lshr i32 %bf.load356, 27
  %bf.clear358 = and i32 %bf.lshr357, 1
  %tobool359 = icmp ne i32 %bf.clear358, 0
  br i1 %tobool359, label %if.end.398, label %land.lhs.true.360

land.lhs.true.360:                                ; preds = %land.lhs.true.355, %land.lhs.true.351
  %193 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %194 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call361 = call i32 @rtx_equal_p(%struct.rtx_def* %193, %struct.rtx_def* %194)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end.398, label %land.lhs.true.363

land.lhs.true.363:                                ; preds = %land.lhs.true.360
  %195 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %196 = bitcast %struct.rtx_def* %195 to i32*
  %bf.load364 = load i32, i32* %196, align 8
  %bf.clear365 = and i32 %bf.load364, 65535
  %cmp366 = icmp eq i32 %bf.clear365, 67
  br i1 %cmp366, label %if.then.397, label %lor.lhs.false.367

lor.lhs.false.367:                                ; preds = %land.lhs.true.363
  %197 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %198 = bitcast %struct.rtx_def* %197 to i32*
  %bf.load368 = load i32, i32* %198, align 8
  %bf.clear369 = and i32 %bf.load368, 65535
  %cmp370 = icmp eq i32 %bf.clear369, 68
  br i1 %cmp370, label %if.then.397, label %lor.lhs.false.371

lor.lhs.false.371:                                ; preds = %lor.lhs.false.367
  %199 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %200 = bitcast %struct.rtx_def* %199 to i32*
  %bf.load372 = load i32, i32* %200, align 8
  %bf.clear373 = and i32 %bf.load372, 65535
  %cmp374 = icmp eq i32 %bf.clear373, 54
  br i1 %cmp374, label %if.then.397, label %lor.lhs.false.375

lor.lhs.false.375:                                ; preds = %lor.lhs.false.371
  %201 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %202 = bitcast %struct.rtx_def* %201 to i32*
  %bf.load376 = load i32, i32* %202, align 8
  %bf.clear377 = and i32 %bf.load376, 65535
  %cmp378 = icmp eq i32 %bf.clear377, 55
  br i1 %cmp378, label %if.then.397, label %lor.lhs.false.379

lor.lhs.false.379:                                ; preds = %lor.lhs.false.375
  %203 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %204 = bitcast %struct.rtx_def* %203 to i32*
  %bf.load380 = load i32, i32* %204, align 8
  %bf.clear381 = and i32 %bf.load380, 65535
  %cmp382 = icmp eq i32 %bf.clear381, 58
  br i1 %cmp382, label %if.then.397, label %lor.lhs.false.383

lor.lhs.false.383:                                ; preds = %lor.lhs.false.379
  %205 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %206 = bitcast %struct.rtx_def* %205 to i32*
  %bf.load384 = load i32, i32* %206, align 8
  %bf.clear385 = and i32 %bf.load384, 65535
  %cmp386 = icmp eq i32 %bf.clear385, 134
  br i1 %cmp386, label %if.then.397, label %lor.lhs.false.387

lor.lhs.false.387:                                ; preds = %lor.lhs.false.383
  %207 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %208 = bitcast %struct.rtx_def* %207 to i32*
  %bf.load388 = load i32, i32* %208, align 8
  %bf.clear389 = and i32 %bf.load388, 65535
  %cmp390 = icmp eq i32 %bf.clear389, 56
  br i1 %cmp390, label %if.then.397, label %lor.lhs.false.391

lor.lhs.false.391:                                ; preds = %lor.lhs.false.387
  %209 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %210 = bitcast %struct.rtx_def* %209 to i32*
  %bf.load392 = load i32, i32* %210, align 8
  %bf.clear393 = and i32 %bf.load392, 65535
  %cmp394 = icmp eq i32 %bf.clear393, 140
  br i1 %cmp394, label %if.then.397, label %lor.lhs.false.395

lor.lhs.false.395:                                ; preds = %lor.lhs.false.391
  %211 = load i32, i32* %want_value.addr, align 4
  %tobool396 = icmp ne i32 %211, 0
  br i1 %tobool396, label %if.then.397, label %if.end.398

if.then.397:                                      ; preds = %lor.lhs.false.395, %lor.lhs.false.391, %lor.lhs.false.387, %lor.lhs.false.383, %lor.lhs.false.379, %lor.lhs.false.375, %lor.lhs.false.371, %lor.lhs.false.367, %land.lhs.true.363
  store i32 1, i32* %dont_return_target, align 4
  br label %if.end.398

if.end.398:                                       ; preds = %if.then.397, %lor.lhs.false.395, %land.lhs.true.360, %land.lhs.true.355, %land.lhs.true.347
  br label %if.end.399

if.end.399:                                       ; preds = %if.end.398
  br label %if.end.400

if.end.400:                                       ; preds = %if.end.399, %if.end.114
  br label %if.end.401

if.end.401:                                       ; preds = %if.end.400, %if.end.70
  br label %if.end.402

if.end.402:                                       ; preds = %if.end.401
  br label %if.end.403

if.end.403:                                       ; preds = %if.end.402
  %212 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %213 = bitcast %struct.rtx_def* %212 to i32*
  %bf.load404 = load i32, i32* %213, align 8
  %bf.clear405 = and i32 %bf.load404, 65535
  %cmp406 = icmp eq i32 %bf.clear405, 67
  br i1 %cmp406, label %land.lhs.true.435, label %lor.lhs.false.407

lor.lhs.false.407:                                ; preds = %if.end.403
  %214 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %215 = bitcast %struct.rtx_def* %214 to i32*
  %bf.load408 = load i32, i32* %215, align 8
  %bf.clear409 = and i32 %bf.load408, 65535
  %cmp410 = icmp eq i32 %bf.clear409, 68
  br i1 %cmp410, label %land.lhs.true.435, label %lor.lhs.false.411

lor.lhs.false.411:                                ; preds = %lor.lhs.false.407
  %216 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %217 = bitcast %struct.rtx_def* %216 to i32*
  %bf.load412 = load i32, i32* %217, align 8
  %bf.clear413 = and i32 %bf.load412, 65535
  %cmp414 = icmp eq i32 %bf.clear413, 54
  br i1 %cmp414, label %land.lhs.true.435, label %lor.lhs.false.415

lor.lhs.false.415:                                ; preds = %lor.lhs.false.411
  %218 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %219 = bitcast %struct.rtx_def* %218 to i32*
  %bf.load416 = load i32, i32* %219, align 8
  %bf.clear417 = and i32 %bf.load416, 65535
  %cmp418 = icmp eq i32 %bf.clear417, 55
  br i1 %cmp418, label %land.lhs.true.435, label %lor.lhs.false.419

lor.lhs.false.419:                                ; preds = %lor.lhs.false.415
  %220 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %221 = bitcast %struct.rtx_def* %220 to i32*
  %bf.load420 = load i32, i32* %221, align 8
  %bf.clear421 = and i32 %bf.load420, 65535
  %cmp422 = icmp eq i32 %bf.clear421, 58
  br i1 %cmp422, label %land.lhs.true.435, label %lor.lhs.false.423

lor.lhs.false.423:                                ; preds = %lor.lhs.false.419
  %222 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %223 = bitcast %struct.rtx_def* %222 to i32*
  %bf.load424 = load i32, i32* %223, align 8
  %bf.clear425 = and i32 %bf.load424, 65535
  %cmp426 = icmp eq i32 %bf.clear425, 134
  br i1 %cmp426, label %land.lhs.true.435, label %lor.lhs.false.427

lor.lhs.false.427:                                ; preds = %lor.lhs.false.423
  %224 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %225 = bitcast %struct.rtx_def* %224 to i32*
  %bf.load428 = load i32, i32* %225, align 8
  %bf.clear429 = and i32 %bf.load428, 65535
  %cmp430 = icmp eq i32 %bf.clear429, 56
  br i1 %cmp430, label %land.lhs.true.435, label %lor.lhs.false.431

lor.lhs.false.431:                                ; preds = %lor.lhs.false.427
  %226 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %227 = bitcast %struct.rtx_def* %226 to i32*
  %bf.load432 = load i32, i32* %227, align 8
  %bf.clear433 = and i32 %bf.load432, 65535
  %cmp434 = icmp eq i32 %bf.clear433, 140
  br i1 %cmp434, label %land.lhs.true.435, label %if.end.477

land.lhs.true.435:                                ; preds = %lor.lhs.false.431, %lor.lhs.false.427, %lor.lhs.false.423, %lor.lhs.false.419, %lor.lhs.false.415, %lor.lhs.false.411, %lor.lhs.false.407, %if.end.403
  %228 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %229 = bitcast %struct.rtx_def* %228 to i32*
  %bf.load436 = load i32, i32* %229, align 8
  %bf.lshr437 = lshr i32 %bf.load436, 16
  %bf.clear438 = and i32 %bf.lshr437, 255
  %cmp439 = icmp eq i32 %bf.clear438, 0
  br i1 %cmp439, label %land.lhs.true.440, label %if.end.477

land.lhs.true.440:                                ; preds = %land.lhs.true.435
  %230 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common441 = bitcast %union.tree_node* %230 to %struct.tree_common*
  %code442 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common441, i32 0, i32 2
  %bf.load443 = load i32, i32* %code442, align 8
  %bf.clear444 = and i32 %bf.load443, 255
  %cmp445 = icmp ne i32 %bf.clear444, 0
  br i1 %cmp445, label %land.lhs.true.446, label %if.end.477

land.lhs.true.446:                                ; preds = %land.lhs.true.440
  %231 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %232 = bitcast %struct.rtx_def* %231 to i32*
  %bf.load447 = load i32, i32* %232, align 8
  %bf.lshr448 = lshr i32 %bf.load447, 16
  %bf.clear449 = and i32 %bf.lshr448, 255
  %233 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common450 = bitcast %union.tree_node* %233 to %struct.tree_common*
  %type451 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common450, i32 0, i32 1
  %234 = load %union.tree_node*, %union.tree_node** %type451, align 8
  %type452 = bitcast %union.tree_node* %234 to %struct.tree_type*
  %mode453 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type452, i32 0, i32 6
  %bf.load454 = load i32, i32* %mode453, align 4
  %bf.lshr455 = lshr i32 %bf.load454, 9
  %bf.clear456 = and i32 %bf.lshr455, 127
  %cmp457 = icmp ne i32 %bf.clear449, %bf.clear456
  br i1 %cmp457, label %if.then.458, label %if.end.477

if.then.458:                                      ; preds = %land.lhs.true.446
  %235 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %236 = bitcast %struct.rtx_def* %235 to i32*
  %bf.load459 = load i32, i32* %236, align 8
  %bf.lshr460 = lshr i32 %bf.load459, 16
  %bf.clear461 = and i32 %bf.lshr460, 255
  %237 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common462 = bitcast %union.tree_node* %237 to %struct.tree_common*
  %type463 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common462, i32 0, i32 1
  %238 = load %union.tree_node*, %union.tree_node** %type463, align 8
  %type464 = bitcast %union.tree_node* %238 to %struct.tree_type*
  %mode465 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type464, i32 0, i32 6
  %bf.load466 = load i32, i32* %mode465, align 4
  %bf.lshr467 = lshr i32 %bf.load466, 9
  %bf.clear468 = and i32 %bf.lshr467, 127
  %239 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %240 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common469 = bitcast %union.tree_node* %240 to %struct.tree_common*
  %type470 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common469, i32 0, i32 1
  %241 = load %union.tree_node*, %union.tree_node** %type470, align 8
  %common471 = bitcast %union.tree_node* %241 to %struct.tree_common*
  %unsigned_flag472 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common471, i32 0, i32 2
  %bf.load473 = load i32, i32* %unsigned_flag472, align 8
  %bf.lshr474 = lshr i32 %bf.load473, 13
  %bf.clear475 = and i32 %bf.lshr474, 1
  %call476 = call %struct.rtx_def* @convert_modes(i32 %bf.clear461, i32 %bf.clear468, %struct.rtx_def* %239, i32 %bf.clear475)
  store %struct.rtx_def* %call476, %struct.rtx_def** %temp, align 8
  br label %if.end.477

if.end.477:                                       ; preds = %if.then.458, %land.lhs.true.446, %land.lhs.true.440, %land.lhs.true.435, %lor.lhs.false.431
  %242 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %243 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call478 = call i32 @rtx_equal_p(%struct.rtx_def* %242, %struct.rtx_def* %243)
  %tobool479 = icmp ne i32 %call478, 0
  br i1 %tobool479, label %lor.lhs.false.480, label %land.lhs.true.488

lor.lhs.false.480:                                ; preds = %if.end.477
  %244 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %245 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp481 = icmp ne %struct.rtx_def* %244, %245
  br i1 %cmp481, label %land.lhs.true.482, label %if.end.657

land.lhs.true.482:                                ; preds = %lor.lhs.false.480
  %246 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call483 = call i32 @side_effects_p(%struct.rtx_def* %246)
  %tobool484 = icmp ne i32 %call483, 0
  br i1 %tobool484, label %land.lhs.true.488, label %lor.lhs.false.485

lor.lhs.false.485:                                ; preds = %land.lhs.true.482
  %247 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call486 = call i32 @side_effects_p(%struct.rtx_def* %247)
  %tobool487 = icmp ne i32 %call486, 0
  br i1 %tobool487, label %land.lhs.true.488, label %if.end.657

land.lhs.true.488:                                ; preds = %lor.lhs.false.485, %land.lhs.true.482, %if.end.477
  %248 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common489 = bitcast %union.tree_node* %248 to %struct.tree_common*
  %code490 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common489, i32 0, i32 2
  %bf.load491 = load i32, i32* %code490, align 8
  %bf.clear492 = and i32 %bf.load491, 255
  %cmp493 = icmp ne i32 %bf.clear492, 0
  br i1 %cmp493, label %land.lhs.true.494, label %if.end.657

land.lhs.true.494:                                ; preds = %land.lhs.true.488
  %249 = load i32, i32* %dont_store_target, align 4
  %tobool495 = icmp ne i32 %249, 0
  br i1 %tobool495, label %if.end.657, label %land.lhs.true.496

land.lhs.true.496:                                ; preds = %land.lhs.true.494
  %250 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common497 = bitcast %union.tree_node* %250 to %struct.tree_common*
  %code498 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common497, i32 0, i32 2
  %bf.load499 = load i32, i32* %code498, align 8
  %bf.clear500 = and i32 %bf.load499, 255
  %idxprom = sext i32 %bf.clear500 to i64
  %arrayidx501 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %251 = load i8, i8* %arrayidx501, align 1
  %conv = sext i8 %251 to i32
  %cmp502 = icmp ne i32 %conv, 100
  br i1 %cmp502, label %if.then.524, label %lor.lhs.false.504

lor.lhs.false.504:                                ; preds = %land.lhs.true.496
  %252 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %253 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl = bitcast %union.tree_node* %253 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %254 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp505 = icmp ne %struct.rtx_def* %254, null
  br i1 %cmp505, label %cond.true.507, label %cond.false.519

cond.true.507:                                    ; preds = %lor.lhs.false.504
  %255 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl508 = bitcast %union.tree_node* %255 to %struct.tree_decl*
  %rtl509 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl508, i32 0, i32 17
  %256 = load %struct.rtx_def*, %struct.rtx_def** %rtl509, align 8
  %tobool510 = icmp ne %struct.rtx_def* %256, null
  br i1 %tobool510, label %cond.true.511, label %cond.false.514

cond.true.511:                                    ; preds = %cond.true.507
  %257 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl512 = bitcast %union.tree_node* %257 to %struct.tree_decl*
  %rtl513 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl512, i32 0, i32 17
  %258 = load %struct.rtx_def*, %struct.rtx_def** %rtl513, align 8
  br label %cond.end.517

cond.false.514:                                   ; preds = %cond.true.507
  %259 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %259, i8* null)
  %260 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl515 = bitcast %union.tree_node* %260 to %struct.tree_decl*
  %rtl516 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl515, i32 0, i32 17
  %261 = load %struct.rtx_def*, %struct.rtx_def** %rtl516, align 8
  br label %cond.end.517

cond.end.517:                                     ; preds = %cond.false.514, %cond.true.511
  %cond518 = phi %struct.rtx_def* [ %258, %cond.true.511 ], [ %261, %cond.false.514 ]
  br label %cond.end.520

cond.false.519:                                   ; preds = %lor.lhs.false.504
  br label %cond.end.520

cond.end.520:                                     ; preds = %cond.false.519, %cond.end.517
  %cond521 = phi %struct.rtx_def* [ %cond518, %cond.end.517 ], [ null, %cond.false.519 ]
  %cmp522 = icmp ne %struct.rtx_def* %252, %cond521
  br i1 %cmp522, label %if.then.524, label %if.end.657

if.then.524:                                      ; preds = %cond.end.520, %land.lhs.true.496
  %262 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call525 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %262, i32 1)
  store %struct.rtx_def* %call525, %struct.rtx_def** %target.addr, align 8
  %263 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %264 = bitcast %struct.rtx_def* %263 to i32*
  %bf.load526 = load i32, i32* %264, align 8
  %bf.lshr527 = lshr i32 %bf.load526, 16
  %bf.clear528 = and i32 %bf.lshr527, 255
  %265 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %266 = bitcast %struct.rtx_def* %265 to i32*
  %bf.load529 = load i32, i32* %266, align 8
  %bf.lshr530 = lshr i32 %bf.load529, 16
  %bf.clear531 = and i32 %bf.lshr530, 255
  %cmp532 = icmp ne i32 %bf.clear528, %bf.clear531
  br i1 %cmp532, label %land.lhs.true.534, label %if.else.557

land.lhs.true.534:                                ; preds = %if.then.524
  %267 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %268 = bitcast %struct.rtx_def* %267 to i32*
  %bf.load535 = load i32, i32* %268, align 8
  %bf.lshr536 = lshr i32 %bf.load535, 16
  %bf.clear537 = and i32 %bf.lshr536, 255
  %cmp538 = icmp ne i32 %bf.clear537, 0
  br i1 %cmp538, label %if.then.540, label %if.else.557

if.then.540:                                      ; preds = %land.lhs.true.534
  %269 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common541 = bitcast %union.tree_node* %269 to %struct.tree_common*
  %type542 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common541, i32 0, i32 1
  %270 = load %union.tree_node*, %union.tree_node** %type542, align 8
  %common543 = bitcast %union.tree_node* %270 to %struct.tree_common*
  %unsigned_flag544 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common543, i32 0, i32 2
  %bf.load545 = load i32, i32* %unsigned_flag544, align 8
  %bf.lshr546 = lshr i32 %bf.load545, 13
  %bf.clear547 = and i32 %bf.lshr546, 1
  store i32 %bf.clear547, i32* %unsignedp, align 4
  %271 = load i32, i32* %dont_return_target, align 4
  %tobool548 = icmp ne i32 %271, 0
  br i1 %tobool548, label %if.then.549, label %if.else.555

if.then.549:                                      ; preds = %if.then.540
  %272 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %273 = bitcast %struct.rtx_def* %272 to i32*
  %bf.load550 = load i32, i32* %273, align 8
  %bf.lshr551 = lshr i32 %bf.load550, 16
  %bf.clear552 = and i32 %bf.lshr551, 255
  %274 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %275 = load i32, i32* %unsignedp, align 4
  %call553 = call %struct.rtx_def* @convert_to_mode(i32 %bf.clear552, %struct.rtx_def* %274, i32 %275)
  store %struct.rtx_def* %call553, %struct.rtx_def** %temp, align 8
  %276 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %277 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call554 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %276, %struct.rtx_def* %277)
  br label %if.end.556

if.else.555:                                      ; preds = %if.then.540
  %278 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %279 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %280 = load i32, i32* %unsignedp, align 4
  call void @convert_move(%struct.rtx_def* %278, %struct.rtx_def* %279, i32 %280)
  br label %if.end.556

if.end.556:                                       ; preds = %if.else.555, %if.then.549
  br label %if.end.656

if.else.557:                                      ; preds = %land.lhs.true.534, %if.then.524
  %281 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %282 = bitcast %struct.rtx_def* %281 to i32*
  %bf.load558 = load i32, i32* %282, align 8
  %bf.lshr559 = lshr i32 %bf.load558, 16
  %bf.clear560 = and i32 %bf.lshr559, 255
  %cmp561 = icmp eq i32 %bf.clear560, 51
  br i1 %cmp561, label %land.lhs.true.563, label %if.else.632

land.lhs.true.563:                                ; preds = %if.else.557
  %283 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common564 = bitcast %union.tree_node* %283 to %struct.tree_common*
  %code565 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common564, i32 0, i32 2
  %bf.load566 = load i32, i32* %code565, align 8
  %bf.clear567 = and i32 %bf.load566, 255
  %cmp568 = icmp eq i32 %bf.clear567, 29
  br i1 %cmp568, label %if.then.570, label %if.else.632

if.then.570:                                      ; preds = %land.lhs.true.563
  %284 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call571 = call %struct.rtx_def* @expr_size(%union.tree_node* %284)
  store %struct.rtx_def* %call571, %struct.rtx_def** %size, align 8
  %285 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %286 = bitcast %struct.rtx_def* %285 to i32*
  %bf.load572 = load i32, i32* %286, align 8
  %bf.clear573 = and i32 %bf.load572, 65535
  %cmp574 = icmp eq i32 %bf.clear573, 54
  br i1 %cmp574, label %land.lhs.true.576, label %if.else.584

land.lhs.true.576:                                ; preds = %if.then.570
  %287 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %fld577 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %287, i32 0, i32 1
  %arrayidx578 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld577, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx578 to i64*
  %288 = load i64, i64* %rtwint, align 8
  %289 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %string = bitcast %union.tree_node* %289 to %struct.tree_string*
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2
  %290 = load i32, i32* %length, align 4
  %conv579 = sext i32 %290 to i64
  %cmp580 = icmp slt i64 %288, %conv579
  br i1 %cmp580, label %if.then.582, label %if.else.584

if.then.582:                                      ; preds = %land.lhs.true.576
  %291 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %292 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %293 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %call583 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %291, %struct.rtx_def* %292, %struct.rtx_def* %293)
  br label %if.end.631

if.else.584:                                      ; preds = %land.lhs.true.576, %if.then.570
  %294 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %295 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %call585 = call %union.tree_node* @make_tree(%union.tree_node* %294, %struct.rtx_def* %295)
  %296 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %string586 = bitcast %union.tree_node* %296 to %struct.tree_string*
  %length587 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string586, i32 0, i32 2
  %297 = load i32, i32* %length587, align 4
  %conv588 = sext i32 %297 to i64
  %call589 = call %union.tree_node* @size_int_wide(i64 %conv588, i32 0)
  %call590 = call %union.tree_node* @size_binop(i32 78, %union.tree_node* %call585, %union.tree_node* %call589)
  store %union.tree_node* %call590, %union.tree_node** %copy_size, align 8
  %298 = load %union.tree_node*, %union.tree_node** %copy_size, align 8
  %call591 = call %struct.rtx_def* @expand_expr(%union.tree_node* %298, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call591, %struct.rtx_def** %copy_size_rtx, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %label, align 8
  %299 = load i32, i32* @ptr_mode, align 4
  %300 = load %struct.rtx_def*, %struct.rtx_def** %copy_size_rtx, align 8
  %call592 = call %struct.rtx_def* @convert_to_mode(i32 %299, %struct.rtx_def* %300, i32 0)
  store %struct.rtx_def* %call592, %struct.rtx_def** %copy_size_rtx, align 8
  %301 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %302 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %303 = load %struct.rtx_def*, %struct.rtx_def** %copy_size_rtx, align 8
  %call593 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %301, %struct.rtx_def* %302, %struct.rtx_def* %303)
  %304 = load %struct.rtx_def*, %struct.rtx_def** %copy_size_rtx, align 8
  %305 = bitcast %struct.rtx_def* %304 to i32*
  %bf.load594 = load i32, i32* %305, align 8
  %bf.clear595 = and i32 %bf.load594, 65535
  %cmp596 = icmp eq i32 %bf.clear595, 54
  br i1 %cmp596, label %if.then.598, label %if.else.608

if.then.598:                                      ; preds = %if.else.584
  %306 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %307 = load %struct.rtx_def*, %struct.rtx_def** %copy_size_rtx, align 8
  %fld599 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %307, i32 0, i32 1
  %arrayidx600 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld599, i32 0, i64 0
  %rtwint601 = bitcast %union.rtunion_def* %arrayidx600 to i64*
  %308 = load i64, i64* %rtwint601, align 8
  %sub602 = sub nsw i64 0, %308
  %call603 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %306, i64 %sub602)
  store %struct.rtx_def* %call603, %struct.rtx_def** %size, align 8
  %309 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %310 = load %struct.rtx_def*, %struct.rtx_def** %copy_size_rtx, align 8
  %fld604 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %310, i32 0, i32 1
  %arrayidx605 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld604, i32 0, i64 0
  %rtwint606 = bitcast %union.rtunion_def* %arrayidx605 to i64*
  %311 = load i64, i64* %rtwint606, align 8
  %call607 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %309, i32 51, i64 %311, i32 1, i32 1)
  store %struct.rtx_def* %call607, %struct.rtx_def** %target.addr, align 8
  br label %if.end.621

if.else.608:                                      ; preds = %if.else.584
  %312 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type609 = bitcast %union.tree_node* %312 to %struct.tree_type*
  %mode610 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type609, i32 0, i32 6
  %bf.load611 = load i32, i32* %mode610, align 4
  %bf.lshr612 = lshr i32 %bf.load611, 9
  %bf.clear613 = and i32 %bf.lshr612, 127
  %313 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  %314 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %315 = load %struct.rtx_def*, %struct.rtx_def** %copy_size_rtx, align 8
  %call614 = call %struct.rtx_def* @expand_binop(i32 %bf.clear613, %struct.optab* %313, %struct.rtx_def* %314, %struct.rtx_def* %315, %struct.rtx_def* null, i32 0, i32 3)
  store %struct.rtx_def* %call614, %struct.rtx_def** %size, align 8
  %316 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %317 = load %struct.rtx_def*, %struct.rtx_def** %copy_size_rtx, align 8
  %318 = load %union.tree_node*, %union.tree_node** %copy_size, align 8
  %call615 = call i64 @highest_pow2_factor(%union.tree_node* %318)
  %call616 = call %struct.rtx_def* @offset_address(%struct.rtx_def* %316, %struct.rtx_def* %317, i64 %call615)
  store %struct.rtx_def* %call616, %struct.rtx_def** %target.addr, align 8
  %call617 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call617, %struct.rtx_def** %label, align 8
  %319 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %320 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %321 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %322 = bitcast %struct.rtx_def* %321 to i32*
  %bf.load618 = load i32, i32* %322, align 8
  %bf.lshr619 = lshr i32 %bf.load618, 16
  %bf.clear620 = and i32 %bf.lshr619, 255
  %323 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %319, %struct.rtx_def* %320, i32 107, %struct.rtx_def* null, i32 %bf.clear620, i32 0, %struct.rtx_def* %323)
  br label %if.end.621

if.end.621:                                       ; preds = %if.else.608, %if.then.598
  %324 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %325 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp622 = icmp ne %struct.rtx_def* %324, %325
  br i1 %cmp622, label %if.then.624, label %if.end.626

if.then.624:                                      ; preds = %if.end.621
  %326 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %327 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8
  %call625 = call %struct.rtx_def* @clear_storage(%struct.rtx_def* %326, %struct.rtx_def* %327)
  br label %if.end.626

if.end.626:                                       ; preds = %if.then.624, %if.end.621
  %328 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool627 = icmp ne %struct.rtx_def* %328, null
  br i1 %tobool627, label %if.then.628, label %if.end.630

if.then.628:                                      ; preds = %if.end.626
  %329 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call629 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %329)
  br label %if.end.630

if.end.630:                                       ; preds = %if.then.628, %if.end.626
  br label %if.end.631

if.end.631:                                       ; preds = %if.end.630, %if.then.582
  br label %if.end.655

if.else.632:                                      ; preds = %land.lhs.true.563, %if.else.557
  %330 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %331 = bitcast %struct.rtx_def* %330 to i32*
  %bf.load633 = load i32, i32* %331, align 8
  %bf.clear634 = and i32 %bf.load633, 65535
  %cmp635 = icmp eq i32 %bf.clear634, 39
  br i1 %cmp635, label %if.then.637, label %if.else.642

if.then.637:                                      ; preds = %if.else.632
  %332 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %333 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %334 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common638 = bitcast %union.tree_node* %334 to %struct.tree_common*
  %type639 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common638, i32 0, i32 1
  %335 = load %union.tree_node*, %union.tree_node** %type639, align 8
  %call640 = call i64 @int_size_in_bytes(%union.tree_node* %335)
  %conv641 = trunc i64 %call640 to i32
  call void @emit_group_load(%struct.rtx_def* %332, %struct.rtx_def* %333, i32 %conv641)
  br label %if.end.654

if.else.642:                                      ; preds = %if.else.632
  %336 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %337 = bitcast %struct.rtx_def* %336 to i32*
  %bf.load643 = load i32, i32* %337, align 8
  %bf.lshr644 = lshr i32 %bf.load643, 16
  %bf.clear645 = and i32 %bf.lshr644, 255
  %cmp646 = icmp eq i32 %bf.clear645, 51
  br i1 %cmp646, label %if.then.648, label %if.else.651

if.then.648:                                      ; preds = %if.else.642
  %338 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %339 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %340 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call649 = call %struct.rtx_def* @expr_size(%union.tree_node* %340)
  %call650 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %338, %struct.rtx_def* %339, %struct.rtx_def* %call649)
  br label %if.end.653

if.else.651:                                      ; preds = %if.else.642
  %341 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %342 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call652 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %341, %struct.rtx_def* %342)
  br label %if.end.653

if.end.653:                                       ; preds = %if.else.651, %if.then.648
  br label %if.end.654

if.end.654:                                       ; preds = %if.end.653, %if.then.637
  br label %if.end.655

if.end.655:                                       ; preds = %if.end.654, %if.end.631
  br label %if.end.656

if.end.656:                                       ; preds = %if.end.655, %if.end.556
  br label %if.end.657

if.end.657:                                       ; preds = %if.end.656, %cond.end.520, %land.lhs.true.494, %land.lhs.true.488, %lor.lhs.false.485, %lor.lhs.false.480
  %343 = load i32, i32* %want_value.addr, align 4
  %tobool658 = icmp ne i32 %343, 0
  br i1 %tobool658, label %if.else.660, label %if.then.659

if.then.659:                                      ; preds = %if.end.657
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.else.660:                                      ; preds = %if.end.657
  %344 = load i32, i32* %dont_return_target, align 4
  %tobool661 = icmp ne i32 %344, 0
  br i1 %tobool661, label %land.lhs.true.662, label %if.else.668

land.lhs.true.662:                                ; preds = %if.else.660
  %345 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %346 = bitcast %struct.rtx_def* %345 to i32*
  %bf.load663 = load i32, i32* %346, align 8
  %bf.clear664 = and i32 %bf.load663, 65535
  %cmp665 = icmp ne i32 %bf.clear664, 66
  br i1 %cmp665, label %if.then.667, label %if.else.668

if.then.667:                                      ; preds = %land.lhs.true.662
  %347 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %347, %struct.rtx_def** %retval
  br label %return

if.else.668:                                      ; preds = %land.lhs.true.662, %if.else.660
  %348 = load i32, i32* %want_value.addr, align 4
  %tobool669 = icmp ne i32 %348, 0
  br i1 %tobool669, label %land.lhs.true.670, label %if.else.689

land.lhs.true.670:                                ; preds = %if.else.668
  %349 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %350 = bitcast %struct.rtx_def* %349 to i32*
  %bf.load671 = load i32, i32* %350, align 8
  %bf.lshr672 = lshr i32 %bf.load671, 16
  %bf.clear673 = and i32 %bf.lshr672, 255
  %cmp674 = icmp ne i32 %bf.clear673, 51
  br i1 %cmp674, label %land.lhs.true.676, label %if.else.689

land.lhs.true.676:                                ; preds = %land.lhs.true.670
  %351 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %352 = bitcast %struct.rtx_def* %351 to i32*
  %bf.load677 = load i32, i32* %352, align 8
  %bf.clear678 = and i32 %bf.load677, 65535
  %cmp679 = icmp eq i32 %bf.clear678, 61
  br i1 %cmp679, label %land.lhs.true.681, label %if.then.687

land.lhs.true.681:                                ; preds = %land.lhs.true.676
  %353 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld682 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %353, i32 0, i32 1
  %arrayidx683 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld682, i32 0, i64 0
  %rtuint684 = bitcast %union.rtunion_def* %arrayidx683 to i32*
  %354 = load i32, i32* %rtuint684, align 4
  %cmp685 = icmp ult i32 %354, 53
  br i1 %cmp685, label %if.else.689, label %if.then.687

if.then.687:                                      ; preds = %land.lhs.true.681, %land.lhs.true.676
  %355 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call688 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %355)
  store %struct.rtx_def* %call688, %struct.rtx_def** %retval
  br label %return

if.else.689:                                      ; preds = %land.lhs.true.681, %land.lhs.true.670, %if.else.668
  %356 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %356, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else.689, %if.then.687, %if.then.667, %if.then.659, %cond.end.335, %cond.end, %if.then
  %357 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %357
}

declare %struct.rtx_def* @gen_label_rtx() #1

; Function Attrs: nounwind uwtable
define void @do_pending_stack_adjust() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 2
  %1 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1, i32 0, i32 1
  %2 = load i32, i32* %x_inhibit_defer_pop, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %expr1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 2
  %4 = load %struct.expr_status*, %struct.expr_status** %expr1, align 8
  %x_pending_stack_adjust = getelementptr inbounds %struct.expr_status, %struct.expr_status* %4, i32 0, i32 0
  %5 = load i32, i32* %x_pending_stack_adjust, align 4
  %cmp2 = icmp ne i32 %5, 0
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %expr4 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 2
  %7 = load %struct.expr_status*, %struct.expr_status** %expr4, align 8
  %x_pending_stack_adjust5 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %7, i32 0, i32 0
  %8 = load i32, i32* %x_pending_stack_adjust5, align 4
  %conv = sext i32 %8 to i64
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  call void @adjust_stack(%struct.rtx_def* %call)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  %expr6 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 2
  %10 = load %struct.expr_status*, %struct.expr_status** %expr6, align 8
  %x_pending_stack_adjust7 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %10, i32 0, i32 0
  store i32 0, i32* %x_pending_stack_adjust7, align 4
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @jumpifnot(%union.tree_node* %exp, %struct.rtx_def* %label) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %label.addr = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @do_jump(%union.tree_node* %0, %struct.rtx_def* %1, %struct.rtx_def* null)
  ret void
}

declare void @start_cleanup_deferral() #1

declare void @end_cleanup_deferral() #1

declare %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_jump(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit_barrier() #1

declare %struct.rtx_def* @emit_label(%struct.rtx_def*) #1

declare i32 @side_effects_p(%struct.rtx_def*) #1

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @signed_or_unsigned_type(i32, %union.tree_node*) #1

declare %union.tree_node* @type_for_mode(i32, i32) #1

declare %struct.rtx_def* @gen_lowpart_SUBREG(i32, %struct.rtx_def*) #1

declare %union.tree_node* @size_binop(i32, %union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal i64 @highest_pow2_factor(%union.tree_node* %exp) #0 {
entry:
  %retval = alloca i64, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %c0 = alloca i64, align 8
  %c1 = alloca i64, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 25, label %sw.bb
    i32 59, label %sw.bb.6
    i32 60, label %sw.bb.6
    i32 78, label %sw.bb.6
    i32 79, label %sw.bb.6
    i32 61, label %sw.bb.16
    i32 65, label %sw.bb.25
    i32 62, label %sw.bb.25
    i32 64, label %sw.bb.25
    i32 63, label %sw.bb.25
    i32 116, label %sw.bb.51
    i32 115, label %sw.bb.51
    i32 114, label %sw.bb.51
    i32 118, label %sw.bb.51
    i32 58, label %sw.bb.51
    i32 47, label %sw.bb.56
    i32 51, label %sw.bb.61
  ]

sw.bb:                                            ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load2 = load i32, i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load2, 18
  %bf.clear3 = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear3, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb
  store i64 128, i64* %retval
  br label %return

if.else:                                          ; preds = %sw.bb
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %int_cst = bitcast %union.tree_node* %2 to %struct.tree_int_cst*
  %int_cst4 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst4, i32 0, i32 0
  %3 = load i64, i64* %low, align 8
  store i64 %3, i64* %c0, align 8
  %4 = load i64, i64* %c0, align 8
  %sub = sub nsw i64 0, %4
  %5 = load i64, i64* %c0, align 8
  %and = and i64 %5, %sub
  store i64 %and, i64* %c0, align 8
  %6 = load i64, i64* %c0, align 8
  %tobool5 = icmp ne i64 %6, 0
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %7 = load i64, i64* %c0, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ 128, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

sw.bb.6:                                          ; preds = %entry, %entry, %entry, %entry
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp7 = bitcast %union.tree_node* %8 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %call = call i64 @highest_pow2_factor(%union.tree_node* %9)
  store i64 %call, i64* %c0, align 8
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp8 = bitcast %union.tree_node* %10 to %struct.tree_exp*
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 2
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i32 0, i64 1
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8
  %call11 = call i64 @highest_pow2_factor(%union.tree_node* %11)
  store i64 %call11, i64* %c1, align 8
  %12 = load i64, i64* %c0, align 8
  %13 = load i64, i64* %c1, align 8
  %cmp = icmp slt i64 %12, %13
  br i1 %cmp, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %sw.bb.6
  %14 = load i64, i64* %c0, align 8
  br label %cond.end.14

cond.false.13:                                    ; preds = %sw.bb.6
  %15 = load i64, i64* %c1, align 8
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.12
  %cond15 = phi i64 [ %14, %cond.true.12 ], [ %15, %cond.false.13 ]
  store i64 %cond15, i64* %retval
  br label %return

sw.bb.16:                                         ; preds = %entry
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp17 = bitcast %union.tree_node* %16 to %struct.tree_exp*
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 2
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i32 0, i64 0
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8
  %call20 = call i64 @highest_pow2_factor(%union.tree_node* %17)
  store i64 %call20, i64* %c0, align 8
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp21 = bitcast %union.tree_node* %18 to %struct.tree_exp*
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 2
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i32 0, i64 1
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8
  %call24 = call i64 @highest_pow2_factor(%union.tree_node* %19)
  store i64 %call24, i64* %c1, align 8
  %20 = load i64, i64* %c0, align 8
  %21 = load i64, i64* %c1, align 8
  %mul = mul nsw i64 %20, %21
  store i64 %mul, i64* %retval
  br label %return

sw.bb.25:                                         ; preds = %entry, %entry, %entry, %entry
  %22 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp26 = bitcast %union.tree_node* %22 to %struct.tree_exp*
  %operands27 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 2
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands27, i32 0, i64 1
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8
  %call29 = call i32 @integer_pow2p(%union.tree_node* %23)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.25
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp31 = bitcast %union.tree_node* %24 to %struct.tree_exp*
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 2
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i32 0, i64 1
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8
  %call34 = call i32 @host_integerp(%union.tree_node* %25, i32 1)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.then.36, label %if.end

if.then.36:                                       ; preds = %land.lhs.true
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp37 = bitcast %union.tree_node* %26 to %struct.tree_exp*
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 2
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i32 0, i64 0
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8
  %call40 = call i64 @highest_pow2_factor(%union.tree_node* %27)
  store i64 %call40, i64* %c0, align 8
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp41 = bitcast %union.tree_node* %28 to %struct.tree_exp*
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 2
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i32 0, i64 1
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8
  %call44 = call i64 @tree_low_cst(%union.tree_node* %29, i32 1)
  store i64 %call44, i64* %c1, align 8
  %30 = load i64, i64* %c0, align 8
  %31 = load i64, i64* %c1, align 8
  %div = sdiv i64 %30, %31
  %cmp45 = icmp sgt i64 1, %div
  br i1 %cmp45, label %cond.true.46, label %cond.false.47

cond.true.46:                                     ; preds = %if.then.36
  br label %cond.end.49

cond.false.47:                                    ; preds = %if.then.36
  %32 = load i64, i64* %c0, align 8
  %33 = load i64, i64* %c1, align 8
  %div48 = sdiv i64 %32, %33
  br label %cond.end.49

cond.end.49:                                      ; preds = %cond.false.47, %cond.true.46
  %cond50 = phi i64 [ 1, %cond.true.46 ], [ %div48, %cond.false.47 ]
  store i64 %cond50, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %sw.bb.25
  br label %sw.epilog

sw.bb.51:                                         ; preds = %entry, %entry, %entry, %entry, %entry
  %34 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp52 = bitcast %union.tree_node* %34 to %struct.tree_exp*
  %operands53 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp52, i32 0, i32 2
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands53, i32 0, i64 0
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx54, align 8
  %call55 = call i64 @highest_pow2_factor(%union.tree_node* %35)
  store i64 %call55, i64* %retval
  br label %return

sw.bb.56:                                         ; preds = %entry
  %36 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp57 = bitcast %union.tree_node* %36 to %struct.tree_exp*
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 2
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i32 0, i64 1
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8
  %call60 = call i64 @highest_pow2_factor(%union.tree_node* %37)
  store i64 %call60, i64* %retval
  br label %return

sw.bb.61:                                         ; preds = %entry
  %38 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp62 = bitcast %union.tree_node* %38 to %struct.tree_exp*
  %operands63 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp62, i32 0, i32 2
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands63, i32 0, i64 1
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8
  %call65 = call i64 @highest_pow2_factor(%union.tree_node* %39)
  store i64 %call65, i64* %c0, align 8
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp66 = bitcast %union.tree_node* %40 to %struct.tree_exp*
  %operands67 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp66, i32 0, i32 2
  %arrayidx68 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands67, i32 0, i64 2
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx68, align 8
  %call69 = call i64 @highest_pow2_factor(%union.tree_node* %41)
  store i64 %call69, i64* %c1, align 8
  %42 = load i64, i64* %c0, align 8
  %43 = load i64, i64* %c1, align 8
  %cmp70 = icmp slt i64 %42, %43
  br i1 %cmp70, label %cond.true.71, label %cond.false.72

cond.true.71:                                     ; preds = %sw.bb.61
  %44 = load i64, i64* %c0, align 8
  br label %cond.end.73

cond.false.72:                                    ; preds = %sw.bb.61
  %45 = load i64, i64* %c1, align 8
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.72, %cond.true.71
  %cond74 = phi i64 [ %44, %cond.true.71 ], [ %45, %cond.false.72 ]
  store i64 %cond74, i64* %retval
  br label %return

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end
  store i64 1, i64* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %cond.end.73, %sw.bb.56, %sw.bb.51, %cond.end.49, %sw.bb.16, %cond.end.14, %cond.end, %if.then
  %46 = load i64, i64* %retval
  ret i64 %46
}

declare void @emit_cmp_and_jump_insns(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, %struct.rtx_def*) #1

declare i32 @host_integerp(%union.tree_node*, i32) #1

declare i64 @tree_low_cst(%union.tree_node*, i32) #1

declare i32 @contains_placeholder_p(%union.tree_node*) #1

declare i32 @integer_zerop(%union.tree_node*) #1

declare %union.tree_node* @fold(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @find_placeholder(%union.tree_node* %exp, %union.tree_node** %plist) #0 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %plist.addr = alloca %union.tree_node**, align 8
  %type = alloca %union.tree_node*, align 8
  %placeholder_expr = alloca %union.tree_node*, align 8
  %need_type = alloca %union.tree_node*, align 8
  %elt = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %union.tree_node** %plist, %union.tree_node*** %plist.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8
  store %union.tree_node* %1, %union.tree_node** %type, align 8
  %2 = load %union.tree_node**, %union.tree_node*** %plist.addr, align 8
  %tobool = icmp ne %union.tree_node** %2, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node**, %union.tree_node*** %plist.addr, align 8
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8
  %tobool2 = icmp ne %union.tree_node* %4, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load %union.tree_node**, %union.tree_node*** %plist.addr, align 8
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8
  %common3 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 0
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node*, %union.tree_node** @placeholder_list, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %7, %cond.true ], [ %8, %cond.false ]
  store %union.tree_node* %cond, %union.tree_node** %placeholder_expr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.177, %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %placeholder_expr, align 8
  %cmp = icmp ne %union.tree_node* %9, null
  br i1 %cmp, label %for.body, label %for.end.180

for.body:                                         ; preds = %for.cond
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type4 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 15
  %11 = load %union.tree_node*, %union.tree_node** %main_variant, align 8
  store %union.tree_node* %11, %union.tree_node** %need_type, align 8
  %12 = load %union.tree_node*, %union.tree_node** %placeholder_expr, align 8
  %list = bitcast %union.tree_node* %12 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  store %union.tree_node* %13, %union.tree_node** %elt, align 8
  br label %for.cond.5

for.cond.5:                                       ; preds = %cond.end.70, %for.body
  %14 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %cmp6 = icmp ne %union.tree_node* %14, null
  br i1 %cmp6, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.5
  %15 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common8 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 1
  %16 = load %union.tree_node*, %union.tree_node** %type9, align 8
  %type10 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %main_variant11 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 15
  %17 = load %union.tree_node*, %union.tree_node** %main_variant11, align 8
  %18 = load %union.tree_node*, %union.tree_node** %need_type, align 8
  %cmp12 = icmp eq %union.tree_node* %17, %18
  br i1 %cmp12, label %if.then, label %if.end.15

if.then:                                          ; preds = %for.body.7
  %19 = load %union.tree_node**, %union.tree_node*** %plist.addr, align 8
  %tobool13 = icmp ne %union.tree_node** %19, null
  br i1 %tobool13, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.then
  %20 = load %union.tree_node*, %union.tree_node** %placeholder_expr, align 8
  %21 = load %union.tree_node**, %union.tree_node*** %plist.addr, align 8
  store %union.tree_node* %20, %union.tree_node** %21, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.then
  %22 = load %union.tree_node*, %union.tree_node** %elt, align 8
  store %union.tree_node* %22, %union.tree_node** %retval
  br label %return

if.end.15:                                        ; preds = %for.body.7
  br label %for.inc

for.inc:                                          ; preds = %if.end.15
  %23 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common16 = bitcast %union.tree_node* %23 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp17 = icmp eq i32 %bf.clear, 47
  br i1 %cmp17, label %cond.true.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.inc
  %24 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common18 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 51
  br i1 %cmp22, label %cond.true.23, label %cond.false.25

cond.true.23:                                     ; preds = %lor.lhs.false, %for.inc
  %25 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %exp24 = bitcast %union.tree_node* %25 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  br label %cond.end.70

cond.false.25:                                    ; preds = %lor.lhs.false
  %27 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common26 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %code27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2
  %bf.load28 = load i32, i32* %code27, align 8
  %bf.clear29 = and i32 %bf.load28, 255
  %idxprom = sext i32 %bf.clear29 to i64
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %28 = load i8, i8* %arrayidx30, align 1
  %conv = sext i8 %28 to i32
  %cmp31 = icmp eq i32 %conv, 114
  br i1 %cmp31, label %cond.true.63, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %cond.false.25
  %29 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common34 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %code35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2
  %bf.load36 = load i32, i32* %code35, align 8
  %bf.clear37 = and i32 %bf.load36, 255
  %idxprom38 = sext i32 %bf.clear37 to i64
  %arrayidx39 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom38
  %30 = load i8, i8* %arrayidx39, align 1
  %conv40 = sext i8 %30 to i32
  %cmp41 = icmp eq i32 %conv40, 49
  br i1 %cmp41, label %cond.true.63, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %lor.lhs.false.33
  %31 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common44 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %code45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2
  %bf.load46 = load i32, i32* %code45, align 8
  %bf.clear47 = and i32 %bf.load46, 255
  %idxprom48 = sext i32 %bf.clear47 to i64
  %arrayidx49 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom48
  %32 = load i8, i8* %arrayidx49, align 1
  %conv50 = sext i8 %32 to i32
  %cmp51 = icmp eq i32 %conv50, 50
  br i1 %cmp51, label %cond.true.63, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %lor.lhs.false.43
  %33 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common54 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %code55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2
  %bf.load56 = load i32, i32* %code55, align 8
  %bf.clear57 = and i32 %bf.load56, 255
  %idxprom58 = sext i32 %bf.clear57 to i64
  %arrayidx59 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom58
  %34 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %34 to i32
  %cmp61 = icmp eq i32 %conv60, 101
  br i1 %cmp61, label %cond.true.63, label %cond.false.67

cond.true.63:                                     ; preds = %lor.lhs.false.53, %lor.lhs.false.43, %lor.lhs.false.33, %cond.false.25
  %35 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %exp64 = bitcast %union.tree_node* %35 to %struct.tree_exp*
  %operands65 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp64, i32 0, i32 2
  %arrayidx66 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands65, i32 0, i64 0
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx66, align 8
  br label %cond.end.68

cond.false.67:                                    ; preds = %lor.lhs.false.53
  br label %cond.end.68

cond.end.68:                                      ; preds = %cond.false.67, %cond.true.63
  %cond69 = phi %union.tree_node* [ %36, %cond.true.63 ], [ null, %cond.false.67 ]
  br label %cond.end.70

cond.end.70:                                      ; preds = %cond.end.68, %cond.true.23
  %cond71 = phi %union.tree_node* [ %26, %cond.true.23 ], [ %cond69, %cond.end.68 ]
  store %union.tree_node* %cond71, %union.tree_node** %elt, align 8
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  %37 = load %union.tree_node*, %union.tree_node** %placeholder_expr, align 8
  %list72 = bitcast %union.tree_node* %37 to %struct.tree_list*
  %purpose73 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list72, i32 0, i32 1
  %38 = load %union.tree_node*, %union.tree_node** %purpose73, align 8
  store %union.tree_node* %38, %union.tree_node** %elt, align 8
  br label %for.cond.74

for.cond.74:                                      ; preds = %cond.end.174, %for.end
  %39 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %cmp75 = icmp ne %union.tree_node* %39, null
  br i1 %cmp75, label %for.body.77, label %for.end.176

for.body.77:                                      ; preds = %for.cond.74
  %40 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common78 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %type79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 1
  %41 = load %union.tree_node*, %union.tree_node** %type79, align 8
  %common80 = bitcast %union.tree_node* %41 to %struct.tree_common*
  %code81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2
  %bf.load82 = load i32, i32* %code81, align 8
  %bf.clear83 = and i32 %bf.load82, 255
  %cmp84 = icmp eq i32 %bf.clear83, 13
  br i1 %cmp84, label %land.lhs.true.95, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %for.body.77
  %42 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common87 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %type88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 1
  %43 = load %union.tree_node*, %union.tree_node** %type88, align 8
  %common89 = bitcast %union.tree_node* %43 to %struct.tree_common*
  %code90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2
  %bf.load91 = load i32, i32* %code90, align 8
  %bf.clear92 = and i32 %bf.load91, 255
  %cmp93 = icmp eq i32 %bf.clear92, 15
  br i1 %cmp93, label %land.lhs.true.95, label %if.end.108

land.lhs.true.95:                                 ; preds = %lor.lhs.false.86, %for.body.77
  %44 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common96 = bitcast %union.tree_node* %44 to %struct.tree_common*
  %type97 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common96, i32 0, i32 1
  %45 = load %union.tree_node*, %union.tree_node** %type97, align 8
  %common98 = bitcast %union.tree_node* %45 to %struct.tree_common*
  %type99 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 1
  %46 = load %union.tree_node*, %union.tree_node** %type99, align 8
  %type100 = bitcast %union.tree_node* %46 to %struct.tree_type*
  %main_variant101 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type100, i32 0, i32 15
  %47 = load %union.tree_node*, %union.tree_node** %main_variant101, align 8
  %48 = load %union.tree_node*, %union.tree_node** %need_type, align 8
  %cmp102 = icmp eq %union.tree_node* %47, %48
  br i1 %cmp102, label %if.then.104, label %if.end.108

if.then.104:                                      ; preds = %land.lhs.true.95
  %49 = load %union.tree_node**, %union.tree_node*** %plist.addr, align 8
  %tobool105 = icmp ne %union.tree_node** %49, null
  br i1 %tobool105, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %if.then.104
  %50 = load %union.tree_node*, %union.tree_node** %placeholder_expr, align 8
  %51 = load %union.tree_node**, %union.tree_node*** %plist.addr, align 8
  store %union.tree_node* %50, %union.tree_node** %51, align 8
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.106, %if.then.104
  %52 = load %union.tree_node*, %union.tree_node** %need_type, align 8
  %53 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %call = call %union.tree_node* @build1(i32 41, %union.tree_node* %52, %union.tree_node* %53)
  store %union.tree_node* %call, %union.tree_node** %retval
  br label %return

if.end.108:                                       ; preds = %land.lhs.true.95, %lor.lhs.false.86
  br label %for.inc.109

for.inc.109:                                      ; preds = %if.end.108
  %54 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common110 = bitcast %union.tree_node* %54 to %struct.tree_common*
  %code111 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common110, i32 0, i32 2
  %bf.load112 = load i32, i32* %code111, align 8
  %bf.clear113 = and i32 %bf.load112, 255
  %cmp114 = icmp eq i32 %bf.clear113, 47
  br i1 %cmp114, label %cond.true.123, label %lor.lhs.false.116

lor.lhs.false.116:                                ; preds = %for.inc.109
  %55 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common117 = bitcast %union.tree_node* %55 to %struct.tree_common*
  %code118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 2
  %bf.load119 = load i32, i32* %code118, align 8
  %bf.clear120 = and i32 %bf.load119, 255
  %cmp121 = icmp eq i32 %bf.clear120, 51
  br i1 %cmp121, label %cond.true.123, label %cond.false.127

cond.true.123:                                    ; preds = %lor.lhs.false.116, %for.inc.109
  %56 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %exp124 = bitcast %union.tree_node* %56 to %struct.tree_exp*
  %operands125 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp124, i32 0, i32 2
  %arrayidx126 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands125, i32 0, i64 1
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx126, align 8
  br label %cond.end.174

cond.false.127:                                   ; preds = %lor.lhs.false.116
  %58 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common128 = bitcast %union.tree_node* %58 to %struct.tree_common*
  %code129 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common128, i32 0, i32 2
  %bf.load130 = load i32, i32* %code129, align 8
  %bf.clear131 = and i32 %bf.load130, 255
  %idxprom132 = sext i32 %bf.clear131 to i64
  %arrayidx133 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom132
  %59 = load i8, i8* %arrayidx133, align 1
  %conv134 = sext i8 %59 to i32
  %cmp135 = icmp eq i32 %conv134, 114
  br i1 %cmp135, label %cond.true.167, label %lor.lhs.false.137

lor.lhs.false.137:                                ; preds = %cond.false.127
  %60 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common138 = bitcast %union.tree_node* %60 to %struct.tree_common*
  %code139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 2
  %bf.load140 = load i32, i32* %code139, align 8
  %bf.clear141 = and i32 %bf.load140, 255
  %idxprom142 = sext i32 %bf.clear141 to i64
  %arrayidx143 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom142
  %61 = load i8, i8* %arrayidx143, align 1
  %conv144 = sext i8 %61 to i32
  %cmp145 = icmp eq i32 %conv144, 49
  br i1 %cmp145, label %cond.true.167, label %lor.lhs.false.147

lor.lhs.false.147:                                ; preds = %lor.lhs.false.137
  %62 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common148 = bitcast %union.tree_node* %62 to %struct.tree_common*
  %code149 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common148, i32 0, i32 2
  %bf.load150 = load i32, i32* %code149, align 8
  %bf.clear151 = and i32 %bf.load150, 255
  %idxprom152 = sext i32 %bf.clear151 to i64
  %arrayidx153 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom152
  %63 = load i8, i8* %arrayidx153, align 1
  %conv154 = sext i8 %63 to i32
  %cmp155 = icmp eq i32 %conv154, 50
  br i1 %cmp155, label %cond.true.167, label %lor.lhs.false.157

lor.lhs.false.157:                                ; preds = %lor.lhs.false.147
  %64 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common158 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %code159 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common158, i32 0, i32 2
  %bf.load160 = load i32, i32* %code159, align 8
  %bf.clear161 = and i32 %bf.load160, 255
  %idxprom162 = sext i32 %bf.clear161 to i64
  %arrayidx163 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom162
  %65 = load i8, i8* %arrayidx163, align 1
  %conv164 = sext i8 %65 to i32
  %cmp165 = icmp eq i32 %conv164, 101
  br i1 %cmp165, label %cond.true.167, label %cond.false.171

cond.true.167:                                    ; preds = %lor.lhs.false.157, %lor.lhs.false.147, %lor.lhs.false.137, %cond.false.127
  %66 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %exp168 = bitcast %union.tree_node* %66 to %struct.tree_exp*
  %operands169 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp168, i32 0, i32 2
  %arrayidx170 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands169, i32 0, i64 0
  %67 = load %union.tree_node*, %union.tree_node** %arrayidx170, align 8
  br label %cond.end.172

cond.false.171:                                   ; preds = %lor.lhs.false.157
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.false.171, %cond.true.167
  %cond173 = phi %union.tree_node* [ %67, %cond.true.167 ], [ null, %cond.false.171 ]
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.end.172, %cond.true.123
  %cond175 = phi %union.tree_node* [ %57, %cond.true.123 ], [ %cond173, %cond.end.172 ]
  store %union.tree_node* %cond175, %union.tree_node** %elt, align 8
  br label %for.cond.74

for.end.176:                                      ; preds = %for.cond.74
  br label %for.inc.177

for.inc.177:                                      ; preds = %for.end.176
  %68 = load %union.tree_node*, %union.tree_node** %placeholder_expr, align 8
  %common178 = bitcast %union.tree_node* %68 to %struct.tree_common*
  %chain179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 0
  %69 = load %union.tree_node*, %union.tree_node** %chain179, align 8
  store %union.tree_node* %69, %union.tree_node** %placeholder_expr, align 8
  br label %for.cond

for.end.180:                                      ; preds = %for.cond
  store %union.tree_node* null, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %for.end.180, %if.end.107, %if.end
  %70 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %70
}

; Function Attrs: nounwind uwtable
define i32 @handled_component_p(%union.tree_node* %t) #0 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 40, label %sw.bb
    i32 39, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 115, label %sw.bb.1
    i32 114, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %common2 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 1
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 6
  %bf.load4 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load4, 9
  %bf.clear5 = and i32 %bf.lshr, 127
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %common6 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 1
  %5 = load %union.tree_node*, %union.tree_node** %type7, align 8
  %type8 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %mode9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6
  %bf.load10 = load i32, i32* %mode9, align 4
  %bf.lshr11 = lshr i32 %bf.load10, 9
  %bf.clear12 = and i32 %bf.lshr11, 127
  %cmp = icmp eq i32 %bf.clear5, %bf.clear12
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.1, %sw.bb
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @force_operand(%struct.rtx_def* %value, %struct.rtx_def* %target) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %value.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %binoptab = alloca %struct.optab*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %subtarget = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store %struct.optab* null, %struct.optab** %binoptab, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call = call %struct.rtx_def* @get_subtarget(%struct.rtx_def* %0)
  store %struct.rtx_def* %call, %struct.rtx_def** %subtarget, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 75
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load3 = load i32, i32* %4, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 76
  br i1 %cmp5, label %land.lhs.true, label %if.end.33

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %cmp6 = icmp eq %struct.rtx_def* %6, %7
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.33

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 1
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load11 = load i32, i32* %10, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 68
  br i1 %cmp13, label %if.then, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %land.lhs.true.7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 1
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load18 = load i32, i32* %13, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 67
  br i1 %cmp20, label %if.then, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %lor.lhs.false.14
  %14 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 1
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load25 = load i32, i32* %16, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 58
  br i1 %cmp27, label %if.then, label %if.end.33

if.then:                                          ; preds = %lor.lhs.false.21, %lor.lhs.false.14, %land.lhs.true.7
  %17 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %tobool = icmp ne %struct.rtx_def* %17, null
  br i1 %tobool, label %if.end, label %if.then.28

if.then.28:                                       ; preds = %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load29 = load i32, i32* %19, align 8
  %bf.lshr = lshr i32 %bf.load29, 16
  %bf.clear30 = and i32 %bf.lshr, 255
  %call31 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear30)
  store %struct.rtx_def* %call31, %struct.rtx_def** %subtarget, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.28, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %call32 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %20, %struct.rtx_def* %21)
  %22 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %retval
  br label %return

if.end.33:                                        ; preds = %lor.lhs.false.21, %land.lhs.true, %lor.lhs.false
  %23 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load34 = load i32, i32* %24, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp eq i32 %bf.clear35, 75
  br i1 %cmp36, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %if.end.33
  %25 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  store %struct.optab* %25, %struct.optab** %binoptab, align 8
  br label %if.end.100

if.else:                                          ; preds = %if.end.33
  %26 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load38 = load i32, i32* %27, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 76
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %if.else
  %28 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  store %struct.optab* %28, %struct.optab** %binoptab, align 8
  br label %if.end.99

if.else.42:                                       ; preds = %if.else
  %29 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load43 = load i32, i32* %30, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 78
  br i1 %cmp45, label %if.then.46, label %if.end.98

if.then.46:                                       ; preds = %if.else.42
  %31 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 1
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  store %struct.rtx_def* %32, %struct.rtx_def** %op2, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load50 = load i32, i32* %34, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 67
  br i1 %cmp52, label %if.end.88, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %if.then.46
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load54 = load i32, i32* %36, align 8
  %bf.clear55 = and i32 %bf.load54, 65535
  %cmp56 = icmp eq i32 %bf.clear55, 68
  br i1 %cmp56, label %if.end.88, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %lor.lhs.false.53
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load58 = load i32, i32* %38, align 8
  %bf.clear59 = and i32 %bf.load58, 65535
  %cmp60 = icmp eq i32 %bf.clear59, 54
  br i1 %cmp60, label %if.end.88, label %lor.lhs.false.61

lor.lhs.false.61:                                 ; preds = %lor.lhs.false.57
  %39 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load62 = load i32, i32* %40, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 55
  br i1 %cmp64, label %if.end.88, label %lor.lhs.false.65

lor.lhs.false.65:                                 ; preds = %lor.lhs.false.61
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load66 = load i32, i32* %42, align 8
  %bf.clear67 = and i32 %bf.load66, 65535
  %cmp68 = icmp eq i32 %bf.clear67, 58
  br i1 %cmp68, label %if.end.88, label %lor.lhs.false.69

lor.lhs.false.69:                                 ; preds = %lor.lhs.false.65
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load70 = load i32, i32* %44, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 134
  br i1 %cmp72, label %if.end.88, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %lor.lhs.false.69
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load74 = load i32, i32* %46, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 56
  br i1 %cmp76, label %if.end.88, label %lor.lhs.false.77

lor.lhs.false.77:                                 ; preds = %lor.lhs.false.73
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load78 = load i32, i32* %48, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  %cmp80 = icmp eq i32 %bf.clear79, 140
  br i1 %cmp80, label %if.end.88, label %land.lhs.true.81

land.lhs.true.81:                                 ; preds = %lor.lhs.false.77
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load82 = load i32, i32* %50, align 8
  %bf.clear83 = and i32 %bf.load82, 65535
  %cmp84 = icmp eq i32 %bf.clear83, 61
  br i1 %cmp84, label %land.lhs.true.85, label %if.then.87

land.lhs.true.85:                                 ; preds = %land.lhs.true.81
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %cmp86 = icmp ne %struct.rtx_def* %51, %52
  br i1 %cmp86, label %if.end.88, label %if.then.87

if.then.87:                                       ; preds = %land.lhs.true.85, %land.lhs.true.81
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %land.lhs.true.85, %lor.lhs.false.77, %lor.lhs.false.73, %lor.lhs.false.69, %lor.lhs.false.65, %lor.lhs.false.61, %lor.lhs.false.57, %lor.lhs.false.53, %if.then.46
  %53 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 0
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call92 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %54, %struct.rtx_def* %55)
  store %struct.rtx_def* %call92, %struct.rtx_def** %tmp, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %bf.load93 = load i32, i32* %57, align 8
  %bf.lshr94 = lshr i32 %bf.load93, 16
  %bf.clear95 = and i32 %bf.lshr94, 255
  %58 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call96 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %59, %struct.rtx_def* null)
  %60 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call97 = call %struct.rtx_def* @expand_mult(i32 %bf.clear95, %struct.rtx_def* %58, %struct.rtx_def* %call96, %struct.rtx_def* %60, i32 1)
  store %struct.rtx_def* %call97, %struct.rtx_def** %retval
  br label %return

if.end.98:                                        ; preds = %if.else.42
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %if.then.41
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.then.37
  %61 = load %struct.optab*, %struct.optab** %binoptab, align 8
  %tobool101 = icmp ne %struct.optab* %61, null
  br i1 %tobool101, label %if.then.102, label %if.end.232

if.then.102:                                      ; preds = %if.end.100
  %62 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i32 0, i64 1
  %rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx105, align 8
  store %struct.rtx_def* %63, %struct.rtx_def** %op2, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %65 = bitcast %struct.rtx_def* %64 to i32*
  %bf.load106 = load i32, i32* %65, align 8
  %bf.clear107 = and i32 %bf.load106, 65535
  %cmp108 = icmp eq i32 %bf.clear107, 67
  br i1 %cmp108, label %if.end.144, label %lor.lhs.false.109

lor.lhs.false.109:                                ; preds = %if.then.102
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load110 = load i32, i32* %67, align 8
  %bf.clear111 = and i32 %bf.load110, 65535
  %cmp112 = icmp eq i32 %bf.clear111, 68
  br i1 %cmp112, label %if.end.144, label %lor.lhs.false.113

lor.lhs.false.113:                                ; preds = %lor.lhs.false.109
  %68 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %69 = bitcast %struct.rtx_def* %68 to i32*
  %bf.load114 = load i32, i32* %69, align 8
  %bf.clear115 = and i32 %bf.load114, 65535
  %cmp116 = icmp eq i32 %bf.clear115, 54
  br i1 %cmp116, label %if.end.144, label %lor.lhs.false.117

lor.lhs.false.117:                                ; preds = %lor.lhs.false.113
  %70 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %71 = bitcast %struct.rtx_def* %70 to i32*
  %bf.load118 = load i32, i32* %71, align 8
  %bf.clear119 = and i32 %bf.load118, 65535
  %cmp120 = icmp eq i32 %bf.clear119, 55
  br i1 %cmp120, label %if.end.144, label %lor.lhs.false.121

lor.lhs.false.121:                                ; preds = %lor.lhs.false.117
  %72 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %73 = bitcast %struct.rtx_def* %72 to i32*
  %bf.load122 = load i32, i32* %73, align 8
  %bf.clear123 = and i32 %bf.load122, 65535
  %cmp124 = icmp eq i32 %bf.clear123, 58
  br i1 %cmp124, label %if.end.144, label %lor.lhs.false.125

lor.lhs.false.125:                                ; preds = %lor.lhs.false.121
  %74 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %75 = bitcast %struct.rtx_def* %74 to i32*
  %bf.load126 = load i32, i32* %75, align 8
  %bf.clear127 = and i32 %bf.load126, 65535
  %cmp128 = icmp eq i32 %bf.clear127, 134
  br i1 %cmp128, label %if.end.144, label %lor.lhs.false.129

lor.lhs.false.129:                                ; preds = %lor.lhs.false.125
  %76 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load130 = load i32, i32* %77, align 8
  %bf.clear131 = and i32 %bf.load130, 65535
  %cmp132 = icmp eq i32 %bf.clear131, 56
  br i1 %cmp132, label %if.end.144, label %lor.lhs.false.133

lor.lhs.false.133:                                ; preds = %lor.lhs.false.129
  %78 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %79 = bitcast %struct.rtx_def* %78 to i32*
  %bf.load134 = load i32, i32* %79, align 8
  %bf.clear135 = and i32 %bf.load134, 65535
  %cmp136 = icmp eq i32 %bf.clear135, 140
  br i1 %cmp136, label %if.end.144, label %land.lhs.true.137

land.lhs.true.137:                                ; preds = %lor.lhs.false.133
  %80 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %81 = bitcast %struct.rtx_def* %80 to i32*
  %bf.load138 = load i32, i32* %81, align 8
  %bf.clear139 = and i32 %bf.load138, 65535
  %cmp140 = icmp eq i32 %bf.clear139, 61
  br i1 %cmp140, label %land.lhs.true.141, label %if.then.143

land.lhs.true.141:                                ; preds = %land.lhs.true.137
  %82 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %cmp142 = icmp ne %struct.rtx_def* %82, %83
  br i1 %cmp142, label %if.end.144, label %if.then.143

if.then.143:                                      ; preds = %land.lhs.true.141, %land.lhs.true.137
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.144

if.end.144:                                       ; preds = %if.then.143, %land.lhs.true.141, %lor.lhs.false.133, %lor.lhs.false.129, %lor.lhs.false.125, %lor.lhs.false.121, %lor.lhs.false.117, %lor.lhs.false.113, %lor.lhs.false.109, %if.then.102
  %84 = load %struct.optab*, %struct.optab** %binoptab, align 8
  %85 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  %cmp145 = icmp eq %struct.optab* %84, %85
  br i1 %cmp145, label %land.lhs.true.146, label %if.end.155

land.lhs.true.146:                                ; preds = %if.end.144
  %86 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %87 = bitcast %struct.rtx_def* %86 to i32*
  %bf.load147 = load i32, i32* %87, align 8
  %bf.clear148 = and i32 %bf.load147, 65535
  %cmp149 = icmp eq i32 %bf.clear148, 54
  br i1 %cmp149, label %if.then.150, label %if.end.155

if.then.150:                                      ; preds = %land.lhs.true.146
  %88 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  store %struct.optab* %88, %struct.optab** %binoptab, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %90 = bitcast %struct.rtx_def* %89 to i32*
  %bf.load151 = load i32, i32* %90, align 8
  %bf.lshr152 = lshr i32 %bf.load151, 16
  %bf.clear153 = and i32 %bf.lshr152, 255
  %91 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call154 = call %struct.rtx_def* @negate_rtx(i32 %bf.clear153, %struct.rtx_def* %91)
  store %struct.rtx_def* %call154, %struct.rtx_def** %op2, align 8
  br label %if.end.155

if.end.155:                                       ; preds = %if.then.150, %land.lhs.true.146, %if.end.144
  %92 = load %struct.optab*, %struct.optab** %binoptab, align 8
  %93 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  %cmp156 = icmp eq %struct.optab* %92, %93
  br i1 %cmp156, label %land.lhs.true.157, label %if.end.222

land.lhs.true.157:                                ; preds = %if.end.155
  %94 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load158 = load i32, i32* %95, align 8
  %bf.clear159 = and i32 %bf.load158, 65535
  %cmp160 = icmp eq i32 %bf.clear159, 54
  br i1 %cmp160, label %land.lhs.true.161, label %if.end.222

land.lhs.true.161:                                ; preds = %land.lhs.true.157
  %96 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i32 0, i64 0
  %rtx164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx164, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load165 = load i32, i32* %98, align 8
  %bf.clear166 = and i32 %bf.load165, 65535
  %cmp167 = icmp eq i32 %bf.clear166, 75
  br i1 %cmp167, label %land.lhs.true.168, label %if.end.222

land.lhs.true.168:                                ; preds = %land.lhs.true.161
  %99 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1
  %arrayidx170 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld169, i32 0, i64 0
  %rtx171 = bitcast %union.rtunion_def* %arrayidx170 to %struct.rtx_def**
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rtx171, align 8
  %fld172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %arrayidx173 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld172, i32 0, i64 0
  %rtx174 = bitcast %union.rtunion_def* %arrayidx173 to %struct.rtx_def**
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtx174, align 8
  %102 = bitcast %struct.rtx_def* %101 to i32*
  %bf.load175 = load i32, i32* %102, align 8
  %bf.clear176 = and i32 %bf.load175, 65535
  %cmp177 = icmp eq i32 %bf.clear176, 61
  br i1 %cmp177, label %land.lhs.true.178, label %if.end.222

land.lhs.true.178:                                ; preds = %land.lhs.true.168
  %103 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx180 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld179, i32 0, i64 0
  %rtx181 = bitcast %union.rtunion_def* %arrayidx180 to %struct.rtx_def**
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rtx181, align 8
  %fld182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i32 0, i64 0
  %rtx184 = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtx_def**
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rtx184, align 8
  %fld185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx186 to i32*
  %106 = load i32, i32* %rtuint, align 4
  %cmp187 = icmp uge i32 %106, 53
  br i1 %cmp187, label %land.lhs.true.188, label %if.end.222

land.lhs.true.188:                                ; preds = %land.lhs.true.178
  %107 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i32 0, i64 0
  %rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtx191, align 8
  %fld192 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i32 0, i64 0
  %rtx194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rtx194, align 8
  %fld195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i32 0, i64 0
  %rtuint197 = bitcast %union.rtunion_def* %arrayidx196 to i32*
  %110 = load i32, i32* %rtuint197, align 4
  %cmp198 = icmp ule i32 %110, 57
  br i1 %cmp198, label %if.then.199, label %if.end.222

if.then.199:                                      ; preds = %land.lhs.true.188
  %111 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %112 = bitcast %struct.rtx_def* %111 to i32*
  %bf.load201 = load i32, i32* %112, align 8
  %bf.lshr202 = lshr i32 %bf.load201, 16
  %bf.clear203 = and i32 %bf.lshr202, 255
  %113 = load %struct.optab*, %struct.optab** %binoptab, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1
  %arrayidx205 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld204, i32 0, i64 0
  %rtx206 = bitcast %union.rtunion_def* %arrayidx205 to %struct.rtx_def**
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rtx206, align 8
  %fld207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i32 0, i64 0
  %rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**
  %116 = load %struct.rtx_def*, %struct.rtx_def** %rtx209, align 8
  %117 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %118 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call210 = call %struct.rtx_def* @expand_binop(i32 %bf.clear203, %struct.optab* %113, %struct.rtx_def* %116, %struct.rtx_def* %117, %struct.rtx_def* %118, i32 0, i32 3)
  store %struct.rtx_def* %call210, %struct.rtx_def** %temp, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %120 = bitcast %struct.rtx_def* %119 to i32*
  %bf.load211 = load i32, i32* %120, align 8
  %bf.lshr212 = lshr i32 %bf.load211, 16
  %bf.clear213 = and i32 %bf.lshr212, 255
  %121 = load %struct.optab*, %struct.optab** %binoptab, align 8
  %122 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %123 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld214 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld214, i32 0, i64 0
  %rtx216 = bitcast %union.rtunion_def* %arrayidx215 to %struct.rtx_def**
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtx216, align 8
  %fld217 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx218 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld217, i32 0, i64 1
  %rtx219 = bitcast %union.rtunion_def* %arrayidx218 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rtx219, align 8
  %call220 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %125, %struct.rtx_def* null)
  %126 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call221 = call %struct.rtx_def* @expand_binop(i32 %bf.clear213, %struct.optab* %121, %struct.rtx_def* %122, %struct.rtx_def* %call220, %struct.rtx_def* %126, i32 0, i32 3)
  store %struct.rtx_def* %call221, %struct.rtx_def** %retval
  br label %return

if.end.222:                                       ; preds = %land.lhs.true.188, %land.lhs.true.178, %land.lhs.true.168, %land.lhs.true.161, %land.lhs.true.157, %if.end.155
  %127 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %arrayidx224 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld223, i32 0, i64 0
  %rtx225 = bitcast %union.rtunion_def* %arrayidx224 to %struct.rtx_def**
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rtx225, align 8
  %129 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call226 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %128, %struct.rtx_def* %129)
  store %struct.rtx_def* %call226, %struct.rtx_def** %tmp, align 8
  %130 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %bf.load227 = load i32, i32* %131, align 8
  %bf.lshr228 = lshr i32 %bf.load227, 16
  %bf.clear229 = and i32 %bf.lshr228, 255
  %132 = load %struct.optab*, %struct.optab** %binoptab, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %call230 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %134, %struct.rtx_def* null)
  %135 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call231 = call %struct.rtx_def* @expand_binop(i32 %bf.clear229, %struct.optab* %132, %struct.rtx_def* %133, %struct.rtx_def* %call230, %struct.rtx_def* %135, i32 0, i32 3)
  store %struct.rtx_def* %call231, %struct.rtx_def** %retval
  br label %return

if.end.232:                                       ; preds = %if.end.100
  %136 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %137 = bitcast %struct.rtx_def* %136 to i32*
  %bf.load233 = load i32, i32* %137, align 8
  %bf.clear234 = and i32 %bf.load233, 65535
  %cmp235 = icmp eq i32 %bf.clear234, 63
  br i1 %cmp235, label %land.lhs.true.236, label %if.end.284

land.lhs.true.236:                                ; preds = %if.end.232
  %138 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1
  %arrayidx238 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld237, i32 0, i64 0
  %rtx239 = bitcast %union.rtunion_def* %arrayidx238 to %struct.rtx_def**
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rtx239, align 8
  %140 = bitcast %struct.rtx_def* %139 to i32*
  %bf.load240 = load i32, i32* %140, align 8
  %bf.clear241 = and i32 %bf.load240, 65535
  %cmp242 = icmp eq i32 %bf.clear241, 66
  br i1 %cmp242, label %land.lhs.true.243, label %if.end.284

land.lhs.true.243:                                ; preds = %land.lhs.true.236
  %141 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %142 = bitcast %struct.rtx_def* %141 to i32*
  %bf.load244 = load i32, i32* %142, align 8
  %bf.lshr245 = lshr i32 %bf.load244, 16
  %bf.clear246 = and i32 %bf.lshr245, 255
  %idxprom = sext i32 %bf.clear246 to i64
  %arrayidx247 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %143 = load i8, i8* %arrayidx247, align 1
  %conv = zext i8 %143 to i32
  %144 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld248 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1
  %arrayidx249 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld248, i32 0, i64 0
  %rtx250 = bitcast %union.rtunion_def* %arrayidx249 to %struct.rtx_def**
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rtx250, align 8
  %146 = bitcast %struct.rtx_def* %145 to i32*
  %bf.load251 = load i32, i32* %146, align 8
  %bf.lshr252 = lshr i32 %bf.load251, 16
  %bf.clear253 = and i32 %bf.lshr252, 255
  %idxprom254 = sext i32 %bf.clear253 to i64
  %arrayidx255 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom254
  %147 = load i8, i8* %arrayidx255, align 1
  %conv256 = zext i8 %147 to i32
  %cmp257 = icmp sgt i32 %conv, %conv256
  br i1 %cmp257, label %if.then.259, label %if.end.284

if.then.259:                                      ; preds = %land.lhs.true.243
  %148 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %149 = bitcast %struct.rtx_def* %148 to i32*
  %bf.load260 = load i32, i32* %149, align 8
  %bf.lshr261 = lshr i32 %bf.load260, 16
  %bf.clear262 = and i32 %bf.lshr261, 255
  %150 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i32 0, i64 0
  %rtx265 = bitcast %union.rtunion_def* %arrayidx264 to %struct.rtx_def**
  %151 = load %struct.rtx_def*, %struct.rtx_def** %rtx265, align 8
  %152 = bitcast %struct.rtx_def* %151 to i32*
  %bf.load266 = load i32, i32* %152, align 8
  %bf.lshr267 = lshr i32 %bf.load266, 16
  %bf.clear268 = and i32 %bf.lshr267, 255
  %153 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld269 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %153, i32 0, i32 1
  %arrayidx270 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld269, i32 0, i64 0
  %rtx271 = bitcast %union.rtunion_def* %arrayidx270 to %struct.rtx_def**
  %154 = load %struct.rtx_def*, %struct.rtx_def** %rtx271, align 8
  %call272 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %154, %struct.rtx_def* null)
  %call273 = call %struct.rtx_def* @force_reg(i32 %bf.clear268, %struct.rtx_def* %call272)
  %155 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld274 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %155, i32 0, i32 1
  %arrayidx275 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld274, i32 0, i64 0
  %rtx276 = bitcast %union.rtunion_def* %arrayidx275 to %struct.rtx_def**
  %156 = load %struct.rtx_def*, %struct.rtx_def** %rtx276, align 8
  %157 = bitcast %struct.rtx_def* %156 to i32*
  %bf.load277 = load i32, i32* %157, align 8
  %bf.lshr278 = lshr i32 %bf.load277, 16
  %bf.clear279 = and i32 %bf.lshr278, 255
  %158 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  %fld280 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %158, i32 0, i32 1
  %arrayidx281 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld280, i32 0, i64 1
  %rtuint282 = bitcast %union.rtunion_def* %arrayidx281 to i32*
  %159 = load i32, i32* %rtuint282, align 4
  %call283 = call %struct.rtx_def* @simplify_gen_subreg(i32 %bf.clear262, %struct.rtx_def* %call273, i32 %bf.clear279, i32 %159)
  store %struct.rtx_def* %call283, %struct.rtx_def** %value.addr, align 8
  br label %if.end.284

if.end.284:                                       ; preds = %if.then.259, %land.lhs.true.243, %land.lhs.true.236, %if.end.232
  %160 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8
  store %struct.rtx_def* %160, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.284, %if.end.222, %if.then.199, %if.end.88, %if.end
  %161 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %161
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @get_subtarget(%struct.rtx_def* %x) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp ne i32 %bf.clear, 61
  br i1 %cmp1, label %cond.true, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load3 = load i32, i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load3, 26
  %bf.clear4 = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear4, 0
  br i1 %tobool, label %cond.true, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %6 = load i32, i32* %rtuint, align 4
  %cmp6 = icmp ult i32 %6, 53
  br i1 %cmp6, label %cond.true, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false.5
  %call = call i32 @preserve_subexpressions_p()
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.7, %lor.lhs.false.5, %lor.lhs.false.2, %lor.lhs.false, %entry
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false.7
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %7, %cond.false ]
  ret %struct.rtx_def* %cond
}

declare %struct.rtx_def* @expand_mult(i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @negate_rtx(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define i32 @safe_from_p(%struct.rtx_def* %x, %union.tree_node* %exp, i32 %top_p) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %top_p.addr = alloca i32, align 4
  %exp_rtl = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %nops = alloca i32, align 4
  %rtn = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store i32 %top_p, i32* %top_p.addr, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %exp_rtl, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %top_p.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false.41

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8
  %cmp1 = icmp ne %union.tree_node* %3, null
  br i1 %cmp1, label %land.lhs.true.2, label %lor.lhs.false.41

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common3 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1
  %5 = load %union.tree_node*, %union.tree_node** %type4, align 8
  %type5 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 2
  %6 = load %union.tree_node*, %union.tree_node** %size, align 8
  %cmp6 = icmp ne %union.tree_node* %6, null
  br i1 %cmp6, label %land.lhs.true.7, label %lor.lhs.false.41

land.lhs.true.7:                                  ; preds = %land.lhs.true.2
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common8 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %type9, align 8
  %type10 = bitcast %union.tree_node* %8 to %struct.tree_type*
  %size11 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 2
  %9 = load %union.tree_node*, %union.tree_node** %size11, align 8
  %common12 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp13 = icmp ne i32 %bf.clear, 25
  br i1 %cmp13, label %land.lhs.true.14, label %lor.lhs.false.41

land.lhs.true.14:                                 ; preds = %land.lhs.true.7
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common15 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %type16, align 8
  %common17 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %code18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2
  %bf.load19 = load i32, i32* %code18, align 8
  %bf.clear20 = and i32 %bf.load19, 255
  %cmp21 = icmp ne i32 %bf.clear20, 18
  br i1 %cmp21, label %land.lhs.true.37, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %land.lhs.true.14
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common23 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %type24, align 8
  %type25 = bitcast %union.tree_node* %13 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 13
  %14 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %cmp26 = icmp eq %union.tree_node* %14, null
  br i1 %cmp26, label %land.lhs.true.37, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.22
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common28 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 1
  %16 = load %union.tree_node*, %union.tree_node** %type29, align 8
  %type30 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %maxval31 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type30, i32 0, i32 13
  %17 = load %union.tree_node*, %union.tree_node** %maxval31, align 8
  %common32 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %code33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2
  %bf.load34 = load i32, i32* %code33, align 8
  %bf.clear35 = and i32 %bf.load34, 255
  %cmp36 = icmp ne i32 %bf.clear35, 25
  br i1 %cmp36, label %land.lhs.true.37, label %lor.lhs.false.41

land.lhs.true.37:                                 ; preds = %lor.lhs.false.27, %lor.lhs.false.22, %land.lhs.true.14
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load38 = load i32, i32* %19, align 8
  %bf.lshr = lshr i32 %bf.load38, 16
  %bf.clear39 = and i32 %bf.lshr, 255
  %cmp40 = icmp eq i32 %bf.clear39, 51
  br i1 %cmp40, label %if.then, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %land.lhs.true.37, %lor.lhs.false.27, %land.lhs.true.7, %land.lhs.true.2, %land.lhs.true, %lor.lhs.false
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load42 = load i32, i32* %21, align 8
  %bf.clear43 = and i32 %bf.load42, 65535
  %cmp44 = icmp eq i32 %bf.clear43, 66
  br i1 %cmp44, label %land.lhs.true.45, label %if.end

land.lhs.true.45:                                 ; preds = %lor.lhs.false.41
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 9), align 8
  %cmp46 = icmp eq %struct.rtx_def* %23, %24
  br i1 %cmp46, label %if.then, label %lor.lhs.false.47

lor.lhs.false.47:                                 ; preds = %land.lhs.true.45
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load51 = load i32, i32* %27, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %cmp53 = icmp eq i32 %bf.clear52, 75
  br i1 %cmp53, label %land.lhs.true.54, label %if.end

land.lhs.true.54:                                 ; preds = %lor.lhs.false.47
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx57, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 0
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 9), align 8
  %cmp61 = icmp eq %struct.rtx_def* %30, %31
  br i1 %cmp61, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.54, %land.lhs.true.45, %land.lhs.true.37, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.54, %lor.lhs.false.47, %lor.lhs.false.41
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load62 = load i32, i32* %33, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 63
  br i1 %cmp64, label %if.then.65, label %if.end.78

if.then.65:                                       ; preds = %if.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 0
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %x.addr, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load69 = load i32, i32* %37, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 61
  br i1 %cmp71, label %land.lhs.true.72, label %if.end.77

land.lhs.true.72:                                 ; preds = %if.then.65
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx74 to i32*
  %39 = load i32, i32* %rtuint, align 4
  %cmp75 = icmp ult i32 %39, 53
  br i1 %cmp75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %land.lhs.true.72
  store i32 0, i32* %retval
  br label %return

if.end.77:                                        ; preds = %land.lhs.true.72, %if.then.65
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.end
  %40 = load i32, i32* %top_p.addr, align 4
  %tobool79 = icmp ne i32 %40, 0
  br i1 %tobool79, label %if.then.80, label %if.end.86

if.then.80:                                       ; preds = %if.end.78
  store %union.tree_node* null, %union.tree_node** @safe_from_p.save_expr_list, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call = call i32 @safe_from_p(%struct.rtx_def* %41, %union.tree_node* %42, i32 0)
  store i32 %call, i32* %rtn, align 4
  %43 = load %union.tree_node*, %union.tree_node** @safe_from_p.save_expr_list, align 8
  store %union.tree_node* %43, %union.tree_node** %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.80
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8
  %cmp81 = icmp ne %union.tree_node* %44, null
  br i1 %cmp81, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list = bitcast %union.tree_node* %45 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %46 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %common82 = bitcast %union.tree_node* %46 to %struct.tree_common*
  %private_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2
  %bf.load83 = load i32, i32* %private_flag, align 8
  %bf.clear84 = and i32 %bf.load83, -1048577
  store i32 %bf.clear84, i32* %private_flag, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common85 = bitcast %union.tree_node* %47 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 0
  %48 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %48, %union.tree_node** %t, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %49 = load i32, i32* %rtn, align 4
  store i32 %49, i32* %retval
  br label %return

if.end.86:                                        ; preds = %if.end.78
  %50 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common87 = bitcast %union.tree_node* %50 to %struct.tree_common*
  %code88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 2
  %bf.load89 = load i32, i32* %code88, align 8
  %bf.clear90 = and i32 %bf.load89, 255
  %idxprom = sext i32 %bf.clear90 to i64
  %arrayidx91 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %51 = load i8, i8* %arrayidx91, align 1
  %conv = sext i8 %51 to i32
  switch i32 %conv, label %sw.epilog.368 [
    i32 100, label %sw.bb
    i32 99, label %sw.bb.105
    i32 120, label %sw.bb.106
    i32 49, label %sw.bb.138
    i32 50, label %sw.bb.142
    i32 60, label %sw.bb.142
    i32 101, label %sw.bb.156
    i32 114, label %sw.bb.156
  ]

sw.bb:                                            ; preds = %if.end.86
  %52 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl = bitcast %union.tree_node* %52 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp92 = icmp ne %struct.rtx_def* %53, null
  br i1 %cmp92, label %cond.true, label %cond.false.102

cond.true:                                        ; preds = %sw.bb
  %54 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl94 = bitcast %union.tree_node* %54 to %struct.tree_decl*
  %rtl95 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl94, i32 0, i32 17
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtl95, align 8
  %tobool96 = icmp ne %struct.rtx_def* %55, null
  br i1 %tobool96, label %cond.true.97, label %cond.false

cond.true.97:                                     ; preds = %cond.true
  %56 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl98 = bitcast %union.tree_node* %56 to %struct.tree_decl*
  %rtl99 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl98, i32 0, i32 17
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtl99, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %58 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %58, i8* null)
  %59 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl100 = bitcast %union.tree_node* %59 to %struct.tree_decl*
  %rtl101 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl100, i32 0, i32 17
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtl101, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.97
  %cond = phi %struct.rtx_def* [ %57, %cond.true.97 ], [ %60, %cond.false ]
  br label %cond.end.103

cond.false.102:                                   ; preds = %sw.bb
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.false.102, %cond.end
  %cond104 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.102 ]
  store %struct.rtx_def* %cond104, %struct.rtx_def** %exp_rtl, align 8
  br label %sw.epilog.368

sw.bb.105:                                        ; preds = %if.end.86
  store i32 1, i32* %retval
  br label %return

sw.bb.106:                                        ; preds = %if.end.86
  %61 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common107 = bitcast %union.tree_node* %61 to %struct.tree_common*
  %code108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2
  %bf.load109 = load i32, i32* %code108, align 8
  %bf.clear110 = and i32 %bf.load109, 255
  %cmp111 = icmp eq i32 %bf.clear110, 2
  br i1 %cmp111, label %if.then.113, label %if.else

if.then.113:                                      ; preds = %sw.bb.106
  %62 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %list114 = bitcast %union.tree_node* %62 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list114, i32 0, i32 2
  %63 = load %union.tree_node*, %union.tree_node** %value, align 8
  %cmp115 = icmp eq %union.tree_node* %63, null
  br i1 %cmp115, label %land.rhs, label %lor.lhs.false.117

lor.lhs.false.117:                                ; preds = %if.then.113
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %65 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %list118 = bitcast %union.tree_node* %65 to %struct.tree_list*
  %value119 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list118, i32 0, i32 2
  %66 = load %union.tree_node*, %union.tree_node** %value119, align 8
  %call120 = call i32 @safe_from_p(%struct.rtx_def* %64, %union.tree_node* %66, i32 0)
  %tobool121 = icmp ne i32 %call120, 0
  br i1 %tobool121, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.lhs.false.117, %if.then.113
  %67 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common122 = bitcast %union.tree_node* %67 to %struct.tree_common*
  %chain123 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common122, i32 0, i32 0
  %68 = load %union.tree_node*, %union.tree_node** %chain123, align 8
  %cmp124 = icmp eq %union.tree_node* %68, null
  br i1 %cmp124, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %70 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common126 = bitcast %union.tree_node* %70 to %struct.tree_common*
  %chain127 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common126, i32 0, i32 0
  %71 = load %union.tree_node*, %union.tree_node** %chain127, align 8
  %call128 = call i32 @safe_from_p(%struct.rtx_def* %69, %union.tree_node* %71, i32 0)
  %tobool129 = icmp ne i32 %call128, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %72 = phi i1 [ true, %land.rhs ], [ %tobool129, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false.117
  %73 = phi i1 [ false, %lor.lhs.false.117 ], [ %72, %lor.end ]
  %land.ext = zext i1 %73 to i32
  store i32 %land.ext, i32* %retval
  br label %return

if.else:                                          ; preds = %sw.bb.106
  %74 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common130 = bitcast %union.tree_node* %74 to %struct.tree_common*
  %code131 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common130, i32 0, i32 2
  %bf.load132 = load i32, i32* %code131, align 8
  %bf.clear133 = and i32 %bf.load132, 255
  %cmp134 = icmp eq i32 %bf.clear133, 0
  br i1 %cmp134, label %if.then.136, label %if.else.137

if.then.136:                                      ; preds = %if.else
  store i32 1, i32* %retval
  br label %return

if.else.137:                                      ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

sw.bb.138:                                        ; preds = %if.end.86
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %76 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp139 = bitcast %union.tree_node* %76 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp139, i32 0, i32 2
  %arrayidx140 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %77 = load %union.tree_node*, %union.tree_node** %arrayidx140, align 8
  %call141 = call i32 @safe_from_p(%struct.rtx_def* %75, %union.tree_node* %77, i32 0)
  store i32 %call141, i32* %retval
  br label %return

sw.bb.142:                                        ; preds = %if.end.86, %if.end.86
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %79 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp143 = bitcast %union.tree_node* %79 to %struct.tree_exp*
  %operands144 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp143, i32 0, i32 2
  %arrayidx145 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands144, i32 0, i64 0
  %80 = load %union.tree_node*, %union.tree_node** %arrayidx145, align 8
  %call146 = call i32 @safe_from_p(%struct.rtx_def* %78, %union.tree_node* %80, i32 0)
  %tobool147 = icmp ne i32 %call146, 0
  br i1 %tobool147, label %land.rhs.148, label %land.end.154

land.rhs.148:                                     ; preds = %sw.bb.142
  %81 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %82 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp149 = bitcast %union.tree_node* %82 to %struct.tree_exp*
  %operands150 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp149, i32 0, i32 2
  %arrayidx151 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands150, i32 0, i64 1
  %83 = load %union.tree_node*, %union.tree_node** %arrayidx151, align 8
  %call152 = call i32 @safe_from_p(%struct.rtx_def* %81, %union.tree_node* %83, i32 0)
  %tobool153 = icmp ne i32 %call152, 0
  br label %land.end.154

land.end.154:                                     ; preds = %land.rhs.148, %sw.bb.142
  %84 = phi i1 [ false, %sw.bb.142 ], [ %tobool153, %land.rhs.148 ]
  %land.ext155 = zext i1 %84 to i32
  store i32 %land.ext155, i32* %retval
  br label %return

sw.bb.156:                                        ; preds = %if.end.86, %if.end.86
  %85 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common157 = bitcast %union.tree_node* %85 to %struct.tree_common*
  %code158 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common157, i32 0, i32 2
  %bf.load159 = load i32, i32* %code158, align 8
  %bf.clear160 = and i32 %bf.load159, 255
  switch i32 %bf.clear160, label %sw.default [
    i32 121, label %sw.bb.161
    i32 41, label %sw.bb.232
    i32 53, label %sw.bb.254
    i32 120, label %sw.bb.272
    i32 55, label %sw.bb.282
    i32 56, label %sw.bb.286
    i32 118, label %sw.bb.291
    i32 52, label %sw.bb.322
    i32 54, label %sw.bb.327
  ]

sw.bb.161:                                        ; preds = %sw.bb.156
  %86 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp162 = bitcast %union.tree_node* %86 to %struct.tree_exp*
  %operands163 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp162, i32 0, i32 2
  %arrayidx164 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands163, i32 0, i64 0
  %87 = load %union.tree_node*, %union.tree_node** %arrayidx164, align 8
  %call165 = call i32 @staticp(%union.tree_node* %87)
  %tobool166 = icmp ne i32 %call165, 0
  br i1 %tobool166, label %if.then.179, label %lor.lhs.false.167

lor.lhs.false.167:                                ; preds = %sw.bb.161
  %88 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common168 = bitcast %union.tree_node* %88 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common168, i32 0, i32 2
  %bf.load169 = load i32, i32* %static_flag, align 8
  %bf.lshr170 = lshr i32 %bf.load169, 18
  %bf.clear171 = and i32 %bf.lshr170, 1
  %tobool172 = icmp ne i32 %bf.clear171, 0
  br i1 %tobool172, label %if.then.179, label %lor.lhs.false.173

lor.lhs.false.173:                                ; preds = %lor.lhs.false.167
  %89 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %90 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp174 = bitcast %union.tree_node* %90 to %struct.tree_exp*
  %operands175 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp174, i32 0, i32 2
  %arrayidx176 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands175, i32 0, i64 0
  %91 = load %union.tree_node*, %union.tree_node** %arrayidx176, align 8
  %call177 = call i32 @safe_from_p(%struct.rtx_def* %89, %union.tree_node* %91, i32 0)
  %tobool178 = icmp ne i32 %call177, 0
  br i1 %tobool178, label %if.then.179, label %if.end.180

if.then.179:                                      ; preds = %lor.lhs.false.173, %lor.lhs.false.167, %sw.bb.161
  store i32 1, i32* %retval
  br label %return

if.end.180:                                       ; preds = %lor.lhs.false.173
  %92 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp181 = bitcast %union.tree_node* %92 to %struct.tree_exp*
  %operands182 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp181, i32 0, i32 2
  %arrayidx183 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands182, i32 0, i64 0
  %93 = load %union.tree_node*, %union.tree_node** %arrayidx183, align 8
  store %union.tree_node* %93, %union.tree_node** %exp.addr, align 8
  %94 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common184 = bitcast %union.tree_node* %94 to %struct.tree_common*
  %code185 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common184, i32 0, i32 2
  %bf.load186 = load i32, i32* %code185, align 8
  %bf.clear187 = and i32 %bf.load186, 255
  %idxprom188 = sext i32 %bf.clear187 to i64
  %arrayidx189 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom188
  %95 = load i8, i8* %arrayidx189, align 1
  %conv190 = sext i8 %95 to i32
  %cmp191 = icmp eq i32 %conv190, 100
  br i1 %cmp191, label %if.then.193, label %if.end.231

if.then.193:                                      ; preds = %if.end.180
  %96 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl194 = bitcast %union.tree_node* %96 to %struct.tree_decl*
  %rtl195 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl194, i32 0, i32 17
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtl195, align 8
  %cmp196 = icmp ne %struct.rtx_def* %97, null
  br i1 %cmp196, label %lor.lhs.false.198, label %if.then.214

lor.lhs.false.198:                                ; preds = %if.then.193
  %98 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl199 = bitcast %union.tree_node* %98 to %struct.tree_decl*
  %rtl200 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl199, i32 0, i32 17
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtl200, align 8
  %tobool201 = icmp ne %struct.rtx_def* %99, null
  br i1 %tobool201, label %cond.true.202, label %cond.false.205

cond.true.202:                                    ; preds = %lor.lhs.false.198
  %100 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl203 = bitcast %union.tree_node* %100 to %struct.tree_decl*
  %rtl204 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl203, i32 0, i32 17
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtl204, align 8
  br label %cond.end.208

cond.false.205:                                   ; preds = %lor.lhs.false.198
  %102 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %102, i8* null)
  %103 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl206 = bitcast %union.tree_node* %103 to %struct.tree_decl*
  %rtl207 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl206, i32 0, i32 17
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rtl207, align 8
  br label %cond.end.208

cond.end.208:                                     ; preds = %cond.false.205, %cond.true.202
  %cond209 = phi %struct.rtx_def* [ %101, %cond.true.202 ], [ %104, %cond.false.205 ]
  %105 = bitcast %struct.rtx_def* %cond209 to i32*
  %bf.load210 = load i32, i32* %105, align 8
  %bf.clear211 = and i32 %bf.load210, 65535
  %cmp212 = icmp ne i32 %bf.clear211, 66
  br i1 %cmp212, label %if.then.214, label %if.else.215

if.then.214:                                      ; preds = %cond.end.208, %if.then.193
  store i32 0, i32* %retval
  br label %return

if.else.215:                                      ; preds = %cond.end.208
  %106 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl216 = bitcast %union.tree_node* %106 to %struct.tree_decl*
  %rtl217 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl216, i32 0, i32 17
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rtl217, align 8
  %tobool218 = icmp ne %struct.rtx_def* %107, null
  br i1 %tobool218, label %cond.true.219, label %cond.false.222

cond.true.219:                                    ; preds = %if.else.215
  %108 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl220 = bitcast %union.tree_node* %108 to %struct.tree_decl*
  %rtl221 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl220, i32 0, i32 17
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rtl221, align 8
  br label %cond.end.225

cond.false.222:                                   ; preds = %if.else.215
  %110 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %110, i8* null)
  %111 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl223 = bitcast %union.tree_node* %111 to %struct.tree_decl*
  %rtl224 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl223, i32 0, i32 17
  %112 = load %struct.rtx_def*, %struct.rtx_def** %rtl224, align 8
  br label %cond.end.225

cond.end.225:                                     ; preds = %cond.false.222, %cond.true.219
  %cond226 = phi %struct.rtx_def* [ %109, %cond.true.219 ], [ %112, %cond.false.222 ]
  %fld227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond226, i32 0, i32 1
  %arrayidx228 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld227, i32 0, i64 0
  %rtx229 = bitcast %union.rtunion_def* %arrayidx228 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx229, align 8
  store %struct.rtx_def* %113, %struct.rtx_def** %exp_rtl, align 8
  br label %if.end.230

if.end.230:                                       ; preds = %cond.end.225
  br label %if.end.231

if.end.231:                                       ; preds = %if.end.230, %if.end.180
  br label %sw.epilog

sw.bb.232:                                        ; preds = %sw.bb.156
  %114 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load233 = load i32, i32* %115, align 8
  %bf.clear234 = and i32 %bf.load233, 65535
  %cmp235 = icmp eq i32 %bf.clear234, 66
  br i1 %cmp235, label %land.lhs.true.237, label %if.end.253

land.lhs.true.237:                                ; preds = %sw.bb.232
  %116 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld238 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx239 to %struct.mem_attrs**
  %117 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp240 = icmp eq %struct.mem_attrs* %117, null
  br i1 %cmp240, label %cond.true.242, label %cond.false.243

cond.true.242:                                    ; preds = %land.lhs.true.237
  br label %cond.end.247

cond.false.243:                                   ; preds = %land.lhs.true.237
  %118 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld244 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1
  %arrayidx245 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld244, i32 0, i64 1
  %rtmem246 = bitcast %union.rtunion_def* %arrayidx245 to %struct.mem_attrs**
  %119 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem246, align 8
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %119, i32 0, i32 0
  %120 = load i64, i64* %alias, align 8
  br label %cond.end.247

cond.end.247:                                     ; preds = %cond.false.243, %cond.true.242
  %cond248 = phi i64 [ 0, %cond.true.242 ], [ %120, %cond.false.243 ]
  %121 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call249 = call i64 @get_alias_set(%union.tree_node* %121)
  %call250 = call i32 @alias_sets_conflict_p(i64 %cond248, i64 %call249)
  %tobool251 = icmp ne i32 %call250, 0
  br i1 %tobool251, label %if.then.252, label %if.end.253

if.then.252:                                      ; preds = %cond.end.247
  store i32 0, i32* %retval
  br label %return

if.end.253:                                       ; preds = %cond.end.247, %sw.bb.232
  br label %sw.epilog

sw.bb.254:                                        ; preds = %sw.bb.156
  %122 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load255 = load i32, i32* %123, align 8
  %bf.clear256 = and i32 %bf.load255, 65535
  %cmp257 = icmp eq i32 %bf.clear256, 61
  br i1 %cmp257, label %land.lhs.true.259, label %lor.lhs.false.265

land.lhs.true.259:                                ; preds = %sw.bb.254
  %124 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld260 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx261 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld260, i32 0, i64 0
  %rtuint262 = bitcast %union.rtunion_def* %arrayidx261 to i32*
  %125 = load i32, i32* %rtuint262, align 4
  %cmp263 = icmp ult i32 %125, 53
  br i1 %cmp263, label %if.then.270, label %lor.lhs.false.265

lor.lhs.false.265:                                ; preds = %land.lhs.true.259, %sw.bb.254
  %126 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load266 = load i32, i32* %127, align 8
  %bf.clear267 = and i32 %bf.load266, 65535
  %cmp268 = icmp eq i32 %bf.clear267, 66
  br i1 %cmp268, label %if.then.270, label %if.end.271

if.then.270:                                      ; preds = %lor.lhs.false.265, %land.lhs.true.259
  store i32 0, i32* %retval
  br label %return

if.end.271:                                       ; preds = %lor.lhs.false.265
  br label %sw.epilog

sw.bb.272:                                        ; preds = %sw.bb.156
  %128 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp273 = bitcast %union.tree_node* %128 to %struct.tree_exp*
  %operands274 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp273, i32 0, i32 2
  %arrayidx275 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands274, i32 0, i64 0
  %129 = bitcast %union.tree_node** %arrayidx275 to %struct.rtx_def**
  %130 = load %struct.rtx_def*, %struct.rtx_def** %129, align 8
  %tobool276 = icmp ne %struct.rtx_def* %130, null
  br i1 %tobool276, label %if.then.277, label %if.end.278

if.then.277:                                      ; preds = %sw.bb.272
  store i32 0, i32* %retval
  br label %return

if.end.278:                                       ; preds = %sw.bb.272
  %131 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp279 = bitcast %union.tree_node* %131 to %struct.tree_exp*
  %operands280 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp279, i32 0, i32 2
  %arrayidx281 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands280, i32 0, i64 1
  %132 = bitcast %union.tree_node** %arrayidx281 to %struct.rtx_def**
  %133 = load %struct.rtx_def*, %struct.rtx_def** %132, align 8
  store %struct.rtx_def* %133, %struct.rtx_def** %exp_rtl, align 8
  br label %sw.epilog

sw.bb.282:                                        ; preds = %sw.bb.156
  %134 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp283 = bitcast %union.tree_node* %134 to %struct.tree_exp*
  %operands284 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp283, i32 0, i32 2
  %arrayidx285 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands284, i32 0, i64 2
  %135 = bitcast %union.tree_node** %arrayidx285 to %struct.rtx_def**
  %136 = load %struct.rtx_def*, %struct.rtx_def** %135, align 8
  store %struct.rtx_def* %136, %struct.rtx_def** %exp_rtl, align 8
  br label %sw.epilog

sw.bb.286:                                        ; preds = %sw.bb.156
  %137 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %138 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp287 = bitcast %union.tree_node* %138 to %struct.tree_exp*
  %operands288 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp287, i32 0, i32 2
  %arrayidx289 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands288, i32 0, i64 0
  %139 = load %union.tree_node*, %union.tree_node** %arrayidx289, align 8
  %call290 = call i32 @safe_from_p(%struct.rtx_def* %137, %union.tree_node* %139, i32 0)
  store i32 %call290, i32* %retval
  br label %return

sw.bb.291:                                        ; preds = %sw.bb.156
  %140 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp292 = bitcast %union.tree_node* %140 to %struct.tree_exp*
  %operands293 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp292, i32 0, i32 2
  %arrayidx294 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands293, i32 0, i64 2
  %141 = bitcast %union.tree_node** %arrayidx294 to %struct.rtx_def**
  %142 = load %struct.rtx_def*, %struct.rtx_def** %141, align 8
  store %struct.rtx_def* %142, %struct.rtx_def** %exp_rtl, align 8
  %143 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %tobool295 = icmp ne %struct.rtx_def* %143, null
  br i1 %tobool295, label %if.then.296, label %if.end.297

if.then.296:                                      ; preds = %sw.bb.291
  br label %sw.epilog

if.end.297:                                       ; preds = %sw.bb.291
  %144 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common298 = bitcast %union.tree_node* %144 to %struct.tree_common*
  %private_flag299 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common298, i32 0, i32 2
  %bf.load300 = load i32, i32* %private_flag299, align 8
  %bf.lshr301 = lshr i32 %bf.load300, 20
  %bf.clear302 = and i32 %bf.lshr301, 1
  %tobool303 = icmp ne i32 %bf.clear302, 0
  br i1 %tobool303, label %if.then.304, label %if.end.305

if.then.304:                                      ; preds = %if.end.297
  store i32 1, i32* %retval
  br label %return

if.end.305:                                       ; preds = %if.end.297
  %145 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common306 = bitcast %union.tree_node* %145 to %struct.tree_common*
  %private_flag307 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common306, i32 0, i32 2
  %bf.load308 = load i32, i32* %private_flag307, align 8
  %bf.clear309 = and i32 %bf.load308, -1048577
  %bf.set = or i32 %bf.clear309, 1048576
  store i32 %bf.set, i32* %private_flag307, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %147 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp310 = bitcast %union.tree_node* %147 to %struct.tree_exp*
  %operands311 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp310, i32 0, i32 2
  %arrayidx312 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands311, i32 0, i64 0
  %148 = load %union.tree_node*, %union.tree_node** %arrayidx312, align 8
  %call313 = call i32 @safe_from_p(%struct.rtx_def* %146, %union.tree_node* %148, i32 0)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end.320, label %if.then.315

if.then.315:                                      ; preds = %if.end.305
  %149 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common316 = bitcast %union.tree_node* %149 to %struct.tree_common*
  %private_flag317 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common316, i32 0, i32 2
  %bf.load318 = load i32, i32* %private_flag317, align 8
  %bf.clear319 = and i32 %bf.load318, -1048577
  store i32 %bf.clear319, i32* %private_flag317, align 8
  store i32 0, i32* %retval
  br label %return

if.end.320:                                       ; preds = %if.end.305
  %150 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %151 = load %union.tree_node*, %union.tree_node** @safe_from_p.save_expr_list, align 8
  %call321 = call %union.tree_node* @tree_cons(%union.tree_node* %150, %union.tree_node* null, %union.tree_node* %151)
  store %union.tree_node* %call321, %union.tree_node** @safe_from_p.save_expr_list, align 8
  store i32 1, i32* %retval
  br label %return

sw.bb.322:                                        ; preds = %sw.bb.156
  %152 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %153 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp323 = bitcast %union.tree_node* %153 to %struct.tree_exp*
  %operands324 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp323, i32 0, i32 2
  %arrayidx325 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands324, i32 0, i64 1
  %154 = load %union.tree_node*, %union.tree_node** %arrayidx325, align 8
  %call326 = call i32 @safe_from_p(%struct.rtx_def* %152, %union.tree_node* %154, i32 0)
  store i32 %call326, i32* %retval
  br label %return

sw.bb.327:                                        ; preds = %sw.bb.156
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5724, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.safe_from_p, i32 0, i32 0)) #6
  unreachable

sw.default:                                       ; preds = %sw.bb.156
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.then.296, %sw.bb.282, %if.end.278, %if.end.271, %if.end.253, %if.end.231
  %155 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %tobool328 = icmp ne %struct.rtx_def* %155, null
  br i1 %tobool328, label %if.then.329, label %if.end.330

if.then.329:                                      ; preds = %sw.epilog
  br label %sw.epilog.368

if.end.330:                                       ; preds = %sw.epilog
  %156 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common331 = bitcast %union.tree_node* %156 to %struct.tree_common*
  %code332 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common331, i32 0, i32 2
  %bf.load333 = load i32, i32* %code332, align 8
  %bf.clear334 = and i32 %bf.load333, 255
  %call335 = call i32 @first_rtl_op(i32 %bf.clear334)
  store i32 %call335, i32* %nops, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.336

for.cond.336:                                     ; preds = %for.inc.355, %if.end.330
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %nops, align 4
  %cmp337 = icmp slt i32 %157, %158
  br i1 %cmp337, label %for.body.339, label %for.end.356

for.body.339:                                     ; preds = %for.cond.336
  %159 = load i32, i32* %i, align 4
  %idxprom340 = sext i32 %159 to i64
  %160 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp341 = bitcast %union.tree_node* %160 to %struct.tree_exp*
  %operands342 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp341, i32 0, i32 2
  %arrayidx343 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands342, i32 0, i64 %idxprom340
  %161 = load %union.tree_node*, %union.tree_node** %arrayidx343, align 8
  %cmp344 = icmp ne %union.tree_node* %161, null
  br i1 %cmp344, label %land.lhs.true.346, label %if.end.354

land.lhs.true.346:                                ; preds = %for.body.339
  %162 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %163 = load i32, i32* %i, align 4
  %idxprom347 = sext i32 %163 to i64
  %164 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp348 = bitcast %union.tree_node* %164 to %struct.tree_exp*
  %operands349 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp348, i32 0, i32 2
  %arrayidx350 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands349, i32 0, i64 %idxprom347
  %165 = load %union.tree_node*, %union.tree_node** %arrayidx350, align 8
  %call351 = call i32 @safe_from_p(%struct.rtx_def* %162, %union.tree_node* %165, i32 0)
  %tobool352 = icmp ne i32 %call351, 0
  br i1 %tobool352, label %if.end.354, label %if.then.353

if.then.353:                                      ; preds = %land.lhs.true.346
  store i32 0, i32* %retval
  br label %return

if.end.354:                                       ; preds = %land.lhs.true.346, %for.body.339
  br label %for.inc.355

for.inc.355:                                      ; preds = %if.end.354
  %166 = load i32, i32* %i, align 4
  %inc = add nsw i32 %166, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.336

for.end.356:                                      ; preds = %for.cond.336
  %167 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common357 = bitcast %union.tree_node* %167 to %struct.tree_common*
  %code358 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common357, i32 0, i32 2
  %bf.load359 = load i32, i32* %code358, align 8
  %bf.clear360 = and i32 %bf.load359, 255
  %cmp361 = icmp uge i32 %bf.clear360, 147
  br i1 %cmp361, label %land.lhs.true.363, label %if.end.367

land.lhs.true.363:                                ; preds = %for.end.356
  %168 = load i32 (%struct.rtx_def*, %union.tree_node*)*, i32 (%struct.rtx_def*, %union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 10), align 8
  %169 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %170 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call364 = call i32 %168(%struct.rtx_def* %169, %union.tree_node* %170)
  %tobool365 = icmp ne i32 %call364, 0
  br i1 %tobool365, label %if.end.367, label %if.then.366

if.then.366:                                      ; preds = %land.lhs.true.363
  store i32 0, i32* %retval
  br label %return

if.end.367:                                       ; preds = %land.lhs.true.363, %for.end.356
  br label %sw.epilog.368

sw.epilog.368:                                    ; preds = %if.end.367, %if.end.86, %if.then.329, %cond.end.103
  %171 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %tobool369 = icmp ne %struct.rtx_def* %171, null
  br i1 %tobool369, label %if.then.370, label %if.end.410

if.then.370:                                      ; preds = %sw.epilog.368
  %172 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %173 = bitcast %struct.rtx_def* %172 to i32*
  %bf.load371 = load i32, i32* %173, align 8
  %bf.clear372 = and i32 %bf.load371, 65535
  %cmp373 = icmp eq i32 %bf.clear372, 63
  br i1 %cmp373, label %if.then.375, label %if.end.391

if.then.375:                                      ; preds = %if.then.370
  %174 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %fld376 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1
  %arrayidx377 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld376, i32 0, i64 0
  %rtx378 = bitcast %union.rtunion_def* %arrayidx377 to %struct.rtx_def**
  %175 = load %struct.rtx_def*, %struct.rtx_def** %rtx378, align 8
  store %struct.rtx_def* %175, %struct.rtx_def** %exp_rtl, align 8
  %176 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %177 = bitcast %struct.rtx_def* %176 to i32*
  %bf.load379 = load i32, i32* %177, align 8
  %bf.clear380 = and i32 %bf.load379, 65535
  %cmp381 = icmp eq i32 %bf.clear380, 61
  br i1 %cmp381, label %land.lhs.true.383, label %if.end.390

land.lhs.true.383:                                ; preds = %if.then.375
  %178 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %fld384 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %arrayidx385 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld384, i32 0, i64 0
  %rtuint386 = bitcast %union.rtunion_def* %arrayidx385 to i32*
  %179 = load i32, i32* %rtuint386, align 4
  %cmp387 = icmp ult i32 %179, 53
  br i1 %cmp387, label %if.then.389, label %if.end.390

if.then.389:                                      ; preds = %land.lhs.true.383
  store i32 0, i32* %retval
  br label %return

if.end.390:                                       ; preds = %land.lhs.true.383, %if.then.375
  br label %if.end.391

if.end.391:                                       ; preds = %if.end.390, %if.then.370
  %180 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %call392 = call i32 @rtx_equal_p(%struct.rtx_def* %180, %struct.rtx_def* %181)
  %tobool393 = icmp ne i32 %call392, 0
  br i1 %tobool393, label %lor.end.409, label %lor.rhs.394

lor.rhs.394:                                      ; preds = %if.end.391
  %182 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %183 = bitcast %struct.rtx_def* %182 to i32*
  %bf.load395 = load i32, i32* %183, align 8
  %bf.clear396 = and i32 %bf.load395, 65535
  %cmp397 = icmp eq i32 %bf.clear396, 66
  br i1 %cmp397, label %land.lhs.true.399, label %land.end.407

land.lhs.true.399:                                ; preds = %lor.rhs.394
  %184 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %185 = bitcast %struct.rtx_def* %184 to i32*
  %bf.load400 = load i32, i32* %185, align 8
  %bf.clear401 = and i32 %bf.load400, 65535
  %cmp402 = icmp eq i32 %bf.clear401, 66
  br i1 %cmp402, label %land.rhs.404, label %land.end.407

land.rhs.404:                                     ; preds = %land.lhs.true.399
  %186 = load %struct.rtx_def*, %struct.rtx_def** %exp_rtl, align 8
  %187 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call405 = call i32 @true_dependence(%struct.rtx_def* %186, i32 0, %struct.rtx_def* %187, i32 (%struct.rtx_def*, i32)* @rtx_addr_varies_p)
  %tobool406 = icmp ne i32 %call405, 0
  br label %land.end.407

land.end.407:                                     ; preds = %land.rhs.404, %land.lhs.true.399, %lor.rhs.394
  %188 = phi i1 [ false, %land.lhs.true.399 ], [ false, %lor.rhs.394 ], [ %tobool406, %land.rhs.404 ]
  br label %lor.end.409

lor.end.409:                                      ; preds = %land.end.407, %if.end.391
  %189 = phi i1 [ true, %if.end.391 ], [ %188, %land.end.407 ]
  %lnot = xor i1 %189, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

if.end.410:                                       ; preds = %sw.epilog.368
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.410, %lor.end.409, %if.then.389, %if.then.366, %if.then.353, %sw.bb.322, %if.end.320, %if.then.315, %if.then.304, %sw.bb.286, %if.then.277, %if.then.270, %if.then.252, %if.then.214, %if.then.179, %land.end.154, %sw.bb.138, %if.else.137, %if.then.136, %land.end, %sw.bb.105, %for.end, %if.then.76, %if.then
  %190 = load i32, i32* %retval
  ret i32 %190
}

declare i32 @staticp(%union.tree_node*) #1

declare i32 @alias_sets_conflict_p(i64, i64) #1

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #1

declare i32 @first_rtl_op(i32) #1

declare i32 @true_dependence(%struct.rtx_def*, i32, %struct.rtx_def*, i32 (%struct.rtx_def*, i32)*) #1

declare i32 @rtx_addr_varies_p(%struct.rtx_def*, i32) #1

declare %union.tree_node* @decl_function_context(%union.tree_node*) #1

declare %struct.function* @find_function_data(%union.tree_node*) #1

declare %struct.rtx_def* @label_rtx(%union.tree_node*) #1

declare %struct.rtx_def* @gen_rtx_fmt_u00(i32, i32, %struct.rtx_def*) #1

declare void @error_with_decl(%union.tree_node*, i8*, ...) #1

declare void @layout_decl(%union.tree_node*, i32) #1

declare i32 @mark_addressable(%union.tree_node*) #1

declare %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def*, %union.tree_node*) #1

declare void @mark_reg_pointer(%struct.rtx_def*, i32) #1

declare i32 @promote_mode(%union.tree_node*, i32, i32*, i32) #1

declare %struct.rtx_def* @immed_real_const(%union.tree_node*) #1

declare %struct.rtx_def* @output_constant_def(%union.tree_node*, i32) #1

declare %struct.rtx_def* @emit_line_note(i8*, i32) #1

declare void @put_var_into_stack(%union.tree_node*) #1

declare %union.tree_node* @unsave_expr_now(%union.tree_node*) #1

declare void @expand_goto(%union.tree_node*) #1

declare void @expand_computed_goto(%union.tree_node*) #1

declare i32 @expand_exit_loop_if_false(%struct.nesting*, %union.tree_node*) #1

declare %union.tree_node* @invert_truthvalue(%union.tree_node*) #1

declare void @expand_expr_stmt_value(%union.tree_node*, i32, i32) #1

declare void @sorry(i8*, ...) #1

declare %struct.nesting* @expand_start_loop(i32) #1

declare void @expand_end_loop() #1

declare void @expand_start_bindings_and_block(i32, %union.tree_node*) #1

declare void @insert_block(%union.tree_node*) #1

declare void @expand_decl(%union.tree_node*) #1

declare void @expand_decl_init(%union.tree_node*) #1

declare void @expand_end_bindings(%union.tree_node*, i32, i32) #1

declare %struct.rtx_def* @emit_insns(%struct.rtx_def*) #1

declare void @preserve_rtl_expr_result(%struct.rtx_def*) #1

declare void @free_temps_for_rtl_expr(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal i32 @mostly_zeros_p(%union.tree_node* %exp) #0 {
entry:
  %retval = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %elts = alloca i32, align 4
  %zeros = alloca i32, align 4
  %elt = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 46
  br i1 %cmp, label %if.then, label %if.end.21

if.then:                                          ; preds = %entry
  store i32 0, i32* %elts, align 4
  store i32 0, i32* %zeros, align 4
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %1 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  store %union.tree_node* %2, %union.tree_node** %elt, align 8
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8
  %tobool = icmp ne %union.tree_node* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %type4, align 8
  %common5 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %code6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2
  %bf.load7 = load i32, i32* %code6, align 8
  %bf.clear8 = and i32 %bf.load7, 255
  %cmp9 = icmp eq i32 %bf.clear8, 19
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %cmp11 = icmp eq %union.tree_node* %7, null
  %conv = zext i1 %cmp11 to i32
  store i32 %conv, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %tobool12 = icmp ne %union.tree_node* %8, null
  br i1 %tobool12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %list = bitcast %union.tree_node* %9 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8
  %call = call i32 @mostly_zeros_p(%union.tree_node* %10)
  %tobool13 = icmp ne i32 %call, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %for.body
  %11 = load i32, i32* %zeros, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %zeros, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %for.body
  %12 = load i32, i32* %elts, align 4
  %inc16 = add nsw i32 %12, 1
  store i32 %inc16, i32* %elts, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end.15
  %13 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common17 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 0
  %14 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %14, %union.tree_node** %elt, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %zeros, align 4
  %mul = mul nsw i32 4, %15
  %16 = load i32, i32* %elts, align 4
  %mul18 = mul nsw i32 3, %16
  %cmp19 = icmp sge i32 %mul, %mul18
  %conv20 = zext i1 %cmp19 to i32
  store i32 %conv20, i32* %retval
  br label %return

if.end.21:                                        ; preds = %entry
  %17 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call22 = call i32 @is_zeros_p(%union.tree_node* %17)
  store i32 %call22, i32* %retval
  br label %return

return:                                           ; preds = %if.end.21, %for.end, %if.then.10
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal void @store_constructor(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %cleared, i64 %size) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %cleared.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %type = alloca %union.tree_node*, align 8
  %elt = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %unsignedp = alloca i32, align 4
  %offset = alloca %union.tree_node*, align 8
  %to_rtx = alloca %struct.rtx_def*, align 8
  %offset_rtx = alloca %struct.rtx_def*, align 8
  %elt235 = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %need_to_clear = alloca i32, align 4
  %domain = alloca %union.tree_node*, align 8
  %elttype = alloca %union.tree_node*, align 8
  %const_bounds_p = alloca i32, align 4
  %minelt = alloca i64, align 8
  %maxelt = alloca i64, align 8
  %count = alloca i64, align 8
  %zero_count = alloca i64, align 8
  %index = alloca %union.tree_node*, align 8
  %this_node_count = alloca i64, align 8
  %lo_index = alloca %union.tree_node*, align 8
  %hi_index = alloca %union.tree_node*, align 8
  %mode400 = alloca i32, align 4
  %bitsize401 = alloca i64, align 8
  %bitpos402 = alloca i64, align 8
  %unsignedp403 = alloca i32, align 4
  %value404 = alloca %union.tree_node*, align 8
  %index407 = alloca %union.tree_node*, align 8
  %xtarget = alloca %struct.rtx_def*, align 8
  %lo_index452 = alloca %union.tree_node*, align 8
  %hi_index456 = alloca %union.tree_node*, align 8
  %index_r = alloca %struct.rtx_def*, align 8
  %pos_rtx = alloca %struct.rtx_def*, align 8
  %hi_r = alloca %struct.rtx_def*, align 8
  %loop_top = alloca %struct.rtx_def*, align 8
  %loop_end = alloca %struct.rtx_def*, align 8
  %loop = alloca %struct.nesting*, align 8
  %lo = alloca i64, align 8
  %hi = alloca i64, align 8
  %count460 = alloca i64, align 8
  %position = alloca %union.tree_node*, align 8
  %position615 = alloca %union.tree_node*, align 8
  %elt701 = alloca %union.tree_node*, align 8
  %nbytes = alloca i64, align 8
  %nbits = alloca i64, align 8
  %domain706 = alloca %union.tree_node*, align 8
  %domain_min = alloca %union.tree_node*, align 8
  %domain_max = alloca %union.tree_node*, align 8
  %bitlength = alloca %union.tree_node*, align 8
  %set_word_size = alloca i32, align 4
  %mode756 = alloca i32, align 4
  %bit_buffer = alloca i8*, align 8
  %word = alloca i64, align 8
  %bit_pos = alloca i32, align 4
  %ibit = alloca i32, align 4
  %offset758 = alloca i32, align 4
  %datum = alloca %struct.rtx_def*, align 8
  %to_rtx783 = alloca %struct.rtx_def*, align 8
  %startbit = alloca %union.tree_node*, align 8
  %endbit = alloca %union.tree_node*, align 8
  %startb = alloca i64, align 8
  %endb = alloca i64, align 8
  %bitlength_rtx = alloca %struct.rtx_def*, align 8
  %startbit_rtx = alloca %struct.rtx_def*, align 8
  %endbit_rtx = alloca %struct.rtx_def*, align 8
  %targetx = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store i32 %cleared, i32* %cleared.addr, align 4
  store i64 %size, i64* %size.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8
  store %union.tree_node* %1, %union.tree_node** %type, align 8
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 20
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common3 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2
  %bf.load5 = load i32, i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 21
  br i1 %cmp7, label %if.then, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common9 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2
  %bf.load11 = load i32, i32* %code10, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  %cmp13 = icmp eq i32 %bf.clear12, 22
  br i1 %cmp13, label %if.then, label %if.else.220

if.then:                                          ; preds = %lor.lhs.false.8, %lor.lhs.false, %entry
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common14 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2
  %bf.load16 = load i32, i32* %code15, align 8
  %bf.clear17 = and i32 %bf.load16, 255
  %cmp18 = icmp eq i32 %bf.clear17, 21
  br i1 %cmp18, label %land.lhs.true, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common20 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %code21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2
  %bf.load22 = load i32, i32* %code21, align 8
  %bf.clear23 = and i32 %bf.load22, 255
  %cmp24 = icmp eq i32 %bf.clear23, 22
  br i1 %cmp24, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false.19, %if.then
  %7 = load i32, i32* %cleared.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.else, label %land.lhs.true.25

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp26 = bitcast %union.tree_node* %8 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %tobool27 = icmp ne %union.tree_node* %9, null
  br i1 %tobool27, label %if.else, label %if.then.28

if.then.28:                                       ; preds = %land.lhs.true.25
  %10 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call = call %struct.rtx_def* @expr_size(%union.tree_node* %11)
  %call29 = call %struct.rtx_def* @clear_storage(%struct.rtx_def* %10, %struct.rtx_def* %call)
  store i32 1, i32* %cleared.addr, align 4
  br label %if.end.89

if.else:                                          ; preds = %land.lhs.true.25, %land.lhs.true, %lor.lhs.false.19
  %12 = load i32, i32* %cleared.addr, align 4
  %tobool30 = icmp ne i32 %12, 0
  br i1 %tobool30, label %if.else.55, label %land.lhs.true.31

land.lhs.true.31:                                 ; preds = %if.else
  %13 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load32 = load i32, i32* %14, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 61
  br i1 %cmp34, label %land.lhs.true.35, label %if.else.55

land.lhs.true.35:                                 ; preds = %land.lhs.true.31
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common36 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2
  %bf.load37 = load i32, i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load37, 18
  %bf.clear38 = and i32 %bf.lshr, 1
  %tobool39 = icmp ne i32 %bf.clear38, 0
  br i1 %tobool39, label %land.lhs.true.40, label %if.else.55

land.lhs.true.40:                                 ; preds = %land.lhs.true.35
  %16 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load41 = load i32, i32* %17, align 8
  %bf.lshr42 = lshr i32 %bf.load41, 16
  %bf.clear43 = and i32 %bf.lshr42, 255
  %idxprom = sext i32 %bf.clear43 to i64
  %arrayidx44 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %18 = load i8, i8* %arrayidx44, align 1
  %conv = zext i8 %18 to i32
  %19 = load i32, i32* @target_flags, align 4
  %and = and i32 %19, 33554432
  %tobool45 = icmp ne i32 %and, 0
  %cond = select i1 %tobool45, i32 8, i32 4
  %cmp46 = icmp sle i32 %conv, %cond
  br i1 %cmp46, label %if.then.48, label %if.else.55

if.then.48:                                       ; preds = %land.lhs.true.40
  %20 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load49 = load i32, i32* %22, align 8
  %bf.lshr50 = lshr i32 %bf.load49, 16
  %bf.clear51 = and i32 %bf.lshr50, 255
  %idxprom52 = sext i32 %bf.clear51 to i64
  %arrayidx53 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom52
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx53, align 8
  %call54 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %20, %struct.rtx_def* %23)
  store i32 1, i32* %cleared.addr, align 4
  br label %if.end.88

if.else.55:                                       ; preds = %land.lhs.true.40, %land.lhs.true.35, %land.lhs.true.31, %if.else
  %24 = load i32, i32* %cleared.addr, align 4
  %tobool56 = icmp ne i32 %24, 0
  br i1 %tobool56, label %if.end, label %land.lhs.true.57

land.lhs.true.57:                                 ; preds = %if.else.55
  %25 = load i64, i64* %size.addr, align 8
  %cmp58 = icmp sgt i64 %25, 0
  br i1 %cmp58, label %land.lhs.true.60, label %if.end

land.lhs.true.60:                                 ; preds = %land.lhs.true.57
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp61 = bitcast %union.tree_node* %26 to %struct.tree_exp*
  %operands62 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp61, i32 0, i32 2
  %arrayidx63 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands62, i32 0, i64 1
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx63, align 8
  %call64 = call i32 @list_length(%union.tree_node* %27)
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call65 = call i32 @fields_length(%union.tree_node* %28)
  %cmp66 = icmp ne i32 %call64, %call65
  br i1 %cmp66, label %land.lhs.true.71, label %lor.lhs.false.68

lor.lhs.false.68:                                 ; preds = %land.lhs.true.60
  %29 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call69 = call i32 @mostly_zeros_p(%union.tree_node* %29)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %land.lhs.true.71, label %if.end

land.lhs.true.71:                                 ; preds = %lor.lhs.false.68, %land.lhs.true.60
  %30 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load72 = load i32, i32* %31, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  %cmp74 = icmp ne i32 %bf.clear73, 61
  br i1 %cmp74, label %if.then.85, label %lor.lhs.false.76

lor.lhs.false.76:                                 ; preds = %land.lhs.true.71
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load77 = load i32, i32* %33, align 8
  %bf.lshr78 = lshr i32 %bf.load77, 16
  %bf.clear79 = and i32 %bf.lshr78, 255
  %idxprom80 = sext i32 %bf.clear79 to i64
  %arrayidx81 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom80
  %34 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %34 to i64
  %35 = load i64, i64* %size.addr, align 8
  %cmp83 = icmp eq i64 %conv82, %35
  br i1 %cmp83, label %if.then.85, label %if.end

if.then.85:                                       ; preds = %lor.lhs.false.76, %land.lhs.true.71
  %36 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %37 = load i64, i64* %size.addr, align 8
  %call86 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %37)
  %call87 = call %struct.rtx_def* @clear_storage(%struct.rtx_def* %36, %struct.rtx_def* %call86)
  store i32 1, i32* %cleared.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.85, %lor.lhs.false.76, %lor.lhs.false.68, %land.lhs.true.57, %if.else.55
  br label %if.end.88

if.end.88:                                        ; preds = %if.end, %if.then.48
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %if.then.28
  %38 = load i32, i32* %cleared.addr, align 4
  %tobool90 = icmp ne i32 %38, 0
  br i1 %tobool90, label %if.end.94, label %if.then.91

if.then.91:                                       ; preds = %if.end.89
  %39 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call92 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %39)
  %call93 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call92)
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.91, %if.end.89
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp95 = bitcast %union.tree_node* %40 to %struct.tree_exp*
  %operands96 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp95, i32 0, i32 2
  %arrayidx97 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands96, i32 0, i64 1
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx97, align 8
  store %union.tree_node* %41, %union.tree_node** %elt, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.94
  %42 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %tobool98 = icmp ne %union.tree_node* %42, null
  br i1 %tobool98, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %43 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %list = bitcast %union.tree_node* %43 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %44 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  store %union.tree_node* %44, %union.tree_node** %field, align 8
  %45 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %list99 = bitcast %union.tree_node* %45 to %struct.tree_list*
  %value100 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list99, i32 0, i32 2
  %46 = load %union.tree_node*, %union.tree_node** %value100, align 8
  store %union.tree_node* %46, %union.tree_node** %value, align 8
  store i64 0, i64* %bitpos, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %to_rtx, align 8
  %48 = load %union.tree_node*, %union.tree_node** %field, align 8
  %cmp101 = icmp eq %union.tree_node* %48, null
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %for.body
  br label %for.inc

if.end.104:                                       ; preds = %for.body
  %49 = load i32, i32* %cleared.addr, align 4
  %tobool105 = icmp ne i32 %49, 0
  br i1 %tobool105, label %land.lhs.true.106, label %if.end.110

land.lhs.true.106:                                ; preds = %if.end.104
  %50 = load %union.tree_node*, %union.tree_node** %value, align 8
  %call107 = call i32 @is_zeros_p(%union.tree_node* %50)
  %tobool108 = icmp ne i32 %call107, 0
  br i1 %tobool108, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %land.lhs.true.106
  br label %for.inc

if.end.110:                                       ; preds = %land.lhs.true.106, %if.end.104
  %51 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl = bitcast %union.tree_node* %51 to %struct.tree_decl*
  %size111 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 4
  %52 = load %union.tree_node*, %union.tree_node** %size111, align 8
  %call112 = call i32 @host_integerp(%union.tree_node* %52, i32 1)
  %tobool113 = icmp ne i32 %call112, 0
  br i1 %tobool113, label %if.then.114, label %if.else.118

if.then.114:                                      ; preds = %if.end.110
  %53 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl115 = bitcast %union.tree_node* %53 to %struct.tree_decl*
  %size116 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl115, i32 0, i32 4
  %54 = load %union.tree_node*, %union.tree_node** %size116, align 8
  %call117 = call i64 @tree_low_cst(%union.tree_node* %54, i32 1)
  store i64 %call117, i64* %bitsize, align 8
  br label %if.end.119

if.else.118:                                      ; preds = %if.end.110
  store i64 -1, i64* %bitsize, align 8
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.118, %if.then.114
  %55 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common120 = bitcast %union.tree_node* %55 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common120, i32 0, i32 2
  %bf.load121 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr122 = lshr i32 %bf.load121, 13
  %bf.clear123 = and i32 %bf.lshr122, 1
  store i32 %bf.clear123, i32* %unsignedp, align 4
  %56 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl124 = bitcast %union.tree_node* %56 to %struct.tree_decl*
  %mode125 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl124, i32 0, i32 5
  %57 = bitcast i48* %mode125 to i64*
  %bf.load126 = load i64, i64* %57, align 8
  %bf.clear127 = and i64 %bf.load126, 255
  %bf.cast = trunc i64 %bf.clear127 to i32
  store i32 %bf.cast, i32* %mode, align 4
  %58 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl128 = bitcast %union.tree_node* %58 to %struct.tree_decl*
  %bit_field_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl128, i32 0, i32 5
  %59 = bitcast i48* %bit_field_flag to i64*
  %bf.load129 = load i64, i64* %59, align 8
  %bf.lshr130 = lshr i64 %bf.load129, 12
  %bf.clear131 = and i64 %bf.lshr130, 1
  %bf.cast132 = trunc i64 %bf.clear131 to i32
  %tobool133 = icmp ne i32 %bf.cast132, 0
  br i1 %tobool133, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %if.end.119
  store i32 0, i32* %mode, align 4
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.134, %if.end.119
  %60 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl136 = bitcast %union.tree_node* %60 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl136, i32 0, i32 10
  %61 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %61, %union.tree_node** %offset, align 8
  %62 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call137 = call i32 @host_integerp(%union.tree_node* %62, i32 0)
  %tobool138 = icmp ne i32 %call137, 0
  br i1 %tobool138, label %land.lhs.true.139, label %if.else.145

land.lhs.true.139:                                ; preds = %if.end.135
  %63 = load %union.tree_node*, %union.tree_node** %field, align 8
  %call140 = call %union.tree_node* @bit_position(%union.tree_node* %63)
  %call141 = call i32 @host_integerp(%union.tree_node* %call140, i32 0)
  %tobool142 = icmp ne i32 %call141, 0
  br i1 %tobool142, label %if.then.143, label %if.else.145

if.then.143:                                      ; preds = %land.lhs.true.139
  %64 = load %union.tree_node*, %union.tree_node** %field, align 8
  %call144 = call i64 @int_bit_position(%union.tree_node* %64)
  store i64 %call144, i64* %bitpos, align 8
  store %union.tree_node* null, %union.tree_node** %offset, align 8
  br label %if.end.148

if.else.145:                                      ; preds = %land.lhs.true.139, %if.end.135
  %65 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl146 = bitcast %union.tree_node* %65 to %struct.tree_decl*
  %u2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl146, i32 0, i32 19
  %t = bitcast %union.anon.1* %u2 to %union.tree_node**
  %66 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call147 = call i64 @tree_low_cst(%union.tree_node* %66, i32 0)
  store i64 %call147, i64* %bitpos, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %if.else.145, %if.then.143
  %67 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %tobool149 = icmp ne %union.tree_node* %67, null
  br i1 %tobool149, label %if.then.150, label %if.end.176

if.then.150:                                      ; preds = %if.end.148
  %68 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call151 = call i32 @contains_placeholder_p(%union.tree_node* %68)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.then.153, label %if.end.158

if.then.153:                                      ; preds = %if.then.150
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %70 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %71 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common154 = bitcast %union.tree_node* %71 to %struct.tree_common*
  %type155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 1
  %72 = load %union.tree_node*, %union.tree_node** %type155, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call156 = call %union.tree_node* @make_tree(%union.tree_node* %72, %struct.rtx_def* %73)
  %call157 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 58, %union.tree_node* %69, %union.tree_node* %70, %union.tree_node* %call156)
  store %union.tree_node* %call157, %union.tree_node** %offset, align 8
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.153, %if.then.150
  %74 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call159 = call %struct.rtx_def* @expand_expr(%union.tree_node* %74, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call159, %struct.rtx_def** %offset_rtx, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %76 = bitcast %struct.rtx_def* %75 to i32*
  %bf.load160 = load i32, i32* %76, align 8
  %bf.clear161 = and i32 %bf.load160, 65535
  %cmp162 = icmp ne i32 %bf.clear161, 66
  br i1 %cmp162, label %if.then.164, label %if.end.165

if.then.164:                                      ; preds = %if.end.158
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 4498, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.store_constructor, i32 0, i32 0)) #6
  unreachable

if.end.165:                                       ; preds = %if.end.158
  %77 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %78 = bitcast %struct.rtx_def* %77 to i32*
  %bf.load166 = load i32, i32* %78, align 8
  %bf.lshr167 = lshr i32 %bf.load166, 16
  %bf.clear168 = and i32 %bf.lshr167, 255
  %79 = load i32, i32* @ptr_mode, align 4
  %cmp169 = icmp ne i32 %bf.clear168, %79
  br i1 %cmp169, label %if.then.171, label %if.end.173

if.then.171:                                      ; preds = %if.end.165
  %80 = load i32, i32* @ptr_mode, align 4
  %81 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %call172 = call %struct.rtx_def* @convert_to_mode(i32 %80, %struct.rtx_def* %81, i32 0)
  store %struct.rtx_def* %call172, %struct.rtx_def** %offset_rtx, align 8
  br label %if.end.173

if.end.173:                                       ; preds = %if.then.171, %if.end.165
  %82 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %84 = load %union.tree_node*, %union.tree_node** %offset, align 8
  %call174 = call i64 @highest_pow2_factor(%union.tree_node* %84)
  %call175 = call %struct.rtx_def* @offset_address(%struct.rtx_def* %82, %struct.rtx_def* %83, i64 %call174)
  store %struct.rtx_def* %call175, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.176

if.end.176:                                       ; preds = %if.end.173, %if.end.148
  %85 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common177 = bitcast %union.tree_node* %85 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common177, i32 0, i32 2
  %bf.load178 = load i32, i32* %readonly_flag, align 8
  %bf.lshr179 = lshr i32 %bf.load178, 12
  %bf.clear180 = and i32 %bf.lshr179, 1
  %tobool181 = icmp ne i32 %bf.clear180, 0
  br i1 %tobool181, label %if.then.182, label %if.end.192

if.then.182:                                      ; preds = %if.end.176
  %86 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %87 = bitcast %struct.rtx_def* %86 to i32*
  %bf.load183 = load i32, i32* %87, align 8
  %bf.clear184 = and i32 %bf.load183, 65535
  %cmp185 = icmp eq i32 %bf.clear184, 66
  br i1 %cmp185, label %if.then.187, label %if.end.189

if.then.187:                                      ; preds = %if.then.182
  %88 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %call188 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %88)
  store %struct.rtx_def* %call188, %struct.rtx_def** %to_rtx, align 8
  br label %if.end.189

if.end.189:                                       ; preds = %if.then.187, %if.then.182
  %89 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %90 = bitcast %struct.rtx_def* %89 to i32*
  %bf.load190 = load i32, i32* %90, align 8
  %bf.clear191 = and i32 %bf.load190, -67108865
  %bf.set = or i32 %bf.clear191, 67108864
  store i32 %bf.set, i32* %90, align 8
  br label %if.end.192

if.end.192:                                       ; preds = %if.end.189, %if.end.176
  %91 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %92 = bitcast %struct.rtx_def* %91 to i32*
  %bf.load193 = load i32, i32* %92, align 8
  %bf.clear194 = and i32 %bf.load193, 65535
  %cmp195 = icmp eq i32 %bf.clear194, 66
  br i1 %cmp195, label %land.lhs.true.197, label %if.end.214

land.lhs.true.197:                                ; preds = %if.end.192
  %93 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %bf.load198 = load i32, i32* %94, align 8
  %bf.lshr199 = lshr i32 %bf.load198, 24
  %bf.clear200 = and i32 %bf.lshr199, 1
  %tobool201 = icmp ne i32 %bf.clear200, 0
  br i1 %tobool201, label %if.end.214, label %land.lhs.true.202

land.lhs.true.202:                                ; preds = %land.lhs.true.197
  %95 = load %union.tree_node*, %union.tree_node** %field, align 8
  %decl203 = bitcast %union.tree_node* %95 to %struct.tree_decl*
  %non_addressable = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl203, i32 0, i32 5
  %96 = bitcast i48* %non_addressable to i64*
  %bf.load204 = load i64, i64* %96, align 8
  %bf.lshr205 = lshr i64 %bf.load204, 34
  %bf.clear206 = and i64 %bf.lshr205, 1
  %bf.cast207 = trunc i64 %bf.clear206 to i32
  %tobool208 = icmp ne i32 %bf.cast207, 0
  br i1 %tobool208, label %if.then.209, label %if.end.214

if.then.209:                                      ; preds = %land.lhs.true.202
  %97 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %call210 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %97)
  store %struct.rtx_def* %call210, %struct.rtx_def** %to_rtx, align 8
  %98 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load211 = load i32, i32* %99, align 8
  %bf.clear212 = and i32 %bf.load211, -16777217
  %bf.set213 = or i32 %bf.clear212, 16777216
  store i32 %bf.set213, i32* %99, align 8
  br label %if.end.214

if.end.214:                                       ; preds = %if.then.209, %land.lhs.true.202, %land.lhs.true.197, %if.end.192
  %100 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx, align 8
  %101 = load i64, i64* %bitsize, align 8
  %102 = load i64, i64* %bitpos, align 8
  %103 = load i32, i32* %mode, align 4
  %104 = load %union.tree_node*, %union.tree_node** %value, align 8
  %105 = load %union.tree_node*, %union.tree_node** %type, align 8
  %106 = load i32, i32* %cleared.addr, align 4
  %107 = load %union.tree_node*, %union.tree_node** %field, align 8
  %common215 = bitcast %union.tree_node* %107 to %struct.tree_common*
  %type216 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common215, i32 0, i32 1
  %108 = load %union.tree_node*, %union.tree_node** %type216, align 8
  %call217 = call i64 @get_alias_set(%union.tree_node* %108)
  %conv218 = trunc i64 %call217 to i32
  call void @store_constructor_field(%struct.rtx_def* %100, i64 %101, i64 %102, i32 %103, %union.tree_node* %104, %union.tree_node* %105, i32 %106, i32 %conv218)
  br label %for.inc

for.inc:                                          ; preds = %if.end.214, %if.then.109, %if.then.103
  %109 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common219 = bitcast %union.tree_node* %109 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common219, i32 0, i32 0
  %110 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %110, %union.tree_node** %elt, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.982

if.else.220:                                      ; preds = %lor.lhs.false.8
  %111 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common221 = bitcast %union.tree_node* %111 to %struct.tree_common*
  %code222 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common221, i32 0, i32 2
  %bf.load223 = load i32, i32* %code222, align 8
  %bf.clear224 = and i32 %bf.load223, 255
  %cmp225 = icmp eq i32 %bf.clear224, 18
  br i1 %cmp225, label %if.then.234, label %lor.lhs.false.227

lor.lhs.false.227:                                ; preds = %if.else.220
  %112 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common228 = bitcast %union.tree_node* %112 to %struct.tree_common*
  %code229 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common228, i32 0, i32 2
  %bf.load230 = load i32, i32* %code229, align 8
  %bf.clear231 = and i32 %bf.load230, 255
  %cmp232 = icmp eq i32 %bf.clear231, 9
  br i1 %cmp232, label %if.then.234, label %if.else.693

if.then.234:                                      ; preds = %lor.lhs.false.227, %if.else.220
  %113 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type236 = bitcast %union.tree_node* %113 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type236, i32 0, i32 1
  %114 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %114, %union.tree_node** %domain, align 8
  %115 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common237 = bitcast %union.tree_node* %115 to %struct.tree_common*
  %type238 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common237, i32 0, i32 1
  %116 = load %union.tree_node*, %union.tree_node** %type238, align 8
  store %union.tree_node* %116, %union.tree_node** %elttype, align 8
  store i64 0, i64* %minelt, align 8
  store i64 0, i64* %maxelt, align 8
  %117 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common239 = bitcast %union.tree_node* %117 to %struct.tree_common*
  %code240 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common239, i32 0, i32 2
  %bf.load241 = load i32, i32* %code240, align 8
  %bf.clear242 = and i32 %bf.load241, 255
  %cmp243 = icmp eq i32 %bf.clear242, 9
  br i1 %cmp243, label %if.then.245, label %if.end.254

if.then.245:                                      ; preds = %if.then.234
  %118 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type246 = bitcast %union.tree_node* %118 to %struct.tree_type*
  %values247 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type246, i32 0, i32 1
  %119 = load %union.tree_node*, %union.tree_node** %values247, align 8
  store %union.tree_node* %119, %union.tree_node** %domain, align 8
  %120 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type248 = bitcast %union.tree_node* %120 to %struct.tree_type*
  %values249 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type248, i32 0, i32 1
  %121 = load %union.tree_node*, %union.tree_node** %values249, align 8
  %common250 = bitcast %union.tree_node* %121 to %struct.tree_common*
  %type251 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common250, i32 0, i32 1
  %122 = load %union.tree_node*, %union.tree_node** %type251, align 8
  %type252 = bitcast %union.tree_node* %122 to %struct.tree_type*
  %values253 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type252, i32 0, i32 1
  %123 = load %union.tree_node*, %union.tree_node** %values253, align 8
  store %union.tree_node* %123, %union.tree_node** %domain, align 8
  br label %if.end.254

if.end.254:                                       ; preds = %if.then.245, %if.then.234
  %124 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type255 = bitcast %union.tree_node* %124 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type255, i32 0, i32 12
  %125 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %tobool256 = icmp ne %union.tree_node* %125, null
  br i1 %tobool256, label %land.lhs.true.257, label %land.end

land.lhs.true.257:                                ; preds = %if.end.254
  %126 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type258 = bitcast %union.tree_node* %126 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type258, i32 0, i32 13
  %127 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %tobool259 = icmp ne %union.tree_node* %127, null
  br i1 %tobool259, label %land.lhs.true.260, label %land.end

land.lhs.true.260:                                ; preds = %land.lhs.true.257
  %128 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type261 = bitcast %union.tree_node* %128 to %struct.tree_type*
  %minval262 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type261, i32 0, i32 12
  %129 = load %union.tree_node*, %union.tree_node** %minval262, align 8
  %call263 = call i32 @host_integerp(%union.tree_node* %129, i32 0)
  %tobool264 = icmp ne i32 %call263, 0
  br i1 %tobool264, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.260
  %130 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type265 = bitcast %union.tree_node* %130 to %struct.tree_type*
  %maxval266 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type265, i32 0, i32 13
  %131 = load %union.tree_node*, %union.tree_node** %maxval266, align 8
  %call267 = call i32 @host_integerp(%union.tree_node* %131, i32 0)
  %tobool268 = icmp ne i32 %call267, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.260, %land.lhs.true.257, %if.end.254
  %132 = phi i1 [ false, %land.lhs.true.260 ], [ false, %land.lhs.true.257 ], [ false, %if.end.254 ], [ %tobool268, %land.rhs ]
  %land.ext = zext i1 %132 to i32
  store i32 %land.ext, i32* %const_bounds_p, align 4
  %133 = load i32, i32* %const_bounds_p, align 4
  %tobool269 = icmp ne i32 %133, 0
  br i1 %tobool269, label %if.then.270, label %if.end.277

if.then.270:                                      ; preds = %land.end
  %134 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type271 = bitcast %union.tree_node* %134 to %struct.tree_type*
  %minval272 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type271, i32 0, i32 12
  %135 = load %union.tree_node*, %union.tree_node** %minval272, align 8
  %call273 = call i64 @tree_low_cst(%union.tree_node* %135, i32 0)
  store i64 %call273, i64* %minelt, align 8
  %136 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type274 = bitcast %union.tree_node* %136 to %struct.tree_type*
  %maxval275 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type274, i32 0, i32 13
  %137 = load %union.tree_node*, %union.tree_node** %maxval275, align 8
  %call276 = call i64 @tree_low_cst(%union.tree_node* %137, i32 0)
  store i64 %call276, i64* %maxelt, align 8
  br label %if.end.277

if.end.277:                                       ; preds = %if.then.270, %land.end
  %138 = load i32, i32* %cleared.addr, align 4
  %tobool278 = icmp ne i32 %138, 0
  br i1 %tobool278, label %if.then.291, label %lor.lhs.false.279

lor.lhs.false.279:                                ; preds = %if.end.277
  %139 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %140 = bitcast %struct.rtx_def* %139 to i32*
  %bf.load280 = load i32, i32* %140, align 8
  %bf.clear281 = and i32 %bf.load280, 65535
  %cmp282 = icmp eq i32 %bf.clear281, 61
  br i1 %cmp282, label %land.lhs.true.284, label %if.else.292

land.lhs.true.284:                                ; preds = %lor.lhs.false.279
  %141 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common285 = bitcast %union.tree_node* %141 to %struct.tree_common*
  %static_flag286 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common285, i32 0, i32 2
  %bf.load287 = load i32, i32* %static_flag286, align 8
  %bf.lshr288 = lshr i32 %bf.load287, 18
  %bf.clear289 = and i32 %bf.lshr288, 1
  %tobool290 = icmp ne i32 %bf.clear289, 0
  br i1 %tobool290, label %if.then.291, label %if.else.292

if.then.291:                                      ; preds = %land.lhs.true.284, %if.end.277
  store i32 1, i32* %need_to_clear, align 4
  br label %if.end.360

if.else.292:                                      ; preds = %land.lhs.true.284, %lor.lhs.false.279
  store i64 0, i64* %count, align 8
  store i64 0, i64* %zero_count, align 8
  %142 = load i32, i32* %const_bounds_p, align 4
  %tobool293 = icmp ne i32 %142, 0
  %lnot = xor i1 %tobool293, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %need_to_clear, align 4
  %143 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp294 = bitcast %union.tree_node* %143 to %struct.tree_exp*
  %operands295 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp294, i32 0, i32 2
  %arrayidx296 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands295, i32 0, i64 1
  %144 = load %union.tree_node*, %union.tree_node** %arrayidx296, align 8
  store %union.tree_node* %144, %union.tree_node** %elt235, align 8
  br label %for.cond.297

for.cond.297:                                     ; preds = %for.inc.344, %if.else.292
  %145 = load %union.tree_node*, %union.tree_node** %elt235, align 8
  %cmp298 = icmp ne %union.tree_node* %145, null
  br i1 %cmp298, label %land.rhs.300, label %land.end.304

land.rhs.300:                                     ; preds = %for.cond.297
  %146 = load i32, i32* %need_to_clear, align 4
  %tobool301 = icmp ne i32 %146, 0
  %lnot302 = xor i1 %tobool301, true
  br label %land.end.304

land.end.304:                                     ; preds = %land.rhs.300, %for.cond.297
  %147 = phi i1 [ false, %for.cond.297 ], [ %lnot302, %land.rhs.300 ]
  br i1 %147, label %for.body.306, label %for.end.347

for.body.306:                                     ; preds = %land.end.304
  %148 = load %union.tree_node*, %union.tree_node** %elt235, align 8
  %list307 = bitcast %union.tree_node* %148 to %struct.tree_list*
  %purpose308 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list307, i32 0, i32 1
  %149 = load %union.tree_node*, %union.tree_node** %purpose308, align 8
  store %union.tree_node* %149, %union.tree_node** %index, align 8
  %150 = load %union.tree_node*, %union.tree_node** %index, align 8
  %cmp309 = icmp ne %union.tree_node* %150, null
  br i1 %cmp309, label %land.lhs.true.311, label %if.else.334

land.lhs.true.311:                                ; preds = %for.body.306
  %151 = load %union.tree_node*, %union.tree_node** %index, align 8
  %common312 = bitcast %union.tree_node* %151 to %struct.tree_common*
  %code313 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common312, i32 0, i32 2
  %bf.load314 = load i32, i32* %code313, align 8
  %bf.clear315 = and i32 %bf.load314, 255
  %cmp316 = icmp eq i32 %bf.clear315, 113
  br i1 %cmp316, label %if.then.318, label %if.else.334

if.then.318:                                      ; preds = %land.lhs.true.311
  %152 = load %union.tree_node*, %union.tree_node** %index, align 8
  %exp319 = bitcast %union.tree_node* %152 to %struct.tree_exp*
  %operands320 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp319, i32 0, i32 2
  %arrayidx321 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands320, i32 0, i64 0
  %153 = load %union.tree_node*, %union.tree_node** %arrayidx321, align 8
  store %union.tree_node* %153, %union.tree_node** %lo_index, align 8
  %154 = load %union.tree_node*, %union.tree_node** %index, align 8
  %exp322 = bitcast %union.tree_node* %154 to %struct.tree_exp*
  %operands323 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp322, i32 0, i32 2
  %arrayidx324 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands323, i32 0, i64 1
  %155 = load %union.tree_node*, %union.tree_node** %arrayidx324, align 8
  store %union.tree_node* %155, %union.tree_node** %hi_index, align 8
  %156 = load %union.tree_node*, %union.tree_node** %lo_index, align 8
  %call325 = call i32 @host_integerp(%union.tree_node* %156, i32 1)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %lor.lhs.false.327, label %if.then.330

lor.lhs.false.327:                                ; preds = %if.then.318
  %157 = load %union.tree_node*, %union.tree_node** %hi_index, align 8
  %call328 = call i32 @host_integerp(%union.tree_node* %157, i32 1)
  %tobool329 = icmp ne i32 %call328, 0
  br i1 %tobool329, label %if.end.331, label %if.then.330

if.then.330:                                      ; preds = %lor.lhs.false.327, %if.then.318
  store i32 1, i32* %need_to_clear, align 4
  br label %for.end.347

if.end.331:                                       ; preds = %lor.lhs.false.327
  %158 = load %union.tree_node*, %union.tree_node** %hi_index, align 8
  %call332 = call i64 @tree_low_cst(%union.tree_node* %158, i32 1)
  %159 = load %union.tree_node*, %union.tree_node** %lo_index, align 8
  %call333 = call i64 @tree_low_cst(%union.tree_node* %159, i32 1)
  %sub = sub nsw i64 %call332, %call333
  %add = add nsw i64 %sub, 1
  store i64 %add, i64* %this_node_count, align 8
  br label %if.end.335

if.else.334:                                      ; preds = %land.lhs.true.311, %for.body.306
  store i64 1, i64* %this_node_count, align 8
  br label %if.end.335

if.end.335:                                       ; preds = %if.else.334, %if.end.331
  %160 = load i64, i64* %this_node_count, align 8
  %161 = load i64, i64* %count, align 8
  %add336 = add nsw i64 %161, %160
  store i64 %add336, i64* %count, align 8
  %162 = load %union.tree_node*, %union.tree_node** %elt235, align 8
  %list337 = bitcast %union.tree_node* %162 to %struct.tree_list*
  %value338 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list337, i32 0, i32 2
  %163 = load %union.tree_node*, %union.tree_node** %value338, align 8
  %call339 = call i32 @mostly_zeros_p(%union.tree_node* %163)
  %tobool340 = icmp ne i32 %call339, 0
  br i1 %tobool340, label %if.then.341, label %if.end.343

if.then.341:                                      ; preds = %if.end.335
  %164 = load i64, i64* %this_node_count, align 8
  %165 = load i64, i64* %zero_count, align 8
  %add342 = add nsw i64 %165, %164
  store i64 %add342, i64* %zero_count, align 8
  br label %if.end.343

if.end.343:                                       ; preds = %if.then.341, %if.end.335
  br label %for.inc.344

for.inc.344:                                      ; preds = %if.end.343
  %166 = load %union.tree_node*, %union.tree_node** %elt235, align 8
  %common345 = bitcast %union.tree_node* %166 to %struct.tree_common*
  %chain346 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common345, i32 0, i32 0
  %167 = load %union.tree_node*, %union.tree_node** %chain346, align 8
  store %union.tree_node* %167, %union.tree_node** %elt235, align 8
  br label %for.cond.297

for.end.347:                                      ; preds = %if.then.330, %land.end.304
  %168 = load i32, i32* %need_to_clear, align 4
  %tobool348 = icmp ne i32 %168, 0
  br i1 %tobool348, label %if.end.359, label %land.lhs.true.349

land.lhs.true.349:                                ; preds = %for.end.347
  %169 = load i64, i64* %count, align 8
  %170 = load i64, i64* %maxelt, align 8
  %171 = load i64, i64* %minelt, align 8
  %sub350 = sub nsw i64 %170, %171
  %add351 = add nsw i64 %sub350, 1
  %cmp352 = icmp slt i64 %169, %add351
  br i1 %cmp352, label %if.then.358, label %lor.lhs.false.354

lor.lhs.false.354:                                ; preds = %land.lhs.true.349
  %172 = load i64, i64* %zero_count, align 8
  %mul = mul nsw i64 4, %172
  %173 = load i64, i64* %count, align 8
  %mul355 = mul nsw i64 3, %173
  %cmp356 = icmp sge i64 %mul, %mul355
  br i1 %cmp356, label %if.then.358, label %if.end.359

if.then.358:                                      ; preds = %lor.lhs.false.354, %land.lhs.true.349
  store i32 1, i32* %need_to_clear, align 4
  br label %if.end.359

if.end.359:                                       ; preds = %if.then.358, %lor.lhs.false.354, %for.end.347
  br label %if.end.360

if.end.360:                                       ; preds = %if.end.359, %if.then.291
  %174 = load i32, i32* %need_to_clear, align 4
  %tobool361 = icmp ne i32 %174, 0
  br i1 %tobool361, label %land.lhs.true.362, label %if.else.384

land.lhs.true.362:                                ; preds = %if.end.360
  %175 = load i64, i64* %size.addr, align 8
  %cmp363 = icmp sgt i64 %175, 0
  br i1 %cmp363, label %if.then.365, label %if.else.384

if.then.365:                                      ; preds = %land.lhs.true.362
  %176 = load i32, i32* %cleared.addr, align 4
  %tobool366 = icmp ne i32 %176, 0
  br i1 %tobool366, label %if.end.383, label %if.then.367

if.then.367:                                      ; preds = %if.then.365
  %177 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %178 = bitcast %struct.rtx_def* %177 to i32*
  %bf.load368 = load i32, i32* %178, align 8
  %bf.clear369 = and i32 %bf.load368, 65535
  %cmp370 = icmp eq i32 %bf.clear369, 61
  br i1 %cmp370, label %if.then.372, label %if.else.379

if.then.372:                                      ; preds = %if.then.367
  %179 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %180 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %181 = bitcast %struct.rtx_def* %180 to i32*
  %bf.load373 = load i32, i32* %181, align 8
  %bf.lshr374 = lshr i32 %bf.load373, 16
  %bf.clear375 = and i32 %bf.lshr374, 255
  %idxprom376 = sext i32 %bf.clear375 to i64
  %arrayidx377 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom376
  %182 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx377, align 8
  %call378 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %179, %struct.rtx_def* %182)
  br label %if.end.382

if.else.379:                                      ; preds = %if.then.367
  %183 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %184 = load i64, i64* %size.addr, align 8
  %call380 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %184)
  %call381 = call %struct.rtx_def* @clear_storage(%struct.rtx_def* %183, %struct.rtx_def* %call380)
  br label %if.end.382

if.end.382:                                       ; preds = %if.else.379, %if.then.372
  br label %if.end.383

if.end.383:                                       ; preds = %if.end.382, %if.then.365
  store i32 1, i32* %cleared.addr, align 4
  br label %if.end.393

if.else.384:                                      ; preds = %land.lhs.true.362, %if.end.360
  %185 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %186 = bitcast %struct.rtx_def* %185 to i32*
  %bf.load385 = load i32, i32* %186, align 8
  %bf.clear386 = and i32 %bf.load385, 65535
  %cmp387 = icmp eq i32 %bf.clear386, 61
  br i1 %cmp387, label %if.then.389, label %if.end.392

if.then.389:                                      ; preds = %if.else.384
  %187 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call390 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %187)
  %call391 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call390)
  br label %if.end.392

if.end.392:                                       ; preds = %if.then.389, %if.else.384
  br label %if.end.393

if.end.393:                                       ; preds = %if.end.392, %if.end.383
  %188 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp394 = bitcast %union.tree_node* %188 to %struct.tree_exp*
  %operands395 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp394, i32 0, i32 2
  %arrayidx396 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands395, i32 0, i64 1
  %189 = load %union.tree_node*, %union.tree_node** %arrayidx396, align 8
  store %union.tree_node* %189, %union.tree_node** %elt235, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.397

for.cond.397:                                     ; preds = %for.inc.688, %if.end.393
  %190 = load %union.tree_node*, %union.tree_node** %elt235, align 8
  %tobool398 = icmp ne %union.tree_node* %190, null
  br i1 %tobool398, label %for.body.399, label %for.end.692

for.body.399:                                     ; preds = %for.cond.397
  %191 = load %union.tree_node*, %union.tree_node** %elt235, align 8
  %list405 = bitcast %union.tree_node* %191 to %struct.tree_list*
  %value406 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list405, i32 0, i32 2
  %192 = load %union.tree_node*, %union.tree_node** %value406, align 8
  store %union.tree_node* %192, %union.tree_node** %value404, align 8
  %193 = load %union.tree_node*, %union.tree_node** %elt235, align 8
  %list408 = bitcast %union.tree_node* %193 to %struct.tree_list*
  %purpose409 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list408, i32 0, i32 1
  %194 = load %union.tree_node*, %union.tree_node** %purpose409, align 8
  store %union.tree_node* %194, %union.tree_node** %index407, align 8
  %195 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %195, %struct.rtx_def** %xtarget, align 8
  %196 = load i32, i32* %cleared.addr, align 4
  %tobool410 = icmp ne i32 %196, 0
  br i1 %tobool410, label %land.lhs.true.411, label %if.end.415

land.lhs.true.411:                                ; preds = %for.body.399
  %197 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %call412 = call i32 @is_zeros_p(%union.tree_node* %197)
  %tobool413 = icmp ne i32 %call412, 0
  br i1 %tobool413, label %if.then.414, label %if.end.415

if.then.414:                                      ; preds = %land.lhs.true.411
  br label %for.inc.688

if.end.415:                                       ; preds = %land.lhs.true.411, %for.body.399
  %198 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %common416 = bitcast %union.tree_node* %198 to %struct.tree_common*
  %unsigned_flag417 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common416, i32 0, i32 2
  %bf.load418 = load i32, i32* %unsigned_flag417, align 8
  %bf.lshr419 = lshr i32 %bf.load418, 13
  %bf.clear420 = and i32 %bf.lshr419, 1
  store i32 %bf.clear420, i32* %unsignedp403, align 4
  %199 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type421 = bitcast %union.tree_node* %199 to %struct.tree_type*
  %mode422 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type421, i32 0, i32 6
  %bf.load423 = load i32, i32* %mode422, align 4
  %bf.lshr424 = lshr i32 %bf.load423, 9
  %bf.clear425 = and i32 %bf.lshr424, 127
  store i32 %bf.clear425, i32* %mode400, align 4
  %200 = load i32, i32* %mode400, align 4
  %cmp426 = icmp eq i32 %200, 51
  br i1 %cmp426, label %if.then.428, label %if.else.437

if.then.428:                                      ; preds = %if.end.415
  %201 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type429 = bitcast %union.tree_node* %201 to %struct.tree_type*
  %size430 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type429, i32 0, i32 2
  %202 = load %union.tree_node*, %union.tree_node** %size430, align 8
  %call431 = call i32 @host_integerp(%union.tree_node* %202, i32 1)
  %tobool432 = icmp ne i32 %call431, 0
  br i1 %tobool432, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.428
  %203 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type433 = bitcast %union.tree_node* %203 to %struct.tree_type*
  %size434 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type433, i32 0, i32 2
  %204 = load %union.tree_node*, %union.tree_node** %size434, align 8
  %call435 = call i64 @tree_low_cst(%union.tree_node* %204, i32 1)
  br label %cond.end

cond.false:                                       ; preds = %if.then.428
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond436 = phi i64 [ %call435, %cond.true ], [ -1, %cond.false ]
  store i64 %cond436, i64* %bitsize401, align 8
  br label %if.end.441

if.else.437:                                      ; preds = %if.end.415
  %205 = load i32, i32* %mode400, align 4
  %idxprom438 = sext i32 %205 to i64
  %arrayidx439 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom438
  %206 = load i16, i16* %arrayidx439, align 2
  %conv440 = zext i16 %206 to i64
  store i64 %conv440, i64* %bitsize401, align 8
  br label %if.end.441

if.end.441:                                       ; preds = %if.else.437, %cond.end
  %207 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %cmp442 = icmp ne %union.tree_node* %207, null
  br i1 %cmp442, label %land.lhs.true.444, label %if.else.603

land.lhs.true.444:                                ; preds = %if.end.441
  %208 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %common445 = bitcast %union.tree_node* %208 to %struct.tree_common*
  %code446 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common445, i32 0, i32 2
  %bf.load447 = load i32, i32* %code446, align 8
  %bf.clear448 = and i32 %bf.load447, 255
  %cmp449 = icmp eq i32 %bf.clear448, 113
  br i1 %cmp449, label %if.then.451, label %if.else.603

if.then.451:                                      ; preds = %land.lhs.true.444
  %209 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %exp453 = bitcast %union.tree_node* %209 to %struct.tree_exp*
  %operands454 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp453, i32 0, i32 2
  %arrayidx455 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands454, i32 0, i64 0
  %210 = load %union.tree_node*, %union.tree_node** %arrayidx455, align 8
  store %union.tree_node* %210, %union.tree_node** %lo_index452, align 8
  %211 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %exp457 = bitcast %union.tree_node* %211 to %struct.tree_exp*
  %operands458 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp457, i32 0, i32 2
  %arrayidx459 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands458, i32 0, i64 1
  %212 = load %union.tree_node*, %union.tree_node** %arrayidx459, align 8
  store %union.tree_node* %212, %union.tree_node** %hi_index456, align 8
  %213 = load i32, i32* %const_bounds_p, align 4
  %tobool461 = icmp ne i32 %213, 0
  br i1 %tobool461, label %land.lhs.true.462, label %if.else.536

land.lhs.true.462:                                ; preds = %if.then.451
  %214 = load %union.tree_node*, %union.tree_node** %lo_index452, align 8
  %call463 = call i32 @host_integerp(%union.tree_node* %214, i32 0)
  %tobool464 = icmp ne i32 %call463, 0
  br i1 %tobool464, label %land.lhs.true.465, label %if.else.536

land.lhs.true.465:                                ; preds = %land.lhs.true.462
  %215 = load %union.tree_node*, %union.tree_node** %hi_index456, align 8
  %call466 = call i32 @host_integerp(%union.tree_node* %215, i32 0)
  %tobool467 = icmp ne i32 %call466, 0
  br i1 %tobool467, label %land.lhs.true.468, label %if.else.536

land.lhs.true.468:                                ; preds = %land.lhs.true.465
  %216 = load %union.tree_node*, %union.tree_node** %lo_index452, align 8
  %call469 = call i64 @tree_low_cst(%union.tree_node* %216, i32 0)
  store i64 %call469, i64* %lo, align 8
  %217 = load %union.tree_node*, %union.tree_node** %hi_index456, align 8
  %call470 = call i64 @tree_low_cst(%union.tree_node* %217, i32 0)
  store i64 %call470, i64* %hi, align 8
  %218 = load i64, i64* %hi, align 8
  %219 = load i64, i64* %lo, align 8
  %sub471 = sub nsw i64 %218, %219
  %add472 = add nsw i64 %sub471, 1
  store i64 %add472, i64* %count460, align 8
  %220 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %221 = bitcast %struct.rtx_def* %220 to i32*
  %bf.load473 = load i32, i32* %221, align 8
  %bf.clear474 = and i32 %bf.load473, 65535
  %cmp475 = icmp ne i32 %bf.clear474, 66
  br i1 %cmp475, label %lor.end, label %lor.lhs.false.477

lor.lhs.false.477:                                ; preds = %land.lhs.true.468
  %222 = load i64, i64* %count460, align 8
  %cmp478 = icmp sle i64 %222, 2
  br i1 %cmp478, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.477
  %223 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type480 = bitcast %union.tree_node* %223 to %struct.tree_type*
  %size481 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type480, i32 0, i32 2
  %224 = load %union.tree_node*, %union.tree_node** %size481, align 8
  %call482 = call i32 @host_integerp(%union.tree_node* %224, i32 1)
  %tobool483 = icmp ne i32 %call482, 0
  br i1 %tobool483, label %land.rhs.484, label %land.end.491

land.rhs.484:                                     ; preds = %lor.rhs
  %225 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type485 = bitcast %union.tree_node* %225 to %struct.tree_type*
  %size486 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type485, i32 0, i32 2
  %226 = load %union.tree_node*, %union.tree_node** %size486, align 8
  %call487 = call i64 @tree_low_cst(%union.tree_node* %226, i32 1)
  %227 = load i64, i64* %count460, align 8
  %mul488 = mul nsw i64 %call487, %227
  %cmp489 = icmp sle i64 %mul488, 320
  br label %land.end.491

land.end.491:                                     ; preds = %land.rhs.484, %lor.rhs
  %228 = phi i1 [ false, %lor.rhs ], [ %cmp489, %land.rhs.484 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end.491, %lor.lhs.false.477, %land.lhs.true.468
  %229 = phi i1 [ true, %lor.lhs.false.477 ], [ true, %land.lhs.true.468 ], [ %228, %land.end.491 ]
  br i1 %229, label %if.then.493, label %if.else.536

if.then.493:                                      ; preds = %lor.end
  %230 = load i64, i64* %minelt, align 8
  %231 = load i64, i64* %lo, align 8
  %sub494 = sub nsw i64 %231, %230
  store i64 %sub494, i64* %lo, align 8
  %232 = load i64, i64* %minelt, align 8
  %233 = load i64, i64* %hi, align 8
  %sub495 = sub nsw i64 %233, %232
  store i64 %sub495, i64* %hi, align 8
  br label %for.cond.496

for.cond.496:                                     ; preds = %for.inc.534, %if.then.493
  %234 = load i64, i64* %lo, align 8
  %235 = load i64, i64* %hi, align 8
  %cmp497 = icmp sle i64 %234, %235
  br i1 %cmp497, label %for.body.499, label %for.end.535

for.body.499:                                     ; preds = %for.cond.496
  %236 = load i64, i64* %lo, align 8
  %237 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type500 = bitcast %union.tree_node* %237 to %struct.tree_type*
  %size501 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type500, i32 0, i32 2
  %238 = load %union.tree_node*, %union.tree_node** %size501, align 8
  %call502 = call i64 @tree_low_cst(%union.tree_node* %238, i32 0)
  %mul503 = mul nsw i64 %236, %call502
  store i64 %mul503, i64* %bitpos402, align 8
  %239 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %240 = bitcast %struct.rtx_def* %239 to i32*
  %bf.load504 = load i32, i32* %240, align 8
  %bf.clear505 = and i32 %bf.load504, 65535
  %cmp506 = icmp eq i32 %bf.clear505, 66
  br i1 %cmp506, label %land.lhs.true.508, label %if.end.531

land.lhs.true.508:                                ; preds = %for.body.499
  %241 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %242 = bitcast %struct.rtx_def* %241 to i32*
  %bf.load509 = load i32, i32* %242, align 8
  %bf.lshr510 = lshr i32 %bf.load509, 24
  %bf.clear511 = and i32 %bf.lshr510, 1
  %tobool512 = icmp ne i32 %bf.clear511, 0
  br i1 %tobool512, label %if.end.531, label %land.lhs.true.513

land.lhs.true.513:                                ; preds = %land.lhs.true.508
  %243 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common514 = bitcast %union.tree_node* %243 to %struct.tree_common*
  %code515 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common514, i32 0, i32 2
  %bf.load516 = load i32, i32* %code515, align 8
  %bf.clear517 = and i32 %bf.load516, 255
  %cmp518 = icmp eq i32 %bf.clear517, 18
  br i1 %cmp518, label %land.lhs.true.520, label %if.end.531

land.lhs.true.520:                                ; preds = %land.lhs.true.513
  %244 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type521 = bitcast %union.tree_node* %244 to %struct.tree_type*
  %transparent_union_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type521, i32 0, i32 6
  %bf.load522 = load i32, i32* %transparent_union_flag, align 4
  %bf.lshr523 = lshr i32 %bf.load522, 19
  %bf.clear524 = and i32 %bf.lshr523, 1
  %tobool525 = icmp ne i32 %bf.clear524, 0
  br i1 %tobool525, label %if.then.526, label %if.end.531

if.then.526:                                      ; preds = %land.lhs.true.520
  %245 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call527 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %245)
  store %struct.rtx_def* %call527, %struct.rtx_def** %target.addr, align 8
  %246 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %247 = bitcast %struct.rtx_def* %246 to i32*
  %bf.load528 = load i32, i32* %247, align 8
  %bf.clear529 = and i32 %bf.load528, -16777217
  %bf.set530 = or i32 %bf.clear529, 16777216
  store i32 %bf.set530, i32* %247, align 8
  br label %if.end.531

if.end.531:                                       ; preds = %if.then.526, %land.lhs.true.520, %land.lhs.true.513, %land.lhs.true.508, %for.body.499
  %248 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %249 = load i64, i64* %bitsize401, align 8
  %250 = load i64, i64* %bitpos402, align 8
  %251 = load i32, i32* %mode400, align 4
  %252 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %253 = load %union.tree_node*, %union.tree_node** %type, align 8
  %254 = load i32, i32* %cleared.addr, align 4
  %255 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %call532 = call i64 @get_alias_set(%union.tree_node* %255)
  %conv533 = trunc i64 %call532 to i32
  call void @store_constructor_field(%struct.rtx_def* %248, i64 %249, i64 %250, i32 %251, %union.tree_node* %252, %union.tree_node* %253, i32 %254, i32 %conv533)
  br label %for.inc.534

for.inc.534:                                      ; preds = %if.end.531
  %256 = load i64, i64* %lo, align 8
  %inc = add nsw i64 %256, 1
  store i64 %inc, i64* %lo, align 8
  br label %for.cond.496

for.end.535:                                      ; preds = %for.cond.496
  br label %if.end.602

if.else.536:                                      ; preds = %lor.end, %land.lhs.true.465, %land.lhs.true.462, %if.then.451
  %257 = load %union.tree_node*, %union.tree_node** %hi_index456, align 8
  %call537 = call %struct.rtx_def* @expand_expr(%union.tree_node* %257, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call537, %struct.rtx_def** %hi_r, align 8
  %call538 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call538, %struct.rtx_def** %loop_top, align 8
  %call539 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call539, %struct.rtx_def** %loop_end, align 8
  %258 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %common540 = bitcast %union.tree_node* %258 to %struct.tree_common*
  %unsigned_flag541 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common540, i32 0, i32 2
  %bf.load542 = load i32, i32* %unsigned_flag541, align 8
  %bf.lshr543 = lshr i32 %bf.load542, 13
  %bf.clear544 = and i32 %bf.lshr543, 1
  store i32 %bf.clear544, i32* %unsignedp403, align 4
  %259 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %call545 = call %union.tree_node* @build_decl(i32 34, %union.tree_node* null, %union.tree_node* %259)
  store %union.tree_node* %call545, %union.tree_node** %index407, align 8
  %260 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %261 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %decl546 = bitcast %union.tree_node* %261 to %struct.tree_decl*
  %mode547 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl546, i32 0, i32 5
  %262 = bitcast i48* %mode547 to i64*
  %bf.load548 = load i64, i64* %262, align 8
  %bf.clear549 = and i64 %bf.load548, 255
  %bf.cast550 = trunc i64 %bf.clear549 to i32
  %call551 = call i32 @promote_mode(%union.tree_node* %260, i32 %bf.cast550, i32* %unsignedp403, i32 0)
  %call552 = call %struct.rtx_def* @gen_reg_rtx(i32 %call551)
  store %struct.rtx_def* %call552, %struct.rtx_def** %index_r, align 8
  %263 = load %struct.rtx_def*, %struct.rtx_def** %index_r, align 8
  %264 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %decl553 = bitcast %union.tree_node* %264 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl553, i32 0, i32 17
  store %struct.rtx_def* %263, %struct.rtx_def** %rtl, align 8
  %265 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %common554 = bitcast %union.tree_node* %265 to %struct.tree_common*
  %code555 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common554, i32 0, i32 2
  %bf.load556 = load i32, i32* %code555, align 8
  %bf.clear557 = and i32 %bf.load556, 255
  %cmp558 = icmp eq i32 %bf.clear557, 118
  br i1 %cmp558, label %land.lhs.true.560, label %if.end.568

land.lhs.true.560:                                ; preds = %if.else.536
  %266 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %exp561 = bitcast %union.tree_node* %266 to %struct.tree_exp*
  %operands562 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp561, i32 0, i32 2
  %arrayidx563 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands562, i32 0, i64 2
  %267 = bitcast %union.tree_node** %arrayidx563 to %struct.rtx_def**
  %268 = load %struct.rtx_def*, %struct.rtx_def** %267, align 8
  %cmp564 = icmp eq %struct.rtx_def* %268, null
  br i1 %cmp564, label %if.then.566, label %if.end.568

if.then.566:                                      ; preds = %land.lhs.true.560
  %269 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %270 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call567 = call %struct.rtx_def* @expand_expr(%union.tree_node* %269, %struct.rtx_def* %270, i32 0, i32 0)
  call void @emit_queue()
  br label %if.end.568

if.end.568:                                       ; preds = %if.then.566, %land.lhs.true.560, %if.else.536
  %271 = load %union.tree_node*, %union.tree_node** %lo_index452, align 8
  %272 = load %struct.rtx_def*, %struct.rtx_def** %index_r, align 8
  %call569 = call %struct.rtx_def* @store_expr(%union.tree_node* %271, %struct.rtx_def* %272, i32 0)
  %call570 = call %struct.nesting* @expand_start_loop(i32 0)
  store %struct.nesting* %call570, %struct.nesting** %loop, align 8
  %273 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %274 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %common571 = bitcast %union.tree_node* %274 to %struct.tree_common*
  %type572 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common571, i32 0, i32 1
  %275 = load %union.tree_node*, %union.tree_node** %type572, align 8
  %276 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %277 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type573 = bitcast %union.tree_node* %277 to %struct.tree_type*
  %minval574 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type573, i32 0, i32 12
  %278 = load %union.tree_node*, %union.tree_node** %minval574, align 8
  %call575 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %275, %union.tree_node* %276, %union.tree_node* %278)
  %call576 = call %union.tree_node* @fold(%union.tree_node* %call575)
  %call577 = call %union.tree_node* @convert(%union.tree_node* %273, %union.tree_node* %call576)
  store %union.tree_node* %call577, %union.tree_node** %position, align 8
  %279 = load %union.tree_node*, %union.tree_node** %position, align 8
  %280 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %281 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type578 = bitcast %union.tree_node* %281 to %struct.tree_type*
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type578, i32 0, i32 3
  %282 = load %union.tree_node*, %union.tree_node** %size_unit, align 8
  %call579 = call %union.tree_node* @convert(%union.tree_node* %280, %union.tree_node* %282)
  %call580 = call %union.tree_node* @size_binop(i32 61, %union.tree_node* %279, %union.tree_node* %call579)
  store %union.tree_node* %call580, %union.tree_node** %position, align 8
  %283 = load %union.tree_node*, %union.tree_node** %position, align 8
  %call581 = call %struct.rtx_def* @expand_expr(%union.tree_node* %283, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call581, %struct.rtx_def** %pos_rtx, align 8
  %284 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %285 = load %struct.rtx_def*, %struct.rtx_def** %pos_rtx, align 8
  %286 = load %union.tree_node*, %union.tree_node** %position, align 8
  %call582 = call i64 @highest_pow2_factor(%union.tree_node* %286)
  %call583 = call %struct.rtx_def* @offset_address(%struct.rtx_def* %284, %struct.rtx_def* %285, i64 %call582)
  store %struct.rtx_def* %call583, %struct.rtx_def** %xtarget, align 8
  %287 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8
  %288 = load i32, i32* %mode400, align 4
  %call584 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %287, i32 %288, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call584, %struct.rtx_def** %xtarget, align 8
  %289 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %common585 = bitcast %union.tree_node* %289 to %struct.tree_common*
  %code586 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common585, i32 0, i32 2
  %bf.load587 = load i32, i32* %code586, align 8
  %bf.clear588 = and i32 %bf.load587, 255
  %cmp589 = icmp eq i32 %bf.clear588, 46
  br i1 %cmp589, label %if.then.591, label %if.else.592

if.then.591:                                      ; preds = %if.end.568
  %290 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %291 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8
  %292 = load i32, i32* %cleared.addr, align 4
  %293 = load i64, i64* %bitsize401, align 8
  %div = sdiv i64 %293, 8
  call void @store_constructor(%union.tree_node* %290, %struct.rtx_def* %291, i32 %292, i64 %div)
  br label %if.end.594

if.else.592:                                      ; preds = %if.end.568
  %294 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %295 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8
  %call593 = call %struct.rtx_def* @store_expr(%union.tree_node* %294, %struct.rtx_def* %295, i32 0)
  br label %if.end.594

if.end.594:                                       ; preds = %if.else.592, %if.then.591
  %296 = load %struct.nesting*, %struct.nesting** %loop, align 8
  %297 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %298 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %299 = load %union.tree_node*, %union.tree_node** %hi_index456, align 8
  %call595 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 97, %union.tree_node* %297, %union.tree_node* %298, %union.tree_node* %299)
  %call596 = call i32 @expand_exit_loop_if_false(%struct.nesting* %296, %union.tree_node* %call595)
  %300 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %common597 = bitcast %union.tree_node* %300 to %struct.tree_common*
  %type598 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common597, i32 0, i32 1
  %301 = load %union.tree_node*, %union.tree_node** %type598, align 8
  %302 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %303 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 12), align 8
  %call599 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 130, %union.tree_node* %301, %union.tree_node* %302, %union.tree_node* %303)
  %call600 = call %struct.rtx_def* @expand_increment(%union.tree_node* %call599, i32 0, i32 0)
  call void @expand_end_loop()
  %304 = load %struct.rtx_def*, %struct.rtx_def** %loop_end, align 8
  %call601 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %304)
  br label %if.end.602

if.end.602:                                       ; preds = %if.end.594, %for.end.535
  br label %if.end.687

if.else.603:                                      ; preds = %land.lhs.true.444, %if.end.441
  %305 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %cmp604 = icmp ne %union.tree_node* %305, null
  br i1 %cmp604, label %land.lhs.true.606, label %lor.lhs.false.609

land.lhs.true.606:                                ; preds = %if.else.603
  %306 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %call607 = call i32 @host_integerp(%union.tree_node* %306, i32 0)
  %tobool608 = icmp ne i32 %call607, 0
  br i1 %tobool608, label %lor.lhs.false.609, label %if.then.614

lor.lhs.false.609:                                ; preds = %land.lhs.true.606, %if.else.603
  %307 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type610 = bitcast %union.tree_node* %307 to %struct.tree_type*
  %size611 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type610, i32 0, i32 2
  %308 = load %union.tree_node*, %union.tree_node** %size611, align 8
  %call612 = call i32 @host_integerp(%union.tree_node* %308, i32 1)
  %tobool613 = icmp ne i32 %call612, 0
  br i1 %tobool613, label %if.else.638, label %if.then.614

if.then.614:                                      ; preds = %lor.lhs.false.609, %land.lhs.true.606
  %309 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %cmp616 = icmp eq %union.tree_node* %309, null
  br i1 %cmp616, label %if.then.618, label %if.end.620

if.then.618:                                      ; preds = %if.then.614
  %call619 = call %union.tree_node* @size_int_wide(i64 1, i32 1)
  store %union.tree_node* %call619, %union.tree_node** %index407, align 8
  br label %if.end.620

if.end.620:                                       ; preds = %if.then.618, %if.then.614
  %310 = load i64, i64* %minelt, align 8
  %tobool621 = icmp ne i64 %310, 0
  br i1 %tobool621, label %if.then.622, label %if.end.628

if.then.622:                                      ; preds = %if.end.620
  %311 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %312 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %313 = load %union.tree_node*, %union.tree_node** %domain, align 8
  %type623 = bitcast %union.tree_node* %313 to %struct.tree_type*
  %minval624 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type623, i32 0, i32 12
  %314 = load %union.tree_node*, %union.tree_node** %minval624, align 8
  %call625 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %312, %union.tree_node* %314)
  %call626 = call %union.tree_node* @fold(%union.tree_node* %call625)
  %call627 = call %union.tree_node* @convert(%union.tree_node* %311, %union.tree_node* %call626)
  store %union.tree_node* %call627, %union.tree_node** %index407, align 8
  br label %if.end.628

if.end.628:                                       ; preds = %if.then.622, %if.end.620
  %315 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %316 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %317 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type629 = bitcast %union.tree_node* %317 to %struct.tree_type*
  %size_unit630 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type629, i32 0, i32 3
  %318 = load %union.tree_node*, %union.tree_node** %size_unit630, align 8
  %call631 = call %union.tree_node* @convert(%union.tree_node* %316, %union.tree_node* %318)
  %call632 = call %union.tree_node* @size_binop(i32 61, %union.tree_node* %315, %union.tree_node* %call631)
  store %union.tree_node* %call632, %union.tree_node** %position615, align 8
  %319 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %320 = load %union.tree_node*, %union.tree_node** %position615, align 8
  %call633 = call %struct.rtx_def* @expand_expr(%union.tree_node* %320, %struct.rtx_def* null, i32 0, i32 0)
  %321 = load %union.tree_node*, %union.tree_node** %position615, align 8
  %call634 = call i64 @highest_pow2_factor(%union.tree_node* %321)
  %call635 = call %struct.rtx_def* @offset_address(%struct.rtx_def* %319, %struct.rtx_def* %call633, i64 %call634)
  store %struct.rtx_def* %call635, %struct.rtx_def** %xtarget, align 8
  %322 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8
  %323 = load i32, i32* %mode400, align 4
  %call636 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %322, i32 %323, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call636, %struct.rtx_def** %xtarget, align 8
  %324 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %325 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8
  %call637 = call %struct.rtx_def* @store_expr(%union.tree_node* %324, %struct.rtx_def* %325, i32 0)
  br label %if.end.686

if.else.638:                                      ; preds = %lor.lhs.false.609
  %326 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %cmp639 = icmp ne %union.tree_node* %326, null
  br i1 %cmp639, label %if.then.641, label %if.else.648

if.then.641:                                      ; preds = %if.else.638
  %327 = load %union.tree_node*, %union.tree_node** %index407, align 8
  %call642 = call i64 @tree_low_cst(%union.tree_node* %327, i32 0)
  %328 = load i64, i64* %minelt, align 8
  %sub643 = sub nsw i64 %call642, %328
  %329 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type644 = bitcast %union.tree_node* %329 to %struct.tree_type*
  %size645 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type644, i32 0, i32 2
  %330 = load %union.tree_node*, %union.tree_node** %size645, align 8
  %call646 = call i64 @tree_low_cst(%union.tree_node* %330, i32 1)
  %mul647 = mul nsw i64 %sub643, %call646
  store i64 %mul647, i64* %bitpos402, align 8
  br label %if.end.654

if.else.648:                                      ; preds = %if.else.638
  %331 = load i32, i32* %i, align 4
  %conv649 = sext i32 %331 to i64
  %332 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %type650 = bitcast %union.tree_node* %332 to %struct.tree_type*
  %size651 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type650, i32 0, i32 2
  %333 = load %union.tree_node*, %union.tree_node** %size651, align 8
  %call652 = call i64 @tree_low_cst(%union.tree_node* %333, i32 1)
  %mul653 = mul nsw i64 %conv649, %call652
  store i64 %mul653, i64* %bitpos402, align 8
  br label %if.end.654

if.end.654:                                       ; preds = %if.else.648, %if.then.641
  %334 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %335 = bitcast %struct.rtx_def* %334 to i32*
  %bf.load655 = load i32, i32* %335, align 8
  %bf.clear656 = and i32 %bf.load655, 65535
  %cmp657 = icmp eq i32 %bf.clear656, 66
  br i1 %cmp657, label %land.lhs.true.659, label %if.end.683

land.lhs.true.659:                                ; preds = %if.end.654
  %336 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %337 = bitcast %struct.rtx_def* %336 to i32*
  %bf.load660 = load i32, i32* %337, align 8
  %bf.lshr661 = lshr i32 %bf.load660, 24
  %bf.clear662 = and i32 %bf.lshr661, 1
  %tobool663 = icmp ne i32 %bf.clear662, 0
  br i1 %tobool663, label %if.end.683, label %land.lhs.true.664

land.lhs.true.664:                                ; preds = %land.lhs.true.659
  %338 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common665 = bitcast %union.tree_node* %338 to %struct.tree_common*
  %code666 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common665, i32 0, i32 2
  %bf.load667 = load i32, i32* %code666, align 8
  %bf.clear668 = and i32 %bf.load667, 255
  %cmp669 = icmp eq i32 %bf.clear668, 18
  br i1 %cmp669, label %land.lhs.true.671, label %if.end.683

land.lhs.true.671:                                ; preds = %land.lhs.true.664
  %339 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type672 = bitcast %union.tree_node* %339 to %struct.tree_type*
  %transparent_union_flag673 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type672, i32 0, i32 6
  %bf.load674 = load i32, i32* %transparent_union_flag673, align 4
  %bf.lshr675 = lshr i32 %bf.load674, 19
  %bf.clear676 = and i32 %bf.lshr675, 1
  %tobool677 = icmp ne i32 %bf.clear676, 0
  br i1 %tobool677, label %if.then.678, label %if.end.683

if.then.678:                                      ; preds = %land.lhs.true.671
  %340 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call679 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %340)
  store %struct.rtx_def* %call679, %struct.rtx_def** %target.addr, align 8
  %341 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %342 = bitcast %struct.rtx_def* %341 to i32*
  %bf.load680 = load i32, i32* %342, align 8
  %bf.clear681 = and i32 %bf.load680, -16777217
  %bf.set682 = or i32 %bf.clear681, 16777216
  store i32 %bf.set682, i32* %342, align 8
  br label %if.end.683

if.end.683:                                       ; preds = %if.then.678, %land.lhs.true.671, %land.lhs.true.664, %land.lhs.true.659, %if.end.654
  %343 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %344 = load i64, i64* %bitsize401, align 8
  %345 = load i64, i64* %bitpos402, align 8
  %346 = load i32, i32* %mode400, align 4
  %347 = load %union.tree_node*, %union.tree_node** %value404, align 8
  %348 = load %union.tree_node*, %union.tree_node** %type, align 8
  %349 = load i32, i32* %cleared.addr, align 4
  %350 = load %union.tree_node*, %union.tree_node** %elttype, align 8
  %call684 = call i64 @get_alias_set(%union.tree_node* %350)
  %conv685 = trunc i64 %call684 to i32
  call void @store_constructor_field(%struct.rtx_def* %343, i64 %344, i64 %345, i32 %346, %union.tree_node* %347, %union.tree_node* %348, i32 %349, i32 %conv685)
  br label %if.end.686

if.end.686:                                       ; preds = %if.end.683, %if.end.628
  br label %if.end.687

if.end.687:                                       ; preds = %if.end.686, %if.end.602
  br label %for.inc.688

for.inc.688:                                      ; preds = %if.end.687, %if.then.414
  %351 = load %union.tree_node*, %union.tree_node** %elt235, align 8
  %common689 = bitcast %union.tree_node* %351 to %struct.tree_common*
  %chain690 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common689, i32 0, i32 0
  %352 = load %union.tree_node*, %union.tree_node** %chain690, align 8
  store %union.tree_node* %352, %union.tree_node** %elt235, align 8
  %353 = load i32, i32* %i, align 4
  %inc691 = add nsw i32 %353, 1
  store i32 %inc691, i32* %i, align 4
  br label %for.cond.397

for.end.692:                                      ; preds = %for.cond.397
  br label %if.end.981

if.else.693:                                      ; preds = %lor.lhs.false.227
  %354 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common694 = bitcast %union.tree_node* %354 to %struct.tree_common*
  %code695 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common694, i32 0, i32 2
  %bf.load696 = load i32, i32* %code695, align 8
  %bf.clear697 = and i32 %bf.load696, 255
  %cmp698 = icmp eq i32 %bf.clear697, 19
  br i1 %cmp698, label %if.then.700, label %if.else.979

if.then.700:                                      ; preds = %if.else.693
  %355 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp702 = bitcast %union.tree_node* %355 to %struct.tree_exp*
  %operands703 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp702, i32 0, i32 2
  %arrayidx704 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands703, i32 0, i64 1
  %356 = load %union.tree_node*, %union.tree_node** %arrayidx704, align 8
  store %union.tree_node* %356, %union.tree_node** %elt701, align 8
  %357 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call705 = call i64 @int_size_in_bytes(%union.tree_node* %357)
  store i64 %call705, i64* %nbytes, align 8
  %358 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type707 = bitcast %union.tree_node* %358 to %struct.tree_type*
  %values708 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type707, i32 0, i32 1
  %359 = load %union.tree_node*, %union.tree_node** %values708, align 8
  store %union.tree_node* %359, %union.tree_node** %domain706, align 8
  %360 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %cmp709 = icmp eq %union.tree_node* %360, null
  br i1 %cmp709, label %land.lhs.true.711, label %if.end.720

land.lhs.true.711:                                ; preds = %if.then.700
  %361 = load i64, i64* %size.addr, align 8
  %cmp712 = icmp sgt i64 %361, 0
  br i1 %cmp712, label %if.then.714, label %if.end.720

if.then.714:                                      ; preds = %land.lhs.true.711
  %362 = load i32, i32* %cleared.addr, align 4
  %tobool715 = icmp ne i32 %362, 0
  br i1 %tobool715, label %if.end.719, label %if.then.716

if.then.716:                                      ; preds = %if.then.714
  %363 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %364 = load i64, i64* %size.addr, align 8
  %call717 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %364)
  %call718 = call %struct.rtx_def* @clear_storage(%struct.rtx_def* %363, %struct.rtx_def* %call717)
  br label %if.end.719

if.end.719:                                       ; preds = %if.then.716, %if.then.714
  br label %if.end.982

if.end.720:                                       ; preds = %land.lhs.true.711, %if.then.700
  %365 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %366 = load %union.tree_node*, %union.tree_node** %domain706, align 8
  %type721 = bitcast %union.tree_node* %366 to %struct.tree_type*
  %minval722 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type721, i32 0, i32 12
  %367 = load %union.tree_node*, %union.tree_node** %minval722, align 8
  %call723 = call %union.tree_node* @convert(%union.tree_node* %365, %union.tree_node* %367)
  store %union.tree_node* %call723, %union.tree_node** %domain_min, align 8
  %368 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %369 = load %union.tree_node*, %union.tree_node** %domain706, align 8
  %type724 = bitcast %union.tree_node* %369 to %struct.tree_type*
  %maxval725 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type724, i32 0, i32 13
  %370 = load %union.tree_node*, %union.tree_node** %maxval725, align 8
  %call726 = call %union.tree_node* @convert(%union.tree_node* %368, %union.tree_node* %370)
  store %union.tree_node* %call726, %union.tree_node** %domain_max, align 8
  %371 = load %union.tree_node*, %union.tree_node** %domain_max, align 8
  %372 = load %union.tree_node*, %union.tree_node** %domain_min, align 8
  %call727 = call %union.tree_node* @size_diffop(%union.tree_node* %371, %union.tree_node* %372)
  %call728 = call %union.tree_node* @size_int_wide(i64 1, i32 1)
  %call729 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call727, %union.tree_node* %call728)
  store %union.tree_node* %call729, %union.tree_node** %bitlength, align 8
  %373 = load %union.tree_node*, %union.tree_node** %bitlength, align 8
  %call730 = call i64 @tree_low_cst(%union.tree_node* %373, i32 1)
  store i64 %call730, i64* %nbits, align 8
  %374 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %375 = bitcast %struct.rtx_def* %374 to i32*
  %bf.load731 = load i32, i32* %375, align 8
  %bf.lshr732 = lshr i32 %bf.load731, 16
  %bf.clear733 = and i32 %bf.lshr732, 255
  %cmp734 = icmp ne i32 %bf.clear733, 51
  br i1 %cmp734, label %if.then.752, label %lor.lhs.false.736

lor.lhs.false.736:                                ; preds = %if.end.720
  %376 = load i64, i64* %nbits, align 8
  %377 = load i32, i32* @target_flags, align 4
  %and737 = and i32 %377, 33554432
  %tobool738 = icmp ne i32 %and737, 0
  %cond739 = select i1 %tobool738, i32 64, i32 32
  %mul740 = mul nsw i32 2, %cond739
  %conv741 = sext i32 %mul740 to i64
  %cmp742 = icmp ule i64 %376, %conv741
  br i1 %cmp742, label %if.then.752, label %lor.lhs.false.744

lor.lhs.false.744:                                ; preds = %lor.lhs.false.736
  %378 = load i64, i64* %nbytes, align 8
  %cmp745 = icmp ule i64 %378, 32
  br i1 %cmp745, label %land.lhs.true.747, label %if.else.809

land.lhs.true.747:                                ; preds = %lor.lhs.false.744
  %379 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %common748 = bitcast %union.tree_node* %379 to %struct.tree_common*
  %chain749 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common748, i32 0, i32 0
  %380 = load %union.tree_node*, %union.tree_node** %chain749, align 8
  %cmp750 = icmp ne %union.tree_node* %380, null
  br i1 %cmp750, label %if.then.752, label %if.else.809

if.then.752:                                      ; preds = %land.lhs.true.747, %lor.lhs.false.736, %if.end.720
  %381 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common753 = bitcast %union.tree_node* %381 to %struct.tree_common*
  %type754 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common753, i32 0, i32 1
  %382 = load %union.tree_node*, %union.tree_node** %type754, align 8
  %type755 = bitcast %union.tree_node* %382 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type755, i32 0, i32 7
  %383 = load i32, i32* %align, align 4
  store i32 %383, i32* %set_word_size, align 4
  %384 = load i32, i32* %set_word_size, align 4
  %call757 = call i32 @mode_for_size(i32 %384, i32 1, i32 1)
  store i32 %call757, i32* %mode756, align 4
  %385 = load i64, i64* %nbits, align 8
  %386 = alloca i8, i64 %385
  store i8* %386, i8** %bit_buffer, align 8
  store i64 0, i64* %word, align 8
  store i32 0, i32* %bit_pos, align 4
  store i32 0, i32* %ibit, align 4
  store i32 0, i32* %offset758, align 4
  %387 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %388 = load i8*, i8** %bit_buffer, align 8
  %389 = load i64, i64* %nbits, align 8
  %conv759 = trunc i64 %389 to i32
  %call760 = call %union.tree_node* @get_set_constructor_bits(%union.tree_node* %387, i8* %388, i32 %conv759)
  store %union.tree_node* %call760, %union.tree_node** %elt701, align 8
  br label %for.cond.761

for.cond.761:                                     ; preds = %if.end.807, %if.then.752
  %390 = load i32, i32* %ibit, align 4
  %idxprom762 = zext i32 %390 to i64
  %391 = load i8*, i8** %bit_buffer, align 8
  %arrayidx763 = getelementptr inbounds i8, i8* %391, i64 %idxprom762
  %392 = load i8, i8* %arrayidx763, align 1
  %tobool764 = icmp ne i8 %392, 0
  br i1 %tobool764, label %if.then.765, label %if.end.767

if.then.765:                                      ; preds = %for.cond.761
  %393 = load i32, i32* %bit_pos, align 4
  %shl = shl i32 1, %393
  %conv766 = sext i32 %shl to i64
  %394 = load i64, i64* %word, align 8
  %or = or i64 %394, %conv766
  store i64 %or, i64* %word, align 8
  br label %if.end.767

if.end.767:                                       ; preds = %if.then.765, %for.cond.761
  %395 = load i32, i32* %bit_pos, align 4
  %inc768 = add i32 %395, 1
  store i32 %inc768, i32* %bit_pos, align 4
  %396 = load i32, i32* %ibit, align 4
  %inc769 = add i32 %396, 1
  store i32 %inc769, i32* %ibit, align 4
  %397 = load i32, i32* %bit_pos, align 4
  %398 = load i32, i32* %set_word_size, align 4
  %cmp770 = icmp uge i32 %397, %398
  br i1 %cmp770, label %if.then.776, label %lor.lhs.false.772

lor.lhs.false.772:                                ; preds = %if.end.767
  %399 = load i32, i32* %ibit, align 4
  %conv773 = zext i32 %399 to i64
  %400 = load i64, i64* %nbits, align 8
  %cmp774 = icmp eq i64 %conv773, %400
  br i1 %cmp774, label %if.then.776, label %if.end.807

if.then.776:                                      ; preds = %lor.lhs.false.772, %if.end.767
  %401 = load i64, i64* %word, align 8
  %cmp777 = icmp ne i64 %401, 0
  br i1 %cmp777, label %if.then.781, label %lor.lhs.false.779

lor.lhs.false.779:                                ; preds = %if.then.776
  %402 = load i32, i32* %cleared.addr, align 4
  %tobool780 = icmp ne i32 %402, 0
  br i1 %tobool780, label %if.end.799, label %if.then.781

if.then.781:                                      ; preds = %lor.lhs.false.779, %if.then.776
  %403 = load i64, i64* %word, align 8
  %call782 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %403)
  store %struct.rtx_def* %call782, %struct.rtx_def** %datum, align 8
  %404 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %405 = bitcast %struct.rtx_def* %404 to i32*
  %bf.load784 = load i32, i32* %405, align 8
  %bf.clear785 = and i32 %bf.load784, 65535
  %cmp786 = icmp eq i32 %bf.clear785, 66
  br i1 %cmp786, label %if.then.788, label %if.else.791

if.then.788:                                      ; preds = %if.then.781
  %406 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %407 = load i32, i32* %mode756, align 4
  %408 = load i32, i32* %offset758, align 4
  %conv789 = zext i32 %408 to i64
  %call790 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %406, i32 %407, i64 %conv789, i32 1, i32 1)
  store %struct.rtx_def* %call790, %struct.rtx_def** %to_rtx783, align 8
  br label %if.end.797

if.else.791:                                      ; preds = %if.then.781
  %409 = load i32, i32* %offset758, align 4
  %cmp792 = icmp eq i32 %409, 0
  br i1 %cmp792, label %if.then.794, label %if.else.795

if.then.794:                                      ; preds = %if.else.791
  %410 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %410, %struct.rtx_def** %to_rtx783, align 8
  br label %if.end.796

if.else.795:                                      ; preds = %if.else.791
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 4905, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.store_constructor, i32 0, i32 0)) #6
  unreachable

if.end.796:                                       ; preds = %if.then.794
  br label %if.end.797

if.end.797:                                       ; preds = %if.end.796, %if.then.788
  %411 = load %struct.rtx_def*, %struct.rtx_def** %to_rtx783, align 8
  %412 = load %struct.rtx_def*, %struct.rtx_def** %datum, align 8
  %call798 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %411, %struct.rtx_def* %412)
  br label %if.end.799

if.end.799:                                       ; preds = %if.end.797, %lor.lhs.false.779
  %413 = load i32, i32* %ibit, align 4
  %conv800 = zext i32 %413 to i64
  %414 = load i64, i64* %nbits, align 8
  %cmp801 = icmp eq i64 %conv800, %414
  br i1 %cmp801, label %if.then.803, label %if.end.804

if.then.803:                                      ; preds = %if.end.799
  br label %for.end.808

if.end.804:                                       ; preds = %if.end.799
  store i64 0, i64* %word, align 8
  store i32 0, i32* %bit_pos, align 4
  %415 = load i32, i32* %set_word_size, align 4
  %div805 = udiv i32 %415, 8
  %416 = load i32, i32* %offset758, align 4
  %add806 = add i32 %416, %div805
  store i32 %add806, i32* %offset758, align 4
  br label %if.end.807

if.end.807:                                       ; preds = %if.end.804, %lor.lhs.false.772
  br label %for.cond.761

for.end.808:                                      ; preds = %if.then.803
  br label %if.end.850

if.else.809:                                      ; preds = %land.lhs.true.747, %lor.lhs.false.744
  %417 = load i32, i32* %cleared.addr, align 4
  %tobool810 = icmp ne i32 %417, 0
  br i1 %tobool810, label %if.end.849, label %if.then.811

if.then.811:                                      ; preds = %if.else.809
  %418 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %common812 = bitcast %union.tree_node* %418 to %struct.tree_common*
  %chain813 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common812, i32 0, i32 0
  %419 = load %union.tree_node*, %union.tree_node** %chain813, align 8
  %cmp814 = icmp ne %union.tree_node* %419, null
  br i1 %cmp814, label %if.then.845, label %lor.lhs.false.816

lor.lhs.false.816:                                ; preds = %if.then.811
  %420 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %list817 = bitcast %union.tree_node* %420 to %struct.tree_list*
  %purpose818 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list817, i32 0, i32 1
  %421 = load %union.tree_node*, %union.tree_node** %purpose818, align 8
  %cmp819 = icmp eq %union.tree_node* %421, null
  br i1 %cmp819, label %cond.true.821, label %cond.false.824

cond.true.821:                                    ; preds = %lor.lhs.false.816
  %422 = load i64, i64* %nbits, align 8
  %cmp822 = icmp ne i64 %422, 1
  br i1 %cmp822, label %if.then.845, label %if.end.848

cond.false.824:                                   ; preds = %lor.lhs.false.816
  %423 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %list825 = bitcast %union.tree_node* %423 to %struct.tree_list*
  %value826 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list825, i32 0, i32 2
  %424 = load %union.tree_node*, %union.tree_node** %value826, align 8
  %call827 = call i32 @host_integerp(%union.tree_node* %424, i32 0)
  %tobool828 = icmp ne i32 %call827, 0
  br i1 %tobool828, label %lor.lhs.false.829, label %if.then.845

lor.lhs.false.829:                                ; preds = %cond.false.824
  %425 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %list830 = bitcast %union.tree_node* %425 to %struct.tree_list*
  %purpose831 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list830, i32 0, i32 1
  %426 = load %union.tree_node*, %union.tree_node** %purpose831, align 8
  %call832 = call i32 @host_integerp(%union.tree_node* %426, i32 0)
  %tobool833 = icmp ne i32 %call832, 0
  br i1 %tobool833, label %lor.lhs.false.834, label %if.then.845

lor.lhs.false.834:                                ; preds = %lor.lhs.false.829
  %427 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %list835 = bitcast %union.tree_node* %427 to %struct.tree_list*
  %value836 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list835, i32 0, i32 2
  %428 = load %union.tree_node*, %union.tree_node** %value836, align 8
  %call837 = call i64 @tree_low_cst(%union.tree_node* %428, i32 0)
  %429 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %list838 = bitcast %union.tree_node* %429 to %struct.tree_list*
  %purpose839 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list838, i32 0, i32 1
  %430 = load %union.tree_node*, %union.tree_node** %purpose839, align 8
  %call840 = call i64 @tree_low_cst(%union.tree_node* %430, i32 0)
  %sub841 = sub nsw i64 %call837, %call840
  %add842 = add nsw i64 %sub841, 1
  %431 = load i64, i64* %nbits, align 8
  %cmp843 = icmp ne i64 %add842, %431
  br i1 %cmp843, label %if.then.845, label %if.end.848

if.then.845:                                      ; preds = %lor.lhs.false.834, %lor.lhs.false.829, %cond.false.824, %cond.true.821, %if.then.811
  %432 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %433 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call846 = call %struct.rtx_def* @expr_size(%union.tree_node* %433)
  %call847 = call %struct.rtx_def* @clear_storage(%struct.rtx_def* %432, %struct.rtx_def* %call846)
  br label %if.end.848

if.end.848:                                       ; preds = %if.then.845, %lor.lhs.false.834, %cond.true.821
  br label %if.end.849

if.end.849:                                       ; preds = %if.end.848, %if.else.809
  br label %if.end.850

if.end.850:                                       ; preds = %if.end.849, %for.end.808
  br label %for.cond.851

for.cond.851:                                     ; preds = %for.inc.975, %if.end.850
  %434 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %cmp852 = icmp ne %union.tree_node* %434, null
  br i1 %cmp852, label %for.body.854, label %for.end.978

for.body.854:                                     ; preds = %for.cond.851
  %435 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %list855 = bitcast %union.tree_node* %435 to %struct.tree_list*
  %purpose856 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list855, i32 0, i32 1
  %436 = load %union.tree_node*, %union.tree_node** %purpose856, align 8
  store %union.tree_node* %436, %union.tree_node** %startbit, align 8
  %437 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %list857 = bitcast %union.tree_node* %437 to %struct.tree_list*
  %value858 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list857, i32 0, i32 2
  %438 = load %union.tree_node*, %union.tree_node** %value858, align 8
  store %union.tree_node* %438, %union.tree_node** %endbit, align 8
  %439 = load %union.tree_node*, %union.tree_node** %bitlength, align 8
  %call859 = call %struct.rtx_def* @expand_expr(%union.tree_node* %439, %struct.rtx_def* null, i32 66, i32 2)
  store %struct.rtx_def* %call859, %struct.rtx_def** %bitlength_rtx, align 8
  %440 = load %union.tree_node*, %union.tree_node** %startbit, align 8
  %cmp860 = icmp eq %union.tree_node* %440, null
  br i1 %cmp860, label %if.then.862, label %if.end.864

if.then.862:                                      ; preds = %for.body.854
  %441 = load %union.tree_node*, %union.tree_node** %endbit, align 8
  %call863 = call %union.tree_node* @save_expr(%union.tree_node* %441)
  store %union.tree_node* %call863, %union.tree_node** %startbit, align 8
  %442 = load %union.tree_node*, %union.tree_node** %startbit, align 8
  store %union.tree_node* %442, %union.tree_node** %endbit, align 8
  br label %if.end.864

if.end.864:                                       ; preds = %if.then.862, %for.body.854
  %443 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %444 = load %union.tree_node*, %union.tree_node** %startbit, align 8
  %call865 = call %union.tree_node* @convert(%union.tree_node* %443, %union.tree_node* %444)
  store %union.tree_node* %call865, %union.tree_node** %startbit, align 8
  %445 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %446 = load %union.tree_node*, %union.tree_node** %endbit, align 8
  %call866 = call %union.tree_node* @convert(%union.tree_node* %445, %union.tree_node* %446)
  store %union.tree_node* %call866, %union.tree_node** %endbit, align 8
  %447 = load %union.tree_node*, %union.tree_node** %domain_min, align 8
  %call867 = call i32 @integer_zerop(%union.tree_node* %447)
  %tobool868 = icmp ne i32 %call867, 0
  br i1 %tobool868, label %if.end.872, label %if.then.869

if.then.869:                                      ; preds = %if.end.864
  %448 = load %union.tree_node*, %union.tree_node** %startbit, align 8
  %449 = load %union.tree_node*, %union.tree_node** %domain_min, align 8
  %call870 = call %union.tree_node* @size_binop(i32 60, %union.tree_node* %448, %union.tree_node* %449)
  store %union.tree_node* %call870, %union.tree_node** %startbit, align 8
  %450 = load %union.tree_node*, %union.tree_node** %endbit, align 8
  %451 = load %union.tree_node*, %union.tree_node** %domain_min, align 8
  %call871 = call %union.tree_node* @size_binop(i32 60, %union.tree_node* %450, %union.tree_node* %451)
  store %union.tree_node* %call871, %union.tree_node** %endbit, align 8
  br label %if.end.872

if.end.872:                                       ; preds = %if.then.869, %if.end.864
  %452 = load %union.tree_node*, %union.tree_node** %startbit, align 8
  %call873 = call %struct.rtx_def* @expand_expr(%union.tree_node* %452, %struct.rtx_def* null, i32 66, i32 2)
  store %struct.rtx_def* %call873, %struct.rtx_def** %startbit_rtx, align 8
  %453 = load %union.tree_node*, %union.tree_node** %endbit, align 8
  %call874 = call %struct.rtx_def* @expand_expr(%union.tree_node* %453, %struct.rtx_def* null, i32 66, i32 2)
  store %struct.rtx_def* %call874, %struct.rtx_def** %endbit_rtx, align 8
  %454 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %455 = bitcast %struct.rtx_def* %454 to i32*
  %bf.load875 = load i32, i32* %455, align 8
  %bf.clear876 = and i32 %bf.load875, 65535
  %cmp877 = icmp eq i32 %bf.clear876, 61
  br i1 %cmp877, label %if.then.879, label %if.else.887

if.then.879:                                      ; preds = %if.end.872
  %456 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %457 = bitcast %struct.rtx_def* %456 to i32*
  %bf.load880 = load i32, i32* %457, align 8
  %bf.lshr881 = lshr i32 %bf.load880, 16
  %bf.clear882 = and i32 %bf.lshr881, 255
  %call883 = call %union.tree_node* @type_for_mode(i32 %bf.clear882, i32 0)
  %call884 = call %union.tree_node* @build_qualified_type(%union.tree_node* %call883, i32 1)
  %call885 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call884, i32 0, i32 1, i32 1)
  store %struct.rtx_def* %call885, %struct.rtx_def** %targetx, align 8
  %458 = load %struct.rtx_def*, %struct.rtx_def** %targetx, align 8
  %459 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call886 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %458, %struct.rtx_def* %459)
  br label %if.end.895

if.else.887:                                      ; preds = %if.end.872
  %460 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %461 = bitcast %struct.rtx_def* %460 to i32*
  %bf.load888 = load i32, i32* %461, align 8
  %bf.clear889 = and i32 %bf.load888, 65535
  %cmp890 = icmp eq i32 %bf.clear889, 66
  br i1 %cmp890, label %if.then.892, label %if.else.893

if.then.892:                                      ; preds = %if.else.887
  %462 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %462, %struct.rtx_def** %targetx, align 8
  br label %if.end.894

if.else.893:                                      ; preds = %if.else.887
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 4975, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.store_constructor, i32 0, i32 0)) #6
  unreachable

if.end.894:                                       ; preds = %if.then.892
  br label %if.end.895

if.end.895:                                       ; preds = %if.end.894, %if.then.879
  %463 = load %union.tree_node*, %union.tree_node** %startbit, align 8
  %common896 = bitcast %union.tree_node* %463 to %struct.tree_common*
  %code897 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common896, i32 0, i32 2
  %bf.load898 = load i32, i32* %code897, align 8
  %bf.clear899 = and i32 %bf.load898, 255
  %cmp900 = icmp eq i32 %bf.clear899, 25
  br i1 %cmp900, label %land.lhs.true.902, label %if.else.941

land.lhs.true.902:                                ; preds = %if.end.895
  %464 = load %union.tree_node*, %union.tree_node** %endbit, align 8
  %common903 = bitcast %union.tree_node* %464 to %struct.tree_common*
  %code904 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common903, i32 0, i32 2
  %bf.load905 = load i32, i32* %code904, align 8
  %bf.clear906 = and i32 %bf.load905, 255
  %cmp907 = icmp eq i32 %bf.clear906, 25
  br i1 %cmp907, label %land.lhs.true.909, label %if.else.941

land.lhs.true.909:                                ; preds = %land.lhs.true.902
  %465 = load %union.tree_node*, %union.tree_node** %startbit, align 8
  %int_cst = bitcast %union.tree_node* %465 to %struct.tree_int_cst*
  %int_cst910 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst910, i32 0, i32 0
  %466 = load i64, i64* %low, align 8
  store i64 %466, i64* %startb, align 8
  %rem = srem i64 %466, 8
  %cmp911 = icmp eq i64 %rem, 0
  br i1 %cmp911, label %land.lhs.true.913, label %if.else.941

land.lhs.true.913:                                ; preds = %land.lhs.true.909
  %467 = load %union.tree_node*, %union.tree_node** %endbit, align 8
  %int_cst914 = bitcast %union.tree_node* %467 to %struct.tree_int_cst*
  %int_cst915 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst914, i32 0, i32 2
  %low916 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst915, i32 0, i32 0
  %468 = load i64, i64* %low916, align 8
  %add917 = add i64 %468, 1
  store i64 %add917, i64* %endb, align 8
  %rem918 = srem i64 %add917, 8
  %cmp919 = icmp eq i64 %rem918, 0
  br i1 %cmp919, label %if.then.921, label %if.else.941

if.then.921:                                      ; preds = %land.lhs.true.913
  %469 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 16), align 8
  %470 = load %struct.rtx_def*, %struct.rtx_def** %targetx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %470, i32 0, i32 1
  %arrayidx922 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx922 to %struct.rtx_def**
  %471 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %472 = load i64, i64* %startb, align 8
  %div923 = sdiv i64 %472, 8
  %call924 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %471, i64 %div923)
  %473 = load i32, i32* @target_flags, align 4
  %and925 = and i32 %473, 33554432
  %tobool926 = icmp ne i32 %and925, 0
  %cond927 = select i1 %tobool926, i32 5, i32 4
  %474 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %475 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i64 5), align 8
  %type928 = bitcast %union.tree_node* %475 to %struct.tree_type*
  %mode929 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type928, i32 0, i32 6
  %bf.load930 = load i32, i32* %mode929, align 4
  %bf.lshr931 = lshr i32 %bf.load930, 9
  %bf.clear932 = and i32 %bf.lshr931, 127
  %476 = load i64, i64* %endb, align 8
  %477 = load i64, i64* %startb, align 8
  %sub933 = sub nsw i64 %476, %477
  %div934 = sdiv i64 %sub933, 8
  %call935 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %div934)
  %478 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type936 = bitcast %union.tree_node* %478 to %struct.tree_type*
  %mode937 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type936, i32 0, i32 6
  %bf.load938 = load i32, i32* %mode937, align 4
  %bf.lshr939 = lshr i32 %bf.load938, 9
  %bf.clear940 = and i32 %bf.lshr939, 127
  call void (%struct.rtx_def*, i32, i32, i32, ...) @emit_library_call(%struct.rtx_def* %469, i32 0, i32 0, i32 3, %struct.rtx_def* %call924, i32 %cond927, %struct.rtx_def* %474, i32 %bf.clear932, %struct.rtx_def* %call935, i32 %bf.clear940)
  br label %if.end.967

if.else.941:                                      ; preds = %land.lhs.true.913, %land.lhs.true.909, %land.lhs.true.902, %if.end.895
  %479 = load i32, i32* @target_flags, align 4
  %and942 = and i32 %479, 33554432
  %tobool943 = icmp ne i32 %and942, 0
  %cond944 = select i1 %tobool943, i32 5, i32 4
  %call945 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %cond944, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  %480 = load %struct.rtx_def*, %struct.rtx_def** %targetx, align 8
  %fld946 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %480, i32 0, i32 1
  %arrayidx947 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld946, i32 0, i64 0
  %rtx948 = bitcast %union.rtunion_def* %arrayidx947 to %struct.rtx_def**
  %481 = load %struct.rtx_def*, %struct.rtx_def** %rtx948, align 8
  %482 = load i32, i32* @target_flags, align 4
  %and949 = and i32 %482, 33554432
  %tobool950 = icmp ne i32 %and949, 0
  %cond951 = select i1 %tobool950, i32 5, i32 4
  %483 = load %struct.rtx_def*, %struct.rtx_def** %bitlength_rtx, align 8
  %484 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type952 = bitcast %union.tree_node* %484 to %struct.tree_type*
  %mode953 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type952, i32 0, i32 6
  %bf.load954 = load i32, i32* %mode953, align 4
  %bf.lshr955 = lshr i32 %bf.load954, 9
  %bf.clear956 = and i32 %bf.lshr955, 127
  %485 = load %struct.rtx_def*, %struct.rtx_def** %startbit_rtx, align 8
  %486 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type957 = bitcast %union.tree_node* %486 to %struct.tree_type*
  %mode958 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type957, i32 0, i32 6
  %bf.load959 = load i32, i32* %mode958, align 4
  %bf.lshr960 = lshr i32 %bf.load959, 9
  %bf.clear961 = and i32 %bf.lshr960, 127
  %487 = load %struct.rtx_def*, %struct.rtx_def** %endbit_rtx, align 8
  %488 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %type962 = bitcast %union.tree_node* %488 to %struct.tree_type*
  %mode963 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type962, i32 0, i32 6
  %bf.load964 = load i32, i32* %mode963, align 4
  %bf.lshr965 = lshr i32 %bf.load964, 9
  %bf.clear966 = and i32 %bf.lshr965, 127
  call void (%struct.rtx_def*, i32, i32, i32, ...) @emit_library_call(%struct.rtx_def* %call945, i32 0, i32 0, i32 4, %struct.rtx_def* %481, i32 %cond951, %struct.rtx_def* %483, i32 %bf.clear956, %struct.rtx_def* %485, i32 %bf.clear961, %struct.rtx_def* %487, i32 %bf.clear966)
  br label %if.end.967

if.end.967:                                       ; preds = %if.else.941, %if.then.921
  %489 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %490 = bitcast %struct.rtx_def* %489 to i32*
  %bf.load968 = load i32, i32* %490, align 8
  %bf.clear969 = and i32 %bf.load968, 65535
  %cmp970 = icmp eq i32 %bf.clear969, 61
  br i1 %cmp970, label %if.then.972, label %if.end.974

if.then.972:                                      ; preds = %if.end.967
  %491 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %492 = load %struct.rtx_def*, %struct.rtx_def** %targetx, align 8
  %call973 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %491, %struct.rtx_def* %492)
  br label %if.end.974

if.end.974:                                       ; preds = %if.then.972, %if.end.967
  br label %for.inc.975

for.inc.975:                                      ; preds = %if.end.974
  %493 = load %union.tree_node*, %union.tree_node** %elt701, align 8
  %common976 = bitcast %union.tree_node* %493 to %struct.tree_common*
  %chain977 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common976, i32 0, i32 0
  %494 = load %union.tree_node*, %union.tree_node** %chain977, align 8
  store %union.tree_node* %494, %union.tree_node** %elt701, align 8
  br label %for.cond.851

for.end.978:                                      ; preds = %for.cond.851
  br label %if.end.980

if.else.979:                                      ; preds = %if.else.693
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5009, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.store_constructor, i32 0, i32 0)) #6
  unreachable

if.end.980:                                       ; preds = %for.end.978
  br label %if.end.981

if.end.981:                                       ; preds = %if.end.980, %for.end.692
  br label %if.end.982

if.end.982:                                       ; preds = %if.end.719, %if.end.981, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @string_constant(%union.tree_node* %arg, %union.tree_node** %ptr_offset) #0 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %arg.addr = alloca %union.tree_node*, align 8
  %ptr_offset.addr = alloca %union.tree_node**, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  store %union.tree_node** %ptr_offset, %union.tree_node*** %ptr_offset.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 115
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 114
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %common7 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp eq i32 %bf.clear10, 116
  br i1 %cmp11, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %lor.lhs.false.6, %lor.lhs.false, %while.cond
  %3 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp12 = icmp ne %union.tree_node* %4, %5
  br i1 %cmp12, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %common13 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type14 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 6
  %bf.load15 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load15, 9
  %bf.clear16 = and i32 %bf.lshr, 127
  %8 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %exp17 = bitcast %union.tree_node* %8 to %struct.tree_exp*
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 2
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i32 0, i64 0
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8
  %common20 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type21, align 8
  %type22 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 6
  %bf.load24 = load i32, i32* %mode23, align 4
  %bf.lshr25 = lshr i32 %bf.load24, 9
  %bf.clear26 = and i32 %bf.lshr25, 127
  %cmp27 = icmp eq i32 %bf.clear16, %bf.clear26
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %lor.lhs.false.6
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %lor.lhs.false.6 ], [ %cmp27, %land.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %exp28 = bitcast %union.tree_node* %12 to %struct.tree_exp*
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 2
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i32 0, i64 0
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8
  store %union.tree_node* %13, %union.tree_node** %arg.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %common31 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %code32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2
  %bf.load33 = load i32, i32* %code32, align 8
  %bf.clear34 = and i32 %bf.load33, 255
  %cmp35 = icmp eq i32 %bf.clear34, 121
  br i1 %cmp35, label %land.lhs.true.36, label %if.else

land.lhs.true.36:                                 ; preds = %while.end
  %15 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %exp37 = bitcast %union.tree_node* %15 to %struct.tree_exp*
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 2
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i32 0, i64 0
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8
  %common40 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %code41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2
  %bf.load42 = load i32, i32* %code41, align 8
  %bf.clear43 = and i32 %bf.load42, 255
  %cmp44 = icmp eq i32 %bf.clear43, 29
  br i1 %cmp44, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.36
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 15), align 8
  %18 = load %union.tree_node**, %union.tree_node*** %ptr_offset.addr, align 8
  store %union.tree_node* %17, %union.tree_node** %18, align 8
  %19 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %exp45 = bitcast %union.tree_node* %19 to %struct.tree_exp*
  %operands46 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp45, i32 0, i32 2
  %arrayidx47 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands46, i32 0, i64 0
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx47, align 8
  store %union.tree_node* %20, %union.tree_node** %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true.36, %while.end
  %21 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %common48 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %code49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2
  %bf.load50 = load i32, i32* %code49, align 8
  %bf.clear51 = and i32 %bf.load50, 255
  %cmp52 = icmp eq i32 %bf.clear51, 59
  br i1 %cmp52, label %if.then.53, label %if.end.195

if.then.53:                                       ; preds = %if.else
  %22 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %exp54 = bitcast %union.tree_node* %22 to %struct.tree_exp*
  %operands55 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp54, i32 0, i32 2
  %arrayidx56 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands55, i32 0, i64 0
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx56, align 8
  store %union.tree_node* %23, %union.tree_node** %arg0, align 8
  %24 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8
  %exp57 = bitcast %union.tree_node* %24 to %struct.tree_exp*
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 2
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i32 0, i64 1
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8
  store %union.tree_node* %25, %union.tree_node** %arg1, align 8
  br label %while.cond.60

while.cond.60:                                    ; preds = %while.body.103, %if.then.53
  %26 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common61 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %code62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2
  %bf.load63 = load i32, i32* %code62, align 8
  %bf.clear64 = and i32 %bf.load63, 255
  %cmp65 = icmp eq i32 %bf.clear64, 115
  br i1 %cmp65, label %land.lhs.true.78, label %lor.lhs.false.66

lor.lhs.false.66:                                 ; preds = %while.cond.60
  %27 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common67 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %code68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2
  %bf.load69 = load i32, i32* %code68, align 8
  %bf.clear70 = and i32 %bf.load69, 255
  %cmp71 = icmp eq i32 %bf.clear70, 114
  br i1 %cmp71, label %land.lhs.true.78, label %lor.lhs.false.72

lor.lhs.false.72:                                 ; preds = %lor.lhs.false.66
  %28 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common73 = bitcast %union.tree_node* %28 to %struct.tree_common*
  %code74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2
  %bf.load75 = load i32, i32* %code74, align 8
  %bf.clear76 = and i32 %bf.load75, 255
  %cmp77 = icmp eq i32 %bf.clear76, 116
  br i1 %cmp77, label %land.lhs.true.78, label %land.end.102

land.lhs.true.78:                                 ; preds = %lor.lhs.false.72, %lor.lhs.false.66, %while.cond.60
  %29 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp79 = bitcast %union.tree_node* %29 to %struct.tree_exp*
  %operands80 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp79, i32 0, i32 2
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands80, i32 0, i64 0
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp82 = icmp ne %union.tree_node* %30, %31
  br i1 %cmp82, label %land.rhs.83, label %land.end.102

land.rhs.83:                                      ; preds = %land.lhs.true.78
  %32 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common84 = bitcast %union.tree_node* %32 to %struct.tree_common*
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 1
  %33 = load %union.tree_node*, %union.tree_node** %type85, align 8
  %type86 = bitcast %union.tree_node* %33 to %struct.tree_type*
  %mode87 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type86, i32 0, i32 6
  %bf.load88 = load i32, i32* %mode87, align 4
  %bf.lshr89 = lshr i32 %bf.load88, 9
  %bf.clear90 = and i32 %bf.lshr89, 127
  %34 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp91 = bitcast %union.tree_node* %34 to %struct.tree_exp*
  %operands92 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp91, i32 0, i32 2
  %arrayidx93 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands92, i32 0, i64 0
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx93, align 8
  %common94 = bitcast %union.tree_node* %35 to %struct.tree_common*
  %type95 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 1
  %36 = load %union.tree_node*, %union.tree_node** %type95, align 8
  %type96 = bitcast %union.tree_node* %36 to %struct.tree_type*
  %mode97 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type96, i32 0, i32 6
  %bf.load98 = load i32, i32* %mode97, align 4
  %bf.lshr99 = lshr i32 %bf.load98, 9
  %bf.clear100 = and i32 %bf.lshr99, 127
  %cmp101 = icmp eq i32 %bf.clear90, %bf.clear100
  br label %land.end.102

land.end.102:                                     ; preds = %land.rhs.83, %land.lhs.true.78, %lor.lhs.false.72
  %37 = phi i1 [ false, %land.lhs.true.78 ], [ false, %lor.lhs.false.72 ], [ %cmp101, %land.rhs.83 ]
  br i1 %37, label %while.body.103, label %while.end.107

while.body.103:                                   ; preds = %land.end.102
  %38 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp104 = bitcast %union.tree_node* %38 to %struct.tree_exp*
  %operands105 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp104, i32 0, i32 2
  %arrayidx106 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands105, i32 0, i64 0
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx106, align 8
  store %union.tree_node* %39, %union.tree_node** %arg0, align 8
  br label %while.cond.60

while.end.107:                                    ; preds = %land.end.102
  br label %while.cond.108

while.cond.108:                                   ; preds = %while.body.151, %while.end.107
  %40 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common109 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %code110 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common109, i32 0, i32 2
  %bf.load111 = load i32, i32* %code110, align 8
  %bf.clear112 = and i32 %bf.load111, 255
  %cmp113 = icmp eq i32 %bf.clear112, 115
  br i1 %cmp113, label %land.lhs.true.126, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %while.cond.108
  %41 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common115 = bitcast %union.tree_node* %41 to %struct.tree_common*
  %code116 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common115, i32 0, i32 2
  %bf.load117 = load i32, i32* %code116, align 8
  %bf.clear118 = and i32 %bf.load117, 255
  %cmp119 = icmp eq i32 %bf.clear118, 114
  br i1 %cmp119, label %land.lhs.true.126, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %lor.lhs.false.114
  %42 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common121 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %code122 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common121, i32 0, i32 2
  %bf.load123 = load i32, i32* %code122, align 8
  %bf.clear124 = and i32 %bf.load123, 255
  %cmp125 = icmp eq i32 %bf.clear124, 116
  br i1 %cmp125, label %land.lhs.true.126, label %land.end.150

land.lhs.true.126:                                ; preds = %lor.lhs.false.120, %lor.lhs.false.114, %while.cond.108
  %43 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %exp127 = bitcast %union.tree_node* %43 to %struct.tree_exp*
  %operands128 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp127, i32 0, i32 2
  %arrayidx129 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands128, i32 0, i64 0
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx129, align 8
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp130 = icmp ne %union.tree_node* %44, %45
  br i1 %cmp130, label %land.rhs.131, label %land.end.150

land.rhs.131:                                     ; preds = %land.lhs.true.126
  %46 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common132 = bitcast %union.tree_node* %46 to %struct.tree_common*
  %type133 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common132, i32 0, i32 1
  %47 = load %union.tree_node*, %union.tree_node** %type133, align 8
  %type134 = bitcast %union.tree_node* %47 to %struct.tree_type*
  %mode135 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type134, i32 0, i32 6
  %bf.load136 = load i32, i32* %mode135, align 4
  %bf.lshr137 = lshr i32 %bf.load136, 9
  %bf.clear138 = and i32 %bf.lshr137, 127
  %48 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %exp139 = bitcast %union.tree_node* %48 to %struct.tree_exp*
  %operands140 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp139, i32 0, i32 2
  %arrayidx141 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands140, i32 0, i64 0
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx141, align 8
  %common142 = bitcast %union.tree_node* %49 to %struct.tree_common*
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 1
  %50 = load %union.tree_node*, %union.tree_node** %type143, align 8
  %type144 = bitcast %union.tree_node* %50 to %struct.tree_type*
  %mode145 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type144, i32 0, i32 6
  %bf.load146 = load i32, i32* %mode145, align 4
  %bf.lshr147 = lshr i32 %bf.load146, 9
  %bf.clear148 = and i32 %bf.lshr147, 127
  %cmp149 = icmp eq i32 %bf.clear138, %bf.clear148
  br label %land.end.150

land.end.150:                                     ; preds = %land.rhs.131, %land.lhs.true.126, %lor.lhs.false.120
  %51 = phi i1 [ false, %land.lhs.true.126 ], [ false, %lor.lhs.false.120 ], [ %cmp149, %land.rhs.131 ]
  br i1 %51, label %while.body.151, label %while.end.155

while.body.151:                                   ; preds = %land.end.150
  %52 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %exp152 = bitcast %union.tree_node* %52 to %struct.tree_exp*
  %operands153 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp152, i32 0, i32 2
  %arrayidx154 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands153, i32 0, i64 0
  %53 = load %union.tree_node*, %union.tree_node** %arrayidx154, align 8
  store %union.tree_node* %53, %union.tree_node** %arg1, align 8
  br label %while.cond.108

while.end.155:                                    ; preds = %land.end.150
  %54 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common156 = bitcast %union.tree_node* %54 to %struct.tree_common*
  %code157 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common156, i32 0, i32 2
  %bf.load158 = load i32, i32* %code157, align 8
  %bf.clear159 = and i32 %bf.load158, 255
  %cmp160 = icmp eq i32 %bf.clear159, 121
  br i1 %cmp160, label %land.lhs.true.161, label %if.else.174

land.lhs.true.161:                                ; preds = %while.end.155
  %55 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp162 = bitcast %union.tree_node* %55 to %struct.tree_exp*
  %operands163 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp162, i32 0, i32 2
  %arrayidx164 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands163, i32 0, i64 0
  %56 = load %union.tree_node*, %union.tree_node** %arrayidx164, align 8
  %common165 = bitcast %union.tree_node* %56 to %struct.tree_common*
  %code166 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common165, i32 0, i32 2
  %bf.load167 = load i32, i32* %code166, align 8
  %bf.clear168 = and i32 %bf.load167, 255
  %cmp169 = icmp eq i32 %bf.clear168, 29
  br i1 %cmp169, label %if.then.170, label %if.else.174

if.then.170:                                      ; preds = %land.lhs.true.161
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %58 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call = call %union.tree_node* @convert(%union.tree_node* %57, %union.tree_node* %58)
  %59 = load %union.tree_node**, %union.tree_node*** %ptr_offset.addr, align 8
  store %union.tree_node* %call, %union.tree_node** %59, align 8
  %60 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp171 = bitcast %union.tree_node* %60 to %struct.tree_exp*
  %operands172 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp171, i32 0, i32 2
  %arrayidx173 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands172, i32 0, i64 0
  %61 = load %union.tree_node*, %union.tree_node** %arrayidx173, align 8
  store %union.tree_node* %61, %union.tree_node** %retval
  br label %return

if.else.174:                                      ; preds = %land.lhs.true.161, %while.end.155
  %62 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common175 = bitcast %union.tree_node* %62 to %struct.tree_common*
  %code176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 2
  %bf.load177 = load i32, i32* %code176, align 8
  %bf.clear178 = and i32 %bf.load177, 255
  %cmp179 = icmp eq i32 %bf.clear178, 121
  br i1 %cmp179, label %land.lhs.true.180, label %if.end

land.lhs.true.180:                                ; preds = %if.else.174
  %63 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %exp181 = bitcast %union.tree_node* %63 to %struct.tree_exp*
  %operands182 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp181, i32 0, i32 2
  %arrayidx183 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands182, i32 0, i64 0
  %64 = load %union.tree_node*, %union.tree_node** %arrayidx183, align 8
  %common184 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %code185 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common184, i32 0, i32 2
  %bf.load186 = load i32, i32* %code185, align 8
  %bf.clear187 = and i32 %bf.load186, 255
  %cmp188 = icmp eq i32 %bf.clear187, 29
  br i1 %cmp188, label %if.then.189, label %if.end

if.then.189:                                      ; preds = %land.lhs.true.180
  %65 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 0), align 8
  %66 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %call190 = call %union.tree_node* @convert(%union.tree_node* %65, %union.tree_node* %66)
  %67 = load %union.tree_node**, %union.tree_node*** %ptr_offset.addr, align 8
  store %union.tree_node* %call190, %union.tree_node** %67, align 8
  %68 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %exp191 = bitcast %union.tree_node* %68 to %struct.tree_exp*
  %operands192 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp191, i32 0, i32 2
  %arrayidx193 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands192, i32 0, i64 0
  %69 = load %union.tree_node*, %union.tree_node** %arrayidx193, align 8
  store %union.tree_node* %69, %union.tree_node** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.180, %if.else.174
  br label %if.end.194

if.end.194:                                       ; preds = %if.end
  br label %if.end.195

if.end.195:                                       ; preds = %if.end.194, %if.else
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.195
  store %union.tree_node* null, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %if.end.196, %if.then.189, %if.then.170, %if.then
  %70 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %70
}

declare i32 @compare_tree_int(%union.tree_node*, i64) #1

declare i32 @readonly_fields_p(%union.tree_node*) #1

declare %union.tree_node* @size_diffop(%union.tree_node*, %union.tree_node*) #1

declare i32 @list_length(%union.tree_node*) #1

declare i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #1

declare %struct.rtx_def* @expand_and(i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal i32 @is_aligning_offset(%union.tree_node* %offset, %union.tree_node* %exp) #0 {
entry:
  %retval = alloca i32, align 4
  %offset.addr = alloca %union.tree_node*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 116
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 115
  br i1 %cmp5, label %lor.end, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common7 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp eq i32 %bf.clear10, 114
  br i1 %cmp11, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.6
  %3 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common12 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load14 = load i32, i32* %code13, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %cmp16 = icmp eq i32 %bf.clear15, 58
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.6, %lor.lhs.false, %while.cond
  %4 = phi i1 [ true, %lor.lhs.false.6 ], [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp16, %lor.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %5 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp17 = bitcast %union.tree_node* %5 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  store %union.tree_node* %6, %union.tree_node** %offset.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %7 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common18 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp ne i32 %bf.clear21, 88
  br i1 %cmp22, label %if.then, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %while.end
  %8 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp24 = bitcast %union.tree_node* %8 to %struct.tree_exp*
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 2
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i32 0, i64 1
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8
  %call = call i32 @host_integerp(%union.tree_node* %9, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false.27, label %if.then

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.23
  %10 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp28 = bitcast %union.tree_node* %10 to %struct.tree_exp*
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 2
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i32 0, i64 1
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8
  %call31 = call i32 @compare_tree_int(%union.tree_node* %11, i64 128)
  %cmp32 = icmp sle i32 %call31, 0
  br i1 %cmp32, label %if.then, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.27
  %12 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp34 = bitcast %union.tree_node* %12 to %struct.tree_exp*
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 2
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i32 0, i64 1
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8
  %call37 = call i64 @tree_low_cst(%union.tree_node* %13, i32 1)
  %add = add nsw i64 %call37, 1
  %call38 = call i32 @exact_log2_wide(i64 %add)
  %tobool39 = icmp ne i32 %call38, 0
  %lnot = xor i1 %tobool39, true
  %lnot.ext = zext i1 %lnot to i32
  %cmp40 = icmp slt i32 %lnot.ext, 0
  br i1 %cmp40, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.33, %lor.lhs.false.27, %lor.lhs.false.23, %while.end
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.33
  %14 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp41 = bitcast %union.tree_node* %14 to %struct.tree_exp*
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 2
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i32 0, i64 0
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8
  store %union.tree_node* %15, %union.tree_node** %offset.addr, align 8
  br label %while.cond.44

while.cond.44:                                    ; preds = %while.body.63, %if.end
  %16 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common45 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %code46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 2
  %bf.load47 = load i32, i32* %code46, align 8
  %bf.clear48 = and i32 %bf.load47, 255
  %cmp49 = icmp eq i32 %bf.clear48, 116
  br i1 %cmp49, label %lor.end.62, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %while.cond.44
  %17 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common51 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %code52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2
  %bf.load53 = load i32, i32* %code52, align 8
  %bf.clear54 = and i32 %bf.load53, 255
  %cmp55 = icmp eq i32 %bf.clear54, 115
  br i1 %cmp55, label %lor.end.62, label %lor.rhs.56

lor.rhs.56:                                       ; preds = %lor.lhs.false.50
  %18 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common57 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %code58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2
  %bf.load59 = load i32, i32* %code58, align 8
  %bf.clear60 = and i32 %bf.load59, 255
  %cmp61 = icmp eq i32 %bf.clear60, 114
  br label %lor.end.62

lor.end.62:                                       ; preds = %lor.rhs.56, %lor.lhs.false.50, %while.cond.44
  %19 = phi i1 [ true, %lor.lhs.false.50 ], [ true, %while.cond.44 ], [ %cmp61, %lor.rhs.56 ]
  br i1 %19, label %while.body.63, label %while.end.67

while.body.63:                                    ; preds = %lor.end.62
  %20 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp64 = bitcast %union.tree_node* %20 to %struct.tree_exp*
  %operands65 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp64, i32 0, i32 2
  %arrayidx66 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands65, i32 0, i64 0
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx66, align 8
  store %union.tree_node* %21, %union.tree_node** %offset.addr, align 8
  br label %while.cond.44

while.end.67:                                     ; preds = %lor.end.62
  %22 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common68 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %code69 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 2
  %bf.load70 = load i32, i32* %code69, align 8
  %bf.clear71 = and i32 %bf.load70, 255
  %cmp72 = icmp ne i32 %bf.clear71, 77
  br i1 %cmp72, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %while.end.67
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %while.end.67
  %23 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp75 = bitcast %union.tree_node* %23 to %struct.tree_exp*
  %operands76 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp75, i32 0, i32 2
  %arrayidx77 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands76, i32 0, i64 0
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx77, align 8
  store %union.tree_node* %24, %union.tree_node** %offset.addr, align 8
  br label %while.cond.78

while.cond.78:                                    ; preds = %while.body.97, %if.end.74
  %25 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common79 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %code80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 2
  %bf.load81 = load i32, i32* %code80, align 8
  %bf.clear82 = and i32 %bf.load81, 255
  %cmp83 = icmp eq i32 %bf.clear82, 116
  br i1 %cmp83, label %lor.end.96, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %while.cond.78
  %26 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common85 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %code86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2
  %bf.load87 = load i32, i32* %code86, align 8
  %bf.clear88 = and i32 %bf.load87, 255
  %cmp89 = icmp eq i32 %bf.clear88, 115
  br i1 %cmp89, label %lor.end.96, label %lor.rhs.90

lor.rhs.90:                                       ; preds = %lor.lhs.false.84
  %27 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common91 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %code92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2
  %bf.load93 = load i32, i32* %code92, align 8
  %bf.clear94 = and i32 %bf.load93, 255
  %cmp95 = icmp eq i32 %bf.clear94, 114
  br label %lor.end.96

lor.end.96:                                       ; preds = %lor.rhs.90, %lor.lhs.false.84, %while.cond.78
  %28 = phi i1 [ true, %lor.lhs.false.84 ], [ true, %while.cond.78 ], [ %cmp95, %lor.rhs.90 ]
  br i1 %28, label %while.body.97, label %while.end.101

while.body.97:                                    ; preds = %lor.end.96
  %29 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp98 = bitcast %union.tree_node* %29 to %struct.tree_exp*
  %operands99 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp98, i32 0, i32 2
  %arrayidx100 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands99, i32 0, i64 0
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx100, align 8
  store %union.tree_node* %30, %union.tree_node** %offset.addr, align 8
  br label %while.cond.78

while.end.101:                                    ; preds = %lor.end.96
  %31 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %common102 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %code103 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common102, i32 0, i32 2
  %bf.load104 = load i32, i32* %code103, align 8
  %bf.clear105 = and i32 %bf.load104, 255
  %cmp106 = icmp eq i32 %bf.clear105, 121
  br i1 %cmp106, label %land.rhs, label %land.end.129

land.rhs:                                         ; preds = %while.end.101
  %32 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp107 = bitcast %union.tree_node* %32 to %struct.tree_exp*
  %operands108 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp107, i32 0, i32 2
  %arrayidx109 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands108, i32 0, i64 0
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx109, align 8
  %34 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %cmp110 = icmp eq %union.tree_node* %33, %34
  br i1 %cmp110, label %lor.end.128, label %lor.rhs.111

lor.rhs.111:                                      ; preds = %land.rhs
  %35 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp112 = bitcast %union.tree_node* %35 to %struct.tree_exp*
  %operands113 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp112, i32 0, i32 2
  %arrayidx114 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands113, i32 0, i64 0
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx114, align 8
  %common115 = bitcast %union.tree_node* %36 to %struct.tree_common*
  %code116 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common115, i32 0, i32 2
  %bf.load117 = load i32, i32* %code116, align 8
  %bf.clear118 = and i32 %bf.load117, 255
  %cmp119 = icmp eq i32 %bf.clear118, 57
  br i1 %cmp119, label %land.rhs.120, label %land.end

land.rhs.120:                                     ; preds = %lor.rhs.111
  %37 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8
  %exp121 = bitcast %union.tree_node* %37 to %struct.tree_exp*
  %operands122 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp121, i32 0, i32 2
  %arrayidx123 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands122, i32 0, i64 0
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx123, align 8
  %common124 = bitcast %union.tree_node* %38 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common124, i32 0, i32 1
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common125 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %type126 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common125, i32 0, i32 1
  %41 = load %union.tree_node*, %union.tree_node** %type126, align 8
  %cmp127 = icmp eq %union.tree_node* %39, %41
  br label %land.end

land.end:                                         ; preds = %land.rhs.120, %lor.rhs.111
  %42 = phi i1 [ false, %lor.rhs.111 ], [ %cmp127, %land.rhs.120 ]
  br label %lor.end.128

lor.end.128:                                      ; preds = %land.end, %land.rhs
  %43 = phi i1 [ true, %land.rhs ], [ %42, %land.end ]
  br label %land.end.129

land.end.129:                                     ; preds = %lor.end.128, %while.end.101
  %44 = phi i1 [ false, %while.end.101 ], [ %43, %lor.end.128 ]
  %land.ext = zext i1 %44 to i32
  store i32 %land.ext, i32* %retval
  br label %return

return:                                           ; preds = %land.end.129, %if.then.73, %if.then
  %45 = load i32, i32* %retval
  ret i32 %45
}

declare %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #1

declare i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #1

declare %struct.rtx_def* @expand_divmod(i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare void @emit_jump(%struct.rtx_def*) #1

declare i32 @expand_decl_cleanup(%union.tree_node*, %union.tree_node*) #1

declare %struct.rtx_def* @expand_builtin(%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare %struct.rtx_def* @expand_call(%union.tree_node*, %struct.rtx_def*, i32) #1

declare i32 @subreg_lowpart_offset(i32, i32) #1

declare %struct.rtx_def* @assign_stack_temp_for_type(i32, i64, i32, %union.tree_node*) #1

declare %struct.rtx_def* @simplify_binary_operation(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @eliminate_constant_term(%struct.rtx_def*, %struct.rtx_def**) #1

declare i32 @really_constant_p(%union.tree_node*) #1

declare i32 @int_fits_type_p(%union.tree_node*, %union.tree_node*) #1

declare i32 @exact_log2_wide(i64) #1

declare %struct.rtx_def* @expand_mult_highpart_adjust(i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_highpart(i32, %struct.rtx_def*) #1

declare i32 @real_onep(%union.tree_node*) #1

declare %union.tree_node* @build_real(%union.tree_node*, %struct.realvaluetype* byval align 8) #1

declare void @expand_fix(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare void @expand_float(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @expand_unop(i32, %struct.optab*, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @expand_complex_abs(i32, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @expand_abs(i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare i32 @can_compare_p(i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @do_jump_by_parts_greater_rtx(i32 %mode, i32 %unsignedp, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %if_false_label.addr = alloca %struct.rtx_def*, align 8
  %if_true_label.addr = alloca %struct.rtx_def*, align 8
  %nwords = alloca i32, align 4
  %drop_through_label = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %op0_word = alloca %struct.rtx_def*, align 8
  %op1_word = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  store %struct.rtx_def* %if_false_label, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %if_true_label, %struct.rtx_def** %if_true_label.addr, align 8
  %0 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 8, i32 4
  %div = sdiv i32 %conv, %cond
  store i32 %div, i32* %nwords, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %drop_through_label, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool1 = icmp ne %struct.rtx_def* %3, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool2 = icmp ne %struct.rtx_def* %4, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %drop_through_label, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool3 = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %if_true_label.addr, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool6 = icmp ne %struct.rtx_def* %7, null
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.5
  %8 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %if_false_label.addr, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end.5
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.8
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %nwords, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %12 = load i32, i32* %nwords, align 4
  %sub = sub nsw i32 %12, 1
  %13 = load i32, i32* %i, align 4
  %sub10 = sub nsw i32 %sub, %13
  %14 = load i32, i32* %mode.addr, align 4
  %call11 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %11, i32 %sub10, i32 %14)
  store %struct.rtx_def* %call11, %struct.rtx_def** %op0_word, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %16 = load i32, i32* %nwords, align 4
  %sub12 = sub nsw i32 %16, 1
  %17 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %sub12, %17
  %18 = load i32, i32* %mode.addr, align 4
  %call14 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %15, i32 %sub13, i32 %18)
  store %struct.rtx_def* %call14, %struct.rtx_def** %op1_word, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op0_word, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op1_word, align 8
  %21 = load i32, i32* %unsignedp.addr, align 4
  %tobool15 = icmp ne i32 %21, 0
  br i1 %tobool15, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %cmp16 = icmp sgt i32 %22, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.body
  %23 = phi i1 [ true, %for.body ], [ %cmp16, %lor.rhs ]
  %lor.ext = zext i1 %23 to i32
  %24 = load i32, i32* @word_mode, align 4
  %25 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %19, %struct.rtx_def* %20, i32 105, i32 %lor.ext, i32 %24, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %25)
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op0_word, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op1_word, align 8
  %28 = load i32, i32* %unsignedp.addr, align 4
  %29 = load i32, i32* @word_mode, align 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %26, %struct.rtx_def* %27, i32 102, i32 %28, i32 %29, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %30)
  br label %for.inc

for.inc:                                          ; preds = %lor.end
  %31 = load i32, i32* %i, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool18 = icmp ne %struct.rtx_def* %32, null
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %for.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %33)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %for.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  %tobool21 = icmp ne %struct.rtx_def* %34, null
  br i1 %tobool21, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %if.end.20
  %35 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  %call23 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %35)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.22, %if.end.20
  ret void
}

; Function Attrs: nounwind uwtable
define void @do_compare_rtx_and_jump(%struct.rtx_def* %op0, %struct.rtx_def* %op1, i32 %code, i32 %unsignedp, i32 %mode, %struct.rtx_def* %size, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %size.addr = alloca %struct.rtx_def*, align 8
  %if_false_label.addr = alloca %struct.rtx_def*, align 8
  %if_true_label.addr = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %dummy_true_label = alloca i32, align 4
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  store %struct.rtx_def* %if_false_label, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %if_true_label, %struct.rtx_def** %if_true_label.addr, align 8
  store i32 0, i32* %dummy_true_label, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %2, 2
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load i32, i32* %mode.addr, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom1
  %4 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %4, 6
  br i1 %cmp3, label %if.end, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %5 = load i32, i32* %mode.addr, align 4
  %idxprom5 = sext i32 %5 to i64
  %arrayidx6 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom5
  %6 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp eq i32 %6, 8
  br i1 %cmp7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %if_true_label.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %if_false_label.addr, align 8
  %8 = load i32, i32* %code.addr, align 4
  %call = call i32 @reverse_condition(i32 %8)
  store i32 %call, i32* %code.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.4, %lor.lhs.false, %land.lhs.true, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call8 = call i32 @swap_commutative_operands_p(%struct.rtx_def* %9, %struct.rtx_def* %10)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.10, label %if.end.12

if.then.10:                                       ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %tem, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %op0.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %op1.addr, align 8
  %14 = load i32, i32* %code.addr, align 4
  %call11 = call i32 @swap_condition(i32 %14)
  store i32 %call11, i32* %code.addr, align 4
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.10, %if.end
  %15 = load i32, i32* @flag_force_mem, align 4
  %tobool13 = icmp ne i32 %15, 0
  br i1 %tobool13, label %if.then.14, label %if.end.17

if.then.14:                                       ; preds = %if.end.12
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %call15 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %16)
  store %struct.rtx_def* %call15, %struct.rtx_def** %op0.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call16 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %17)
  store %struct.rtx_def* %call16, %struct.rtx_def** %op1.addr, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.14, %if.end.12
  call void @do_pending_stack_adjust()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load = load i32, i32* %19, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp18 = icmp eq i32 %bf.clear, 54
  br i1 %cmp18, label %land.lhs.true.19, label %if.end.36

land.lhs.true.19:                                 ; preds = %if.end.17
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load20 = load i32, i32* %21, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 54
  br i1 %cmp22, label %land.lhs.true.23, label %if.end.36

land.lhs.true.23:                                 ; preds = %land.lhs.true.19
  %22 = load i32, i32* %code.addr, align 4
  %23 = load i32, i32* %mode.addr, align 4
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call24 = call %struct.rtx_def* @simplify_relational_operation(i32 %22, i32 %23, %struct.rtx_def* %24, %struct.rtx_def* %25)
  store %struct.rtx_def* %call24, %struct.rtx_def** %tem, align 8
  %cmp25 = icmp ne %struct.rtx_def* %call24, null
  br i1 %cmp25, label %if.then.26, label %if.end.36

if.then.26:                                       ; preds = %land.lhs.true.23
  %26 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** @const_true_rtx, align 8
  %cmp27 = icmp eq %struct.rtx_def* %26, %27
  br i1 %cmp27, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %if.then.26
  %28 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool29 = icmp ne %struct.rtx_def* %28, null
  br i1 %tobool29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.then.28
  %29 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %29)
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.30, %if.then.28
  br label %if.end.35

if.else:                                          ; preds = %if.then.26
  %30 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool32 = icmp ne %struct.rtx_def* %30, null
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.else
  %31 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %31)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.else
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.31
  br label %if.end.47

if.end.36:                                        ; preds = %land.lhs.true.23, %land.lhs.true.19, %if.end.17
  %32 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool37 = icmp ne %struct.rtx_def* %32, null
  br i1 %tobool37, label %if.end.40, label %if.then.38

if.then.38:                                       ; preds = %if.end.36
  store i32 1, i32* %dummy_true_label, align 4
  %call39 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call39, %struct.rtx_def** %if_true_label.addr, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.38, %if.end.36
  %33 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %35 = load i32, i32* %code.addr, align 4
  %36 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %37 = load i32, i32* %mode.addr, align 4
  %38 = load i32, i32* %unsignedp.addr, align 4
  %39 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %33, %struct.rtx_def* %34, i32 %35, %struct.rtx_def* %36, i32 %37, i32 %38, %struct.rtx_def* %39)
  %40 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool41 = icmp ne %struct.rtx_def* %40, null
  br i1 %tobool41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.40
  %41 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %41)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %if.end.40
  %42 = load i32, i32* %dummy_true_label, align 4
  %tobool44 = icmp ne i32 %42, 0
  br i1 %tobool44, label %if.then.45, label %if.end.47

if.then.45:                                       ; preds = %if.end.43
  %43 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %call46 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %43)
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.35, %if.then.45, %if.end.43
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @do_store_flag(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %only_cheap) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %only_cheap.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %operand_mode = alloca i32, align 4
  %invert = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %subtarget = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %inner = alloca %union.tree_node*, align 8
  %bitnum = alloca i32, align 4
  %ops_unsignedp = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store i32 %only_cheap, i32* %only_cheap.addr, align 4
  store i32 0, i32* %invert, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %subtarget, align 8
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 96
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %invert, align 4
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2 = bitcast %union.tree_node* %2 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  store %union.tree_node* %3, %union.tree_node** %exp.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3 = bitcast %union.tree_node* %4 to %struct.tree_exp*
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 2
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i32 0, i64 0
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8
  store %union.tree_node* %5, %union.tree_node** %arg0, align 8
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6 = bitcast %union.tree_node* %6 to %struct.tree_exp*
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 2
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i32 0, i64 1
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8
  store %union.tree_node* %7, %union.tree_node** %arg1, align 8
  %8 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp9 = icmp eq %union.tree_node* %8, %9
  br i1 %cmp9, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp10 = icmp eq %union.tree_node* %10, %11
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %lor.lhs.false, %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

if.end.12:                                        ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common13 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %type14, align 8
  store %union.tree_node* %14, %union.tree_node** %type, align 8
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type15 = bitcast %union.tree_node* %15 to %struct.tree_type*
  %mode16 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 6
  %bf.load17 = load i32, i32* %mode16, align 4
  %bf.lshr = lshr i32 %bf.load17, 9
  %bf.clear18 = and i32 %bf.lshr, 127
  store i32 %bf.clear18, i32* %operand_mode, align 4
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common19 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2
  %bf.load20 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr21 = lshr i32 %bf.load20, 13
  %bf.clear22 = and i32 %bf.lshr21, 1
  store i32 %bf.clear22, i32* %unsignedp, align 4
  %17 = load i32, i32* %operand_mode, align 4
  %cmp23 = icmp eq i32 %17, 51
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.12
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.12
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.25
  %18 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common26 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %code27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2
  %bf.load28 = load i32, i32* %code27, align 8
  %bf.clear29 = and i32 %bf.load28, 255
  %cmp30 = icmp eq i32 %bf.clear29, 115
  br i1 %cmp30, label %land.lhs.true, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %while.cond
  %19 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common32 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %code33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2
  %bf.load34 = load i32, i32* %code33, align 8
  %bf.clear35 = and i32 %bf.load34, 255
  %cmp36 = icmp eq i32 %bf.clear35, 114
  br i1 %cmp36, label %land.lhs.true, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false.31
  %20 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common38 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %code39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2
  %bf.load40 = load i32, i32* %code39, align 8
  %bf.clear41 = and i32 %bf.load40, 255
  %cmp42 = icmp eq i32 %bf.clear41, 116
  br i1 %cmp42, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %lor.lhs.false.37, %lor.lhs.false.31, %while.cond
  %21 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp43 = bitcast %union.tree_node* %21 to %struct.tree_exp*
  %operands44 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp43, i32 0, i32 2
  %arrayidx45 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands44, i32 0, i64 0
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx45, align 8
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp46 = icmp ne %union.tree_node* %22, %23
  br i1 %cmp46, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %24 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common47 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 1
  %25 = load %union.tree_node*, %union.tree_node** %type48, align 8
  %type49 = bitcast %union.tree_node* %25 to %struct.tree_type*
  %mode50 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 6
  %bf.load51 = load i32, i32* %mode50, align 4
  %bf.lshr52 = lshr i32 %bf.load51, 9
  %bf.clear53 = and i32 %bf.lshr52, 127
  %26 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp54 = bitcast %union.tree_node* %26 to %struct.tree_exp*
  %operands55 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp54, i32 0, i32 2
  %arrayidx56 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands55, i32 0, i64 0
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx56, align 8
  %common57 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 1
  %28 = load %union.tree_node*, %union.tree_node** %type58, align 8
  %type59 = bitcast %union.tree_node* %28 to %struct.tree_type*
  %mode60 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type59, i32 0, i32 6
  %bf.load61 = load i32, i32* %mode60, align 4
  %bf.lshr62 = lshr i32 %bf.load61, 9
  %bf.clear63 = and i32 %bf.lshr62, 127
  %cmp64 = icmp eq i32 %bf.clear53, %bf.clear63
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %lor.lhs.false.37
  %29 = phi i1 [ false, %land.lhs.true ], [ false, %lor.lhs.false.37 ], [ %cmp64, %land.rhs ]
  br i1 %29, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %30 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp65 = bitcast %union.tree_node* %30 to %struct.tree_exp*
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 2
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i32 0, i64 0
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8
  store %union.tree_node* %31, %union.tree_node** %arg0, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond.68

while.cond.68:                                    ; preds = %while.body.111, %while.end
  %32 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common69 = bitcast %union.tree_node* %32 to %struct.tree_common*
  %code70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2
  %bf.load71 = load i32, i32* %code70, align 8
  %bf.clear72 = and i32 %bf.load71, 255
  %cmp73 = icmp eq i32 %bf.clear72, 115
  br i1 %cmp73, label %land.lhs.true.86, label %lor.lhs.false.74

lor.lhs.false.74:                                 ; preds = %while.cond.68
  %33 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common75 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %code76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2
  %bf.load77 = load i32, i32* %code76, align 8
  %bf.clear78 = and i32 %bf.load77, 255
  %cmp79 = icmp eq i32 %bf.clear78, 114
  br i1 %cmp79, label %land.lhs.true.86, label %lor.lhs.false.80

lor.lhs.false.80:                                 ; preds = %lor.lhs.false.74
  %34 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common81 = bitcast %union.tree_node* %34 to %struct.tree_common*
  %code82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2
  %bf.load83 = load i32, i32* %code82, align 8
  %bf.clear84 = and i32 %bf.load83, 255
  %cmp85 = icmp eq i32 %bf.clear84, 116
  br i1 %cmp85, label %land.lhs.true.86, label %land.end.110

land.lhs.true.86:                                 ; preds = %lor.lhs.false.80, %lor.lhs.false.74, %while.cond.68
  %35 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %exp87 = bitcast %union.tree_node* %35 to %struct.tree_exp*
  %operands88 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp87, i32 0, i32 2
  %arrayidx89 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands88, i32 0, i64 0
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx89, align 8
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp90 = icmp ne %union.tree_node* %36, %37
  br i1 %cmp90, label %land.rhs.91, label %land.end.110

land.rhs.91:                                      ; preds = %land.lhs.true.86
  %38 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %common92 = bitcast %union.tree_node* %38 to %struct.tree_common*
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 1
  %39 = load %union.tree_node*, %union.tree_node** %type93, align 8
  %type94 = bitcast %union.tree_node* %39 to %struct.tree_type*
  %mode95 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type94, i32 0, i32 6
  %bf.load96 = load i32, i32* %mode95, align 4
  %bf.lshr97 = lshr i32 %bf.load96, 9
  %bf.clear98 = and i32 %bf.lshr97, 127
  %40 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %exp99 = bitcast %union.tree_node* %40 to %struct.tree_exp*
  %operands100 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp99, i32 0, i32 2
  %arrayidx101 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands100, i32 0, i64 0
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx101, align 8
  %common102 = bitcast %union.tree_node* %41 to %struct.tree_common*
  %type103 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common102, i32 0, i32 1
  %42 = load %union.tree_node*, %union.tree_node** %type103, align 8
  %type104 = bitcast %union.tree_node* %42 to %struct.tree_type*
  %mode105 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type104, i32 0, i32 6
  %bf.load106 = load i32, i32* %mode105, align 4
  %bf.lshr107 = lshr i32 %bf.load106, 9
  %bf.clear108 = and i32 %bf.lshr107, 127
  %cmp109 = icmp eq i32 %bf.clear98, %bf.clear108
  br label %land.end.110

land.end.110:                                     ; preds = %land.rhs.91, %land.lhs.true.86, %lor.lhs.false.80
  %43 = phi i1 [ false, %land.lhs.true.86 ], [ false, %lor.lhs.false.80 ], [ %cmp109, %land.rhs.91 ]
  br i1 %43, label %while.body.111, label %while.end.115

while.body.111:                                   ; preds = %land.end.110
  %44 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %exp112 = bitcast %union.tree_node* %44 to %struct.tree_exp*
  %operands113 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp112, i32 0, i32 2
  %arrayidx114 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands113, i32 0, i64 0
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx114, align 8
  store %union.tree_node* %45, %union.tree_node** %arg1, align 8
  br label %while.cond.68

while.end.115:                                    ; preds = %land.end.110
  %46 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common116 = bitcast %union.tree_node* %46 to %struct.tree_common*
  %code117 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common116, i32 0, i32 2
  %bf.load118 = load i32, i32* %code117, align 8
  %bf.clear119 = and i32 %bf.load118, 255
  switch i32 %bf.clear119, label %sw.default [
    i32 101, label %sw.bb
    i32 102, label %sw.bb.120
    i32 97, label %sw.bb.121
    i32 98, label %sw.bb.127
    i32 99, label %sw.bb.137
    i32 100, label %sw.bb.147
    i32 103, label %sw.bb.157
    i32 104, label %sw.bb.158
    i32 105, label %sw.bb.159
    i32 106, label %sw.bb.160
    i32 107, label %sw.bb.161
    i32 108, label %sw.bb.162
    i32 109, label %sw.bb.163
  ]

sw.bb:                                            ; preds = %while.end.115
  store i32 103, i32* %code, align 4
  br label %sw.epilog

sw.bb.120:                                        ; preds = %while.end.115
  store i32 102, i32* %code, align 4
  br label %sw.epilog

sw.bb.121:                                        ; preds = %while.end.115
  %47 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call = call i32 @integer_onep(%union.tree_node* %47)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.122, label %if.else

if.then.122:                                      ; preds = %sw.bb.121
  %48 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  store %union.tree_node* %48, %union.tree_node** %arg1, align 8
  %49 = load i32, i32* %unsignedp, align 4
  %tobool123 = icmp ne i32 %49, 0
  %cond = select i1 %tobool123, i32 110, i32 106
  store i32 %cond, i32* %code, align 4
  br label %if.end.126

if.else:                                          ; preds = %sw.bb.121
  %50 = load i32, i32* %unsignedp, align 4
  %tobool124 = icmp ne i32 %50, 0
  %cond125 = select i1 %tobool124, i32 111, i32 107
  store i32 %cond125, i32* %code, align 4
  br label %if.end.126

if.end.126:                                       ; preds = %if.else, %if.then.122
  br label %sw.epilog

sw.bb.127:                                        ; preds = %while.end.115
  %51 = load i32, i32* %unsignedp, align 4
  %tobool128 = icmp ne i32 %51, 0
  br i1 %tobool128, label %if.else.133, label %land.lhs.true.129

land.lhs.true.129:                                ; preds = %sw.bb.127
  %52 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call130 = call i32 @integer_all_onesp(%union.tree_node* %52)
  %tobool131 = icmp ne i32 %call130, 0
  br i1 %tobool131, label %if.then.132, label %if.else.133

if.then.132:                                      ; preds = %land.lhs.true.129
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  store %union.tree_node* %53, %union.tree_node** %arg1, align 8
  store i32 107, i32* %code, align 4
  br label %if.end.136

if.else.133:                                      ; preds = %land.lhs.true.129, %sw.bb.127
  %54 = load i32, i32* %unsignedp, align 4
  %tobool134 = icmp ne i32 %54, 0
  %cond135 = select i1 %tobool134, i32 110, i32 106
  store i32 %cond135, i32* %code, align 4
  br label %if.end.136

if.end.136:                                       ; preds = %if.else.133, %if.then.132
  br label %sw.epilog

sw.bb.137:                                        ; preds = %while.end.115
  %55 = load i32, i32* %unsignedp, align 4
  %tobool138 = icmp ne i32 %55, 0
  br i1 %tobool138, label %if.else.143, label %land.lhs.true.139

land.lhs.true.139:                                ; preds = %sw.bb.137
  %56 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call140 = call i32 @integer_all_onesp(%union.tree_node* %56)
  %tobool141 = icmp ne i32 %call140, 0
  br i1 %tobool141, label %if.then.142, label %if.else.143

if.then.142:                                      ; preds = %land.lhs.true.139
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  store %union.tree_node* %57, %union.tree_node** %arg1, align 8
  store i32 104, i32* %code, align 4
  br label %if.end.146

if.else.143:                                      ; preds = %land.lhs.true.139, %sw.bb.137
  %58 = load i32, i32* %unsignedp, align 4
  %tobool144 = icmp ne i32 %58, 0
  %cond145 = select i1 %tobool144, i32 109, i32 105
  store i32 %cond145, i32* %code, align 4
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.143, %if.then.142
  br label %sw.epilog

sw.bb.147:                                        ; preds = %while.end.115
  %59 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call148 = call i32 @integer_onep(%union.tree_node* %59)
  %tobool149 = icmp ne i32 %call148, 0
  br i1 %tobool149, label %if.then.150, label %if.else.153

if.then.150:                                      ; preds = %sw.bb.147
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  store %union.tree_node* %60, %union.tree_node** %arg1, align 8
  %61 = load i32, i32* %unsignedp, align 4
  %tobool151 = icmp ne i32 %61, 0
  %cond152 = select i1 %tobool151, i32 109, i32 105
  store i32 %cond152, i32* %code, align 4
  br label %if.end.156

if.else.153:                                      ; preds = %sw.bb.147
  %62 = load i32, i32* %unsignedp, align 4
  %tobool154 = icmp ne i32 %62, 0
  %cond155 = select i1 %tobool154, i32 108, i32 104
  store i32 %cond155, i32* %code, align 4
  br label %if.end.156

if.end.156:                                       ; preds = %if.else.153, %if.then.150
  br label %sw.epilog

sw.bb.157:                                        ; preds = %while.end.115
  store i32 112, i32* %code, align 4
  br label %sw.epilog

sw.bb.158:                                        ; preds = %while.end.115
  store i32 113, i32* %code, align 4
  br label %sw.epilog

sw.bb.159:                                        ; preds = %while.end.115
  store i32 118, i32* %code, align 4
  br label %sw.epilog

sw.bb.160:                                        ; preds = %while.end.115
  store i32 117, i32* %code, align 4
  br label %sw.epilog

sw.bb.161:                                        ; preds = %while.end.115
  store i32 116, i32* %code, align 4
  br label %sw.epilog

sw.bb.162:                                        ; preds = %while.end.115
  store i32 115, i32* %code, align 4
  br label %sw.epilog

sw.bb.163:                                        ; preds = %while.end.115
  store i32 114, i32* %code, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %while.end.115
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 10281, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.do_store_flag, i32 0, i32 0)) #6
  unreachable

sw.epilog:                                        ; preds = %sw.bb.163, %sw.bb.162, %sw.bb.161, %sw.bb.160, %sw.bb.159, %sw.bb.158, %sw.bb.157, %if.end.156, %if.end.146, %if.end.136, %if.end.126, %sw.bb.120, %sw.bb
  %63 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common164 = bitcast %union.tree_node* %63 to %struct.tree_common*
  %code165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 2
  %bf.load166 = load i32, i32* %code165, align 8
  %bf.clear167 = and i32 %bf.load166, 255
  %cmp168 = icmp eq i32 %bf.clear167, 26
  br i1 %cmp168, label %if.then.175, label %lor.lhs.false.169

lor.lhs.false.169:                                ; preds = %sw.epilog
  %64 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common170 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %code171 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common170, i32 0, i32 2
  %bf.load172 = load i32, i32* %code171, align 8
  %bf.clear173 = and i32 %bf.load172, 255
  %cmp174 = icmp eq i32 %bf.clear173, 25
  br i1 %cmp174, label %if.then.175, label %if.end.177

if.then.175:                                      ; preds = %lor.lhs.false.169, %sw.epilog
  %65 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  store %union.tree_node* %65, %union.tree_node** %tem, align 8
  %66 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  store %union.tree_node* %66, %union.tree_node** %arg0, align 8
  %67 = load %union.tree_node*, %union.tree_node** %tem, align 8
  store %union.tree_node* %67, %union.tree_node** %arg1, align 8
  %68 = load i32, i32* %code, align 4
  %call176 = call i32 @swap_condition(i32 %68)
  store i32 %call176, i32* %code, align 4
  br label %if.end.177

if.end.177:                                       ; preds = %if.then.175, %lor.lhs.false.169
  %69 = load i32, i32* %code, align 4
  %cmp178 = icmp eq i32 %69, 102
  br i1 %cmp178, label %land.lhs.true.181, label %lor.lhs.false.179

lor.lhs.false.179:                                ; preds = %if.end.177
  %70 = load i32, i32* %code, align 4
  %cmp180 = icmp eq i32 %70, 103
  br i1 %cmp180, label %land.lhs.true.181, label %if.end.311

land.lhs.true.181:                                ; preds = %lor.lhs.false.179, %if.end.177
  %71 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %common182 = bitcast %union.tree_node* %71 to %struct.tree_common*
  %code183 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common182, i32 0, i32 2
  %bf.load184 = load i32, i32* %code183, align 8
  %bf.clear185 = and i32 %bf.load184, 255
  %cmp186 = icmp eq i32 %bf.clear185, 88
  br i1 %cmp186, label %land.lhs.true.187, label %if.end.311

land.lhs.true.187:                                ; preds = %land.lhs.true.181
  %72 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call188 = call i32 @integer_zerop(%union.tree_node* %72)
  %tobool189 = icmp ne i32 %call188, 0
  br i1 %tobool189, label %land.lhs.true.190, label %if.end.311

land.lhs.true.190:                                ; preds = %land.lhs.true.187
  %73 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp191 = bitcast %union.tree_node* %73 to %struct.tree_exp*
  %operands192 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp191, i32 0, i32 2
  %arrayidx193 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands192, i32 0, i64 1
  %74 = load %union.tree_node*, %union.tree_node** %arrayidx193, align 8
  %call194 = call i32 @integer_pow2p(%union.tree_node* %74)
  %tobool195 = icmp ne i32 %call194, 0
  br i1 %tobool195, label %if.then.196, label %if.end.311

if.then.196:                                      ; preds = %land.lhs.true.190
  %75 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp197 = bitcast %union.tree_node* %75 to %struct.tree_exp*
  %operands198 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp197, i32 0, i32 2
  %arrayidx199 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands198, i32 0, i64 0
  %76 = load %union.tree_node*, %union.tree_node** %arrayidx199, align 8
  store %union.tree_node* %76, %union.tree_node** %inner, align 8
  %77 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %exp200 = bitcast %union.tree_node* %77 to %struct.tree_exp*
  %operands201 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp200, i32 0, i32 2
  %arrayidx202 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands201, i32 0, i64 1
  %78 = load %union.tree_node*, %union.tree_node** %arrayidx202, align 8
  %call203 = call i32 @tree_log2(%union.tree_node* %78)
  store i32 %call203, i32* %bitnum, align 4
  %79 = load %union.tree_node*, %union.tree_node** %inner, align 8
  %common204 = bitcast %union.tree_node* %79 to %struct.tree_common*
  %code205 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common204, i32 0, i32 2
  %bf.load206 = load i32, i32* %code205, align 8
  %bf.clear207 = and i32 %bf.load206, 255
  %cmp208 = icmp eq i32 %bf.clear207, 83
  br i1 %cmp208, label %land.lhs.true.209, label %if.end.251

land.lhs.true.209:                                ; preds = %if.then.196
  %80 = load %union.tree_node*, %union.tree_node** %inner, align 8
  %exp210 = bitcast %union.tree_node* %80 to %struct.tree_exp*
  %operands211 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp210, i32 0, i32 2
  %arrayidx212 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands211, i32 0, i64 1
  %81 = load %union.tree_node*, %union.tree_node** %arrayidx212, align 8
  %common213 = bitcast %union.tree_node* %81 to %struct.tree_common*
  %code214 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common213, i32 0, i32 2
  %bf.load215 = load i32, i32* %code214, align 8
  %bf.clear216 = and i32 %bf.load215, 255
  %cmp217 = icmp eq i32 %bf.clear216, 25
  br i1 %cmp217, label %land.lhs.true.218, label %if.end.251

land.lhs.true.218:                                ; preds = %land.lhs.true.209
  %82 = load %union.tree_node*, %union.tree_node** %inner, align 8
  %exp219 = bitcast %union.tree_node* %82 to %struct.tree_exp*
  %operands220 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp219, i32 0, i32 2
  %arrayidx221 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands220, i32 0, i64 1
  %83 = load %union.tree_node*, %union.tree_node** %arrayidx221, align 8
  %int_cst = bitcast %union.tree_node* %83 to %struct.tree_int_cst*
  %int_cst222 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %high = getelementptr inbounds %struct.anon, %struct.anon* %int_cst222, i32 0, i32 1
  %84 = load i64, i64* %high, align 8
  %cmp223 = icmp eq i64 %84, 0
  br i1 %cmp223, label %land.lhs.true.224, label %if.end.251

land.lhs.true.224:                                ; preds = %land.lhs.true.218
  %85 = load i32, i32* %bitnum, align 4
  %86 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type225 = bitcast %union.tree_node* %86 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type225, i32 0, i32 6
  %bf.load226 = load i32, i32* %precision, align 4
  %bf.clear227 = and i32 %bf.load226, 511
  %cmp228 = icmp slt i32 %85, %bf.clear227
  br i1 %cmp228, label %land.lhs.true.229, label %if.end.251

land.lhs.true.229:                                ; preds = %land.lhs.true.224
  %87 = load %union.tree_node*, %union.tree_node** %inner, align 8
  %exp230 = bitcast %union.tree_node* %87 to %struct.tree_exp*
  %operands231 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp230, i32 0, i32 2
  %arrayidx232 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands231, i32 0, i64 1
  %88 = load %union.tree_node*, %union.tree_node** %arrayidx232, align 8
  %89 = load i32, i32* %bitnum, align 4
  %90 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type233 = bitcast %union.tree_node* %90 to %struct.tree_type*
  %precision234 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type233, i32 0, i32 6
  %bf.load235 = load i32, i32* %precision234, align 4
  %bf.clear236 = and i32 %bf.load235, 511
  %sub = sub nsw i32 %89, %bf.clear236
  %conv = sext i32 %sub to i64
  %call237 = call i32 @compare_tree_int(%union.tree_node* %88, i64 %conv)
  %cmp238 = icmp sgt i32 0, %call237
  br i1 %cmp238, label %if.then.240, label %if.end.251

if.then.240:                                      ; preds = %land.lhs.true.229
  %91 = load %union.tree_node*, %union.tree_node** %inner, align 8
  %exp241 = bitcast %union.tree_node* %91 to %struct.tree_exp*
  %operands242 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp241, i32 0, i32 2
  %arrayidx243 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands242, i32 0, i64 1
  %92 = load %union.tree_node*, %union.tree_node** %arrayidx243, align 8
  %int_cst244 = bitcast %union.tree_node* %92 to %struct.tree_int_cst*
  %int_cst245 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst244, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst245, i32 0, i32 0
  %93 = load i64, i64* %low, align 8
  %94 = load i32, i32* %bitnum, align 4
  %conv246 = sext i32 %94 to i64
  %add = add i64 %conv246, %93
  %conv247 = trunc i64 %add to i32
  store i32 %conv247, i32* %bitnum, align 4
  %95 = load %union.tree_node*, %union.tree_node** %inner, align 8
  %exp248 = bitcast %union.tree_node* %95 to %struct.tree_exp*
  %operands249 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp248, i32 0, i32 2
  %arrayidx250 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands249, i32 0, i64 0
  %96 = load %union.tree_node*, %union.tree_node** %arrayidx250, align 8
  store %union.tree_node* %96, %union.tree_node** %inner, align 8
  br label %if.end.251

if.end.251:                                       ; preds = %if.then.240, %land.lhs.true.229, %land.lhs.true.224, %land.lhs.true.218, %land.lhs.true.209, %if.then.196
  %97 = load i32, i32* %bitnum, align 4
  %98 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type252 = bitcast %union.tree_node* %98 to %struct.tree_type*
  %precision253 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type252, i32 0, i32 6
  %bf.load254 = load i32, i32* %precision253, align 4
  %bf.clear255 = and i32 %bf.load254, 511
  %sub256 = sub nsw i32 %bf.clear255, 1
  %cmp257 = icmp eq i32 %97, %sub256
  %cond259 = select i1 %cmp257, i32 1, i32 1
  store i32 %cond259, i32* %ops_unsignedp, align 4
  %99 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call260 = call %struct.rtx_def* @get_subtarget(%struct.rtx_def* %99)
  %tobool261 = icmp ne %struct.rtx_def* %call260, null
  br i1 %tobool261, label %lor.lhs.false.262, label %if.then.271

lor.lhs.false.262:                                ; preds = %if.end.251
  %100 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load263 = load i32, i32* %101, align 8
  %bf.lshr264 = lshr i32 %bf.load263, 16
  %bf.clear265 = and i32 %bf.lshr264, 255
  %102 = load i32, i32* %operand_mode, align 4
  %cmp266 = icmp ne i32 %bf.clear265, %102
  br i1 %cmp266, label %if.then.271, label %lor.lhs.false.268

lor.lhs.false.268:                                ; preds = %lor.lhs.false.262
  %103 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %104 = load %union.tree_node*, %union.tree_node** %inner, align 8
  %call269 = call i32 @safe_from_p(%struct.rtx_def* %103, %union.tree_node* %104, i32 1)
  %tobool270 = icmp ne i32 %call269, 0
  br i1 %tobool270, label %if.end.272, label %if.then.271

if.then.271:                                      ; preds = %lor.lhs.false.268, %lor.lhs.false.262, %if.end.251
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.272

if.end.272:                                       ; preds = %if.then.271, %lor.lhs.false.268
  %105 = load %union.tree_node*, %union.tree_node** %inner, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call273 = call %struct.rtx_def* @expand_expr(%union.tree_node* %105, %struct.rtx_def* %106, i32 0, i32 0)
  store %struct.rtx_def* %call273, %struct.rtx_def** %op0, align 8
  %107 = load i32, i32* %bitnum, align 4
  %cmp274 = icmp ne i32 %107, 0
  br i1 %cmp274, label %if.then.276, label %if.end.280

if.then.276:                                      ; preds = %if.end.272
  %108 = load i32, i32* %operand_mode, align 4
  %109 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %110 = load i32, i32* %bitnum, align 4
  %conv277 = sext i32 %110 to i64
  %call278 = call %union.tree_node* @size_int_wide(i64 %conv277, i32 0)
  %111 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %112 = load i32, i32* %ops_unsignedp, align 4
  %call279 = call %struct.rtx_def* @expand_shift(i32 83, i32 %108, %struct.rtx_def* %109, %union.tree_node* %call278, %struct.rtx_def* %111, i32 %112)
  store %struct.rtx_def* %call279, %struct.rtx_def** %op0, align 8
  br label %if.end.280

if.end.280:                                       ; preds = %if.then.276, %if.end.272
  %113 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %114 = bitcast %struct.rtx_def* %113 to i32*
  %bf.load281 = load i32, i32* %114, align 8
  %bf.lshr282 = lshr i32 %bf.load281, 16
  %bf.clear283 = and i32 %bf.lshr282, 255
  %115 = load i32, i32* %mode.addr, align 4
  %cmp284 = icmp ne i32 %bf.clear283, %115
  br i1 %cmp284, label %if.then.286, label %if.end.288

if.then.286:                                      ; preds = %if.end.280
  %116 = load i32, i32* %mode.addr, align 4
  %117 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %118 = load i32, i32* %ops_unsignedp, align 4
  %call287 = call %struct.rtx_def* @convert_to_mode(i32 %116, %struct.rtx_def* %117, i32 %118)
  store %struct.rtx_def* %call287, %struct.rtx_def** %op0, align 8
  br label %if.end.288

if.end.288:                                       ; preds = %if.then.286, %if.end.280
  %119 = load i32, i32* %code, align 4
  %cmp289 = icmp eq i32 %119, 103
  br i1 %cmp289, label %land.lhs.true.291, label %lor.lhs.false.293

land.lhs.true.291:                                ; preds = %if.end.288
  %120 = load i32, i32* %invert, align 4
  %tobool292 = icmp ne i32 %120, 0
  br i1 %tobool292, label %lor.lhs.false.293, label %if.then.298

lor.lhs.false.293:                                ; preds = %land.lhs.true.291, %if.end.288
  %121 = load i32, i32* %code, align 4
  %cmp294 = icmp eq i32 %121, 102
  br i1 %cmp294, label %land.lhs.true.296, label %if.end.300

land.lhs.true.296:                                ; preds = %lor.lhs.false.293
  %122 = load i32, i32* %invert, align 4
  %tobool297 = icmp ne i32 %122, 0
  br i1 %tobool297, label %if.then.298, label %if.end.300

if.then.298:                                      ; preds = %land.lhs.true.296, %land.lhs.true.291
  %123 = load i32, i32* %mode.addr, align 4
  %124 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 20), align 8
  %125 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %126 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %127 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %128 = load i32, i32* %ops_unsignedp, align 4
  %call299 = call %struct.rtx_def* @expand_binop(i32 %123, %struct.optab* %124, %struct.rtx_def* %125, %struct.rtx_def* %126, %struct.rtx_def* %127, i32 %128, i32 3)
  store %struct.rtx_def* %call299, %struct.rtx_def** %op0, align 8
  br label %if.end.300

if.end.300:                                       ; preds = %if.then.298, %land.lhs.true.296, %lor.lhs.false.293
  %129 = load i32, i32* %bitnum, align 4
  %130 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type301 = bitcast %union.tree_node* %130 to %struct.tree_type*
  %precision302 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type301, i32 0, i32 6
  %bf.load303 = load i32, i32* %precision302, align 4
  %bf.clear304 = and i32 %bf.load303, 511
  %sub305 = sub nsw i32 %bf.clear304, 1
  %cmp306 = icmp ne i32 %129, %sub305
  br i1 %cmp306, label %if.then.308, label %if.end.310

if.then.308:                                      ; preds = %if.end.300
  %131 = load i32, i32* %mode.addr, align 4
  %132 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call309 = call %struct.rtx_def* @expand_and(i32 %131, %struct.rtx_def* %132, %struct.rtx_def* %133, %struct.rtx_def* %134)
  store %struct.rtx_def* %call309, %struct.rtx_def** %op0, align 8
  br label %if.end.310

if.end.310:                                       ; preds = %if.then.308, %if.end.300
  %135 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %135, %struct.rtx_def** %retval
  br label %return

if.end.311:                                       ; preds = %land.lhs.true.190, %land.lhs.true.187, %land.lhs.true.181, %lor.lhs.false.179
  %136 = load i32, i32* %code, align 4
  %137 = load i32, i32* %operand_mode, align 4
  %call312 = call i32 @can_compare_p(i32 %136, i32 %137, i32 2)
  %tobool313 = icmp ne i32 %call312, 0
  br i1 %tobool313, label %if.end.315, label %if.then.314

if.then.314:                                      ; preds = %if.end.311
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.315:                                       ; preds = %if.end.311
  %138 = load i32, i32* %code, align 4
  %idxprom = sext i32 %138 to i64
  %arrayidx316 = getelementptr inbounds [153 x i32], [153 x i32]* @setcc_gen_code, i32 0, i64 %idxprom
  %139 = load i32, i32* %arrayidx316, align 4
  store i32 %139, i32* %icode, align 4
  %140 = load i32, i32* %icode, align 4
  %cmp317 = icmp eq i32 %140, 1317
  br i1 %cmp317, label %if.then.329, label %lor.lhs.false.319

lor.lhs.false.319:                                ; preds = %if.end.315
  %141 = load i32, i32* %only_cheap.addr, align 4
  %tobool320 = icmp ne i32 %141, 0
  br i1 %tobool320, label %land.lhs.true.321, label %if.end.378

land.lhs.true.321:                                ; preds = %lor.lhs.false.319
  %142 = load i32, i32* %icode, align 4
  %idxprom322 = sext i32 %142 to i64
  %arrayidx323 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom322
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx323, i32 0, i32 3
  %143 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx324 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %143, i64 0
  %mode325 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx324, i32 0, i32 2
  %bf.load326 = load i16, i16* %mode325, align 8
  %bf.cast = zext i16 %bf.load326 to i32
  %144 = load i32, i32* %mode.addr, align 4
  %cmp327 = icmp ne i32 %bf.cast, %144
  br i1 %cmp327, label %if.then.329, label %if.end.378

if.then.329:                                      ; preds = %land.lhs.true.321, %if.end.315
  %145 = load i32, i32* %code, align 4
  %cmp330 = icmp eq i32 %145, 107
  br i1 %cmp330, label %land.lhs.true.332, label %lor.lhs.false.335

land.lhs.true.332:                                ; preds = %if.then.329
  %146 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call333 = call i32 @integer_zerop(%union.tree_node* %146)
  %tobool334 = icmp ne i32 %call333, 0
  br i1 %tobool334, label %if.then.343, label %lor.lhs.false.335

lor.lhs.false.335:                                ; preds = %land.lhs.true.332, %if.then.329
  %147 = load i32, i32* %only_cheap.addr, align 4
  %tobool336 = icmp ne i32 %147, 0
  br i1 %tobool336, label %if.else.344, label %land.lhs.true.337

land.lhs.true.337:                                ; preds = %lor.lhs.false.335
  %148 = load i32, i32* %code, align 4
  %cmp338 = icmp eq i32 %148, 104
  br i1 %cmp338, label %land.lhs.true.340, label %if.else.344

land.lhs.true.340:                                ; preds = %land.lhs.true.337
  %149 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call341 = call i32 @integer_zerop(%union.tree_node* %149)
  %tobool342 = icmp ne i32 %call341, 0
  br i1 %tobool342, label %if.then.343, label %if.else.344

if.then.343:                                      ; preds = %land.lhs.true.340, %land.lhs.true.332
  br label %if.end.377

if.else.344:                                      ; preds = %land.lhs.true.340, %land.lhs.true.337, %lor.lhs.false.335
  %150 = load i32, i32* @ix86_branch_cost, align 4
  %cmp345 = icmp sge i32 %150, 0
  br i1 %cmp345, label %land.lhs.true.347, label %if.else.375

land.lhs.true.347:                                ; preds = %if.else.344
  %151 = load i32, i32* %only_cheap.addr, align 4
  %tobool348 = icmp ne i32 %151, 0
  br i1 %tobool348, label %if.else.375, label %land.lhs.true.349

land.lhs.true.349:                                ; preds = %land.lhs.true.347
  %152 = load i32, i32* %code, align 4
  %cmp350 = icmp eq i32 %152, 102
  br i1 %cmp350, label %land.lhs.true.355, label %lor.lhs.false.352

lor.lhs.false.352:                                ; preds = %land.lhs.true.349
  %153 = load i32, i32* %code, align 4
  %cmp353 = icmp eq i32 %153, 103
  br i1 %cmp353, label %land.lhs.true.355, label %if.else.375

land.lhs.true.355:                                ; preds = %lor.lhs.false.352, %land.lhs.true.349
  %154 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common356 = bitcast %union.tree_node* %154 to %struct.tree_common*
  %code357 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common356, i32 0, i32 2
  %bf.load358 = load i32, i32* %code357, align 8
  %bf.clear359 = and i32 %bf.load358, 255
  %cmp360 = icmp ne i32 %bf.clear359, 7
  br i1 %cmp360, label %land.lhs.true.362, label %if.else.375

land.lhs.true.362:                                ; preds = %land.lhs.true.355
  %155 = load i32, i32* %operand_mode, align 4
  %idxprom363 = sext i32 %155 to i64
  %156 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 34), align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %156, i32 0, i32 1
  %arrayidx364 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom363
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx364, i32 0, i32 0
  %157 = load i32, i32* %insn_code, align 4
  %cmp365 = icmp ne i32 %157, 1317
  br i1 %cmp365, label %if.then.374, label %lor.lhs.false.367

lor.lhs.false.367:                                ; preds = %land.lhs.true.362
  %158 = load i32, i32* %operand_mode, align 4
  %idxprom368 = sext i32 %158 to i64
  %159 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 37), align 8
  %handlers369 = getelementptr inbounds %struct.optab, %struct.optab* %159, i32 0, i32 1
  %arrayidx370 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers369, i32 0, i64 %idxprom368
  %insn_code371 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx370, i32 0, i32 0
  %160 = load i32, i32* %insn_code371, align 4
  %cmp372 = icmp ne i32 %160, 1317
  br i1 %cmp372, label %if.then.374, label %if.else.375

if.then.374:                                      ; preds = %lor.lhs.false.367, %land.lhs.true.362
  br label %if.end.376

if.else.375:                                      ; preds = %lor.lhs.false.367, %land.lhs.true.355, %lor.lhs.false.352, %land.lhs.true.347, %if.else.344
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.376:                                       ; preds = %if.then.374
  br label %if.end.377

if.end.377:                                       ; preds = %if.end.376, %if.then.343
  br label %if.end.378

if.end.378:                                       ; preds = %if.end.377, %land.lhs.true.321, %lor.lhs.false.319
  %161 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call379 = call %struct.rtx_def* @get_subtarget(%struct.rtx_def* %161)
  %tobool380 = icmp ne %struct.rtx_def* %call379, null
  br i1 %tobool380, label %lor.lhs.false.381, label %if.then.390

lor.lhs.false.381:                                ; preds = %if.end.378
  %162 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %163 = bitcast %struct.rtx_def* %162 to i32*
  %bf.load382 = load i32, i32* %163, align 8
  %bf.lshr383 = lshr i32 %bf.load382, 16
  %bf.clear384 = and i32 %bf.lshr383, 255
  %164 = load i32, i32* %operand_mode, align 4
  %cmp385 = icmp ne i32 %bf.clear384, %164
  br i1 %cmp385, label %if.then.390, label %lor.lhs.false.387

lor.lhs.false.387:                                ; preds = %lor.lhs.false.381
  %165 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %166 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call388 = call i32 @safe_from_p(%struct.rtx_def* %165, %union.tree_node* %166, i32 1)
  %tobool389 = icmp ne i32 %call388, 0
  br i1 %tobool389, label %if.end.391, label %if.then.390

if.then.390:                                      ; preds = %lor.lhs.false.387, %lor.lhs.false.381, %if.end.378
  store %struct.rtx_def* null, %struct.rtx_def** %subtarget, align 8
  br label %if.end.391

if.end.391:                                       ; preds = %if.then.390, %lor.lhs.false.387
  %167 = load %union.tree_node*, %union.tree_node** %arg0, align 8
  %168 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8
  %call392 = call %struct.rtx_def* @expand_expr(%union.tree_node* %167, %struct.rtx_def* %168, i32 0, i32 0)
  store %struct.rtx_def* %call392, %struct.rtx_def** %op0, align 8
  %169 = load %union.tree_node*, %union.tree_node** %arg1, align 8
  %call393 = call %struct.rtx_def* @expand_expr(%union.tree_node* %169, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call393, %struct.rtx_def** %op1, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %cmp394 = icmp eq %struct.rtx_def* %170, null
  br i1 %cmp394, label %if.then.396, label %if.end.398

if.then.396:                                      ; preds = %if.end.391
  %171 = load i32, i32* %mode.addr, align 4
  %call397 = call %struct.rtx_def* @gen_reg_rtx(i32 %171)
  store %struct.rtx_def* %call397, %struct.rtx_def** %target.addr, align 8
  br label %if.end.398

if.end.398:                                       ; preds = %if.then.396, %if.end.391
  %172 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %173 = load i32, i32* %code, align 4
  %174 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call399 = call i32 @queued_subexp_p(%struct.rtx_def* %174)
  %tobool400 = icmp ne i32 %call399, 0
  br i1 %tobool400, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.398
  %175 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call401 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %175)
  br label %cond.end

cond.false:                                       ; preds = %if.end.398
  %176 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond402 = phi %struct.rtx_def* [ %call401, %cond.true ], [ %176, %cond.false ]
  %177 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call403 = call i32 @queued_subexp_p(%struct.rtx_def* %177)
  %tobool404 = icmp ne i32 %call403, 0
  br i1 %tobool404, label %cond.true.405, label %cond.false.407

cond.true.405:                                    ; preds = %cond.end
  %178 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call406 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %178)
  br label %cond.end.408

cond.false.407:                                   ; preds = %cond.end
  %179 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  br label %cond.end.408

cond.end.408:                                     ; preds = %cond.false.407, %cond.true.405
  %cond409 = phi %struct.rtx_def* [ %call406, %cond.true.405 ], [ %179, %cond.false.407 ]
  %180 = load i32, i32* %operand_mode, align 4
  %181 = load i32, i32* %unsignedp, align 4
  %call410 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %172, i32 %173, %struct.rtx_def* %cond402, %struct.rtx_def* %cond409, i32 %180, i32 %181, i32 1)
  store %struct.rtx_def* %call410, %struct.rtx_def** %result, align 8
  %182 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %tobool411 = icmp ne %struct.rtx_def* %182, null
  br i1 %tobool411, label %if.then.412, label %if.end.417

if.then.412:                                      ; preds = %cond.end.408
  %183 = load i32, i32* %invert, align 4
  %tobool413 = icmp ne i32 %183, 0
  br i1 %tobool413, label %if.then.414, label %if.end.416

if.then.414:                                      ; preds = %if.then.412
  %184 = load i32, i32* %mode.addr, align 4
  %185 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 20), align 8
  %186 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %187 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %188 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %call415 = call %struct.rtx_def* @expand_binop(i32 %184, %struct.optab* %185, %struct.rtx_def* %186, %struct.rtx_def* %187, %struct.rtx_def* %188, i32 0, i32 3)
  store %struct.rtx_def* %call415, %struct.rtx_def** %result, align 8
  br label %if.end.416

if.end.416:                                       ; preds = %if.then.414, %if.then.412
  %189 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  store %struct.rtx_def* %189, %struct.rtx_def** %retval
  br label %return

if.end.417:                                       ; preds = %cond.end.408
  %190 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %191 = bitcast %struct.rtx_def* %190 to i32*
  %bf.load418 = load i32, i32* %191, align 8
  %bf.clear419 = and i32 %bf.load418, 65535
  %cmp420 = icmp ne i32 %bf.clear419, 61
  br i1 %cmp420, label %if.then.428, label %lor.lhs.false.422

lor.lhs.false.422:                                ; preds = %if.end.417
  %192 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %193 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call423 = call i32 @reg_mentioned_p(%struct.rtx_def* %192, %struct.rtx_def* %193)
  %tobool424 = icmp ne i32 %call423, 0
  br i1 %tobool424, label %if.then.428, label %lor.lhs.false.425

lor.lhs.false.425:                                ; preds = %lor.lhs.false.422
  %194 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %195 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call426 = call i32 @reg_mentioned_p(%struct.rtx_def* %194, %struct.rtx_def* %195)
  %tobool427 = icmp ne i32 %call426, 0
  br i1 %tobool427, label %if.then.428, label %if.end.433

if.then.428:                                      ; preds = %lor.lhs.false.425, %lor.lhs.false.422, %if.end.417
  %196 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %197 = bitcast %struct.rtx_def* %196 to i32*
  %bf.load429 = load i32, i32* %197, align 8
  %bf.lshr430 = lshr i32 %bf.load429, 16
  %bf.clear431 = and i32 %bf.lshr430, 255
  %call432 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear431)
  store %struct.rtx_def* %call432, %struct.rtx_def** %target.addr, align 8
  br label %if.end.433

if.end.433:                                       ; preds = %if.then.428, %lor.lhs.false.425
  %198 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %199 = load i32, i32* %invert, align 4
  %tobool434 = icmp ne i32 %199, 0
  br i1 %tobool434, label %cond.true.435, label %cond.false.436

cond.true.435:                                    ; preds = %if.end.433
  %200 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.437

cond.false.436:                                   ; preds = %if.end.433
  %201 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  br label %cond.end.437

cond.end.437:                                     ; preds = %cond.false.436, %cond.true.435
  %cond438 = phi %struct.rtx_def* [ %200, %cond.true.435 ], [ %201, %cond.false.436 ]
  %call439 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %198, %struct.rtx_def* %cond438)
  %202 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %203 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %204 = load i32, i32* %code, align 4
  %205 = load i32, i32* %unsignedp, align 4
  %206 = load i32, i32* %operand_mode, align 4
  %call440 = call %struct.rtx_def* @compare_from_rtx(%struct.rtx_def* %202, %struct.rtx_def* %203, i32 %204, i32 %205, i32 %206, %struct.rtx_def* null)
  store %struct.rtx_def* %call440, %struct.rtx_def** %result, align 8
  %207 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %208 = bitcast %struct.rtx_def* %207 to i32*
  %bf.load441 = load i32, i32* %208, align 8
  %bf.clear442 = and i32 %bf.load441, 65535
  %cmp443 = icmp eq i32 %bf.clear442, 54
  br i1 %cmp443, label %if.then.445, label %if.end.459

if.then.445:                                      ; preds = %cond.end.437
  %209 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %210 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp446 = icmp eq %struct.rtx_def* %209, %210
  br i1 %cmp446, label %land.lhs.true.448, label %lor.lhs.false.450

land.lhs.true.448:                                ; preds = %if.then.445
  %211 = load i32, i32* %invert, align 4
  %tobool449 = icmp ne i32 %211, 0
  br i1 %tobool449, label %lor.lhs.false.450, label %cond.true.455

lor.lhs.false.450:                                ; preds = %land.lhs.true.448, %if.then.445
  %212 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %213 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp451 = icmp ne %struct.rtx_def* %212, %213
  br i1 %cmp451, label %land.lhs.true.453, label %cond.false.456

land.lhs.true.453:                                ; preds = %lor.lhs.false.450
  %214 = load i32, i32* %invert, align 4
  %tobool454 = icmp ne i32 %214, 0
  br i1 %tobool454, label %cond.true.455, label %cond.false.456

cond.true.455:                                    ; preds = %land.lhs.true.453, %land.lhs.true.448
  %215 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.457

cond.false.456:                                   ; preds = %land.lhs.true.453, %lor.lhs.false.450
  %216 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  br label %cond.end.457

cond.end.457:                                     ; preds = %cond.false.456, %cond.true.455
  %cond458 = phi %struct.rtx_def* [ %215, %cond.true.455 ], [ %216, %cond.false.456 ]
  store %struct.rtx_def* %cond458, %struct.rtx_def** %retval
  br label %return

if.end.459:                                       ; preds = %cond.end.437
  %217 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  %218 = bitcast %struct.rtx_def* %217 to i32*
  %bf.load460 = load i32, i32* %218, align 8
  %bf.clear461 = and i32 %bf.load460, 65535
  store i32 %bf.clear461, i32* %code, align 4
  %call462 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call462, %struct.rtx_def** %label, align 8
  %219 = load i32, i32* %code, align 4
  %idxprom463 = sext i32 %219 to i64
  %arrayidx464 = getelementptr inbounds [153 x %struct.rtx_def* (%struct.rtx_def*)*], [153 x %struct.rtx_def* (%struct.rtx_def*)*]* @bcc_gen_fctn, i32 0, i64 %idxprom463
  %220 = load %struct.rtx_def* (%struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)** %arrayidx464, align 8
  %cmp465 = icmp eq %struct.rtx_def* (%struct.rtx_def*)* %220, null
  br i1 %cmp465, label %if.then.467, label %if.end.468

if.then.467:                                      ; preds = %if.end.459
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 10431, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.do_store_flag, i32 0, i32 0)) #6
  unreachable

if.end.468:                                       ; preds = %if.end.459
  %221 = load i32, i32* %code, align 4
  %idxprom469 = sext i32 %221 to i64
  %arrayidx470 = getelementptr inbounds [153 x %struct.rtx_def* (%struct.rtx_def*)*], [153 x %struct.rtx_def* (%struct.rtx_def*)*]* @bcc_gen_fctn, i32 0, i64 %idxprom469
  %222 = load %struct.rtx_def* (%struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)** %arrayidx470, align 8
  %223 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call471 = call %struct.rtx_def* %222(%struct.rtx_def* %223)
  %call472 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call471)
  %224 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %225 = load i32, i32* %invert, align 4
  %tobool473 = icmp ne i32 %225, 0
  br i1 %tobool473, label %cond.true.474, label %cond.false.475

cond.true.474:                                    ; preds = %if.end.468
  %226 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  br label %cond.end.476

cond.false.475:                                   ; preds = %if.end.468
  %227 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end.476

cond.end.476:                                     ; preds = %cond.false.475, %cond.true.474
  %cond477 = phi %struct.rtx_def* [ %226, %cond.true.474 ], [ %227, %cond.false.475 ]
  %call478 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %224, %struct.rtx_def* %cond477)
  %228 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call479 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %228)
  %229 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  store %struct.rtx_def* %229, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %cond.end.476, %cond.end.457, %if.end.416, %if.else.375, %if.then.314, %if.end.310, %if.then.24, %if.then.11
  %230 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %230
}

declare void @emit_clr_insn(%struct.rtx_def*) #1

declare void @emit_0_to_1_insn(%struct.rtx_def*) #1

declare i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #1

declare i32 @integer_onep(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @var_rtx(%union.tree_node* %exp) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 115
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 114
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common7 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp eq i32 %bf.clear10, 116
  br i1 %cmp11, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %lor.lhs.false.6, %lor.lhs.false, %while.cond
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp12 = bitcast %union.tree_node* %3 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp13 = icmp ne %union.tree_node* %4, %5
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common14 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type15 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 6
  %bf.load16 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load16, 9
  %bf.clear17 = and i32 %bf.lshr, 127
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp18 = bitcast %union.tree_node* %8 to %struct.tree_exp*
  %operands19 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 2
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands19, i32 0, i64 0
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8
  %common21 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type22, align 8
  %type23 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %mode24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 6
  %bf.load25 = load i32, i32* %mode24, align 4
  %bf.lshr26 = lshr i32 %bf.load25, 9
  %bf.clear27 = and i32 %bf.lshr26, 127
  %cmp28 = icmp eq i32 %bf.clear17, %bf.clear27
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %lor.lhs.false.6
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %lor.lhs.false.6 ], [ %cmp28, %land.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp29 = bitcast %union.tree_node* %12 to %struct.tree_exp*
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 2
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i32 0, i64 0
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8
  store %union.tree_node* %13, %union.tree_node** %exp.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common32 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %code33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2
  %bf.load34 = load i32, i32* %code33, align 8
  %bf.clear35 = and i32 %bf.load34, 255
  switch i32 %bf.clear35, label %sw.default [
    i32 35, label %sw.bb
    i32 34, label %sw.bb
  ]

sw.bb:                                            ; preds = %while.end, %while.end
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl = bitcast %union.tree_node* %15 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool = icmp ne %struct.rtx_def* %16, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  %17 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl36 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %rtl37 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl36, i32 0, i32 17
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl37, align 8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %19 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %19, i8* null)
  %20 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %decl38 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %rtl39 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl38, i32 0, i32 17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl39, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %18, %cond.true ], [ %21, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %retval
  br label %return

sw.default:                                       ; preds = %while.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %sw.default, %cond.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %22
}

declare i32 @can_conditionally_move_p(i32) #1

declare i32 @integer_pow2p(%union.tree_node*) #1

declare i32 @tree_log2(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @jumpif(%union.tree_node* %exp, %struct.rtx_def* %label) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %label.addr = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @do_jump(%union.tree_node* %0, %struct.rtx_def* null, %struct.rtx_def* %1)
  ret void
}

declare %union.tree_node* @maybe_build_cleanup(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @do_jump(%union.tree_node* %exp, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %if_false_label.addr = alloca %struct.rtx_def*, align 8
  %if_true_label.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %drop_through_label = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %unsignedp = alloca i32, align 4
  %mode164 = alloca i32, align 4
  %type165 = alloca %union.tree_node*, align 8
  %offset = alloca %union.tree_node*, align 8
  %volatilep = alloca i32, align 4
  %label1 = alloca %struct.rtx_def*, align 8
  %inner_type = alloca %union.tree_node*, align 8
  %exp0 = alloca %union.tree_node*, align 8
  %exp1 = alloca %union.tree_node*, align 8
  %inner_type363 = alloca %union.tree_node*, align 8
  %exp0389 = alloca %union.tree_node*, align 8
  %exp1394 = alloca %union.tree_node*, align 8
  %cmp545 = alloca i32, align 4
  %rcmp = alloca i32, align 4
  %do_rev = alloca i32, align 4
  %rcode1 = alloca i32, align 4
  %tcode2 = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %cmp0 = alloca %union.tree_node*, align 8
  %cmp1 = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %arglist = alloca %union.tree_node*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %if_false_label, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %if_true_label, %struct.rtx_def** %if_true_label.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  store i32 %bf.clear, i32* %code, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %drop_through_label, align 8
  call void @emit_queue()
  %1 = load i32, i32* %code, align 4
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 25, label %sw.bb.2
    i32 115, label %sw.bb.4
    i32 114, label %sw.bb.38
    i32 116, label %sw.bb.56
    i32 122, label %sw.bb.56
    i32 80, label %sw.bb.56
    i32 77, label %sw.bb.56
    i32 84, label %sw.bb.56
    i32 85, label %sw.bb.56
    i32 58, label %sw.bb.60
    i32 60, label %sw.bb.69
    i32 88, label %sw.bb.79
    i32 96, label %sw.bb.129
    i32 91, label %sw.bb.133
    i32 92, label %sw.bb.144
    i32 47, label %sw.bb.155
    i32 39, label %sw.bb.163
    i32 40, label %sw.bb.163
    i32 43, label %sw.bb.163
    i32 44, label %sw.bb.163
    i32 51, label %sw.bb.201
    i32 101, label %sw.bb.267
    i32 102, label %sw.bb.362
    i32 97, label %sw.bb.460
    i32 98, label %sw.bb.481
    i32 99, label %sw.bb.502
    i32 100, label %sw.bb.523
    i32 103, label %sw.bb.544
    i32 104, label %sw.bb.544
    i32 105, label %sw.bb.575
    i32 106, label %sw.bb.576
    i32 107, label %sw.bb.577
    i32 108, label %sw.bb.578
    i32 109, label %sw.bb.579
    i32 53, label %sw.bb.614
  ]

sw.bb:                                            ; preds = %entry
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call = call i32 @integer_zerop(%union.tree_node* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %3, %cond.true ], [ %4, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %temp, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %tobool3 = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  call void @emit_jump(%struct.rtx_def* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  br label %sw.epilog

sw.bb.4:                                          ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp5 = bitcast %union.tree_node* %7 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %common6 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2
  %bf.load8 = load i32, i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp = icmp eq i32 %bf.clear9, 39
  br i1 %cmp, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.4
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp10 = bitcast %union.tree_node* %9 to %struct.tree_exp*
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 2
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i32 0, i64 0
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8
  %common13 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %code14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load15 = load i32, i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp eq i32 %bf.clear16, 40
  br i1 %cmp17, label %if.then.36, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp19 = bitcast %union.tree_node* %11 to %struct.tree_exp*
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 2
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i32 0, i64 0
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8
  %common22 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %code23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2
  %bf.load24 = load i32, i32* %code23, align 8
  %bf.clear25 = and i32 %bf.load24, 255
  %cmp26 = icmp eq i32 %bf.clear25, 43
  br i1 %cmp26, label %if.then.36, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.18
  %13 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp28 = bitcast %union.tree_node* %13 to %struct.tree_exp*
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 2
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i32 0, i64 0
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8
  %common31 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %code32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2
  %bf.load33 = load i32, i32* %code32, align 8
  %bf.clear34 = and i32 %bf.load33, 255
  %cmp35 = icmp eq i32 %bf.clear34, 44
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false.27, %lor.lhs.false.18, %lor.lhs.false, %sw.bb.4
  br label %normal

if.end.37:                                        ; preds = %lor.lhs.false.27
  br label %sw.bb.38

sw.bb.38:                                         ; preds = %entry, %if.end.37
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common39 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 1
  %16 = load %union.tree_node*, %union.tree_node** %type40, align 8
  %type41 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 6
  %bf.load42 = load i32, i32* %precision, align 4
  %bf.clear43 = and i32 %bf.load42, 511
  %17 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp44 = bitcast %union.tree_node* %17 to %struct.tree_exp*
  %operands45 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp44, i32 0, i32 2
  %arrayidx46 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands45, i32 0, i64 0
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx46, align 8
  %common47 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %type48, align 8
  %type49 = bitcast %union.tree_node* %19 to %struct.tree_type*
  %precision50 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 6
  %bf.load51 = load i32, i32* %precision50, align 4
  %bf.clear52 = and i32 %bf.load51, 511
  %cmp53 = icmp slt i32 %bf.clear43, %bf.clear52
  br i1 %cmp53, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %sw.bb.38
  br label %normal

if.end.55:                                        ; preds = %sw.bb.38
  br label %sw.bb.56

sw.bb.56:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %if.end.55
  %20 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp57 = bitcast %union.tree_node* %20 to %struct.tree_exp*
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 2
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i32 0, i64 0
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %21, %struct.rtx_def* %22, %struct.rtx_def* %23)
  br label %sw.epilog

sw.bb.60:                                         ; preds = %entry
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp61 = bitcast %union.tree_node* %24 to %struct.tree_exp*
  %operands62 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp61, i32 0, i32 2
  %arrayidx63 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands62, i32 0, i64 1
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx63, align 8
  %26 = load %union.tree_node*, %union.tree_node** @placeholder_list, align 8
  %call64 = call %union.tree_node* @tree_cons(%union.tree_node* %25, %union.tree_node* null, %union.tree_node* %26)
  store %union.tree_node* %call64, %union.tree_node** @placeholder_list, align 8
  %27 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp65 = bitcast %union.tree_node* %27 to %struct.tree_exp*
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 2
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i32 0, i64 0
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %28, %struct.rtx_def* %29, %struct.rtx_def* %30)
  %31 = load %union.tree_node*, %union.tree_node** @placeholder_list, align 8
  %common68 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 0
  %32 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %32, %union.tree_node** @placeholder_list, align 8
  br label %sw.epilog

sw.bb.69:                                         ; preds = %entry
  %33 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common70 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %type71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 1
  %34 = load %union.tree_node*, %union.tree_node** %type71, align 8
  %35 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp72 = bitcast %union.tree_node* %35 to %struct.tree_exp*
  %operands73 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp72, i32 0, i32 2
  %arrayidx74 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands73, i32 0, i64 0
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx74, align 8
  %37 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp75 = bitcast %union.tree_node* %37 to %struct.tree_exp*
  %operands76 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp75, i32 0, i32 2
  %arrayidx77 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands76, i32 0, i64 1
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx77, align 8
  %call78 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 102, %union.tree_node* %34, %union.tree_node* %36, %union.tree_node* %38)
  %39 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %call78, i32 102, i32 102, %struct.rtx_def* %39, %struct.rtx_def* %40)
  br label %sw.epilog

sw.bb.79:                                         ; preds = %entry
  %41 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp80 = bitcast %union.tree_node* %41 to %struct.tree_exp*
  %operands81 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp80, i32 0, i32 2
  %arrayidx82 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands81, i32 0, i64 1
  %42 = load %union.tree_node*, %union.tree_node** %arrayidx82, align 8
  %common83 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %code84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2
  %bf.load85 = load i32, i32* %code84, align 8
  %bf.clear86 = and i32 %bf.load85, 255
  %cmp87 = icmp eq i32 %bf.clear86, 25
  br i1 %cmp87, label %land.lhs.true, label %if.end.128

land.lhs.true:                                    ; preds = %sw.bb.79
  %43 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common88 = bitcast %union.tree_node* %43 to %struct.tree_common*
  %type89 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 1
  %44 = load %union.tree_node*, %union.tree_node** %type89, align 8
  %type90 = bitcast %union.tree_node* %44 to %struct.tree_type*
  %precision91 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type90, i32 0, i32 6
  %bf.load92 = load i32, i32* %precision91, align 4
  %bf.clear93 = and i32 %bf.load92, 511
  %cmp94 = icmp sle i32 %bf.clear93, 64
  br i1 %cmp94, label %land.lhs.true.95, label %if.end.128

land.lhs.true.95:                                 ; preds = %land.lhs.true
  %45 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp96 = bitcast %union.tree_node* %45 to %struct.tree_exp*
  %operands97 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp96, i32 0, i32 2
  %arrayidx98 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands97, i32 0, i64 1
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx98, align 8
  %call99 = call i32 @tree_floor_log2(%union.tree_node* %46)
  store i32 %call99, i32* %i, align 4
  %cmp100 = icmp sge i32 %call99, 0
  br i1 %cmp100, label %land.lhs.true.101, label %if.end.128

land.lhs.true.101:                                ; preds = %land.lhs.true.95
  %47 = load i32, i32* %i, align 4
  %add = add nsw i32 %47, 1
  %call102 = call i32 @mode_for_size(i32 %add, i32 1, i32 0)
  store i32 %call102, i32* %mode, align 4
  %cmp103 = icmp ne i32 %call102, 51
  br i1 %cmp103, label %land.lhs.true.104, label %if.end.128

land.lhs.true.104:                                ; preds = %land.lhs.true.101
  %48 = load i32, i32* %mode, align 4
  %call105 = call %union.tree_node* @type_for_mode(i32 %48, i32 1)
  store %union.tree_node* %call105, %union.tree_node** %type, align 8
  %cmp106 = icmp ne %union.tree_node* %call105, null
  br i1 %cmp106, label %land.lhs.true.107, label %if.end.128

land.lhs.true.107:                                ; preds = %land.lhs.true.104
  %49 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type108 = bitcast %union.tree_node* %49 to %struct.tree_type*
  %precision109 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type108, i32 0, i32 6
  %bf.load110 = load i32, i32* %precision109, align 4
  %bf.clear111 = and i32 %bf.load110, 511
  %50 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common112 = bitcast %union.tree_node* %50 to %struct.tree_common*
  %type113 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common112, i32 0, i32 1
  %51 = load %union.tree_node*, %union.tree_node** %type113, align 8
  %type114 = bitcast %union.tree_node* %51 to %struct.tree_type*
  %precision115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 6
  %bf.load116 = load i32, i32* %precision115, align 4
  %bf.clear117 = and i32 %bf.load116, 511
  %cmp118 = icmp slt i32 %bf.clear111, %bf.clear117
  br i1 %cmp118, label %land.lhs.true.119, label %if.end.128

land.lhs.true.119:                                ; preds = %land.lhs.true.107
  %52 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type120 = bitcast %union.tree_node* %52 to %struct.tree_type*
  %mode121 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type120, i32 0, i32 6
  %bf.load122 = load i32, i32* %mode121, align 4
  %bf.lshr = lshr i32 %bf.load122, 9
  %bf.clear123 = and i32 %bf.lshr, 127
  %idxprom = sext i32 %bf.clear123 to i64
  %53 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 41), align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %53, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx124, i32 0, i32 0
  %54 = load i32, i32* %insn_code, align 4
  %cmp125 = icmp ne i32 %54, 1317
  br i1 %cmp125, label %if.then.126, label %if.end.128

if.then.126:                                      ; preds = %land.lhs.true.119
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8
  %56 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call127 = call %union.tree_node* @convert(%union.tree_node* %55, %union.tree_node* %56)
  %57 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %call127, %struct.rtx_def* %57, %struct.rtx_def* %58)
  br label %sw.epilog

if.end.128:                                       ; preds = %land.lhs.true.119, %land.lhs.true.107, %land.lhs.true.104, %land.lhs.true.101, %land.lhs.true.95, %land.lhs.true, %sw.bb.79
  br label %normal

sw.bb.129:                                        ; preds = %entry
  %59 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp130 = bitcast %union.tree_node* %59 to %struct.tree_exp*
  %operands131 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp130, i32 0, i32 2
  %arrayidx132 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands131, i32 0, i64 0
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx132, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_jump(%union.tree_node* %60, %struct.rtx_def* %61, %struct.rtx_def* %62)
  br label %sw.epilog

sw.bb.133:                                        ; preds = %entry
  %63 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %cmp134 = icmp eq %struct.rtx_def* %63, null
  br i1 %cmp134, label %if.then.135, label %if.end.137

if.then.135:                                      ; preds = %sw.bb.133
  %call136 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call136, %struct.rtx_def** %drop_through_label, align 8
  store %struct.rtx_def* %call136, %struct.rtx_def** %if_false_label.addr, align 8
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.135, %sw.bb.133
  %64 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp138 = bitcast %union.tree_node* %64 to %struct.tree_exp*
  %operands139 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp138, i32 0, i32 2
  %arrayidx140 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands139, i32 0, i64 0
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx140, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_jump(%union.tree_node* %65, %struct.rtx_def* %66, %struct.rtx_def* null)
  call void @start_cleanup_deferral()
  %67 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp141 = bitcast %union.tree_node* %67 to %struct.tree_exp*
  %operands142 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp141, i32 0, i32 2
  %arrayidx143 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands142, i32 0, i64 1
  %68 = load %union.tree_node*, %union.tree_node** %arrayidx143, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %70 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %68, %struct.rtx_def* %69, %struct.rtx_def* %70)
  call void @end_cleanup_deferral()
  br label %sw.epilog

sw.bb.144:                                        ; preds = %entry
  %71 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %cmp145 = icmp eq %struct.rtx_def* %71, null
  br i1 %cmp145, label %if.then.146, label %if.end.148

if.then.146:                                      ; preds = %sw.bb.144
  %call147 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call147, %struct.rtx_def** %drop_through_label, align 8
  store %struct.rtx_def* %call147, %struct.rtx_def** %if_true_label.addr, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.146, %sw.bb.144
  %72 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp149 = bitcast %union.tree_node* %72 to %struct.tree_exp*
  %operands150 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp149, i32 0, i32 2
  %arrayidx151 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands150, i32 0, i64 0
  %73 = load %union.tree_node*, %union.tree_node** %arrayidx151, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %73, %struct.rtx_def* null, %struct.rtx_def* %74)
  call void @start_cleanup_deferral()
  %75 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp152 = bitcast %union.tree_node* %75 to %struct.tree_exp*
  %operands153 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp152, i32 0, i32 2
  %arrayidx154 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands153, i32 0, i64 1
  %76 = load %union.tree_node*, %union.tree_node** %arrayidx154, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %76, %struct.rtx_def* %77, %struct.rtx_def* %78)
  call void @end_cleanup_deferral()
  br label %sw.epilog

sw.bb.155:                                        ; preds = %entry
  call void @push_temp_slots()
  %79 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp156 = bitcast %union.tree_node* %79 to %struct.tree_exp*
  %operands157 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp156, i32 0, i32 2
  %arrayidx158 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands157, i32 0, i64 0
  %80 = load %union.tree_node*, %union.tree_node** %arrayidx158, align 8
  %81 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call159 = call %struct.rtx_def* @expand_expr(%union.tree_node* %80, %struct.rtx_def* %81, i32 0, i32 0)
  call void @preserve_temp_slots(%struct.rtx_def* null)
  call void @free_temp_slots()
  call void @pop_temp_slots()
  call void @emit_queue()
  call void @do_pending_stack_adjust()
  %82 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp160 = bitcast %union.tree_node* %82 to %struct.tree_exp*
  %operands161 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp160, i32 0, i32 2
  %arrayidx162 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands161, i32 0, i64 1
  %83 = load %union.tree_node*, %union.tree_node** %arrayidx162, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %83, %struct.rtx_def* %84, %struct.rtx_def* %85)
  br label %sw.epilog

sw.bb.163:                                        ; preds = %entry, %entry, %entry, %entry
  store i32 0, i32* %volatilep, align 4
  %86 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call166 = call %union.tree_node* @get_inner_reference(%union.tree_node* %86, i64* %bitsize, i64* %bitpos, %union.tree_node** %offset, i32* %mode164, i32* %unsignedp, i32* %volatilep)
  %87 = load i64, i64* %bitsize, align 8
  %conv = trunc i64 %87 to i32
  %88 = load i32, i32* %unsignedp, align 4
  %call167 = call %union.tree_node* @type_for_size(i32 %conv, i32 %88)
  store %union.tree_node* %call167, %union.tree_node** %type165, align 8
  %89 = load %union.tree_node*, %union.tree_node** %type165, align 8
  %cmp168 = icmp ne %union.tree_node* %89, null
  br i1 %cmp168, label %land.lhs.true.170, label %if.end.200

land.lhs.true.170:                                ; preds = %sw.bb.163
  %90 = load i64, i64* %bitsize, align 8
  %cmp171 = icmp sge i64 %90, 0
  br i1 %cmp171, label %land.lhs.true.173, label %if.end.200

land.lhs.true.173:                                ; preds = %land.lhs.true.170
  %91 = load %union.tree_node*, %union.tree_node** %type165, align 8
  %type174 = bitcast %union.tree_node* %91 to %struct.tree_type*
  %precision175 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type174, i32 0, i32 6
  %bf.load176 = load i32, i32* %precision175, align 4
  %bf.clear177 = and i32 %bf.load176, 511
  %92 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common178 = bitcast %union.tree_node* %92 to %struct.tree_common*
  %type179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 1
  %93 = load %union.tree_node*, %union.tree_node** %type179, align 8
  %type180 = bitcast %union.tree_node* %93 to %struct.tree_type*
  %precision181 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type180, i32 0, i32 6
  %bf.load182 = load i32, i32* %precision181, align 4
  %bf.clear183 = and i32 %bf.load182, 511
  %cmp184 = icmp slt i32 %bf.clear177, %bf.clear183
  br i1 %cmp184, label %land.lhs.true.186, label %if.end.200

land.lhs.true.186:                                ; preds = %land.lhs.true.173
  %94 = load %union.tree_node*, %union.tree_node** %type165, align 8
  %type187 = bitcast %union.tree_node* %94 to %struct.tree_type*
  %mode188 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type187, i32 0, i32 6
  %bf.load189 = load i32, i32* %mode188, align 4
  %bf.lshr190 = lshr i32 %bf.load189, 9
  %bf.clear191 = and i32 %bf.lshr190, 127
  %idxprom192 = sext i32 %bf.clear191 to i64
  %95 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 41), align 8
  %handlers193 = getelementptr inbounds %struct.optab, %struct.optab* %95, i32 0, i32 1
  %arrayidx194 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers193, i32 0, i64 %idxprom192
  %insn_code195 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx194, i32 0, i32 0
  %96 = load i32, i32* %insn_code195, align 4
  %cmp196 = icmp ne i32 %96, 1317
  br i1 %cmp196, label %if.then.198, label %if.end.200

if.then.198:                                      ; preds = %land.lhs.true.186
  %97 = load %union.tree_node*, %union.tree_node** %type165, align 8
  %98 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call199 = call %union.tree_node* @convert(%union.tree_node* %97, %union.tree_node* %98)
  %99 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %call199, %struct.rtx_def* %99, %struct.rtx_def* %100)
  br label %sw.epilog

if.end.200:                                       ; preds = %land.lhs.true.186, %land.lhs.true.173, %land.lhs.true.170, %sw.bb.163
  br label %normal

sw.bb.201:                                        ; preds = %entry
  %101 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp202 = bitcast %union.tree_node* %101 to %struct.tree_exp*
  %operands203 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp202, i32 0, i32 2
  %arrayidx204 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands203, i32 0, i64 1
  %102 = load %union.tree_node*, %union.tree_node** %arrayidx204, align 8
  %call205 = call i32 @integer_onep(%union.tree_node* %102)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %land.lhs.true.207, label %if.else

land.lhs.true.207:                                ; preds = %sw.bb.201
  %103 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp208 = bitcast %union.tree_node* %103 to %struct.tree_exp*
  %operands209 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp208, i32 0, i32 2
  %arrayidx210 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands209, i32 0, i64 2
  %104 = load %union.tree_node*, %union.tree_node** %arrayidx210, align 8
  %call211 = call i32 @integer_zerop(%union.tree_node* %104)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.then.213, label %if.else

if.then.213:                                      ; preds = %land.lhs.true.207
  %105 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp214 = bitcast %union.tree_node* %105 to %struct.tree_exp*
  %operands215 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp214, i32 0, i32 2
  %arrayidx216 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands215, i32 0, i64 0
  %106 = load %union.tree_node*, %union.tree_node** %arrayidx216, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %106, %struct.rtx_def* %107, %struct.rtx_def* %108)
  br label %if.end.266

if.else:                                          ; preds = %land.lhs.true.207, %sw.bb.201
  %109 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp217 = bitcast %union.tree_node* %109 to %struct.tree_exp*
  %operands218 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp217, i32 0, i32 2
  %arrayidx219 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands218, i32 0, i64 1
  %110 = load %union.tree_node*, %union.tree_node** %arrayidx219, align 8
  %call220 = call i32 @integer_zerop(%union.tree_node* %110)
  %tobool221 = icmp ne i32 %call220, 0
  br i1 %tobool221, label %land.lhs.true.222, label %if.else.232

land.lhs.true.222:                                ; preds = %if.else
  %111 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp223 = bitcast %union.tree_node* %111 to %struct.tree_exp*
  %operands224 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp223, i32 0, i32 2
  %arrayidx225 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands224, i32 0, i64 2
  %112 = load %union.tree_node*, %union.tree_node** %arrayidx225, align 8
  %call226 = call i32 @integer_onep(%union.tree_node* %112)
  %tobool227 = icmp ne i32 %call226, 0
  br i1 %tobool227, label %if.then.228, label %if.else.232

if.then.228:                                      ; preds = %land.lhs.true.222
  %113 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp229 = bitcast %union.tree_node* %113 to %struct.tree_exp*
  %operands230 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp229, i32 0, i32 2
  %arrayidx231 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands230, i32 0, i64 0
  %114 = load %union.tree_node*, %union.tree_node** %arrayidx231, align 8
  %115 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %116 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_jump(%union.tree_node* %114, %struct.rtx_def* %115, %struct.rtx_def* %116)
  br label %if.end.265

if.else.232:                                      ; preds = %land.lhs.true.222, %if.else
  %call233 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call233, %struct.rtx_def** %label1, align 8
  %call234 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call234, %struct.rtx_def** %drop_through_label, align 8
  %117 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp235 = bitcast %union.tree_node* %117 to %struct.tree_exp*
  %operands236 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp235, i32 0, i32 2
  %arrayidx237 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands236, i32 0, i64 0
  %118 = load %union.tree_node*, %union.tree_node** %arrayidx237, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8
  call void @do_jump(%union.tree_node* %118, %struct.rtx_def* %119, %struct.rtx_def* null)
  call void @start_cleanup_deferral()
  %120 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp238 = bitcast %union.tree_node* %120 to %struct.tree_exp*
  %operands239 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp238, i32 0, i32 2
  %arrayidx240 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands239, i32 0, i64 1
  %121 = load %union.tree_node*, %union.tree_node** %arrayidx240, align 8
  %122 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool241 = icmp ne %struct.rtx_def* %122, null
  br i1 %tobool241, label %cond.true.242, label %cond.false.243

cond.true.242:                                    ; preds = %if.else.232
  %123 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  br label %cond.end.244

cond.false.243:                                   ; preds = %if.else.232
  %124 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  br label %cond.end.244

cond.end.244:                                     ; preds = %cond.false.243, %cond.true.242
  %cond245 = phi %struct.rtx_def* [ %123, %cond.true.242 ], [ %124, %cond.false.243 ]
  %125 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool246 = icmp ne %struct.rtx_def* %125, null
  br i1 %tobool246, label %cond.true.247, label %cond.false.248

cond.true.247:                                    ; preds = %cond.end.244
  %126 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  br label %cond.end.249

cond.false.248:                                   ; preds = %cond.end.244
  %127 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  br label %cond.end.249

cond.end.249:                                     ; preds = %cond.false.248, %cond.true.247
  %cond250 = phi %struct.rtx_def* [ %126, %cond.true.247 ], [ %127, %cond.false.248 ]
  call void @do_jump(%union.tree_node* %121, %struct.rtx_def* %cond245, %struct.rtx_def* %cond250)
  call void @do_pending_stack_adjust()
  %128 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8
  %call251 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %128)
  %129 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp252 = bitcast %union.tree_node* %129 to %struct.tree_exp*
  %operands253 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp252, i32 0, i32 2
  %arrayidx254 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands253, i32 0, i64 2
  %130 = load %union.tree_node*, %union.tree_node** %arrayidx254, align 8
  %131 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool255 = icmp ne %struct.rtx_def* %131, null
  br i1 %tobool255, label %cond.true.256, label %cond.false.257

cond.true.256:                                    ; preds = %cond.end.249
  %132 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  br label %cond.end.258

cond.false.257:                                   ; preds = %cond.end.249
  %133 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  br label %cond.end.258

cond.end.258:                                     ; preds = %cond.false.257, %cond.true.256
  %cond259 = phi %struct.rtx_def* [ %132, %cond.true.256 ], [ %133, %cond.false.257 ]
  %134 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool260 = icmp ne %struct.rtx_def* %134, null
  br i1 %tobool260, label %cond.true.261, label %cond.false.262

cond.true.261:                                    ; preds = %cond.end.258
  %135 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  br label %cond.end.263

cond.false.262:                                   ; preds = %cond.end.258
  %136 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  br label %cond.end.263

cond.end.263:                                     ; preds = %cond.false.262, %cond.true.261
  %cond264 = phi %struct.rtx_def* [ %135, %cond.true.261 ], [ %136, %cond.false.262 ]
  call void @do_jump(%union.tree_node* %130, %struct.rtx_def* %cond259, %struct.rtx_def* %cond264)
  call void @end_cleanup_deferral()
  br label %if.end.265

if.end.265:                                       ; preds = %cond.end.263, %if.then.228
  br label %if.end.266

if.end.266:                                       ; preds = %if.end.265, %if.then.213
  br label %sw.epilog

sw.bb.267:                                        ; preds = %entry
  %137 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp268 = bitcast %union.tree_node* %137 to %struct.tree_exp*
  %operands269 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp268, i32 0, i32 2
  %arrayidx270 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands269, i32 0, i64 0
  %138 = load %union.tree_node*, %union.tree_node** %arrayidx270, align 8
  %common271 = bitcast %union.tree_node* %138 to %struct.tree_common*
  %type272 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common271, i32 0, i32 1
  %139 = load %union.tree_node*, %union.tree_node** %type272, align 8
  store %union.tree_node* %139, %union.tree_node** %inner_type, align 8
  %140 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %type273 = bitcast %union.tree_node* %140 to %struct.tree_type*
  %mode274 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type273, i32 0, i32 6
  %bf.load275 = load i32, i32* %mode274, align 4
  %bf.lshr276 = lshr i32 %bf.load275, 9
  %bf.clear277 = and i32 %bf.lshr276, 127
  %idxprom278 = sext i32 %bf.clear277 to i64
  %arrayidx279 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom278
  %141 = load i32, i32* %arrayidx279, align 4
  %cmp280 = icmp eq i32 %141, 6
  br i1 %cmp280, label %if.then.292, label %lor.lhs.false.282

lor.lhs.false.282:                                ; preds = %sw.bb.267
  %142 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %type283 = bitcast %union.tree_node* %142 to %struct.tree_type*
  %mode284 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type283, i32 0, i32 6
  %bf.load285 = load i32, i32* %mode284, align 4
  %bf.lshr286 = lshr i32 %bf.load285, 9
  %bf.clear287 = and i32 %bf.lshr286, 127
  %idxprom288 = sext i32 %bf.clear287 to i64
  %arrayidx289 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom288
  %143 = load i32, i32* %arrayidx289, align 4
  %cmp290 = icmp eq i32 %143, 5
  br i1 %cmp290, label %if.then.292, label %if.else.329

if.then.292:                                      ; preds = %lor.lhs.false.282, %sw.bb.267
  %144 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp293 = bitcast %union.tree_node* %144 to %struct.tree_exp*
  %operands294 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp293, i32 0, i32 2
  %arrayidx295 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands294, i32 0, i64 0
  %145 = load %union.tree_node*, %union.tree_node** %arrayidx295, align 8
  %call296 = call %union.tree_node* @save_expr(%union.tree_node* %145)
  store %union.tree_node* %call296, %union.tree_node** %exp0, align 8
  %146 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp297 = bitcast %union.tree_node* %146 to %struct.tree_exp*
  %operands298 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp297, i32 0, i32 2
  %arrayidx299 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands298, i32 0, i64 1
  %147 = load %union.tree_node*, %union.tree_node** %arrayidx299, align 8
  %call300 = call %union.tree_node* @save_expr(%union.tree_node* %147)
  store %union.tree_node* %call300, %union.tree_node** %exp1, align 8
  %148 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common301 = bitcast %union.tree_node* %148 to %struct.tree_common*
  %type302 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common301, i32 0, i32 1
  %149 = load %union.tree_node*, %union.tree_node** %type302, align 8
  %150 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common303 = bitcast %union.tree_node* %150 to %struct.tree_common*
  %type304 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common303, i32 0, i32 1
  %151 = load %union.tree_node*, %union.tree_node** %type304, align 8
  %152 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %common305 = bitcast %union.tree_node* %152 to %struct.tree_common*
  %type306 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common305, i32 0, i32 1
  %153 = load %union.tree_node*, %union.tree_node** %type306, align 8
  %154 = load %union.tree_node*, %union.tree_node** %exp0, align 8
  %call307 = call %union.tree_node* @build1(i32 127, %union.tree_node* %153, %union.tree_node* %154)
  %call308 = call %union.tree_node* @fold(%union.tree_node* %call307)
  %155 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %common309 = bitcast %union.tree_node* %155 to %struct.tree_common*
  %type310 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common309, i32 0, i32 1
  %156 = load %union.tree_node*, %union.tree_node** %type310, align 8
  %157 = load %union.tree_node*, %union.tree_node** %exp1, align 8
  %call311 = call %union.tree_node* @build1(i32 127, %union.tree_node* %156, %union.tree_node* %157)
  %call312 = call %union.tree_node* @fold(%union.tree_node* %call311)
  %call313 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 101, %union.tree_node* %151, %union.tree_node* %call308, %union.tree_node* %call312)
  %call314 = call %union.tree_node* @fold(%union.tree_node* %call313)
  %158 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common315 = bitcast %union.tree_node* %158 to %struct.tree_common*
  %type316 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common315, i32 0, i32 1
  %159 = load %union.tree_node*, %union.tree_node** %type316, align 8
  %160 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %common317 = bitcast %union.tree_node* %160 to %struct.tree_common*
  %type318 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common317, i32 0, i32 1
  %161 = load %union.tree_node*, %union.tree_node** %type318, align 8
  %162 = load %union.tree_node*, %union.tree_node** %exp0, align 8
  %call319 = call %union.tree_node* @build1(i32 128, %union.tree_node* %161, %union.tree_node* %162)
  %call320 = call %union.tree_node* @fold(%union.tree_node* %call319)
  %163 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %common321 = bitcast %union.tree_node* %163 to %struct.tree_common*
  %type322 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common321, i32 0, i32 1
  %164 = load %union.tree_node*, %union.tree_node** %type322, align 8
  %165 = load %union.tree_node*, %union.tree_node** %exp1, align 8
  %call323 = call %union.tree_node* @build1(i32 128, %union.tree_node* %164, %union.tree_node* %165)
  %call324 = call %union.tree_node* @fold(%union.tree_node* %call323)
  %call325 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 101, %union.tree_node* %159, %union.tree_node* %call320, %union.tree_node* %call324)
  %call326 = call %union.tree_node* @fold(%union.tree_node* %call325)
  %call327 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 91, %union.tree_node* %149, %union.tree_node* %call314, %union.tree_node* %call326)
  %call328 = call %union.tree_node* @fold(%union.tree_node* %call327)
  %166 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %call328, %struct.rtx_def* %166, %struct.rtx_def* %167)
  br label %if.end.361

if.else.329:                                      ; preds = %lor.lhs.false.282
  %168 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp330 = bitcast %union.tree_node* %168 to %struct.tree_exp*
  %operands331 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp330, i32 0, i32 2
  %arrayidx332 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands331, i32 0, i64 1
  %169 = load %union.tree_node*, %union.tree_node** %arrayidx332, align 8
  %call333 = call i32 @integer_zerop(%union.tree_node* %169)
  %tobool334 = icmp ne i32 %call333, 0
  br i1 %tobool334, label %if.then.335, label %if.else.339

if.then.335:                                      ; preds = %if.else.329
  %170 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp336 = bitcast %union.tree_node* %170 to %struct.tree_exp*
  %operands337 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp336, i32 0, i32 2
  %arrayidx338 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands337, i32 0, i64 0
  %171 = load %union.tree_node*, %union.tree_node** %arrayidx338, align 8
  %172 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %173 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_jump(%union.tree_node* %171, %struct.rtx_def* %172, %struct.rtx_def* %173)
  br label %if.end.360

if.else.339:                                      ; preds = %if.else.329
  %174 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %type340 = bitcast %union.tree_node* %174 to %struct.tree_type*
  %mode341 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type340, i32 0, i32 6
  %bf.load342 = load i32, i32* %mode341, align 4
  %bf.lshr343 = lshr i32 %bf.load342, 9
  %bf.clear344 = and i32 %bf.lshr343, 127
  %idxprom345 = sext i32 %bf.clear344 to i64
  %arrayidx346 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom345
  %175 = load i32, i32* %arrayidx346, align 4
  %cmp347 = icmp eq i32 %175, 1
  br i1 %cmp347, label %land.lhs.true.349, label %if.else.358

land.lhs.true.349:                                ; preds = %if.else.339
  %176 = load %union.tree_node*, %union.tree_node** %inner_type, align 8
  %type350 = bitcast %union.tree_node* %176 to %struct.tree_type*
  %mode351 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type350, i32 0, i32 6
  %bf.load352 = load i32, i32* %mode351, align 4
  %bf.lshr353 = lshr i32 %bf.load352, 9
  %bf.clear354 = and i32 %bf.lshr353, 127
  %call355 = call i32 @can_compare_p(i32 103, i32 %bf.clear354, i32 0)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.else.358, label %if.then.357

if.then.357:                                      ; preds = %land.lhs.true.349
  %177 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %178 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump_by_parts_equality(%union.tree_node* %177, %struct.rtx_def* %178, %struct.rtx_def* %179)
  br label %if.end.359

if.else.358:                                      ; preds = %land.lhs.true.349, %if.else.339
  %180 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %182 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %180, i32 103, i32 103, %struct.rtx_def* %181, %struct.rtx_def* %182)
  br label %if.end.359

if.end.359:                                       ; preds = %if.else.358, %if.then.357
  br label %if.end.360

if.end.360:                                       ; preds = %if.end.359, %if.then.335
  br label %if.end.361

if.end.361:                                       ; preds = %if.end.360, %if.then.292
  br label %sw.epilog

sw.bb.362:                                        ; preds = %entry
  %183 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp364 = bitcast %union.tree_node* %183 to %struct.tree_exp*
  %operands365 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp364, i32 0, i32 2
  %arrayidx366 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands365, i32 0, i64 0
  %184 = load %union.tree_node*, %union.tree_node** %arrayidx366, align 8
  %common367 = bitcast %union.tree_node* %184 to %struct.tree_common*
  %type368 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common367, i32 0, i32 1
  %185 = load %union.tree_node*, %union.tree_node** %type368, align 8
  store %union.tree_node* %185, %union.tree_node** %inner_type363, align 8
  %186 = load %union.tree_node*, %union.tree_node** %inner_type363, align 8
  %type369 = bitcast %union.tree_node* %186 to %struct.tree_type*
  %mode370 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type369, i32 0, i32 6
  %bf.load371 = load i32, i32* %mode370, align 4
  %bf.lshr372 = lshr i32 %bf.load371, 9
  %bf.clear373 = and i32 %bf.lshr372, 127
  %idxprom374 = sext i32 %bf.clear373 to i64
  %arrayidx375 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom374
  %187 = load i32, i32* %arrayidx375, align 4
  %cmp376 = icmp eq i32 %187, 6
  br i1 %cmp376, label %if.then.388, label %lor.lhs.false.378

lor.lhs.false.378:                                ; preds = %sw.bb.362
  %188 = load %union.tree_node*, %union.tree_node** %inner_type363, align 8
  %type379 = bitcast %union.tree_node* %188 to %struct.tree_type*
  %mode380 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type379, i32 0, i32 6
  %bf.load381 = load i32, i32* %mode380, align 4
  %bf.lshr382 = lshr i32 %bf.load381, 9
  %bf.clear383 = and i32 %bf.lshr382, 127
  %idxprom384 = sext i32 %bf.clear383 to i64
  %arrayidx385 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom384
  %189 = load i32, i32* %arrayidx385, align 4
  %cmp386 = icmp eq i32 %189, 5
  br i1 %cmp386, label %if.then.388, label %if.else.427

if.then.388:                                      ; preds = %lor.lhs.false.378, %sw.bb.362
  %190 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp390 = bitcast %union.tree_node* %190 to %struct.tree_exp*
  %operands391 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp390, i32 0, i32 2
  %arrayidx392 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands391, i32 0, i64 0
  %191 = load %union.tree_node*, %union.tree_node** %arrayidx392, align 8
  %call393 = call %union.tree_node* @save_expr(%union.tree_node* %191)
  store %union.tree_node* %call393, %union.tree_node** %exp0389, align 8
  %192 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp395 = bitcast %union.tree_node* %192 to %struct.tree_exp*
  %operands396 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp395, i32 0, i32 2
  %arrayidx397 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands396, i32 0, i64 1
  %193 = load %union.tree_node*, %union.tree_node** %arrayidx397, align 8
  %call398 = call %union.tree_node* @save_expr(%union.tree_node* %193)
  store %union.tree_node* %call398, %union.tree_node** %exp1394, align 8
  %194 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common399 = bitcast %union.tree_node* %194 to %struct.tree_common*
  %type400 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common399, i32 0, i32 1
  %195 = load %union.tree_node*, %union.tree_node** %type400, align 8
  %196 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common401 = bitcast %union.tree_node* %196 to %struct.tree_common*
  %type402 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common401, i32 0, i32 1
  %197 = load %union.tree_node*, %union.tree_node** %type402, align 8
  %198 = load %union.tree_node*, %union.tree_node** %inner_type363, align 8
  %common403 = bitcast %union.tree_node* %198 to %struct.tree_common*
  %type404 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common403, i32 0, i32 1
  %199 = load %union.tree_node*, %union.tree_node** %type404, align 8
  %200 = load %union.tree_node*, %union.tree_node** %exp0389, align 8
  %call405 = call %union.tree_node* @build1(i32 127, %union.tree_node* %199, %union.tree_node* %200)
  %call406 = call %union.tree_node* @fold(%union.tree_node* %call405)
  %201 = load %union.tree_node*, %union.tree_node** %inner_type363, align 8
  %common407 = bitcast %union.tree_node* %201 to %struct.tree_common*
  %type408 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common407, i32 0, i32 1
  %202 = load %union.tree_node*, %union.tree_node** %type408, align 8
  %203 = load %union.tree_node*, %union.tree_node** %exp1394, align 8
  %call409 = call %union.tree_node* @build1(i32 127, %union.tree_node* %202, %union.tree_node* %203)
  %call410 = call %union.tree_node* @fold(%union.tree_node* %call409)
  %call411 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 102, %union.tree_node* %197, %union.tree_node* %call406, %union.tree_node* %call410)
  %call412 = call %union.tree_node* @fold(%union.tree_node* %call411)
  %204 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common413 = bitcast %union.tree_node* %204 to %struct.tree_common*
  %type414 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common413, i32 0, i32 1
  %205 = load %union.tree_node*, %union.tree_node** %type414, align 8
  %206 = load %union.tree_node*, %union.tree_node** %inner_type363, align 8
  %common415 = bitcast %union.tree_node* %206 to %struct.tree_common*
  %type416 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common415, i32 0, i32 1
  %207 = load %union.tree_node*, %union.tree_node** %type416, align 8
  %208 = load %union.tree_node*, %union.tree_node** %exp0389, align 8
  %call417 = call %union.tree_node* @build1(i32 128, %union.tree_node* %207, %union.tree_node* %208)
  %call418 = call %union.tree_node* @fold(%union.tree_node* %call417)
  %209 = load %union.tree_node*, %union.tree_node** %inner_type363, align 8
  %common419 = bitcast %union.tree_node* %209 to %struct.tree_common*
  %type420 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common419, i32 0, i32 1
  %210 = load %union.tree_node*, %union.tree_node** %type420, align 8
  %211 = load %union.tree_node*, %union.tree_node** %exp1394, align 8
  %call421 = call %union.tree_node* @build1(i32 128, %union.tree_node* %210, %union.tree_node* %211)
  %call422 = call %union.tree_node* @fold(%union.tree_node* %call421)
  %call423 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 102, %union.tree_node* %205, %union.tree_node* %call418, %union.tree_node* %call422)
  %call424 = call %union.tree_node* @fold(%union.tree_node* %call423)
  %call425 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 92, %union.tree_node* %195, %union.tree_node* %call412, %union.tree_node* %call424)
  %call426 = call %union.tree_node* @fold(%union.tree_node* %call425)
  %212 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %213 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %call426, %struct.rtx_def* %212, %struct.rtx_def* %213)
  br label %if.end.459

if.else.427:                                      ; preds = %lor.lhs.false.378
  %214 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp428 = bitcast %union.tree_node* %214 to %struct.tree_exp*
  %operands429 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp428, i32 0, i32 2
  %arrayidx430 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands429, i32 0, i64 1
  %215 = load %union.tree_node*, %union.tree_node** %arrayidx430, align 8
  %call431 = call i32 @integer_zerop(%union.tree_node* %215)
  %tobool432 = icmp ne i32 %call431, 0
  br i1 %tobool432, label %if.then.433, label %if.else.437

if.then.433:                                      ; preds = %if.else.427
  %216 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp434 = bitcast %union.tree_node* %216 to %struct.tree_exp*
  %operands435 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp434, i32 0, i32 2
  %arrayidx436 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands435, i32 0, i64 0
  %217 = load %union.tree_node*, %union.tree_node** %arrayidx436, align 8
  %218 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %219 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %217, %struct.rtx_def* %218, %struct.rtx_def* %219)
  br label %if.end.458

if.else.437:                                      ; preds = %if.else.427
  %220 = load %union.tree_node*, %union.tree_node** %inner_type363, align 8
  %type438 = bitcast %union.tree_node* %220 to %struct.tree_type*
  %mode439 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type438, i32 0, i32 6
  %bf.load440 = load i32, i32* %mode439, align 4
  %bf.lshr441 = lshr i32 %bf.load440, 9
  %bf.clear442 = and i32 %bf.lshr441, 127
  %idxprom443 = sext i32 %bf.clear442 to i64
  %arrayidx444 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom443
  %221 = load i32, i32* %arrayidx444, align 4
  %cmp445 = icmp eq i32 %221, 1
  br i1 %cmp445, label %land.lhs.true.447, label %if.else.456

land.lhs.true.447:                                ; preds = %if.else.437
  %222 = load %union.tree_node*, %union.tree_node** %inner_type363, align 8
  %type448 = bitcast %union.tree_node* %222 to %struct.tree_type*
  %mode449 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type448, i32 0, i32 6
  %bf.load450 = load i32, i32* %mode449, align 4
  %bf.lshr451 = lshr i32 %bf.load450, 9
  %bf.clear452 = and i32 %bf.lshr451, 127
  %call453 = call i32 @can_compare_p(i32 102, i32 %bf.clear452, i32 0)
  %tobool454 = icmp ne i32 %call453, 0
  br i1 %tobool454, label %if.else.456, label %if.then.455

if.then.455:                                      ; preds = %land.lhs.true.447
  %223 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %224 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %225 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_jump_by_parts_equality(%union.tree_node* %223, %struct.rtx_def* %224, %struct.rtx_def* %225)
  br label %if.end.457

if.else.456:                                      ; preds = %land.lhs.true.447, %if.else.437
  %226 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %227 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %228 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %226, i32 102, i32 102, %struct.rtx_def* %227, %struct.rtx_def* %228)
  br label %if.end.457

if.end.457:                                       ; preds = %if.else.456, %if.then.455
  br label %if.end.458

if.end.458:                                       ; preds = %if.end.457, %if.then.433
  br label %if.end.459

if.end.459:                                       ; preds = %if.end.458, %if.then.388
  br label %sw.epilog

sw.bb.460:                                        ; preds = %entry
  %229 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp461 = bitcast %union.tree_node* %229 to %struct.tree_exp*
  %operands462 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp461, i32 0, i32 2
  %arrayidx463 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands462, i32 0, i64 0
  %230 = load %union.tree_node*, %union.tree_node** %arrayidx463, align 8
  %common464 = bitcast %union.tree_node* %230 to %struct.tree_common*
  %type465 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common464, i32 0, i32 1
  %231 = load %union.tree_node*, %union.tree_node** %type465, align 8
  %type466 = bitcast %union.tree_node* %231 to %struct.tree_type*
  %mode467 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type466, i32 0, i32 6
  %bf.load468 = load i32, i32* %mode467, align 4
  %bf.lshr469 = lshr i32 %bf.load468, 9
  %bf.clear470 = and i32 %bf.lshr469, 127
  store i32 %bf.clear470, i32* %mode, align 4
  %232 = load i32, i32* %mode, align 4
  %idxprom471 = sext i32 %232 to i64
  %arrayidx472 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom471
  %233 = load i32, i32* %arrayidx472, align 4
  %cmp473 = icmp eq i32 %233, 1
  br i1 %cmp473, label %land.lhs.true.475, label %if.else.479

land.lhs.true.475:                                ; preds = %sw.bb.460
  %234 = load i32, i32* %mode, align 4
  %call476 = call i32 @can_compare_p(i32 107, i32 %234, i32 0)
  %tobool477 = icmp ne i32 %call476, 0
  br i1 %tobool477, label %if.else.479, label %if.then.478

if.then.478:                                      ; preds = %land.lhs.true.475
  %235 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %236 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %237 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump_by_parts_greater(%union.tree_node* %235, i32 1, %struct.rtx_def* %236, %struct.rtx_def* %237)
  br label %if.end.480

if.else.479:                                      ; preds = %land.lhs.true.475, %sw.bb.460
  %238 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %239 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %240 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %238, i32 107, i32 111, %struct.rtx_def* %239, %struct.rtx_def* %240)
  br label %if.end.480

if.end.480:                                       ; preds = %if.else.479, %if.then.478
  br label %sw.epilog

sw.bb.481:                                        ; preds = %entry
  %241 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp482 = bitcast %union.tree_node* %241 to %struct.tree_exp*
  %operands483 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp482, i32 0, i32 2
  %arrayidx484 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands483, i32 0, i64 0
  %242 = load %union.tree_node*, %union.tree_node** %arrayidx484, align 8
  %common485 = bitcast %union.tree_node* %242 to %struct.tree_common*
  %type486 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common485, i32 0, i32 1
  %243 = load %union.tree_node*, %union.tree_node** %type486, align 8
  %type487 = bitcast %union.tree_node* %243 to %struct.tree_type*
  %mode488 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type487, i32 0, i32 6
  %bf.load489 = load i32, i32* %mode488, align 4
  %bf.lshr490 = lshr i32 %bf.load489, 9
  %bf.clear491 = and i32 %bf.lshr490, 127
  store i32 %bf.clear491, i32* %mode, align 4
  %244 = load i32, i32* %mode, align 4
  %idxprom492 = sext i32 %244 to i64
  %arrayidx493 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom492
  %245 = load i32, i32* %arrayidx493, align 4
  %cmp494 = icmp eq i32 %245, 1
  br i1 %cmp494, label %land.lhs.true.496, label %if.else.500

land.lhs.true.496:                                ; preds = %sw.bb.481
  %246 = load i32, i32* %mode, align 4
  %call497 = call i32 @can_compare_p(i32 106, i32 %246, i32 0)
  %tobool498 = icmp ne i32 %call497, 0
  br i1 %tobool498, label %if.else.500, label %if.then.499

if.then.499:                                      ; preds = %land.lhs.true.496
  %247 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %248 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %249 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_jump_by_parts_greater(%union.tree_node* %247, i32 0, %struct.rtx_def* %248, %struct.rtx_def* %249)
  br label %if.end.501

if.else.500:                                      ; preds = %land.lhs.true.496, %sw.bb.481
  %250 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %251 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %252 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %250, i32 106, i32 110, %struct.rtx_def* %251, %struct.rtx_def* %252)
  br label %if.end.501

if.end.501:                                       ; preds = %if.else.500, %if.then.499
  br label %sw.epilog

sw.bb.502:                                        ; preds = %entry
  %253 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp503 = bitcast %union.tree_node* %253 to %struct.tree_exp*
  %operands504 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp503, i32 0, i32 2
  %arrayidx505 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands504, i32 0, i64 0
  %254 = load %union.tree_node*, %union.tree_node** %arrayidx505, align 8
  %common506 = bitcast %union.tree_node* %254 to %struct.tree_common*
  %type507 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common506, i32 0, i32 1
  %255 = load %union.tree_node*, %union.tree_node** %type507, align 8
  %type508 = bitcast %union.tree_node* %255 to %struct.tree_type*
  %mode509 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type508, i32 0, i32 6
  %bf.load510 = load i32, i32* %mode509, align 4
  %bf.lshr511 = lshr i32 %bf.load510, 9
  %bf.clear512 = and i32 %bf.lshr511, 127
  store i32 %bf.clear512, i32* %mode, align 4
  %256 = load i32, i32* %mode, align 4
  %idxprom513 = sext i32 %256 to i64
  %arrayidx514 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom513
  %257 = load i32, i32* %arrayidx514, align 4
  %cmp515 = icmp eq i32 %257, 1
  br i1 %cmp515, label %land.lhs.true.517, label %if.else.521

land.lhs.true.517:                                ; preds = %sw.bb.502
  %258 = load i32, i32* %mode, align 4
  %call518 = call i32 @can_compare_p(i32 105, i32 %258, i32 0)
  %tobool519 = icmp ne i32 %call518, 0
  br i1 %tobool519, label %if.else.521, label %if.then.520

if.then.520:                                      ; preds = %land.lhs.true.517
  %259 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %260 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %261 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump_by_parts_greater(%union.tree_node* %259, i32 0, %struct.rtx_def* %260, %struct.rtx_def* %261)
  br label %if.end.522

if.else.521:                                      ; preds = %land.lhs.true.517, %sw.bb.502
  %262 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %263 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %264 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %262, i32 105, i32 109, %struct.rtx_def* %263, %struct.rtx_def* %264)
  br label %if.end.522

if.end.522:                                       ; preds = %if.else.521, %if.then.520
  br label %sw.epilog

sw.bb.523:                                        ; preds = %entry
  %265 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp524 = bitcast %union.tree_node* %265 to %struct.tree_exp*
  %operands525 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp524, i32 0, i32 2
  %arrayidx526 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands525, i32 0, i64 0
  %266 = load %union.tree_node*, %union.tree_node** %arrayidx526, align 8
  %common527 = bitcast %union.tree_node* %266 to %struct.tree_common*
  %type528 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common527, i32 0, i32 1
  %267 = load %union.tree_node*, %union.tree_node** %type528, align 8
  %type529 = bitcast %union.tree_node* %267 to %struct.tree_type*
  %mode530 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type529, i32 0, i32 6
  %bf.load531 = load i32, i32* %mode530, align 4
  %bf.lshr532 = lshr i32 %bf.load531, 9
  %bf.clear533 = and i32 %bf.lshr532, 127
  store i32 %bf.clear533, i32* %mode, align 4
  %268 = load i32, i32* %mode, align 4
  %idxprom534 = sext i32 %268 to i64
  %arrayidx535 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom534
  %269 = load i32, i32* %arrayidx535, align 4
  %cmp536 = icmp eq i32 %269, 1
  br i1 %cmp536, label %land.lhs.true.538, label %if.else.542

land.lhs.true.538:                                ; preds = %sw.bb.523
  %270 = load i32, i32* %mode, align 4
  %call539 = call i32 @can_compare_p(i32 104, i32 %270, i32 0)
  %tobool540 = icmp ne i32 %call539, 0
  br i1 %tobool540, label %if.else.542, label %if.then.541

if.then.541:                                      ; preds = %land.lhs.true.538
  %271 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %272 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %273 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_jump_by_parts_greater(%union.tree_node* %271, i32 1, %struct.rtx_def* %272, %struct.rtx_def* %273)
  br label %if.end.543

if.else.542:                                      ; preds = %land.lhs.true.538, %sw.bb.523
  %274 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %275 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %276 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %274, i32 104, i32 108, %struct.rtx_def* %275, %struct.rtx_def* %276)
  br label %if.end.543

if.end.543:                                       ; preds = %if.else.542, %if.then.541
  br label %sw.epilog

sw.bb.544:                                        ; preds = %entry, %entry
  %277 = load i32, i32* %code, align 4
  %cmp546 = icmp eq i32 %277, 103
  br i1 %cmp546, label %if.then.548, label %if.else.549

if.then.548:                                      ; preds = %sw.bb.544
  store i32 112, i32* %cmp545, align 4
  store i32 113, i32* %rcmp, align 4
  br label %if.end.550

if.else.549:                                      ; preds = %sw.bb.544
  store i32 113, i32* %cmp545, align 4
  store i32 112, i32* %rcmp, align 4
  br label %if.end.550

if.end.550:                                       ; preds = %if.else.549, %if.then.548
  %278 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp551 = bitcast %union.tree_node* %278 to %struct.tree_exp*
  %operands552 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp551, i32 0, i32 2
  %arrayidx553 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands552, i32 0, i64 0
  %279 = load %union.tree_node*, %union.tree_node** %arrayidx553, align 8
  %common554 = bitcast %union.tree_node* %279 to %struct.tree_common*
  %type555 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common554, i32 0, i32 1
  %280 = load %union.tree_node*, %union.tree_node** %type555, align 8
  %type556 = bitcast %union.tree_node* %280 to %struct.tree_type*
  %mode557 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type556, i32 0, i32 6
  %bf.load558 = load i32, i32* %mode557, align 4
  %bf.lshr559 = lshr i32 %bf.load558, 9
  %bf.clear560 = and i32 %bf.lshr559, 127
  store i32 %bf.clear560, i32* %mode, align 4
  store i32 0, i32* %do_rev, align 4
  %281 = load i32, i32* %cmp545, align 4
  %282 = load i32, i32* %mode, align 4
  %call561 = call i32 @can_compare_p(i32 %281, i32 %282, i32 0)
  %tobool562 = icmp ne i32 %call561, 0
  br i1 %tobool562, label %if.end.570, label %land.lhs.true.563

land.lhs.true.563:                                ; preds = %if.end.550
  %283 = load i32, i32* %rcmp, align 4
  %284 = load i32, i32* %mode, align 4
  %call564 = call i32 @can_compare_p(i32 %283, i32 %284, i32 0)
  %tobool565 = icmp ne i32 %call564, 0
  br i1 %tobool565, label %if.then.569, label %lor.lhs.false.566

lor.lhs.false.566:                                ; preds = %land.lhs.true.563
  %285 = load i32, i32* %rcmp, align 4
  %cmp567 = icmp eq i32 %285, 112
  br i1 %cmp567, label %if.then.569, label %if.end.570

if.then.569:                                      ; preds = %lor.lhs.false.566, %land.lhs.true.563
  store i32 1, i32* %do_rev, align 4
  br label %if.end.570

if.end.570:                                       ; preds = %if.then.569, %lor.lhs.false.566, %if.end.550
  %286 = load i32, i32* %do_rev, align 4
  %tobool571 = icmp ne i32 %286, 0
  br i1 %tobool571, label %if.else.573, label %if.then.572

if.then.572:                                      ; preds = %if.end.570
  %287 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %288 = load i32, i32* %cmp545, align 4
  %289 = load i32, i32* %cmp545, align 4
  %290 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %291 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %287, i32 %288, i32 %289, %struct.rtx_def* %290, %struct.rtx_def* %291)
  br label %if.end.574

if.else.573:                                      ; preds = %if.end.570
  %292 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %293 = load i32, i32* %rcmp, align 4
  %294 = load i32, i32* %rcmp, align 4
  %295 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %296 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %292, i32 %293, i32 %294, %struct.rtx_def* %295, %struct.rtx_def* %296)
  br label %if.end.574

if.end.574:                                       ; preds = %if.else.573, %if.then.572
  br label %sw.epilog

sw.bb.575:                                        ; preds = %entry
  store i32 118, i32* %rcode1, align 4
  store i32 97, i32* %tcode2, align 4
  br label %unordered_bcc

sw.bb.576:                                        ; preds = %entry
  store i32 117, i32* %rcode1, align 4
  store i32 98, i32* %tcode2, align 4
  br label %unordered_bcc

sw.bb.577:                                        ; preds = %entry
  store i32 116, i32* %rcode1, align 4
  store i32 99, i32* %tcode2, align 4
  br label %unordered_bcc

sw.bb.578:                                        ; preds = %entry
  store i32 115, i32* %rcode1, align 4
  store i32 100, i32* %tcode2, align 4
  br label %unordered_bcc

sw.bb.579:                                        ; preds = %entry
  store i32 114, i32* %rcode1, align 4
  store i32 101, i32* %tcode2, align 4
  br label %unordered_bcc

unordered_bcc:                                    ; preds = %sw.bb.579, %sw.bb.578, %sw.bb.577, %sw.bb.576, %sw.bb.575
  %297 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp580 = bitcast %union.tree_node* %297 to %struct.tree_exp*
  %operands581 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp580, i32 0, i32 2
  %arrayidx582 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands581, i32 0, i64 0
  %298 = load %union.tree_node*, %union.tree_node** %arrayidx582, align 8
  %common583 = bitcast %union.tree_node* %298 to %struct.tree_common*
  %type584 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common583, i32 0, i32 1
  %299 = load %union.tree_node*, %union.tree_node** %type584, align 8
  %type585 = bitcast %union.tree_node* %299 to %struct.tree_type*
  %mode586 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type585, i32 0, i32 6
  %bf.load587 = load i32, i32* %mode586, align 4
  %bf.lshr588 = lshr i32 %bf.load587, 9
  %bf.clear589 = and i32 %bf.lshr588, 127
  store i32 %bf.clear589, i32* %mode, align 4
  %300 = load i32, i32* %rcode1, align 4
  %301 = load i32, i32* %mode, align 4
  %call590 = call i32 @can_compare_p(i32 %300, i32 %301, i32 0)
  %tobool591 = icmp ne i32 %call590, 0
  br i1 %tobool591, label %if.then.592, label %if.else.593

if.then.592:                                      ; preds = %unordered_bcc
  %302 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %303 = load i32, i32* %rcode1, align 4
  %304 = load i32, i32* %rcode1, align 4
  %305 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %306 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_and_jump(%union.tree_node* %302, i32 %303, i32 %304, %struct.rtx_def* %305, %struct.rtx_def* %306)
  br label %if.end.613

if.else.593:                                      ; preds = %unordered_bcc
  %307 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp594 = bitcast %union.tree_node* %307 to %struct.tree_exp*
  %operands595 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp594, i32 0, i32 2
  %arrayidx596 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands595, i32 0, i64 0
  %308 = load %union.tree_node*, %union.tree_node** %arrayidx596, align 8
  %call597 = call %union.tree_node* @save_expr(%union.tree_node* %308)
  store %union.tree_node* %call597, %union.tree_node** %op0, align 8
  %309 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp598 = bitcast %union.tree_node* %309 to %struct.tree_exp*
  %operands599 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp598, i32 0, i32 2
  %arrayidx600 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands599, i32 0, i64 1
  %310 = load %union.tree_node*, %union.tree_node** %arrayidx600, align 8
  %call601 = call %union.tree_node* @save_expr(%union.tree_node* %310)
  store %union.tree_node* %call601, %union.tree_node** %op1, align 8
  %311 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common602 = bitcast %union.tree_node* %311 to %struct.tree_common*
  %type603 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common602, i32 0, i32 1
  %312 = load %union.tree_node*, %union.tree_node** %type603, align 8
  %313 = load %union.tree_node*, %union.tree_node** %op0, align 8
  %314 = load %union.tree_node*, %union.tree_node** %op1, align 8
  %call604 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 103, %union.tree_node* %312, %union.tree_node* %313, %union.tree_node* %314)
  %call605 = call %union.tree_node* @fold(%union.tree_node* %call604)
  store %union.tree_node* %call605, %union.tree_node** %cmp0, align 8
  %315 = load i32, i32* %tcode2, align 4
  %316 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common606 = bitcast %union.tree_node* %316 to %struct.tree_common*
  %type607 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common606, i32 0, i32 1
  %317 = load %union.tree_node*, %union.tree_node** %type607, align 8
  %318 = load %union.tree_node*, %union.tree_node** %op0, align 8
  %319 = load %union.tree_node*, %union.tree_node** %op1, align 8
  %call608 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 %315, %union.tree_node* %317, %union.tree_node* %318, %union.tree_node* %319)
  %call609 = call %union.tree_node* @fold(%union.tree_node* %call608)
  store %union.tree_node* %call609, %union.tree_node** %cmp1, align 8
  %320 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common610 = bitcast %union.tree_node* %320 to %struct.tree_common*
  %type611 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common610, i32 0, i32 1
  %321 = load %union.tree_node*, %union.tree_node** %type611, align 8
  %322 = load %union.tree_node*, %union.tree_node** %cmp0, align 8
  %323 = load %union.tree_node*, %union.tree_node** %cmp1, align 8
  %call612 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 92, %union.tree_node* %321, %union.tree_node* %322, %union.tree_node* %323)
  store %union.tree_node* %call612, %union.tree_node** %exp.addr, align 8
  %324 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %325 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %326 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump(%union.tree_node* %324, %struct.rtx_def* %325, %struct.rtx_def* %326)
  br label %if.end.613

if.end.613:                                       ; preds = %if.else.593, %if.then.592
  br label %sw.epilog

sw.bb.614:                                        ; preds = %entry
  %327 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp615 = bitcast %union.tree_node* %327 to %struct.tree_exp*
  %operands616 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp615, i32 0, i32 2
  %arrayidx617 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands616, i32 0, i64 0
  %328 = load %union.tree_node*, %union.tree_node** %arrayidx617, align 8
  %common618 = bitcast %union.tree_node* %328 to %struct.tree_common*
  %code619 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common618, i32 0, i32 2
  %bf.load620 = load i32, i32* %code619, align 8
  %bf.clear621 = and i32 %bf.load620, 255
  %cmp622 = icmp eq i32 %bf.clear621, 121
  br i1 %cmp622, label %if.then.624, label %if.end.666

if.then.624:                                      ; preds = %sw.bb.614
  %329 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp625 = bitcast %union.tree_node* %329 to %struct.tree_exp*
  %operands626 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp625, i32 0, i32 2
  %arrayidx627 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands626, i32 0, i64 0
  %330 = load %union.tree_node*, %union.tree_node** %arrayidx627, align 8
  %exp628 = bitcast %union.tree_node* %330 to %struct.tree_exp*
  %operands629 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp628, i32 0, i32 2
  %arrayidx630 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands629, i32 0, i64 0
  %331 = load %union.tree_node*, %union.tree_node** %arrayidx630, align 8
  store %union.tree_node* %331, %union.tree_node** %fndecl, align 8
  %332 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp631 = bitcast %union.tree_node* %332 to %struct.tree_exp*
  %operands632 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp631, i32 0, i32 2
  %arrayidx633 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands632, i32 0, i64 1
  %333 = load %union.tree_node*, %union.tree_node** %arrayidx633, align 8
  store %union.tree_node* %333, %union.tree_node** %arglist, align 8
  %334 = load %union.tree_node*, %union.tree_node** %fndecl, align 8
  %common634 = bitcast %union.tree_node* %334 to %struct.tree_common*
  %code635 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common634, i32 0, i32 2
  %bf.load636 = load i32, i32* %code635, align 8
  %bf.clear637 = and i32 %bf.load636, 255
  %cmp638 = icmp eq i32 %bf.clear637, 30
  br i1 %cmp638, label %land.lhs.true.640, label %if.end.665

land.lhs.true.640:                                ; preds = %if.then.624
  %335 = load %union.tree_node*, %union.tree_node** %fndecl, align 8
  %decl = bitcast %union.tree_node* %335 to %struct.tree_decl*
  %built_in_class = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %336 = bitcast i48* %built_in_class to i64*
  %bf.load641 = load i64, i64* %336, align 8
  %bf.lshr642 = lshr i64 %bf.load641, 29
  %bf.clear643 = and i64 %bf.lshr642, 3
  %bf.cast = trunc i64 %bf.clear643 to i32
  %cmp644 = icmp ne i32 %bf.cast, 0
  br i1 %cmp644, label %land.lhs.true.646, label %if.end.665

land.lhs.true.646:                                ; preds = %land.lhs.true.640
  %337 = load %union.tree_node*, %union.tree_node** %fndecl, align 8
  %decl647 = bitcast %union.tree_node* %337 to %struct.tree_decl*
  %u1 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl647, i32 0, i32 6
  %f = bitcast %union.anon* %u1 to i32*
  %338 = load i32, i32* %f, align 4
  %cmp648 = icmp eq i32 %338, 94
  br i1 %cmp648, label %land.lhs.true.650, label %if.end.665

land.lhs.true.650:                                ; preds = %land.lhs.true.646
  %339 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %cmp651 = icmp ne %union.tree_node* %339, null
  br i1 %cmp651, label %land.lhs.true.653, label %if.end.665

land.lhs.true.653:                                ; preds = %land.lhs.true.650
  %340 = load %union.tree_node*, %union.tree_node** %arglist, align 8
  %common654 = bitcast %union.tree_node* %340 to %struct.tree_common*
  %chain655 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common654, i32 0, i32 0
  %341 = load %union.tree_node*, %union.tree_node** %chain655, align 8
  %cmp656 = icmp ne %union.tree_node* %341, null
  br i1 %cmp656, label %if.then.658, label %if.end.665

if.then.658:                                      ; preds = %land.lhs.true.653
  %342 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %343 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %344 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %call659 = call %struct.rtx_def* @expand_builtin_expect_jump(%union.tree_node* %342, %struct.rtx_def* %343, %struct.rtx_def* %344)
  store %struct.rtx_def* %call659, %struct.rtx_def** %seq, align 8
  %345 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %cmp660 = icmp ne %struct.rtx_def* %345, null
  br i1 %cmp660, label %if.then.662, label %if.end.664

if.then.662:                                      ; preds = %if.then.658
  %346 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call663 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %346)
  br label %if.end.741

if.end.664:                                       ; preds = %if.then.658
  br label %if.end.665

if.end.665:                                       ; preds = %if.end.664, %land.lhs.true.653, %land.lhs.true.650, %land.lhs.true.646, %land.lhs.true.640, %if.then.624
  br label %if.end.666

if.end.666:                                       ; preds = %if.end.665, %sw.bb.614
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end.666
  br label %normal

normal:                                           ; preds = %sw.default, %if.end.200, %if.end.128, %if.then.54, %if.then.36
  %347 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call667 = call %struct.rtx_def* @expand_expr(%union.tree_node* %347, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call667, %struct.rtx_def** %temp, align 8
  call void @do_pending_stack_adjust()
  call void @emit_queue()
  %348 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %349 = bitcast %struct.rtx_def* %348 to i32*
  %bf.load668 = load i32, i32* %349, align 8
  %bf.clear669 = and i32 %bf.load668, 65535
  %cmp670 = icmp eq i32 %bf.clear669, 54
  br i1 %cmp670, label %if.then.688, label %lor.lhs.false.672

lor.lhs.false.672:                                ; preds = %normal
  %350 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %351 = bitcast %struct.rtx_def* %350 to i32*
  %bf.load673 = load i32, i32* %351, align 8
  %bf.clear674 = and i32 %bf.load673, 65535
  %cmp675 = icmp eq i32 %bf.clear674, 55
  br i1 %cmp675, label %land.lhs.true.677, label %lor.lhs.false.683

land.lhs.true.677:                                ; preds = %lor.lhs.false.672
  %352 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %353 = bitcast %struct.rtx_def* %352 to i32*
  %bf.load678 = load i32, i32* %353, align 8
  %bf.lshr679 = lshr i32 %bf.load678, 16
  %bf.clear680 = and i32 %bf.lshr679, 255
  %cmp681 = icmp eq i32 %bf.clear680, 0
  br i1 %cmp681, label %if.then.688, label %lor.lhs.false.683

lor.lhs.false.683:                                ; preds = %land.lhs.true.677, %lor.lhs.false.672
  %354 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %355 = bitcast %struct.rtx_def* %354 to i32*
  %bf.load684 = load i32, i32* %355, align 8
  %bf.clear685 = and i32 %bf.load684, 65535
  %cmp686 = icmp eq i32 %bf.clear685, 67
  br i1 %cmp686, label %if.then.688, label %if.else.698

if.then.688:                                      ; preds = %lor.lhs.false.683, %land.lhs.true.677, %normal
  %356 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %357 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp689 = icmp eq %struct.rtx_def* %356, %357
  br i1 %cmp689, label %cond.true.691, label %cond.false.692

cond.true.691:                                    ; preds = %if.then.688
  %358 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  br label %cond.end.693

cond.false.692:                                   ; preds = %if.then.688
  %359 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  br label %cond.end.693

cond.end.693:                                     ; preds = %cond.false.692, %cond.true.691
  %cond694 = phi %struct.rtx_def* [ %358, %cond.true.691 ], [ %359, %cond.false.692 ]
  store %struct.rtx_def* %cond694, %struct.rtx_def** %target, align 8
  %360 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  %tobool695 = icmp ne %struct.rtx_def* %360, null
  br i1 %tobool695, label %if.then.696, label %if.end.697

if.then.696:                                      ; preds = %cond.end.693
  %361 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8
  call void @emit_jump(%struct.rtx_def* %361)
  br label %if.end.697

if.end.697:                                       ; preds = %if.then.696, %cond.end.693
  br label %if.end.737

if.else.698:                                      ; preds = %lor.lhs.false.683
  %362 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %363 = bitcast %struct.rtx_def* %362 to i32*
  %bf.load699 = load i32, i32* %363, align 8
  %bf.lshr700 = lshr i32 %bf.load699, 16
  %bf.clear701 = and i32 %bf.lshr700, 255
  %idxprom702 = sext i32 %bf.clear701 to i64
  %arrayidx703 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom702
  %364 = load i32, i32* %arrayidx703, align 4
  %cmp704 = icmp eq i32 %364, 1
  br i1 %cmp704, label %land.lhs.true.706, label %if.else.713

land.lhs.true.706:                                ; preds = %if.else.698
  %365 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %366 = bitcast %struct.rtx_def* %365 to i32*
  %bf.load707 = load i32, i32* %366, align 8
  %bf.lshr708 = lshr i32 %bf.load707, 16
  %bf.clear709 = and i32 %bf.lshr708, 255
  %call710 = call i32 @can_compare_p(i32 102, i32 %bf.clear709, i32 0)
  %tobool711 = icmp ne i32 %call710, 0
  br i1 %tobool711, label %if.else.713, label %if.then.712

if.then.712:                                      ; preds = %land.lhs.true.706
  %367 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %368 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %369 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_jump_by_parts_equality_rtx(%struct.rtx_def* %367, %struct.rtx_def* %368, %struct.rtx_def* %369)
  br label %if.end.736

if.else.713:                                      ; preds = %land.lhs.true.706, %if.else.698
  %370 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %371 = bitcast %struct.rtx_def* %370 to i32*
  %bf.load714 = load i32, i32* %371, align 8
  %bf.lshr715 = lshr i32 %bf.load714, 16
  %bf.clear716 = and i32 %bf.lshr715, 255
  %cmp717 = icmp ne i32 %bf.clear716, 0
  br i1 %cmp717, label %if.then.719, label %if.else.734

if.then.719:                                      ; preds = %if.else.713
  %372 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %373 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %374 = bitcast %struct.rtx_def* %373 to i32*
  %bf.load720 = load i32, i32* %374, align 8
  %bf.lshr721 = lshr i32 %bf.load720, 16
  %bf.clear722 = and i32 %bf.lshr721, 255
  %idxprom723 = sext i32 %bf.clear722 to i64
  %arrayidx724 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom723
  %375 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx724, align 8
  %376 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common725 = bitcast %union.tree_node* %376 to %struct.tree_common*
  %type726 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common725, i32 0, i32 1
  %377 = load %union.tree_node*, %union.tree_node** %type726, align 8
  %common727 = bitcast %union.tree_node* %377 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common727, i32 0, i32 2
  %bf.load728 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr729 = lshr i32 %bf.load728, 13
  %bf.clear730 = and i32 %bf.lshr729, 1
  %378 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %379 = bitcast %struct.rtx_def* %378 to i32*
  %bf.load731 = load i32, i32* %379, align 8
  %bf.lshr732 = lshr i32 %bf.load731, 16
  %bf.clear733 = and i32 %bf.lshr732, 255
  %380 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %381 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %372, %struct.rtx_def* %375, i32 102, i32 %bf.clear730, i32 %bf.clear733, %struct.rtx_def* null, %struct.rtx_def* %380, %struct.rtx_def* %381)
  br label %if.end.735

if.else.734:                                      ; preds = %if.else.713
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 9720, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__FUNCTION__.do_jump, i32 0, i32 0)) #6
  unreachable

if.end.735:                                       ; preds = %if.then.719
  br label %if.end.736

if.end.736:                                       ; preds = %if.end.735, %if.then.712
  br label %if.end.737

if.end.737:                                       ; preds = %if.end.736, %if.end.697
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.737, %if.end.613, %if.end.574, %if.end.543, %if.end.522, %if.end.501, %if.end.480, %if.end.459, %if.end.361, %if.end.266, %if.then.198, %sw.bb.155, %if.end.148, %if.end.137, %sw.bb.129, %if.then.126, %sw.bb.69, %sw.bb.60, %sw.bb.56, %if.end, %sw.bb
  %382 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  %tobool738 = icmp ne %struct.rtx_def* %382, null
  br i1 %tobool738, label %if.then.739, label %if.end.741

if.then.739:                                      ; preds = %sw.epilog
  call void @do_pending_stack_adjust()
  %383 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  %call740 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %383)
  br label %if.end.741

if.end.741:                                       ; preds = %if.then.662, %if.then.739, %sw.epilog
  ret void
}

declare void @expand_null_return() #1

declare void @expand_return(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @expand_increment(%union.tree_node* %exp, i32 %post, i32 %ignore) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %post.addr = alloca i32, align 4
  %ignore.addr = alloca i32, align 4
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %incremented = alloca %union.tree_node*, align 8
  %this_optab = alloca %struct.optab*, align 8
  %icode = alloca i32, align 4
  %mode = alloca i32, align 4
  %op0_is_copy = alloca i32, align 4
  %single_insn = alloca i32, align 4
  %bad_subreg = alloca i32, align 4
  %newexp = alloca %union.tree_node*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %temp297 = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store i32 %post, i32* %post.addr, align 4
  store i32 %ignore, i32* %ignore.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  store %union.tree_node* %1, %union.tree_node** %incremented, align 8
  %2 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  store %struct.optab* %2, %struct.optab** %this_optab, align 8
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type2 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %mode3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 6
  %bf.load = load i32, i32* %mode3, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  store i32 %bf.clear, i32* %mode, align 4
  store i32 0, i32* %op0_is_copy, align 4
  store i32 0, i32* %single_insn, align 4
  store i32 0, i32* %bad_subreg, align 4
  %5 = load i32, i32* %post.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %common4 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2
  %bf.load5 = load i32, i32* %code, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp = icmp eq i32 %bf.clear6, 40
  br i1 %cmp, label %if.then, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %common8 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2
  %bf.load10 = load i32, i32* %code9, align 8
  %bf.clear11 = and i32 %bf.load10, 255
  %cmp12 = icmp eq i32 %bf.clear11, 39
  br i1 %cmp12, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false.7
  %8 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %exp13 = bitcast %union.tree_node* %8 to %struct.tree_exp*
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 2
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i32 0, i64 0
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8
  %common16 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2
  %bf.load18 = load i32, i32* %code17, align 8
  %bf.clear19 = and i32 %bf.load18, 255
  %cmp20 = icmp ne i32 %bf.clear19, 41
  br i1 %cmp20, label %if.then, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %exp22 = bitcast %union.tree_node* %10 to %struct.tree_exp*
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 2
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i32 0, i64 1
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8
  %decl = bitcast %union.tree_node* %11 to %struct.tree_decl*
  %bit_field_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %12 = bitcast i48* %bit_field_flag to i64*
  %bf.load25 = load i64, i64* %12, align 8
  %bf.lshr26 = lshr i64 %bf.load25, 12
  %bf.clear27 = and i64 %bf.lshr26, 1
  %bf.cast = trunc i64 %bf.clear27 to i32
  %tobool28 = icmp ne i32 %bf.cast, 0
  br i1 %tobool28, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.21, %land.lhs.true, %lor.lhs.false, %entry
  %13 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %call = call %union.tree_node* @stabilize_reference(%union.tree_node* %13)
  store %union.tree_node* %call, %union.tree_node** %incremented, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.21, %lor.lhs.false.7
  %14 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %common29 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %code30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2
  %bf.load31 = load i32, i32* %code30, align 8
  %bf.clear32 = and i32 %bf.load31, 255
  %cmp33 = icmp eq i32 %bf.clear32, 130
  br i1 %cmp33, label %if.then.40, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %common35 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %code36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2
  %bf.load37 = load i32, i32* %code36, align 8
  %bf.clear38 = and i32 %bf.load37, 255
  %cmp39 = icmp eq i32 %bf.clear38, 129
  br i1 %cmp39, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %lor.lhs.false.34, %if.end
  %16 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %call41 = call %union.tree_node* @save_expr(%union.tree_node* %16)
  store %union.tree_node* %call41, %union.tree_node** %incremented, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.40, %lor.lhs.false.34
  %call43 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call43, %struct.rtx_def** %temp, align 8
  %17 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %call44 = call %struct.rtx_def* @expand_expr(%union.tree_node* %17, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call44, %struct.rtx_def** %op0, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load45 = load i32, i32* %19, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 63
  br i1 %cmp47, label %land.lhs.true.48, label %if.else.62

land.lhs.true.48:                                 ; preds = %if.end.42
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load49 = load i32, i32* %21, align 8
  %bf.lshr50 = lshr i32 %bf.load49, 28
  %bf.clear51 = and i32 %bf.lshr50, 1
  %tobool52 = icmp ne i32 %bf.clear51, 0
  br i1 %tobool52, label %if.then.53, label %if.else.62

if.then.53:                                       ; preds = %land.lhs.true.48
  %22 = load i32, i32* %post.addr, align 4
  %tobool54 = icmp ne i32 %22, 0
  br i1 %tobool54, label %if.then.55, label %if.else

if.then.55:                                       ; preds = %if.then.53
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call57 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %24)
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 0
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  store %struct.rtx_def* %call57, %struct.rtx_def** %rtx60, align 8
  br label %if.end.61

if.else:                                          ; preds = %if.then.53
  store i32 1, i32* %bad_subreg, align 4
  br label %if.end.61

if.end.61:                                        ; preds = %if.else, %if.then.55
  br label %if.end.81

if.else.62:                                       ; preds = %land.lhs.true.48, %if.end.42
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load63 = load i32, i32* %27, align 8
  %bf.clear64 = and i32 %bf.load63, 65535
  %cmp65 = icmp eq i32 %bf.clear64, 63
  br i1 %cmp65, label %land.lhs.true.66, label %if.end.80

land.lhs.true.66:                                 ; preds = %if.else.62
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load67 = load i32, i32* %29, align 8
  %bf.lshr68 = lshr i32 %bf.load67, 16
  %bf.clear69 = and i32 %bf.lshr68, 255
  %idxprom = sext i32 %bf.clear69 to i64
  %arrayidx70 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %30 = load i16, i16* %arrayidx70, align 2
  %conv = zext i16 %30 to i32
  %31 = load i32, i32* @target_flags, align 4
  %and = and i32 %31, 33554432
  %tobool71 = icmp ne i32 %and, 0
  %cond = select i1 %tobool71, i32 64, i32 32
  %cmp72 = icmp slt i32 %conv, %cond
  br i1 %cmp72, label %if.then.74, label %if.end.80

if.then.74:                                       ; preds = %land.lhs.true.66
  %32 = load i32, i32* %post.addr, align 4
  %tobool75 = icmp ne i32 %32, 0
  br i1 %tobool75, label %if.then.76, label %if.else.78

if.then.76:                                       ; preds = %if.then.74
  %33 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call77 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %33)
  store %struct.rtx_def* %call77, %struct.rtx_def** %op0, align 8
  br label %if.end.79

if.else.78:                                       ; preds = %if.then.74
  store i32 1, i32* %bad_subreg, align 4
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.78, %if.then.76
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %land.lhs.true.66, %if.else.62
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %if.end.61
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load82 = load i32, i32* %35, align 8
  %bf.clear83 = and i32 %bf.load82, 65535
  %cmp84 = icmp eq i32 %bf.clear83, 63
  br i1 %cmp84, label %land.rhs, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %if.end.81
  %36 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load87 = load i32, i32* %37, align 8
  %bf.clear88 = and i32 %bf.load87, 65535
  %cmp89 = icmp eq i32 %bf.clear88, 61
  br i1 %cmp89, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.lhs.false.86, %if.end.81
  %38 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call91 = call %struct.rtx_def* @get_last_insn()
  %cmp92 = icmp ne %struct.rtx_def* %38, %call91
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false.86
  %39 = phi i1 [ false, %lor.lhs.false.86 ], [ %cmp92, %land.rhs ]
  %land.ext = zext i1 %39 to i32
  store i32 %land.ext, i32* %op0_is_copy, align 4
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp94 = bitcast %union.tree_node* %40 to %struct.tree_exp*
  %operands95 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp94, i32 0, i32 2
  %arrayidx96 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands95, i32 0, i64 1
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx96, align 8
  %call97 = call %struct.rtx_def* @expand_expr(%union.tree_node* %41, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call97, %struct.rtx_def** %op1, align 8
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common98 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %code99 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 2
  %bf.load100 = load i32, i32* %code99, align 8
  %bf.clear101 = and i32 %bf.load100, 255
  %cmp102 = icmp eq i32 %bf.clear101, 131
  br i1 %cmp102, label %if.then.111, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %land.end
  %43 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common105 = bitcast %union.tree_node* %43 to %struct.tree_common*
  %code106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2
  %bf.load107 = load i32, i32* %code106, align 8
  %bf.clear108 = and i32 %bf.load107, 255
  %cmp109 = icmp eq i32 %bf.clear108, 129
  br i1 %cmp109, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %lor.lhs.false.104, %land.end
  %44 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  store %struct.optab* %44, %struct.optab** %this_optab, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.111, %lor.lhs.false.104
  %45 = load %struct.optab*, %struct.optab** %this_optab, align 8
  %46 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 2), align 8
  %cmp113 = icmp eq %struct.optab* %45, %46
  br i1 %cmp113, label %land.lhs.true.115, label %if.end.124

land.lhs.true.115:                                ; preds = %if.end.112
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %48 = bitcast %struct.rtx_def* %47 to i32*
  %bf.load116 = load i32, i32* %48, align 8
  %bf.clear117 = and i32 %bf.load116, 65535
  %cmp118 = icmp eq i32 %bf.clear117, 54
  br i1 %cmp118, label %if.then.120, label %if.end.124

if.then.120:                                      ; preds = %land.lhs.true.115
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %fld121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx122 to i64*
  %50 = load i64, i64* %rtwint, align 8
  %sub = sub nsw i64 0, %50
  %call123 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub)
  store %struct.rtx_def* %call123, %struct.rtx_def** %op1, align 8
  %51 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  store %struct.optab* %51, %struct.optab** %this_optab, align 8
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.120, %land.lhs.true.115, %if.end.112
  %52 = load i32, i32* @flag_trapv, align 4
  %tobool125 = icmp ne i32 %52, 0
  br i1 %tobool125, label %land.lhs.true.126, label %if.end.138

land.lhs.true.126:                                ; preds = %if.end.124
  %53 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common127 = bitcast %union.tree_node* %53 to %struct.tree_common*
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 1
  %54 = load %union.tree_node*, %union.tree_node** %type128, align 8
  %common129 = bitcast %union.tree_node* %54 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2
  %bf.load130 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr131 = lshr i32 %bf.load130, 13
  %bf.clear132 = and i32 %bf.lshr131, 1
  %tobool133 = icmp ne i32 %bf.clear132, 0
  br i1 %tobool133, label %if.end.138, label %if.then.134

if.then.134:                                      ; preds = %land.lhs.true.126
  %55 = load %struct.optab*, %struct.optab** %this_optab, align 8
  %56 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 0), align 8
  %cmp135 = icmp eq %struct.optab* %55, %56
  br i1 %cmp135, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.134
  %57 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 1), align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.134
  %58 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 3), align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond137 = phi %struct.optab* [ %57, %cond.true ], [ %58, %cond.false ]
  store %struct.optab* %cond137, %struct.optab** %this_optab, align 8
  br label %if.end.138

if.end.138:                                       ; preds = %cond.end, %land.lhs.true.126, %if.end.124
  %59 = load i32, i32* %post.addr, align 4
  %tobool139 = icmp ne i32 %59, 0
  br i1 %tobool139, label %if.end.169, label %if.then.140

if.then.140:                                      ; preds = %if.end.138
  %60 = load i32, i32* %mode, align 4
  %idxprom141 = sext i32 %60 to i64
  %61 = load %struct.optab*, %struct.optab** %this_optab, align 8
  %handlers = getelementptr inbounds %struct.optab, %struct.optab* %61, i32 0, i32 1
  %arrayidx142 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers, i32 0, i64 %idxprom141
  %insn_code = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx142, i32 0, i32 0
  %62 = load i32, i32* %insn_code, align 4
  store i32 %62, i32* %icode, align 4
  %63 = load i32, i32* %icode, align 4
  %cmp143 = icmp ne i32 %63, 1317
  br i1 %cmp143, label %land.lhs.true.145, label %if.end.168

land.lhs.true.145:                                ; preds = %if.then.140
  %64 = load i32, i32* %icode, align 4
  %idxprom146 = sext i32 %64 to i64
  %arrayidx147 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom146
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx147, i32 0, i32 3
  %65 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8
  %arrayidx148 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %65, i64 0
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx148, i32 0, i32 0
  %66 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %68 = load i32, i32* %mode, align 4
  %call149 = call i32 %66(%struct.rtx_def* %67, i32 %68)
  %tobool150 = icmp ne i32 %call149, 0
  br i1 %tobool150, label %land.lhs.true.151, label %if.end.168

land.lhs.true.151:                                ; preds = %land.lhs.true.145
  %69 = load i32, i32* %icode, align 4
  %idxprom152 = sext i32 %69 to i64
  %arrayidx153 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom152
  %operand154 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx153, i32 0, i32 3
  %70 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand154, align 8
  %arrayidx155 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %70, i64 1
  %predicate156 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx155, i32 0, i32 0
  %71 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate156, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %73 = load i32, i32* %mode, align 4
  %call157 = call i32 %71(%struct.rtx_def* %72, i32 %73)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %land.lhs.true.159, label %if.end.168

land.lhs.true.159:                                ; preds = %land.lhs.true.151
  %74 = load i32, i32* %icode, align 4
  %idxprom160 = sext i32 %74 to i64
  %arrayidx161 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom160
  %operand162 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx161, i32 0, i32 3
  %75 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand162, align 8
  %arrayidx163 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %75, i64 2
  %predicate164 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx163, i32 0, i32 0
  %76 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate164, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %78 = load i32, i32* %mode, align 4
  %call165 = call i32 %76(%struct.rtx_def* %77, i32 %78)
  %tobool166 = icmp ne i32 %call165, 0
  br i1 %tobool166, label %if.then.167, label %if.end.168

if.then.167:                                      ; preds = %land.lhs.true.159
  store i32 1, i32* %single_insn, align 4
  br label %if.end.168

if.end.168:                                       ; preds = %if.then.167, %land.lhs.true.159, %land.lhs.true.151, %land.lhs.true.145, %if.then.140
  br label %if.end.169

if.end.169:                                       ; preds = %if.end.168, %if.end.138
  %79 = load i32, i32* %op0_is_copy, align 4
  %tobool170 = icmp ne i32 %79, 0
  br i1 %tobool170, label %if.then.177, label %lor.lhs.false.171

lor.lhs.false.171:                                ; preds = %if.end.169
  %80 = load i32, i32* %post.addr, align 4
  %tobool172 = icmp ne i32 %80, 0
  br i1 %tobool172, label %lor.lhs.false.175, label %land.lhs.true.173

land.lhs.true.173:                                ; preds = %lor.lhs.false.171
  %81 = load i32, i32* %single_insn, align 4
  %tobool174 = icmp ne i32 %81, 0
  br i1 %tobool174, label %lor.lhs.false.175, label %if.then.177

lor.lhs.false.175:                                ; preds = %land.lhs.true.173, %lor.lhs.false.171
  %82 = load i32, i32* %bad_subreg, align 4
  %tobool176 = icmp ne i32 %82, 0
  br i1 %tobool176, label %if.then.177, label %if.end.228

if.then.177:                                      ; preds = %lor.lhs.false.175, %land.lhs.true.173, %if.end.169
  %83 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common178 = bitcast %union.tree_node* %83 to %struct.tree_common*
  %code179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 2
  %bf.load180 = load i32, i32* %code179, align 8
  %bf.clear181 = and i32 %bf.load180, 255
  %cmp182 = icmp eq i32 %bf.clear181, 131
  br i1 %cmp182, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.177
  %84 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common184 = bitcast %union.tree_node* %84 to %struct.tree_common*
  %code185 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common184, i32 0, i32 2
  %bf.load186 = load i32, i32* %code185, align 8
  %bf.clear187 = and i32 %bf.load186, 255
  %cmp188 = icmp eq i32 %bf.clear187, 129
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.177
  %85 = phi i1 [ true, %if.then.177 ], [ %cmp188, %lor.rhs ]
  %cond190 = select i1 %85, i32 60, i32 59
  %86 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common191 = bitcast %union.tree_node* %86 to %struct.tree_common*
  %type192 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common191, i32 0, i32 1
  %87 = load %union.tree_node*, %union.tree_node** %type192, align 8
  %88 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %89 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp193 = bitcast %union.tree_node* %89 to %struct.tree_exp*
  %operands194 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp193, i32 0, i32 2
  %arrayidx195 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands194, i32 0, i64 1
  %90 = load %union.tree_node*, %union.tree_node** %arrayidx195, align 8
  %call196 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 %cond190, %union.tree_node* %87, %union.tree_node* %88, %union.tree_node* %90)
  store %union.tree_node* %call196, %union.tree_node** %newexp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %lor.end
  %91 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %common197 = bitcast %union.tree_node* %91 to %struct.tree_common*
  %code198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common197, i32 0, i32 2
  %bf.load199 = load i32, i32* %code198, align 8
  %bf.clear200 = and i32 %bf.load199, 255
  %cmp201 = icmp eq i32 %bf.clear200, 115
  br i1 %cmp201, label %lor.end.210, label %lor.rhs.203

lor.rhs.203:                                      ; preds = %while.cond
  %92 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %common204 = bitcast %union.tree_node* %92 to %struct.tree_common*
  %code205 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common204, i32 0, i32 2
  %bf.load206 = load i32, i32* %code205, align 8
  %bf.clear207 = and i32 %bf.load206, 255
  %cmp208 = icmp eq i32 %bf.clear207, 114
  br label %lor.end.210

lor.end.210:                                      ; preds = %lor.rhs.203, %while.cond
  %93 = phi i1 [ true, %while.cond ], [ %cmp208, %lor.rhs.203 ]
  br i1 %93, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end.210
  %94 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %common211 = bitcast %union.tree_node* %94 to %struct.tree_common*
  %type212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 1
  %95 = load %union.tree_node*, %union.tree_node** %type212, align 8
  %96 = load %union.tree_node*, %union.tree_node** %newexp, align 8
  %call213 = call %union.tree_node* @convert(%union.tree_node* %95, %union.tree_node* %96)
  store %union.tree_node* %call213, %union.tree_node** %newexp, align 8
  %97 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %exp214 = bitcast %union.tree_node* %97 to %struct.tree_exp*
  %operands215 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp214, i32 0, i32 2
  %arrayidx216 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands215, i32 0, i64 0
  %98 = load %union.tree_node*, %union.tree_node** %arrayidx216, align 8
  store %union.tree_node* %98, %union.tree_node** %incremented, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end.210
  %99 = load %union.tree_node*, %union.tree_node** %incremented, align 8
  %100 = load %union.tree_node*, %union.tree_node** %newexp, align 8
  %101 = load i32, i32* %post.addr, align 4
  %tobool217 = icmp ne i32 %101, 0
  br i1 %tobool217, label %land.end.220, label %land.rhs.218

land.rhs.218:                                     ; preds = %while.end
  %102 = load i32, i32* %ignore.addr, align 4
  %tobool219 = icmp ne i32 %102, 0
  %lnot = xor i1 %tobool219, true
  br label %land.end.220

land.end.220:                                     ; preds = %land.rhs.218, %while.end
  %103 = phi i1 [ false, %while.end ], [ %lnot, %land.rhs.218 ]
  %land.ext221 = zext i1 %103 to i32
  %call222 = call %struct.rtx_def* @expand_assignment(%union.tree_node* %99, %union.tree_node* %100, i32 %land.ext221, i32 0)
  store %struct.rtx_def* %call222, %struct.rtx_def** %temp, align 8
  %104 = load i32, i32* %post.addr, align 4
  %tobool223 = icmp ne i32 %104, 0
  br i1 %tobool223, label %cond.true.224, label %cond.false.225

cond.true.224:                                    ; preds = %land.end.220
  %105 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  br label %cond.end.226

cond.false.225:                                   ; preds = %land.end.220
  %106 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  br label %cond.end.226

cond.end.226:                                     ; preds = %cond.false.225, %cond.true.224
  %cond227 = phi %struct.rtx_def* [ %105, %cond.true.224 ], [ %106, %cond.false.225 ]
  store %struct.rtx_def* %cond227, %struct.rtx_def** %retval
  br label %return

if.end.228:                                       ; preds = %lor.lhs.false.175
  %107 = load i32, i32* %post.addr, align 4
  %tobool229 = icmp ne i32 %107, 0
  br i1 %tobool229, label %if.then.230, label %if.end.321

if.then.230:                                      ; preds = %if.end.228
  %108 = load i32, i32* %mode, align 4
  %idxprom231 = sext i32 %108 to i64
  %109 = load %struct.optab*, %struct.optab** %this_optab, align 8
  %handlers232 = getelementptr inbounds %struct.optab, %struct.optab* %109, i32 0, i32 1
  %arrayidx233 = getelementptr inbounds [59 x %struct.anon.3], [59 x %struct.anon.3]* %handlers232, i32 0, i64 %idxprom231
  %insn_code234 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %arrayidx233, i32 0, i32 0
  %110 = load i32, i32* %insn_code234, align 4
  store i32 %110, i32* %icode, align 4
  %111 = load i32, i32* %icode, align 4
  %cmp235 = icmp ne i32 %111, 1317
  br i1 %cmp235, label %land.lhs.true.237, label %if.end.268

land.lhs.true.237:                                ; preds = %if.then.230
  %112 = load i32, i32* %icode, align 4
  %idxprom238 = sext i32 %112 to i64
  %arrayidx239 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom238
  %operand240 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx239, i32 0, i32 3
  %113 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand240, align 8
  %arrayidx241 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %113, i64 0
  %predicate242 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx241, i32 0, i32 0
  %114 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate242, align 8
  %115 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %116 = load i32, i32* %mode, align 4
  %call243 = call i32 %114(%struct.rtx_def* %115, i32 %116)
  %tobool244 = icmp ne i32 %call243, 0
  br i1 %tobool244, label %land.lhs.true.245, label %if.end.268

land.lhs.true.245:                                ; preds = %land.lhs.true.237
  %117 = load i32, i32* %icode, align 4
  %idxprom246 = sext i32 %117 to i64
  %arrayidx247 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom246
  %operand248 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx247, i32 0, i32 3
  %118 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand248, align 8
  %arrayidx249 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %118, i64 1
  %predicate250 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx249, i32 0, i32 0
  %119 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate250, align 8
  %120 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %121 = load i32, i32* %mode, align 4
  %call251 = call i32 %119(%struct.rtx_def* %120, i32 %121)
  %tobool252 = icmp ne i32 %call251, 0
  br i1 %tobool252, label %if.then.253, label %if.end.268

if.then.253:                                      ; preds = %land.lhs.true.245
  %122 = load i32, i32* %icode, align 4
  %idxprom254 = sext i32 %122 to i64
  %arrayidx255 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom254
  %operand256 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx255, i32 0, i32 3
  %123 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand256, align 8
  %arrayidx257 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %123, i64 2
  %predicate258 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx257, i32 0, i32 0
  %124 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate258, align 8
  %125 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %126 = load i32, i32* %mode, align 4
  %call259 = call i32 %124(%struct.rtx_def* %125, i32 %126)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end.263, label %if.then.261

if.then.261:                                      ; preds = %if.then.253
  %127 = load i32, i32* %mode, align 4
  %128 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call262 = call %struct.rtx_def* @force_reg(i32 %127, %struct.rtx_def* %128)
  store %struct.rtx_def* %call262, %struct.rtx_def** %op1, align 8
  br label %if.end.263

if.end.263:                                       ; preds = %if.then.261, %if.then.253
  %129 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %130 = load i32, i32* %icode, align 4
  %idxprom264 = sext i32 %130 to i64
  %arrayidx265 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom264
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx265, i32 0, i32 2
  %131 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8
  %132 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call266 = call %struct.rtx_def* (%struct.rtx_def*, ...) %131(%struct.rtx_def* %132, %struct.rtx_def* %133, %struct.rtx_def* %134)
  %call267 = call %struct.rtx_def* @enqueue_insn(%struct.rtx_def* %129, %struct.rtx_def* %call266)
  store %struct.rtx_def* %call267, %struct.rtx_def** %retval
  br label %return

if.end.268:                                       ; preds = %land.lhs.true.245, %land.lhs.true.237, %if.then.230
  %135 = load i32, i32* %icode, align 4
  %cmp269 = icmp ne i32 %135, 1317
  br i1 %cmp269, label %land.lhs.true.271, label %if.end.320

land.lhs.true.271:                                ; preds = %if.end.268
  %136 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %137 = bitcast %struct.rtx_def* %136 to i32*
  %bf.load272 = load i32, i32* %137, align 8
  %bf.clear273 = and i32 %bf.load272, 65535
  %cmp274 = icmp eq i32 %bf.clear273, 66
  br i1 %cmp274, label %if.then.276, label %if.end.320

if.then.276:                                      ; preds = %land.lhs.true.271
  %138 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld277 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1
  %arrayidx278 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld277, i32 0, i64 0
  %rtx279 = bitcast %union.rtunion_def* %arrayidx278 to %struct.rtx_def**
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rtx279, align 8
  %140 = load i32, i32* %mode, align 4
  %call280 = call i32 @general_operand(%struct.rtx_def* %139, i32 %140)
  %tobool281 = icmp ne i32 %call280, 0
  br i1 %tobool281, label %cond.true.282, label %cond.false.290

cond.true.282:                                    ; preds = %if.then.276
  %141 = load i32, i32* @target_flags, align 4
  %and283 = and i32 %141, 33554432
  %tobool284 = icmp ne i32 %and283, 0
  %cond285 = select i1 %tobool284, i32 5, i32 4
  %142 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld286 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1
  %arrayidx287 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld286, i32 0, i64 0
  %rtx288 = bitcast %union.rtunion_def* %arrayidx287 to %struct.rtx_def**
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rtx288, align 8
  %call289 = call %struct.rtx_def* @force_reg(i32 %cond285, %struct.rtx_def* %143)
  br label %cond.end.295

cond.false.290:                                   ; preds = %if.then.276
  %144 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %fld291 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1
  %arrayidx292 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld291, i32 0, i64 0
  %rtx293 = bitcast %union.rtunion_def* %arrayidx292 to %struct.rtx_def**
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rtx293, align 8
  %call294 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %145)
  br label %cond.end.295

cond.end.295:                                     ; preds = %cond.false.290, %cond.true.282
  %cond296 = phi %struct.rtx_def* [ %call289, %cond.true.282 ], [ %call294, %cond.false.290 ]
  store %struct.rtx_def* %cond296, %struct.rtx_def** %addr, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %147 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call298 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %146, %struct.rtx_def* %147)
  store %struct.rtx_def* %call298, %struct.rtx_def** %op0, align 8
  %148 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %149 = bitcast %struct.rtx_def* %148 to i32*
  %bf.load299 = load i32, i32* %149, align 8
  %bf.lshr300 = lshr i32 %bf.load299, 16
  %bf.clear301 = and i32 %bf.lshr300, 255
  %150 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call302 = call %struct.rtx_def* @force_reg(i32 %bf.clear301, %struct.rtx_def* %150)
  store %struct.rtx_def* %call302, %struct.rtx_def** %temp297, align 8
  %151 = load i32, i32* %icode, align 4
  %idxprom303 = sext i32 %151 to i64
  %arrayidx304 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom303
  %operand305 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx304, i32 0, i32 3
  %152 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand305, align 8
  %arrayidx306 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %152, i64 2
  %predicate307 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx306, i32 0, i32 0
  %153 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate307, align 8
  %154 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %155 = load i32, i32* %mode, align 4
  %call308 = call i32 %153(%struct.rtx_def* %154, i32 %155)
  %tobool309 = icmp ne i32 %call308, 0
  br i1 %tobool309, label %if.end.312, label %if.then.310

if.then.310:                                      ; preds = %cond.end.295
  %156 = load i32, i32* %mode, align 4
  %157 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call311 = call %struct.rtx_def* @force_reg(i32 %156, %struct.rtx_def* %157)
  store %struct.rtx_def* %call311, %struct.rtx_def** %op1, align 8
  br label %if.end.312

if.end.312:                                       ; preds = %if.then.310, %cond.end.295
  %158 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %159 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %160 = load %struct.rtx_def*, %struct.rtx_def** %temp297, align 8
  %call313 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %159, %struct.rtx_def* %160)
  %call314 = call %struct.rtx_def* @enqueue_insn(%struct.rtx_def* %158, %struct.rtx_def* %call313)
  %161 = load %struct.rtx_def*, %struct.rtx_def** %temp297, align 8
  %162 = load i32, i32* %icode, align 4
  %idxprom315 = sext i32 %162 to i64
  %arrayidx316 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i32 0, i64 %idxprom315
  %genfun317 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx316, i32 0, i32 2
  %163 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun317, align 8
  %164 = load %struct.rtx_def*, %struct.rtx_def** %temp297, align 8
  %165 = load %struct.rtx_def*, %struct.rtx_def** %temp297, align 8
  %166 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call318 = call %struct.rtx_def* (%struct.rtx_def*, ...) %163(%struct.rtx_def* %164, %struct.rtx_def* %165, %struct.rtx_def* %166)
  %call319 = call %struct.rtx_def* @enqueue_insn(%struct.rtx_def* %161, %struct.rtx_def* %call318)
  store %struct.rtx_def* %call319, %struct.rtx_def** %result, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  store %struct.rtx_def* %167, %struct.rtx_def** %retval
  br label %return

if.end.320:                                       ; preds = %land.lhs.true.271, %if.end.268
  br label %if.end.321

if.end.321:                                       ; preds = %if.end.320, %if.end.228
  %168 = load i32, i32* %post.addr, align 4
  %tobool322 = icmp ne i32 %168, 0
  br i1 %tobool322, label %if.then.323, label %if.else.325

if.then.323:                                      ; preds = %if.end.321
  %169 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call324 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %169)
  store %struct.rtx_def* %call324, %struct.rtx_def** %value, align 8
  store %struct.rtx_def* %call324, %struct.rtx_def** %temp, align 8
  br label %if.end.327

if.else.325:                                      ; preds = %if.end.321
  %170 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  store %struct.rtx_def* %170, %struct.rtx_def** %value, align 8
  %call326 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %170)
  store %struct.rtx_def* %call326, %struct.rtx_def** %temp, align 8
  br label %if.end.327

if.end.327:                                       ; preds = %if.else.325, %if.then.323
  %171 = load i32, i32* %mode, align 4
  %172 = load %struct.optab*, %struct.optab** %this_optab, align 8
  %173 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %174 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %176 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common328 = bitcast %union.tree_node* %176 to %struct.tree_common*
  %type329 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common328, i32 0, i32 1
  %177 = load %union.tree_node*, %union.tree_node** %type329, align 8
  %common330 = bitcast %union.tree_node* %177 to %struct.tree_common*
  %unsigned_flag331 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common330, i32 0, i32 2
  %bf.load332 = load i32, i32* %unsigned_flag331, align 8
  %bf.lshr333 = lshr i32 %bf.load332, 13
  %bf.clear334 = and i32 %bf.lshr333, 1
  %call335 = call %struct.rtx_def* @expand_binop(i32 %171, %struct.optab* %172, %struct.rtx_def* %173, %struct.rtx_def* %174, %struct.rtx_def* %175, i32 %bf.clear334, i32 3)
  store %struct.rtx_def* %call335, %struct.rtx_def** %op1, align 8
  %178 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %cmp336 = icmp ne %struct.rtx_def* %178, %179
  br i1 %cmp336, label %if.then.338, label %if.end.340

if.then.338:                                      ; preds = %if.end.327
  %180 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call339 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %180, %struct.rtx_def* %181)
  br label %if.end.340

if.end.340:                                       ; preds = %if.then.338, %if.end.327
  %182 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  store %struct.rtx_def* %182, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.340, %if.end.312, %if.end.263, %cond.end.226
  %183 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %183
}

declare %struct.rtx_def* @trampoline_address(%union.tree_node*) #1

declare void @mark_temp_addr_taken(%struct.rtx_def*) #1

declare void @expand_eh_region_start() #1

declare void @expand_eh_region_end_cleanup(%union.tree_node*) #1

declare void @emit_indirect_jump(%struct.rtx_def*) #1

declare %struct.rtx_def* @expand_builtin_va_arg(%union.tree_node*, %union.tree_node*) #1

declare %struct.rtx_def* @get_exception_pointer(%struct.function*) #1

; Function Attrs: nounwind uwtable
define void @init_pending_stack_adjust() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 2
  %1 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_pending_stack_adjust = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1, i32 0, i32 0
  store i32 0, i32* %x_pending_stack_adjust, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @clear_pending_stack_adjust() #0 {
entry:
  %0 = load i32, i32* @optimize, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_omit_frame_pointer, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true.2

lor.lhs.false:                                    ; preds = %land.lhs.true
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 56
  %3 = bitcast i24* %calls_alloca to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load, 6
  %bf.clear = and i32 %bf.lshr, 1
  %tobool1 = icmp ne i32 %bf.clear, 0
  br i1 %tobool1, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %inline_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %5 = bitcast i48* %inline_flag to i64*
  %bf.load3 = load i64, i64* %5, align 8
  %bf.lshr4 = lshr i64 %bf.load3, 11
  %bf.clear5 = and i64 %bf.lshr4, 1
  %bf.cast = trunc i64 %bf.clear5 to i32
  %tobool6 = icmp ne i32 %bf.cast, 0
  br i1 %tobool6, label %land.lhs.true.7, label %land.lhs.true.9

land.lhs.true.7:                                  ; preds = %land.lhs.true.2
  %6 = load i32, i32* @flag_no_inline, align 4
  %tobool8 = icmp ne i32 %6, 0
  br i1 %tobool8, label %land.lhs.true.9, label %if.end

land.lhs.true.9:                                  ; preds = %land.lhs.true.7, %land.lhs.true.2
  %7 = load i32, i32* @flag_inline_functions, align 4
  %tobool10 = icmp ne i32 %7, 0
  br i1 %tobool10, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.9
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 2
  %9 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_pending_stack_adjust = getelementptr inbounds %struct.expr_status, %struct.expr_status* %9, i32 0, i32 0
  %10 = load i32, i32* %x_pending_stack_adjust, align 4
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %expr11 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 2
  %12 = load %struct.expr_status*, %struct.expr_status** %expr11, align 8
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status, %struct.expr_status* %12, i32 0, i32 2
  %13 = load i32, i32* %x_stack_pointer_delta, align 4
  %sub = sub nsw i32 %13, %10
  store i32 %sub, i32* %x_stack_pointer_delta, align 4
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %expr12 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 2
  %15 = load %struct.expr_status*, %struct.expr_status** %expr12, align 8
  %x_pending_stack_adjust13 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %15, i32 0, i32 0
  store i32 0, i32* %x_pending_stack_adjust13, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.9, %land.lhs.true.7, %lor.lhs.false, %entry
  ret void
}

declare void @adjust_stack(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal void @do_compare_and_jump(%union.tree_node* %exp, i32 %signed_code, i32 %unsigned_code, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %signed_code.addr = alloca i32, align 4
  %unsigned_code.addr = alloca i32, align 4
  %if_false_label.addr = alloca %struct.rtx_def*, align 8
  %if_true_label.addr = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %type = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %code = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store i32 %signed_code, i32* %signed_code.addr, align 4
  store i32 %unsigned_code, i32* %unsigned_code.addr, align 4
  store %struct.rtx_def* %if_false_label, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %if_true_label, %struct.rtx_def** %if_true_label.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %1, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2 = bitcast %union.tree_node* %2 to %struct.tree_exp*
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 2
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i32 0, i64 0
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code5, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6 = bitcast %union.tree_node* %4 to %struct.tree_exp*
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 2
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i32 0, i64 1
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @expand_expr(%union.tree_node* %5, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call9, %struct.rtx_def** %op1, align 8
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp10 = bitcast %union.tree_node* %6 to %struct.tree_exp*
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 2
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i32 0, i64 1
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8
  %common13 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load15 = load i32, i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp eq i32 %bf.clear16, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end
  br label %return

if.end.19:                                        ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp20 = bitcast %union.tree_node* %8 to %struct.tree_exp*
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 2
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i32 0, i64 0
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8
  %common23 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type24, align 8
  store %union.tree_node* %10, %union.tree_node** %type, align 8
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type25 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %mode26 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 6
  %bf.load27 = load i32, i32* %mode26, align 4
  %bf.lshr = lshr i32 %bf.load27, 9
  %bf.clear28 = and i32 %bf.lshr, 127
  store i32 %bf.clear28, i32* %mode, align 4
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp29 = bitcast %union.tree_node* %12 to %struct.tree_exp*
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 2
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i32 0, i64 0
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8
  %common32 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %code33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2
  %bf.load34 = load i32, i32* %code33, align 8
  %bf.clear35 = and i32 %bf.load34, 255
  %cmp36 = icmp eq i32 %bf.clear35, 25
  br i1 %cmp36, label %land.lhs.true, label %if.end.72

land.lhs.true:                                    ; preds = %if.end.19
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp37 = bitcast %union.tree_node* %14 to %struct.tree_exp*
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 2
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i32 0, i64 1
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8
  %common40 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %code41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2
  %bf.load42 = load i32, i32* %code41, align 8
  %bf.clear43 = and i32 %bf.load42, 255
  %cmp44 = icmp ne i32 %bf.clear43, 25
  br i1 %cmp44, label %if.then.61, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %16 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx45 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %17 = load i16, i16* %arrayidx45, align 2
  %conv = zext i16 %17 to i32
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp46 = bitcast %union.tree_node* %18 to %struct.tree_exp*
  %operands47 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp46, i32 0, i32 2
  %arrayidx48 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands47, i32 0, i64 1
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8
  %common49 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 1
  %20 = load %union.tree_node*, %union.tree_node** %type50, align 8
  %type51 = bitcast %union.tree_node* %20 to %struct.tree_type*
  %mode52 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type51, i32 0, i32 6
  %bf.load53 = load i32, i32* %mode52, align 4
  %bf.lshr54 = lshr i32 %bf.load53, 9
  %bf.clear55 = and i32 %bf.lshr54, 127
  %idxprom56 = sext i32 %bf.clear55 to i64
  %arrayidx57 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom56
  %21 = load i16, i16* %arrayidx57, align 2
  %conv58 = zext i16 %21 to i32
  %cmp59 = icmp sgt i32 %conv, %conv58
  br i1 %cmp59, label %if.then.61, label %if.end.72

if.then.61:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %22 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp62 = bitcast %union.tree_node* %22 to %struct.tree_exp*
  %operands63 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp62, i32 0, i32 2
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands63, i32 0, i64 1
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8
  %common65 = bitcast %union.tree_node* %23 to %struct.tree_common*
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 1
  %24 = load %union.tree_node*, %union.tree_node** %type66, align 8
  store %union.tree_node* %24, %union.tree_node** %type, align 8
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type67 = bitcast %union.tree_node* %25 to %struct.tree_type*
  %mode68 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type67, i32 0, i32 6
  %bf.load69 = load i32, i32* %mode68, align 4
  %bf.lshr70 = lshr i32 %bf.load69, 9
  %bf.clear71 = and i32 %bf.lshr70, 127
  store i32 %bf.clear71, i32* %mode, align 4
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.61, %lor.lhs.false, %if.end.19
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common73 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2
  %bf.load74 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr75 = lshr i32 %bf.load74, 13
  %bf.clear76 = and i32 %bf.lshr75, 1
  store i32 %bf.clear76, i32* %unsignedp, align 4
  %27 = load i32, i32* %unsignedp, align 4
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.72
  %28 = load i32, i32* %unsigned_code.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.72
  %29 = load i32, i32* %signed_code.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %28, %cond.true ], [ %29, %cond.false ]
  store i32 %cond, i32* %code, align 4
  call void @emit_queue()
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %32 = load i32, i32* %code, align 4
  %33 = load i32, i32* %unsignedp, align 4
  %34 = load i32, i32* %mode, align 4
  %35 = load i32, i32* %mode, align 4
  %cmp77 = icmp eq i32 %35, 51
  br i1 %cmp77, label %cond.true.79, label %cond.false.84

cond.true.79:                                     ; preds = %cond.end
  %36 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp80 = bitcast %union.tree_node* %36 to %struct.tree_exp*
  %operands81 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp80, i32 0, i32 2
  %arrayidx82 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands81, i32 0, i64 0
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx82, align 8
  %call83 = call %struct.rtx_def* @expr_size(%union.tree_node* %37)
  br label %cond.end.85

cond.false.84:                                    ; preds = %cond.end
  br label %cond.end.85

cond.end.85:                                      ; preds = %cond.false.84, %cond.true.79
  %cond86 = phi %struct.rtx_def* [ %call83, %cond.true.79 ], [ null, %cond.false.84 ]
  %38 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %30, %struct.rtx_def* %31, i32 %32, i32 %33, i32 %34, %struct.rtx_def* %cond86, %struct.rtx_def* %38, %struct.rtx_def* %39)
  br label %return

return:                                           ; preds = %cond.end.85, %if.then.18, %if.then
  ret void
}

declare i32 @tree_floor_log2(%union.tree_node*) #1

declare %union.tree_node* @type_for_size(i32, i32) #1

declare %union.tree_node* @save_expr(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal void @do_jump_by_parts_equality(%union.tree_node* %exp, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %if_false_label.addr = alloca %struct.rtx_def*, align 8
  %if_true_label.addr = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %nwords = alloca i32, align 4
  %i = alloca i32, align 4
  %drop_through_label = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %struct.rtx_def* %if_false_label, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %if_true_label, %struct.rtx_def** %if_true_label.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %1, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp2 = bitcast %union.tree_node* %2 to %struct.tree_exp*
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 2
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i32 0, i64 1
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8
  %call5 = call %struct.rtx_def* @expand_expr(%union.tree_node* %3, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call5, %struct.rtx_def** %op1, align 8
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp6 = bitcast %union.tree_node* %4 to %struct.tree_exp*
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 2
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i32 0, i64 0
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type9 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %mode10 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 6
  %bf.load = load i32, i32* %mode10, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  store i32 %bf.clear, i32* %mode, align 4
  %7 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx11 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx11, align 1
  %conv = zext i8 %8 to i32
  %9 = load i32, i32* @target_flags, align 4
  %and = and i32 %9, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 8, i32 4
  %div = sdiv i32 %conv, %cond
  store i32 %div, i32* %nwords, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %drop_through_label, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool12 = icmp ne %struct.rtx_def* %10, null
  br i1 %tobool12, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call13 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call13, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %call13, %struct.rtx_def** %drop_through_label, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %nwords, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %mode, align 4
  %call15 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %13, i32 %14, i32 %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %mode, align 4
  %call16 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %16, i32 %17, i32 %18)
  %19 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common17 = bitcast %union.tree_node* %19 to %struct.tree_common*
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 1
  %20 = load %union.tree_node*, %union.tree_node** %type18, align 8
  %common19 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2
  %bf.load20 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr21 = lshr i32 %bf.load20, 13
  %bf.clear22 = and i32 %bf.lshr21, 1
  %21 = load i32, i32* @word_mode, align 4
  %22 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %call15, %struct.rtx_def* %call16, i32 103, i32 %bf.clear22, i32 %21, %struct.rtx_def* null, %struct.rtx_def* %22, %struct.rtx_def* null)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool23 = icmp ne %struct.rtx_def* %24, null
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %for.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %25)
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %for.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  %tobool26 = icmp ne %struct.rtx_def* %26, null
  br i1 %tobool26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %if.end.25
  %27 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  %call28 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %27)
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %if.end.25
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @do_jump_by_parts_greater(%union.tree_node* %exp, i32 %swap, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %swap.addr = alloca i32, align 4
  %if_false_label.addr = alloca %struct.rtx_def*, align 8
  %if_true_label.addr = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store i32 %swap, i32* %swap.addr, align 4
  store %struct.rtx_def* %if_false_label, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %if_true_label, %struct.rtx_def** %if_true_label.addr, align 8
  %0 = load i32, i32* %swap.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %1 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 %idxprom
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %2, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %op0, align 8
  %3 = load i32, i32* %swap.addr, align 4
  %tobool = icmp ne i32 %3, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %idxprom2 = sext i32 %lnot.ext to i64
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp3 = bitcast %union.tree_node* %4 to %struct.tree_exp*
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 2
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i32 0, i64 %idxprom2
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @expand_expr(%union.tree_node* %5, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call6, %struct.rtx_def** %op1, align 8
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp7 = bitcast %union.tree_node* %6 to %struct.tree_exp*
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 2
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i32 0, i64 0
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type10 = bitcast %union.tree_node* %8 to %struct.tree_type*
  %mode11 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 6
  %bf.load = load i32, i32* %mode11, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  store i32 %bf.clear, i32* %mode, align 4
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp12 = bitcast %union.tree_node* %9 to %struct.tree_exp*
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 2
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i32 0, i64 0
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8
  %common15 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %type16, align 8
  %common17 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2
  %bf.load18 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr19 = lshr i32 %bf.load18, 13
  %bf.clear20 = and i32 %bf.lshr19, 1
  store i32 %bf.clear20, i32* %unsignedp, align 4
  %12 = load i32, i32* %mode, align 4
  %13 = load i32, i32* %unsignedp, align 4
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_jump_by_parts_greater_rtx(i32 %12, i32 %13, %struct.rtx_def* %14, %struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %17)
  ret void
}

declare %struct.rtx_def* @expand_builtin_expect_jump(%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @do_jump_by_parts_equality_rtx(%struct.rtx_def* %op0, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %op0.addr = alloca %struct.rtx_def*, align 8
  %if_false_label.addr = alloca %struct.rtx_def*, align 8
  %if_true_label.addr = alloca %struct.rtx_def*, align 8
  %nwords = alloca i32, align 4
  %part = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %drop_through_label = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %if_false_label, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %if_true_label, %struct.rtx_def** %if_true_label.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 8, i32 4
  %div = sdiv i32 %conv, %cond
  store i32 %div, i32* %nwords, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %drop_through_label, align 8
  %4 = load i32, i32* @word_mode, align 4
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %4)
  store %struct.rtx_def* %call, %struct.rtx_def** %part, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load1 = load i32, i32* %8, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  %call4 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %6, i32 0, i32 %bf.clear3)
  %call5 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %5, %struct.rtx_def* %call4)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %nwords, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8
  %cmp7 = icmp ne %struct.rtx_def* %11, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %12 = phi i1 [ false, %for.cond ], [ %cmp7, %land.rhs ]
  br i1 %12, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %13 = load i32, i32* @word_mode, align 4
  %14 = load %struct.optab*, %struct.optab** getelementptr inbounds ([49 x %struct.optab*], [49 x %struct.optab*]* @optab_table, i32 0, i64 19), align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %17 = load i32, i32* %i, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load9 = load i32, i32* %19, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 16
  %bf.clear11 = and i32 %bf.lshr10, 255
  %call12 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %16, i32 %17, i32 %bf.clear11)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8
  %call13 = call %struct.rtx_def* @expand_binop(i32 %13, %struct.optab* %14, %struct.rtx_def* %15, %struct.rtx_def* %call12, %struct.rtx_def* %20, i32 1, i32 2)
  store %struct.rtx_def* %call13, %struct.rtx_def** %part, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8
  %cmp14 = icmp ne %struct.rtx_def* %22, null
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %25 = load i32, i32* @word_mode, align 4
  %26 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %23, %struct.rtx_def* %24, i32 103, i32 1, i32 %25, %struct.rtx_def* null, %struct.rtx_def* %26, %struct.rtx_def* %27)
  br label %if.end.37

if.end:                                           ; preds = %for.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  %tobool16 = icmp ne %struct.rtx_def* %28, null
  br i1 %tobool16, label %if.end.19, label %if.then.17

if.then.17:                                       ; preds = %if.end
  %call18 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call18, %struct.rtx_def** %if_false_label.addr, align 8
  store %struct.rtx_def* %call18, %struct.rtx_def** %drop_through_label, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.17, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc.28, %if.end.19
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %nwords, align 4
  %cmp21 = icmp slt i32 %29, %30
  br i1 %cmp21, label %for.body.23, label %for.end.30

for.body.23:                                      ; preds = %for.cond.20
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %32 = load i32, i32* %i, align 4
  %33 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load24 = load i32, i32* %34, align 8
  %bf.lshr25 = lshr i32 %bf.load24, 16
  %bf.clear26 = and i32 %bf.lshr25, 255
  %call27 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %31, i32 %32, i32 %bf.clear26)
  %35 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %36 = load i32, i32* @word_mode, align 4
  %37 = load %struct.rtx_def*, %struct.rtx_def** %if_false_label.addr, align 8
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %call27, %struct.rtx_def* %35, i32 103, i32 1, i32 %36, %struct.rtx_def* null, %struct.rtx_def* %37, %struct.rtx_def* null)
  br label %for.inc.28

for.inc.28:                                       ; preds = %for.body.23
  %38 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %38, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond.20

for.end.30:                                       ; preds = %for.cond.20
  %39 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  %tobool31 = icmp ne %struct.rtx_def* %39, null
  br i1 %tobool31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %for.end.30
  %40 = load %struct.rtx_def*, %struct.rtx_def** %if_true_label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %40)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %for.end.30
  %41 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  %tobool34 = icmp ne %struct.rtx_def* %41, null
  br i1 %tobool34, label %if.then.35, label %if.end.37

if.then.35:                                       ; preds = %if.end.33
  %42 = load %struct.rtx_def*, %struct.rtx_def** %drop_through_label, align 8
  %call36 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %42)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then, %if.then.35, %if.end.33
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @compare_from_rtx(%struct.rtx_def* %op0, %struct.rtx_def* %op1, i32 %code, i32 %unsignedp, i32 %mode, %struct.rtx_def* %size) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %size.addr = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  store i32 %code, i32* %code.addr, align 4
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call = call i32 @swap_commutative_operands_p(%struct.rtx_def* %0, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %tem, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %op0.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %op1.addr, align 8
  %5 = load i32, i32* %code.addr, align 4
  %call1 = call i32 @swap_condition(i32 %5)
  store i32 %call1, i32* %code.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* @flag_force_mem, align 4
  %tobool2 = icmp ne i32 %6, 0
  br i1 %tobool2, label %if.then.3, label %if.end.6

if.then.3:                                        ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %call4 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %7)
  store %struct.rtx_def* %call4, %struct.rtx_def** %op0.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call5 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %8)
  store %struct.rtx_def* %call5, %struct.rtx_def** %op1.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.3, %if.end
  call void @do_pending_stack_adjust()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load = load i32, i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %if.end.6
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load7 = load i32, i32* %12, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 54
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.14

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %13 = load i32, i32* %code.addr, align 4
  %14 = load i32, i32* %mode.addr, align 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %call11 = call %struct.rtx_def* @simplify_relational_operation(i32 %13, i32 %14, %struct.rtx_def* %15, %struct.rtx_def* %16)
  store %struct.rtx_def* %call11, %struct.rtx_def** %tem, align 8
  %cmp12 = icmp ne %struct.rtx_def* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %land.lhs.true.10
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %retval
  br label %return

if.end.14:                                        ; preds = %land.lhs.true.10, %land.lhs.true, %if.end.6
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %20 = load i32, i32* %code.addr, align 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8
  %22 = load i32, i32* %mode.addr, align 4
  %23 = load i32, i32* %unsignedp.addr, align 4
  call void @emit_cmp_insn(%struct.rtx_def* %18, %struct.rtx_def* %19, i32 %20, %struct.rtx_def* %21, i32 %22, i32 %23)
  %24 = load i32, i32* %code.addr, align 4
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 1), align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %24, i32 0, %struct.rtx_def* %25, %struct.rtx_def* %26)
  store %struct.rtx_def* %call15, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.then.13
  %27 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %27
}

declare i32 @swap_commutative_operands_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @swap_condition(i32) #1

declare %struct.rtx_def* @simplify_relational_operation(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @reverse_condition(i32) #1

; Function Attrs: nounwind uwtable
define i32 @case_values_threshold() #0 {
entry:
  ret i32 5
}

; Function Attrs: nounwind uwtable
define i32 @try_casesi(%union.tree_node* %index_type, %union.tree_node* %index_expr, %union.tree_node* %minval, %union.tree_node* %range, %struct.rtx_def* %table_label, %struct.rtx_def* %default_label) #0 {
entry:
  %index_type.addr = alloca %union.tree_node*, align 8
  %index_expr.addr = alloca %union.tree_node*, align 8
  %minval.addr = alloca %union.tree_node*, align 8
  %range.addr = alloca %union.tree_node*, align 8
  %table_label.addr = alloca %struct.rtx_def*, align 8
  %default_label.addr = alloca %struct.rtx_def*, align 8
  %index_mode = alloca i32, align 4
  %index_bits = alloca i32, align 4
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %index = alloca %struct.rtx_def*, align 8
  %op_mode = alloca i32, align 4
  store %union.tree_node* %index_type, %union.tree_node** %index_type.addr, align 8
  store %union.tree_node* %index_expr, %union.tree_node** %index_expr.addr, align 8
  store %union.tree_node* %minval, %union.tree_node** %minval.addr, align 8
  store %union.tree_node* %range, %union.tree_node** %range.addr, align 8
  store %struct.rtx_def* %table_label, %struct.rtx_def** %table_label.addr, align 8
  store %struct.rtx_def* %default_label, %struct.rtx_def** %default_label.addr, align 8
  store i32 4, i32* %index_mode, align 4
  %0 = load i32, i32* %index_mode, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %1 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %1 to i32
  store i32 %conv, i32* %index_bits, align 4
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i32 @try_tablejump(%union.tree_node* %index_type, %union.tree_node* %index_expr, %union.tree_node* %minval, %union.tree_node* %range, %struct.rtx_def* %table_label, %struct.rtx_def* %default_label) #0 {
entry:
  %index_type.addr = alloca %union.tree_node*, align 8
  %index_expr.addr = alloca %union.tree_node*, align 8
  %minval.addr = alloca %union.tree_node*, align 8
  %range.addr = alloca %union.tree_node*, align 8
  %table_label.addr = alloca %struct.rtx_def*, align 8
  %default_label.addr = alloca %struct.rtx_def*, align 8
  %index = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %index_type, %union.tree_node** %index_type.addr, align 8
  store %union.tree_node* %index_expr, %union.tree_node** %index_expr.addr, align 8
  store %union.tree_node* %minval, %union.tree_node** %minval.addr, align 8
  store %union.tree_node* %range, %union.tree_node** %range.addr, align 8
  store %struct.rtx_def* %table_label, %struct.rtx_def** %table_label.addr, align 8
  store %struct.rtx_def* %default_label, %struct.rtx_def** %default_label.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** %index_expr.addr, align 8
  %call = call %union.tree_node* @convert(%union.tree_node* %1, %union.tree_node* %2)
  %3 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %4 = load %union.tree_node*, %union.tree_node** %minval.addr, align 8
  %call1 = call %union.tree_node* @convert(%union.tree_node* %3, %union.tree_node* %4)
  %call2 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %0, %union.tree_node* %call, %union.tree_node* %call1)
  %call3 = call %union.tree_node* @fold(%union.tree_node* %call2)
  store %union.tree_node* %call3, %union.tree_node** %index_expr.addr, align 8
  %5 = load %union.tree_node*, %union.tree_node** %index_expr.addr, align 8
  %call4 = call %struct.rtx_def* @expand_expr(%union.tree_node* %5, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call4, %struct.rtx_def** %index, align 8
  call void @emit_queue()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %call5 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %6, i32 0)
  store %struct.rtx_def* %call5, %struct.rtx_def** %index, align 8
  call void @do_pending_stack_adjust()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %8 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %type = bitcast %union.tree_node* %8 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6
  %bf.load = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  %9 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %type6 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %mode7 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 6
  %bf.load8 = load i32, i32* %mode7, align 4
  %bf.lshr9 = lshr i32 %bf.load8, 9
  %bf.clear10 = and i32 %bf.lshr9, 127
  %10 = load %union.tree_node*, %union.tree_node** %range.addr, align 8
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %type11, align 8
  %type12 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %mode13 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 6
  %bf.load14 = load i32, i32* %mode13, align 4
  %bf.lshr15 = lshr i32 %bf.load14, 9
  %bf.clear16 = and i32 %bf.lshr15, 127
  %12 = load %union.tree_node*, %union.tree_node** %range.addr, align 8
  %call17 = call %struct.rtx_def* @expand_expr(%union.tree_node* %12, %struct.rtx_def* null, i32 0, i32 0)
  %13 = load %union.tree_node*, %union.tree_node** %range.addr, align 8
  %common18 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %type19, align 8
  %common20 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2
  %bf.load21 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 13
  %bf.clear23 = and i32 %bf.lshr22, 1
  %call24 = call %struct.rtx_def* @convert_modes(i32 %bf.clear10, i32 %bf.clear16, %struct.rtx_def* %call17, i32 %bf.clear23)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %table_label.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @do_tablejump(%struct.rtx_def* %7, i32 %bf.clear, %struct.rtx_def* %call24, %struct.rtx_def* %15, %struct.rtx_def* %16)
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal void @do_tablejump(%struct.rtx_def* %index, i32 %mode, %struct.rtx_def* %range, %struct.rtx_def* %table_label, %struct.rtx_def* %default_label) #0 {
entry:
  %index.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %range.addr = alloca %struct.rtx_def*, align 8
  %table_label.addr = alloca %struct.rtx_def*, align 8
  %default_label.addr = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %vector = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %index, %struct.rtx_def** %index.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.rtx_def* %range, %struct.rtx_def** %range.addr, align 8
  store %struct.rtx_def* %table_label, %struct.rtx_def** %table_label.addr, align 8
  store %struct.rtx_def* %default_label, %struct.rtx_def** %default_label.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %range.addr, align 8
  %2 = load i32, i32* %mode.addr, align 4
  %3 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %0, %struct.rtx_def* %1, i32 109, %struct.rtx_def* null, i32 %2, i32 1, %struct.rtx_def* %3)
  %4 = load i32, i32* %mode.addr, align 4
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %cmp = icmp ne i32 %4, %cond
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %6, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond3 = select i1 %tobool2, i32 5, i32 4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %call = call %struct.rtx_def* @convert_to_mode(i32 %cond3, %struct.rtx_def* %7, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %index.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %8, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 5, i32 4
  %9 = load i32, i32* @target_flags, align 4
  %and7 = and i32 %9, 33554432
  %tobool8 = icmp ne i32 %and7, 0
  %cond9 = select i1 %tobool8, i32 5, i32 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %11 = load i32, i32* @target_flags, align 4
  %and10 = and i32 %11, 33554432
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end
  %12 = load i32, i32* @flag_pic, align 4
  %tobool12 = icmp ne i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %13 = phi i1 [ true, %if.end ], [ %tobool12, %lor.rhs ]
  %cond13 = select i1 %13, i32 4, i32 5
  %idxprom = sext i32 %cond13 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %14 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %14 to i64
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %cond9, %struct.rtx_def* %10, %struct.rtx_def* %call14)
  %15 = load i32, i32* @target_flags, align 4
  %and16 = and i32 %15, 33554432
  %tobool17 = icmp ne i32 %and16, 0
  %cond18 = select i1 %tobool17, i32 5, i32 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %table_label.addr, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond18, %struct.rtx_def* %16)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond6, %struct.rtx_def* %call15, %struct.rtx_def* %call19)
  store %struct.rtx_def* %call20, %struct.rtx_def** %index.addr, align 8
  %17 = load i32, i32* @target_flags, align 4
  %and21 = and i32 %17, 33554432
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %lor.rhs.23, label %lor.end.25

lor.rhs.23:                                       ; preds = %lor.end
  %18 = load i32, i32* @flag_pic, align 4
  %tobool24 = icmp ne i32 %18, 0
  br label %lor.end.25

lor.end.25:                                       ; preds = %lor.rhs.23, %lor.end
  %19 = phi i1 [ true, %lor.end ], [ %tobool24, %lor.rhs.23 ]
  %cond26 = select i1 %19, i32 4, i32 5
  %20 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %call27 = call %struct.rtx_def* @memory_address_noforce(i32 %cond26, %struct.rtx_def* %20)
  store %struct.rtx_def* %call27, %struct.rtx_def** %index.addr, align 8
  %21 = load i32, i32* @target_flags, align 4
  %and28 = and i32 %21, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %lor.rhs.30, label %lor.end.32

lor.rhs.30:                                       ; preds = %lor.end.25
  %22 = load i32, i32* @flag_pic, align 4
  %tobool31 = icmp ne i32 %22, 0
  br label %lor.end.32

lor.end.32:                                       ; preds = %lor.rhs.30, %lor.end.25
  %23 = phi i1 [ true, %lor.end.25 ], [ %tobool31, %lor.rhs.30 ]
  %cond33 = select i1 %23, i32 4, i32 5
  %call34 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond33)
  store %struct.rtx_def* %call34, %struct.rtx_def** %temp, align 8
  %24 = load i32, i32* @target_flags, align 4
  %and35 = and i32 %24, 33554432
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %lor.rhs.37, label %lor.end.39

lor.rhs.37:                                       ; preds = %lor.end.32
  %25 = load i32, i32* @flag_pic, align 4
  %tobool38 = icmp ne i32 %25, 0
  br label %lor.end.39

lor.end.39:                                       ; preds = %lor.rhs.37, %lor.end.32
  %26 = phi i1 [ true, %lor.end.32 ], [ %tobool38, %lor.rhs.37 ]
  %cond40 = select i1 %26, i32 4, i32 5
  %27 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %call41 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond40, %struct.rtx_def* %27)
  store %struct.rtx_def* %call41, %struct.rtx_def** %vector, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %vector, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load = load i32, i32* %29, align 8
  %bf.clear = and i32 %bf.load, -67108865
  %bf.set = or i32 %bf.clear, 67108864
  store i32 %bf.set, i32* %29, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %vector, align 8
  call void @convert_move(%struct.rtx_def* %30, %struct.rtx_def* %31, i32 0)
  %32 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %table_label.addr, align 8
  %call42 = call %struct.rtx_def* @gen_tablejump(%struct.rtx_def* %32, %struct.rtx_def* %33)
  %call43 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call42)
  %34 = load i32, i32* @flag_pic, align 4
  %tobool44 = icmp ne i32 %34, 0
  br i1 %tobool44, label %if.end.47, label %if.then.45

if.then.45:                                       ; preds = %lor.end.39
  %call46 = call %struct.rtx_def* @emit_barrier()
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.45, %lor.end.39
  ret void
}

declare %struct.rtx_def* @adjust_automodify_address_1(%struct.rtx_def*, i32, %struct.rtx_def*, i64, i32) #1

; Function Attrs: nounwind uwtable
define internal void @store_by_pieces_2(%struct.rtx_def* (%struct.rtx_def*, ...)* %genfun, i32 %mode, %struct.store_by_pieces* %data) #0 {
entry:
  %genfun.addr = alloca %struct.rtx_def* (%struct.rtx_def*, ...)*, align 8
  %mode.addr = alloca i32, align 4
  %data.addr = alloca %struct.store_by_pieces*, align 8
  %size = alloca i32, align 4
  %to1 = alloca %struct.rtx_def*, align 8
  %cst = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* (%struct.rtx_def*, ...)* %genfun, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.store_by_pieces* %data, %struct.store_by_pieces** %data.addr, align 8
  %0 = load i32, i32* %mode.addr, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %size, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.20, %entry
  %2 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %len = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %2, i32 0, i32 4
  %3 = load i64, i64* %len, align 8
  %4 = load i32, i32* %size, align 4
  %conv1 = zext i32 %4 to i64
  %cmp = icmp uge i64 %3, %conv1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %reverse = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %5, i32 0, i32 8
  %6 = load i32, i32* %reverse, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load i32, i32* %size, align 4
  %conv3 = zext i32 %7 to i64
  %8 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %offset = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %8, i32 0, i32 5
  %9 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %9, %conv3
  store i64 %sub, i64* %offset, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %10 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %autinc_to = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %10, i32 0, i32 2
  %11 = load i32, i32* %autinc_to, align 4
  %tobool4 = icmp ne i32 %11, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  %12 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %to = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %12, i32 0, i32 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %to, align 8
  %14 = load i32, i32* %mode.addr, align 4
  %15 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %to_addr = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %15, i32 0, i32 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %to_addr, align 8
  %17 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %offset6 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %17, i32 0, i32 5
  %18 = load i64, i64* %offset6, align 8
  %call = call %struct.rtx_def* @adjust_automodify_address_1(%struct.rtx_def* %13, i32 %14, %struct.rtx_def* %16, i64 %18, i32 1)
  store %struct.rtx_def* %call, %struct.rtx_def** %to1, align 8
  br label %if.end.10

if.else:                                          ; preds = %if.end
  %19 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %to7 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %19, i32 0, i32 0
  %20 = load %struct.rtx_def*, %struct.rtx_def** %to7, align 8
  %21 = load i32, i32* %mode.addr, align 4
  %22 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %offset8 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %22, i32 0, i32 5
  %23 = load i64, i64* %offset8, align 8
  %call9 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %20, i32 %21, i64 %23, i32 1, i32 1)
  store %struct.rtx_def* %call9, %struct.rtx_def** %to1, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.5
  %24 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %constfun = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %24, i32 0, i32 6
  %25 = load %struct.rtx_def* (i8*, i64, i32)*, %struct.rtx_def* (i8*, i64, i32)** %constfun, align 8
  %26 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %constfundata = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %26, i32 0, i32 7
  %27 = load i8*, i8** %constfundata, align 8
  %28 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %offset11 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %28, i32 0, i32 5
  %29 = load i64, i64* %offset11, align 8
  %30 = load i32, i32* %mode.addr, align 4
  %call12 = call %struct.rtx_def* %25(i8* %27, i64 %29, i32 %30)
  store %struct.rtx_def* %call12, %struct.rtx_def** %cst, align 8
  %31 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun.addr, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %to1, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %cst, align 8
  %call13 = call %struct.rtx_def* (%struct.rtx_def*, ...) %31(%struct.rtx_def* %32, %struct.rtx_def* %33)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %34 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %reverse15 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %34, i32 0, i32 8
  %35 = load i32, i32* %reverse15, align 4
  %tobool16 = icmp ne i32 %35, 0
  br i1 %tobool16, label %if.end.20, label %if.then.17

if.then.17:                                       ; preds = %if.end.10
  %36 = load i32, i32* %size, align 4
  %conv18 = zext i32 %36 to i64
  %37 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %offset19 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %37, i32 0, i32 5
  %38 = load i64, i64* %offset19, align 8
  %add = add nsw i64 %38, %conv18
  store i64 %add, i64* %offset19, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.17, %if.end.10
  %39 = load i32, i32* %size, align 4
  %conv21 = zext i32 %39 to i64
  %40 = load %struct.store_by_pieces*, %struct.store_by_pieces** %data.addr, align 8
  %len22 = getelementptr inbounds %struct.store_by_pieces, %struct.store_by_pieces* %40, i32 0, i32 4
  %41 = load i64, i64* %len22, align 8
  %sub23 = sub i64 %41, %conv21
  store i64 %sub23, i64* %len22, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @clear_by_pieces_1(i8* %data, i64 %offset, i32 %mode) #0 {
entry:
  %data.addr = alloca i8*, align 8
  %offset.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  ret %struct.rtx_def* %0
}

declare i32 @preserve_subexpressions_p() #1

; Function Attrs: nounwind uwtable
define internal i32 @is_zeros_p(%union.tree_node* %exp) #0 {
entry:
  %retval = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %elt = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 25, label %sw.bb.2
    i32 27, label %sw.bb.4
    i32 26, label %sw.bb.9
    i32 28, label %sw.bb.13
    i32 46, label %sw.bb.18
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp1 = bitcast %union.tree_node* %1 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %call = call i32 @is_zeros_p(%union.tree_node* %2)
  store i32 %call, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call3 = call i32 @integer_zerop(%union.tree_node* %3)
  store i32 %call3, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %complex = bitcast %union.tree_node* %4 to %struct.tree_complex*
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 2
  %5 = load %union.tree_node*, %union.tree_node** %real, align 8
  %call5 = call i32 @is_zeros_p(%union.tree_node* %5)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb.4
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %complex6 = bitcast %union.tree_node* %6 to %struct.tree_complex*
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex6, i32 0, i32 3
  %7 = load %union.tree_node*, %union.tree_node** %imag, align 8
  %call7 = call i32 @is_zeros_p(%union.tree_node* %7)
  %tobool8 = icmp ne i32 %call7, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb.4
  %8 = phi i1 [ false, %sw.bb.4 ], [ %tobool8, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  store i32 %land.ext, i32* %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %real_cst = bitcast %union.tree_node* %9 to %struct.tree_real_cst*
  %real_cst10 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 2
  %10 = bitcast %struct.realvaluetype* %real_cst10 to i8*
  %call11 = call i32 @memcmp(i8* %10, i8* bitcast (%struct.realvaluetype* @dconst0 to i8*), i64 24) #7
  %tobool12 = icmp ne i32 %call11, 0
  %lnot = xor i1 %tobool12, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

sw.bb.13:                                         ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %vector = bitcast %union.tree_node* %11 to %struct.tree_vector*
  %elements = getelementptr inbounds %struct.tree_vector, %struct.tree_vector* %vector, i32 0, i32 2
  %12 = load %union.tree_node*, %union.tree_node** %elements, align 8
  store %union.tree_node* %12, %union.tree_node** %elt, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.13
  %13 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %tobool14 = icmp ne %union.tree_node* %13, null
  br i1 %tobool14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %list = bitcast %union.tree_node* %14 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %15 = load %union.tree_node*, %union.tree_node** %value, align 8
  %call15 = call i32 @is_zeros_p(%union.tree_node* %15)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common17 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 0
  %17 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %17, %union.tree_node** %elt, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

sw.bb.18:                                         ; preds = %entry
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common19 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8
  %tobool20 = icmp ne %union.tree_node* %19, null
  br i1 %tobool20, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %sw.bb.18
  %20 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common21 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 1
  %21 = load %union.tree_node*, %union.tree_node** %type22, align 8
  %common23 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %code24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2
  %bf.load25 = load i32, i32* %code24, align 8
  %bf.clear26 = and i32 %bf.load25, 255
  %cmp = icmp eq i32 %bf.clear26, 19
  br i1 %cmp, label %if.then.27, label %if.end.32

if.then.27:                                       ; preds = %land.lhs.true
  %22 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp28 = bitcast %union.tree_node* %22 to %struct.tree_exp*
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 2
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i32 0, i64 1
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8
  %cmp31 = icmp eq %union.tree_node* %23, null
  %conv = zext i1 %cmp31 to i32
  store i32 %conv, i32* %retval
  br label %return

if.end.32:                                        ; preds = %land.lhs.true, %sw.bb.18
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp33 = bitcast %union.tree_node* %24 to %struct.tree_exp*
  %operands34 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 2
  %arrayidx35 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands34, i32 0, i64 1
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx35, align 8
  store %union.tree_node* %25, %union.tree_node** %elt, align 8
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.45, %if.end.32
  %26 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %tobool37 = icmp ne %union.tree_node* %26, null
  br i1 %tobool37, label %for.body.38, label %for.end.48

for.body.38:                                      ; preds = %for.cond.36
  %27 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %list39 = bitcast %union.tree_node* %27 to %struct.tree_list*
  %value40 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list39, i32 0, i32 2
  %28 = load %union.tree_node*, %union.tree_node** %value40, align 8
  %call41 = call i32 @is_zeros_p(%union.tree_node* %28)
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end.44, label %if.then.43

if.then.43:                                       ; preds = %for.body.38
  store i32 0, i32* %retval
  br label %return

if.end.44:                                        ; preds = %for.body.38
  br label %for.inc.45

for.inc.45:                                       ; preds = %if.end.44
  %29 = load %union.tree_node*, %union.tree_node** %elt, align 8
  %common46 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %chain47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 0
  %30 = load %union.tree_node*, %union.tree_node** %chain47, align 8
  store %union.tree_node* %30, %union.tree_node** %elt, align 8
  br label %for.cond.36

for.end.48:                                       ; preds = %for.cond.36
  store i32 1, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %for.end.48, %if.then.43, %if.then.27, %for.end, %if.then, %sw.bb.9, %land.end, %sw.bb.2, %sw.bb
  %31 = load i32, i32* %retval
  ret i32 %31
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #4

declare i32 @fields_length(%union.tree_node*) #1

declare %union.tree_node* @bit_position(%union.tree_node*) #1

declare i64 @int_bit_position(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal void @store_constructor_field(%struct.rtx_def* %target, i64 %bitsize, i64 %bitpos, i32 %mode, %union.tree_node* %exp, %union.tree_node* %type, i32 %cleared, i32 %alias_set) #0 {
entry:
  %target.addr = alloca %struct.rtx_def*, align 8
  %bitsize.addr = alloca i64, align 8
  %bitpos.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %cleared.addr = alloca i32, align 4
  %alias_set.addr = alloca i32, align 4
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  store i64 %bitsize, i64* %bitsize.addr, align 8
  store i64 %bitpos, i64* %bitpos.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %cleared, i32* %cleared.addr, align 4
  store i32 %alias_set, i32* %alias_set.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 46
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %bitpos.addr, align 8
  %rem = srem i64 %1, 8
  %cmp1 = icmp eq i64 %rem, 0
  br i1 %cmp1, label %land.lhs.true.2, label %if.else

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %2 = load i64, i64* %bitpos.addr, align 8
  %cmp3 = icmp eq i64 %2, 0
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load4 = load i32, i32* %4, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true.2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load7 = load i32, i32* %6, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 66
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load11 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load11, 16
  %bf.clear12 = and i32 %bf.lshr, 255
  %cmp13 = icmp eq i32 %bf.clear12, 51
  br i1 %cmp13, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.10
  %10 = load i64, i64* %bitpos.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load14 = load i32, i32* %12, align 8
  %bf.lshr15 = lshr i32 %bf.load14, 16
  %bf.clear16 = and i32 %bf.lshr15, 255
  %call = call i32 @get_mode_alignment(i32 %bf.clear16)
  %conv = zext i32 %call to i64
  %rem17 = srem i64 %10, %conv
  %cmp18 = icmp ne i64 0, %rem17
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.10
  %13 = phi i1 [ true, %if.then.10 ], [ %cmp18, %lor.rhs ]
  %cond = select i1 %13, i32 51, i32 0
  %14 = load i64, i64* %bitpos.addr, align 8
  %div = sdiv i64 %14, 8
  %call20 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %7, i32 %cond, i64 %div, i32 1, i32 1)
  store %struct.rtx_def* %call20, %struct.rtx_def** %target.addr, align 8
  br label %if.end

if.end:                                           ; preds = %lor.end, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load21 = load i32, i32* %16, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 66
  br i1 %cmp23, label %land.lhs.true.25, label %if.end.41

land.lhs.true.25:                                 ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load26 = load i32, i32* %18, align 8
  %bf.lshr27 = lshr i32 %bf.load26, 24
  %bf.clear28 = and i32 %bf.lshr27, 1
  %tobool = icmp ne i32 %bf.clear28, 0
  br i1 %tobool, label %if.end.41, label %land.lhs.true.29

land.lhs.true.29:                                 ; preds = %land.lhs.true.25
  %19 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %20 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem, align 8
  %cmp30 = icmp eq %struct.mem_attrs* %20, null
  br i1 %cmp30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.29
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.29
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 1
  %rtmem34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.mem_attrs**
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rtmem34, align 8
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %22, i32 0, i32 0
  %23 = load i64, i64* %alias, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond35 = phi i64 [ 0, %cond.true ], [ %23, %cond.false ]
  %cmp36 = icmp ne i64 %cond35, 0
  br i1 %cmp36, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %cond.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %call39 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %24)
  store %struct.rtx_def* %call39, %struct.rtx_def** %target.addr, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %26 = load i32, i32* %alias_set.addr, align 4
  %conv40 = sext i32 %26 to i64
  call void @set_mem_alias_set(%struct.rtx_def* %25, i64 %conv40)
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %cond.end, %land.lhs.true.25, %if.end
  %27 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %29 = load i32, i32* %cleared.addr, align 4
  %30 = load i64, i64* %bitsize.addr, align 8
  %div42 = udiv i64 %30, 8
  call void @store_constructor(%union.tree_node* %27, %struct.rtx_def* %28, i32 %29, i64 %div42)
  br label %if.end.44

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true, %entry
  %31 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8
  %32 = load i64, i64* %bitsize.addr, align 8
  %33 = load i64, i64* %bitpos.addr, align 8
  %34 = load i32, i32* %mode.addr, align 4
  %35 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %37 = load i32, i32* %alias_set.addr, align 4
  %call43 = call %struct.rtx_def* @store_field(%struct.rtx_def* %31, i64 %32, i64 %33, i32 %34, %union.tree_node* %35, i32 0, i32 0, %union.tree_node* %36, i32 %37)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.end.41
  ret void
}

declare %union.tree_node* @get_set_constructor_bits(%union.tree_node*, i8*, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @enqueue_insn(%struct.rtx_def* %var, %struct.rtx_def* %body) #0 {
entry:
  %var.addr = alloca %struct.rtx_def*, align 8
  %body.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %var, %struct.rtx_def** %var.addr, align 8
  store %struct.rtx_def* %body, %struct.rtx_def** %body.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %2 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 2
  %5 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_pending_chain = getelementptr inbounds %struct.expr_status, %struct.expr_status* %5, i32 0, i32 6
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x_pending_chain, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_eeeee(i32 71, i32 %bf.clear, %struct.rtx_def* %2, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %3, %struct.rtx_def* %6)
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %expr1 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 2
  %8 = load %struct.expr_status*, %struct.expr_status** %expr1, align 8
  %x_pending_chain2 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %8, i32 0, i32 6
  store %struct.rtx_def* %call, %struct.rtx_def** %x_pending_chain2, align 8
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  %expr3 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 2
  %10 = load %struct.expr_status*, %struct.expr_status** %expr3, align 8
  %x_pending_chain4 = getelementptr inbounds %struct.expr_status, %struct.expr_status* %10, i32 0, i32 6
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x_pending_chain4, align 8
  ret %struct.rtx_def* %11
}

declare i32 @general_operand(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_eeeee(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @integer_all_onesp(%union.tree_node*) #1

declare %struct.rtx_def* @emit_store_flag(%struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32) #1

declare %struct.rtx_def* @memory_address_noforce(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_tablejump(%struct.rtx_def*, %struct.rtx_def*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn }
attributes #7 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
