; ModuleID = 'insn-emit.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }

@const_int_rtx = external global [129 x %struct.rtx_def*], align 16
@global_rtl = external global [11 x %struct.rtx_def*], align 16
@ix86_compare_op0 = external global %struct.rtx_def*, align 8
@ix86_compare_op1 = external global %struct.rtx_def*, align 8
@target_flags = external global i32, align 4
@.str = private unnamed_addr constant [12 x i8] c"insn-emit.c\00", align 1
@__FUNCTION__.gen_reload_outqi = private unnamed_addr constant [17 x i8] c"gen_reload_outqi\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@x86_zero_extend_with_and = external constant i32, align 4
@ix86_cpu = external global i32, align 4
@optimize_size = external global i32, align 4
@x86_use_cltd = external constant i32, align 4
@__FUNCTION__.gen_split_1001 = private unnamed_addr constant [15 x i8] c"gen_split_1001\00", align 1
@__FUNCTION__.gen_split_1003 = private unnamed_addr constant [15 x i8] c"gen_split_1003\00", align 1
@mode_bitsize = external constant [59 x i16], align 16
@mode_size = external constant [59 x i8], align 16
@x86_cmove = external constant i32, align 4
@ix86_arch = external global i32, align 4
@flag_pic = external global i32, align 4
@pic_offset_table_rtx = external global %struct.rtx_def*, align 8
@cfun = external global %struct.function*, align 8
@__FUNCTION__.gen_call_pop = private unnamed_addr constant [13 x i8] c"gen_call_pop\00", align 1
@ix86_fpmath = external global i32, align 4
@x86_single_stringop = external constant i32, align 4
@__FUNCTION__.gen_split_1231 = private unnamed_addr constant [15 x i8] c"gen_split_1231\00", align 1
@mode_mask_array = external constant [59 x i64], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@__FUNCTION__.gen_prefetch = private unnamed_addr constant [13 x i8] c"gen_prefetch\00", align 1
@x86_prefetch_sse = external global i32, align 4
@__FUNCTION__.add_clobbers = private unnamed_addr constant [13 x i8] c"add_clobbers\00", align 1
@__FUNCTION__.added_clobbers_hard_reg_p = private unnamed_addr constant [26 x i8] c"added_clobbers_hard_reg_p\00", align 1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpdi_ccno_1_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpdi_1_insn_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpqi_ext_3_insn(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 2, %struct.rtx_def* %call3, i32 0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 0, %struct.rtx_def* %call4, %struct.rtx_def* %1)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call5)
  ret %struct.rtx_def* %call6
}

declare %struct.rtx_def* @gen_rtx_SUBREG(i32, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_eee(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpqi_ext_3_insn_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 2, %struct.rtx_def* %call3, i32 0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 0, %struct.rtx_def* %call4, %struct.rtx_def* %1)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_fnstsw_1(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 18)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 3, %struct.rtvec_def* %call1, i32 9)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

declare %struct.rtx_def* @gen_rtx_fmt_Ei(i32, i32, %struct.rtvec_def*, i32) #1

declare %struct.rtvec_def* @gen_rtvec(i32, ...) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_sahf_1(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 52, %struct.rtvec_def* %call1, i32 10)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_popsi1(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call3, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  ret %struct.rtx_def* %call9
}

declare %struct.rtx_def* @gen_rtx_fmt_E(i32, i32, %struct.rtvec_def*) #1

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movsi_insv_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call2, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pushdi2_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_popdi1(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call3, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  ret %struct.rtx_def* %call9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_swapxf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_swaptf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendhisi2_and(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendsidi2_32(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendsidi2_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendhidi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendqidi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendsidi2_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendhidi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendqidi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendhisi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendqihi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 3, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendqisi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_truncdfsf2_3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_truncdfsf2_sse_only(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncdi_nomemory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %4)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 16)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 5, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call3, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

declare %struct.rtx_def* @gen_rtx_fmt_0(i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncdi_memory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 16)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncsfdi_sse(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncdfdi_sse(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncsi_nomemory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %4)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncsi_memory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncsfsi_sse(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncdfsi_sse(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_trunchi_nomemory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 3, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %4)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_trunchi_memory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 3, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_fnstcw_1(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 3, i32 18)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 3, %struct.rtvec_def* %call1, i32 11)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_fldcw_1(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 3, i32 18)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 3, %struct.rtvec_def* %call1, i32 12)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floathisf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floathidf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floathixf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 17, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floathitf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 18, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatsixf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 17, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatsitf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 18, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatdixf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 17, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatditf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 18, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addqi3_cc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 52, %struct.rtvec_def* %call1, i32 12)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 2, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addsi_1_zext(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addqi_ext_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call5, %struct.rtx_def* %2)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call2, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  ret %struct.rtx_def* %call11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subdi3_carry_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 5, %struct.rtx_def* %call, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call1, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subsi3_carry(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subsi3_carry_zext(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  ret %struct.rtx_def* %call9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_udivqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 81, i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divmodhi4(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 3, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 80, i32 3, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_udivmoddi4(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 81, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 82, i32 5, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_udivmodsi4(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 81, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 82, i32 4, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_testsi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 0, %struct.rtx_def* %call1, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_andqi_ext_0(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call5, %struct.rtx_def* %2)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call2, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  ret %struct.rtx_def* %call11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negsf2_memory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negsf2_ifs(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negdf2_memory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negdf2_ifs(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_abssf2_memory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_abssf2_ifs(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_absdf2_memory(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_absdf2_ifs(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashldi3_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_shld_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 84, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  ret %struct.rtx_def* %call9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrdi3_63_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrdi3_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_shrd_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 84, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  ret %struct.rtx_def* %call9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrsi3_31(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lshrdi3_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_setcc_2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %call1 = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 17)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call2 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

declare %struct.rtx_def* @gen_rtx(i32, i32, ...) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_jump(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

declare %struct.rtx_def* @gen_rtx_fmt_u00(i32, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_doloop_end_internal(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1, %struct.rtx_def* %4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call3, %struct.rtx_def* %call5, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  ret %struct.rtx_def* %call11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_blockage() #0 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 0, %struct.rtvec_def* %call, i32 0)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_return_internal() #0 {
entry:
  %call = call %struct.rtx_def* @gen_rtx_fmt_(i32 51, i32 0)
  ret %struct.rtx_def* %call
}

declare %struct.rtx_def* @gen_rtx_fmt_(i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_return_pop_internal(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_(i32 51, i32 0)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %0)
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_return_indirect_internal(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_(i32 51, i32 0)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %0)
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_nop() #0 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  ret %struct.rtx_def* %0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_prologue_set_got(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %2, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %call3 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 4, %struct.rtvec_def* %call3, i32 1)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  ret %struct.rtx_def* %call9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_prologue_get_pc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 4, %struct.rtvec_def* %call1, i32 2)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_eh_return_si(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 0, %struct.rtvec_def* %call, i32 13)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_eh_return_di(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 0, %struct.rtvec_def* %call, i32 13)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_leave() #0 {
entry:
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call1 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 6)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 6)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 6)
  %call7 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call4, %struct.rtx_def* %call8, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  ret %struct.rtx_def* %call13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_leave_rex64() #0 {
entry:
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call1 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 6)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 6)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 6)
  %call7 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call4, %struct.rtx_def* %call8, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  ret %struct.rtx_def* %call13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ffssi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 56, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call3 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %3)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 4, %struct.rtvec_def* %call3, i32 5)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtsf2_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtsf2_1_sse_only(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtsf2_i387(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtdf2_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtdf2_1_sse_only(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtdf2_i387(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtxf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 17, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrttf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 18, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sindf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 16, %struct.rtvec_def* %call, i32 1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sinsf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 15, %struct.rtvec_def* %call, i32 1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sinxf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 17, %struct.rtvec_def* %call, i32 1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sintf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 18, %struct.rtvec_def* %call, i32 1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cosdf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 16, %struct.rtvec_def* %call, i32 2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cossf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 15, %struct.rtvec_def* %call, i32 2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cosxf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 17, %struct.rtvec_def* %call, i32 2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_costf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 18, %struct.rtvec_def* %call, i32 2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cld() #0 {
entry:
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %0)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovdi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call4)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call5, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovsi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call4)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call5, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovsi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call4)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call5, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovhi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call4)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call5, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovhi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call4)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call5, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovqi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  ret %struct.rtx_def* %call10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovqi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  ret %struct.rtx_def* %call10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_movdi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call1)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %6, %struct.rtx_def* %call5)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call6, %struct.rtx_def* %7)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %10)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call4, %struct.rtx_def* %call8, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  ret %struct.rtx_def* %call16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_movsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call1)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 4, %struct.rtx_def* %6, %struct.rtx_def* %call5)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %7)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %10)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call4, %struct.rtx_def* %call8, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  ret %struct.rtx_def* %call16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_movsi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call1)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %6, %struct.rtx_def* %call5)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call6, %struct.rtx_def* %7)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %10)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call4, %struct.rtx_def* %call8, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  ret %struct.rtx_def* %call16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_movqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call1)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %9)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call6)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %10)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_movqi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call1)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %9)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call6)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %10)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetdi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetsi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetsi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsethi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsethi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetqi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetqi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_stosdi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call1)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %8)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call4, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_stossi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call1)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %8)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call4, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_stossi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %call1)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %8)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call4, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_stosqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call1)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call3, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %8)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  ret %struct.rtx_def* %call10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rep_stosqi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call1)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call3, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %8)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 19)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  ret %struct.rtx_def* %call10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpstrqi_nz_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5, %struct.rtx_def* %operand6) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  %operand6.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  store %struct.rtx_def* %operand6, %struct.rtx_def** %operand6.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand6.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %6)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 7, %struct.rtx_def* %call4, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call8, %struct.rtx_def* %call9, %struct.rtx_def* %call10, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  ret %struct.rtx_def* %call13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpstrqi_nz_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5, %struct.rtx_def* %operand6) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  %operand6.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  store %struct.rtx_def* %operand6, %struct.rtx_def** %operand6.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand6.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %3)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %6)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 7, %struct.rtx_def* %call4, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call8, %struct.rtx_def* %call9, %struct.rtx_def* %call10, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  ret %struct.rtx_def* %call13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpstrqi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5, %struct.rtx_def* %operand6) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  %operand6.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  store %struct.rtx_def* %operand6, %struct.rtx_def** %operand6.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand6.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %3)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 52, %struct.rtx_def* %call1, %struct.rtx_def* %call4, %struct.rtx_def* %4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call5)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %5)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call10)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %8)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 7, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call9, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  ret %struct.rtx_def* %call16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpstrqi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5, %struct.rtx_def* %operand6) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  %operand6.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  store %struct.rtx_def* %operand6, %struct.rtx_def** %operand6.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand6.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %3)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 52, %struct.rtx_def* %call1, %struct.rtx_def* %call4, %struct.rtx_def* %4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call5)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %5)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call10)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %8)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 7, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call9, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  ret %struct.rtx_def* %call16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strlenqi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call, %struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 4, %struct.rtvec_def* %call1, i32 0)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call3, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  ret %struct.rtx_def* %call10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strlenqi_rex_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call, %struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call1, i32 0)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call3, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  ret %struct.rtx_def* %call10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_movdicc_0_m1_rex64(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 5, %struct.rtx_def* %call1, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_movsicc_0_m1(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pro_epilogue_adjust_stack_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call5 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movsfcc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 15, %struct.rtx_def* %call, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 15)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movsfcc_eq(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 0, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 15, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 15)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movdfcc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4, %struct.rtx_def* %operand5) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %operand5.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* %operand5, %struct.rtx_def** %operand5.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand5.addr, align 8
  %call = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 16, %struct.rtx_def* %call, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movdfcc_eq(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 0, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 16, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call2, %struct.rtx_def* %call4, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_allocate_stack_worker_1(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 4, %struct.rtvec_def* %call, i32 3)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 4, %struct.rtx_def* %call3, %struct.rtx_def* %1)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %2)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  ret %struct.rtx_def* %call10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_allocate_stack_worker_rex64(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call, i32 3)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 5, %struct.rtx_def* %call3, %struct.rtx_def* %1)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %2)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  ret %struct.rtx_def* %call10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_trap() #0 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 52, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv4sf_internal(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv4si_internal(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv8qi_internal(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv4hi_internal(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv2si_internal(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv2sf_internal(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movti_internal(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movaps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 38)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movups(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 39)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movmskps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 4, %struct.rtvec_def* %call, i32 33)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_pmovmskb(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 4, %struct.rtvec_def* %call, i32 33)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_maskmovq(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 39, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 39, %struct.rtvec_def* %call1, i32 32)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_maskmovq_rex(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 39, %struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 39, %struct.rtvec_def* %call1, i32 32)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movntv4sf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 34)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movntdi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call, i32 34)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movhlps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call, %struct.rtx_def* %call1, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 46, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %call4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movlhps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call, %struct.rtx_def* %call1, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 46, %struct.rtx_def* %2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 12)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %call4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movhps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 12)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movlps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_loadss(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 15, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 145, i32 46, %struct.rtx_def* %call)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %call1, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_movss(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_storess(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_shufps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %1, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 41)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmaddv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmsubv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmmulv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmdivv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rcpv4sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 42)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmrcpv4sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 42)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call1, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rsqrtv4sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 43)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmrsqrtv4sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 43)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call1, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtv4sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 46, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmsqrtv4sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 46, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_andti3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 6, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_nandti3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 6, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 6, %struct.rtx_def* %call, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_iorti3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 84, i32 6, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_xorti3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 6, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_clrv4sf(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 46, %struct.rtvec_def* %call, i32 45)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_maskcmpv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 37, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_maskncmpv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 37, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 37, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmmaskcmpv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 37, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 37, %struct.rtx_def* %call, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmmaskncmpv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 37, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 37, %struct.rtx_def* %call)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 37, %struct.rtx_def* %5, i32 0)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 37, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  ret %struct.rtx_def* %call4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_comi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %3)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %2, %struct.rtx_def* %call2)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %5)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 57, %struct.rtx_def* %call3, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_ucomi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 58, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %3)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %2, %struct.rtx_def* %call2)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %5)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 58, %struct.rtx_def* %call3, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call7)
  ret %struct.rtx_def* %call8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_unpckhps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call, %struct.rtx_def* %2, %struct.rtx_def* %call1, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %call3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %5, %struct.rtx_def* %call5, %struct.rtx_def* %6, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 46, %struct.rtx_def* %4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call4, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_unpcklps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %2, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %call3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call5, %struct.rtx_def* %5, %struct.rtx_def* %call6, %struct.rtx_def* %6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 46, %struct.rtx_def* %4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call4, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_smaxv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 93, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmsmaxv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 93, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sminv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 92, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_vmsminv4sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 92, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cvtpi2ps(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 44, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 145, i32 46, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 12)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  ret %struct.rtx_def* %call4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cvtps2pi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 37, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 33, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  ret %struct.rtx_def* %call4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cvttps2pi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 37, %struct.rtvec_def* %call, i32 30)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 33, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cvtsi2ss(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 15, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 145, i32 46, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 14)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 46, %struct.rtx_def* %1, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  ret %struct.rtx_def* %call4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cvtss2si(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 37, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  ret %struct.rtx_def* %call4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cvttss2si(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 37, %struct.rtvec_def* %call, i32 30)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 4, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addv2si3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ssaddv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 146, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ssaddv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 146, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_usaddv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 147, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_usaddv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 147, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subv2si3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sssubv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 148, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sssubv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 148, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ussubv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 149, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ussubv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 149, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_smulv4hi3_highpart(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 37, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 37, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 37, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 37, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 36, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_umulv4hi3_highpart(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 37, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 37, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 37, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 37, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 36, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_pmaddwd(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %2, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 32, %struct.rtx_def* %1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 33, %struct.rtx_def* %call3)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 32, %struct.rtx_def* %3, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 33, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 33, %struct.rtx_def* %call4, %struct.rtx_def* %call9)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call11 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %6, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 32, %struct.rtx_def* %5, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 33, %struct.rtx_def* %call14)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call16 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call17 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %8, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 32, %struct.rtx_def* %7, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 33, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 33, %struct.rtx_def* %call15, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 33, %struct.rtx_def* %call10, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call22)
  ret %struct.rtx_def* %call23
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_iordi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 84, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call1, i32 45)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_xordi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call1, i32 45)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_clrdi(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call, i32 45)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_anddi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call1, i32 45)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_nanddi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 5, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 5, %struct.rtx_def* %call, %struct.rtx_def* %2)
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call2, i32 45)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  ret %struct.rtx_def* %call4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_uavgv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 8, %struct.rtx_def* %3, %struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 56, i32 39, %struct.rtvec_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 39, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 39, %struct.rtx_def* %call3, %struct.rtx_def* %11)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_uavgv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %3, %struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 56, i32 36, %struct.rtvec_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 36, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 36, %struct.rtx_def* %call3, %struct.rtx_def* %7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_psadbw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 39, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_pinsrw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 3, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 145, i32 36, %struct.rtx_def* %call)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %call1, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_pextrw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 3, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 4, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call3)
  ret %struct.rtx_def* %call4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_pshufw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 36, %struct.rtvec_def* %call, i32 41)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_eqv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_eqv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_eqv2si3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_gtv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_gtv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_gtv2si3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_umaxv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 95, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_smaxv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 93, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_uminv8qi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 94, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sminv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 92, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrv2si3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lshrv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lshrv2si3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_lshrdi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call1, i32 45)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashlv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashlv2si3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_ashldi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 5, %struct.rtvec_def* %call1, i32 45)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_packsswb(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 150, i32 35, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 150, i32 35, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 144, i32 39, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_packssdw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 150, i32 32, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 150, i32 32, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 144, i32 36, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_packuswb(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 151, i32 35, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 151, i32 35, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 144, i32 39, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_punpckhbw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 6)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 7)
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 8, %struct.rtx_def* %call, %struct.rtx_def* %2, %struct.rtx_def* %call1, %struct.rtx_def* %3, %struct.rtx_def* %call2, %struct.rtx_def* %call3, %struct.rtx_def* %call4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call9 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %call11 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call12 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 6)
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 7)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 8, %struct.rtx_def* %5, %struct.rtx_def* %call9, %struct.rtx_def* %6, %struct.rtx_def* %call10, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 39, %struct.rtx_def* %4, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 85)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 39, %struct.rtx_def* %call8, %struct.rtx_def* %call17, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call19)
  ret %struct.rtx_def* %call20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_punpckhwd(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %2, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %call3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call5, %struct.rtx_def* %5, %struct.rtx_def* %call6, %struct.rtx_def* %6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 36, %struct.rtx_def* %4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 36, %struct.rtx_def* %call4, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_punpckhdq(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 33, %struct.rtx_def* %4, %struct.rtx_def* %call4)
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 33, %struct.rtx_def* %call2, %struct.rtx_def* %call5, %struct.rtx_def* %7)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_punpcklbw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 6)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 7)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 8, %struct.rtx_def* %2, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call3, %struct.rtx_def* %call4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 39, %struct.rtx_def* %1, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call11 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 6)
  %call12 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 7)
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 8, %struct.rtx_def* %call9, %struct.rtx_def* %5, %struct.rtx_def* %call10, %struct.rtx_def* %6, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 39, %struct.rtx_def* %4, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 85)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 39, %struct.rtx_def* %call8, %struct.rtx_def* %call17, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call19)
  ret %struct.rtx_def* %call20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_punpcklwd(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call2 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call, %struct.rtx_def* %2, %struct.rtx_def* %call1, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 36, %struct.rtx_def* %1, %struct.rtx_def* %call3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %5, %struct.rtx_def* %call5, %struct.rtx_def* %6, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 36, %struct.rtx_def* %4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 5)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 36, %struct.rtx_def* %call4, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mmx_punpckldq(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call3 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 33, %struct.rtx_def* %4, %struct.rtx_def* %call4)
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 142, i32 33, %struct.rtx_def* %call2, %struct.rtx_def* %call5, %struct.rtx_def* %7)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_emms() #0 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 0, %struct.rtvec_def* %call, i32 31)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 9)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 11)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 12)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 13)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 14)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 29)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 30)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 31)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 32)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 33)
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 34)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 35)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 36)
  %call33 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call32)
  %call34 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 17, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5, %struct.rtx_def* %call7, %struct.rtx_def* %call9, %struct.rtx_def* %call11, %struct.rtx_def* %call13, %struct.rtx_def* %call15, %struct.rtx_def* %call17, %struct.rtx_def* %call19, %struct.rtx_def* %call21, %struct.rtx_def* %call23, %struct.rtx_def* %call25, %struct.rtx_def* %call27, %struct.rtx_def* %call29, %struct.rtx_def* %call31, %struct.rtx_def* %call33)
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call34)
  ret %struct.rtx_def* %call35
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ldmxcsr(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 0, %struct.rtvec_def* %call, i32 37)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_stmxcsr(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 4, %struct.rtvec_def* %call, i32 40)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addv2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 44, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subv2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 44, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subrv2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 44, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_gtv2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_gev2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 104, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_eqv2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfmaxv2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 93, i32 44, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfminv2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 92, i32 44, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulv2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 44, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_femms() #0 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 0, %struct.rtvec_def* %call, i32 46)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 9)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 11)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 12)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 13)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 14)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 29)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 30)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 31)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 32)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 33)
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 34)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 35)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 36)
  %call33 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call32)
  %call34 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 17, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5, %struct.rtx_def* %call7, %struct.rtx_def* %call9, %struct.rtx_def* %call11, %struct.rtx_def* %call13, %struct.rtx_def* %call15, %struct.rtx_def* %call17, %struct.rtx_def* %call19, %struct.rtx_def* %call21, %struct.rtx_def* %call23, %struct.rtx_def* %call25, %struct.rtx_def* %call27, %struct.rtx_def* %call29, %struct.rtx_def* %call31, %struct.rtx_def* %call33)
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call34)
  ret %struct.rtx_def* %call35
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pf2id(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 33, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pf2iw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 33, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 150, i32 32, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 33, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfacc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call3 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 15, %struct.rtx_def* %call2, %struct.rtx_def* %call5)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %5, %struct.rtx_def* %call8)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %8)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %7, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 15, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 144, i32 44, %struct.rtx_def* %call6, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call14)
  ret %struct.rtx_def* %call15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfnacc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call3 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 15, %struct.rtx_def* %call2, %struct.rtx_def* %call5)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %5, %struct.rtx_def* %call8)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %8)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %7, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 15, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 144, i32 44, %struct.rtx_def* %call6, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call14)
  ret %struct.rtx_def* %call15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfpnacc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call3 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 15, %struct.rtx_def* %call2, %struct.rtx_def* %call5)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %5, %struct.rtx_def* %call8)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %8)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 15, %struct.rtx_def* %7, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 15, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 144, i32 44, %struct.rtx_def* %call6, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call14)
  ret %struct.rtx_def* %call15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pi2fw(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 4, %struct.rtx_def* %call3)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 3, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 144, i32 33, %struct.rtx_def* %call4, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 44, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatv2si2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 44, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pavgusb(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 39, %struct.rtvec_def* %call, i32 49)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfrcpv2sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 44, %struct.rtvec_def* %call, i32 50)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfrcpit1v2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 44, %struct.rtvec_def* %call, i32 51)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfrcpit2v2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 44, %struct.rtvec_def* %call, i32 52)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfrsqrtv2sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 44, %struct.rtvec_def* %call, i32 53)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pfrsqit1v2sf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 44, %struct.rtvec_def* %call, i32 54)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pmulhrwv4hi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 37, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 37, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 37, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32768)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32768)
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32768)
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32768)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call3, %struct.rtx_def* %call4, %struct.rtx_def* %call5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 56, i32 37, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 37, %struct.rtx_def* %call2, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 16)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 37, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 36, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call12)
  ret %struct.rtx_def* %call13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pswapdv2si2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 33, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pswapdv2sf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %2, %struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 143, i32 44, %struct.rtx_def* %1, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpdi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 5, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** @ix86_compare_op1, align 8
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

declare void @start_sequence() #1

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_sequence() #1

declare void @end_sequence() #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 4, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** @ix86_compare_op1, align 8
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmphi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 3, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** @ix86_compare_op1, align 8
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 2, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** @ix86_compare_op1, align 8
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpdi_1_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpsi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  ret %struct.rtx_def* %call2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpqi_ext_3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 2, %struct.rtx_def* %call3, i32 0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %call4, %struct.rtx_def* %1)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpxf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** @ix86_compare_op1, align 8
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmptf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** @ix86_compare_op1, align 8
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpdf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** @ix86_compare_op1, align 8
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpsf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** @ix86_compare_op0, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** @ix86_compare_op1, align 8
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_845(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 %bf.clear, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand2, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call9)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call10, %struct.rtx_def* %15)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 18)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 57, %struct.rtx_def* %16, %struct.rtx_def* %17)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call15)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call17 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %18)
  %call18 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call19 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call17, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call23 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call22, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call21, %struct.rtx_def* %call24)
  %call26 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call20, %struct.rtx_def* %call25)
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call26)
  %call28 = call %struct.rtx_def* @emit(%struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call29, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %19
}

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit(%struct.rtx_def*) #1

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

declare void @ix86_expand_move(i32, %struct.rtx_def**) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movhi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movstricthi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 3, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %10)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_reload_outqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %op0, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %op1, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %op2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %call = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 5519, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.gen_reload_outqi, i32 0, i32 0)) #3
  unreachable

if.end:                                           ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call6 = call i32 @q_regs_operand(%struct.rtx_def* %8, i32 2)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.11, label %if.then.8

if.then.8:                                        ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call9 = call %struct.rtx_def* @gen_movqi(%struct.rtx_def* %9, %struct.rtx_def* %10)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %op1, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.8, %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8
  %call12 = call %struct.rtx_def* @gen_movqi(%struct.rtx_def* %12, %struct.rtx_def* %13)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %14 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %14
}

declare i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

declare i32 @q_regs_operand(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movstrictqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 2, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %10)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movdi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_853(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

declare %struct.rtx_def* @peep2_find_free_register(i32, i32, i8*, i32, i64*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_854(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 2
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 3
  call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr1, %struct.rtx_def** %add.ptr2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx3, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %6, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call5)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx7, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand1, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand2, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 3
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand3, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %16, %struct.rtx_def* %17)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %18, %struct.rtx_def* %19)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %20
}

declare void @split_di(%struct.rtx_def**, i32, %struct.rtx_def**, %struct.rtx_def**) #1

declare %struct.rtx_def* @gen_lowpart(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_855(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 2
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 3
  call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr1, %struct.rtx_def** %add.ptr2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx3, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %6, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call5)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx7, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand1, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand2, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 3
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand3, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %16, %struct.rtx_def* %17)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %18, %struct.rtx_def* %19)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_856(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_long_move(%struct.rtx_def** %0)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

declare void @ix86_split_long_move(%struct.rtx_def**) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_857(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_long_move(%struct.rtx_def** %0)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_858(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_859(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 2
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  call void @split_di(%struct.rtx_def** %0, i32 2, %struct.rtx_def** %add.ptr, %struct.rtx_def** %add.ptr1)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand3, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand4, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand5, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %16)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %18)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_860(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 2
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  call void @split_di(%struct.rtx_def** %0, i32 2, %struct.rtx_def** %add.ptr, %struct.rtx_def** %add.ptr1)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand3, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand4, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand5, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %16)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %18)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movsf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 15, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_862(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx1 to %struct.rtx_def**
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call %struct.rtx_def* @get_pool_constant(%struct.rtx_def* %2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

declare %struct.rtx_def* @get_pool_constant(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_863(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -4)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 15, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_864(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 15, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movdf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 16, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_866(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_867(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_868(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_long_move(%struct.rtx_def** %0)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_869(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_long_move(%struct.rtx_def** %0)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movxf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 17, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movtf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 18, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_872(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_long_move(%struct.rtx_def** %0)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_873(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -12)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 17, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_874(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 18, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_875(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 18, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_876(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_long_move(%struct.rtx_def** %0)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_877(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx1 to %struct.rtx_def**
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call %struct.rtx_def* @get_pool_constant(%struct.rtx_def* %2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendhisi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_zero_extend_with_and, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @force_reg(i32 3, %struct.rtx_def* %5)
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call7 = call %struct.rtx_def* @gen_zero_extendhisi2_and(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx11 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand1.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 4, %struct.rtx_def* %12)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %11, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %14
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_879(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 65535)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendqihi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 3, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_881(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 3, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_882(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 2, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call7, %struct.rtx_def* %12)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_883(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 255)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 3, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendqisi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_885(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 4, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_886(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 2, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call7, %struct.rtx_def* %12)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_887(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %3)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 255)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_zero_extendsidi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_zero_extendsidi2_32(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx6 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %9)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_889(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  call void @split_di(%struct.rtx_def** %arrayidx, i32 1, %struct.rtx_def** %arrayidx1, %struct.rtx_def** %arrayidx2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand3, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand4, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %14)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %15 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_890(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  call void @split_di(%struct.rtx_def** %arrayidx, i32 1, %struct.rtx_def** %arrayidx1, %struct.rtx_def** %arrayidx2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand3, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand4, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %14)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %15 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_891(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  call void @split_di(%struct.rtx_def** %arrayidx, i32 1, %struct.rtx_def** %arrayidx1, %struct.rtx_def** %arrayidx2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand3, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand4, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %14)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %16)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendsidi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_extendsidi2_rex64(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx6 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx7 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx8 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 5, %struct.rtx_def* %10)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call10, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @emit(%struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_893(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  call void @split_di(%struct.rtx_def** %arrayidx, i32 1, %struct.rtx_def** %arrayidx1, %struct.rtx_def** %arrayidx2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand3, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand4, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %14)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call10 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %16)
  %call11 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 4, %struct.rtx_def* %call10, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call14)
  %call16 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call13, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call16)
  %call18 = call %struct.rtx_def* @emit(%struct.rtx_def* %call17)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call19 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call22, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_894(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  call void @split_di(%struct.rtx_def** %arrayidx, i32 1, %struct.rtx_def** %arrayidx1, %struct.rtx_def** %arrayidx2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 3
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %4, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call i32 @true_regnum(%struct.rtx_def* %8)
  %cmp = icmp eq i32 %call6, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call8 = call i32 @true_regnum(%struct.rtx_def* %10)
  %cmp9 = icmp eq i32 %call8, 1
  br i1 %cmp9, label %land.lhs.true.10, label %if.else

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %11 = load i32, i32* @optimize_size, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.10
  %12 = load i32, i32* @x86_use_cltd, align 4
  %13 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %13
  %and = and i32 %12, %shl
  %tobool11 = icmp ne i32 %and, 0
  br i1 %tobool11, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true.10
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 2
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call15 = call %struct.rtx_def* @gen_ashrsi3_31(%struct.rtx_def* %15, %struct.rtx_def* %17, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call15)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true, %entry
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 2
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 1
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %call19 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %19, %struct.rtx_def* %21)
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx20 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 2
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 2
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  %call22 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call23 = call %struct.rtx_def* @gen_ashrsi3_31(%struct.rtx_def* %23, %struct.rtx_def* %25, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call23)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx25 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %26, i64 4
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %28, i64 2
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %call27 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %27, %struct.rtx_def* %29)
  %call28 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call28, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %30 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %30
}

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @true_regnum(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_895(%struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  call void @split_di(%struct.rtx_def** %arrayidx, i32 1, %struct.rtx_def** %arrayidx1, %struct.rtx_def** %arrayidx2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 3
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call i32 @true_regnum(%struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call5 = call i32 @true_regnum(%struct.rtx_def* %6)
  %cmp = icmp ne i32 %call, %call5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call8 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %8, %struct.rtx_def* %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 3
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %call10 = call i32 @true_regnum(%struct.rtx_def* %12)
  %cmp11 = icmp eq i32 %call10, 0
  br i1 %cmp11, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.end
  %13 = load i32, i32* @optimize_size, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %14 = load i32, i32* @x86_use_cltd, align 4
  %15 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %15
  %and = and i32 %14, %shl
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %if.then.13, label %if.end.20

if.then.13:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 4
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 3
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %call16 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call17 = call %struct.rtx_def* @gen_ashrsi3_31(%struct.rtx_def* %17, %struct.rtx_def* %19, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call19, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

if.end.20:                                        ; preds = %lor.lhs.false, %if.end
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 4
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  %call22 = call i32 @true_regnum(%struct.rtx_def* %22)
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 1
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  %call24 = call i32 @true_regnum(%struct.rtx_def* %24)
  %cmp25 = icmp ne i32 %call22, %call24
  br i1 %cmp25, label %if.then.26, label %if.end.30

if.then.26:                                       ; preds = %if.end.20
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx27 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 4
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 1
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %call29 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %26, %struct.rtx_def* %28)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.26, %if.end.20
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx31 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8
  %31 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx32 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %31, i64 4
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx32, align 8
  %call33 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call34 = call %struct.rtx_def* @gen_ashrsi3_31(%struct.rtx_def* %30, %struct.rtx_def* %32, %struct.rtx_def* %call33)
  %call35 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call34)
  %call36 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call36, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %33 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %33, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.30, %if.then.13
  %34 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %34
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_896(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 16, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_897(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 16, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_898(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -12)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 17, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 17, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_899(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 18, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 18, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_900(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 18, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_901(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -12)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 17, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_902(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 18, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 17, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_903(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 18, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 18, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendsfdf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 16, %struct.rtx_def* %10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendsfxf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 17, %struct.rtx_def* %10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extendsftf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 18, %struct.rtx_def* %10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extenddfxf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 17, %struct.rtx_def* %10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extenddftf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %6)
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 123, i32 18, %struct.rtx_def* %10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_truncdfsf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct.rtx_def* @assign_386_stack_local(i32 15, i32 0)
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call5 = call %struct.rtx_def* @gen_truncdfsf2_sse_only(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %arrayidx8 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx9 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call11)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %11)
  %call14 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call14)
  %call16 = call %struct.rtx_def* @emit(%struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call17, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.else
  %13 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %13
}

declare %struct.rtx_def* @assign_386_stack_local(i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_910(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_911(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_912(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %7)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_truncxfsf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @assign_386_stack_local(i32 15, i32 0)
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand2, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %6)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  %call11 = call %struct.rtx_def* @emit(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_914(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_915(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %7)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_trunctfsf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @assign_386_stack_local(i32 15, i32 0)
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand2, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %6)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  %call11 = call %struct.rtx_def* @emit(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_917(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_918(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 15, %struct.rtx_def* %7)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_truncxfdf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @assign_386_stack_local(i32 16, i32 0)
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand2, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 16, %struct.rtx_def* %6)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  %call11 = call %struct.rtx_def* @emit(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_920(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 16, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_921(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 16, %struct.rtx_def* %7)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_trunctfdf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @assign_386_stack_local(i32 16, i32 0)
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand2, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 16, %struct.rtx_def* %6)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  %call11 = call %struct.rtx_def* @emit(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_923(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 16, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_924(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 124, i32 16, %struct.rtx_def* %7)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncxfdi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_trunctfdi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncdfdi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %out = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %3, 262144
  %cmp = icmp ne i32 %and2, 0
  br i1 %cmp, label %if.then, label %if.end.15

if.then:                                          ; preds = %land.lhs.true
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp4 = icmp eq i32 %bf.clear, 61
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %6, %cond.true ], [ %call, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %out, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %arrayidx6 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call7 = call %struct.rtx_def* @gen_fix_truncdfdi_sse(%struct.rtx_def* %7, %struct.rtx_def* %8)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %cmp10 = icmp ne %struct.rtx_def* %9, %10
  br i1 %cmp10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %cond.end
  %arrayidx12 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call13 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %12)
  br label %if.end

if.end:                                           ; preds = %if.then.11, %cond.end
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %retval
  br label %return

if.end.15:                                        ; preds = %land.lhs.true, %entry
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx17 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand1.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %16, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %19
}

declare %struct.rtx_def* @gen_reg_rtx(i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncsfdi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %out = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 327680
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %3, 33554432
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then, label %if.end.15

if.then:                                          ; preds = %land.lhs.true
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp4 = icmp eq i32 %bf.clear, 61
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %6, %cond.true ], [ %call, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %out, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %arrayidx6 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call7 = call %struct.rtx_def* @gen_fix_truncsfdi_sse(%struct.rtx_def* %7, %struct.rtx_def* %8)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %cmp10 = icmp ne %struct.rtx_def* %9, %10
  br i1 %cmp10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %cond.end
  %arrayidx12 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call13 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %12)
  br label %if.end

if.end:                                           ; preds = %if.then.11, %cond.end
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %retval
  br label %return

if.end.15:                                        ; preds = %land.lhs.true, %entry
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx17 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand1.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %16, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_929(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @assign_386_stack_local(i32 3, i32 1)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %call1 = call %struct.rtx_def* @assign_386_stack_local(i32 3, i32 2)
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx2, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call4 = call i32 @memory_operand(%struct.rtx_def* %3, i32 0)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @gen_fix_truncdi_memory(%struct.rtx_def* %5, %struct.rtx_def* %7, %struct.rtx_def* %9, %struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  br label %if.end

if.else:                                          ; preds = %entry
  %call11 = call %struct.rtx_def* @assign_386_stack_local(i32 5, i32 0)
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 4
  store %struct.rtx_def* %call11, %struct.rtx_def** %arrayidx12, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 2
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 3
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 4
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %call18 = call %struct.rtx_def* @gen_fix_truncdi_nomemory(%struct.rtx_def* %14, %struct.rtx_def* %16, %struct.rtx_def* %18, %struct.rtx_def* %20, %struct.rtx_def* %22)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call20 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call20, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %23 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %23
}

declare i32 @memory_operand(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_930(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand4, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand5, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %13)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %12, %struct.rtx_def* %call)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %16)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call13 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %18)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_931(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand4, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand5, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 5, %struct.rtx_def* %13)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %12, %struct.rtx_def* %call)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %16)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncxfsi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_trunctfsi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncdfsi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %out = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end.14

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp3 = icmp eq i32 %bf.clear, 61
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %5, %cond.true ], [ %call, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %out, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @gen_fix_truncdfsi_sse(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %cmp9 = icmp ne %struct.rtx_def* %8, %9
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %cond.end
  %arrayidx11 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call12 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %11)
  br label %if.end

if.end:                                           ; preds = %if.then.10, %cond.end
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

if.end.14:                                        ; preds = %entry
  %arrayidx15 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %16)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call20, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %18
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncsfsi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %out = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 327680
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end.14

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp3 = icmp eq i32 %bf.clear, 61
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %5, %cond.true ], [ %call, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %out, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @gen_fix_truncsfsi_sse(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %cmp9 = icmp ne %struct.rtx_def* %8, %9
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %cond.end
  %arrayidx11 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call12 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %11)
  br label %if.end

if.end:                                           ; preds = %if.then.10, %cond.end
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

if.end.14:                                        ; preds = %entry
  %arrayidx15 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %16)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call20, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %18
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_936(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @assign_386_stack_local(i32 3, i32 1)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %call1 = call %struct.rtx_def* @assign_386_stack_local(i32 3, i32 2)
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx2, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call4 = call i32 @memory_operand(%struct.rtx_def* %3, i32 0)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @gen_fix_truncsi_memory(%struct.rtx_def* %5, %struct.rtx_def* %7, %struct.rtx_def* %9, %struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  br label %if.end

if.else:                                          ; preds = %entry
  %call11 = call %struct.rtx_def* @assign_386_stack_local(i32 4, i32 0)
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 4
  store %struct.rtx_def* %call11, %struct.rtx_def** %arrayidx12, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 2
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 3
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 4
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %call18 = call %struct.rtx_def* @gen_fix_truncsi_nomemory(%struct.rtx_def* %14, %struct.rtx_def* %16, %struct.rtx_def* %18, %struct.rtx_def* %20, %struct.rtx_def* %22)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call20 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call20, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %23 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %23
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_937(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand4, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %11)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %12)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %13)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  %call10 = call %struct.rtx_def* @emit(%struct.rtx_def* %call9)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call11 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %15)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %14, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %16 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_938(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 4, %struct.rtx_def* %9)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %11)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call4, %struct.rtx_def* %call5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @emit(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncxfhi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 3, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_trunctfhi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 3, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncdfhi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 3, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_fix_truncsfhi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 3, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_943(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @assign_386_stack_local(i32 3, i32 1)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %call1 = call %struct.rtx_def* @assign_386_stack_local(i32 3, i32 2)
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx2, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call4 = call i32 @memory_operand(%struct.rtx_def* %3, i32 0)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @gen_fix_trunchi_memory(%struct.rtx_def* %5, %struct.rtx_def* %7, %struct.rtx_def* %9, %struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  br label %if.end

if.else:                                          ; preds = %entry
  %call11 = call %struct.rtx_def* @assign_386_stack_local(i32 3, i32 0)
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 4
  store %struct.rtx_def* %call11, %struct.rtx_def** %arrayidx12, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 2
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 3
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 4
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %call18 = call %struct.rtx_def* @gen_fix_trunchi_nomemory(%struct.rtx_def* %14, %struct.rtx_def* %16, %struct.rtx_def* %18, %struct.rtx_def* %20, %struct.rtx_def* %22)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call20 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call20, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %23 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %23
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_944(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 3, %struct.rtx_def* %9)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %11)
  %call7 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call4, %struct.rtx_def* %call5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call7)
  %call9 = call %struct.rtx_def* @emit(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_945(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand4, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 126, i32 3, %struct.rtx_def* %11)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %12)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %13)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %14)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call13 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %16)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatsisf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatdisf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 15, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatsidf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_floatdidf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 16, %struct.rtx_def* %1)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_950(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @ix86_force_to_memory(i32 %bf.clear, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load4 = load i32, i32* %8, align 8
  %bf.lshr5 = lshr i32 %bf.load4, 16
  %bf.clear6 = and i32 %bf.lshr5, 255
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 %bf.clear6, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 2
  store %struct.rtx_def* %call8, %struct.rtx_def** %arrayidx9, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 2
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %15)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load15 = load i32, i32* %18, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 16
  %bf.clear17 = and i32 %bf.lshr16, 255
  call void @ix86_free_from_memory(i32 %bf.clear17)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %19
}

declare %struct.rtx_def* @ix86_force_to_memory(i32, %struct.rtx_def*) #1

declare void @ix86_free_from_memory(i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_adddi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 75, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

declare void @ix86_expand_binary_operator(i32, i32, %struct.rtx_def**) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_952(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 3
  call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr1, %struct.rtx_def** %add.ptr2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 4
  call void @split_di(%struct.rtx_def** %add.ptr3, i32 1, %struct.rtx_def** %add.ptr4, %struct.rtx_def** %add.ptr5)
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 2
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 5
  call void @split_di(%struct.rtx_def** %add.ptr6, i32 1, %struct.rtx_def** %add.ptr7, %struct.rtx_def** %add.ptr8)
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand2, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 3
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand3, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %operand4, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 5
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %operand5, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call14 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %21, %struct.rtx_def* %22)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 52, %struct.rtvec_def* %call14, i32 12)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call15)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call17 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %24)
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call18 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %25)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call17, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %23, %struct.rtx_def* %call19)
  %call21 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call16, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call21)
  %call23 = call %struct.rtx_def* @emit(%struct.rtx_def* %call22)
  %26 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call24 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 4, %struct.rtx_def* %call24, %struct.rtx_def* %27)
  %28 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call25, %struct.rtx_def* %28)
  %29 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call26, %struct.rtx_def* %29)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %26, %struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call29)
  %call31 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call28, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call31)
  %call33 = call %struct.rtx_def* @emit(%struct.rtx_def* %call32)
  %call34 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call34, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %30 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %30
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 75, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_954(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %7 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %7, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  %cond7 = select i1 %tobool6, i32 5, i32 4
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @gen_lowpart(i32 %cond7, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 2
  store %struct.rtx_def* %call9, %struct.rtx_def** %arrayidx10, align 8
  %11 = load i32, i32* @target_flags, align 4
  %and11 = and i32 %11, 33554432
  %tobool12 = icmp ne i32 %and11, 0
  %cond13 = select i1 %tobool12, i32 5, i32 4
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 3
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %call15 = call %struct.rtx_def* @gen_lowpart(i32 %cond13, %struct.rtx_def* %13)
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 3
  store %struct.rtx_def* %call15, %struct.rtx_def** %arrayidx16, align 8
  %15 = load i32, i32* @target_flags, align 4
  %and17 = and i32 %15, 33554432
  %tobool18 = icmp ne i32 %and17, 0
  %cond19 = select i1 %tobool18, i32 5, i32 4
  %16 = load i32, i32* @target_flags, align 4
  %and20 = and i32 %16, 33554432
  %tobool21 = icmp ne i32 %and20, 0
  %cond22 = select i1 %tobool21, i32 5, i32 4
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 1
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 2
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond22, %struct.rtx_def* %18, %struct.rtx_def* %20)
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 3
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond19, %struct.rtx_def* %call25, %struct.rtx_def* %22)
  store %struct.rtx_def* %call27, %struct.rtx_def** %pat, align 8
  %23 = load i32, i32* @target_flags, align 4
  %and28 = and i32 %23, 33554432
  %tobool29 = icmp ne i32 %and28, 0
  %cond30 = select i1 %tobool29, i32 5, i32 4
  %cmp = icmp ne i32 %cond30, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %24 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call31 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %24, i32 0)
  store %struct.rtx_def* %call31, %struct.rtx_def** %pat, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx32 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 0
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx32, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call33 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %26, %struct.rtx_def* %27)
  %call34 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call33)
  %call35 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call35, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %28 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %28
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_955(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %4 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %4, 33554432
  %tobool3 = icmp ne i32 %and2, 0
  %cond4 = select i1 %tobool3, i32 5, i32 4
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @gen_lowpart(i32 %cond4, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx7, align 8
  %8 = load i32, i32* @target_flags, align 4
  %and8 = and i32 %8, 33554432
  %tobool9 = icmp ne i32 %and8, 0
  %cond10 = select i1 %tobool9, i32 5, i32 4
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call12 = call %struct.rtx_def* @gen_lowpart(i32 %cond10, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 3
  store %struct.rtx_def* %call12, %struct.rtx_def** %arrayidx13, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand0, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand1, align 8
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 2
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %operand2, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 3
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %operand3, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %21, %struct.rtx_def* %22)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call18, %struct.rtx_def* %23)
  %call20 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %call19, i32 0)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %20, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call24, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %24 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %24
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_956(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %7 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %7, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  %cond7 = select i1 %tobool6, i32 5, i32 4
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 3
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @gen_lowpart(i32 %cond7, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 3
  store %struct.rtx_def* %call9, %struct.rtx_def** %arrayidx10, align 8
  %11 = load i32, i32* @target_flags, align 4
  %and11 = and i32 %11, 33554432
  %tobool12 = icmp ne i32 %and11, 0
  %cond13 = select i1 %tobool12, i32 5, i32 4
  %12 = load i32, i32* @target_flags, align 4
  %and14 = and i32 %12, 33554432
  %tobool15 = icmp ne i32 %and14, 0
  %cond16 = select i1 %tobool15, i32 5, i32 4
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 2
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %cond16, %struct.rtx_def* %14, %struct.rtx_def* %16)
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx20 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 3
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond13, %struct.rtx_def* %call19, %struct.rtx_def* %18)
  store %struct.rtx_def* %call21, %struct.rtx_def** %pat, align 8
  %19 = load i32, i32* @target_flags, align 4
  %and22 = and i32 %19, 33554432
  %tobool23 = icmp ne i32 %and22, 0
  %cond24 = select i1 %tobool23, i32 5, i32 4
  %cmp = icmp ne i32 %cond24, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %20 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call25 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %20, i32 0)
  store %struct.rtx_def* %call25, %struct.rtx_def** %pat, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %22, %struct.rtx_def* %23)
  %call28 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call29, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %24 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %24
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_957(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %4 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %4, 33554432
  %tobool3 = icmp ne i32 %and2, 0
  %cond4 = select i1 %tobool3, i32 5, i32 4
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 3
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @gen_lowpart(i32 %cond4, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx7, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand1, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand2, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 3
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand3, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 5, %struct.rtx_def* %17, %struct.rtx_def* %18)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call12, %struct.rtx_def* %19)
  %call14 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %call13, i32 0)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %16, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_958(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %7 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %7, 33554432
  %tobool6 = icmp ne i32 %and5, 0
  %cond7 = select i1 %tobool6, i32 5, i32 4
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 3
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @gen_lowpart(i32 %cond7, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 3
  store %struct.rtx_def* %call9, %struct.rtx_def** %arrayidx10, align 8
  %11 = load i32, i32* @target_flags, align 4
  %and11 = and i32 %11, 33554432
  %tobool12 = icmp ne i32 %and11, 0
  %cond13 = select i1 %tobool12, i32 5, i32 4
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %call15 = call %struct.rtx_def* @gen_lowpart(i32 %cond13, %struct.rtx_def* %13)
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 4
  store %struct.rtx_def* %call15, %struct.rtx_def** %arrayidx16, align 8
  %15 = load i32, i32* @target_flags, align 4
  %and17 = and i32 %15, 33554432
  %tobool18 = icmp ne i32 %and17, 0
  %cond19 = select i1 %tobool18, i32 5, i32 4
  %16 = load i32, i32* @target_flags, align 4
  %and20 = and i32 %16, 33554432
  %tobool21 = icmp ne i32 %and20, 0
  %cond22 = select i1 %tobool21, i32 5, i32 4
  %17 = load i32, i32* @target_flags, align 4
  %and23 = and i32 %17, 33554432
  %tobool24 = icmp ne i32 %and23, 0
  %cond25 = select i1 %tobool24, i32 5, i32 4
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx27 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 2
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %cond25, %struct.rtx_def* %19, %struct.rtx_def* %21)
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx29 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 3
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond22, %struct.rtx_def* %call28, %struct.rtx_def* %23)
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx31 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 4
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond19, %struct.rtx_def* %call30, %struct.rtx_def* %25)
  store %struct.rtx_def* %call32, %struct.rtx_def** %pat, align 8
  %26 = load i32, i32* @target_flags, align 4
  %and33 = and i32 %26, 33554432
  %tobool34 = icmp ne i32 %and33, 0
  %cond35 = select i1 %tobool34, i32 5, i32 4
  %cmp = icmp ne i32 %cond35, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %27 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call36 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %27, i32 0)
  store %struct.rtx_def* %call36, %struct.rtx_def** %pat, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx37 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %28, i64 0
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx37, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call38 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %29, %struct.rtx_def* %30)
  %call39 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call38)
  %call40 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call40, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %31 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %31
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_959(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %4 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %4, 33554432
  %tobool3 = icmp ne i32 %and2, 0
  %cond4 = select i1 %tobool3, i32 5, i32 4
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 3
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @gen_lowpart(i32 %cond4, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx7, align 8
  %8 = load i32, i32* @target_flags, align 4
  %and8 = and i32 %8, 33554432
  %tobool9 = icmp ne i32 %and8, 0
  %cond10 = select i1 %tobool9, i32 5, i32 4
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call12 = call %struct.rtx_def* @gen_lowpart(i32 %cond10, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  store %struct.rtx_def* %call12, %struct.rtx_def** %arrayidx13, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand0, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand1, align 8
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 2
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %operand2, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 3
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %operand3, align 8
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %operand4, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 5, %struct.rtx_def* %23, %struct.rtx_def* %24)
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call19, %struct.rtx_def* %25)
  %26 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call20, %struct.rtx_def* %26)
  %call22 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %call21, i32 0)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %22, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call26, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %27 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %27
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_960(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_961(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %cmp = icmp ne i32 %bf.clear, %cond
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %4, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond3 = select i1 %tobool2, i32 5, i32 4
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 %cond3, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx5, align 8
  %8 = load i32, i32* @target_flags, align 4
  %and6 = and i32 %8, 33554432
  %tobool7 = icmp ne i32 %and6, 0
  %cond8 = select i1 %tobool7, i32 5, i32 4
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %call10 = call %struct.rtx_def* @gen_lowpart(i32 %cond8, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 2
  store %struct.rtx_def* %call10, %struct.rtx_def** %arrayidx11, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %call13 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %13)
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 0
  store %struct.rtx_def* %call13, %struct.rtx_def** %arrayidx14, align 8
  %15 = load i32, i32* @target_flags, align 4
  %and15 = and i32 %15, 33554432
  %tobool16 = icmp ne i32 %and15, 0
  %cond17 = select i1 %tobool16, i32 5, i32 4
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 2
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond17, %struct.rtx_def* %17, %struct.rtx_def* %19)
  store %struct.rtx_def* %call20, %struct.rtx_def** %pat, align 8
  %20 = load i32, i32* @target_flags, align 4
  %and21 = and i32 %20, 33554432
  %tobool22 = icmp ne i32 %and21, 0
  %cond23 = select i1 %tobool22, i32 5, i32 4
  %cmp24 = icmp ne i32 %cond23, 4
  br i1 %cmp24, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call26 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %21, i32 0)
  store %struct.rtx_def* %call26, %struct.rtx_def** %pat, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.25, %if.end
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 0
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %23, %struct.rtx_def* %24)
  %call30 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call31, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %25 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %25
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_962(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %4 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %4, 33554432
  %tobool3 = icmp ne i32 %and2, 0
  %cond4 = select i1 %tobool3, i32 5, i32 4
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @gen_lowpart(i32 %cond4, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx7, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand1, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand2, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %15, %struct.rtx_def* %16)
  %call12 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %call11, i32 0)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %14, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 75, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 75, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addxf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 17, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addtf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 18, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_adddf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 16, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_addsf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 15, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subdi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 76, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_970(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 3
  call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr1, %struct.rtx_def** %add.ptr2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 4
  call void @split_di(%struct.rtx_def** %add.ptr3, i32 1, %struct.rtx_def** %add.ptr4, %struct.rtx_def** %add.ptr5)
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 2
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 5
  call void @split_di(%struct.rtx_def** %add.ptr6, i32 1, %struct.rtx_def** %add.ptr7, %struct.rtx_def** %add.ptr8)
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand2, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 3
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand3, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %operand4, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 5
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %operand5, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %21, %struct.rtx_def* %22)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call14)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call16 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %24)
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call17 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %25)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 4, %struct.rtx_def* %call16, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %23, %struct.rtx_def* %call18)
  %call20 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call15, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call20)
  %call22 = call %struct.rtx_def* @emit(%struct.rtx_def* %call21)
  %26 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call23 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %28 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 4, %struct.rtx_def* %call23, %struct.rtx_def* %28)
  %29 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call24, %struct.rtx_def* %29)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 4, %struct.rtx_def* %27, %struct.rtx_def* %call25)
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %26, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call28)
  %call30 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call27, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call30)
  %call32 = call %struct.rtx_def* @emit(%struct.rtx_def* %call31)
  %call33 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call33, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %30 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %30
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 76, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 76, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 76, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subxf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 17, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subtf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 18, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subdf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 16, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_subsf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 15, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_muldi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 3, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 2, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  ret %struct.rtx_def* %call5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_umulqihi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 3, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 3, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 3, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulqihi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 3, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 3, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 3, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_umulditi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 6, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 6, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_umulsidi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 5, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulditi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 6, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 6, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulsidi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 5, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 5, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 5, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_umuldi3_highpart(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 6, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 6, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 64)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 6, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 5, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 5)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call6, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_umulsi3_highpart(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 5, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 4, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call6, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_smuldi3_highpart(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 6, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 6, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 6, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 64)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 6, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 5, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 5)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call6, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_smulsi3_highpart(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 5, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 5, %struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 5, %struct.rtx_def* %call, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 90, i32 5, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 122, i32 4, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call6, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  ret %struct.rtx_def* %call12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulxf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 17, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_multf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 18, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_muldf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 16, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mulsf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 15, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divxf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 17, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divtf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 18, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divdf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 16, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divsf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 15, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divmoddi4(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 80, i32 5, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1001(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @x86_use_cltd, align 4
  %1 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %1
  %and = and i32 %0, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.else.12, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @optimize_size, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.else.12, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call i32 @true_regnum(%struct.rtx_def* %4)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %6, %struct.rtx_def* %8)
  br label %if.end

if.else:                                          ; preds = %if.then
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 3
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 4
  store %struct.rtx_def* %14, %struct.rtx_def** %arrayidx11, align 8
  br label %if.end.20

if.else.12:                                       ; preds = %land.lhs.true, %entry
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %call14 = call i32 @true_regnum(%struct.rtx_def* %17)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.else.12
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 9237, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.gen_split_1001, i32 0, i32 0)) #3
  unreachable

if.end.17:                                        ; preds = %if.else.12
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 4
  store %struct.rtx_def* %19, %struct.rtx_def** %arrayidx19, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.17, %if.end
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %operand0, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx22 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 1
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %operand1, align 8
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 2
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %operand2, align 8
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 3
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %operand3, align 8
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx25 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %operand4, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call26 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 63)
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 5, %struct.rtx_def* %32, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %31, %struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call29)
  %call31 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call28, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call31)
  %call33 = call %struct.rtx_def* @emit(%struct.rtx_def* %call32)
  %33 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call34 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 0)
  %34 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 5, %struct.rtx_def* %call34, %struct.rtx_def* %34)
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %33, %struct.rtx_def* %call35)
  %35 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call37 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %35)
  %call38 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 0)
  %36 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call39 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %36)
  %call40 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 80, i32 5, %struct.rtx_def* %call38, %struct.rtx_def* %call39)
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call37, %struct.rtx_def* %call40)
  %37 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call42 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %37)
  %call43 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call42)
  %call44 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call45 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call44)
  %call46 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call36, %struct.rtx_def* %call41, %struct.rtx_def* %call43, %struct.rtx_def* %call45)
  %call47 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call46)
  %call48 = call %struct.rtx_def* @emit(%struct.rtx_def* %call47)
  %call49 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call49, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %38 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %38
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_divmodsi4(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 4, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 80, i32 4, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call1, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  ret %struct.rtx_def* %call7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1003(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @x86_use_cltd, align 4
  %1 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %1
  %and = and i32 %0, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.else.12, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @optimize_size, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.else.12, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call i32 @true_regnum(%struct.rtx_def* %4)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %6, %struct.rtx_def* %8)
  br label %if.end

if.else:                                          ; preds = %if.then
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %call9 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 3
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 4
  store %struct.rtx_def* %14, %struct.rtx_def** %arrayidx11, align 8
  br label %if.end.20

if.else.12:                                       ; preds = %land.lhs.true, %entry
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %call14 = call i32 @true_regnum(%struct.rtx_def* %17)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.else.12
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 9329, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.gen_split_1003, i32 0, i32 0)) #3
  unreachable

if.end.17:                                        ; preds = %if.else.12
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 4
  store %struct.rtx_def* %19, %struct.rtx_def** %arrayidx19, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.17, %if.end
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %operand0, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx22 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 1
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %operand1, align 8
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 2
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %operand2, align 8
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 3
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %operand3, align 8
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx25 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %operand4, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call26 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 89, i32 4, %struct.rtx_def* %32, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %31, %struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call29)
  %call31 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call28, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call31)
  %call33 = call %struct.rtx_def* @emit(%struct.rtx_def* %call32)
  %33 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call34 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 0)
  %34 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 79, i32 4, %struct.rtx_def* %call34, %struct.rtx_def* %34)
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %33, %struct.rtx_def* %call35)
  %35 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call37 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %35)
  %call38 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 0)
  %36 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call39 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %36)
  %call40 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 80, i32 4, %struct.rtx_def* %call38, %struct.rtx_def* %call39)
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call37, %struct.rtx_def* %call40)
  %37 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call42 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %37)
  %call43 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call42)
  %call44 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call45 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call44)
  %call46 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call36, %struct.rtx_def* %call41, %struct.rtx_def* %call43, %struct.rtx_def* %call45)
  %call47 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call46)
  %call48 = call %struct.rtx_def* @emit(%struct.rtx_def* %call47)
  %call49 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call49, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %38 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %38
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1004(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 81, i32 5, %struct.rtx_def* %11, %struct.rtx_def* %12)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call5)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %13)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %15)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 82, i32 5, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call7, %struct.rtx_def* %call10)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call12 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %16)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call14)
  %call16 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call11, %struct.rtx_def* %call13, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call16)
  %call18 = call %struct.rtx_def* @emit(%struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call19, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1005(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 81, i32 4, %struct.rtx_def* %11, %struct.rtx_def* %12)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call5)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %13)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %15)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 82, i32 4, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call7, %struct.rtx_def* %call10)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call12 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %16)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call14)
  %call16 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call11, %struct.rtx_def* %call13, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call16)
  %call18 = call %struct.rtx_def* @emit(%struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call19, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_udivmodhi4(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [5 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 3)
  %arrayidx4 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx6 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx7 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx8 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx9 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand4, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 81, i32 3, %struct.rtx_def* %12, %struct.rtx_def* %13)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %11, %struct.rtx_def* %call12)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 82, i32 3, %struct.rtx_def* %15, %struct.rtx_def* %16)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %14, %struct.rtx_def* %call14)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %17)
  %call17 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call17)
  %call19 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call13, %struct.rtx_def* %call15, %struct.rtx_def* %call16, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call19)
  %call21 = call %struct.rtx_def* @emit(%struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call22, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %18
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_testsi_ccno_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call1, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_testqi_ccz_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 2, %struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 56, %struct.rtx_def* %call1, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_testqi_ext_ccno_0(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call3, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call4, %struct.rtx_def* %2)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1010(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %len = alloca i64, align 8
  %pos = alloca i64, align 8
  %mask = alloca i64, align 8
  %mode = alloca i32, align 4
  %submode = alloca i32, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx1 to i64*
  %2 = load i64, i64* %rtwint, align 8
  store i64 %2, i64* %len, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 0
  %rtwint5 = bitcast %union.rtunion_def* %arrayidx4 to i64*
  %5 = load i64, i64* %rtwint5, align 8
  store i64 %5, i64* %pos, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %mode, align 4
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load8 = load i32, i32* %11, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp = icmp eq i32 %bf.clear9, 66
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load11 = load i32, i32* %14, align 8
  %bf.lshr12 = lshr i32 %bf.load11, 27
  %bf.clear13 = and i32 %bf.lshr12, 1
  %tobool = icmp ne i32 %bf.clear13, 0
  br i1 %tobool, label %if.end, label %if.then.14

if.then.14:                                       ; preds = %if.then
  %15 = load i64, i64* %pos, align 8
  %16 = load i64, i64* %len, align 8
  %add = add nsw i64 %15, %16
  %conv = trunc i64 %add to i32
  %call = call i32 @smallest_mode_for_size(i32 %conv, i32 1)
  store i32 %call, i32* %mode, align 4
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 0
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %19 = load i32, i32* %mode, align 4
  %call16 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %18, i32 %19, i64 0, i32 1, i32 1)
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 0
  store %struct.rtx_def* %call16, %struct.rtx_def** %arrayidx17, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.then
  br label %if.end.62

if.else:                                          ; preds = %entry
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 0
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load19 = load i32, i32* %23, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 63
  br i1 %cmp21, label %land.lhs.true, label %if.else.49

land.lhs.true:                                    ; preds = %if.else
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 0
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load26 = load i32, i32* %27, align 8
  %bf.lshr27 = lshr i32 %bf.load26, 16
  %bf.clear28 = and i32 %bf.lshr27, 255
  store i32 %bf.clear28, i32* %submode, align 4
  %28 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %28 to i64
  %arrayidx29 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %29 = load i16, i16* %arrayidx29, align 2
  %conv30 = zext i16 %29 to i32
  %30 = load i32, i32* %submode, align 4
  %idxprom31 = sext i32 %30 to i64
  %arrayidx32 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom31
  %31 = load i16, i16* %arrayidx32, align 2
  %conv33 = zext i16 %31 to i32
  %cmp34 = icmp sgt i32 %conv30, %conv33
  br i1 %cmp34, label %land.lhs.true.36, label %if.else.49

land.lhs.true.36:                                 ; preds = %land.lhs.true
  %32 = load i64, i64* %pos, align 8
  %33 = load i64, i64* %len, align 8
  %add37 = add nsw i64 %32, %33
  %34 = load i32, i32* %submode, align 4
  %idxprom38 = sext i32 %34 to i64
  %arrayidx39 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom38
  %35 = load i16, i16* %arrayidx39, align 2
  %conv40 = zext i16 %35 to i64
  %cmp41 = icmp sle i64 %add37, %conv40
  br i1 %cmp41, label %if.then.43, label %if.else.49

if.then.43:                                       ; preds = %land.lhs.true.36
  %36 = load i32, i32* %submode, align 4
  store i32 %36, i32* %mode, align 4
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx44 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %37, i64 0
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx44, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx48 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 0
  store %struct.rtx_def* %39, %struct.rtx_def** %arrayidx48, align 8
  br label %if.end.61

if.else.49:                                       ; preds = %land.lhs.true.36, %land.lhs.true, %if.else
  %41 = load i32, i32* %mode, align 4
  %cmp50 = icmp eq i32 %41, 3
  br i1 %cmp50, label %land.lhs.true.52, label %if.end.60

land.lhs.true.52:                                 ; preds = %if.else.49
  %42 = load i64, i64* %pos, align 8
  %43 = load i64, i64* %len, align 8
  %add53 = add nsw i64 %42, %43
  %cmp54 = icmp sle i64 %add53, 8
  br i1 %cmp54, label %if.then.56, label %if.end.60

if.then.56:                                       ; preds = %land.lhs.true.52
  store i32 2, i32* %mode, align 4
  %44 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx57 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %44, i64 0
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx57, align 8
  %call58 = call %struct.rtx_def* @gen_lowpart(i32 2, %struct.rtx_def* %45)
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx59 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %46, i64 0
  store %struct.rtx_def* %call58, %struct.rtx_def** %arrayidx59, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.56, %land.lhs.true.52, %if.else.49
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.then.43
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.end
  %47 = load i64, i64* %pos, align 8
  %48 = load i64, i64* %len, align 8
  %add63 = add nsw i64 %47, %48
  %shl = shl i64 1, %add63
  %sub = sub nsw i64 %shl, 1
  store i64 %sub, i64* %mask, align 8
  %49 = load i64, i64* %pos, align 8
  %shl64 = shl i64 1, %49
  %sub65 = sub nsw i64 %shl64, 1
  %neg = xor i64 %sub65, -1
  %50 = load i64, i64* %mask, align 8
  %and = and i64 %50, %neg
  store i64 %and, i64* %mask, align 8
  %51 = load i32, i32* %mode, align 4
  %52 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx66 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %52, i64 0
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx66, align 8
  %54 = load i64, i64* %mask, align 8
  %55 = load i32, i32* %mode, align 4
  %call67 = call i64 @trunc_int_for_mode(i64 %54, i32 %55)
  %call68 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call67)
  %call69 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 %51, %struct.rtx_def* %53, %struct.rtx_def* %call68)
  %56 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx70 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %56, i64 3
  store %struct.rtx_def* %call69, %struct.rtx_def** %arrayidx70, align 8
  %57 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx71 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %57, i64 0
  %58 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx71, align 8
  store %struct.rtx_def* %58, %struct.rtx_def** %operand0, align 8
  %59 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx72 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %59, i64 1
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx72, align 8
  store %struct.rtx_def* %60, %struct.rtx_def** %operand1, align 8
  %61 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx73 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %61, i64 2
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx73, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %operand2, align 8
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx74 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %63, i64 3
  %64 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx74, align 8
  store %struct.rtx_def* %64, %struct.rtx_def** %operand3, align 8
  %call75 = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %65 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call76 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %65, %struct.rtx_def* %66)
  %call77 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call75, %struct.rtx_def* %call76)
  %call78 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call77)
  %call79 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call79, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %67 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %67
}

declare i32 @smallest_mode_for_size(i32, i32) #1

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #1

declare i64 @trunc_int_for_mode(i64, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_anddi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 83, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_andsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 83, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1013(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 3, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call4, %struct.rtx_def* %8)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1014(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 2, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call4, %struct.rtx_def* %8)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1015(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %5, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %6)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call8 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call7, %struct.rtx_def* %call8)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call10 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %7)
  %call11 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call12 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %call10, %struct.rtx_def* %call11, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call9, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call15, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call18)
  %call20 = call %struct.rtx_def* @emit(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_andhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 83, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_andqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 83, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_iordi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 84, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_iorsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 84, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_iorhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 84, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_iorqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 84, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_xordi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 85, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_xorsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 85, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_xorhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 85, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_xorqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 85, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_xorqi_cc_ext_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %0, %struct.rtx_def* %call1, %struct.rtx_def* %call2)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call3, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call4, %struct.rtx_def* %2)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call5)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call8 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %3, %struct.rtx_def* %call7, %struct.rtx_def* %call8)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call11 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %4, %struct.rtx_def* %call10, %struct.rtx_def* %call11)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call12, %struct.rtx_def* %5)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call6, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  ret %struct.rtx_def* %call16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negdi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 77, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

declare void @ix86_expand_unary_operator(i32, i32, %struct.rtx_def**) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1028(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 2
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 3
  call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr1, %struct.rtx_def** %add.ptr2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  call void @split_di(%struct.rtx_def** %add.ptr3, i32 1, %struct.rtx_def** %add.ptr4, %struct.rtx_def** %add.ptr5)
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand1, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 2
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand2, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 3
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand3, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 4, %struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 56, %struct.rtx_def* %call9, %struct.rtx_def* %15)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call10)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call12 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %17)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 4, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %16, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call11, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @emit(%struct.rtx_def* %call16)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %19 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 4, %struct.rtx_def* %call18, %struct.rtx_def* %19)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call19, %struct.rtx_def* %20)
  %21 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call20, %struct.rtx_def* %21)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %18, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call23)
  %call25 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call22, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call25)
  %call27 = call %struct.rtx_def* @emit(%struct.rtx_def* %call26)
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call28 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %22)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call29 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %23)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 4, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call28, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call33 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call32)
  %call34 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call31, %struct.rtx_def* %call33)
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call34)
  %call36 = call %struct.rtx_def* @emit(%struct.rtx_def* %call35)
  %call37 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call37, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %24 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %24
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negsi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 77, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_neghi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 77, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negqi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 77, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negsf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %reg = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 327680
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end.35

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call = call i32 @memory_operand(%struct.rtx_def* %3, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call5 = call i32 @rtx_equal_p(%struct.rtx_def* %4, %struct.rtx_def* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %call10 = call %struct.rtx_def* @gen_negsf2_memory(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  br label %if.end.33

if.else:                                          ; preds = %land.lhs.true, %if.then
  %call12 = call %struct.rtx_def* @gen_reg_rtx(i32 15)
  store %struct.rtx_def* %call12, %struct.rtx_def** %reg, align 8
  %arrayidx13 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %dest, align 8
  %arrayidx14 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %call15 = call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %9)
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call15, %struct.rtx_def** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %call18 = call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %10)
  %arrayidx19 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call18, %struct.rtx_def** %arrayidx19, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call20 = call i64 @trunc_int_for_mode(i64 2147483648, i32 4)
  %call21 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call20)
  %call22 = call %struct.rtx_def* @gen_lowpart(i32 15, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %call22)
  %arrayidx24 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %arrayidx25 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call26 = call %struct.rtx_def* @gen_negsf2_ifs(%struct.rtx_def* %12, %struct.rtx_def* %13, %struct.rtx_def* %14)
  %call27 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call26)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %arrayidx28 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %cmp29 = icmp ne %struct.rtx_def* %15, %16
  br i1 %cmp29, label %if.then.30, label %if.end

if.then.30:                                       ; preds = %if.else
  %17 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %arrayidx31 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8
  %call32 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %17, %struct.rtx_def* %18)
  br label %if.end

if.end:                                           ; preds = %if.then.30, %if.else
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %if.then.7
  %call34 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call34, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

if.end.35:                                        ; preds = %entry
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 77, i32 15, %struct.rtx_def** %arraydecay)
  %call36 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call36, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.35, %if.end.33
  %21 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %21
}

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1033(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1034(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1035(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @operands_match_p(%struct.rtx_def* %1, %struct.rtx_def* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %tmp, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 1
  store %struct.rtx_def* %7, %struct.rtx_def** %arrayidx4, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 2
  store %struct.rtx_def* %9, %struct.rtx_def** %arrayidx5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand0, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 2
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand2, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %17, i32 0)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %18, i32 0)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %19, i32 0)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 6, %struct.rtx_def* %call10, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %20
}

declare i32 @operands_match_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1036(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1037(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call i64 @trunc_int_for_mode(i64 2147483648, i32 4)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %3 = load i32, i32* %rtuint, align 4
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %3)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  store %struct.rtx_def* %call4, %struct.rtx_def** %arrayidx5, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call8, %struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call11)
  %call13 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call10, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call13)
  %call15 = call %struct.rtx_def* @emit(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1038(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %size = alloca i32, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx1 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx1, align 1
  %conv = zext i8 %3 to i32
  store i32 %conv, i32* %size, align 4
  %4 = load i32, i32* %size, align 4
  %cmp = icmp sge i32 %4, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 10, i32* %size, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %7 = load i32, i32* %size, align 4
  %sub = sub nsw i32 %7, 1
  %conv4 = sext i32 %sub to i64
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %6, i32 2, i64 %conv4, i32 1, i32 1)
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call i64 @trunc_int_for_mode(i64 128, i32 2)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call6)
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 1
  store %struct.rtx_def* %call7, %struct.rtx_def** %arrayidx8, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand0, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand1, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call11 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 2, %struct.rtx_def* %call11, %struct.rtx_def* %16)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %14, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call14)
  %call16 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call13, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call16)
  %call18 = call %struct.rtx_def* @emit(%struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call19, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negdf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %reg = alloca %struct.rtx_def*, align 8
  %imm = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end.35

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call = call i32 @memory_operand(%struct.rtx_def* %3, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call5 = call i32 @rtx_equal_p(%struct.rtx_def* %4, %struct.rtx_def* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %call10 = call %struct.rtx_def* @gen_negdf2_memory(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  br label %if.end.33

if.else:                                          ; preds = %land.lhs.true, %if.then
  %call12 = call %struct.rtx_def* @gen_reg_rtx(i32 16)
  store %struct.rtx_def* %call12, %struct.rtx_def** %reg, align 8
  %call13 = call i64 @trunc_int_for_mode(i64 -9223372036854775808, i32 5)
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call13)
  store %struct.rtx_def* %call14, %struct.rtx_def** %imm, align 8
  %arrayidx15 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %dest, align 8
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %call17 = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %9)
  %arrayidx18 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call17, %struct.rtx_def** %arrayidx18, align 8
  %arrayidx19 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %call20 = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %10)
  %arrayidx21 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call20, %struct.rtx_def** %arrayidx21, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %imm, align 8
  %call22 = call %struct.rtx_def* @gen_lowpart(i32 16, %struct.rtx_def* %12)
  %call23 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %call22)
  %arrayidx24 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %arrayidx25 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call26 = call %struct.rtx_def* @gen_negdf2_ifs(%struct.rtx_def* %13, %struct.rtx_def* %14, %struct.rtx_def* %15)
  %call27 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call26)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %arrayidx28 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %cmp29 = icmp ne %struct.rtx_def* %16, %17
  br i1 %cmp29, label %if.then.30, label %if.end

if.then.30:                                       ; preds = %if.else
  %18 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %arrayidx31 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8
  %call32 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %18, %struct.rtx_def* %19)
  br label %if.end

if.end:                                           ; preds = %if.then.30, %if.else
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %if.then.7
  %call34 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call34, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

if.end.35:                                        ; preds = %entry
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 77, i32 16, %struct.rtx_def** %arraydecay)
  %call36 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call36, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.35, %if.end.33
  %22 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %22
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1040(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 16, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1041(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 16, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1042(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx7, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand2, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 5, %struct.rtx_def* %16, %struct.rtx_def* %17)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @emit(%struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %18
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1043(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @operands_match_p(%struct.rtx_def* %1, %struct.rtx_def* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %tmp, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 1
  store %struct.rtx_def* %7, %struct.rtx_def** %arrayidx4, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 2
  store %struct.rtx_def* %9, %struct.rtx_def** %arrayidx5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand0, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 2
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand2, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %17, i32 0)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %18, i32 0)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %19, i32 0)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 6, %struct.rtx_def* %call10, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1044(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 16, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1045(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call i64 @trunc_int_for_mode(i64 2147483648, i32 4)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 4
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 2
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 3
  call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr2, %struct.rtx_def** %add.ptr3)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand3, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand4, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call9, %struct.rtx_def* %16)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %14, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call12)
  %call14 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call11, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call14)
  %call16 = call %struct.rtx_def* @emit(%struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call17, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negxf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 77, i32 17, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_negtf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 77, i32 18, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1048(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 17, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1049(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32768)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call2 = call i32 @true_regnum(%struct.rtx_def* %2)
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 1, i32 2
  %add = add nsw i32 %call2, %cond
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %add)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call7, %struct.rtx_def* %11)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1050(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 18, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1051(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32768)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call2 = call i32 @true_regnum(%struct.rtx_def* %2)
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 1, i32 2
  %add = add nsw i32 %call2, %cond
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %add)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call7, %struct.rtx_def* %11)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_abssf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %reg = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 327680
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end.35

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call = call i32 @memory_operand(%struct.rtx_def* %3, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call5 = call i32 @rtx_equal_p(%struct.rtx_def* %4, %struct.rtx_def* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %call10 = call %struct.rtx_def* @gen_abssf2_memory(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  br label %if.end.33

if.else:                                          ; preds = %land.lhs.true, %if.then
  %call12 = call %struct.rtx_def* @gen_reg_rtx(i32 15)
  store %struct.rtx_def* %call12, %struct.rtx_def** %reg, align 8
  %arrayidx13 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %dest, align 8
  %arrayidx14 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %call15 = call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %9)
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call15, %struct.rtx_def** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %call18 = call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %10)
  %arrayidx19 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call18, %struct.rtx_def** %arrayidx19, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call20 = call i64 @trunc_int_for_mode(i64 2147483648, i32 4)
  %call21 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call20)
  %call22 = call %struct.rtx_def* @gen_lowpart(i32 15, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %call22)
  %arrayidx24 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %arrayidx25 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call26 = call %struct.rtx_def* @gen_abssf2_ifs(%struct.rtx_def* %12, %struct.rtx_def* %13, %struct.rtx_def* %14)
  %call27 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call26)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %arrayidx28 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %cmp29 = icmp ne %struct.rtx_def* %15, %16
  br i1 %cmp29, label %if.then.30, label %if.end

if.then.30:                                       ; preds = %if.else
  %17 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %arrayidx31 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8
  %call32 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %17, %struct.rtx_def* %18)
  br label %if.end

if.end:                                           ; preds = %if.then.30, %if.else
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %if.then.7
  %call34 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call34, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

if.end.35:                                        ; preds = %entry
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 129, i32 15, %struct.rtx_def** %arraydecay)
  %call36 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call36, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.35, %if.end.33
  %21 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %21
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1053(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1054(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1055(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %6, i32 0)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %7, i32 0)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 6, %struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %8, i32 0)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 6, %struct.rtx_def* %call4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1056(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 15, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1057(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call i64 @trunc_int_for_mode(i64 2147483647, i32 4)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %3 = load i32, i32* %rtuint, align 4
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %3)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  store %struct.rtx_def* %call4, %struct.rtx_def** %arrayidx5, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call8, %struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call11)
  %call13 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call10, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call13)
  %call15 = call %struct.rtx_def* @emit(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1058(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %size = alloca i32, align 4
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx1 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx1, align 1
  %conv = zext i8 %3 to i32
  store i32 %conv, i32* %size, align 4
  %4 = load i32, i32* %size, align 4
  %cmp = icmp sge i32 %4, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 10, i32* %size, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %7 = load i32, i32* %size, align 4
  %sub = sub nsw i32 %7, 1
  %conv4 = sext i32 %sub to i64
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %6, i32 2, i64 %conv4, i32 1, i32 1)
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call i64 @trunc_int_for_mode(i64 -129, i32 2)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call6)
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 1
  store %struct.rtx_def* %call7, %struct.rtx_def** %arrayidx8, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand0, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand1, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call11 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 2, %struct.rtx_def* %call11, %struct.rtx_def* %16)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %14, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call14)
  %call16 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call13, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call16)
  %call18 = call %struct.rtx_def* @emit(%struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call19, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_absdf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %reg = alloca %struct.rtx_def*, align 8
  %imm = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end.35

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call = call i32 @memory_operand(%struct.rtx_def* %3, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call5 = call i32 @rtx_equal_p(%struct.rtx_def* %4, %struct.rtx_def* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %call10 = call %struct.rtx_def* @gen_absdf2_memory(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  br label %if.end.33

if.else:                                          ; preds = %land.lhs.true, %if.then
  %call12 = call %struct.rtx_def* @gen_reg_rtx(i32 16)
  store %struct.rtx_def* %call12, %struct.rtx_def** %reg, align 8
  %call13 = call i64 @trunc_int_for_mode(i64 -9223372036854775808, i32 5)
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call13)
  store %struct.rtx_def* %call14, %struct.rtx_def** %imm, align 8
  %arrayidx15 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %dest, align 8
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %call17 = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %9)
  %arrayidx18 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call17, %struct.rtx_def** %arrayidx18, align 8
  %arrayidx19 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %call20 = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %10)
  %arrayidx21 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call20, %struct.rtx_def** %arrayidx21, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %imm, align 8
  %call22 = call %struct.rtx_def* @gen_lowpart(i32 16, %struct.rtx_def* %12)
  %call23 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %call22)
  %arrayidx24 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %arrayidx25 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %call26 = call %struct.rtx_def* @gen_absdf2_ifs(%struct.rtx_def* %13, %struct.rtx_def* %14, %struct.rtx_def* %15)
  %call27 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call26)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %arrayidx28 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %cmp29 = icmp ne %struct.rtx_def* %16, %17
  br i1 %cmp29, label %if.then.30, label %if.end

if.then.30:                                       ; preds = %if.else
  %18 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %arrayidx31 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8
  %call32 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %18, %struct.rtx_def* %19)
  br label %if.end

if.end:                                           ; preds = %if.then.30, %if.else
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %if.then.7
  %call34 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call34, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

if.end.35:                                        ; preds = %entry
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 129, i32 16, %struct.rtx_def** %arraydecay)
  %call36 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call36, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.35, %if.end.33
  %22 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %22
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1060(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 16, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1061(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 16, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1062(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %6, i32 0)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %7, i32 0)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 6, %struct.rtx_def* %call3)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %8, i32 0)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 6, %struct.rtx_def* %call4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1063(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 16, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1064(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call i64 @trunc_int_for_mode(i64 2147483647, i32 4)
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 4
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 2
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 3
  call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr2, %struct.rtx_def** %add.ptr3)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand3, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand4, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call9, %struct.rtx_def* %16)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %14, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call12)
  %call14 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call11, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call14)
  %call16 = call %struct.rtx_def* @emit(%struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call17, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %17 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_absxf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 129, i32 17, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_abstf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 129, i32 18, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1067(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 17, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1068(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -32769)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call2 = call i32 @true_regnum(%struct.rtx_def* %2)
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 1, i32 2
  %add = add nsw i32 %call2, %cond
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %add)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call7, %struct.rtx_def* %11)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1069(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 129, i32 18, %struct.rtx_def* %5)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1070(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -32769)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call2 = call i32 @true_regnum(%struct.rtx_def* %2)
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 1, i32 2
  %add = add nsw i32 %call2, %cond
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %add)
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand1, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call7, %struct.rtx_def* %11)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_one_cmpldi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 86, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1072(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 5, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 5, %struct.rtx_def* %call5, %struct.rtx_def* %9)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  %call10 = call %struct.rtx_def* @emit(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_one_cmplsi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 86, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1074(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call5, %struct.rtx_def* %9)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  %call10 = call %struct.rtx_def* @emit(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1075(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %call5, %struct.rtx_def* %9)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  %call11 = call %struct.rtx_def* @emit(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_one_cmplhi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 86, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1077(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 3, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 3, %struct.rtx_def* %call5, %struct.rtx_def* %9)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  %call10 = call %struct.rtx_def* @emit(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_one_cmplqi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_unary_operator(i32 86, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1079(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 2, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 2, %struct.rtx_def* %call5, %struct.rtx_def* %9)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  %call10 = call %struct.rtx_def* @emit(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashldi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @x86_cmove, align 4
  %5 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %5
  %and3 = and i32 %4, %shl
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %6, 327680
  %cmp = icmp ne i32 %and5, 0
  br i1 %cmp, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %arrayidx7 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call i32 @immediate_operand(%struct.rtx_def* %7, i32 2)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.6
  %arrayidx9 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call12 = call %struct.rtx_def* @gen_ashldi3_1(%struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.6, %lor.lhs.false, %entry
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 87, i32 5, %struct.rtx_def** %arraydecay)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %13
}

declare i32 @immediate_operand(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1081(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx1 to i64*
  %2 = load i64, i64* %rtwint, align 8
  %sh_prom = trunc i64 %2 to i32
  %shl = shl i32 1, %sh_prom
  %conv = sext i32 %shl to i64
  %call = call i64 @trunc_int_for_mode(i64 %conv, i32 5)
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 5, %struct.rtx_def* %11, %struct.rtx_def* %12)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1082(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  call void @ix86_split_ashldi(%struct.rtx_def** %0, %struct.rtx_def* %2)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

declare void @ix86_split_ashldi(%struct.rtx_def**, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1083(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_ashldi(%struct.rtx_def** %0, %struct.rtx_def* null)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_shift_adj_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 2, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 56, %struct.rtx_def* %call2, %struct.rtx_def* %1)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %3)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 4, %struct.rtx_def* %call7, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 4, %struct.rtx_def* %call12, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_shift_adj_2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  %label = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %label, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32)
  %call5 = call %struct.rtx_def* @gen_testqi_ccz_1(%struct.rtx_def* %3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  store %struct.rtx_def* %call7, %struct.rtx_def** %tmp, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %5)
  store %struct.rtx_def* %call8, %struct.rtx_def** %tmp, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call9, %struct.rtx_def* %8)
  store %struct.rtx_def* %call10, %struct.rtx_def** %tmp, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call12 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call11)
  store %struct.rtx_def* %call12, %struct.rtx_def** %tmp, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  store %struct.rtx_def* %11, %struct.rtx_def** %rtx, align 8
  %arrayidx14 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %call16 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %13, %struct.rtx_def* %14)
  %arrayidx17 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call18 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %15, %struct.rtx_def* %16)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call19 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %17)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx21 to i32*
  store i32 1, i32* %rtint, align 4
  %call22 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call22, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %19
}

declare %struct.rtx_def* @gen_label_rtx() #1

declare %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit_label(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashlsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 87, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1087(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx6 to i64*
  %9 = load i64, i64* %rtwint, align 8
  %sh_prom = trunc i64 %9 to i32
  %shl = shl i32 1, %sh_prom
  %conv = sext i32 %shl to i64
  %10 = load i32, i32* @target_flags, align 4
  %and7 = and i32 %10, 33554432
  %tobool8 = icmp ne i32 %and7, 0
  %cond9 = select i1 %tobool8, i32 5, i32 4
  %call10 = call i64 @trunc_int_for_mode(i64 %conv, i32 %cond9)
  %call11 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 2
  store %struct.rtx_def* %call11, %struct.rtx_def** %arrayidx12, align 8
  %12 = load i32, i32* @target_flags, align 4
  %and13 = and i32 %12, 33554432
  %tobool14 = icmp ne i32 %and13, 0
  %cond15 = select i1 %tobool14, i32 5, i32 4
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 2
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %cond15, %struct.rtx_def* %14, %struct.rtx_def* %16)
  store %struct.rtx_def* %call18, %struct.rtx_def** %pat, align 8
  %17 = load i32, i32* @target_flags, align 4
  %and19 = and i32 %17, 33554432
  %tobool20 = icmp ne i32 %and19, 0
  %cond21 = select i1 %tobool20, i32 5, i32 4
  %cmp = icmp ne i32 %cond21, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %18 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call23 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %18, i32 0)
  store %struct.rtx_def* %call23, %struct.rtx_def** %pat, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 0
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %20, %struct.rtx_def* %21)
  %call26 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call25)
  %call27 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call27, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %22 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %22
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1088(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 %cond, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx3 to i64*
  %6 = load i64, i64* %rtwint, align 8
  %sh_prom = trunc i64 %6 to i32
  %shl = shl i32 1, %sh_prom
  %conv = sext i32 %shl to i64
  %7 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %7, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 5, i32 4
  %call7 = call i64 @trunc_int_for_mode(i64 %conv, i32 %cond6)
  %call8 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call7)
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  store %struct.rtx_def* %call8, %struct.rtx_def** %arrayidx9, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand2, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 4, %struct.rtx_def* %16, %struct.rtx_def* %17)
  %call14 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %call13, i32 0)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %18
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashlhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 87, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashlqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 87, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrdi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @x86_cmove, align 4
  %5 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %5
  %and3 = and i32 %4, %shl
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %6, 327680
  %cmp = icmp ne i32 %and5, 0
  br i1 %cmp, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %arrayidx7 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call i32 @immediate_operand(%struct.rtx_def* %7, i32 2)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.6
  %arrayidx9 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call12 = call %struct.rtx_def* @gen_ashrdi3_1(%struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.6, %lor.lhs.false, %entry
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 89, i32 5, %struct.rtx_def** %arraydecay)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1092(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  call void @ix86_split_ashrdi(%struct.rtx_def** %0, %struct.rtx_def* %2)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

declare void @ix86_split_ashrdi(%struct.rtx_def**, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1093(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_ashrdi(%struct.rtx_def** %0, %struct.rtx_def* null)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_x86_shift_adj_3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  %label = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %label, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 32)
  %call5 = call %struct.rtx_def* @gen_testqi_ccz_1(%struct.rtx_def* %3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  store %struct.rtx_def* %call7, %struct.rtx_def** %tmp, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %5)
  store %struct.rtx_def* %call8, %struct.rtx_def** %tmp, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call9, %struct.rtx_def* %8)
  store %struct.rtx_def* %call10, %struct.rtx_def** %tmp, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call12 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call11)
  store %struct.rtx_def* %call12, %struct.rtx_def** %tmp, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  store %struct.rtx_def* %11, %struct.rtx_def** %rtx, align 8
  %arrayidx14 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %call16 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %13, %struct.rtx_def* %14)
  %arrayidx17 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %arrayidx18 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31)
  %call20 = call %struct.rtx_def* @gen_ashrsi3_31(%struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call22 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %17)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx24 to i32*
  store i32 1, i32* %rtint, align 4
  %call25 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call25, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 89, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 89, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ashrqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 89, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lshrdi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @x86_cmove, align 4
  %5 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %5
  %and3 = and i32 %4, %shl
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %6, 327680
  %cmp = icmp ne i32 %and5, 0
  br i1 %cmp, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %arrayidx7 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call i32 @immediate_operand(%struct.rtx_def* %7, i32 2)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.6
  %arrayidx9 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call12 = call %struct.rtx_def* @gen_lshrdi3_1(%struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.6, %lor.lhs.false, %entry
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 90, i32 5, %struct.rtx_def** %arraydecay)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1099(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 3
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  call void @ix86_split_lshrdi(%struct.rtx_def** %0, %struct.rtx_def* %2)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

declare void @ix86_split_lshrdi(%struct.rtx_def**, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1100(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_lshrdi(%struct.rtx_def** %0, %struct.rtx_def* null)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 90, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lshrhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 90, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lshrqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 90, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rotldi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 88, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rotlsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 88, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rotlhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 88, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rotlqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 88, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rotrdi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 91, i32 5, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rotrsi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 91, i32 4, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rotrhi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 91, i32 3, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rotrqi3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_binary_operator(i32 91, i32 2, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extv(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx5 to i64*
  %5 = load i64, i64* %rtwint, align 8
  %cmp = icmp ne i64 %5, 8
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %arrayidx6 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtwint9 = bitcast %union.rtunion_def* %arrayidx8 to i64*
  %7 = load i64, i64* %rtwint9, align 8
  %cmp10 = icmp ne i64 %7, 8
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx11 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call = call i32 @register_operand(%struct.rtx_def* %9, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  %arrayidx14 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx15 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx16 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx17 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand3.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 132, i32 4, %struct.rtx_def* %16, %struct.rtx_def* %17, %struct.rtx_def* %18)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.12, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %20
}

declare i32 @register_operand(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_extzv(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx5 to i64*
  %5 = load i64, i64* %rtwint, align 8
  %cmp = icmp ne i64 %5, 8
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %arrayidx6 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtwint9 = bitcast %union.rtunion_def* %arrayidx8 to i64*
  %7 = load i64, i64* %rtwint9, align 8
  %cmp10 = icmp ne i64 %7, 8
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx11 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call = call i32 @register_operand(%struct.rtx_def* %9, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  %arrayidx14 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx15 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx16 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx17 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand3.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %16, %struct.rtx_def* %17, %struct.rtx_def* %18)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.12, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_insv(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx5 to i64*
  %5 = load i64, i64* %rtwint, align 8
  %cmp = icmp ne i64 %5, 8
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %arrayidx6 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtwint9 = bitcast %union.rtunion_def* %arrayidx8 to i64*
  %7 = load i64, i64* %rtwint9, align 8
  %cmp10 = icmp ne i64 %7, 8
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx11 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %call = call i32 @register_operand(%struct.rtx_def* %9, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  %arrayidx14 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx15 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx16 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx17 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand3.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %17)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call18, %struct.rtx_def* %18)
  %call20 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.12, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_seq(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 103, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

declare i32 @ix86_expand_setcc(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sne(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 102, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sgt(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 105, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sgtu(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 109, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_slt(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 107, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sltu(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 111, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sge(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 104, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sgeu(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 108, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sle(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 106, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sleu(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 110, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sunordered(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 112, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sordered(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 113, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_suneq(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 114, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sunge(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 115, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sungt(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 116, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sunle(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 117, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sunlt(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 118, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sltgt(%struct.rtx_def* %operand0) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @ix86_expand_setcc(i32 119, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call2, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1133(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, 131072
  store i32 %bf.set, i32* %2, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1134(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, 131072
  store i32 %bf.set, i32* %2, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1135(%struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %new_op1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1)
  store %struct.rtx_def* %call, %struct.rtx_def** %new_op1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, 131072
  store i32 %bf.set, i32* %5, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load3 = load i32, i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  %cmp = icmp ne i32 %bf.clear4, 57
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load8 = load i32, i32* %11, align 8
  %bf.lshr9 = lshr i32 %bf.load8, 16
  %bf.clear10 = and i32 %bf.lshr9, 255
  %cmp11 = icmp ne i32 %bf.clear10, 58
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load12 = load i32, i32* %13, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %call14 = call i32 @reverse_condition(i32 %bf.clear13)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load15 = load i32, i32* %15, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %call17 = call i32 @reverse_condition_maybe_unordered(i32 %bf.clear16)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call14, %cond.true ], [ %call17, %cond.false ]
  %16 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load18 = load i32, i32* %17, align 8
  %bf.value = and i32 %cond, 65535
  %bf.clear19 = and i32 %bf.load18, -65536
  %bf.set20 = or i32 %bf.clear19, %bf.value
  store i32 %bf.set20, i32* %17, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %call21 = call i32 @ix86_comparison_operator(%struct.rtx_def* %18, i32 0)
  %tobool = icmp ne i32 %call21, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx22 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 0
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %operand0, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 1
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %operand1, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %24, %struct.rtx_def* %25)
  %call25 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call26, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %26 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %27 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %27
}

declare i32 @reverse_condition(i32) #1

declare i32 @reverse_condition_maybe_unordered(i32) #1

declare i32 @ix86_comparison_operator(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1136(%struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %new_op1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1)
  store %struct.rtx_def* %call, %struct.rtx_def** %new_op1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, 131072
  store i32 %bf.set, i32* %5, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load3 = load i32, i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  %cmp = icmp ne i32 %bf.clear4, 57
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load8 = load i32, i32* %11, align 8
  %bf.lshr9 = lshr i32 %bf.load8, 16
  %bf.clear10 = and i32 %bf.lshr9, 255
  %cmp11 = icmp ne i32 %bf.clear10, 58
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load12 = load i32, i32* %13, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %call14 = call i32 @reverse_condition(i32 %bf.clear13)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load15 = load i32, i32* %15, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %call17 = call i32 @reverse_condition_maybe_unordered(i32 %bf.clear16)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call14, %cond.true ], [ %call17, %cond.false ]
  %16 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load18 = load i32, i32* %17, align 8
  %bf.value = and i32 %cond, 65535
  %bf.clear19 = and i32 %bf.load18, -65536
  %bf.set20 = or i32 %bf.clear19, %bf.value
  store i32 %bf.set20, i32* %17, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %new_op1, align 8
  %call21 = call i32 @ix86_comparison_operator(%struct.rtx_def* %18, i32 0)
  %tobool = icmp ne i32 %call21, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx22 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 0
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %operand0, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 1
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %operand1, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %24, %struct.rtx_def* %25)
  %call25 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call26, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %26 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %27 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %27
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_beq(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 103, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

declare void @ix86_expand_branch(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bne(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 102, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bgt(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 105, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bgtu(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 109, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_blt(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 107, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bltu(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 111, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bge(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 104, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bgeu(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 108, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ble(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 106, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bleu(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 110, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bunordered(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 112, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bordered(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 113, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_buneq(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 114, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bunge(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 115, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bungt(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 116, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bunle(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 117, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bunlt(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 118, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_bltgt(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  call void @ix86_expand_branch(i32 119, %struct.rtx_def* %1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1155(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, -16711681
  store i32 %bf.clear, i32* %2, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call, %struct.rtx_def* %10)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call6, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1156(%struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %new_op0 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %1)
  store %struct.rtx_def* %call, %struct.rtx_def** %new_op0, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %new_op0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %new_op0, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, -16711681
  store i32 %bf.clear, i32* %5, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %new_op0, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load3 = load i32, i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  %cmp = icmp ne i32 %bf.clear4, 57
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %new_op0, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load8 = load i32, i32* %11, align 8
  %bf.lshr9 = lshr i32 %bf.load8, 16
  %bf.clear10 = and i32 %bf.lshr9, 255
  %cmp11 = icmp ne i32 %bf.clear10, 58
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %new_op0, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load12 = load i32, i32* %13, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %call14 = call i32 @reverse_condition(i32 %bf.clear13)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new_op0, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load15 = load i32, i32* %15, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %call17 = call i32 @reverse_condition_maybe_unordered(i32 %bf.clear16)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call14, %cond.true ], [ %call17, %cond.false ]
  %16 = load %struct.rtx_def*, %struct.rtx_def** %new_op0, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load18 = load i32, i32* %17, align 8
  %bf.value = and i32 %cond, 65535
  %bf.clear19 = and i32 %bf.load18, -65536
  %bf.set = or i32 %bf.clear19, %bf.value
  store i32 %bf.set, i32* %17, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %new_op0, align 8
  %call20 = call i32 @ix86_comparison_operator(%struct.rtx_def* %18, i32 0)
  %tobool = icmp ne i32 %call20, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 0
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %operand0, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx22 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 1
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %operand1, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %26)
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %25, %struct.rtx_def* %call23, %struct.rtx_def* %27)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %24, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call25)
  %call27 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call27, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %28 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %29 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %29
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1157(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  call void @ix86_split_fp_branch(i32 %bf.clear, %struct.rtx_def* %4, %struct.rtx_def* %6, %struct.rtx_def* %8, %struct.rtx_def* %10, %struct.rtx_def* null)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

declare void @ix86_split_fp_branch(i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1158(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %operand6 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 5
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  call void @ix86_split_fp_branch(i32 %bf.clear, %struct.rtx_def* %4, %struct.rtx_def* %6, %struct.rtx_def* %8, %struct.rtx_def* %10, %struct.rtx_def* %12)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_indirect_jump(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_tablejump(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @flag_pic, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end.19

if.then:                                          ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %4 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %4, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond = select i1 %tobool5, i32 5, i32 4
  %arrayidx6 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %6 = load i32, i32* @target_flags, align 4
  %and7 = and i32 %6, 33554432
  %tobool8 = icmp ne i32 %and7, 0
  %cond9 = select i1 %tobool8, i32 5, i32 4
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond9, %struct.rtx_def* %7)
  %call11 = call %struct.rtx_def* @expand_simple_binop(i32 %cond, i32 75, %struct.rtx_def* %5, %struct.rtx_def* %call, %struct.rtx_def* null, i32 0, i32 0)
  %arrayidx12 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call11, %struct.rtx_def** %arrayidx12, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %8 = load i32, i32* @target_flags, align 4
  %and13 = and i32 %8, 33554432
  %tobool14 = icmp ne i32 %and13, 0
  %cond15 = select i1 %tobool14, i32 5, i32 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** @pic_offset_table_rtx, align 8
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %call17 = call %struct.rtx_def* @expand_simple_binop(i32 %cond15, i32 76, %struct.rtx_def* %9, %struct.rtx_def* %10, %struct.rtx_def* null, i32 1, i32 0)
  %arrayidx18 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call17, %struct.rtx_def** %arrayidx18, align 8
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 56
  %12 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.clear = and i32 %bf.load, -2097153
  %bf.set = or i32 %bf.clear, 2097152
  store i32 %bf.set, i32* %12, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %if.end.19

if.end.19:                                        ; preds = %if.end, %entry
  %arrayidx20 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx21 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %16)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %17)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call23)
  %call25 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call22, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call25)
  %call27 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call28, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %18
}

declare %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_doloop_end(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [5 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %arrayidx4 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  store %struct.rtx_def* %4, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx6 to i64*
  %6 = load i64, i64* %rtwint, align 8
  %cmp = icmp sgt i64 %6, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx7 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp8 = icmp ne i32 %bf.clear, 4
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  %arrayidx11 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %arrayidx13 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %call = call %struct.rtx_def* @gen_doloop_end_internal(%struct.rtx_def* %11, %struct.rtx_def* %12, %struct.rtx_def* %13)
  %call14 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %14 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then.9, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1162(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 56, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %9)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call9)
  %call11 = call %struct.rtx_def* @emit(%struct.rtx_def* %call10)
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %call12, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %call13, %struct.rtx_def* %12, %struct.rtx_def* %13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call17, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %14 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %14
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1163(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 56, %struct.rtx_def* %call7, %struct.rtx_def* %12)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call10 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %13)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call11 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call11, %struct.rtx_def* %15)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call10, %struct.rtx_def* %call12)
  %call14 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call9, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call14)
  %call16 = call %struct.rtx_def* @emit(%struct.rtx_def* %call15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call17 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %17)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %16, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call20 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %19 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %call20, %struct.rtx_def* %19)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 0), align 8
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %call21, %struct.rtx_def* %20, %struct.rtx_def* %21)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %18, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call25, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %22 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %22
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1164(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %bf.clear, i32 17)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 4
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 3
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %6 = load i32, i32* %rtuint, align 4
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 2, i32 %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 5
  store %struct.rtx_def* %call4, %struct.rtx_def** %arrayidx5, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 3
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  call void @ix86_expand_clear(%struct.rtx_def* %9)
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand0, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand1, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 2
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand2, align 8
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 3
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %operand3, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 4
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %operand4, align 8
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 5
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %operand5, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %22, %struct.rtx_def* %23)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %24)
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call15, %struct.rtx_def* %25)
  %call17 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %26 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %26
}

declare void @ix86_expand_clear(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1165(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 %bf.clear, i32 17)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 4
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 3
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx3 to i32*
  %6 = load i32, i32* %rtuint, align 4
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 2, i32 %6)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 5
  store %struct.rtx_def* %call4, %struct.rtx_def** %arrayidx5, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 3
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  call void @ix86_expand_clear(%struct.rtx_def* %9)
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand0, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand1, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 2
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand2, align 8
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 3
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %operand3, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 4
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %operand4, align 8
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 5
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %operand5, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %22, %struct.rtx_def* %23)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %24)
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call15, %struct.rtx_def* %25)
  %call17 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %26 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %26
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_call_pop(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp = icmp eq %struct.rtx_def* %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx5 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call = call %struct.rtx_def* @gen_call(%struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %10 = load i32, i32* @flag_pic, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.23

land.lhs.true:                                    ; preds = %if.end
  %arrayidx9 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp11 = icmp eq i32 %bf.clear, 68
  br i1 %cmp11, label %land.lhs.true.12, label %if.end.23

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %arrayidx13 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load17 = load i32, i32* %16, align 8
  %bf.lshr = lshr i32 %bf.load17, 27
  %bf.clear18 = and i32 %bf.lshr, 1
  %tobool19 = icmp ne i32 %bf.clear18, 0
  br i1 %tobool19, label %if.end.23, label %if.then.20

if.then.20:                                       ; preds = %land.lhs.true.12
  %17 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 56
  %18 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load21 = load i32, i32* %18, align 8
  %bf.clear22 = and i32 %bf.load21, -2097153
  %bf.set = or i32 %bf.clear22, 2097152
  store i32 %bf.set, i32* %18, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %land.lhs.true.12, %land.lhs.true, %if.end
  %arrayidx24 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 0
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx27, align 8
  %21 = load i32, i32* @target_flags, align 4
  %and = and i32 %21, 33554432
  %tobool28 = icmp ne i32 %and, 0
  %cond = select i1 %tobool28, i32 5, i32 4
  %call29 = call i32 @call_insn_operand(%struct.rtx_def* %20, i32 %cond)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.44, label %if.then.31

if.then.31:                                       ; preds = %if.end.23
  %22 = load i32, i32* @target_flags, align 4
  %and32 = and i32 %22, 33554432
  %tobool33 = icmp ne i32 %and32, 0
  %cond34 = select i1 %tobool33, i32 5, i32 4
  %arrayidx35 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx35, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx38, align 8
  %call39 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond34, %struct.rtx_def* %24)
  %arrayidx40 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  store %struct.rtx_def* %call39, %struct.rtx_def** %rtx43, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.31, %if.end.23
  %26 = load i32, i32* @target_flags, align 4
  %and45 = and i32 %26, 33554432
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.end.44
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 14203, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.gen_call_pop, i32 0, i32 0)) #3
  unreachable

if.end.48:                                        ; preds = %if.end.44
  %arrayidx49 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx49, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx50 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx50, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx51 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx52 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx52, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %operand3.addr, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call53 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 50, i32 0, %struct.rtx_def* %31, %struct.rtx_def* %32)
  %call54 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call55 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %33 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call56 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call55, %struct.rtx_def* %33)
  %call57 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call54, %struct.rtx_def* %call56)
  %call58 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call53, %struct.rtx_def* %call57)
  %call59 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call58)
  %call60 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call59)
  %call61 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call61, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %34 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %34, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.48, %if.then
  %35 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %35
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_call(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  %insn = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load i32, i32* @flag_pic, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 68
  br i1 %cmp, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %arrayidx6 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load10 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load10, 27
  %bf.clear11 = and i32 %bf.lshr, 1
  %tobool12 = icmp ne i32 %bf.clear11, 0
  br i1 %tobool12, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.5
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 56
  %11 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load13 = load i32, i32* %11, align 8
  %bf.clear14 = and i32 %bf.load13, -2097153
  %bf.set = or i32 %bf.clear14, 2097152
  store i32 %bf.set, i32* %11, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.5, %land.lhs.true, %entry
  %arrayidx15 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx18, align 8
  %14 = load i32, i32* @target_flags, align 4
  %and = and i32 %14, 33554432
  %tobool19 = icmp ne i32 %and, 0
  %cond = select i1 %tobool19, i32 5, i32 4
  %call = call i32 @call_insn_operand(%struct.rtx_def* %13, i32 %cond)
  %tobool20 = icmp ne i32 %call, 0
  br i1 %tobool20, label %if.end.34, label %if.then.21

if.then.21:                                       ; preds = %if.end
  %15 = load i32, i32* @target_flags, align 4
  %and22 = and i32 %15, 33554432
  %tobool23 = icmp ne i32 %and22, 0
  %cond24 = select i1 %tobool23, i32 5, i32 4
  %arrayidx25 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  %call29 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond24, %struct.rtx_def* %17)
  %arrayidx30 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx30, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 0
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  store %struct.rtx_def* %call29, %struct.rtx_def** %rtx33, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.21, %if.end
  %19 = load i32, i32* @target_flags, align 4
  %and35 = and i32 %19, 33554432
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %land.lhs.true.37, label %if.end.54

land.lhs.true.37:                                 ; preds = %if.end.34
  %arrayidx38 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx40 to i64*
  %21 = load i64, i64* %rtwint, align 8
  %cmp41 = icmp sge i64 %21, 0
  br i1 %cmp41, label %if.then.42, label %if.end.54

if.then.42:                                       ; preds = %land.lhs.true.37
  %call43 = call %struct.rtx_def* @gen_rtx_REG(i32 2, i32 0)
  store %struct.rtx_def* %call43, %struct.rtx_def** %reg, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %arrayidx44 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx44, align 8
  %call45 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %22, %struct.rtx_def* %23)
  %arrayidx46 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx46, align 8
  %arrayidx47 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8
  %call48 = call %struct.rtx_def* @gen_call_exp(%struct.rtx_def* %24, %struct.rtx_def* %25)
  %call49 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call48)
  store %struct.rtx_def* %call49, %struct.rtx_def** %insn, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 7
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  call void @use_reg(%struct.rtx_def** %rtx52, %struct.rtx_def* %27)
  %call53 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call53, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %28 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %retval
  br label %return

if.end.54:                                        ; preds = %land.lhs.true.37, %if.end.34
  %arrayidx55 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx55, align 8
  %arrayidx56 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx56, align 8
  %call57 = call %struct.rtx_def* @gen_call_exp(%struct.rtx_def* %29, %struct.rtx_def* %30)
  %call58 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call57)
  store %struct.rtx_def* %call58, %struct.rtx_def** %insn, align 8
  %call59 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call59, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %31 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.54, %if.then.42
  %32 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %32
}

declare i32 @call_insn_operand(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @copy_to_mode_reg(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_call_insn(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_call_exp(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 50, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %1)
  ret %struct.rtx_def* %call
}

declare void @use_reg(%struct.rtx_def**, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [5 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %arrayidx4 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  store %struct.rtx_def* %4, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp = icmp eq %struct.rtx_def* %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx6 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call = call %struct.rtx_def* @gen_call_value(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %12 = load i32, i32* @flag_pic, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %if.end
  %arrayidx11 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load = load i32, i32* %15, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp13 = icmp eq i32 %bf.clear, 68
  br i1 %cmp13, label %land.lhs.true.14, label %if.end.25

land.lhs.true.14:                                 ; preds = %land.lhs.true
  %arrayidx15 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx18, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load19 = load i32, i32* %18, align 8
  %bf.lshr = lshr i32 %bf.load19, 27
  %bf.clear20 = and i32 %bf.lshr, 1
  %tobool21 = icmp ne i32 %bf.clear20, 0
  br i1 %tobool21, label %if.end.25, label %if.then.22

if.then.22:                                       ; preds = %land.lhs.true.14
  %19 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 56
  %20 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load23 = load i32, i32* %20, align 8
  %bf.clear24 = and i32 %bf.load23, -2097153
  %bf.set = or i32 %bf.clear24, 2097152
  store i32 %bf.set, i32* %20, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.22, %land.lhs.true.14, %land.lhs.true, %if.end
  %arrayidx26 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %23 = load i32, i32* @target_flags, align 4
  %and = and i32 %23, 33554432
  %tobool30 = icmp ne i32 %and, 0
  %cond = select i1 %tobool30, i32 5, i32 4
  %call31 = call i32 @call_insn_operand(%struct.rtx_def* %22, i32 %cond)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.46, label %if.then.33

if.then.33:                                       ; preds = %if.end.25
  %24 = load i32, i32* @target_flags, align 4
  %and34 = and i32 %24, 33554432
  %tobool35 = icmp ne i32 %and34, 0
  %cond36 = select i1 %tobool35, i32 5, i32 4
  %arrayidx37 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx37, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 0
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx40, align 8
  %call41 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond36, %struct.rtx_def* %26)
  %arrayidx42 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx42, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  store %struct.rtx_def* %call41, %struct.rtx_def** %rtx45, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.33, %if.end.25
  %arrayidx47 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx48 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx48, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx49 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx49, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx50 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx50, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx51 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8
  store %struct.rtx_def* %32, %struct.rtx_def** %operand4.addr, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call52 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 50, i32 0, %struct.rtx_def* %34, %struct.rtx_def* %35)
  %call53 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %33, %struct.rtx_def* %call52)
  %call54 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call55 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %36 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %call56 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call55, %struct.rtx_def* %36)
  %call57 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call54, %struct.rtx_def* %call56)
  %call58 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call53, %struct.rtx_def* %call57)
  %call59 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call58)
  %call60 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call59)
  %call61 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call61, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %37 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %37, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.46, %if.then
  %38 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %38
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_call_value(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  %insn = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %4 = load i32, i32* @flag_pic, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 68
  br i1 %cmp, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load11 = load i32, i32* %10, align 8
  %bf.lshr = lshr i32 %bf.load11, 27
  %bf.clear12 = and i32 %bf.lshr, 1
  %tobool13 = icmp ne i32 %bf.clear12, 0
  br i1 %tobool13, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.6
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 56
  %12 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load14 = load i32, i32* %12, align 8
  %bf.clear15 = and i32 %bf.load14, -2097153
  %bf.set = or i32 %bf.clear15, 2097152
  store i32 %bf.set, i32* %12, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.6, %land.lhs.true, %entry
  %arrayidx16 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 0
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %15 = load i32, i32* @target_flags, align 4
  %and = and i32 %15, 33554432
  %tobool20 = icmp ne i32 %and, 0
  %cond = select i1 %tobool20, i32 5, i32 4
  %call = call i32 @call_insn_operand(%struct.rtx_def* %14, i32 %cond)
  %tobool21 = icmp ne i32 %call, 0
  br i1 %tobool21, label %if.end.35, label %if.then.22

if.then.22:                                       ; preds = %if.end
  %16 = load i32, i32* @target_flags, align 4
  %and23 = and i32 %16, 33554432
  %tobool24 = icmp ne i32 %and23, 0
  %cond25 = select i1 %tobool24, i32 5, i32 4
  %arrayidx26 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %call30 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond25, %struct.rtx_def* %18)
  %arrayidx31 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 0
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  store %struct.rtx_def* %call30, %struct.rtx_def** %rtx34, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.22, %if.end
  %20 = load i32, i32* @target_flags, align 4
  %and36 = and i32 %20, 33554432
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %land.lhs.true.38, label %if.end.56

land.lhs.true.38:                                 ; preds = %if.end.35
  %arrayidx39 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx39, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx41 to i64*
  %22 = load i64, i64* %rtwint, align 8
  %cmp42 = icmp sge i64 %22, 0
  br i1 %cmp42, label %if.then.43, label %if.end.56

if.then.43:                                       ; preds = %land.lhs.true.38
  %call44 = call %struct.rtx_def* @gen_rtx_REG(i32 2, i32 0)
  store %struct.rtx_def* %call44, %struct.rtx_def** %reg, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %arrayidx45 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx45, align 8
  %call46 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %23, %struct.rtx_def* %24)
  %arrayidx47 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8
  %arrayidx48 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx49, align 8
  %call50 = call %struct.rtx_def* @gen_call_value_exp(%struct.rtx_def* %25, %struct.rtx_def* %26, %struct.rtx_def* %27)
  %call51 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call50)
  store %struct.rtx_def* %call51, %struct.rtx_def** %insn, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 7
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  call void @use_reg(%struct.rtx_def** %rtx54, %struct.rtx_def* %29)
  %call55 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call55, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %30 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %30, %struct.rtx_def** %retval
  br label %return

if.end.56:                                        ; preds = %land.lhs.true.38, %if.end.35
  %arrayidx57 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx57, align 8
  %arrayidx58 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx58, align 8
  %arrayidx59 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx59, align 8
  %call60 = call %struct.rtx_def* @gen_call_value_exp(%struct.rtx_def* %31, %struct.rtx_def* %32, %struct.rtx_def* %33)
  %call61 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call60)
  store %struct.rtx_def* %call61, %struct.rtx_def** %insn, align 8
  %call62 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call62, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %34 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %34, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.56, %if.then.43
  %35 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %35
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_call_value_exp(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 50, i32 0, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_untyped_call(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  %i = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 23, i32 8)
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %6 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %6, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond = select i1 %tobool5, i32 8, i32 0
  %sub = sub nsw i32 %cond, 1
  %conv = sext i32 %sub to i64
  %call6 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %call7 = call %struct.rtx_def* @gen_call_value(%struct.rtx_def* %call, %struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %call6)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %arrayidx8 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %9 = load i32, i32* @target_flags, align 4
  %and9 = and i32 %9, 33554432
  %tobool10 = icmp ne i32 %and9, 0
  %cond11 = select i1 %tobool10, i32 8, i32 0
  %sub12 = sub nsw i32 %cond11, 1
  %conv13 = sext i32 %sub12 to i64
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv13)
  %call15 = call %struct.rtx_def* @gen_call(%struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %call14)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond16 = phi %struct.rtx_def* [ %call7, %cond.true ], [ %call15, %cond.false ]
  %call17 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %cond16)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %10 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtvec_def**
  %12 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %12, i32 0, i32 0
  %13 = load i32, i32* %num_elem, align 4
  %cmp = icmp slt i32 %10, %13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %i, align 4
  %idxprom = sext i32 %14 to i64
  %arrayidx21 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtvec24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec24, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %set, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 1
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  %call31 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %19, %struct.rtx_def* %21)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call32 = call %struct.rtx_def* @gen_blockage()
  %call33 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call32)
  %call34 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call34, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %23 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %23
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_return() #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %popc = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %pops_args = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 8
  %1 = load i32, i32* %pops_args, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %pops_args1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 8
  %3 = load i32, i32* %pops_args1, align 4
  %conv = sext i32 %3 to i64
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  store %struct.rtx_def* %call, %struct.rtx_def** %popc, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %popc, align 8
  %call2 = call %struct.rtx_def* @gen_return_pop_internal(%struct.rtx_def* %4)
  %call3 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_(i32 51, i32 0)
  %call6 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_prologue() #0 {
entry:
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  call void @ix86_expand_prologue()
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %0
}

declare void @ix86_expand_prologue() #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_epilogue() #0 {
entry:
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  call void @ix86_expand_epilogue(i32 1)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %0
}

declare void @ix86_expand_epilogue(i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sibcall_epilogue() #0 {
entry:
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  call void @ix86_expand_epilogue(i32 0)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_eh_return(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %tmp = alloca %struct.rtx_def*, align 8
  %sa = alloca %struct.rtx_def*, align 8
  %ra = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %sa, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %ra, align 8
  %4 = load i32, i32* @target_flags, align 4
  %and = and i32 %4, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %sa, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond, %struct.rtx_def* %5, %struct.rtx_def* %6)
  store %struct.rtx_def* %call, %struct.rtx_def** %tmp, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %8 = load i32, i32* @target_flags, align 4
  %and6 = and i32 %8, 33554432
  %tobool7 = icmp ne i32 %and6, 0
  %cond8 = select i1 %tobool7, i32 8, i32 4
  %sub = sub nsw i32 0, %cond8
  %conv = sext i32 %sub to i64
  %call9 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %7, i64 %conv)
  store %struct.rtx_def* %call9, %struct.rtx_def** %tmp, align 8
  %9 = load i32, i32* @target_flags, align 4
  %and10 = and i32 %9, 33554432
  %tobool11 = icmp ne i32 %and10, 0
  %cond12 = select i1 %tobool11, i32 5, i32 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond12, %struct.rtx_def* %10)
  store %struct.rtx_def* %call13, %struct.rtx_def** %tmp, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %ra, align 8
  %call14 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %12)
  %13 = load i32, i32* @target_flags, align 4
  %and15 = and i32 %13, 33554432
  %tobool16 = icmp ne i32 %and15, 0
  %cond17 = select i1 %tobool16, i32 5, i32 4
  %cmp = icmp eq i32 %cond17, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %14 = load %struct.rtx_def*, %struct.rtx_def** %sa, align 8
  %call19 = call %struct.rtx_def* @gen_eh_return_si(%struct.rtx_def* %14)
  %call20 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call19)
  br label %if.end

if.else:                                          ; preds = %entry
  %15 = load %struct.rtx_def*, %struct.rtx_def** %sa, align 8
  %call21 = call %struct.rtx_def* @gen_eh_return_di(%struct.rtx_def* %15)
  %call22 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call21)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call23 = call %struct.rtx_def* @emit_barrier()
  %call24 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call24, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %16 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %16
}

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #1

declare %struct.rtx_def* @emit_barrier() #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1178(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  call void @ix86_expand_epilogue(i32 2)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1179(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  call void @ix86_expand_epilogue(i32 2)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_ffssi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  %out = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %in = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %lo = alloca %struct.rtx_def*, align 8
  %hi = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %fptmp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  store %struct.rtx_def* %call, %struct.rtx_def** %out, align 8
  %call2 = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  store %struct.rtx_def* %call2, %struct.rtx_def** %tmp, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %in, align 8
  %3 = load i32, i32* @x86_cmove, align 4
  %4 = load i32, i32* @ix86_arch, align 4
  %shl = shl i32 1, %4
  %and = and i32 %3, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* @target_flags, align 4
  %and5 = and i32 %5, 327680
  %cmp = icmp ne i32 %and5, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call6 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %6, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %in, align 8
  %call7 = call %struct.rtx_def* @gen_ffssi_1(%struct.rtx_def* %8, %struct.rtx_def* %9)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 4, %struct.rtx_def* %call10, %struct.rtx_def* %12, %struct.rtx_def* %13)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call14 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %14, %struct.rtx_def* %15, %struct.rtx_def* %16)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %arrayidx16 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call17 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %17, %struct.rtx_def* %18)
  br label %if.end.74

if.else:                                          ; preds = %lor.lhs.false
  %19 = load i32, i32* @ix86_cpu, align 4
  %cmp18 = icmp eq i32 %19, 2
  br i1 %cmp18, label %land.lhs.true, label %if.else.56

land.lhs.true:                                    ; preds = %if.else
  %20 = load i32, i32* @optimize_size, align 4
  %tobool19 = icmp ne i32 %20, 0
  br i1 %tobool19, label %if.else.56, label %land.lhs.true.20

land.lhs.true.20:                                 ; preds = %land.lhs.true
  %21 = load i32, i32* @target_flags, align 4
  %and21 = and i32 %21, 1
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then.23, label %if.else.56

if.then.23:                                       ; preds = %land.lhs.true.20
  %call25 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call25, %struct.rtx_def** %label, align 8
  %call29 = call %struct.rtx_def* @assign_386_stack_local(i32 5, i32 0)
  store %struct.rtx_def* %call29, %struct.rtx_def** %mem, align 8
  %call31 = call %struct.rtx_def* @gen_reg_rtx(i32 16)
  store %struct.rtx_def* %call31, %struct.rtx_def** %fptmp, align 8
  call void @split_di(%struct.rtx_def** %mem, i32 1, %struct.rtx_def** %lo, %struct.rtx_def** %hi)
  %22 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call32 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %22, %struct.rtx_def* %23)
  %24 = load %struct.rtx_def*, %struct.rtx_def** %in, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %24, %struct.rtx_def* %25, i32 103, %struct.rtx_def* null, i32 4, i32 1, %struct.rtx_def* %26)
  %27 = load %struct.rtx_def*, %struct.rtx_def** %hi, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call33 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %27, %struct.rtx_def* %28)
  %29 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %in, align 8
  %call34 = call %struct.rtx_def* @gen_subsi3(%struct.rtx_def* %29, %struct.rtx_def* %30, %struct.rtx_def* %31)
  %call35 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call34)
  %32 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %in, align 8
  %call36 = call %struct.rtx_def* @gen_andsi3(%struct.rtx_def* %32, %struct.rtx_def* %33, %struct.rtx_def* %34)
  %call37 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call36)
  %35 = load %struct.rtx_def*, %struct.rtx_def** %lo, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call38 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %35, %struct.rtx_def* %36)
  %37 = load %struct.rtx_def*, %struct.rtx_def** %fptmp, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %call39 = call %struct.rtx_def* @gen_floatdidf2(%struct.rtx_def* %37, %struct.rtx_def* %38)
  %call40 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call39)
  %39 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call42 = call %struct.rtx_def* @gen_rtx_MEM(i32 16, %struct.rtx_def* %40)
  %41 = load %struct.rtx_def*, %struct.rtx_def** %fptmp, align 8
  %call43 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call42, %struct.rtx_def* %41)
  %42 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %hi, align 8
  %call44 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %42, %struct.rtx_def* %43)
  %44 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call45 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 20)
  %call46 = call %struct.rtx_def* @gen_lshrsi3(%struct.rtx_def* %44, %struct.rtx_def* %45, %struct.rtx_def* %call45)
  %call47 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call46)
  %46 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call48 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 1022)
  %call49 = call %struct.rtx_def* @gen_subsi3(%struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %call48)
  %call50 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call49)
  %48 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call51 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %48)
  %49 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx53 to i32*
  store i32 1, i32* %rtint, align 4
  %arrayidx54 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %50 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx54, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call55 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %50, %struct.rtx_def* %51)
  br label %if.end

if.else.56:                                       ; preds = %land.lhs.true.20, %land.lhs.true, %if.else
  %52 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call57 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %52, %struct.rtx_def* %53)
  %54 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %in, align 8
  %call58 = call %struct.rtx_def* @gen_ffssi_1(%struct.rtx_def* %54, %struct.rtx_def* %55)
  %call59 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call58)
  %56 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call60 = call %struct.rtx_def* @gen_lowpart(i32 2, %struct.rtx_def* %56)
  %call61 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %call60)
  %call62 = call %struct.rtx_def* @gen_rtx_REG(i32 56, i32 17)
  %57 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call63 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 103, i32 2, %struct.rtx_def* %call62, %struct.rtx_def* %57)
  %call64 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call61, %struct.rtx_def* %call63)
  %call65 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call64)
  %58 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call66 = call %struct.rtx_def* @gen_negsi2(%struct.rtx_def* %58, %struct.rtx_def* %59)
  %call67 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call66)
  %60 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call68 = call %struct.rtx_def* @gen_iorsi3(%struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* %62)
  %call69 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call68)
  %63 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call70 = call %struct.rtx_def* @gen_addsi3(%struct.rtx_def* %63, %struct.rtx_def* %64, %struct.rtx_def* %65)
  %call71 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call70)
  %arrayidx72 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %66 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx72, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call73 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %66, %struct.rtx_def* %67)
  br label %if.end

if.end:                                           ; preds = %if.else.56, %if.then.23
  br label %if.end.74

if.end.74:                                        ; preds = %if.end, %if.then
  %call75 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call75, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %68 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %68
}

declare void @emit_cmp_and_jump_insns(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1181(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @ix86_force_to_memory(i32 %bf.clear, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 4
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load4 = load i32, i32* %8, align 8
  %bf.lshr5 = lshr i32 %bf.load4, 16
  %bf.clear6 = and i32 %bf.lshr5, 255
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 %bf.clear6, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  store %struct.rtx_def* %call8, %struct.rtx_def** %arrayidx9, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 3
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load12 = load i32, i32* %16, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 3
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load15 = load i32, i32* %19, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 16
  %bf.clear17 = and i32 %bf.lshr16, 255
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 2
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %bf.clear13, i32 %bf.clear17, %struct.rtx_def* %21, %struct.rtx_def* %23)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call21)
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 1
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load24 = load i32, i32* %26, align 8
  %bf.lshr25 = lshr i32 %bf.load24, 16
  %bf.clear26 = and i32 %bf.lshr25, 255
  call void @ix86_free_from_memory(i32 %bf.clear26)
  %call27 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call27, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %27 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %27
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1182(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @ix86_force_to_memory(i32 %bf.clear, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 4
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load4 = load i32, i32* %8, align 8
  %bf.lshr5 = lshr i32 %bf.load4, 16
  %bf.clear6 = and i32 %bf.lshr5, 255
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 125, i32 %bf.clear6, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 4
  store %struct.rtx_def* %call8, %struct.rtx_def** %arrayidx9, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 3
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load12 = load i32, i32* %16, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 3
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load15 = load i32, i32* %19, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 16
  %bf.clear17 = and i32 %bf.lshr16, 255
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 1
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 4
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %bf.clear13, i32 %bf.clear17, %struct.rtx_def* %21, %struct.rtx_def* %23)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call21)
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %24, i64 2
  %25 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load24 = load i32, i32* %26, align 8
  %bf.lshr25 = lshr i32 %bf.load24, 16
  %bf.clear26 = and i32 %bf.lshr25, 255
  call void @ix86_free_from_memory(i32 %bf.clear26)
  %call27 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call27, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %27 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %27
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtsf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @ix86_fpmath, align 4
  %and = and i32 %2, 2
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call = call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %3)
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand1.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 15, %struct.rtx_def* %7)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sqrtdf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 262144
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* @ix86_fpmath, align 4
  %and2 = and i32 %3, 2
  %cmp3 = icmp ne i32 %and2, 0
  br i1 %cmp3, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %arrayidx6 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx7 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 16, %struct.rtx_def* %8)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movstrsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call i32 @ix86_expand_movstr(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %10
}

declare i32 @ix86_expand_movstr(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movstrdi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call i32 @ix86_expand_movstr(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovdi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_single_stringop, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call = call %struct.rtx_def* @gen_strmovdi_rex_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %call9 = call %struct.rtx_def* @gen_reg_rtx(i32 5)
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call9, %struct.rtx_def** %arrayidx10, align 8
  br label %if.end

if.end:                                           ; preds = %if.else
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx12 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand2, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %14)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call15)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call17, %struct.rtx_def* %16)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %18, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call23)
  %call25 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call22, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call25)
  %call27 = call %struct.rtx_def* @emit(%struct.rtx_def* %call26)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call28 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %20, %struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %19, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call31)
  %call33 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call30, %struct.rtx_def* %call32)
  %call34 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call33)
  %call35 = call %struct.rtx_def* @emit(%struct.rtx_def* %call34)
  %call36 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call36, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %22 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %22
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_strmovsi_rex64(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i32, i32* @x86_single_stringop, align 4
  %7 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %7
  %and6 = and i32 %6, %shl
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %8 = load i32, i32* @optimize_size, align 4
  %tobool8 = icmp ne i32 %8, 0
  br i1 %tobool8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %lor.lhs.false, %if.end
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %call14 = call %struct.rtx_def* @gen_strmovsi_1(%struct.rtx_def* %9, %struct.rtx_def* %10, %struct.rtx_def* %11, %struct.rtx_def* %12)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %call17 = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  %arrayidx18 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call17, %struct.rtx_def** %arrayidx18, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.else
  %arrayidx20 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx21 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx22 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand2, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call23 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %18)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call24)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call26 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %19)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call26, %struct.rtx_def* %20)
  %call28 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call29 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %22, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %21, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call33 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call32)
  %call34 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call31, %struct.rtx_def* %call33)
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call34)
  %call36 = call %struct.rtx_def* @emit(%struct.rtx_def* %call35)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call37 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call38 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %24, %struct.rtx_def* %call37)
  %call39 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %23, %struct.rtx_def* %call38)
  %call40 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call40)
  %call42 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call39, %struct.rtx_def* %call41)
  %call43 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call42)
  %call44 = call %struct.rtx_def* @emit(%struct.rtx_def* %call43)
  %call45 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call45, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %25 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.9, %if.then
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %26
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovsi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_single_stringop, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call = call %struct.rtx_def* @gen_strmovsi_rex_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %call9 = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call9, %struct.rtx_def** %arrayidx10, align 8
  br label %if.end

if.end:                                           ; preds = %if.else
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx12 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand2, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %14)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call15)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call17, %struct.rtx_def* %16)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %18, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call23)
  %call25 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call22, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call25)
  %call27 = call %struct.rtx_def* @emit(%struct.rtx_def* %call26)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call28 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %20, %struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %19, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call31)
  %call33 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call30, %struct.rtx_def* %call32)
  %call34 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call33)
  %call35 = call %struct.rtx_def* @emit(%struct.rtx_def* %call34)
  %call36 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call36, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %22 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %22
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovhi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_strmovhi_rex64(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i32, i32* @x86_single_stringop, align 4
  %7 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %7
  %and6 = and i32 %6, %shl
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %8 = load i32, i32* @optimize_size, align 4
  %tobool8 = icmp ne i32 %8, 0
  br i1 %tobool8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %lor.lhs.false, %if.end
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %call14 = call %struct.rtx_def* @gen_strmovhi_1(%struct.rtx_def* %9, %struct.rtx_def* %10, %struct.rtx_def* %11, %struct.rtx_def* %12)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %call17 = call %struct.rtx_def* @gen_reg_rtx(i32 3)
  %arrayidx18 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call17, %struct.rtx_def** %arrayidx18, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.else
  %arrayidx20 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx21 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx22 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand2, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call23 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %18)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call24)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call26 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %19)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call26, %struct.rtx_def* %20)
  %call28 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call29 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %22, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %21, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call33 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call32)
  %call34 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call31, %struct.rtx_def* %call33)
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call34)
  %call36 = call %struct.rtx_def* @emit(%struct.rtx_def* %call35)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call37 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call38 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %24, %struct.rtx_def* %call37)
  %call39 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %23, %struct.rtx_def* %call38)
  %call40 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call40)
  %call42 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call39, %struct.rtx_def* %call41)
  %call43 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call42)
  %call44 = call %struct.rtx_def* @emit(%struct.rtx_def* %call43)
  %call45 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call45, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %25 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.9, %if.then
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %26
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovhi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_single_stringop, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call = call %struct.rtx_def* @gen_strmovhi_rex_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %call9 = call %struct.rtx_def* @gen_reg_rtx(i32 3)
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call9, %struct.rtx_def** %arrayidx10, align 8
  br label %if.end

if.end:                                           ; preds = %if.else
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx12 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand2, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %14)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call15)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call17, %struct.rtx_def* %16)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %18, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call23)
  %call25 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call22, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call25)
  %call27 = call %struct.rtx_def* @emit(%struct.rtx_def* %call26)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call28 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %20, %struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %19, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call31)
  %call33 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call30, %struct.rtx_def* %call32)
  %call34 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call33)
  %call35 = call %struct.rtx_def* @emit(%struct.rtx_def* %call34)
  %call36 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call36, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %22 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %22
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_strmovqi_rex64(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i32, i32* @x86_single_stringop, align 4
  %7 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %7
  %and6 = and i32 %6, %shl
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %8 = load i32, i32* @optimize_size, align 4
  %tobool8 = icmp ne i32 %8, 0
  br i1 %tobool8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %lor.lhs.false, %if.end
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %call14 = call %struct.rtx_def* @gen_strmovqi_1(%struct.rtx_def* %9, %struct.rtx_def* %10, %struct.rtx_def* %11, %struct.rtx_def* %12)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %call17 = call %struct.rtx_def* @gen_reg_rtx(i32 2)
  %arrayidx18 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call17, %struct.rtx_def** %arrayidx18, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.else
  %arrayidx20 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx21 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx22 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand2, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call23 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %18)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call24)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call26 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %19)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call26, %struct.rtx_def* %20)
  %call28 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %22, %struct.rtx_def* %23)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %21, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call31)
  %call33 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call30, %struct.rtx_def* %call32)
  %call34 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call33)
  %call35 = call %struct.rtx_def* @emit(%struct.rtx_def* %call34)
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %25, %struct.rtx_def* %26)
  %call37 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %24, %struct.rtx_def* %call36)
  %call38 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call39 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call38)
  %call40 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call37, %struct.rtx_def* %call39)
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call40)
  %call42 = call %struct.rtx_def* @emit(%struct.rtx_def* %call41)
  %call43 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call43, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %27 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.9, %if.then
  %28 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %28
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strmovqi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_single_stringop, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call = call %struct.rtx_def* @gen_strmovqi_rex_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %call9 = call %struct.rtx_def* @gen_reg_rtx(i32 2)
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call9, %struct.rtx_def** %arrayidx10, align 8
  br label %if.end

if.end:                                           ; preds = %if.else
  %arrayidx11 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx12 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx13 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand2, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %14)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call15)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call17, %struct.rtx_def* %16)
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %18, %struct.rtx_def* %19)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call22)
  %call24 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call21, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call24)
  %call26 = call %struct.rtx_def* @emit(%struct.rtx_def* %call25)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %21, %struct.rtx_def* %22)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %20, %struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call29)
  %call31 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call28, %struct.rtx_def* %call30)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call31)
  %call33 = call %struct.rtx_def* @emit(%struct.rtx_def* %call32)
  %call34 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call34, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %23 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %24 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %24
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_clrstrsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call = call i32 @ix86_expand_clrstr(%struct.rtx_def* %3, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call6 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call6, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %8
}

declare i32 @ix86_expand_clrstr(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_clrstrdi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call = call i32 @ix86_expand_clrstr(%struct.rtx_def* %3, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call6 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call6, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetdi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_single_stringop, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call = call %struct.rtx_def* @gen_strsetdi_rex_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand1.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call10, %struct.rtx_def* %12)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %14, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call15, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call18)
  %call20 = call %struct.rtx_def* @emit(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %15 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_strsetsi_rex64(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  %6 = load i32, i32* @x86_single_stringop, align 4
  %7 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %7
  %and6 = and i32 %6, %shl
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %8 = load i32, i32* @optimize_size, align 4
  %tobool8 = icmp ne i32 %8, 0
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %lor.lhs.false, %if.else
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %call13 = call %struct.rtx_def* @gen_strsetsi_1(%struct.rtx_def* %9, %struct.rtx_def* %10, %struct.rtx_def* %11)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end.16

if.end.16:                                        ; preds = %if.end
  %arrayidx17 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx18 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call19, %struct.rtx_def* %16)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call22 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %18, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call25)
  %call27 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call24, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call27)
  %call29 = call %struct.rtx_def* @emit(%struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call30, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.16, %if.then.9, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetsi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_single_stringop, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call = call %struct.rtx_def* @gen_strsetsi_rex_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand1.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call10, %struct.rtx_def* %12)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %14, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call15, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call18)
  %call20 = call %struct.rtx_def* @emit(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %15 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsethi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_strsethi_rex64(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  %6 = load i32, i32* @x86_single_stringop, align 4
  %7 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %7
  %and6 = and i32 %6, %shl
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %8 = load i32, i32* @optimize_size, align 4
  %tobool8 = icmp ne i32 %8, 0
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %lor.lhs.false, %if.else
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %call13 = call %struct.rtx_def* @gen_strsethi_1(%struct.rtx_def* %9, %struct.rtx_def* %10, %struct.rtx_def* %11)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end.16

if.end.16:                                        ; preds = %if.end
  %arrayidx17 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx18 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call19, %struct.rtx_def* %16)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call22 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %18, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call25)
  %call27 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call24, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call27)
  %call29 = call %struct.rtx_def* @emit(%struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call30, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.16, %if.then.9, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %20
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsethi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_single_stringop, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call = call %struct.rtx_def* @gen_strsethi_rex_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand1.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 3, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call10, %struct.rtx_def* %12)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 2)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %14, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call15, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call18)
  %call20 = call %struct.rtx_def* @emit(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %15 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call = call %struct.rtx_def* @gen_strsetqi_rex64(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call5 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call5, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  %6 = load i32, i32* @x86_single_stringop, align 4
  %7 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %7
  %and6 = and i32 %6, %shl
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %8 = load i32, i32* @optimize_size, align 4
  %tobool8 = icmp ne i32 %8, 0
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %lor.lhs.false, %if.else
  %arrayidx10 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %call13 = call %struct.rtx_def* @gen_strsetqi_1(%struct.rtx_def* %9, %struct.rtx_def* %10, %struct.rtx_def* %11)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end.16

if.end.16:                                        ; preds = %if.end
  %arrayidx17 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx18 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call19, %struct.rtx_def* %16)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %18, %struct.rtx_def* %19)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call24)
  %call26 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call23, %struct.rtx_def* %call25)
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call26)
  %call28 = call %struct.rtx_def* @emit(%struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call29, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.16, %if.then.9, %if.then
  %21 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %21
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strsetqi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @x86_single_stringop, align 4
  %3 = load i32, i32* @ix86_cpu, align 4
  %shl = shl i32 1, %3
  %and = and i32 %2, %shl
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @optimize_size, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call = call %struct.rtx_def* @gen_strsetqi_rex_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx8 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx9 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand1.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call10, %struct.rtx_def* %12)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %14, %struct.rtx_def* %15)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %13, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call15)
  %call17 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call14, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call17)
  %call19 = call %struct.rtx_def* @emit(%struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call20, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %16 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %17
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpstrsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %operand4.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [5 x %struct.rtx_def*], align 16
  %addr1 = alloca %struct.rtx_def*, align 8
  %addr2 = alloca %struct.rtx_def*, align 8
  %out = alloca %struct.rtx_def*, align 8
  %outlow = alloca %struct.rtx_def*, align 8
  %count = alloca %struct.rtx_def*, align 8
  %countreg = alloca %struct.rtx_def*, align 8
  %align = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* %operand4, %struct.rtx_def** %operand4.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand4.addr, align 8
  %arrayidx4 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  store %struct.rtx_def* %4, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %out, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 61
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 4)
  store %struct.rtx_def* %call, %struct.rtx_def** %out, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* @target_flags, align 4
  %and = and i32 %8, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %arrayidx6 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call8 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond, %struct.rtx_def* %10)
  store %struct.rtx_def* %call8, %struct.rtx_def** %addr1, align 8
  %11 = load i32, i32* @target_flags, align 4
  %and9 = and i32 %11, 33554432
  %tobool10 = icmp ne i32 %and9, 0
  %cond11 = select i1 %tobool10, i32 5, i32 4
  %arrayidx12 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  %call16 = call %struct.rtx_def* @copy_to_mode_reg(i32 %cond11, %struct.rtx_def* %13)
  store %struct.rtx_def* %call16, %struct.rtx_def** %addr2, align 8
  %arrayidx17 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %count, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %count, align 8
  %call18 = call %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def* %15)
  store %struct.rtx_def* %call18, %struct.rtx_def** %countreg, align 8
  %arrayidx19 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %align, align 8
  %call20 = call %struct.rtx_def* @gen_cld()
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %count, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load22 = load i32, i32* %18, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 54
  br i1 %cmp24, label %if.then.25, label %if.else.42

if.then.25:                                       ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %count, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx27 to i64*
  %20 = load i64, i64* %rtwint, align 8
  %cmp28 = icmp eq i64 %20, 0
  br i1 %cmp28, label %if.then.29, label %if.end.33

if.then.29:                                       ; preds = %if.then.25
  %arrayidx30 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx30, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call31 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %21, %struct.rtx_def* %22)
  %call32 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call32, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %23 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %retval
  br label %return

if.end.33:                                        ; preds = %if.then.25
  %24 = load i32, i32* @target_flags, align 4
  %and34 = and i32 %24, 33554432
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then.36, label %if.else

if.then.36:                                       ; preds = %if.end.33
  %25 = load %struct.rtx_def*, %struct.rtx_def** %addr1, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %addr2, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %align, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %addr1, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %addr2, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call37 = call %struct.rtx_def* @gen_cmpstrqi_nz_rex_1(%struct.rtx_def* %25, %struct.rtx_def* %26, %struct.rtx_def* %27, %struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* %30, %struct.rtx_def* %31)
  %call38 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call37)
  br label %if.end.41

if.else:                                          ; preds = %if.end.33
  %32 = load %struct.rtx_def*, %struct.rtx_def** %addr1, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %addr2, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %align, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %addr1, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %addr2, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call39 = call %struct.rtx_def* @gen_cmpstrqi_nz_1(%struct.rtx_def* %32, %struct.rtx_def* %33, %struct.rtx_def* %34, %struct.rtx_def* %35, %struct.rtx_def* %36, %struct.rtx_def* %37, %struct.rtx_def* %38)
  %call40 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call39)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.then.36
  br label %if.end.56

if.else.42:                                       ; preds = %if.end
  %39 = load i32, i32* @target_flags, align 4
  %and43 = and i32 %39, 33554432
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %if.then.45, label %if.else.50

if.then.45:                                       ; preds = %if.else.42
  %40 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call46 = call %struct.rtx_def* @gen_cmpdi_1_rex64(%struct.rtx_def* %40, %struct.rtx_def* %41)
  %call47 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call46)
  %42 = load %struct.rtx_def*, %struct.rtx_def** %addr1, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %addr2, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %align, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %addr1, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %addr2, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call48 = call %struct.rtx_def* @gen_cmpstrqi_rex_1(%struct.rtx_def* %42, %struct.rtx_def* %43, %struct.rtx_def* %44, %struct.rtx_def* %45, %struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %48)
  %call49 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call48)
  br label %if.end.55

if.else.50:                                       ; preds = %if.else.42
  %49 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call51 = call %struct.rtx_def* @gen_cmpsi_1(%struct.rtx_def* %49, %struct.rtx_def* %50)
  %call52 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call51)
  %51 = load %struct.rtx_def*, %struct.rtx_def** %addr1, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %addr2, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %align, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %addr1, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %addr2, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %countreg, align 8
  %call53 = call %struct.rtx_def* @gen_cmpstrqi_1(%struct.rtx_def* %51, %struct.rtx_def* %52, %struct.rtx_def* %53, %struct.rtx_def* %54, %struct.rtx_def* %55, %struct.rtx_def* %56, %struct.rtx_def* %57)
  %call54 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call53)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.50, %if.then.45
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.end.41
  %58 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call57 = call %struct.rtx_def* @gen_lowpart(i32 2, %struct.rtx_def* %58)
  store %struct.rtx_def* %call57, %struct.rtx_def** %outlow, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %outlow, align 8
  %call58 = call %struct.rtx_def* @gen_cmpintqi(%struct.rtx_def* %59)
  %call59 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call58)
  %60 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %outlow, align 8
  %call60 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 120, i32 4, %struct.rtx_def* %61)
  %call61 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %60, %struct.rtx_def* %call60)
  %arrayidx62 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx62, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %cmp63 = icmp ne %struct.rtx_def* %62, %63
  br i1 %cmp63, label %if.then.64, label %if.end.67

if.then.64:                                       ; preds = %if.end.56
  %arrayidx65 = getelementptr inbounds [5 x %struct.rtx_def*], [5 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %64 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx65, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %out, align 8
  %call66 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %64, %struct.rtx_def* %65)
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.64, %if.end.56
  %call68 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call68, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %66 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %66, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.67, %if.then.29
  %67 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %67
}

declare %struct.rtx_def* @ix86_zero_extend_to_Pmode(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_cmpintqi(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 2)
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %call2 = call %struct.rtx_def* @gen_reg_rtx(i32 2)
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand1, align 8
  %arrayidx6 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand2, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 109, i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %5)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 111, i32 2, %struct.rtx_def* %call11, %struct.rtx_def* %7)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 76, i32 2, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call17)
  %call19 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call16, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call19)
  %call21 = call %struct.rtx_def* @emit(%struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call22, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strlensi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call i32 @ix86_expand_strlen(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %10
}

declare i32 @ix86_expand_strlen(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_strlendi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %arrayidx7 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call = call i32 @ix86_expand_strlen(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

if.else:                                          ; preds = %entry
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1207(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %operand6 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand4, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand5, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 6
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand6, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %15)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %call7, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call9)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand6, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %16)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %17)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call13)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %18)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %19)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %20)
  %call18 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 7, %struct.rtx_def* %call10, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call14, %struct.rtx_def* %call15, %struct.rtx_def* %call16, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call18)
  %call20 = call %struct.rtx_def* @emit(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %21
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1208(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %operand6 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand3, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand4, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %operand5, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 6
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %operand6, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand6, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 102, i32 0, %struct.rtx_def* %14, %struct.rtx_def* %15)
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %16)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %17)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 52, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 52, %struct.rtx_def* %call7, %struct.rtx_def* %call10, %struct.rtx_def* %18)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call11)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %19)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 19)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call16)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %20)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %21)
  %22 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %22)
  %call21 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 7, %struct.rtx_def* %call12, %struct.rtx_def* %call13, %struct.rtx_def* %call15, %struct.rtx_def* %call17, %struct.rtx_def* %call18, %struct.rtx_def* %call19, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call21)
  %call23 = call %struct.rtx_def* @emit(%struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call24, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %23 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %23
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movdicc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arraydecay = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %call = call i32 @ix86_expand_int_movcc(%struct.rtx_def** %arraydecay)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

declare i32 @ix86_expand_int_movcc(%struct.rtx_def**) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movsicc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arraydecay = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %call = call i32 @ix86_expand_int_movcc(%struct.rtx_def** %arraydecay)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movhicc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arraydecay = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %call = call i32 @ix86_expand_int_movcc(%struct.rtx_def** %arraydecay)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movsfcc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arraydecay = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %call = call i32 @ix86_expand_fp_movcc(%struct.rtx_def** %arraydecay)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

declare i32 @ix86_expand_fp_movcc(%struct.rtx_def**) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movdfcc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arraydecay = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %call = call i32 @ix86_expand_fp_movcc(%struct.rtx_def** %arraydecay)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1214(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %operand6 = alloca %struct.rtx_def*, align 8
  %operand7 = alloca %struct.rtx_def*, align 8
  %operand8 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 5
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 6
  call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr1, %struct.rtx_def** %add.ptr2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 3
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 7
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 8
  call void @split_di(%struct.rtx_def** %add.ptr3, i32 1, %struct.rtx_def** %add.ptr4, %struct.rtx_def** %add.ptr5)
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %add.ptr7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 3
  call void @split_di(%struct.rtx_def** %6, i32 1, %struct.rtx_def** %add.ptr6, %struct.rtx_def** %add.ptr7)
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand2, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 3
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand3, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %operand4, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 5
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %operand5, align 8
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 6
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %operand6, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 7
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %operand7, align 8
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %operand8, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load = load i32, i32* %29, align 8
  %bf.clear = and i32 %bf.load, 65535
  %30 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load16 = load i32, i32* %31, align 8
  %bf.lshr = lshr i32 %bf.load16, 16
  %bf.clear17 = and i32 %bf.lshr, 255
  %32 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 %bf.clear17, %struct.rtx_def* %32, %struct.rtx_def* %33)
  %34 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %operand7, align 8
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %34, %struct.rtx_def* %35)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %27, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call19)
  %36 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load21 = load i32, i32* %38, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %39 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load23 = load i32, i32* %40, align 8
  %bf.lshr24 = lshr i32 %bf.load23, 16
  %bf.clear25 = and i32 %bf.lshr24, 255
  %41 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call26 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %41)
  %42 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call27 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear22, i32 %bf.clear25, %struct.rtx_def* %call26, %struct.rtx_def* %42)
  %43 = load %struct.rtx_def*, %struct.rtx_def** %operand6, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %operand8, align 8
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 4, %struct.rtx_def* %call27, %struct.rtx_def* %43, %struct.rtx_def* %44)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %36, %struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call31, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %45 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %45
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movxfcc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arraydecay = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %call = call i32 @ix86_expand_fp_movcc(%struct.rtx_def** %arraydecay)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movtfcc(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [4 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %arrayidx3 = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i64 3
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx3, align 8
  %arraydecay = getelementptr inbounds [4 x %struct.rtx_def*], [4 x %struct.rtx_def*]* %operands, i32 0, i32 0
  %call = call i32 @ix86_expand_fp_movcc(%struct.rtx_def** %arraydecay)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_minsf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 107, i32 0, %struct.rtx_def* %1, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 15, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  ret %struct.rtx_def* %call6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1218(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 107, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call3 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 15, %struct.rtx_def* %call, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1219(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 57, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 104, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 15, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mindf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 107, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 16, %struct.rtx_def* %call, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1221(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 107, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call3 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 16, %struct.rtx_def* %call, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1222(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call3 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %7)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 57, %struct.rtx_def* %6, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 104, i32 0, %struct.rtx_def* %call7, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 16, %struct.rtx_def* %call8, %struct.rtx_def* %10, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_maxsf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 15, %struct.rtx_def* %call, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1224(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call3 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 15, %struct.rtx_def* %call, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1225(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 57, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 15, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_maxdf3(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 16, %struct.rtx_def* %call, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1227(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call3 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 16, %struct.rtx_def* %call, %struct.rtx_def* %call3, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %11
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1228(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand2, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 57, %struct.rtx_def* %6, %struct.rtx_def* %7)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 105, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 16, %struct.rtx_def* %call7, %struct.rtx_def* %call8, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_pro_epilogue_adjust_stack(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call = call %struct.rtx_def* @gen_pro_epilogue_adjust_stack_rex64(%struct.rtx_def* %4, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx8 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx9 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx10 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand2.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %12, %struct.rtx_def* %13)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %11, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call16 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call12, %struct.rtx_def* %call14, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call18)
  %call20 = call %struct.rtx_def* @emit(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %14 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1230(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 5
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** @ix86_compare_op0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 4
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** @ix86_compare_op1, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %call = call i32 @swap_condition(i32 %bf.clear)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 5
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %call, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  store %struct.rtx_def* %call5, %struct.rtx_def** %arrayidx6, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %call7 = call i32 @ix86_expand_fp_movcc(%struct.rtx_def** %12)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %13
}

declare i32 @swap_condition(i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1231(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %operand6 = alloca %struct.rtx_def*, align 8
  %operand7 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 3
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @operands_match_p(%struct.rtx_def* %1, %struct.rtx_def* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 16727, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.gen_split_1231, i32 0, i32 0)) #3
  unreachable

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load4 = load i32, i32* %9, align 8
  %bf.value = and i32 %bf.clear, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear5 = and i32 %bf.load4, -16711681
  %bf.set = or i32 %bf.clear5, %bf.shl
  store i32 %bf.set, i32* %9, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 0
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %call8 = call i32 @operands_match_p(%struct.rtx_def* %11, %struct.rtx_def* %13)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 6
  store %struct.rtx_def* %15, %struct.rtx_def** %arrayidx12, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 2
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 7
  store %struct.rtx_def* %18, %struct.rtx_def** %arrayidx14, align 8
  br label %if.end.19

if.else:                                          ; preds = %if.end
  %20 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 2
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %22, i64 6
  store %struct.rtx_def* %21, %struct.rtx_def** %arrayidx16, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx17 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 4
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 7
  store %struct.rtx_def* %24, %struct.rtx_def** %arrayidx18, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.10
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx20 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %26, i64 0
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %operand0, align 8
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %28, i64 1
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %operand1, align 8
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx22 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %30, i64 2
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %operand2, align 8
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %32, i64 3
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8
  store %struct.rtx_def* %33, %struct.rtx_def** %operand3, align 8
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 4
  %35 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %operand4, align 8
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx25 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %36, i64 5
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8
  store %struct.rtx_def* %37, %struct.rtx_def** %operand5, align 8
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %38, i64 6
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %operand6, align 8
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx27 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 7
  %41 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %operand7, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load28 = load i32, i32* %44, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %45 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load30 = load i32, i32* %46, align 8
  %bf.lshr31 = lshr i32 %bf.load30, 16
  %bf.clear32 = and i32 %bf.lshr31, 255
  %47 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call33 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %47)
  %48 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call34 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear29, i32 %bf.clear32, %struct.rtx_def* %call33, %struct.rtx_def* %48)
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %42, %struct.rtx_def* %call34)
  %call36 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call35)
  %49 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call37 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %49, i32 0)
  %50 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call38 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %50)
  %call39 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %call38, i32 0)
  %51 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call40 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %51)
  %call41 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %call40, i32 0)
  %call42 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 6, %struct.rtx_def* %call39, %struct.rtx_def* %call41)
  %call43 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call37, %struct.rtx_def* %call42)
  %call44 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call43)
  %52 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call45 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %52)
  %call46 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %call45, i32 0)
  %53 = load %struct.rtx_def*, %struct.rtx_def** %operand4, align 8
  %call47 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %53)
  %call48 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %call47, i32 0)
  %call49 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 6, %struct.rtx_def* %call48)
  %54 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call50 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %54, i32 0)
  %call51 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 6, %struct.rtx_def* %call49, %struct.rtx_def* %call50)
  %call52 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call46, %struct.rtx_def* %call51)
  %call53 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call52)
  %55 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call54 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %55, i32 0)
  %56 = load %struct.rtx_def*, %struct.rtx_def** %operand6, align 8
  %call55 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %56, i32 0)
  %57 = load %struct.rtx_def*, %struct.rtx_def** %operand7, align 8
  %call56 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %57, i32 0)
  %call57 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 84, i32 6, %struct.rtx_def* %call55, %struct.rtx_def* %call56)
  %call58 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call54, %struct.rtx_def* %call57)
  %call59 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call58)
  %call60 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call60, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %58 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %58
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1232(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %operand4 = alloca %struct.rtx_def*, align 8
  %operand5 = alloca %struct.rtx_def*, align 8
  %operand6 = alloca %struct.rtx_def*, align 8
  %operand7 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.value = and i32 %bf.clear, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear3 = and i32 %bf.load2, -16711681
  %bf.set = or i32 %bf.clear3, %bf.shl
  store i32 %bf.set, i32* %5, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  %call = call i32 @sse_comparison_operator(%struct.rtx_def* %7, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 5
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %tmp, align 8
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 5
  store %struct.rtx_def* %11, %struct.rtx_def** %arrayidx7, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 4
  store %struct.rtx_def* %13, %struct.rtx_def** %arrayidx8, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load10 = load i32, i32* %17, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %call12 = call i32 @swap_condition(i32 %bf.clear11)
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 1
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load14 = load i32, i32* %20, align 8
  %bf.value15 = and i32 %call12, 65535
  %bf.clear16 = and i32 %bf.load14, -65536
  %bf.set17 = or i32 %bf.clear16, %bf.value15
  store i32 %bf.set17, i32* %20, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 2
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx18, align 8
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %23, i64 0
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load20 = load i32, i32* %25, align 8
  %bf.lshr21 = lshr i32 %bf.load20, 16
  %bf.clear22 = and i32 %bf.lshr21, 255
  %call23 = call i32 @const0_operand(%struct.rtx_def* %22, i32 %bf.clear22)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.end
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %26, i64 3
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx27 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %28, i64 7
  store %struct.rtx_def* %27, %struct.rtx_def** %arrayidx27, align 8
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 0
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  %call29 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %30, i32 0)
  %call30 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 6, %struct.rtx_def* %call29)
  %31 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx31 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %31, i64 6
  store %struct.rtx_def* %call30, %struct.rtx_def** %arrayidx31, align 8
  br label %if.end.37

if.else:                                          ; preds = %if.end
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx32 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %32, i64 2
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx32, align 8
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx33 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 7
  store %struct.rtx_def* %33, %struct.rtx_def** %arrayidx33, align 8
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %35, i64 0
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8
  %call35 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %36, i32 0)
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx36 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %37, i64 6
  store %struct.rtx_def* %call35, %struct.rtx_def** %arrayidx36, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.else, %if.then.25
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx38 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %38, i64 0
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %operand0, align 8
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx39 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 1
  %41 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx39, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %operand1, align 8
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx40 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %42, i64 2
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %operand2, align 8
  %44 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx41 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %44, i64 3
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx41, align 8
  store %struct.rtx_def* %45, %struct.rtx_def** %operand3, align 8
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx42 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %46, i64 4
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx42, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %operand4, align 8
  %48 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx43 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %48, i64 5
  %49 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx43, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %operand5, align 8
  %50 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx44 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %50, i64 6
  %51 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx44, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %operand6, align 8
  %52 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx45 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %52, i64 7
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx45, align 8
  store %struct.rtx_def* %53, %struct.rtx_def** %operand7, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load46 = load i32, i32* %56, align 8
  %bf.clear47 = and i32 %bf.load46, 65535
  %57 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load48 = load i32, i32* %58, align 8
  %bf.lshr49 = lshr i32 %bf.load48, 16
  %bf.clear50 = and i32 %bf.lshr49, 255
  %59 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call51 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %59)
  %60 = load %struct.rtx_def*, %struct.rtx_def** %operand5, align 8
  %call52 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear47, i32 %bf.clear50, %struct.rtx_def* %call51, %struct.rtx_def* %60)
  %call53 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %54, %struct.rtx_def* %call52)
  %call54 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call53)
  %61 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call55 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %61)
  %call56 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %call55, i32 0)
  %62 = load %struct.rtx_def*, %struct.rtx_def** %operand6, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %operand7, align 8
  %call57 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %63, i32 0)
  %call58 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 6, %struct.rtx_def* %62, %struct.rtx_def* %call57)
  %call59 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call56, %struct.rtx_def* %call58)
  %call60 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call59)
  %call61 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call61, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %64 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %64
}

declare i32 @sse_comparison_operator(%struct.rtx_def*, i32) #1

declare i32 @const0_operand(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_allocate_stack_worker(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx1 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call %struct.rtx_def* @gen_allocate_stack_worker_rex64(%struct.rtx_def* %2)
  %call2 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  br label %if.end

if.else:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call4 = call %struct.rtx_def* @gen_allocate_stack_worker_1(%struct.rtx_def* %3)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call6 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call6, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_allocate_stack(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call = call %struct.rtx_def* @copy_to_mode_reg(i32 4, %struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_allocate_stack_worker(%struct.rtx_def* %call)
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call3)
  %arrayidx5 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 8), align 8
  %call6 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3, %struct.rtx_def* %4)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_builtin_setjmp_receiver(%struct.rtx_def* %operand0) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  call void @load_pic_register()
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

declare void @load_pic_register() #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1236(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 87
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call7 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 2
  store %struct.rtx_def* %call7, %struct.rtx_def** %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 3
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load10 = load i32, i32* %14, align 8
  %bf.clear11 = and i32 %bf.load10, -16711681
  %bf.set = or i32 %bf.clear11, 262144
  store i32 %bf.set, i32* %14, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 0
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand0, align 8
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %17, i64 1
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %operand1, align 8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 2
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %operand2, align 8
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx15 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i64 3
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx15, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %operand3, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load16 = load i32, i32* %25, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %26 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load18 = load i32, i32* %27, align 8
  %bf.lshr = lshr i32 %bf.load18, 16
  %bf.clear19 = and i32 %bf.lshr, 255
  %28 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call20 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear17, i32 %bf.clear19, %struct.rtx_def* %28, %struct.rtx_def* %29)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %23, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call22)
  %call24 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call21, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call24)
  %call26 = call %struct.rtx_def* @emit(%struct.rtx_def* %call25)
  %call27 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call27, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %30 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %30
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1237(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx1 to i64*
  %2 = load i64, i64* %rtwint, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx3 = getelementptr inbounds [59 x i64], [59 x i64]* @mode_mask_array, i32 0, i64 %idxprom
  %6 = load i64, i64* %arrayidx3, align 8
  %and = and i64 %2, %6
  %call = call i64 @trunc_int_for_mode(i64 %and, i32 4)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  store %struct.rtx_def* %call4, %struct.rtx_def** %arrayidx5, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call7 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 0
  store %struct.rtx_def* %call7, %struct.rtx_def** %arrayidx8, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  %call10 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %12)
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 1
  store %struct.rtx_def* %call10, %struct.rtx_def** %arrayidx11, align 8
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 0
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand0, align 8
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx13 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx13, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %operand1, align 8
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 2
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %operand2, align 8
  %call15 = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %20, %struct.rtx_def* %21)
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call16, %struct.rtx_def* %22)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call15, %struct.rtx_def* %call17)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call19 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %24)
  %25 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call20 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %25)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call19, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %23, %struct.rtx_def* %call21)
  %call23 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call18, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call23)
  %call25 = call %struct.rtx_def* @emit(%struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call26, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %26 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %26
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1238(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx1 to i64*
  %2 = load i64, i64* %rtwint, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx3 = getelementptr inbounds [59 x i64], [59 x i64]* @mode_mask_array, i32 0, i64 %idxprom
  %6 = load i64, i64* %arrayidx3, align 8
  %and = and i64 %2, %6
  %call = call i64 @trunc_int_for_mode(i64 %and, i32 4)
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call)
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 1
  store %struct.rtx_def* %call4, %struct.rtx_def** %arrayidx5, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 0
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  %call7 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %9)
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %10, i64 0
  store %struct.rtx_def* %call7, %struct.rtx_def** %arrayidx8, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 0
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand0, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand1, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %15, %struct.rtx_def* %16)
  %17 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call12, %struct.rtx_def* %17)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %18
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1239(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand1, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 77, i32 4, %struct.rtx_def* %11)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  %call13 = call %struct.rtx_def* @emit(%struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1240(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 1
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand1, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 86, i32 4, %struct.rtx_def* %11)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1241(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %4)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %call6 = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %7)
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 3
  store %struct.rtx_def* %call6, %struct.rtx_def** %arrayidx7, align 8
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx9 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx9, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %operand1, align 8
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %operand2, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %15, i64 3
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand3, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 4, %struct.rtx_def* %18, %struct.rtx_def* %19, %struct.rtx_def* %20)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %17, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %21
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1242(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 1, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1243(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 1, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1244(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 1, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 15, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1245(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 1, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 3, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1246(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 1, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i32 2, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1247(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1248(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 3, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call2 = call i32 @true_regnum(%struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %call2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %11)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  %call13 = call %struct.rtx_def* @emit(%struct.rtx_def* %call12)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %12, %struct.rtx_def* %13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %14 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1249(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i32 2, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call2 = call i32 @true_regnum(%struct.rtx_def* %2)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 %call2)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx4, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %11)
  %call9 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call9)
  %call11 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call8, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call11)
  %call13 = call %struct.rtx_def* @emit(%struct.rtx_def* %call12)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %12, %struct.rtx_def* %13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %14 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %15
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1250(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1251(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 3, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1252(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0), i32 2, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1253(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 1, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 3
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call8, %struct.rtx_def* %12)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call12, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %14
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1254(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 4, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1255(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 3, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1256(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 2, %struct.rtx_def* %5, %struct.rtx_def* %6)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %call5 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call2, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call5)
  %call7 = call %struct.rtx_def* @emit(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1257(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1258(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 2, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call2, %struct.rtx_def* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call3)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call6 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 2, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1259(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 55, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call4, %struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 55, %struct.rtx_def* %call5, %struct.rtx_def* %6)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %7)
  %call9 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call10 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %call8, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call12 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8)
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call14 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 133, i32 4, %struct.rtx_def* %call12, %struct.rtx_def* %call13, %struct.rtx_def* %call14)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call16 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 83, i32 4, %struct.rtx_def* %call15, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %call17)
  %call19 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call19)
  %call21 = call %struct.rtx_def* @emit(%struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call22, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1260(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load7 = load i32, i32* %15, align 8
  %bf.lshr = lshr i32 %bf.load7, 16
  %bf.clear8 = and i32 %bf.lshr, 255
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %16)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call10 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %17)
  %call11 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 %bf.clear8, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %11, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @emit(%struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1261(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load7 = load i32, i32* %15, align 8
  %bf.lshr = lshr i32 %bf.load7, 16
  %bf.clear8 = and i32 %bf.lshr, 255
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %16)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call10 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %17)
  %call11 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 %bf.clear8, %struct.rtx_def* %call9, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %11, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @emit(%struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call18, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %18 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %19
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1262(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load8 = load i32, i32* %15, align 8
  %bf.lshr = lshr i32 %bf.load8, 16
  %bf.clear9 = and i32 %bf.lshr, 255
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call10 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %16)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call11 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 %bf.clear9, %struct.rtx_def* %call10, %struct.rtx_def* %17)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call7, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @emit(%struct.rtx_def* %call16)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call18 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %18)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call19 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %19)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call18, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call22, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %21 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %21
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1263(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %operand3 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand1, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand2, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %14 = load %struct.rtx_def*, %struct.rtx_def** %operand3, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load8 = load i32, i32* %15, align 8
  %bf.lshr = lshr i32 %bf.load8, 16
  %bf.clear9 = and i32 %bf.lshr, 255
  %16 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call10 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %17)
  %call11 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 %bf.clear, i32 %bf.clear9, %struct.rtx_def* %16, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call7, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  %call17 = call %struct.rtx_def* @emit(%struct.rtx_def* %call16)
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call18 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %18)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call19 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %19)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call18, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call22, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %20 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %21 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %21
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1264(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp eq i32 %bf.clear, 5
  %cond = select i1 %cmp, i32 5, i32 4
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @true_regnum(%struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond, i32 %call)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  %call10 = call %struct.rtx_def* @emit(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1265(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 64, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %3)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call2)
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call1, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call4)
  %call6 = call %struct.rtx_def* @emit(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call7, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1266(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp eq i32 %bf.clear, 5
  %cond = select i1 %cmp, i32 5, i32 4
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  %call = call i32 @true_regnum(%struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond, i32 %call)
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 0
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand0, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 63), align 8
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %8, %struct.rtx_def* %9)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call6)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call5, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call8)
  %call10 = call %struct.rtx_def* @emit(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %10 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %10
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1267(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call, %struct.rtx_def* %6)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1268(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %call = call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx1, align 8
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %5, i64 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %operand1, align 8
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %7, i64 2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %operand2, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call5 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call5, %struct.rtx_def* %11)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call7, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %12
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1269(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %5)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call, %struct.rtx_def* %6)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1270(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx1 to i64*
  %2 = load i64, i64* %rtwint, align 8
  %call = call i32 @exact_log2_wide(i64 %2)
  %conv = sext i32 %call to i64
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 4, %struct.rtx_def* %call7, %struct.rtx_def* %12)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %13
}

declare i32 @exact_log2_wide(i64) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1271(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx1 to i64*
  %2 = load i64, i64* %rtwint, align 8
  %call = call i32 @exact_log2_wide(i64 %2)
  %conv = sext i32 %call to i64
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 5, %struct.rtx_def* %call7, %struct.rtx_def* %12)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1272(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 2
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx1 to i64*
  %2 = load i64, i64* %rtwint, align 8
  %call = call i32 @exact_log2_wide(i64 %2)
  %conv = sext i32 %call to i64
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 2
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 0
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand0, align 8
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx5 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %6, i64 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %operand1, align 8
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %operand2, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %11)
  %12 = load %struct.rtx_def*, %struct.rtx_def** %operand2, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 87, i32 4, %struct.rtx_def* %call7, %struct.rtx_def* %12)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %10, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call9, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %13
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1273(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 4, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call5)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call8, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1274(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 4, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call5)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 4, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call11)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call13 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %5)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call16 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call14, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call18)
  %call20 = call %struct.rtx_def* @emit(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1275(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 4, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call5)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1276(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 4, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call5)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 4, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call11)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call13 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %5)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1277(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call11 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call11)
  %call13 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call4, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call13)
  %call15 = call %struct.rtx_def* @emit(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1278(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx2, align 8
  %cmp3 = icmp eq %struct.rtx_def* %call1, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  call void @start_sequence()
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand0, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call17 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call17)
  %call19 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call10, %struct.rtx_def* %call15, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call19)
  %call21 = call %struct.rtx_def* @emit(%struct.rtx_def* %call20)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call23 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call26 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call27 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call26, %struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call25, %struct.rtx_def* %call28)
  %call30 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call24, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call30)
  %call32 = call %struct.rtx_def* @emit(%struct.rtx_def* %call31)
  %call33 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call33, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1279(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call11 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call11)
  %call13 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call4, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call13)
  %call15 = call %struct.rtx_def* @emit(%struct.rtx_def* %call14)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call16 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call17 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call18 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call16, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call21 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call22 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call21, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call20, %struct.rtx_def* %call23)
  %call25 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call19, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call25)
  %call27 = call %struct.rtx_def* @emit(%struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call28, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1280(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1281(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx2, align 8
  %cmp3 = icmp eq %struct.rtx_def* %call1, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  call void @start_sequence()
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand0, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %call14)
  %call16 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call10, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call16)
  %call18 = call %struct.rtx_def* @emit(%struct.rtx_def* %call17)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call20 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call23 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call24 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call23, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call22, %struct.rtx_def* %call25)
  %call27 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call21, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call27)
  %call29 = call %struct.rtx_def* @emit(%struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call30, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1282(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 4, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call13 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call15 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call13, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call18 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call19 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call18, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call17, %struct.rtx_def* %call20)
  %call22 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call16, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call22)
  %call24 = call %struct.rtx_def* @emit(%struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call25, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1283(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 53, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 53, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %6)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1284(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 53, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 53, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %6)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1285(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 53, i32 17)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 53, %struct.rtx_def* %4, %struct.rtx_def* %5)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %6)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %7 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1286(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 53, i32 17)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 128)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 53, %struct.rtx_def* %2, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1287(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 53, i32 17)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 128)
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 53, %struct.rtx_def* %2, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call4 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call4)
  %call6 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call3, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call6)
  %call8 = call %struct.rtx_def* @emit(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call9, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1288(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 5, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call5)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %call12 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call8, %struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call12)
  %call14 = call %struct.rtx_def* @emit(%struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call15, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1289(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 5, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call5)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 5, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call11)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call13 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %5)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call16 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call16)
  %call18 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call14, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call18)
  %call20 = call %struct.rtx_def* @emit(%struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call21, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1290(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 5, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call5)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call10, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1291(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %3)
  %call3 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 5, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call5)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call7 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 5, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call11)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call13 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %5)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1292(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call11 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call11)
  %call13 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call4, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call13)
  %call15 = call %struct.rtx_def* @emit(%struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call16, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1293(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx2, align 8
  %cmp3 = icmp eq %struct.rtx_def* %call1, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  call void @start_sequence()
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand0, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call17 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call16)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call17)
  %call19 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call10, %struct.rtx_def* %call15, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call19)
  %call21 = call %struct.rtx_def* @emit(%struct.rtx_def* %call20)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call23 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call26 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call27 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call26, %struct.rtx_def* %call27)
  %call29 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call25, %struct.rtx_def* %call28)
  %call30 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call24, %struct.rtx_def* %call29)
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call30)
  %call32 = call %struct.rtx_def* @emit(%struct.rtx_def* %call31)
  %call33 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call33, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1294(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call11 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call10)
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call11)
  %call13 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 3, %struct.rtx_def* %call4, %struct.rtx_def* %call9, %struct.rtx_def* %call12)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call13)
  %call15 = call %struct.rtx_def* @emit(%struct.rtx_def* %call14)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call16 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call17 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call18 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call17)
  %call19 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call16, %struct.rtx_def* %call18)
  %call20 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call21 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call22 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call21, %struct.rtx_def* %call22)
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call20, %struct.rtx_def* %call23)
  %call25 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call19, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call25)
  %call27 = call %struct.rtx_def* @emit(%struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call28, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1295(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %call13 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call13, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1296(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 1
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx2, align 8
  %cmp3 = icmp eq %struct.rtx_def* %call1, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  call void @start_sequence()
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx6, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand0, align 8
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %4, i64 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %operand1, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call8 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call9 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call12 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call12, %struct.rtx_def* %call13)
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call11, %struct.rtx_def* %call14)
  %call16 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call10, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call16)
  %call18 = call %struct.rtx_def* @emit(%struct.rtx_def* %call17)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call19 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call20 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %7, %struct.rtx_def* %call20)
  %call22 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call23 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call24 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call23, %struct.rtx_def* %call24)
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call22, %struct.rtx_def* %call25)
  %call27 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call21, %struct.rtx_def* %call26)
  %call28 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call27)
  %call29 = call %struct.rtx_def* @emit(%struct.rtx_def* %call28)
  %call30 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call30, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %8 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %9
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_peephole2_1297(%struct.rtx_def* %curr_insn, %struct.rtx_def** %operands) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %curr_insn.addr = alloca %struct.rtx_def*, align 8
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %_regs_allocated = alloca i64, align 8
  store %struct.rtx_def* %curr_insn, %struct.rtx_def** %curr_insn.addr, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  store i64 0, i64* %_regs_allocated, align 8
  %call = call %struct.rtx_def* @peep2_find_free_register(i32 0, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i32 5, i64* %_regs_allocated)
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  %cmp = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %1, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %operand0, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call2)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %3, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call5, %struct.rtx_def* %call8)
  %call10 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call4, %struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call10)
  %call12 = call %struct.rtx_def* @emit(%struct.rtx_def* %call11)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call13 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %4)
  %call14 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call15 = call %struct.rtx_def* @gen_rtx_MEM(i32 5, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call13, %struct.rtx_def* %call15)
  %call17 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call18 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 7)
  %call19 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 8)
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %call18, %struct.rtx_def* %call19)
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call17, %struct.rtx_def* %call20)
  %call22 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 2, %struct.rtx_def* %call16, %struct.rtx_def* %call21)
  %call23 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call22)
  %call24 = call %struct.rtx_def* @emit(%struct.rtx_def* %call23)
  %call25 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call25, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_conditional_trap(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %call = call %struct.rtx_def* @ix86_expand_compare(i32 %bf.clear, %struct.rtx_def** null, %struct.rtx_def** null)
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 52, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %4)
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call6, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

declare %struct.rtx_def* @ix86_expand_compare(i32, %struct.rtx_def**, %struct.rtx_def**) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movti(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_move(i32 6, %struct.rtx_def** %arraydecay)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_vector_move(i32 6, %struct.rtx_def** %arraydecay2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %3
}

declare void @ix86_expand_vector_move(i32, %struct.rtx_def**) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv4sf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_vector_move(i32 46, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv4si(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_vector_move(i32 37, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv2si(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_vector_move(i32 33, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv4hi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_vector_move(i32 36, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv8qi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_vector_move(i32 39, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_movv2sf(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [2 x %struct.rtx_def*], align 16
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.rtx_def*], [2 x %struct.rtx_def*]* %operands, i32 0, i32 0
  call void @ix86_expand_vector_move(i32 44, %struct.rtx_def** %arraydecay)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1306(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 6, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1307(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 46, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1308(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -16)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 37, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1309(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 33, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1310(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 36, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1311(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 39, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1312(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %operand0 = alloca %struct.rtx_def*, align 8
  %operand1 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %operand0, align 8
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand1, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call3 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -8)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call2, %struct.rtx_def* %call3)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %call4)
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7)
  %call8 = call %struct.rtx_def* @gen_rtx_MEM(i32 44, %struct.rtx_def* %call7)
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand1, align 8
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call8, %struct.rtx_def* %4)
  %call10 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_split_1313(%struct.rtx_def** %operands) #0 {
entry:
  %operands.addr = alloca %struct.rtx_def**, align 8
  %_val = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %operands, %struct.rtx_def*** %operands.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %operands.addr, align 8
  call void @ix86_split_long_move(%struct.rtx_def** %0)
  %call = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sfence() #0 {
entry:
  %operand0 = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [1 x %struct.rtx_def*], align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %call = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 %cond)
  %call1 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call)
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, -134217729
  %bf.set = or i32 %bf.clear, 134217728
  store i32 %bf.set, i32* %2, align 8
  %arrayidx3 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %operand0, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %operand0, align 8
  %call4 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 1, %struct.rtx_def* %5)
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 51, %struct.rtvec_def* %call4, i32 44)
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call5)
  %call7 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call6)
  %call8 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call8, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %6 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sse_prologue_save(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %operand3.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* %operand3, %struct.rtx_def** %operand3.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 21)
  %call1 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 22)
  %call2 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 23)
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 24)
  %call4 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 25)
  %call5 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 26)
  %call6 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 27)
  %call7 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 28)
  %call8 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 8, %struct.rtx_def* %call, %struct.rtx_def* %call1, %struct.rtx_def* %call2, %struct.rtx_def* %call3, %struct.rtx_def* %call4, %struct.rtx_def* %call5, %struct.rtx_def* %call6, %struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 42, i32 51, %struct.rtvec_def* %call8, i32 13)
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %0, %struct.rtx_def* %call9)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %1)
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %2)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %operand3.addr, align 8
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 5, %struct.rtx_def* %3)
  %call14 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call13)
  %call15 = call %struct.rtvec_def* (i32, ...) @gen_rtvec(i32 4, %struct.rtx_def* %call10, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* %call14)
  %call16 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call15)
  ret %struct.rtx_def* %call16
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_prefetch(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  %operand0.addr = alloca %struct.rtx_def*, align 8
  %operand1.addr = alloca %struct.rtx_def*, align 8
  %operand2.addr = alloca %struct.rtx_def*, align 8
  %_val = alloca %struct.rtx_def*, align 8
  %operands = alloca [3 x %struct.rtx_def*], align 16
  %rw = alloca i32, align 4
  %locality = alloca i32, align 4
  store %struct.rtx_def* %operand0, %struct.rtx_def** %operand0.addr, align 8
  store %struct.rtx_def* %operand1, %struct.rtx_def** %operand1.addr, align 8
  store %struct.rtx_def* %operand2, %struct.rtx_def** %operand2.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %_val, align 8
  call void @start_sequence()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx1 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx1, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %arrayidx2 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx4 to i64*
  %4 = load i64, i64* %rtwint, align 8
  %conv = trunc i64 %4 to i32
  store i32 %conv, i32* %rw, align 4
  %arrayidx5 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtwint8 = bitcast %union.rtunion_def* %arrayidx7 to i64*
  %6 = load i64, i64* %rtwint8, align 8
  %conv9 = trunc i64 %6 to i32
  store i32 %conv9, i32* %locality, align 4
  %7 = load i32, i32* %rw, align 4
  %cmp = icmp ne i32 %7, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %8 = load i32, i32* %rw, align 4
  %cmp11 = icmp ne i32 %8, 1
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 19621, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.gen_prefetch, i32 0, i32 0)) #3
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %9 = load i32, i32* %locality, align 4
  %cmp13 = icmp slt i32 %9, 0
  br i1 %cmp13, label %if.then.17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %10 = load i32, i32* %locality, align 4
  %cmp15 = icmp sgt i32 %10, 3
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %lor.lhs.false, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 19623, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.gen_prefetch, i32 0, i32 0)) #3
  unreachable

if.end.18:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* @target_flags, align 4
  %and = and i32 %11, 1048576
  %cmp19 = icmp ne i32 %and, 0
  br i1 %cmp19, label %land.lhs.true.21, label %if.else

land.lhs.true.21:                                 ; preds = %if.end.18
  %12 = load i32, i32* @x86_prefetch_sse, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %lor.lhs.false.22, label %if.then.24

lor.lhs.false.22:                                 ; preds = %land.lhs.true.21
  %13 = load i32, i32* %rw, align 4
  %tobool23 = icmp ne i32 %13, 0
  br i1 %tobool23, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %lor.lhs.false.22, %land.lhs.true.21
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 3)
  %arrayidx25 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx25, align 8
  br label %if.end.27

if.else:                                          ; preds = %lor.lhs.false.22, %if.end.18
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %arrayidx26 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  store %struct.rtx_def* %14, %struct.rtx_def** %arrayidx26, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.24
  %arrayidx28 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 0
  %15 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %operand0.addr, align 8
  %arrayidx29 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %operand1.addr, align 8
  %arrayidx30 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %operands, i32 0, i64 2
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx30, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %operand2.addr, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %operand0.addr, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %operand1.addr, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %operand2.addr, align 8
  %call31 = call %struct.rtx_def* @gen_rtx_fmt_eee(i32 46, i32 0, %struct.rtx_def* %18, %struct.rtx_def* %19, %struct.rtx_def* %20)
  %call32 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call31)
  %call33 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call33, %struct.rtx_def** %_val, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %_val, align 8
  ret %struct.rtx_def* %21
}

; Function Attrs: nounwind uwtable
define void @add_clobbers(%struct.rtx_def* %pattern, i32 %insn_code_number) #0 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %insn_code_number.addr = alloca i32, align 4
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  store i32 %insn_code_number, i32* %insn_code_number.addr, align 4
  %0 = load i32, i32* %insn_code_number.addr, align 4
  switch i32 %0, label %sw.default [
    i32 815, label %sw.bb
    i32 801, label %sw.bb
    i32 640, label %sw.bb.108
    i32 639, label %sw.bb.108
    i32 638, label %sw.bb.123
    i32 637, label %sw.bb.123
    i32 507, label %sw.bb.138
    i32 501, label %sw.bb.153
    i32 500, label %sw.bb.153
    i32 499, label %sw.bb.153
    i32 498, label %sw.bb.153
    i32 497, label %sw.bb.175
    i32 496, label %sw.bb.175
    i32 495, label %sw.bb.175
    i32 494, label %sw.bb.175
    i32 493, label %sw.bb.175
    i32 492, label %sw.bb.175
    i32 650, label %sw.bb.190
    i32 649, label %sw.bb.190
    i32 612, label %sw.bb.190
    i32 611, label %sw.bb.190
    i32 279, label %sw.bb.190
    i32 278, label %sw.bb.190
    i32 276, label %sw.bb.190
    i32 273, label %sw.bb.190
    i32 270, label %sw.bb.190
    i32 379, label %sw.bb.198
    i32 378, label %sw.bb.198
    i32 375, label %sw.bb.198
    i32 360, label %sw.bb.198
    i32 359, label %sw.bb.198
    i32 356, label %sw.bb.198
    i32 277, label %sw.bb.198
    i32 275, label %sw.bb.198
    i32 274, label %sw.bb.198
    i32 272, label %sw.bb.198
    i32 271, label %sw.bb.198
    i32 269, label %sw.bb.198
    i32 268, label %sw.bb.198
    i32 448, label %sw.bb.206
    i32 423, label %sw.bb.206
    i32 405, label %sw.bb.206
    i32 265, label %sw.bb.206
    i32 264, label %sw.bb.206
    i32 262, label %sw.bb.206
    i32 261, label %sw.bb.206
    i32 263, label %sw.bb.221
    i32 260, label %sw.bb.221
    i32 341, label %sw.bb.236
    i32 324, label %sw.bb.236
    i32 226, label %sw.bb.236
    i32 225, label %sw.bb.236
    i32 224, label %sw.bb.236
    i32 337, label %sw.bb.244
    i32 319, label %sw.bb.244
    i32 220, label %sw.bb.244
    i32 219, label %sw.bb.244
    i32 218, label %sw.bb.244
    i32 334, label %sw.bb.252
    i32 316, label %sw.bb.252
    i32 214, label %sw.bb.252
    i32 213, label %sw.bb.252
    i32 211, label %sw.bb.252
    i32 327, label %sw.bb.260
    i32 309, label %sw.bb.260
    i32 206, label %sw.bb.260
    i32 205, label %sw.bb.260
    i32 204, label %sw.bb.260
    i32 154, label %sw.bb.268
    i32 153, label %sw.bb.276
    i32 119, label %sw.bb.284
    i32 633, label %sw.bb.299
    i32 632, label %sw.bb.299
    i32 630, label %sw.bb.299
    i32 629, label %sw.bb.299
    i32 627, label %sw.bb.299
    i32 626, label %sw.bb.299
    i32 624, label %sw.bb.299
    i32 623, label %sw.bb.299
    i32 615, label %sw.bb.299
    i32 613, label %sw.bb.299
    i32 518, label %sw.bb.299
    i32 485, label %sw.bb.299
    i32 484, label %sw.bb.299
    i32 483, label %sw.bb.299
    i32 482, label %sw.bb.299
    i32 481, label %sw.bb.299
    i32 480, label %sw.bb.299
    i32 479, label %sw.bb.299
    i32 478, label %sw.bb.299
    i32 477, label %sw.bb.299
    i32 476, label %sw.bb.299
    i32 475, label %sw.bb.299
    i32 474, label %sw.bb.299
    i32 473, label %sw.bb.299
    i32 472, label %sw.bb.299
    i32 471, label %sw.bb.299
    i32 470, label %sw.bb.299
    i32 469, label %sw.bb.299
    i32 468, label %sw.bb.299
    i32 467, label %sw.bb.299
    i32 466, label %sw.bb.299
    i32 463, label %sw.bb.299
    i32 462, label %sw.bb.299
    i32 459, label %sw.bb.299
    i32 458, label %sw.bb.299
    i32 453, label %sw.bb.299
    i32 452, label %sw.bb.299
    i32 451, label %sw.bb.299
    i32 450, label %sw.bb.299
    i32 449, label %sw.bb.299
    i32 445, label %sw.bb.299
    i32 444, label %sw.bb.299
    i32 441, label %sw.bb.299
    i32 440, label %sw.bb.299
    i32 437, label %sw.bb.299
    i32 436, label %sw.bb.299
    i32 431, label %sw.bb.299
    i32 430, label %sw.bb.299
    i32 429, label %sw.bb.299
    i32 428, label %sw.bb.299
    i32 427, label %sw.bb.299
    i32 426, label %sw.bb.299
    i32 425, label %sw.bb.299
    i32 424, label %sw.bb.299
    i32 420, label %sw.bb.299
    i32 419, label %sw.bb.299
    i32 418, label %sw.bb.299
    i32 416, label %sw.bb.299
    i32 415, label %sw.bb.299
    i32 413, label %sw.bb.299
    i32 412, label %sw.bb.299
    i32 409, label %sw.bb.299
    i32 408, label %sw.bb.299
    i32 407, label %sw.bb.299
    i32 406, label %sw.bb.299
    i32 403, label %sw.bb.299
    i32 383, label %sw.bb.299
    i32 382, label %sw.bb.299
    i32 381, label %sw.bb.299
    i32 380, label %sw.bb.299
    i32 377, label %sw.bb.299
    i32 376, label %sw.bb.299
    i32 374, label %sw.bb.299
    i32 364, label %sw.bb.299
    i32 363, label %sw.bb.299
    i32 362, label %sw.bb.299
    i32 361, label %sw.bb.299
    i32 358, label %sw.bb.299
    i32 357, label %sw.bb.299
    i32 355, label %sw.bb.299
    i32 353, label %sw.bb.299
    i32 351, label %sw.bb.299
    i32 348, label %sw.bb.299
    i32 347, label %sw.bb.299
    i32 345, label %sw.bb.299
    i32 344, label %sw.bb.299
    i32 339, label %sw.bb.299
    i32 338, label %sw.bb.299
    i32 335, label %sw.bb.299
    i32 330, label %sw.bb.299
    i32 329, label %sw.bb.299
    i32 328, label %sw.bb.299
    i32 325, label %sw.bb.299
    i32 321, label %sw.bb.299
    i32 320, label %sw.bb.299
    i32 317, label %sw.bb.299
    i32 312, label %sw.bb.299
    i32 311, label %sw.bb.299
    i32 310, label %sw.bb.299
    i32 307, label %sw.bb.299
    i32 306, label %sw.bb.299
    i32 305, label %sw.bb.299
    i32 304, label %sw.bb.299
    i32 302, label %sw.bb.299
    i32 299, label %sw.bb.299
    i32 298, label %sw.bb.299
    i32 296, label %sw.bb.299
    i32 293, label %sw.bb.299
    i32 292, label %sw.bb.299
    i32 290, label %sw.bb.299
    i32 267, label %sw.bb.299
    i32 266, label %sw.bb.299
    i32 259, label %sw.bb.299
    i32 258, label %sw.bb.299
    i32 257, label %sw.bb.299
    i32 256, label %sw.bb.299
    i32 255, label %sw.bb.299
    i32 254, label %sw.bb.299
    i32 253, label %sw.bb.299
    i32 252, label %sw.bb.299
    i32 251, label %sw.bb.299
    i32 250, label %sw.bb.299
    i32 249, label %sw.bb.299
    i32 246, label %sw.bb.299
    i32 243, label %sw.bb.299
    i32 238, label %sw.bb.299
    i32 237, label %sw.bb.299
    i32 236, label %sw.bb.299
    i32 235, label %sw.bb.299
    i32 232, label %sw.bb.299
    i32 231, label %sw.bb.299
    i32 230, label %sw.bb.299
    i32 229, label %sw.bb.299
    i32 228, label %sw.bb.299
    i32 227, label %sw.bb.299
    i32 222, label %sw.bb.299
    i32 221, label %sw.bb.299
    i32 216, label %sw.bb.299
    i32 215, label %sw.bb.299
    i32 208, label %sw.bb.299
    i32 207, label %sw.bb.299
    i32 202, label %sw.bb.299
    i32 189, label %sw.bb.299
    i32 188, label %sw.bb.299
    i32 186, label %sw.bb.299
    i32 185, label %sw.bb.299
    i32 115, label %sw.bb.299
    i32 113, label %sw.bb.299
    i32 112, label %sw.bb.299
    i32 110, label %sw.bb.299
    i32 109, label %sw.bb.299
    i32 107, label %sw.bb.299
    i32 82, label %sw.bb.299
    i32 81, label %sw.bb.299
    i32 63, label %sw.bb.299
    i32 57, label %sw.bb.299
    i32 44, label %sw.bb.299
    i32 43, label %sw.bb.299
  ]

sw.bb:                                            ; preds = %entry, %entry
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 8)
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %2 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 1
  store %struct.rtx_def* %call1, %struct.rtx_def** %arrayidx2, align 8
  %call3 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 9)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call3)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtvec7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec7, align 8
  %elem8 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %4, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem8, i32 0, i64 2
  store %struct.rtx_def* %call4, %struct.rtx_def** %arrayidx9, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 10)
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call10)
  %5 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtvec14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec14, align 8
  %elem15 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %6, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem15, i32 0, i64 3
  store %struct.rtx_def* %call11, %struct.rtx_def** %arrayidx16, align 8
  %call17 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 11)
  %call18 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call17)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtvec21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec21, align 8
  %elem22 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %8, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem22, i32 0, i64 4
  store %struct.rtx_def* %call18, %struct.rtx_def** %arrayidx23, align 8
  %call24 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 12)
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call24)
  %9 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtvec28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %10 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec28, align 8
  %elem29 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %10, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem29, i32 0, i64 5
  store %struct.rtx_def* %call25, %struct.rtx_def** %arrayidx30, align 8
  %call31 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 13)
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call31)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 0
  %rtvec35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**
  %12 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec35, align 8
  %elem36 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %12, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem36, i32 0, i64 6
  store %struct.rtx_def* %call32, %struct.rtx_def** %arrayidx37, align 8
  %call38 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 14)
  %call39 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call38)
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 0
  %rtvec42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtvec_def**
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec42, align 8
  %elem43 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem43, i32 0, i64 7
  store %struct.rtx_def* %call39, %struct.rtx_def** %arrayidx44, align 8
  %call45 = call %struct.rtx_def* @gen_rtx_REG(i32 17, i32 15)
  %call46 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call45)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 0
  %rtvec49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec49, align 8
  %elem50 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem50, i32 0, i64 8
  store %struct.rtx_def* %call46, %struct.rtx_def** %arrayidx51, align 8
  %call52 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 29)
  %call53 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call52)
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 0
  %rtvec56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtvec_def**
  %18 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec56, align 8
  %elem57 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %18, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem57, i32 0, i64 9
  store %struct.rtx_def* %call53, %struct.rtx_def** %arrayidx58, align 8
  %call59 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 30)
  %call60 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call59)
  %19 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 0
  %rtvec63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtvec_def**
  %20 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec63, align 8
  %elem64 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %20, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem64, i32 0, i64 10
  store %struct.rtx_def* %call60, %struct.rtx_def** %arrayidx65, align 8
  %call66 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 31)
  %call67 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call66)
  %21 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 0
  %rtvec70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtvec_def**
  %22 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec70, align 8
  %elem71 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %22, i32 0, i32 1
  %arrayidx72 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem71, i32 0, i64 11
  store %struct.rtx_def* %call67, %struct.rtx_def** %arrayidx72, align 8
  %call73 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 32)
  %call74 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call73)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtvec77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtvec_def**
  %24 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec77, align 8
  %elem78 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %24, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem78, i32 0, i64 12
  store %struct.rtx_def* %call74, %struct.rtx_def** %arrayidx79, align 8
  %call80 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 33)
  %call81 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call80)
  %25 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 0
  %rtvec84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtvec_def**
  %26 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec84, align 8
  %elem85 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %26, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem85, i32 0, i64 13
  store %struct.rtx_def* %call81, %struct.rtx_def** %arrayidx86, align 8
  %call87 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 34)
  %call88 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call87)
  %27 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 0
  %rtvec91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtvec_def**
  %28 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec91, align 8
  %elem92 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %28, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem92, i32 0, i64 14
  store %struct.rtx_def* %call88, %struct.rtx_def** %arrayidx93, align 8
  %call94 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 35)
  %call95 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call94)
  %29 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i32 0, i64 0
  %rtvec98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtvec_def**
  %30 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec98, align 8
  %elem99 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %30, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem99, i32 0, i64 15
  store %struct.rtx_def* %call95, %struct.rtx_def** %arrayidx100, align 8
  %call101 = call %struct.rtx_def* @gen_rtx_REG(i32 5, i32 36)
  %call102 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call101)
  %31 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i32 0, i64 0
  %rtvec105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtvec_def**
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec105, align 8
  %elem106 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %32, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem106, i32 0, i64 16
  store %struct.rtx_def* %call102, %struct.rtx_def** %arrayidx107, align 8
  br label %sw.epilog

sw.bb.108:                                        ; preds = %entry, %entry
  %call109 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 16)
  %call110 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call109)
  %33 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 0
  %rtvec113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtvec_def**
  %34 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec113, align 8
  %elem114 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %34, i32 0, i32 1
  %arrayidx115 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem114, i32 0, i64 1
  store %struct.rtx_def* %call110, %struct.rtx_def** %arrayidx115, align 8
  %call116 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call117 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call116)
  %35 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i32 0, i64 0
  %rtvec120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtvec_def**
  %36 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec120, align 8
  %elem121 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %36, i32 0, i32 1
  %arrayidx122 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem121, i32 0, i64 2
  store %struct.rtx_def* %call117, %struct.rtx_def** %arrayidx122, align 8
  br label %sw.epilog

sw.bb.123:                                        ; preds = %entry, %entry
  %call124 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 15)
  %call125 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call124)
  %37 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 0
  %rtvec128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtvec_def**
  %38 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec128, align 8
  %elem129 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %38, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem129, i32 0, i64 1
  store %struct.rtx_def* %call125, %struct.rtx_def** %arrayidx130, align 8
  %call131 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call132 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call131)
  %39 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i32 0, i64 0
  %rtvec135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtvec_def**
  %40 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec135, align 8
  %elem136 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %40, i32 0, i32 1
  %arrayidx137 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem136, i32 0, i64 2
  store %struct.rtx_def* %call132, %struct.rtx_def** %arrayidx137, align 8
  br label %sw.epilog

sw.bb.138:                                        ; preds = %entry
  %call139 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call140 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call139)
  %41 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld141, i32 0, i64 0
  %rtvec143 = bitcast %union.rtunion_def* %arrayidx142 to %struct.rtvec_def**
  %42 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec143, align 8
  %elem144 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %42, i32 0, i32 1
  %arrayidx145 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem144, i32 0, i64 2
  store %struct.rtx_def* %call140, %struct.rtx_def** %arrayidx145, align 8
  %call146 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call147 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call146)
  %43 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i32 0, i64 0
  %rtvec150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtvec_def**
  %44 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec150, align 8
  %elem151 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %44, i32 0, i32 1
  %arrayidx152 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem151, i32 0, i64 3
  store %struct.rtx_def* %call147, %struct.rtx_def** %arrayidx152, align 8
  br label %sw.epilog

sw.bb.153:                                        ; preds = %entry, %entry, %entry, %entry
  %call154 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 18)
  %call155 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call154)
  %45 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i32 0, i64 0
  %rtvec158 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtvec_def**
  %46 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec158, align 8
  %elem159 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %46, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem159, i32 0, i64 1
  store %struct.rtx_def* %call155, %struct.rtx_def** %arrayidx160, align 8
  %call161 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %call162 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call161)
  %47 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx164 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld163, i32 0, i64 0
  %rtvec165 = bitcast %union.rtunion_def* %arrayidx164 to %struct.rtvec_def**
  %48 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec165, align 8
  %elem166 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %48, i32 0, i32 1
  %arrayidx167 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem166, i32 0, i64 2
  store %struct.rtx_def* %call162, %struct.rtx_def** %arrayidx167, align 8
  %call168 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 3)
  %call169 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call168)
  %49 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i32 0, i64 0
  %rtvec172 = bitcast %union.rtunion_def* %arrayidx171 to %struct.rtvec_def**
  %50 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec172, align 8
  %elem173 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %50, i32 0, i32 1
  %arrayidx174 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem173, i32 0, i64 3
  store %struct.rtx_def* %call169, %struct.rtx_def** %arrayidx174, align 8
  br label %sw.epilog

sw.bb.175:                                        ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %call176 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 18)
  %call177 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call176)
  %51 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld178 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i32 0, i64 0
  %rtvec180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtvec_def**
  %52 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec180, align 8
  %elem181 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %52, i32 0, i32 1
  %arrayidx182 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem181, i32 0, i64 1
  store %struct.rtx_def* %call177, %struct.rtx_def** %arrayidx182, align 8
  %call183 = call %struct.rtx_def* @gen_rtx_REG(i32 57, i32 17)
  %call184 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call183)
  %53 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i32 0, i64 0
  %rtvec187 = bitcast %union.rtunion_def* %arrayidx186 to %struct.rtvec_def**
  %54 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec187, align 8
  %elem188 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %54, i32 0, i32 1
  %arrayidx189 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem188, i32 0, i64 2
  store %struct.rtx_def* %call184, %struct.rtx_def** %arrayidx189, align 8
  br label %sw.epilog

sw.bb.190:                                        ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %call191 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call192 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call191)
  %55 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx194 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld193, i32 0, i64 0
  %rtvec195 = bitcast %union.rtunion_def* %arrayidx194 to %struct.rtvec_def**
  %56 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec195, align 8
  %elem196 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %56, i32 0, i32 1
  %arrayidx197 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem196, i32 0, i64 3
  store %struct.rtx_def* %call192, %struct.rtx_def** %arrayidx197, align 8
  br label %sw.epilog

sw.bb.198:                                        ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %call199 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call200 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call199)
  %57 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld201 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx202 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld201, i32 0, i64 0
  %rtvec203 = bitcast %union.rtunion_def* %arrayidx202 to %struct.rtvec_def**
  %58 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec203, align 8
  %elem204 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %58, i32 0, i32 1
  %arrayidx205 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem204, i32 0, i64 2
  store %struct.rtx_def* %call200, %struct.rtx_def** %arrayidx205, align 8
  br label %sw.epilog

sw.bb.206:                                        ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %call207 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call208 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call207)
  %59 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx210 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld209, i32 0, i64 0
  %rtvec211 = bitcast %union.rtunion_def* %arrayidx210 to %struct.rtvec_def**
  %60 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec211, align 8
  %elem212 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %60, i32 0, i32 1
  %arrayidx213 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem212, i32 0, i64 1
  store %struct.rtx_def* %call208, %struct.rtx_def** %arrayidx213, align 8
  %call214 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call215 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call214)
  %61 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld216 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx217 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld216, i32 0, i64 0
  %rtvec218 = bitcast %union.rtunion_def* %arrayidx217 to %struct.rtvec_def**
  %62 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec218, align 8
  %elem219 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %62, i32 0, i32 1
  %arrayidx220 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem219, i32 0, i64 2
  store %struct.rtx_def* %call215, %struct.rtx_def** %arrayidx220, align 8
  br label %sw.epilog

sw.bb.221:                                        ; preds = %entry, %entry
  %call222 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 5)
  %call223 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call222)
  %63 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld224 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx225 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld224, i32 0, i64 0
  %rtvec226 = bitcast %union.rtunion_def* %arrayidx225 to %struct.rtvec_def**
  %64 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec226, align 8
  %elem227 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %64, i32 0, i32 1
  %arrayidx228 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem227, i32 0, i64 1
  store %struct.rtx_def* %call223, %struct.rtx_def** %arrayidx228, align 8
  %call229 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call230 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call229)
  %65 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld231 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx232 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld231, i32 0, i64 0
  %rtvec233 = bitcast %union.rtunion_def* %arrayidx232 to %struct.rtvec_def**
  %66 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec233, align 8
  %elem234 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %66, i32 0, i32 1
  %arrayidx235 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem234, i32 0, i64 2
  store %struct.rtx_def* %call230, %struct.rtx_def** %arrayidx235, align 8
  br label %sw.epilog

sw.bb.236:                                        ; preds = %entry, %entry, %entry, %entry, %entry
  %call237 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 2)
  %call238 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call237)
  %67 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld239 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx240 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld239, i32 0, i64 0
  %rtvec241 = bitcast %union.rtunion_def* %arrayidx240 to %struct.rtvec_def**
  %68 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec241, align 8
  %elem242 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %68, i32 0, i32 1
  %arrayidx243 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem242, i32 0, i64 1
  store %struct.rtx_def* %call238, %struct.rtx_def** %arrayidx243, align 8
  br label %sw.epilog

sw.bb.244:                                        ; preds = %entry, %entry, %entry, %entry, %entry
  %call245 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 3)
  %call246 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call245)
  %69 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld247 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx248 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld247, i32 0, i64 0
  %rtvec249 = bitcast %union.rtunion_def* %arrayidx248 to %struct.rtvec_def**
  %70 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec249, align 8
  %elem250 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %70, i32 0, i32 1
  %arrayidx251 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem250, i32 0, i64 1
  store %struct.rtx_def* %call246, %struct.rtx_def** %arrayidx251, align 8
  br label %sw.epilog

sw.bb.252:                                        ; preds = %entry, %entry, %entry, %entry, %entry
  %call253 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call254 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call253)
  %71 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld255 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx256 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld255, i32 0, i64 0
  %rtvec257 = bitcast %union.rtunion_def* %arrayidx256 to %struct.rtvec_def**
  %72 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec257, align 8
  %elem258 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %72, i32 0, i32 1
  %arrayidx259 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem258, i32 0, i64 1
  store %struct.rtx_def* %call254, %struct.rtx_def** %arrayidx259, align 8
  br label %sw.epilog

sw.bb.260:                                        ; preds = %entry, %entry, %entry, %entry, %entry
  %call261 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 5)
  %call262 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call261)
  %73 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i32 0, i64 0
  %rtvec265 = bitcast %union.rtunion_def* %arrayidx264 to %struct.rtvec_def**
  %74 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec265, align 8
  %elem266 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %74, i32 0, i32 1
  %arrayidx267 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem266, i32 0, i64 1
  store %struct.rtx_def* %call262, %struct.rtx_def** %arrayidx267, align 8
  br label %sw.epilog

sw.bb.268:                                        ; preds = %entry
  %call269 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 16)
  %call270 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call269)
  %75 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld271 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i32 0, i64 0
  %rtvec273 = bitcast %union.rtunion_def* %arrayidx272 to %struct.rtvec_def**
  %76 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec273, align 8
  %elem274 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %76, i32 0, i32 1
  %arrayidx275 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem274, i32 0, i64 3
  store %struct.rtx_def* %call270, %struct.rtx_def** %arrayidx275, align 8
  br label %sw.epilog

sw.bb.276:                                        ; preds = %entry
  %call277 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 16)
  %call278 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call277)
  %77 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld279 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld279, i32 0, i64 0
  %rtvec281 = bitcast %union.rtunion_def* %arrayidx280 to %struct.rtvec_def**
  %78 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec281, align 8
  %elem282 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %78, i32 0, i32 1
  %arrayidx283 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem282, i32 0, i64 4
  store %struct.rtx_def* %call278, %struct.rtx_def** %arrayidx283, align 8
  br label %sw.epilog

sw.bb.284:                                        ; preds = %entry
  %call285 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call286 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call285)
  %79 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld287 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx288 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld287, i32 0, i64 0
  %rtvec289 = bitcast %union.rtunion_def* %arrayidx288 to %struct.rtvec_def**
  %80 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec289, align 8
  %elem290 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %80, i32 0, i32 1
  %arrayidx291 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem290, i32 0, i64 1
  store %struct.rtx_def* %call286, %struct.rtx_def** %arrayidx291, align 8
  %call292 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 4)
  %call293 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call292)
  %81 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld294 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld294, i32 0, i64 0
  %rtvec296 = bitcast %union.rtunion_def* %arrayidx295 to %struct.rtvec_def**
  %82 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec296, align 8
  %elem297 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %82, i32 0, i32 1
  %arrayidx298 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem297, i32 0, i64 2
  store %struct.rtx_def* %call293, %struct.rtx_def** %arrayidx298, align 8
  br label %sw.epilog

sw.bb.299:                                        ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %call300 = call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17)
  %call301 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call300)
  %83 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld302 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx303 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld302, i32 0, i64 0
  %rtvec304 = bitcast %union.rtunion_def* %arrayidx303 to %struct.rtvec_def**
  %84 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec304, align 8
  %elem305 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %84, i32 0, i32 1
  %arrayidx306 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem305, i32 0, i64 1
  store %struct.rtx_def* %call301, %struct.rtx_def** %arrayidx306, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 20035, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.add_clobbers, i32 0, i32 0)) #3
  unreachable

sw.epilog:                                        ; preds = %sw.bb.299, %sw.bb.284, %sw.bb.276, %sw.bb.268, %sw.bb.260, %sw.bb.252, %sw.bb.244, %sw.bb.236, %sw.bb.221, %sw.bb.206, %sw.bb.198, %sw.bb.190, %sw.bb.175, %sw.bb.153, %sw.bb.138, %sw.bb.123, %sw.bb.108, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @added_clobbers_hard_reg_p(i32 %insn_code_number) #0 {
entry:
  %retval = alloca i32, align 4
  %insn_code_number.addr = alloca i32, align 4
  store i32 %insn_code_number, i32* %insn_code_number.addr, align 4
  %0 = load i32, i32* %insn_code_number.addr, align 4
  switch i32 %0, label %sw.default [
    i32 341, label %sw.bb
    i32 324, label %sw.bb
    i32 226, label %sw.bb
    i32 225, label %sw.bb
    i32 224, label %sw.bb
    i32 337, label %sw.bb
    i32 319, label %sw.bb
    i32 220, label %sw.bb
    i32 219, label %sw.bb
    i32 218, label %sw.bb
    i32 334, label %sw.bb
    i32 316, label %sw.bb
    i32 214, label %sw.bb
    i32 213, label %sw.bb
    i32 211, label %sw.bb
    i32 327, label %sw.bb
    i32 309, label %sw.bb
    i32 206, label %sw.bb
    i32 205, label %sw.bb
    i32 204, label %sw.bb
    i32 154, label %sw.bb
    i32 153, label %sw.bb
    i32 815, label %sw.bb.1
    i32 801, label %sw.bb.1
    i32 640, label %sw.bb.1
    i32 639, label %sw.bb.1
    i32 638, label %sw.bb.1
    i32 637, label %sw.bb.1
    i32 507, label %sw.bb.1
    i32 501, label %sw.bb.1
    i32 500, label %sw.bb.1
    i32 499, label %sw.bb.1
    i32 498, label %sw.bb.1
    i32 497, label %sw.bb.1
    i32 496, label %sw.bb.1
    i32 495, label %sw.bb.1
    i32 494, label %sw.bb.1
    i32 493, label %sw.bb.1
    i32 492, label %sw.bb.1
    i32 650, label %sw.bb.1
    i32 649, label %sw.bb.1
    i32 612, label %sw.bb.1
    i32 611, label %sw.bb.1
    i32 279, label %sw.bb.1
    i32 278, label %sw.bb.1
    i32 276, label %sw.bb.1
    i32 273, label %sw.bb.1
    i32 270, label %sw.bb.1
    i32 379, label %sw.bb.1
    i32 378, label %sw.bb.1
    i32 375, label %sw.bb.1
    i32 360, label %sw.bb.1
    i32 359, label %sw.bb.1
    i32 356, label %sw.bb.1
    i32 277, label %sw.bb.1
    i32 275, label %sw.bb.1
    i32 274, label %sw.bb.1
    i32 272, label %sw.bb.1
    i32 271, label %sw.bb.1
    i32 269, label %sw.bb.1
    i32 268, label %sw.bb.1
    i32 448, label %sw.bb.1
    i32 423, label %sw.bb.1
    i32 405, label %sw.bb.1
    i32 265, label %sw.bb.1
    i32 264, label %sw.bb.1
    i32 262, label %sw.bb.1
    i32 261, label %sw.bb.1
    i32 263, label %sw.bb.1
    i32 260, label %sw.bb.1
    i32 119, label %sw.bb.1
    i32 633, label %sw.bb.1
    i32 632, label %sw.bb.1
    i32 630, label %sw.bb.1
    i32 629, label %sw.bb.1
    i32 627, label %sw.bb.1
    i32 626, label %sw.bb.1
    i32 624, label %sw.bb.1
    i32 623, label %sw.bb.1
    i32 615, label %sw.bb.1
    i32 613, label %sw.bb.1
    i32 518, label %sw.bb.1
    i32 485, label %sw.bb.1
    i32 484, label %sw.bb.1
    i32 483, label %sw.bb.1
    i32 482, label %sw.bb.1
    i32 481, label %sw.bb.1
    i32 480, label %sw.bb.1
    i32 479, label %sw.bb.1
    i32 478, label %sw.bb.1
    i32 477, label %sw.bb.1
    i32 476, label %sw.bb.1
    i32 475, label %sw.bb.1
    i32 474, label %sw.bb.1
    i32 473, label %sw.bb.1
    i32 472, label %sw.bb.1
    i32 471, label %sw.bb.1
    i32 470, label %sw.bb.1
    i32 469, label %sw.bb.1
    i32 468, label %sw.bb.1
    i32 467, label %sw.bb.1
    i32 466, label %sw.bb.1
    i32 463, label %sw.bb.1
    i32 462, label %sw.bb.1
    i32 459, label %sw.bb.1
    i32 458, label %sw.bb.1
    i32 453, label %sw.bb.1
    i32 452, label %sw.bb.1
    i32 451, label %sw.bb.1
    i32 450, label %sw.bb.1
    i32 449, label %sw.bb.1
    i32 445, label %sw.bb.1
    i32 444, label %sw.bb.1
    i32 441, label %sw.bb.1
    i32 440, label %sw.bb.1
    i32 437, label %sw.bb.1
    i32 436, label %sw.bb.1
    i32 431, label %sw.bb.1
    i32 430, label %sw.bb.1
    i32 429, label %sw.bb.1
    i32 428, label %sw.bb.1
    i32 427, label %sw.bb.1
    i32 426, label %sw.bb.1
    i32 425, label %sw.bb.1
    i32 424, label %sw.bb.1
    i32 420, label %sw.bb.1
    i32 419, label %sw.bb.1
    i32 418, label %sw.bb.1
    i32 416, label %sw.bb.1
    i32 415, label %sw.bb.1
    i32 413, label %sw.bb.1
    i32 412, label %sw.bb.1
    i32 409, label %sw.bb.1
    i32 408, label %sw.bb.1
    i32 407, label %sw.bb.1
    i32 406, label %sw.bb.1
    i32 403, label %sw.bb.1
    i32 383, label %sw.bb.1
    i32 382, label %sw.bb.1
    i32 381, label %sw.bb.1
    i32 380, label %sw.bb.1
    i32 377, label %sw.bb.1
    i32 376, label %sw.bb.1
    i32 374, label %sw.bb.1
    i32 364, label %sw.bb.1
    i32 363, label %sw.bb.1
    i32 362, label %sw.bb.1
    i32 361, label %sw.bb.1
    i32 358, label %sw.bb.1
    i32 357, label %sw.bb.1
    i32 355, label %sw.bb.1
    i32 353, label %sw.bb.1
    i32 351, label %sw.bb.1
    i32 348, label %sw.bb.1
    i32 347, label %sw.bb.1
    i32 345, label %sw.bb.1
    i32 344, label %sw.bb.1
    i32 339, label %sw.bb.1
    i32 338, label %sw.bb.1
    i32 335, label %sw.bb.1
    i32 330, label %sw.bb.1
    i32 329, label %sw.bb.1
    i32 328, label %sw.bb.1
    i32 325, label %sw.bb.1
    i32 321, label %sw.bb.1
    i32 320, label %sw.bb.1
    i32 317, label %sw.bb.1
    i32 312, label %sw.bb.1
    i32 311, label %sw.bb.1
    i32 310, label %sw.bb.1
    i32 307, label %sw.bb.1
    i32 306, label %sw.bb.1
    i32 305, label %sw.bb.1
    i32 304, label %sw.bb.1
    i32 302, label %sw.bb.1
    i32 299, label %sw.bb.1
    i32 298, label %sw.bb.1
    i32 296, label %sw.bb.1
    i32 293, label %sw.bb.1
    i32 292, label %sw.bb.1
    i32 290, label %sw.bb.1
    i32 267, label %sw.bb.1
    i32 266, label %sw.bb.1
    i32 259, label %sw.bb.1
    i32 258, label %sw.bb.1
    i32 257, label %sw.bb.1
    i32 256, label %sw.bb.1
    i32 255, label %sw.bb.1
    i32 254, label %sw.bb.1
    i32 253, label %sw.bb.1
    i32 252, label %sw.bb.1
    i32 251, label %sw.bb.1
    i32 250, label %sw.bb.1
    i32 249, label %sw.bb.1
    i32 246, label %sw.bb.1
    i32 243, label %sw.bb.1
    i32 238, label %sw.bb.1
    i32 237, label %sw.bb.1
    i32 236, label %sw.bb.1
    i32 235, label %sw.bb.1
    i32 232, label %sw.bb.1
    i32 231, label %sw.bb.1
    i32 230, label %sw.bb.1
    i32 229, label %sw.bb.1
    i32 228, label %sw.bb.1
    i32 227, label %sw.bb.1
    i32 222, label %sw.bb.1
    i32 221, label %sw.bb.1
    i32 216, label %sw.bb.1
    i32 215, label %sw.bb.1
    i32 208, label %sw.bb.1
    i32 207, label %sw.bb.1
    i32 202, label %sw.bb.1
    i32 189, label %sw.bb.1
    i32 188, label %sw.bb.1
    i32 186, label %sw.bb.1
    i32 185, label %sw.bb.1
    i32 115, label %sw.bb.1
    i32 113, label %sw.bb.1
    i32 112, label %sw.bb.1
    i32 110, label %sw.bb.1
    i32 109, label %sw.bb.1
    i32 107, label %sw.bb.1
    i32 82, label %sw.bb.1
    i32 81, label %sw.bb.1
    i32 63, label %sw.bb.1
    i32 57, label %sw.bb.1
    i32 44, label %sw.bb.1
    i32 43, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 20280, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__FUNCTION__.added_clobbers_hard_reg_p, i32 0, i32 0)) #3
  unreachable

return:                                           ; preds = %sw.bb.1, %sw.bb
  %1 = load i32, i32* %retval
  ret i32 %1
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
