; ModuleID = 'stmt.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type { %struct.nesting*, %struct.nesting*, %struct.nesting*, %struct.nesting*, %struct.nesting*, %struct.nesting*, i32, i32, %union.tree_node*, %struct.rtx_def*, i32, i8*, i32, %struct.goto_fixup* }
%struct.nesting = type { %struct.nesting*, %struct.nesting*, i32, %struct.rtx_def*, %union.anon.3 }
%union.anon.3 = type { %struct.anon.6 }
%struct.anon.6 = type { i32, %struct.rtx_def*, %struct.rtx_def*, %struct.nesting*, %union.tree_node*, %union.tree_node*, %struct.label_chain*, i32, i32, i32, i32, %struct.rtx_def*, %union.tree_node** }
%struct.label_chain = type { %struct.label_chain*, %union.tree_node* }
%struct.goto_fixup = type { %struct.goto_fixup*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, i32, %struct.rtx_def*, %union.tree_node* }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.elims = type { i32, i32 }
%struct.anon.4 = type { %struct.rtx_def*, %struct.rtx_def* }
%struct.anon.5 = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.anon.7 = type { %struct.rtx_def*, %struct.case_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8*, i32 }
%struct.case_node = type { %struct.case_node*, %struct.case_node*, %struct.case_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i32, i8* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_string = type { %struct.tree_common, %struct.rtx_def*, i32, i8* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.tree_block = type { %struct.tree_common, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.anon.0 = type { i32 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.rtx_def*, %struct.anon }
%struct.anon = type { i64, i64 }

@using_eh_for_cleanups_p = internal global i32 0, align 4
@ggc_pending_trees = external global %struct.varray_head_tag*, align 8
@stmt_obstack = common global %struct.obstack zeroinitializer, align 8
@cfun = external global %struct.function*, align 8
@optimize = external global i32, align 4
@.str = private unnamed_addr constant [7 x i8] c"stmt.c\00", align 1
@__FUNCTION__.label_rtx = private unnamed_addr constant [10 x i8] c"label_rtx\00", align 1
@target_flags = external global i32, align 4
@mode_size = external constant [59 x i8], align 16
@current_function_decl = external global %union.tree_node*, align 8
@global_rtl = external global [11 x %struct.rtx_def*], align 16
@const_int_rtx = external global [129 x %struct.rtx_def*], align 16
@.str.1 = private unnamed_addr constant [36 x i8] c"output operand constraint lacks `='\00", align 1
@.str.2 = private unnamed_addr constant [62 x i8] c"output constraint `%c' for operand %d is not at the beginning\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"operand constraint contains incorrectly positioned '+' or '='\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"`%%' constraint used with last operand\00", align 1
@.str.5 = private unnamed_addr constant [48 x i8] c"matching constraint not valid in output operand\00", align 1
@_sch_istable = external constant [256 x i16], align 16
@generating_concat_p = external global i32, align 4
@.str.6 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"fpsr\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"dirflag\00", align 1
@.str.9 = private unnamed_addr constant [36 x i8] c"unknown register name `%s' in `asm'\00", align 1
@global_trees = external global [51 x %union.tree_node*], align 16
@tree_code_type = external global [256 x i8], align 16
@.str.10 = private unnamed_addr constant [31 x i8] c"more than %d operands in `asm'\00", align 1
@__FUNCTION__.expand_asm_operands = private unnamed_addr constant [20 x i8] c"expand_asm_operands\00", align 1
@.str.11 = private unnamed_addr constant [42 x i8] c"output number %d not directly addressable\00", align 1
@empty_string = external constant [0 x i8], align 1
@.str.12 = private unnamed_addr constant [50 x i8] c"asm operand %d probably doesn't match constraints\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@extra_warnings = external global i32, align 4
@warn_unused_value = external global i32, align 4
@.str.14 = private unnamed_addr constant [25 x i8] c"statement with no effect\00", align 1
@tree_code_length = external global [256 x i32], align 16
@.str.15 = private unnamed_addr constant [27 x i8] c"value computed is not used\00", align 1
@__FUNCTION__.expand_end_loop = private unnamed_addr constant [16 x i8] c"expand_end_loop\00", align 1
@flag_expensive_optimizations = external global i32, align 4
@n_non_fixed_regs = external global i32, align 4
@word_mode = external global i32, align 4
@const_tiny_rtx = external global [3 x [59 x %struct.rtx_def*]], align 16
@class_narrowest_mode = external constant [9 x i32], align 16
@mode_wider_mode = external constant [59 x i8], align 16
@__FUNCTION__.expand_return = private unnamed_addr constant [14 x i8] c"expand_return\00", align 1
@__FUNCTION__.expand_start_bindings_and_block = private unnamed_addr constant [32 x i8] c"expand_start_bindings_and_block\00", align 1
@warn_unused_variable = external global i32, align 4
@.str.16 = private unnamed_addr constant [21 x i8] c"unused variable `%s'\00", align 1
@.str.17 = private unnamed_addr constant [50 x i8] c"label `%s' used before containing binding contour\00", align 1
@flag_float_store = external global i32, align 4
@flag_stack_check = external global i32, align 4
@__FUNCTION__.expand_decl = private unnamed_addr constant [12 x i8] c"expand_decl\00", align 1
@mode_bitsize = external constant [59 x i16], align 16
@__FUNCTION__.expand_anon_union_decl = private unnamed_addr constant [23 x i8] c"expand_anon_union_decl\00", align 1
@warn_switch = external global i32, align 4
@.str.18 = private unnamed_addr constant [45 x i8] c"enumeration value `%s' not handled in switch\00", align 1
@.str.19 = private unnamed_addr constant [40 x i8] c"case value `%ld' not in enumerated type\00", align 1
@.str.20 = private unnamed_addr constant [45 x i8] c"case value `%ld' not in enumerated type `%s'\00", align 1
@__FUNCTION__.expand_end_case_type = private unnamed_addr constant [21 x i8] c"expand_end_case_type\00", align 1
@mode_class = external constant [59 x i32], align 16
@use_cost_table = internal global i32 0, align 4
@optimize_size = external global i32, align 4
@flag_pic = external global i32, align 4
@__FUNCTION__.expand_goto_internal = private unnamed_addr constant [21 x i8] c"expand_goto_internal\00", align 1
@.str.21 = private unnamed_addr constant [50 x i8] c"jump to `%s' invalidly jumps into binding contour\00", align 1
@.str.22 = private unnamed_addr constant [39 x i8] c"input operand constraint contains `%c'\00", align 1
@.str.23 = private unnamed_addr constant [54 x i8] c"matching constraint references invalid operand number\00", align 1
@.str.24 = private unnamed_addr constant [39 x i8] c"invalid punctuation `%c' in constraint\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"too many alternatives in `asm'\00", align 1
@.str.26 = private unnamed_addr constant [63 x i8] c"operand constraints for `asm' differ in number of alternatives\00", align 1
@.str.27 = private unnamed_addr constant [32 x i8] c"duplicate asm operand name '%s'\00", align 1
@.str.28 = private unnamed_addr constant [38 x i8] c"missing close brace for named operand\00", align 1
@.str.29 = private unnamed_addr constant [29 x i8] c"undefined named operand '%s'\00", align 1
@__FUNCTION__.resolve_operand_name_1 = private unnamed_addr constant [23 x i8] c"resolve_operand_name_1\00", align 1
@fixed_regs = external global [53 x i8], align 16
@expand_nl_goto_receiver.elim_regs = internal constant [4 x %struct.elims] [%struct.elims { i32 16, i32 7 }, %struct.elims { i32 16, i32 6 }, %struct.elims { i32 20, i32 7 }, %struct.elims { i32 20, i32 6 }], align 16
@.str.30 = private unnamed_addr constant [36 x i8] c"unreachable code at beginning of %s\00", align 1
@cost_table_initialized = internal global i32 0, align 4
@cost_table_ = internal global [129 x i16] zeroinitializer, align 16

; Function Attrs: nounwind uwtable
define void @using_eh_for_cleanups() #0 {
entry:
  store i32 1, i32* @using_eh_for_cleanups_p, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_stmt_status(%struct.function* %f) #0 {
entry:
  %f.addr = alloca %struct.function*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  %0 = load %struct.function*, %struct.function** %f.addr, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %tobool = icmp ne %struct.stmt_status* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.function*, %struct.function** %f.addr, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 1
  %3 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %4 = bitcast %struct.stmt_status* %3 to i8*
  call void @free(i8* %4) #5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.function*, %struct.function** %f.addr, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1
  store %struct.stmt_status* null, %struct.stmt_status** %stmt2, align 8
  ret void
}

; Function Attrs: nounwind
declare void @free(i8*) #1

; Function Attrs: nounwind uwtable
define void @mark_stmt_status(%struct.stmt_status* %p) #0 {
entry:
  %p.addr = alloca %struct.stmt_status*, align 8
  %t__ = alloca %union.tree_node*, align 8
  %r__ = alloca %struct.rtx_def*, align 8
  store %struct.stmt_status* %p, %struct.stmt_status** %p.addr, align 8
  %0 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %cmp = icmp eq %struct.stmt_status* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 0
  %2 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  call void @mark_block_nesting(%struct.nesting* %2)
  %3 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %3, i32 0, i32 2
  %4 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  call void @mark_cond_nesting(%struct.nesting* %4)
  %5 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 3
  %6 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  call void @mark_loop_nesting(%struct.nesting* %6)
  %7 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %7, i32 0, i32 4
  %8 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  call void @mark_case_nesting(%struct.nesting* %8)
  br label %do.body

do.body:                                          ; preds = %if.end
  %9 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %9, i32 0, i32 8
  %10 = load %union.tree_node*, %union.tree_node** %x_last_expr_type, align 8
  store %union.tree_node* %10, %union.tree_node** %t__, align 8
  %11 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %cmp1 = icmp ne %union.tree_node* %11, null
  br i1 %cmp1, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %do.body
  %12 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %13 = bitcast %union.tree_node* %12 to i8*
  %call = call i32 @ggc_set_mark(i8* %13)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.10, label %if.then.2

if.then.2:                                        ; preds = %land.lhs.true
  br label %do.body.3

do.body.3:                                        ; preds = %if.then.2
  %14 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %14, i32 0, i32 1
  %15 = load i64, i64* %elements_used, align 8
  %16 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %16, i32 0, i32 0
  %17 = load i64, i64* %num_elements, align 8
  %cmp4 = icmp uge i64 %15, %17
  br i1 %cmp4, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %do.body.3
  %18 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %19 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements6 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %19, i32 0, i32 0
  %20 = load i64, i64* %num_elements6, align 8
  %mul = mul i64 2, %20
  %call7 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %18, i64 %mul)
  store %struct.varray_head_tag* %call7, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.5, %do.body.3
  %21 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %22 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used9 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %22, i32 0, i32 1
  %23 = load i64, i64* %elements_used9, align 8
  %inc = add i64 %23, 1
  store i64 %inc, i64* %elements_used9, align 8
  %24 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %24, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %23
  store %union.tree_node* %21, %union.tree_node** %arrayidx, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.8
  br label %if.end.10

if.end.10:                                        ; preds = %do.end, %land.lhs.true, %do.body
  br label %do.end.11

do.end.11:                                        ; preds = %if.end.10
  %25 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %x_last_expr_type12 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %25, i32 0, i32 8
  %26 = load %union.tree_node*, %union.tree_node** %x_last_expr_type12, align 8
  %tobool13 = icmp ne %union.tree_node* %26, null
  br i1 %tobool13, label %if.then.14, label %if.end.23

if.then.14:                                       ; preds = %do.end.11
  br label %do.body.15

do.body.15:                                       ; preds = %if.then.14
  %27 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %27, i32 0, i32 9
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %r__, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp16 = icmp ne %struct.rtx_def* %29, null
  br i1 %cmp16, label %land.lhs.true.17, label %if.end.21

land.lhs.true.17:                                 ; preds = %do.body.15
  %30 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %31 = bitcast %struct.rtx_def* %30 to i8*
  %call18 = call i32 @ggc_set_mark(i8* %31)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %land.lhs.true.17
  %32 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %32)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %land.lhs.true.17, %do.body.15
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %if.end.23

if.end.23:                                        ; preds = %do.end.22, %do.end.11
  %33 = load %struct.stmt_status*, %struct.stmt_status** %p.addr, align 8
  %x_goto_fixup_chain = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %33, i32 0, i32 13
  %34 = load %struct.goto_fixup*, %struct.goto_fixup** %x_goto_fixup_chain, align 8
  call void @mark_goto_fixup(%struct.goto_fixup* %34)
  br label %return

return:                                           ; preds = %if.end.23, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_block_nesting(%struct.nesting* %n) #0 {
entry:
  %n.addr = alloca %struct.nesting*, align 8
  %l = alloca %struct.label_chain*, align 8
  %r__ = alloca %struct.rtx_def*, align 8
  %r__3 = alloca %struct.rtx_def*, align 8
  %r__12 = alloca %struct.rtx_def*, align 8
  %t__ = alloca %union.tree_node*, align 8
  %t__42 = alloca %union.tree_node*, align 8
  %a__ = alloca i8*, align 8
  %t__77 = alloca %union.tree_node*, align 8
  %r__101 = alloca %struct.rtx_def*, align 8
  store %struct.nesting* %n, %struct.nesting** %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.110, %entry
  %0 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %tobool = icmp ne %struct.nesting* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %1 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %1, i32 0, i32 3
  %2 = load %struct.rtx_def*, %struct.rtx_def** %exit_label, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %r__, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp = icmp ne %struct.rtx_def* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %5 = bitcast %struct.rtx_def* %4 to i8*
  %call = call i32 @ggc_set_mark(i8* %5)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.2

do.body.2:                                        ; preds = %do.end
  %7 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %stack_level = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %stack_level, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %r__3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  %cmp4 = icmp ne %struct.rtx_def* %9, null
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.9

land.lhs.true.5:                                  ; preds = %do.body.2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  %11 = bitcast %struct.rtx_def* %10 to i8*
  %call6 = call i32 @ggc_set_mark(i8* %11)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true.5
  %12 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %land.lhs.true.5, %do.body.2
  br label %do.end.10

do.end.10:                                        ; preds = %if.end.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  %13 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data13 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %block14 = bitcast %union.anon.3* %data13 to %struct.anon.6*
  %first_insn = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block14, i32 0, i32 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %first_insn, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %r__12, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  %cmp15 = icmp ne %struct.rtx_def* %15, null
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.20

land.lhs.true.16:                                 ; preds = %do.body.11
  %16 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  %17 = bitcast %struct.rtx_def* %16 to i8*
  %call17 = call i32 @ggc_set_mark(i8* %17)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true.16
  %18 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %18)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %land.lhs.true.16, %do.body.11
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  %19 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data23 = getelementptr inbounds %struct.nesting, %struct.nesting* %19, i32 0, i32 4
  %block24 = bitcast %union.anon.3* %data23 to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block24, i32 0, i32 4
  %20 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  store %union.tree_node* %20, %union.tree_node** %t__, align 8
  %21 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %cmp25 = icmp ne %union.tree_node* %21, null
  br i1 %cmp25, label %land.lhs.true.26, label %if.end.39

land.lhs.true.26:                                 ; preds = %do.body.22
  %22 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %23 = bitcast %union.tree_node* %22 to i8*
  %call27 = call i32 @ggc_set_mark(i8* %23)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.end.39, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true.26
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.29
  %24 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %24, i32 0, i32 1
  %25 = load i64, i64* %elements_used, align 8
  %26 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %26, i32 0, i32 0
  %27 = load i64, i64* %num_elements, align 8
  %cmp31 = icmp uge i64 %25, %27
  br i1 %cmp31, label %if.then.32, label %if.end.35

if.then.32:                                       ; preds = %do.body.30
  %28 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %29 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements33 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %29, i32 0, i32 0
  %30 = load i64, i64* %num_elements33, align 8
  %mul = mul i64 2, %30
  %call34 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %28, i64 %mul)
  store %struct.varray_head_tag* %call34, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.32, %do.body.30
  %31 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %32 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used36 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %32, i32 0, i32 1
  %33 = load i64, i64* %elements_used36, align 8
  %inc = add i64 %33, 1
  store i64 %inc, i64* %elements_used36, align 8
  %34 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data37 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %34, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data37 to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %33
  store %union.tree_node* %31, %union.tree_node** %arrayidx, align 8
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.35
  br label %if.end.39

if.end.39:                                        ; preds = %do.end.38, %land.lhs.true.26, %do.body.22
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %do.body.41

do.body.41:                                       ; preds = %do.end.40
  %35 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data43 = getelementptr inbounds %struct.nesting, %struct.nesting* %35, i32 0, i32 4
  %block44 = bitcast %union.anon.3* %data43 to %struct.anon.6*
  %outer_cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block44, i32 0, i32 5
  %36 = load %union.tree_node*, %union.tree_node** %outer_cleanups, align 8
  store %union.tree_node* %36, %union.tree_node** %t__42, align 8
  %37 = load %union.tree_node*, %union.tree_node** %t__42, align 8
  %cmp45 = icmp ne %union.tree_node* %37, null
  br i1 %cmp45, label %land.lhs.true.46, label %if.end.65

land.lhs.true.46:                                 ; preds = %do.body.41
  %38 = load %union.tree_node*, %union.tree_node** %t__42, align 8
  %39 = bitcast %union.tree_node* %38 to i8*
  %call47 = call i32 @ggc_set_mark(i8* %39)
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %if.end.65, label %if.then.49

if.then.49:                                       ; preds = %land.lhs.true.46
  br label %do.body.50

do.body.50:                                       ; preds = %if.then.49
  %40 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used51 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %40, i32 0, i32 1
  %41 = load i64, i64* %elements_used51, align 8
  %42 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements52 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %42, i32 0, i32 0
  %43 = load i64, i64* %num_elements52, align 8
  %cmp53 = icmp uge i64 %41, %43
  br i1 %cmp53, label %if.then.54, label %if.end.58

if.then.54:                                       ; preds = %do.body.50
  %44 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %45 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements55 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %45, i32 0, i32 0
  %46 = load i64, i64* %num_elements55, align 8
  %mul56 = mul i64 2, %46
  %call57 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %44, i64 %mul56)
  store %struct.varray_head_tag* %call57, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.54, %do.body.50
  %47 = load %union.tree_node*, %union.tree_node** %t__42, align 8
  %48 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used59 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %48, i32 0, i32 1
  %49 = load i64, i64* %elements_used59, align 8
  %inc60 = add i64 %49, 1
  store i64 %inc60, i64* %elements_used59, align 8
  %50 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data61 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %50, i32 0, i32 4
  %tree62 = bitcast %union.varray_data_tag* %data61 to [1 x %union.tree_node*]*
  %arrayidx63 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree62, i32 0, i64 %49
  store %union.tree_node* %47, %union.tree_node** %arrayidx63, align 8
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.58
  br label %if.end.65

if.end.65:                                        ; preds = %do.end.64, %land.lhs.true.46, %do.body.41
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  %51 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data67 = getelementptr inbounds %struct.nesting, %struct.nesting* %51, i32 0, i32 4
  %block68 = bitcast %union.anon.3* %data67 to %struct.anon.6*
  %label_chain = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block68, i32 0, i32 6
  %52 = load %struct.label_chain*, %struct.label_chain** %label_chain, align 8
  store %struct.label_chain* %52, %struct.label_chain** %l, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end.66
  %53 = load %struct.label_chain*, %struct.label_chain** %l, align 8
  %cmp69 = icmp ne %struct.label_chain* %53, null
  br i1 %cmp69, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body.70

do.body.70:                                       ; preds = %for.body
  %54 = load %struct.label_chain*, %struct.label_chain** %l, align 8
  %55 = bitcast %struct.label_chain* %54 to i8*
  store i8* %55, i8** %a__, align 8
  %56 = load i8*, i8** %a__, align 8
  %cmp71 = icmp ne i8* %56, null
  br i1 %cmp71, label %if.then.72, label %if.end.74

if.then.72:                                       ; preds = %do.body.70
  %57 = load i8*, i8** %a__, align 8
  %call73 = call i32 @ggc_set_mark(i8* %57)
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.72, %do.body.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  br label %do.body.76

do.body.76:                                       ; preds = %do.end.75
  %58 = load %struct.label_chain*, %struct.label_chain** %l, align 8
  %label = getelementptr inbounds %struct.label_chain, %struct.label_chain* %58, i32 0, i32 1
  %59 = load %union.tree_node*, %union.tree_node** %label, align 8
  store %union.tree_node* %59, %union.tree_node** %t__77, align 8
  %60 = load %union.tree_node*, %union.tree_node** %t__77, align 8
  %cmp78 = icmp ne %union.tree_node* %60, null
  br i1 %cmp78, label %land.lhs.true.79, label %if.end.98

land.lhs.true.79:                                 ; preds = %do.body.76
  %61 = load %union.tree_node*, %union.tree_node** %t__77, align 8
  %62 = bitcast %union.tree_node* %61 to i8*
  %call80 = call i32 @ggc_set_mark(i8* %62)
  %tobool81 = icmp ne i32 %call80, 0
  br i1 %tobool81, label %if.end.98, label %if.then.82

if.then.82:                                       ; preds = %land.lhs.true.79
  br label %do.body.83

do.body.83:                                       ; preds = %if.then.82
  %63 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used84 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %63, i32 0, i32 1
  %64 = load i64, i64* %elements_used84, align 8
  %65 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements85 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %65, i32 0, i32 0
  %66 = load i64, i64* %num_elements85, align 8
  %cmp86 = icmp uge i64 %64, %66
  br i1 %cmp86, label %if.then.87, label %if.end.91

if.then.87:                                       ; preds = %do.body.83
  %67 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %68 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements88 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %68, i32 0, i32 0
  %69 = load i64, i64* %num_elements88, align 8
  %mul89 = mul i64 2, %69
  %call90 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %67, i64 %mul89)
  store %struct.varray_head_tag* %call90, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.87, %do.body.83
  %70 = load %union.tree_node*, %union.tree_node** %t__77, align 8
  %71 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used92 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %71, i32 0, i32 1
  %72 = load i64, i64* %elements_used92, align 8
  %inc93 = add i64 %72, 1
  store i64 %inc93, i64* %elements_used92, align 8
  %73 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data94 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %73, i32 0, i32 4
  %tree95 = bitcast %union.varray_data_tag* %data94 to [1 x %union.tree_node*]*
  %arrayidx96 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree95, i32 0, i64 %72
  store %union.tree_node* %70, %union.tree_node** %arrayidx96, align 8
  br label %do.end.97

do.end.97:                                        ; preds = %if.end.91
  br label %if.end.98

if.end.98:                                        ; preds = %do.end.97, %land.lhs.true.79, %do.body.76
  br label %do.end.99

do.end.99:                                        ; preds = %if.end.98
  br label %for.inc

for.inc:                                          ; preds = %do.end.99
  %74 = load %struct.label_chain*, %struct.label_chain** %l, align 8
  %next = getelementptr inbounds %struct.label_chain, %struct.label_chain* %74, i32 0, i32 0
  %75 = load %struct.label_chain*, %struct.label_chain** %next, align 8
  store %struct.label_chain* %75, %struct.label_chain** %l, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body.100

do.body.100:                                      ; preds = %for.end
  %76 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data102 = getelementptr inbounds %struct.nesting, %struct.nesting* %76, i32 0, i32 4
  %block103 = bitcast %union.anon.3* %data102 to %struct.anon.6*
  %last_unconditional_cleanup = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block103, i32 0, i32 11
  %77 = load %struct.rtx_def*, %struct.rtx_def** %last_unconditional_cleanup, align 8
  store %struct.rtx_def* %77, %struct.rtx_def** %r__101, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %r__101, align 8
  %cmp104 = icmp ne %struct.rtx_def* %78, null
  br i1 %cmp104, label %land.lhs.true.105, label %if.end.109

land.lhs.true.105:                                ; preds = %do.body.100
  %79 = load %struct.rtx_def*, %struct.rtx_def** %r__101, align 8
  %80 = bitcast %struct.rtx_def* %79 to i8*
  %call106 = call i32 @ggc_set_mark(i8* %80)
  %tobool107 = icmp ne i32 %call106, 0
  br i1 %tobool107, label %if.end.109, label %if.then.108

if.then.108:                                      ; preds = %land.lhs.true.105
  %81 = load %struct.rtx_def*, %struct.rtx_def** %r__101, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %81)
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.108, %land.lhs.true.105, %do.body.100
  br label %do.end.110

do.end.110:                                       ; preds = %if.end.109
  %82 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %next111 = getelementptr inbounds %struct.nesting, %struct.nesting* %82, i32 0, i32 1
  %83 = load %struct.nesting*, %struct.nesting** %next111, align 8
  store %struct.nesting* %83, %struct.nesting** %n.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_cond_nesting(%struct.nesting* %n) #0 {
entry:
  %n.addr = alloca %struct.nesting*, align 8
  %r__ = alloca %struct.rtx_def*, align 8
  %r__3 = alloca %struct.rtx_def*, align 8
  %r__12 = alloca %struct.rtx_def*, align 8
  store %struct.nesting* %n, %struct.nesting** %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.21, %entry
  %0 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %tobool = icmp ne %struct.nesting* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %1 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %1, i32 0, i32 3
  %2 = load %struct.rtx_def*, %struct.rtx_def** %exit_label, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %r__, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp = icmp ne %struct.rtx_def* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %5 = bitcast %struct.rtx_def* %4 to i8*
  %call = call i32 @ggc_set_mark(i8* %5)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.2

do.body.2:                                        ; preds = %do.end
  %7 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %cond = bitcast %union.anon.3* %data to %struct.anon.4*
  %endif_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond, i32 0, i32 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %endif_label, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %r__3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  %cmp4 = icmp ne %struct.rtx_def* %9, null
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.9

land.lhs.true.5:                                  ; preds = %do.body.2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  %11 = bitcast %struct.rtx_def* %10 to i8*
  %call6 = call i32 @ggc_set_mark(i8* %11)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true.5
  %12 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %land.lhs.true.5, %do.body.2
  br label %do.end.10

do.end.10:                                        ; preds = %if.end.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  %13 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data13 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %cond14 = bitcast %union.anon.3* %data13 to %struct.anon.4*
  %next_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond14, i32 0, i32 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %next_label, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %r__12, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  %cmp15 = icmp ne %struct.rtx_def* %15, null
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.20

land.lhs.true.16:                                 ; preds = %do.body.11
  %16 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  %17 = bitcast %struct.rtx_def* %16 to i8*
  %call17 = call i32 @ggc_set_mark(i8* %17)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true.16
  %18 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %18)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %land.lhs.true.16, %do.body.11
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  %19 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %19, i32 0, i32 1
  %20 = load %struct.nesting*, %struct.nesting** %next, align 8
  store %struct.nesting* %20, %struct.nesting** %n.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_loop_nesting(%struct.nesting* %n) #0 {
entry:
  %n.addr = alloca %struct.nesting*, align 8
  %r__ = alloca %struct.rtx_def*, align 8
  %r__3 = alloca %struct.rtx_def*, align 8
  %r__12 = alloca %struct.rtx_def*, align 8
  %r__23 = alloca %struct.rtx_def*, align 8
  %r__34 = alloca %struct.rtx_def*, align 8
  store %struct.nesting* %n, %struct.nesting** %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.43, %entry
  %0 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %tobool = icmp ne %struct.nesting* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %1 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %1, i32 0, i32 3
  %2 = load %struct.rtx_def*, %struct.rtx_def** %exit_label, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %r__, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp = icmp ne %struct.rtx_def* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %5 = bitcast %struct.rtx_def* %4 to i8*
  %call = call i32 @ggc_set_mark(i8* %5)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.2

do.body.2:                                        ; preds = %do.end
  %7 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %start_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %r__3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  %cmp4 = icmp ne %struct.rtx_def* %9, null
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.9

land.lhs.true.5:                                  ; preds = %do.body.2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  %11 = bitcast %struct.rtx_def* %10 to i8*
  %call6 = call i32 @ggc_set_mark(i8* %11)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true.5
  %12 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %land.lhs.true.5, %do.body.2
  br label %do.end.10

do.end.10:                                        ; preds = %if.end.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  %13 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data13 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %loop14 = bitcast %union.anon.3* %data13 to %struct.anon.5*
  %end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop14, i32 0, i32 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %r__12, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  %cmp15 = icmp ne %struct.rtx_def* %15, null
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.20

land.lhs.true.16:                                 ; preds = %do.body.11
  %16 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  %17 = bitcast %struct.rtx_def* %16 to i8*
  %call17 = call i32 @ggc_set_mark(i8* %17)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true.16
  %18 = load %struct.rtx_def*, %struct.rtx_def** %r__12, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %18)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %land.lhs.true.16, %do.body.11
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  %19 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data24 = getelementptr inbounds %struct.nesting, %struct.nesting* %19, i32 0, i32 4
  %loop25 = bitcast %union.anon.3* %data24 to %struct.anon.5*
  %alt_end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop25, i32 0, i32 2
  %20 = load %struct.rtx_def*, %struct.rtx_def** %alt_end_label, align 8
  store %struct.rtx_def* %20, %struct.rtx_def** %r__23, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %r__23, align 8
  %cmp26 = icmp ne %struct.rtx_def* %21, null
  br i1 %cmp26, label %land.lhs.true.27, label %if.end.31

land.lhs.true.27:                                 ; preds = %do.body.22
  %22 = load %struct.rtx_def*, %struct.rtx_def** %r__23, align 8
  %23 = bitcast %struct.rtx_def* %22 to i8*
  %call28 = call i32 @ggc_set_mark(i8* %23)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %land.lhs.true.27
  %24 = load %struct.rtx_def*, %struct.rtx_def** %r__23, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %24)
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.30, %land.lhs.true.27, %do.body.22
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  br label %do.body.33

do.body.33:                                       ; preds = %do.end.32
  %25 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data35 = getelementptr inbounds %struct.nesting, %struct.nesting* %25, i32 0, i32 4
  %loop36 = bitcast %union.anon.3* %data35 to %struct.anon.5*
  %continue_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop36, i32 0, i32 3
  %26 = load %struct.rtx_def*, %struct.rtx_def** %continue_label, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %r__34, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %r__34, align 8
  %cmp37 = icmp ne %struct.rtx_def* %27, null
  br i1 %cmp37, label %land.lhs.true.38, label %if.end.42

land.lhs.true.38:                                 ; preds = %do.body.33
  %28 = load %struct.rtx_def*, %struct.rtx_def** %r__34, align 8
  %29 = bitcast %struct.rtx_def* %28 to i8*
  %call39 = call i32 @ggc_set_mark(i8* %29)
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %land.lhs.true.38
  %30 = load %struct.rtx_def*, %struct.rtx_def** %r__34, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %30)
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.41, %land.lhs.true.38, %do.body.33
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  %31 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %31, i32 0, i32 1
  %32 = load %struct.nesting*, %struct.nesting** %next, align 8
  store %struct.nesting* %32, %struct.nesting** %n.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_case_nesting(%struct.nesting* %n) #0 {
entry:
  %n.addr = alloca %struct.nesting*, align 8
  %r__ = alloca %struct.rtx_def*, align 8
  %r__3 = alloca %struct.rtx_def*, align 8
  %t__ = alloca %union.tree_node*, align 8
  %t__31 = alloca %union.tree_node*, align 8
  %t__57 = alloca %union.tree_node*, align 8
  store %struct.nesting* %n, %struct.nesting** %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.81, %entry
  %0 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %tobool = icmp ne %struct.nesting* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %1 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %1, i32 0, i32 3
  %2 = load %struct.rtx_def*, %struct.rtx_def** %exit_label, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %r__, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp = icmp ne %struct.rtx_def* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %5 = bitcast %struct.rtx_def* %4 to i8*
  %call = call i32 @ggc_set_mark(i8* %5)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.2

do.body.2:                                        ; preds = %do.end
  %7 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %start = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %r__3, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  %cmp4 = icmp ne %struct.rtx_def* %9, null
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.9

land.lhs.true.5:                                  ; preds = %do.body.2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  %11 = bitcast %struct.rtx_def* %10 to i8*
  %call6 = call i32 @ggc_set_mark(i8* %11)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true.5
  %12 = load %struct.rtx_def*, %struct.rtx_def** %r__3, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %land.lhs.true.5, %do.body.2
  br label %do.end.10

do.end.10:                                        ; preds = %if.end.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  %13 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data12 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %case_stmt13 = bitcast %union.anon.3* %data12 to %struct.anon.7*
  %default_label = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt13, i32 0, i32 2
  %14 = load %union.tree_node*, %union.tree_node** %default_label, align 8
  store %union.tree_node* %14, %union.tree_node** %t__, align 8
  %15 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %cmp14 = icmp ne %union.tree_node* %15, null
  br i1 %cmp14, label %land.lhs.true.15, label %if.end.28

land.lhs.true.15:                                 ; preds = %do.body.11
  %16 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %17 = bitcast %union.tree_node* %16 to i8*
  %call16 = call i32 @ggc_set_mark(i8* %17)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end.28, label %if.then.18

if.then.18:                                       ; preds = %land.lhs.true.15
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  %18 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %18, i32 0, i32 1
  %19 = load i64, i64* %elements_used, align 8
  %20 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %20, i32 0, i32 0
  %21 = load i64, i64* %num_elements, align 8
  %cmp20 = icmp uge i64 %19, %21
  br i1 %cmp20, label %if.then.21, label %if.end.24

if.then.21:                                       ; preds = %do.body.19
  %22 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %23 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements22 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %23, i32 0, i32 0
  %24 = load i64, i64* %num_elements22, align 8
  %mul = mul i64 2, %24
  %call23 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %22, i64 %mul)
  store %struct.varray_head_tag* %call23, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.21, %do.body.19
  %25 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %26 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used25 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %26, i32 0, i32 1
  %27 = load i64, i64* %elements_used25, align 8
  %inc = add i64 %27, 1
  store i64 %inc, i64* %elements_used25, align 8
  %28 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data26 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %28, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data26 to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %27
  store %union.tree_node* %25, %union.tree_node** %arrayidx, align 8
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.24
  br label %if.end.28

if.end.28:                                        ; preds = %do.end.27, %land.lhs.true.15, %do.body.11
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  br label %do.body.30

do.body.30:                                       ; preds = %do.end.29
  %29 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data32 = getelementptr inbounds %struct.nesting, %struct.nesting* %29, i32 0, i32 4
  %case_stmt33 = bitcast %union.anon.3* %data32 to %struct.anon.7*
  %index_expr = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt33, i32 0, i32 3
  %30 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  store %union.tree_node* %30, %union.tree_node** %t__31, align 8
  %31 = load %union.tree_node*, %union.tree_node** %t__31, align 8
  %cmp34 = icmp ne %union.tree_node* %31, null
  br i1 %cmp34, label %land.lhs.true.35, label %if.end.54

land.lhs.true.35:                                 ; preds = %do.body.30
  %32 = load %union.tree_node*, %union.tree_node** %t__31, align 8
  %33 = bitcast %union.tree_node* %32 to i8*
  %call36 = call i32 @ggc_set_mark(i8* %33)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end.54, label %if.then.38

if.then.38:                                       ; preds = %land.lhs.true.35
  br label %do.body.39

do.body.39:                                       ; preds = %if.then.38
  %34 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used40 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %34, i32 0, i32 1
  %35 = load i64, i64* %elements_used40, align 8
  %36 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements41 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %36, i32 0, i32 0
  %37 = load i64, i64* %num_elements41, align 8
  %cmp42 = icmp uge i64 %35, %37
  br i1 %cmp42, label %if.then.43, label %if.end.47

if.then.43:                                       ; preds = %do.body.39
  %38 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %39 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements44 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %39, i32 0, i32 0
  %40 = load i64, i64* %num_elements44, align 8
  %mul45 = mul i64 2, %40
  %call46 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %38, i64 %mul45)
  store %struct.varray_head_tag* %call46, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.43, %do.body.39
  %41 = load %union.tree_node*, %union.tree_node** %t__31, align 8
  %42 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used48 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %42, i32 0, i32 1
  %43 = load i64, i64* %elements_used48, align 8
  %inc49 = add i64 %43, 1
  store i64 %inc49, i64* %elements_used48, align 8
  %44 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data50 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %44, i32 0, i32 4
  %tree51 = bitcast %union.varray_data_tag* %data50 to [1 x %union.tree_node*]*
  %arrayidx52 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree51, i32 0, i64 %43
  store %union.tree_node* %41, %union.tree_node** %arrayidx52, align 8
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.47
  br label %if.end.54

if.end.54:                                        ; preds = %do.end.53, %land.lhs.true.35, %do.body.30
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  br label %do.body.56

do.body.56:                                       ; preds = %do.end.55
  %45 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data58 = getelementptr inbounds %struct.nesting, %struct.nesting* %45, i32 0, i32 4
  %case_stmt59 = bitcast %union.anon.3* %data58 to %struct.anon.7*
  %nominal_type = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt59, i32 0, i32 4
  %46 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8
  store %union.tree_node* %46, %union.tree_node** %t__57, align 8
  %47 = load %union.tree_node*, %union.tree_node** %t__57, align 8
  %cmp60 = icmp ne %union.tree_node* %47, null
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.80

land.lhs.true.61:                                 ; preds = %do.body.56
  %48 = load %union.tree_node*, %union.tree_node** %t__57, align 8
  %49 = bitcast %union.tree_node* %48 to i8*
  %call62 = call i32 @ggc_set_mark(i8* %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.end.80, label %if.then.64

if.then.64:                                       ; preds = %land.lhs.true.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used66 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %50, i32 0, i32 1
  %51 = load i64, i64* %elements_used66, align 8
  %52 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements67 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %52, i32 0, i32 0
  %53 = load i64, i64* %num_elements67, align 8
  %cmp68 = icmp uge i64 %51, %53
  br i1 %cmp68, label %if.then.69, label %if.end.73

if.then.69:                                       ; preds = %do.body.65
  %54 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %55 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements70 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %55, i32 0, i32 0
  %56 = load i64, i64* %num_elements70, align 8
  %mul71 = mul i64 2, %56
  %call72 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %54, i64 %mul71)
  store %struct.varray_head_tag* %call72, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.69, %do.body.65
  %57 = load %union.tree_node*, %union.tree_node** %t__57, align 8
  %58 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used74 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %58, i32 0, i32 1
  %59 = load i64, i64* %elements_used74, align 8
  %inc75 = add i64 %59, 1
  store i64 %inc75, i64* %elements_used74, align 8
  %60 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data76 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %60, i32 0, i32 4
  %tree77 = bitcast %union.varray_data_tag* %data76 to [1 x %union.tree_node*]*
  %arrayidx78 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree77, i32 0, i64 %59
  store %union.tree_node* %57, %union.tree_node** %arrayidx78, align 8
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.73
  br label %if.end.80

if.end.80:                                        ; preds = %do.end.79, %land.lhs.true.61, %do.body.56
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  %61 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %data82 = getelementptr inbounds %struct.nesting, %struct.nesting* %61, i32 0, i32 4
  %case_stmt83 = bitcast %union.anon.3* %data82 to %struct.anon.7*
  %case_list = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt83, i32 0, i32 1
  %62 = load %struct.case_node*, %struct.case_node** %case_list, align 8
  call void @mark_case_node(%struct.case_node* %62)
  %63 = load %struct.nesting*, %struct.nesting** %n.addr, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %63, i32 0, i32 1
  %64 = load %struct.nesting*, %struct.nesting** %next, align 8
  store %struct.nesting* %64, %struct.nesting** %n.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @ggc_set_mark(i8*) #2

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #2

declare void @ggc_mark_rtx_children(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @mark_goto_fixup(%struct.goto_fixup* %g) #0 {
entry:
  %g.addr = alloca %struct.goto_fixup*, align 8
  %a__ = alloca i8*, align 8
  %r__ = alloca %struct.rtx_def*, align 8
  %t__ = alloca %union.tree_node*, align 8
  %t__25 = alloca %union.tree_node*, align 8
  %r__49 = alloca %struct.rtx_def*, align 8
  %r__58 = alloca %struct.rtx_def*, align 8
  %t__67 = alloca %union.tree_node*, align 8
  store %struct.goto_fixup* %g, %struct.goto_fixup** %g.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.89, %entry
  %0 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %tobool = icmp ne %struct.goto_fixup* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %1 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %2 = bitcast %struct.goto_fixup* %1 to i8*
  store i8* %2, i8** %a__, align 8
  %3 = load i8*, i8** %a__, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load i8*, i8** %a__, align 8
  %call = call i32 @ggc_set_mark(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  %5 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %before_jump = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %5, i32 0, i32 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %before_jump, align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %r__, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp2 = icmp ne %struct.rtx_def* %7, null
  br i1 %cmp2, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %do.body.1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %9 = bitcast %struct.rtx_def* %8 to i8*
  %call3 = call i32 @ggc_set_mark(i8* %9)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %10)
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %land.lhs.true, %do.body.1
  br label %do.end.7

do.end.7:                                         ; preds = %if.end.6
  br label %do.body.8

do.body.8:                                        ; preds = %do.end.7
  %11 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %target = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %11, i32 0, i32 2
  %12 = load %union.tree_node*, %union.tree_node** %target, align 8
  store %union.tree_node* %12, %union.tree_node** %t__, align 8
  %13 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %cmp9 = icmp ne %union.tree_node* %13, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.22

land.lhs.true.10:                                 ; preds = %do.body.8
  %14 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %15 = bitcast %union.tree_node* %14 to i8*
  %call11 = call i32 @ggc_set_mark(i8* %15)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end.22, label %if.then.13

if.then.13:                                       ; preds = %land.lhs.true.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %16 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %16, i32 0, i32 1
  %17 = load i64, i64* %elements_used, align 8
  %18 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %18, i32 0, i32 0
  %19 = load i64, i64* %num_elements, align 8
  %cmp15 = icmp uge i64 %17, %19
  br i1 %cmp15, label %if.then.16, label %if.end.19

if.then.16:                                       ; preds = %do.body.14
  %20 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %21 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements17 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %21, i32 0, i32 0
  %22 = load i64, i64* %num_elements17, align 8
  %mul = mul i64 2, %22
  %call18 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %20, i64 %mul)
  store %struct.varray_head_tag* %call18, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.16, %do.body.14
  %23 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %24 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used20 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %24, i32 0, i32 1
  %25 = load i64, i64* %elements_used20, align 8
  %inc = add i64 %25, 1
  store i64 %inc, i64* %elements_used20, align 8
  %26 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %26, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %25
  store %union.tree_node* %23, %union.tree_node** %arrayidx, align 8
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.19
  br label %if.end.22

if.end.22:                                        ; preds = %do.end.21, %land.lhs.true.10, %do.body.8
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  br label %do.body.24

do.body.24:                                       ; preds = %do.end.23
  %27 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %context = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %27, i32 0, i32 3
  %28 = load %union.tree_node*, %union.tree_node** %context, align 8
  store %union.tree_node* %28, %union.tree_node** %t__25, align 8
  %29 = load %union.tree_node*, %union.tree_node** %t__25, align 8
  %cmp26 = icmp ne %union.tree_node* %29, null
  br i1 %cmp26, label %land.lhs.true.27, label %if.end.46

land.lhs.true.27:                                 ; preds = %do.body.24
  %30 = load %union.tree_node*, %union.tree_node** %t__25, align 8
  %31 = bitcast %union.tree_node* %30 to i8*
  %call28 = call i32 @ggc_set_mark(i8* %31)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.end.46, label %if.then.30

if.then.30:                                       ; preds = %land.lhs.true.27
  br label %do.body.31

do.body.31:                                       ; preds = %if.then.30
  %32 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used32 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %32, i32 0, i32 1
  %33 = load i64, i64* %elements_used32, align 8
  %34 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements33 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %34, i32 0, i32 0
  %35 = load i64, i64* %num_elements33, align 8
  %cmp34 = icmp uge i64 %33, %35
  br i1 %cmp34, label %if.then.35, label %if.end.39

if.then.35:                                       ; preds = %do.body.31
  %36 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %37 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements36 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %37, i32 0, i32 0
  %38 = load i64, i64* %num_elements36, align 8
  %mul37 = mul i64 2, %38
  %call38 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %36, i64 %mul37)
  store %struct.varray_head_tag* %call38, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.35, %do.body.31
  %39 = load %union.tree_node*, %union.tree_node** %t__25, align 8
  %40 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used40 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %40, i32 0, i32 1
  %41 = load i64, i64* %elements_used40, align 8
  %inc41 = add i64 %41, 1
  store i64 %inc41, i64* %elements_used40, align 8
  %42 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data42 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %42, i32 0, i32 4
  %tree43 = bitcast %union.varray_data_tag* %data42 to [1 x %union.tree_node*]*
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree43, i32 0, i64 %41
  store %union.tree_node* %39, %union.tree_node** %arrayidx44, align 8
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.39
  br label %if.end.46

if.end.46:                                        ; preds = %do.end.45, %land.lhs.true.27, %do.body.24
  br label %do.end.47

do.end.47:                                        ; preds = %if.end.46
  br label %do.body.48

do.body.48:                                       ; preds = %do.end.47
  %43 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %target_rtl = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %43, i32 0, i32 4
  %44 = load %struct.rtx_def*, %struct.rtx_def** %target_rtl, align 8
  store %struct.rtx_def* %44, %struct.rtx_def** %r__49, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %r__49, align 8
  %cmp50 = icmp ne %struct.rtx_def* %45, null
  br i1 %cmp50, label %land.lhs.true.51, label %if.end.55

land.lhs.true.51:                                 ; preds = %do.body.48
  %46 = load %struct.rtx_def*, %struct.rtx_def** %r__49, align 8
  %47 = bitcast %struct.rtx_def* %46 to i8*
  %call52 = call i32 @ggc_set_mark(i8* %47)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end.55, label %if.then.54

if.then.54:                                       ; preds = %land.lhs.true.51
  %48 = load %struct.rtx_def*, %struct.rtx_def** %r__49, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %48)
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.54, %land.lhs.true.51, %do.body.48
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  %49 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %stack_level = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %49, i32 0, i32 6
  %50 = load %struct.rtx_def*, %struct.rtx_def** %stack_level, align 8
  store %struct.rtx_def* %50, %struct.rtx_def** %r__58, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %r__58, align 8
  %cmp59 = icmp ne %struct.rtx_def* %51, null
  br i1 %cmp59, label %land.lhs.true.60, label %if.end.64

land.lhs.true.60:                                 ; preds = %do.body.57
  %52 = load %struct.rtx_def*, %struct.rtx_def** %r__58, align 8
  %53 = bitcast %struct.rtx_def* %52 to i8*
  %call61 = call i32 @ggc_set_mark(i8* %53)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end.64, label %if.then.63

if.then.63:                                       ; preds = %land.lhs.true.60
  %54 = load %struct.rtx_def*, %struct.rtx_def** %r__58, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %54)
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.63, %land.lhs.true.60, %do.body.57
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %55 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %cleanup_list_list = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %55, i32 0, i32 7
  %56 = load %union.tree_node*, %union.tree_node** %cleanup_list_list, align 8
  store %union.tree_node* %56, %union.tree_node** %t__67, align 8
  %57 = load %union.tree_node*, %union.tree_node** %t__67, align 8
  %cmp68 = icmp ne %union.tree_node* %57, null
  br i1 %cmp68, label %land.lhs.true.69, label %if.end.88

land.lhs.true.69:                                 ; preds = %do.body.66
  %58 = load %union.tree_node*, %union.tree_node** %t__67, align 8
  %59 = bitcast %union.tree_node* %58 to i8*
  %call70 = call i32 @ggc_set_mark(i8* %59)
  %tobool71 = icmp ne i32 %call70, 0
  br i1 %tobool71, label %if.end.88, label %if.then.72

if.then.72:                                       ; preds = %land.lhs.true.69
  br label %do.body.73

do.body.73:                                       ; preds = %if.then.72
  %60 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used74 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %60, i32 0, i32 1
  %61 = load i64, i64* %elements_used74, align 8
  %62 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements75 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %62, i32 0, i32 0
  %63 = load i64, i64* %num_elements75, align 8
  %cmp76 = icmp uge i64 %61, %63
  br i1 %cmp76, label %if.then.77, label %if.end.81

if.then.77:                                       ; preds = %do.body.73
  %64 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %65 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements78 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %65, i32 0, i32 0
  %66 = load i64, i64* %num_elements78, align 8
  %mul79 = mul i64 2, %66
  %call80 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %64, i64 %mul79)
  store %struct.varray_head_tag* %call80, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.77, %do.body.73
  %67 = load %union.tree_node*, %union.tree_node** %t__67, align 8
  %68 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used82 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %68, i32 0, i32 1
  %69 = load i64, i64* %elements_used82, align 8
  %inc83 = add i64 %69, 1
  store i64 %inc83, i64* %elements_used82, align 8
  %70 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data84 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %70, i32 0, i32 4
  %tree85 = bitcast %union.varray_data_tag* %data84 to [1 x %union.tree_node*]*
  %arrayidx86 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree85, i32 0, i64 %69
  store %union.tree_node* %67, %union.tree_node** %arrayidx86, align 8
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.81
  br label %if.end.88

if.end.88:                                        ; preds = %do.end.87, %land.lhs.true.69, %do.body.66
  br label %do.end.89

do.end.89:                                        ; preds = %if.end.88
  %71 = load %struct.goto_fixup*, %struct.goto_fixup** %g.addr, align 8
  %next = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %71, i32 0, i32 0
  %72 = load %struct.goto_fixup*, %struct.goto_fixup** %next, align 8
  store %struct.goto_fixup* %72, %struct.goto_fixup** %g.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_stmt() #0 {
entry:
  call void @gcc_obstack_init(%struct.obstack* @stmt_obstack)
  ret void
}

declare void @gcc_obstack_init(%struct.obstack*) #2

; Function Attrs: nounwind uwtable
define void @init_stmt_for_function() #0 {
entry:
  %call = call noalias i8* @xmalloc(i64 104)
  %0 = bitcast i8* %call to %struct.stmt_status*
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1
  store %struct.stmt_status* %0, %struct.stmt_status** %stmt, align 8
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 1
  %3 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %3, i32 0, i32 0
  store %struct.nesting* null, %struct.nesting** %x_block_stack, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt2, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 1
  store %struct.nesting* null, %struct.nesting** %x_stack_block_stack, align 8
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt3 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1
  %7 = load %struct.stmt_status*, %struct.stmt_status** %stmt3, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %7, i32 0, i32 3
  store %struct.nesting* null, %struct.nesting** %x_loop_stack, align 8
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt4 = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 1
  %9 = load %struct.stmt_status*, %struct.stmt_status** %stmt4, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %9, i32 0, i32 4
  store %struct.nesting* null, %struct.nesting** %x_case_stack, align 8
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt5 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1
  %11 = load %struct.stmt_status*, %struct.stmt_status** %stmt5, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %11, i32 0, i32 2
  store %struct.nesting* null, %struct.nesting** %x_cond_stack, align 8
  %12 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt6 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 1
  %13 = load %struct.stmt_status*, %struct.stmt_status** %stmt6, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %13, i32 0, i32 5
  store %struct.nesting* null, %struct.nesting** %x_nesting_stack, align 8
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt7 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1
  %15 = load %struct.stmt_status*, %struct.stmt_status** %stmt7, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %15, i32 0, i32 6
  store i32 0, i32* %x_nesting_depth, align 4
  %16 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt8 = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 1
  %17 = load %struct.stmt_status*, %struct.stmt_status** %stmt8, align 8
  %x_block_start_count = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %17, i32 0, i32 7
  store i32 0, i32* %x_block_start_count, align 4
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt9 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 1
  %19 = load %struct.stmt_status*, %struct.stmt_status** %stmt9, align 8
  %x_goto_fixup_chain = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %19, i32 0, i32 13
  store %struct.goto_fixup* null, %struct.goto_fixup** %x_goto_fixup_chain, align 8
  %20 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt10 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 1
  %21 = load %struct.stmt_status*, %struct.stmt_status** %stmt10, align 8
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %21, i32 0, i32 10
  store i32 0, i32* %x_expr_stmts_for_value, align 4
  %22 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt11 = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 1
  %23 = load %struct.stmt_status*, %struct.stmt_status** %stmt11, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %23, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  %24 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt12 = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 1
  %25 = load %struct.stmt_status*, %struct.stmt_status** %stmt12, align 8
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %25, i32 0, i32 9
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_expr_value, align 8
  ret void
}

declare noalias i8* @xmalloc(i64) #2

; Function Attrs: nounwind uwtable
define i32 @in_control_zone_p() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 2
  %2 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %tobool = icmp ne %struct.nesting* %2, null
  br i1 %tobool, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 3
  %5 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %tobool2 = icmp ne %struct.nesting* %5, null
  br i1 %tobool2, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt3 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1
  %7 = load %struct.stmt_status*, %struct.stmt_status** %stmt3, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %7, i32 0, i32 4
  %8 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %tobool4 = icmp ne %struct.nesting* %8, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define void @set_file_and_line_for_stmt(i8* %file, i32 %line) #0 {
entry:
  %file.addr = alloca i8*, align 8
  %line.addr = alloca i32, align 4
  store i8* %file, i8** %file.addr, align 8
  store i32 %line, i32* %line.addr, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %tobool = icmp ne %struct.stmt_status* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 8
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_emit_filename = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 11
  store i8* %2, i8** %x_emit_filename, align 8
  %5 = load i32, i32* %line.addr, align 4
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1
  %7 = load %struct.stmt_status*, %struct.stmt_status** %stmt2, align 8
  %x_emit_lineno = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %7, i32 0, i32 12
  store i32 %5, i32* %x_emit_lineno, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @emit_nop() #0 {
entry:
  %last_insn = alloca %struct.rtx_def*, align 8
  %call = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call, %struct.rtx_def** %last_insn, align 8
  %0 = load i32, i32* @optimize, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 37
  br i1 %cmp3, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  %call5 = call %struct.rtx_def* @prev_real_insn(%struct.rtx_def* %5)
  %cmp6 = icmp eq %struct.rtx_def* %call5, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.4, %land.lhs.true
  %call7 = call %struct.rtx_def* @gen_nop()
  %call8 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.4, %lor.lhs.false, %entry
  ret void
}

declare %struct.rtx_def* @get_last_insn() #2

declare %struct.rtx_def* @prev_real_insn(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare %struct.rtx_def* @gen_nop() #2

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @label_rtx(%union.tree_node* %label) #0 {
entry:
  %label.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 31
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 683, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__FUNCTION__.label_rtx, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp1 = icmp ne %struct.rtx_def* %2, null
  br i1 %cmp1, label %if.end.5, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %call = call %struct.rtx_def* @gen_label_rtx()
  %3 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl3 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %rtl4 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl3, i32 0, i32 17
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl4, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.2, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl6 = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %rtl7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 17
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.5
  %6 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl8 = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %rtl9 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 17
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.5
  %8 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %8, i8* null)
  %9 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl10 = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %rtl11 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 17
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl11, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %7, %cond.true ], [ %10, %cond.false ]
  ret %struct.rtx_def* %cond
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #3

declare %struct.rtx_def* @gen_label_rtx() #2

declare void @make_decl_rtl(%union.tree_node*, i8*) #2

; Function Attrs: nounwind uwtable
define void @emit_jump(%struct.rtx_def* %label) #0 {
entry:
  %label.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @do_pending_stack_adjust()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %call = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call)
  %call2 = call %struct.rtx_def* @emit_barrier()
  ret void
}

declare void @do_pending_stack_adjust() #2

declare %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #2

declare %struct.rtx_def* @gen_jump(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_barrier() #2

; Function Attrs: nounwind uwtable
define void @expand_computed_goto(%union.tree_node* %exp) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %x = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %0, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %x, align 8
  call void @emit_queue()
  call void @do_pending_stack_adjust()
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  call void @emit_indirect_jump(%struct.rtx_def* %1)
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %has_computed_jump = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 56
  %3 = bitcast i24* %has_computed_jump to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, -2049
  %bf.set = or i32 %bf.clear, 2048
  store i32 %bf.set, i32* %3, align 8
  ret void
}

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #2

declare void @emit_queue() #2

declare void @emit_indirect_jump(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_label(%union.tree_node* %label) #0 {
entry:
  %label.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.label_chain*, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @do_pending_stack_adjust()
  %0 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %call = call %struct.rtx_def* @label_rtx(%union.tree_node* %0)
  %call1 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %call)
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 8
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl2 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %name3 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 8
  %4 = load %union.tree_node*, %union.tree_node** %name3, align 8
  %identifier = bitcast %union.tree_node* %4 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %5 = load i8*, i8** %str, align 8
  %6 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl4 = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl4, i32 0, i32 17
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool5 = icmp ne %struct.rtx_def* %7, null
  br i1 %tobool5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl6 = bitcast %union.tree_node* %8 to %struct.tree_decl*
  %rtl7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 17
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %10, i8* null)
  %11 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %decl8 = bitcast %union.tree_node* %11 to %struct.tree_decl*
  %rtl9 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 17
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %9, %cond.true ], [ %12, %cond.false ]
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 6
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  store i8* %5, i8** %rtstr, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %13 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 1
  %14 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %14, i32 0, i32 1
  %15 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %cmp = icmp ne %struct.nesting* %15, null
  br i1 %cmp, label %if.then.10, label %if.end.20

if.then.10:                                       ; preds = %if.end
  %call11 = call i8* @ggc_alloc(i64 16)
  %16 = bitcast i8* %call11 to %struct.label_chain*
  store %struct.label_chain* %16, %struct.label_chain** %p, align 8
  %17 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt12 = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 1
  %18 = load %struct.stmt_status*, %struct.stmt_status** %stmt12, align 8
  %x_stack_block_stack13 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %18, i32 0, i32 1
  %19 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack13, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %19, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %label_chain = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 6
  %20 = load %struct.label_chain*, %struct.label_chain** %label_chain, align 8
  %21 = load %struct.label_chain*, %struct.label_chain** %p, align 8
  %next = getelementptr inbounds %struct.label_chain, %struct.label_chain* %21, i32 0, i32 0
  store %struct.label_chain* %20, %struct.label_chain** %next, align 8
  %22 = load %struct.label_chain*, %struct.label_chain** %p, align 8
  %23 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt14 = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 1
  %24 = load %struct.stmt_status*, %struct.stmt_status** %stmt14, align 8
  %x_stack_block_stack15 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %24, i32 0, i32 1
  %25 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack15, align 8
  %data16 = getelementptr inbounds %struct.nesting, %struct.nesting* %25, i32 0, i32 4
  %block17 = bitcast %union.anon.3* %data16 to %struct.anon.6*
  %label_chain18 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block17, i32 0, i32 6
  store %struct.label_chain* %22, %struct.label_chain** %label_chain18, align 8
  %26 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %27 = load %struct.label_chain*, %struct.label_chain** %p, align 8
  %label19 = getelementptr inbounds %struct.label_chain, %struct.label_chain* %27, i32 0, i32 1
  store %union.tree_node* %26, %union.tree_node** %label19, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.10, %if.end
  ret void
}

declare %struct.rtx_def* @emit_label(%struct.rtx_def*) #2

declare i8* @ggc_alloc(i64) #2

; Function Attrs: nounwind uwtable
define void @declare_nonlocal_label(%union.tree_node* %label) #0 {
entry:
  %label.addr = alloca %union.tree_node*, align 8
  %slot = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %1, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond3 = select i1 %tobool2, i32 5, i32 4
  %idxprom = sext i32 %cond3 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i64
  %call = call %struct.rtx_def* @assign_stack_local(i32 %cond, i64 %conv, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %slot, align 8
  %3 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 19
  %5 = load %union.tree_node*, %union.tree_node** %x_nonlocal_labels, align 8
  %call4 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %3, %union.tree_node* %5)
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels5 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 19
  store %union.tree_node* %call4, %union.tree_node** %x_nonlocal_labels5, align 8
  %7 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %call6 = call %struct.rtx_def* @label_rtx(%union.tree_node* %7)
  %8 = bitcast %struct.rtx_def* %call6 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, -268435457
  %bf.set = or i32 %bf.clear, 268435456
  store i32 %bf.set, i32* %8, align 8
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 20
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  %cmp = icmp eq %struct.rtx_def* %10, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 22
  %12 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_reentry = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 29
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_reentry, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  call void @emit_stack_save(i32 2, %struct.rtx_def** %x_nonlocal_goto_stack_level, %struct.rtx_def* %14)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %15 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %16 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots9 = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 20
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots9, align 8
  %call10 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %17)
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots11 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 20
  store %struct.rtx_def* %call10, %struct.rtx_def** %x_nonlocal_goto_handler_slots11, align 8
  ret void
}

declare %struct.rtx_def* @assign_stack_local(i32, i64, i32) #2

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare void @emit_stack_save(i32, %struct.rtx_def**, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_goto(%union.tree_node* %label) #0 {
entry:
  %label.addr = alloca %union.tree_node*, align 8
  %context = alloca %union.tree_node*, align 8
  %p = alloca %struct.function*, align 8
  %label_ref = alloca %struct.rtx_def*, align 8
  %handler_slot = alloca %struct.rtx_def*, align 8
  %static_chain = alloca %struct.rtx_def*, align 8
  %save_area = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %link = alloca %union.tree_node*, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %0)
  store %union.tree_node* %call, %union.tree_node** %context, align 8
  %1 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp = icmp ne %union.tree_node* %1, null
  br i1 %cmp, label %land.lhs.true, label %if.else.55

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %context, align 8
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp1 = icmp ne %union.tree_node* %2, %3
  br i1 %cmp1, label %if.then, label %if.else.55

if.then:                                          ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %context, align 8
  %call2 = call %struct.function* @find_function_data(%union.tree_node* %4)
  store %struct.function* %call2, %struct.function** %p, align 8
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %6 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %call3 = call %struct.rtx_def* @label_rtx(%union.tree_node* %6)
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond, %struct.rtx_def* %call3)
  store %struct.rtx_def* %call4, %struct.rtx_def** %label_ref, align 8
  %7 = load %struct.function*, %struct.function** %p, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 20
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %handler_slot, align 8
  %9 = load %struct.function*, %struct.function** %p, align 8
  %x_nonlocal_labels = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 19
  %10 = load %union.tree_node*, %union.tree_node** %x_nonlocal_labels, align 8
  store %union.tree_node* %10, %union.tree_node** %link, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list = bitcast %union.tree_node* %11 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %12 = load %union.tree_node*, %union.tree_node** %value, align 8
  %13 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %cmp5 = icmp ne %union.tree_node* %12, %13
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load %struct.rtx_def*, %struct.rtx_def** %handler_slot, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %handler_slot, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %17 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %17, %union.tree_node** %link, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load %struct.rtx_def*, %struct.rtx_def** %handler_slot, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx8, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %handler_slot, align 8
  %20 = load %struct.function*, %struct.function** %p, align 8
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 56
  %21 = bitcast i24* %has_nonlocal_label to i32*
  %bf.load = load i32, i32* %21, align 8
  %bf.clear = and i32 %bf.load, -257
  %bf.set = or i32 %bf.clear, 256
  store i32 %bf.set, i32* %21, align 8
  %22 = load %struct.function*, %struct.function** @cfun, align 8
  %has_nonlocal_goto = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 56
  %23 = bitcast i24* %has_nonlocal_goto to i32*
  %bf.load9 = load i32, i32* %23, align 8
  %bf.clear10 = and i32 %bf.load9, -513
  %bf.set11 = or i32 %bf.clear10, 512
  store i32 %bf.set11, i32* %23, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %label_ref, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load12 = load i32, i32* %25, align 8
  %bf.clear13 = and i32 %bf.load12, -134217729
  %bf.set14 = or i32 %bf.clear13, 134217728
  store i32 %bf.set14, i32* %25, align 8
  %26 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %call15 = call %struct.rtx_def* @lookup_static_chain(%union.tree_node* %26)
  %call16 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call15)
  store %struct.rtx_def* %call16, %struct.rtx_def** %static_chain, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %handler_slot, align 8
  %call17 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %27)
  %28 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %static_chain, align 8
  %call18 = call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %call17, %struct.rtx_def* %28, %struct.rtx_def* %29)
  %call19 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call18)
  store %struct.rtx_def* %call19, %struct.rtx_def** %handler_slot, align 8
  %30 = load %struct.function*, %struct.function** %p, align 8
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 22
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_stack_level, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %save_area, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8
  %tobool20 = icmp ne %struct.rtx_def* %32, null
  br i1 %tobool20, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %for.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8
  %call22 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %33)
  %34 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %static_chain, align 8
  %call23 = call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %call22, %struct.rtx_def* %34, %struct.rtx_def* %35)
  store %struct.rtx_def* %call23, %struct.rtx_def** %save_area, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.21, %for.end
  %36 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %static_chain, align 8
  %call24 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %36, %struct.rtx_def* %37)
  %38 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8
  call void @emit_stack_restore(i32 2, %struct.rtx_def* %38, %struct.rtx_def* null)
  %39 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %39)
  %call26 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call25)
  %40 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %40)
  %call28 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27)
  %41 = load %struct.rtx_def*, %struct.rtx_def** %handler_slot, align 8
  call void @emit_indirect_jump(%struct.rtx_def* %41)
  %call29 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call29, %struct.rtx_def** %insn, align 8
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.50, %if.end
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool31 = icmp ne %struct.rtx_def* %42, null
  br i1 %tobool31, label %for.body.32, label %for.end.54

for.body.32:                                      ; preds = %for.cond.30
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load33 = load i32, i32* %44, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  %cmp35 = icmp eq i32 %bf.clear34, 33
  br i1 %cmp35, label %if.then.36, label %if.else

if.then.36:                                       ; preds = %for.body.32
  %45 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 6
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %call40 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 27, %struct.rtx_def* %45, %struct.rtx_def* %47)
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 6
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  store %struct.rtx_def* %call40, %struct.rtx_def** %rtx43, align 8
  br label %for.end.54

if.else:                                          ; preds = %for.body.32
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load44 = load i32, i32* %50, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp eq i32 %bf.clear45, 34
  br i1 %cmp46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.else
  br label %for.end.54

if.end.48:                                        ; preds = %if.else
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48
  br label %for.inc.50

for.inc.50:                                       ; preds = %if.end.49
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 1
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx53, align 8
  store %struct.rtx_def* %52, %struct.rtx_def** %insn, align 8
  br label %for.cond.30

for.end.54:                                       ; preds = %if.then.47, %if.then.36, %for.cond.30
  br label %if.end.57

if.else.55:                                       ; preds = %land.lhs.true, %entry
  %53 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %54 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %call56 = call %struct.rtx_def* @label_rtx(%union.tree_node* %54)
  call void @expand_goto_internal(%union.tree_node* %53, %struct.rtx_def* %call56, %struct.rtx_def* null)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.55, %for.end.54
  ret void
}

declare %union.tree_node* @decl_function_context(%union.tree_node*) #2

declare %struct.function* @find_function_data(%union.tree_node*) #2

declare %struct.rtx_def* @gen_rtx_fmt_u00(i32, i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare %struct.rtx_def* @lookup_static_chain(%union.tree_node*) #2

declare %struct.rtx_def* @replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @emit_stack_restore(i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @alloc_EXPR_LIST(i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @expand_goto_internal(%union.tree_node* %body, %struct.rtx_def* %label, %struct.rtx_def* %last_insn) #0 {
entry:
  %body.addr = alloca %union.tree_node*, align 8
  %label.addr = alloca %struct.rtx_def*, align 8
  %last_insn.addr = alloca %struct.rtx_def*, align 8
  %block = alloca %struct.nesting*, align 8
  %stack_level = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %body, %union.tree_node** %body.addr, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  store %struct.rtx_def* %last_insn, %struct.rtx_def** %last_insn.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %stack_level, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 36
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 881, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.expand_goto_internal, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %cmp1 = icmp ne %struct.rtx_def* %3, null
  br i1 %cmp1, label %if.then.2, label %if.else.55

if.then.2:                                        ; preds = %if.end
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 0
  %6 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  store %struct.nesting* %6, %struct.nesting** %block, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2
  %7 = load %struct.nesting*, %struct.nesting** %block, align 8
  %tobool = icmp ne %struct.nesting* %7, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %8, i32 0, i32 4
  %block3 = bitcast %union.anon.3* %data to %struct.anon.6*
  %first_insn = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block3, i32 0, i32 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %first_insn, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx5 to i32*
  %10 = load i32, i32* %rtint, align 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtint8 = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %12 = load i32, i32* %rtint8, align 4
  %cmp9 = icmp slt i32 %10, %12
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %for.body
  br label %for.end

if.end.11:                                        ; preds = %for.body
  %13 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data12 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %block13 = bitcast %union.anon.3* %data12 to %struct.anon.6*
  %stack_level14 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block13, i32 0, i32 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %stack_level14, align 8
  %cmp15 = icmp ne %struct.rtx_def* %14, null
  br i1 %cmp15, label %if.then.16, label %if.end.20

if.then.16:                                       ; preds = %if.end.11
  %15 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data17 = getelementptr inbounds %struct.nesting, %struct.nesting* %15, i32 0, i32 4
  %block18 = bitcast %union.anon.3* %data17 to %struct.anon.6*
  %stack_level19 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block18, i32 0, i32 1
  %16 = load %struct.rtx_def*, %struct.rtx_def** %stack_level19, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %stack_level, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.16, %if.end.11
  %17 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data21 = getelementptr inbounds %struct.nesting, %struct.nesting* %17, i32 0, i32 4
  %block22 = bitcast %union.anon.3* %data21 to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block22, i32 0, i32 4
  %18 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  %cmp23 = icmp ne %union.tree_node* %18, null
  br i1 %cmp23, label %if.then.24, label %if.end.28

if.then.24:                                       ; preds = %if.end.20
  %19 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data25 = getelementptr inbounds %struct.nesting, %struct.nesting* %19, i32 0, i32 4
  %block26 = bitcast %union.anon.3* %data25 to %struct.anon.6*
  %cleanups27 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block26, i32 0, i32 4
  %20 = load %union.tree_node*, %union.tree_node** %cleanups27, align 8
  call void @expand_cleanups(%union.tree_node* %20, %union.tree_node* null, i32 1, i32 1)
  call void @do_pending_stack_adjust()
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.24, %if.end.20
  br label %for.inc

for.inc:                                          ; preds = %if.end.28
  %21 = load %struct.nesting*, %struct.nesting** %block, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %21, i32 0, i32 1
  %22 = load %struct.nesting*, %struct.nesting** %next, align 8
  store %struct.nesting* %22, %struct.nesting** %block, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.10, %for.cond
  %23 = load %struct.rtx_def*, %struct.rtx_def** %stack_level, align 8
  %tobool29 = icmp ne %struct.rtx_def* %23, null
  br i1 %tobool29, label %if.then.30, label %if.end.45

if.then.30:                                       ; preds = %for.end
  call void @clear_pending_stack_adjust()
  call void @do_pending_stack_adjust()
  %24 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %25 = load %struct.function*, %struct.function** @cfun, align 8
  %x_return_label = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 24
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x_return_label, align 8
  %cmp31 = icmp eq %struct.rtx_def* %24, %26
  br i1 %cmp31, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.30
  %27 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common32 = bitcast %union.tree_node* %28 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2
  %bf.load33 = load i32, i32* %code, align 8
  %bf.clear34 = and i32 %bf.load33, 255
  %cmp35 = icmp eq i32 %bf.clear34, 23
  br i1 %cmp35, label %land.lhs.true.36, label %if.else

land.lhs.true.36:                                 ; preds = %land.lhs.true
  %29 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common37 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 1
  %30 = load %union.tree_node*, %union.tree_node** %type38, align 8
  %type39 = bitcast %union.tree_node* %30 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type39, i32 0, i32 6
  %bf.load40 = load i32, i32* %no_force_blk_flag, align 4
  %bf.lshr = lshr i32 %bf.load40, 17
  %bf.clear41 = and i32 %bf.lshr, 1
  %tobool42 = icmp ne i32 %bf.clear41, 0
  br i1 %tobool42, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %land.lhs.true.36
  br label %if.end.44

if.else:                                          ; preds = %land.lhs.true.36, %land.lhs.true, %if.then.30
  %31 = load %struct.rtx_def*, %struct.rtx_def** %stack_level, align 8
  call void @emit_stack_restore(i32 0, %struct.rtx_def* %31, %struct.rtx_def* null)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.then.43
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %for.end
  %32 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %cmp46 = icmp ne %union.tree_node* %32, null
  br i1 %cmp46, label %land.lhs.true.47, label %if.end.54

land.lhs.true.47:                                 ; preds = %if.end.45
  %33 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %decl = bitcast %union.tree_node* %33 to %struct.tree_decl*
  %bit_field_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %34 = bitcast i48* %bit_field_flag to i64*
  %bf.load48 = load i64, i64* %34, align 8
  %bf.lshr49 = lshr i64 %bf.load48, 12
  %bf.clear50 = and i64 %bf.lshr49, 1
  %bf.cast = trunc i64 %bf.clear50 to i32
  %tobool51 = icmp ne i32 %bf.cast, 0
  br i1 %tobool51, label %if.then.52, label %if.end.54

if.then.52:                                       ; preds = %land.lhs.true.47
  %35 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %decl53 = bitcast %union.tree_node* %35 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl53, i32 0, i32 8
  %36 = load %union.tree_node*, %union.tree_node** %name, align 8
  %identifier = bitcast %union.tree_node* %36 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %37 = load i8*, i8** %str, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.21, i32 0, i32 0), i8* %37)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.52, %land.lhs.true.47, %if.end.45
  br label %if.end.65

if.else.55:                                       ; preds = %if.end
  %38 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %last_insn.addr, align 8
  %call = call i32 @expand_fixup(%union.tree_node* %38, %struct.rtx_def* %39, %struct.rtx_def* %40)
  %tobool56 = icmp ne i32 %call, 0
  br i1 %tobool56, label %if.end.64, label %if.then.57

if.then.57:                                       ; preds = %if.else.55
  %41 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %cmp58 = icmp ne %union.tree_node* %41, null
  br i1 %cmp58, label %if.then.59, label %if.end.63

if.then.59:                                       ; preds = %if.then.57
  %42 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %common60 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2
  %bf.load61 = load i32, i32* %addressable_flag, align 8
  %bf.clear62 = and i32 %bf.load61, -1025
  %bf.set = or i32 %bf.clear62, 1024
  store i32 %bf.set, i32* %addressable_flag, align 8
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.59, %if.then.57
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.else.55
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.end.54
  %43 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %43)
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_fixups(%struct.rtx_def* %first_insn) #0 {
entry:
  %first_insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %first_insn, %struct.rtx_def** %first_insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %first_insn.addr, align 8
  call void @fixup_gotos(%struct.nesting* null, %struct.rtx_def* null, %union.tree_node* null, %struct.rtx_def* %0, i32 0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @fixup_gotos(%struct.nesting* %thisblock, %struct.rtx_def* %stack_level, %union.tree_node* %cleanup_list, %struct.rtx_def* %first_insn, i32 %dont_jump_in) #0 {
entry:
  %thisblock.addr = alloca %struct.nesting*, align 8
  %stack_level.addr = alloca %struct.rtx_def*, align 8
  %cleanup_list.addr = alloca %union.tree_node*, align 8
  %first_insn.addr = alloca %struct.rtx_def*, align 8
  %dont_jump_in.addr = alloca i32, align 4
  %f = alloca %struct.goto_fixup*, align 8
  %prev = alloca %struct.goto_fixup*, align 8
  %cleanup_insns = alloca %struct.rtx_def*, align 8
  %lists = alloca %union.tree_node*, align 8
  %lists108 = alloca %union.tree_node*, align 8
  %cleanup_insns110 = alloca %struct.rtx_def*, align 8
  store %struct.nesting* %thisblock, %struct.nesting** %thisblock.addr, align 8
  store %struct.rtx_def* %stack_level, %struct.rtx_def** %stack_level.addr, align 8
  store %union.tree_node* %cleanup_list, %union.tree_node** %cleanup_list.addr, align 8
  store %struct.rtx_def* %first_insn, %struct.rtx_def** %first_insn.addr, align 8
  store i32 %dont_jump_in, i32* %dont_jump_in.addr, align 4
  store %struct.goto_fixup* null, %struct.goto_fixup** %prev, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_goto_fixup_chain = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 13
  %2 = load %struct.goto_fixup*, %struct.goto_fixup** %x_goto_fixup_chain, align 8
  store %struct.goto_fixup* %2, %struct.goto_fixup** %f, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.86, %entry
  %3 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %tobool = icmp ne %struct.goto_fixup* %3, null
  br i1 %tobool, label %for.body, label %for.end.88

for.body:                                         ; preds = %for.cond
  %4 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %before_jump = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %4, i32 0, i32 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %before_jump, align 8
  %cmp = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load %struct.goto_fixup*, %struct.goto_fixup** %prev, align 8
  %cmp1 = icmp ne %struct.goto_fixup* %6, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %7 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %next = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %7, i32 0, i32 0
  %8 = load %struct.goto_fixup*, %struct.goto_fixup** %next, align 8
  %9 = load %struct.goto_fixup*, %struct.goto_fixup** %prev, align 8
  %next3 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %9, i32 0, i32 0
  store %struct.goto_fixup* %8, %struct.goto_fixup** %next3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  br label %if.end.85

if.else:                                          ; preds = %for.body
  %10 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %target_rtl = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %10, i32 0, i32 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %target_rtl, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %cmp4 = icmp ne %struct.rtx_def* %12, null
  br i1 %cmp4, label %if.then.5, label %if.end.84

if.then.5:                                        ; preds = %if.else
  %13 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %target = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %13, i32 0, i32 2
  %14 = load %union.tree_node*, %union.tree_node** %target, align 8
  %cmp6 = icmp ne %union.tree_node* %14, null
  br i1 %cmp6, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %if.then.5
  %15 = load i32, i32* %dont_jump_in.addr, align 4
  %tobool7 = icmp ne i32 %15, 0
  br i1 %tobool7, label %land.lhs.true.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** %stack_level.addr, align 8
  %tobool8 = icmp ne %struct.rtx_def* %16, null
  br i1 %tobool8, label %land.lhs.true.11, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %cleanup_list.addr, align 8
  %tobool10 = icmp ne %union.tree_node* %17, null
  br i1 %tobool10, label %land.lhs.true.11, label %if.end.38

land.lhs.true.11:                                 ; preds = %lor.lhs.false.9, %lor.lhs.false, %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %first_insn.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %19 = load i32, i32* %rtint, align 4
  %20 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %target_rtl14 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %20, i32 0, i32 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target_rtl14, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtint17 = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %22 = load i32, i32* %rtint17, align 4
  %cmp18 = icmp slt i32 %19, %22
  br i1 %cmp18, label %land.lhs.true.19, label %if.end.38

land.lhs.true.19:                                 ; preds = %land.lhs.true.11
  %23 = load %struct.rtx_def*, %struct.rtx_def** %first_insn.addr, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtint22 = bitcast %union.rtunion_def* %arrayidx21 to i32*
  %24 = load i32, i32* %rtint22, align 4
  %25 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %before_jump23 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %25, i32 0, i32 1
  %26 = load %struct.rtx_def*, %struct.rtx_def** %before_jump23, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtint26 = bitcast %union.rtunion_def* %arrayidx25 to i32*
  %27 = load i32, i32* %rtint26, align 4
  %cmp27 = icmp sgt i32 %24, %27
  br i1 %cmp27, label %land.lhs.true.28, label %if.end.38

land.lhs.true.28:                                 ; preds = %land.lhs.true.19
  %28 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %target29 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %28, i32 0, i32 2
  %29 = load %union.tree_node*, %union.tree_node** %target29, align 8
  %decl = bitcast %union.tree_node* %29 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %30 = bitcast i48* %regdecl_flag to i64*
  %bf.load = load i64, i64* %30, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool30 = icmp ne i32 %bf.cast, 0
  br i1 %tobool30, label %if.end.38, label %if.then.31

if.then.31:                                       ; preds = %land.lhs.true.28
  %31 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %target32 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %31, i32 0, i32 2
  %32 = load %union.tree_node*, %union.tree_node** %target32, align 8
  call void (%union.tree_node*, i8*, ...) @error_with_decl(%union.tree_node* %32, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.17, i32 0, i32 0))
  %33 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %target33 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %33, i32 0, i32 2
  %34 = load %union.tree_node*, %union.tree_node** %target33, align 8
  %decl34 = bitcast %union.tree_node* %34 to %struct.tree_decl*
  %regdecl_flag35 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl34, i32 0, i32 5
  %35 = bitcast i48* %regdecl_flag35 to i64*
  %bf.load36 = load i64, i64* %35, align 8
  %bf.clear37 = and i64 %bf.load36, -1025
  %bf.set = or i64 %bf.clear37, 1024
  store i64 %bf.set, i64* %35, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.31, %land.lhs.true.28, %land.lhs.true.19, %land.lhs.true.11, %lor.lhs.false.9, %if.then.5
  call void @start_sequence()
  call void @pushlevel(i32 0)
  %36 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %context = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %36, i32 0, i32 3
  %37 = load %union.tree_node*, %union.tree_node** %context, align 8
  call void @set_block(%union.tree_node* %37)
  %38 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %cleanup_list_list = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %38, i32 0, i32 7
  %39 = load %union.tree_node*, %union.tree_node** %cleanup_list_list, align 8
  %tobool39 = icmp ne %union.tree_node* %39, null
  br i1 %tobool39, label %if.then.40, label %if.end.56

if.then.40:                                       ; preds = %if.end.38
  %40 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %cleanup_list_list41 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %40, i32 0, i32 7
  %41 = load %union.tree_node*, %union.tree_node** %cleanup_list_list41, align 8
  store %union.tree_node* %41, %union.tree_node** %lists, align 8
  br label %for.cond.42

for.cond.42:                                      ; preds = %for.inc, %if.then.40
  %42 = load %union.tree_node*, %union.tree_node** %lists, align 8
  %tobool43 = icmp ne %union.tree_node* %42, null
  br i1 %tobool43, label %for.body.44, label %for.end

for.body.44:                                      ; preds = %for.cond.42
  %43 = load %union.tree_node*, %union.tree_node** %lists, align 8
  %common = bitcast %union.tree_node* %43 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load45 = load i32, i32* %addressable_flag, align 8
  %bf.lshr46 = lshr i32 %bf.load45, 10
  %bf.clear47 = and i32 %bf.lshr46, 1
  %tobool48 = icmp ne i32 %bf.clear47, 0
  br i1 %tobool48, label %land.lhs.true.49, label %if.end.54

land.lhs.true.49:                                 ; preds = %for.body.44
  %44 = load %union.tree_node*, %union.tree_node** %lists, align 8
  %list = bitcast %union.tree_node* %44 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %45 = load %union.tree_node*, %union.tree_node** %value, align 8
  %cmp50 = icmp ne %union.tree_node* %45, null
  br i1 %cmp50, label %if.then.51, label %if.end.54

if.then.51:                                       ; preds = %land.lhs.true.49
  %46 = load %union.tree_node*, %union.tree_node** %lists, align 8
  %list52 = bitcast %union.tree_node* %46 to %struct.tree_list*
  %value53 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list52, i32 0, i32 2
  %47 = load %union.tree_node*, %union.tree_node** %value53, align 8
  call void @expand_cleanups(%union.tree_node* %47, %union.tree_node* null, i32 1, i32 1)
  call void @do_pending_stack_adjust()
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.51, %land.lhs.true.49, %for.body.44
  br label %for.inc

for.inc:                                          ; preds = %if.end.54
  %48 = load %union.tree_node*, %union.tree_node** %lists, align 8
  %common55 = bitcast %union.tree_node* %48 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 0
  %49 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %49, %union.tree_node** %lists, align 8
  br label %for.cond.42

for.end:                                          ; preds = %for.cond.42
  br label %if.end.56

if.end.56:                                        ; preds = %for.end, %if.end.38
  %50 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %stack_level57 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %50, i32 0, i32 6
  %51 = load %struct.rtx_def*, %struct.rtx_def** %stack_level57, align 8
  %tobool58 = icmp ne %struct.rtx_def* %51, null
  br i1 %tobool58, label %land.lhs.true.59, label %if.end.79

land.lhs.true.59:                                 ; preds = %if.end.56
  %52 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %target_rtl60 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %52, i32 0, i32 4
  %53 = load %struct.rtx_def*, %struct.rtx_def** %target_rtl60, align 8
  %54 = load %struct.function*, %struct.function** @cfun, align 8
  %x_return_label = getelementptr inbounds %struct.function, %struct.function* %54, i32 0, i32 24
  %55 = load %struct.rtx_def*, %struct.rtx_def** %x_return_label, align 8
  %cmp61 = icmp eq %struct.rtx_def* %53, %55
  br i1 %cmp61, label %land.lhs.true.62, label %if.then.76

land.lhs.true.62:                                 ; preds = %land.lhs.true.59
  %56 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common63 = bitcast %union.tree_node* %56 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 1
  %57 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common64 = bitcast %union.tree_node* %57 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2
  %bf.load65 = load i32, i32* %code, align 8
  %bf.clear66 = and i32 %bf.load65, 255
  %cmp67 = icmp eq i32 %bf.clear66, 23
  br i1 %cmp67, label %land.lhs.true.68, label %if.then.76

land.lhs.true.68:                                 ; preds = %land.lhs.true.62
  %58 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common69 = bitcast %union.tree_node* %58 to %struct.tree_common*
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 1
  %59 = load %union.tree_node*, %union.tree_node** %type70, align 8
  %type71 = bitcast %union.tree_node* %59 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type71, i32 0, i32 6
  %bf.load72 = load i32, i32* %no_force_blk_flag, align 4
  %bf.lshr73 = lshr i32 %bf.load72, 17
  %bf.clear74 = and i32 %bf.lshr73, 1
  %tobool75 = icmp ne i32 %bf.clear74, 0
  br i1 %tobool75, label %if.end.79, label %if.then.76

if.then.76:                                       ; preds = %land.lhs.true.68, %land.lhs.true.62, %land.lhs.true.59
  %60 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %stack_level77 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %60, i32 0, i32 6
  %61 = load %struct.rtx_def*, %struct.rtx_def** %stack_level77, align 8
  %62 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %before_jump78 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %62, i32 0, i32 1
  %63 = load %struct.rtx_def*, %struct.rtx_def** %before_jump78, align 8
  call void @emit_stack_restore(i32 0, %struct.rtx_def* %61, %struct.rtx_def* %63)
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.76, %land.lhs.true.68, %if.end.56
  %call = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call, %struct.rtx_def** %cleanup_insns, align 8
  %call80 = call %union.tree_node* @poplevel(i32 1, i32 0, i32 0)
  call void @end_sequence()
  %64 = load %struct.rtx_def*, %struct.rtx_def** %cleanup_insns, align 8
  %65 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %before_jump81 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %65, i32 0, i32 1
  %66 = load %struct.rtx_def*, %struct.rtx_def** %before_jump81, align 8
  %call82 = call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %64, %struct.rtx_def* %66)
  %67 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %before_jump83 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %67, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %before_jump83, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.79, %if.else
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.end
  br label %for.inc.86

for.inc.86:                                       ; preds = %if.end.85
  %68 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  store %struct.goto_fixup* %68, %struct.goto_fixup** %prev, align 8
  %69 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %next87 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %69, i32 0, i32 0
  %70 = load %struct.goto_fixup*, %struct.goto_fixup** %next87, align 8
  store %struct.goto_fixup* %70, %struct.goto_fixup** %f, align 8
  br label %for.cond

for.end.88:                                       ; preds = %for.cond
  store %struct.goto_fixup* null, %struct.goto_fixup** %prev, align 8
  %71 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt89 = getelementptr inbounds %struct.function, %struct.function* %71, i32 0, i32 1
  %72 = load %struct.stmt_status*, %struct.stmt_status** %stmt89, align 8
  %x_goto_fixup_chain90 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %72, i32 0, i32 13
  %73 = load %struct.goto_fixup*, %struct.goto_fixup** %x_goto_fixup_chain90, align 8
  store %struct.goto_fixup* %73, %struct.goto_fixup** %f, align 8
  br label %for.cond.91

for.cond.91:                                      ; preds = %for.inc.144, %for.end.88
  %74 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %tobool92 = icmp ne %struct.goto_fixup* %74, null
  br i1 %tobool92, label %for.body.93, label %for.end.146

for.body.93:                                      ; preds = %for.cond.91
  %75 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %before_jump94 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %75, i32 0, i32 1
  %76 = load %struct.rtx_def*, %struct.rtx_def** %before_jump94, align 8
  %cmp95 = icmp ne %struct.rtx_def* %76, null
  br i1 %cmp95, label %land.lhs.true.96, label %if.end.143

land.lhs.true.96:                                 ; preds = %for.body.93
  %77 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %target_rtl97 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %77, i32 0, i32 4
  %78 = load %struct.rtx_def*, %struct.rtx_def** %target_rtl97, align 8
  %fld98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i32 0, i64 1
  %rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtx100, align 8
  %cmp101 = icmp eq %struct.rtx_def* %79, null
  br i1 %cmp101, label %land.lhs.true.102, label %if.end.143

land.lhs.true.102:                                ; preds = %land.lhs.true.96
  %80 = load %struct.nesting*, %struct.nesting** %thisblock.addr, align 8
  %cmp103 = icmp ne %struct.nesting* %80, null
  br i1 %cmp103, label %land.lhs.true.104, label %if.end.143

land.lhs.true.104:                                ; preds = %land.lhs.true.102
  %81 = load %struct.nesting*, %struct.nesting** %thisblock.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %81, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %block_start_count = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 0
  %82 = load i32, i32* %block_start_count, align 4
  %83 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %block_start_count105 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %83, i32 0, i32 5
  %84 = load i32, i32* %block_start_count105, align 4
  %cmp106 = icmp sle i32 %82, %84
  br i1 %cmp106, label %if.then.107, label %if.end.143

if.then.107:                                      ; preds = %land.lhs.true.104
  %85 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %cleanup_list_list109 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %85, i32 0, i32 7
  %86 = load %union.tree_node*, %union.tree_node** %cleanup_list_list109, align 8
  store %union.tree_node* %86, %union.tree_node** %lists108, align 8
  br label %for.cond.111

for.cond.111:                                     ; preds = %for.inc.135, %if.then.107
  %87 = load %union.tree_node*, %union.tree_node** %lists108, align 8
  %tobool112 = icmp ne %union.tree_node* %87, null
  br i1 %tobool112, label %for.body.113, label %for.end.138

for.body.113:                                     ; preds = %for.cond.111
  %88 = load %union.tree_node*, %union.tree_node** %lists108, align 8
  %common114 = bitcast %union.tree_node* %88 to %struct.tree_common*
  %chain115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 0
  %89 = load %union.tree_node*, %union.tree_node** %chain115, align 8
  %90 = load %struct.nesting*, %struct.nesting** %thisblock.addr, align 8
  %data116 = getelementptr inbounds %struct.nesting, %struct.nesting* %90, i32 0, i32 4
  %block117 = bitcast %union.anon.3* %data116 to %struct.anon.6*
  %outer_cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block117, i32 0, i32 5
  %91 = load %union.tree_node*, %union.tree_node** %outer_cleanups, align 8
  %cmp118 = icmp eq %union.tree_node* %89, %91
  br i1 %cmp118, label %if.then.119, label %if.end.134

if.then.119:                                      ; preds = %for.body.113
  call void @start_sequence()
  call void @pushlevel(i32 0)
  %92 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %context120 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %92, i32 0, i32 3
  %93 = load %union.tree_node*, %union.tree_node** %context120, align 8
  call void @set_block(%union.tree_node* %93)
  %94 = load %union.tree_node*, %union.tree_node** %lists108, align 8
  %list121 = bitcast %union.tree_node* %94 to %struct.tree_list*
  %value122 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list121, i32 0, i32 2
  %95 = load %union.tree_node*, %union.tree_node** %value122, align 8
  call void @expand_cleanups(%union.tree_node* %95, %union.tree_node* null, i32 1, i32 1)
  call void @do_pending_stack_adjust()
  %call123 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call123, %struct.rtx_def** %cleanup_insns110, align 8
  %call124 = call %union.tree_node* @poplevel(i32 1, i32 0, i32 0)
  call void @end_sequence()
  %96 = load %struct.rtx_def*, %struct.rtx_def** %cleanup_insns110, align 8
  %cmp125 = icmp ne %struct.rtx_def* %96, null
  br i1 %cmp125, label %if.then.126, label %if.end.130

if.then.126:                                      ; preds = %if.then.119
  %97 = load %struct.rtx_def*, %struct.rtx_def** %cleanup_insns110, align 8
  %98 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %before_jump127 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %98, i32 0, i32 1
  %99 = load %struct.rtx_def*, %struct.rtx_def** %before_jump127, align 8
  %call128 = call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %97, %struct.rtx_def* %99)
  %100 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %before_jump129 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %100, i32 0, i32 1
  store %struct.rtx_def* %call128, %struct.rtx_def** %before_jump129, align 8
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.126, %if.then.119
  %101 = load %union.tree_node*, %union.tree_node** %lists108, align 8
  %common131 = bitcast %union.tree_node* %101 to %struct.tree_common*
  %chain132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 0
  %102 = load %union.tree_node*, %union.tree_node** %chain132, align 8
  %103 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %cleanup_list_list133 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %103, i32 0, i32 7
  store %union.tree_node* %102, %union.tree_node** %cleanup_list_list133, align 8
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.130, %for.body.113
  br label %for.inc.135

for.inc.135:                                      ; preds = %if.end.134
  %104 = load %union.tree_node*, %union.tree_node** %lists108, align 8
  %common136 = bitcast %union.tree_node* %104 to %struct.tree_common*
  %chain137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 0
  %105 = load %union.tree_node*, %union.tree_node** %chain137, align 8
  store %union.tree_node* %105, %union.tree_node** %lists108, align 8
  br label %for.cond.111

for.end.138:                                      ; preds = %for.cond.111
  %106 = load %struct.rtx_def*, %struct.rtx_def** %stack_level.addr, align 8
  %tobool139 = icmp ne %struct.rtx_def* %106, null
  br i1 %tobool139, label %if.then.140, label %if.end.142

if.then.140:                                      ; preds = %for.end.138
  %107 = load %struct.rtx_def*, %struct.rtx_def** %stack_level.addr, align 8
  %108 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %stack_level141 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %108, i32 0, i32 6
  store %struct.rtx_def* %107, %struct.rtx_def** %stack_level141, align 8
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.140, %for.end.138
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %land.lhs.true.104, %land.lhs.true.102, %land.lhs.true.96, %for.body.93
  br label %for.inc.144

for.inc.144:                                      ; preds = %if.end.143
  %109 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  store %struct.goto_fixup* %109, %struct.goto_fixup** %prev, align 8
  %110 = load %struct.goto_fixup*, %struct.goto_fixup** %f, align 8
  %next145 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %110, i32 0, i32 0
  %111 = load %struct.goto_fixup*, %struct.goto_fixup** %next145, align 8
  store %struct.goto_fixup* %111, %struct.goto_fixup** %f, align 8
  br label %for.cond.91

for.end.146:                                      ; preds = %for.cond.91
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_asm(%union.tree_node* %body) #0 {
entry:
  %body.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %body, %union.tree_node** %body.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 121
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  store %union.tree_node* %2, %union.tree_node** %body.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.tree_node*, %union.tree_node** %body.addr, align 8
  %string = bitcast %union.tree_node* %3 to %struct.tree_string*
  %pointer = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 3
  %4 = load i8*, i8** %pointer, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_s(i32 40, i32 0, i8* %4)
  %call1 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1
  %6 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %6, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #2

; Function Attrs: nounwind uwtable
define zeroext i1 @parse_output_constraint(i8** %constraint_p, i32 %operand_num, i32 %ninputs, i32 %noutputs, i8* %allows_mem, i8* %allows_reg, i8* %is_inout) #0 {
entry:
  %retval = alloca i1, align 1
  %constraint_p.addr = alloca i8**, align 8
  %operand_num.addr = alloca i32, align 4
  %ninputs.addr = alloca i32, align 4
  %noutputs.addr = alloca i32, align 4
  %allows_mem.addr = alloca i8*, align 8
  %allows_reg.addr = alloca i8*, align 8
  %is_inout.addr = alloca i8*, align 8
  %constraint = alloca i8*, align 8
  %p = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %c_len = alloca i64, align 8
  store i8** %constraint_p, i8*** %constraint_p.addr, align 8
  store i32 %operand_num, i32* %operand_num.addr, align 4
  store i32 %ninputs, i32* %ninputs.addr, align 4
  store i32 %noutputs, i32* %noutputs.addr, align 4
  store i8* %allows_mem, i8** %allows_mem.addr, align 8
  store i8* %allows_reg, i8** %allows_reg.addr, align 8
  store i8* %is_inout, i8** %is_inout.addr, align 8
  %0 = load i8**, i8*** %constraint_p.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %constraint, align 8
  %2 = load i8*, i8** %allows_mem.addr, align 8
  store i8 0, i8* %2, align 1
  %3 = load i8*, i8** %allows_reg.addr, align 8
  store i8 0, i8* %3, align 1
  %4 = load i8*, i8** %constraint, align 8
  %call = call i8* @strchr(i8* %4, i32 61) #7
  store i8* %call, i8** %p, align 8
  %5 = load i8*, i8** %p, align 8
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %constraint, align 8
  %call1 = call i8* @strchr(i8* %6, i32 43) #7
  store i8* %call1, i8** %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i8*, i8** %p, align 8
  %tobool2 = icmp ne i8* %7, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %8 = load i8*, i8** %p, align 8
  %9 = load i8, i8* %8, align 1
  %conv = sext i8 %9 to i32
  %cmp = icmp eq i32 %conv, 43
  %10 = load i8*, i8** %is_inout.addr, align 8
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %10, align 1
  %11 = load i8*, i8** %p, align 8
  %12 = load i8*, i8** %constraint, align 8
  %cmp6 = icmp ne i8* %11, %12
  br i1 %cmp6, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.4
  %13 = load i8*, i8** %is_inout.addr, align 8
  %tobool8 = icmp ne i8* %13, null
  br i1 %tobool8, label %if.then.9, label %if.end.21

if.then.9:                                        ; preds = %lor.lhs.false, %if.end.4
  %14 = load i8*, i8** %constraint, align 8
  %call10 = call i64 @strlen(i8* %14) #7
  store i64 %call10, i64* %c_len, align 8
  %15 = load i8*, i8** %p, align 8
  %16 = load i8*, i8** %constraint, align 8
  %cmp11 = icmp ne i8* %15, %16
  br i1 %cmp11, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %if.then.9
  %17 = load i8*, i8** %p, align 8
  %18 = load i8, i8* %17, align 1
  %conv14 = sext i8 %18 to i32
  %19 = load i32, i32* %operand_num.addr, align 4
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i32 0, i32 0), i32 %conv14, i32 %19)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.13, %if.then.9
  %20 = load i64, i64* %c_len, align 8
  %add = add i64 %20, 1
  %21 = alloca i8, i64 %add
  store i8* %21, i8** %buf, align 8
  %22 = load i8*, i8** %buf, align 8
  %23 = load i8*, i8** %constraint, align 8
  %call16 = call i8* @strcpy(i8* %22, i8* %23) #5
  %24 = load i8*, i8** %buf, align 8
  %arrayidx = getelementptr inbounds i8, i8* %24, i64 0
  %25 = load i8, i8* %arrayidx, align 1
  %26 = load i8*, i8** %p, align 8
  %27 = load i8*, i8** %constraint, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %26 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %27 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %28 = load i8*, i8** %buf, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %28, i64 %sub.ptr.sub
  store i8 %25, i8* %arrayidx17, align 1
  %29 = load i8*, i8** %buf, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %29, i64 0
  store i8 61, i8* %arrayidx18, align 1
  %30 = load i8*, i8** %buf, align 8
  %31 = load i64, i64* %c_len, align 8
  %conv19 = trunc i64 %31 to i32
  %call20 = call i8* @ggc_alloc_string(i8* %30, i32 %conv19)
  %32 = load i8**, i8*** %constraint_p.addr, align 8
  store i8* %call20, i8** %32, align 8
  %33 = load i8**, i8*** %constraint_p.addr, align 8
  %34 = load i8*, i8** %33, align 8
  store i8* %34, i8** %constraint, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.15, %lor.lhs.false
  %35 = load i8*, i8** %constraint, align 8
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %add.ptr, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.21
  %36 = load i8*, i8** %p, align 8
  %37 = load i8, i8* %36, align 1
  %tobool22 = icmp ne i8 %37, 0
  br i1 %tobool22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load i8*, i8** %p, align 8
  %39 = load i8, i8* %38, align 1
  %conv23 = sext i8 %39 to i32
  switch i32 %conv23, label %sw.default [
    i32 43, label %sw.bb
    i32 61, label %sw.bb
    i32 37, label %sw.bb.24
    i32 86, label %sw.bb.31
    i32 109, label %sw.bb.31
    i32 111, label %sw.bb.31
    i32 63, label %sw.bb.32
    i32 33, label %sw.bb.32
    i32 42, label %sw.bb.32
    i32 38, label %sw.bb.32
    i32 35, label %sw.bb.32
    i32 69, label %sw.bb.32
    i32 70, label %sw.bb.32
    i32 71, label %sw.bb.32
    i32 72, label %sw.bb.32
    i32 115, label %sw.bb.32
    i32 105, label %sw.bb.32
    i32 110, label %sw.bb.32
    i32 73, label %sw.bb.32
    i32 74, label %sw.bb.32
    i32 75, label %sw.bb.32
    i32 76, label %sw.bb.32
    i32 77, label %sw.bb.32
    i32 78, label %sw.bb.32
    i32 79, label %sw.bb.32
    i32 80, label %sw.bb.32
    i32 44, label %sw.bb.32
    i32 48, label %sw.bb.33
    i32 49, label %sw.bb.33
    i32 50, label %sw.bb.33
    i32 51, label %sw.bb.33
    i32 52, label %sw.bb.33
    i32 53, label %sw.bb.33
    i32 54, label %sw.bb.33
    i32 55, label %sw.bb.33
    i32 56, label %sw.bb.33
    i32 57, label %sw.bb.33
    i32 91, label %sw.bb.33
    i32 60, label %sw.bb.34
    i32 62, label %sw.bb.34
    i32 103, label %sw.bb.35
    i32 88, label %sw.bb.35
    i32 112, label %sw.bb.36
    i32 114, label %sw.bb.36
  ]

sw.bb:                                            ; preds = %for.body, %for.body
  call void (i8*, ...) @error(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

sw.bb.24:                                         ; preds = %for.body
  %40 = load i32, i32* %operand_num.addr, align 4
  %add25 = add nsw i32 %40, 1
  %41 = load i32, i32* %ninputs.addr, align 4
  %42 = load i32, i32* %noutputs.addr, align 4
  %add26 = add nsw i32 %41, %42
  %cmp27 = icmp eq i32 %add25, %add26
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.24
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.24
  br label %sw.epilog

sw.bb.31:                                         ; preds = %for.body, %for.body, %for.body
  %43 = load i8*, i8** %allows_mem.addr, align 8
  store i8 1, i8* %43, align 1
  br label %sw.epilog

sw.bb.32:                                         ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  br label %sw.epilog

sw.bb.33:                                         ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

sw.bb.34:                                         ; preds = %for.body, %for.body
  %44 = load i8*, i8** %allows_mem.addr, align 8
  store i8 1, i8* %44, align 1
  br label %sw.epilog

sw.bb.35:                                         ; preds = %for.body, %for.body
  %45 = load i8*, i8** %allows_reg.addr, align 8
  store i8 1, i8* %45, align 1
  %46 = load i8*, i8** %allows_mem.addr, align 8
  store i8 1, i8* %46, align 1
  br label %sw.epilog

sw.bb.36:                                         ; preds = %for.body, %for.body
  %47 = load i8*, i8** %allows_reg.addr, align 8
  store i8 1, i8* %47, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %48 = load i8*, i8** %p, align 8
  %49 = load i8, i8* %48, align 1
  %conv37 = sext i8 %49 to i32
  %and = and i32 %conv37, 255
  %idxprom = sext i32 %and to i64
  %arrayidx38 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i32 0, i64 %idxprom
  %50 = load i16, i16* %arrayidx38, align 2
  %conv39 = zext i16 %50 to i32
  %and40 = and i32 %conv39, 136
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %sw.default
  br label %sw.epilog

if.end.43:                                        ; preds = %sw.default
  %51 = load i8*, i8** %p, align 8
  %52 = load i8, i8* %51, align 1
  %conv44 = sext i8 %52 to i32
  %cmp45 = icmp eq i32 %conv44, 114
  br i1 %cmp45, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.43
  br label %cond.end.188

cond.false:                                       ; preds = %if.end.43
  %53 = load i8*, i8** %p, align 8
  %54 = load i8, i8* %53, align 1
  %conv47 = sext i8 %54 to i32
  %cmp48 = icmp eq i32 %conv47, 82
  br i1 %cmp48, label %cond.true.50, label %cond.false.51

cond.true.50:                                     ; preds = %cond.false
  br label %cond.end.186

cond.false.51:                                    ; preds = %cond.false
  %55 = load i8*, i8** %p, align 8
  %56 = load i8, i8* %55, align 1
  %conv52 = sext i8 %56 to i32
  %cmp53 = icmp eq i32 %conv52, 113
  br i1 %cmp53, label %cond.true.55, label %cond.false.58

cond.true.55:                                     ; preds = %cond.false.51
  %57 = load i32, i32* @target_flags, align 4
  %and56 = and i32 %57, 33554432
  %tobool57 = icmp ne i32 %and56, 0
  %cond = select i1 %tobool57, i32 12, i32 8
  br label %cond.end.184

cond.false.58:                                    ; preds = %cond.false.51
  %58 = load i8*, i8** %p, align 8
  %59 = load i8, i8* %58, align 1
  %conv59 = sext i8 %59 to i32
  %cmp60 = icmp eq i32 %conv59, 81
  br i1 %cmp60, label %cond.true.62, label %cond.false.63

cond.true.62:                                     ; preds = %cond.false.58
  br label %cond.end.182

cond.false.63:                                    ; preds = %cond.false.58
  %60 = load i8*, i8** %p, align 8
  %61 = load i8, i8* %60, align 1
  %conv64 = sext i8 %61 to i32
  %cmp65 = icmp eq i32 %conv64, 102
  br i1 %cmp65, label %cond.true.67, label %cond.false.73

cond.true.67:                                     ; preds = %cond.false.63
  %62 = load i32, i32* @target_flags, align 4
  %and68 = and i32 %62, 1
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true.67
  %63 = load i32, i32* @target_flags, align 4
  %and70 = and i32 %63, 32
  %tobool71 = icmp ne i32 %and70, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true.67
  %64 = phi i1 [ true, %cond.true.67 ], [ %tobool71, %lor.rhs ]
  %cond72 = select i1 %64, i32 15, i32 0
  br label %cond.end.180

cond.false.73:                                    ; preds = %cond.false.63
  %65 = load i8*, i8** %p, align 8
  %66 = load i8, i8* %65, align 1
  %conv74 = sext i8 %66 to i32
  %cmp75 = icmp eq i32 %conv74, 116
  br i1 %cmp75, label %cond.true.77, label %cond.false.85

cond.true.77:                                     ; preds = %cond.false.73
  %67 = load i32, i32* @target_flags, align 4
  %and78 = and i32 %67, 1
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %lor.end.83, label %lor.rhs.80

lor.rhs.80:                                       ; preds = %cond.true.77
  %68 = load i32, i32* @target_flags, align 4
  %and81 = and i32 %68, 32
  %tobool82 = icmp ne i32 %and81, 0
  br label %lor.end.83

lor.end.83:                                       ; preds = %lor.rhs.80, %cond.true.77
  %69 = phi i1 [ true, %cond.true.77 ], [ %tobool82, %lor.rhs.80 ]
  %cond84 = select i1 %69, i32 13, i32 0
  br label %cond.end.178

cond.false.85:                                    ; preds = %cond.false.73
  %70 = load i8*, i8** %p, align 8
  %71 = load i8, i8* %70, align 1
  %conv86 = sext i8 %71 to i32
  %cmp87 = icmp eq i32 %conv86, 117
  br i1 %cmp87, label %cond.true.89, label %cond.false.97

cond.true.89:                                     ; preds = %cond.false.85
  %72 = load i32, i32* @target_flags, align 4
  %and90 = and i32 %72, 1
  %tobool91 = icmp ne i32 %and90, 0
  br i1 %tobool91, label %lor.end.95, label %lor.rhs.92

lor.rhs.92:                                       ; preds = %cond.true.89
  %73 = load i32, i32* @target_flags, align 4
  %and93 = and i32 %73, 32
  %tobool94 = icmp ne i32 %and93, 0
  br label %lor.end.95

lor.end.95:                                       ; preds = %lor.rhs.92, %cond.true.89
  %74 = phi i1 [ true, %cond.true.89 ], [ %tobool94, %lor.rhs.92 ]
  %cond96 = select i1 %74, i32 14, i32 0
  br label %cond.end.176

cond.false.97:                                    ; preds = %cond.false.85
  %75 = load i8*, i8** %p, align 8
  %76 = load i8, i8* %75, align 1
  %conv98 = sext i8 %76 to i32
  %cmp99 = icmp eq i32 %conv98, 97
  br i1 %cmp99, label %cond.true.101, label %cond.false.102

cond.true.101:                                    ; preds = %cond.false.97
  br label %cond.end.174

cond.false.102:                                   ; preds = %cond.false.97
  %77 = load i8*, i8** %p, align 8
  %78 = load i8, i8* %77, align 1
  %conv103 = sext i8 %78 to i32
  %cmp104 = icmp eq i32 %conv103, 98
  br i1 %cmp104, label %cond.true.106, label %cond.false.107

cond.true.106:                                    ; preds = %cond.false.102
  br label %cond.end.172

cond.false.107:                                   ; preds = %cond.false.102
  %79 = load i8*, i8** %p, align 8
  %80 = load i8, i8* %79, align 1
  %conv108 = sext i8 %80 to i32
  %cmp109 = icmp eq i32 %conv108, 99
  br i1 %cmp109, label %cond.true.111, label %cond.false.112

cond.true.111:                                    ; preds = %cond.false.107
  br label %cond.end.170

cond.false.112:                                   ; preds = %cond.false.107
  %81 = load i8*, i8** %p, align 8
  %82 = load i8, i8* %81, align 1
  %conv113 = sext i8 %82 to i32
  %cmp114 = icmp eq i32 %conv113, 100
  br i1 %cmp114, label %cond.true.116, label %cond.false.117

cond.true.116:                                    ; preds = %cond.false.112
  br label %cond.end.168

cond.false.117:                                   ; preds = %cond.false.112
  %83 = load i8*, i8** %p, align 8
  %84 = load i8, i8* %83, align 1
  %conv118 = sext i8 %84 to i32
  %cmp119 = icmp eq i32 %conv118, 120
  br i1 %cmp119, label %cond.true.121, label %cond.false.126

cond.true.121:                                    ; preds = %cond.false.117
  %85 = load i32, i32* @target_flags, align 4
  %and122 = and i32 %85, 327680
  %cmp123 = icmp ne i32 %and122, 0
  %cond125 = select i1 %cmp123, i32 16, i32 0
  br label %cond.end.166

cond.false.126:                                   ; preds = %cond.false.117
  %86 = load i8*, i8** %p, align 8
  %87 = load i8, i8* %86, align 1
  %conv127 = sext i8 %87 to i32
  %cmp128 = icmp eq i32 %conv127, 89
  br i1 %cmp128, label %cond.true.130, label %cond.false.135

cond.true.130:                                    ; preds = %cond.false.126
  %88 = load i32, i32* @target_flags, align 4
  %and131 = and i32 %88, 262144
  %cmp132 = icmp ne i32 %and131, 0
  %cond134 = select i1 %cmp132, i32 16, i32 0
  br label %cond.end.164

cond.false.135:                                   ; preds = %cond.false.126
  %89 = load i8*, i8** %p, align 8
  %90 = load i8, i8* %89, align 1
  %conv136 = sext i8 %90 to i32
  %cmp137 = icmp eq i32 %conv136, 121
  br i1 %cmp137, label %cond.true.139, label %cond.false.144

cond.true.139:                                    ; preds = %cond.false.135
  %91 = load i32, i32* @target_flags, align 4
  %and140 = and i32 %91, 16384
  %cmp141 = icmp ne i32 %and140, 0
  %cond143 = select i1 %cmp141, i32 17, i32 0
  br label %cond.end.162

cond.false.144:                                   ; preds = %cond.false.135
  %92 = load i8*, i8** %p, align 8
  %93 = load i8, i8* %92, align 1
  %conv145 = sext i8 %93 to i32
  %cmp146 = icmp eq i32 %conv145, 65
  br i1 %cmp146, label %cond.true.148, label %cond.false.149

cond.true.148:                                    ; preds = %cond.false.144
  br label %cond.end.160

cond.false.149:                                   ; preds = %cond.false.144
  %94 = load i8*, i8** %p, align 8
  %95 = load i8, i8* %94, align 1
  %conv150 = sext i8 %95 to i32
  %cmp151 = icmp eq i32 %conv150, 68
  br i1 %cmp151, label %cond.true.153, label %cond.false.154

cond.true.153:                                    ; preds = %cond.false.149
  br label %cond.end

cond.false.154:                                   ; preds = %cond.false.149
  %96 = load i8*, i8** %p, align 8
  %97 = load i8, i8* %96, align 1
  %conv155 = sext i8 %97 to i32
  %cmp156 = icmp eq i32 %conv155, 83
  %cond158 = select i1 %cmp156, i32 5, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.154, %cond.true.153
  %cond159 = phi i32 [ 6, %cond.true.153 ], [ %cond158, %cond.false.154 ]
  br label %cond.end.160

cond.end.160:                                     ; preds = %cond.end, %cond.true.148
  %cond161 = phi i32 [ 7, %cond.true.148 ], [ %cond159, %cond.end ]
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.end.160, %cond.true.139
  %cond163 = phi i32 [ %cond143, %cond.true.139 ], [ %cond161, %cond.end.160 ]
  br label %cond.end.164

cond.end.164:                                     ; preds = %cond.end.162, %cond.true.130
  %cond165 = phi i32 [ %cond134, %cond.true.130 ], [ %cond163, %cond.end.162 ]
  br label %cond.end.166

cond.end.166:                                     ; preds = %cond.end.164, %cond.true.121
  %cond167 = phi i32 [ %cond125, %cond.true.121 ], [ %cond165, %cond.end.164 ]
  br label %cond.end.168

cond.end.168:                                     ; preds = %cond.end.166, %cond.true.116
  %cond169 = phi i32 [ 2, %cond.true.116 ], [ %cond167, %cond.end.166 ]
  br label %cond.end.170

cond.end.170:                                     ; preds = %cond.end.168, %cond.true.111
  %cond171 = phi i32 [ 3, %cond.true.111 ], [ %cond169, %cond.end.168 ]
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.end.170, %cond.true.106
  %cond173 = phi i32 [ 4, %cond.true.106 ], [ %cond171, %cond.end.170 ]
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.end.172, %cond.true.101
  %cond175 = phi i32 [ 1, %cond.true.101 ], [ %cond173, %cond.end.172 ]
  br label %cond.end.176

cond.end.176:                                     ; preds = %cond.end.174, %lor.end.95
  %cond177 = phi i32 [ %cond96, %lor.end.95 ], [ %cond175, %cond.end.174 ]
  br label %cond.end.178

cond.end.178:                                     ; preds = %cond.end.176, %lor.end.83
  %cond179 = phi i32 [ %cond84, %lor.end.83 ], [ %cond177, %cond.end.176 ]
  br label %cond.end.180

cond.end.180:                                     ; preds = %cond.end.178, %lor.end
  %cond181 = phi i32 [ %cond72, %lor.end ], [ %cond179, %cond.end.178 ]
  br label %cond.end.182

cond.end.182:                                     ; preds = %cond.end.180, %cond.true.62
  %cond183 = phi i32 [ 8, %cond.true.62 ], [ %cond181, %cond.end.180 ]
  br label %cond.end.184

cond.end.184:                                     ; preds = %cond.end.182, %cond.true.55
  %cond185 = phi i32 [ %cond, %cond.true.55 ], [ %cond183, %cond.end.182 ]
  br label %cond.end.186

cond.end.186:                                     ; preds = %cond.end.184, %cond.true.50
  %cond187 = phi i32 [ 11, %cond.true.50 ], [ %cond185, %cond.end.184 ]
  br label %cond.end.188

cond.end.188:                                     ; preds = %cond.end.186, %cond.true
  %cond189 = phi i32 [ 12, %cond.true ], [ %cond187, %cond.end.186 ]
  %cmp190 = icmp ne i32 %cond189, 0
  br i1 %cmp190, label %if.then.192, label %if.else

if.then.192:                                      ; preds = %cond.end.188
  %98 = load i8*, i8** %allows_reg.addr, align 8
  store i8 1, i8* %98, align 1
  br label %if.end.193

if.else:                                          ; preds = %cond.end.188
  %99 = load i8*, i8** %allows_reg.addr, align 8
  store i8 1, i8* %99, align 1
  %100 = load i8*, i8** %allows_mem.addr, align 8
  store i8 1, i8* %100, align 1
  br label %if.end.193

if.end.193:                                       ; preds = %if.else, %if.then.192
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.193, %if.then.42, %sw.bb.36, %sw.bb.35, %sw.bb.34, %sw.bb.32, %sw.bb.31, %if.end.30
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %101 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %101, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.bb.33, %if.then.29, %sw.bb, %if.then.3
  %102 = load i1, i1* %retval
  ret i1 %102
}

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #4

declare void @error(i8*, ...) #2

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

declare void @warning(i8*, ...) #2

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #1

declare i8* @ggc_alloc_string(i8*, i32) #2

; Function Attrs: nounwind uwtable
define void @expand_asm_operands(%union.tree_node* %string, %union.tree_node* %outputs, %union.tree_node* %inputs, %union.tree_node* %clobbers, i32 %vol, i8* %filename, i32 %line) #0 {
entry:
  %string.addr = alloca %union.tree_node*, align 8
  %outputs.addr = alloca %union.tree_node*, align 8
  %inputs.addr = alloca %union.tree_node*, align 8
  %clobbers.addr = alloca %union.tree_node*, align 8
  %vol.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %line.addr = alloca i32, align 4
  %argvec = alloca %struct.rtvec_def*, align 8
  %constraintvec = alloca %struct.rtvec_def*, align 8
  %body = alloca %struct.rtx_def*, align 8
  %ninputs = alloca i32, align 4
  %noutputs = alloca i32, align 4
  %ninout = alloca i32, align 4
  %nclobbers = alloca i32, align 4
  %tail = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %output_rtx = alloca %struct.rtx_def**, align 8
  %inout_opnum = alloca i32*, align 8
  %real_output_rtx = alloca %struct.rtx_def**, align 8
  %inout_mode = alloca i32*, align 8
  %constraints = alloca i8**, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %old_generating_concat_p = alloca i32, align 4
  %regname = alloca i8*, align 8
  %val = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %constraint = alloca i8*, align 8
  %is_inout = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %allows_mem = alloca i8, align 1
  %allows_reg114 = alloca i8, align 1
  %allows_mem115 = alloca i8, align 1
  %constraint116 = alloca i8*, align 8
  %val148 = alloca %union.tree_node*, align 8
  %type151 = alloca %union.tree_node*, align 8
  %is_inout154 = alloca i8, align 1
  %allows_reg155 = alloca i8, align 1
  %allows_mem156 = alloca i8, align 1
  %allows_reg345 = alloca i8, align 1
  %allows_mem346 = alloca i8, align 1
  %constraint347 = alloca i8*, align 8
  %val348 = alloca %union.tree_node*, align 8
  %type349 = alloca %union.tree_node*, align 8
  %op = alloca %struct.rtx_def*, align 8
  %qual_type = alloca %union.tree_node*, align 8
  %memloc = alloca %struct.rtx_def*, align 8
  %j = alloca i32, align 4
  %buffer = alloca [16 x i8], align 16
  %obody = alloca %struct.rtx_def*, align 8
  %num = alloca i32, align 4
  %regname680 = alloca i8*, align 8
  %j685 = alloca i32, align 4
  store %union.tree_node* %string, %union.tree_node** %string.addr, align 8
  store %union.tree_node* %outputs, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %inputs, %union.tree_node** %inputs.addr, align 8
  store %union.tree_node* %clobbers, %union.tree_node** %clobbers.addr, align 8
  store i32 %vol, i32* %vol.addr, align 4
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %line, i32* %line.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  %call = call i32 @list_length(%union.tree_node* %0)
  store i32 %call, i32* %ninputs, align 4
  %1 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  %call1 = call i32 @list_length(%union.tree_node* %1)
  store i32 %call1, i32* %noutputs, align 4
  %2 = load i32, i32* %noutputs, align 4
  %conv = sext i32 %2 to i64
  %mul = mul i64 %conv, 8
  %3 = alloca i8, i64 %mul
  %4 = bitcast i8* %3 to %struct.rtx_def**
  store %struct.rtx_def** %4, %struct.rtx_def*** %output_rtx, align 8
  %5 = load i32, i32* %noutputs, align 4
  %conv2 = sext i32 %5 to i64
  %mul3 = mul i64 %conv2, 4
  %6 = alloca i8, i64 %mul3
  %7 = bitcast i8* %6 to i32*
  store i32* %7, i32** %inout_opnum, align 8
  %8 = load i32, i32* %noutputs, align 4
  %conv4 = sext i32 %8 to i64
  %mul5 = mul i64 %conv4, 8
  %9 = alloca i8, i64 %mul5
  %10 = bitcast i8* %9 to %struct.rtx_def**
  store %struct.rtx_def** %10, %struct.rtx_def*** %real_output_rtx, align 8
  %11 = load i32, i32* %noutputs, align 4
  %conv6 = sext i32 %11 to i64
  %mul7 = mul i64 %conv6, 4
  %12 = alloca i8, i64 %mul7
  %13 = bitcast i8* %12 to i32*
  store i32* %13, i32** %inout_mode, align 8
  %14 = load i32, i32* %noutputs, align 4
  %15 = load i32, i32* %ninputs, align 4
  %add = add nsw i32 %14, %15
  %conv8 = sext i32 %add to i64
  %mul9 = mul i64 %conv8, 8
  %16 = alloca i8, i64 %mul9
  %17 = bitcast i8* %16 to i8**
  store i8** %17, i8*** %constraints, align 8
  %18 = load i32, i32* @generating_concat_p, align 4
  store i32 %18, i32* %old_generating_concat_p, align 4
  %19 = load i32, i32* %noutputs, align 4
  %cmp = icmp eq i32 %19, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %vol.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %20 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  %21 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  %call11 = call zeroext i1 @check_operand_nalternatives(%union.tree_node* %20, %union.tree_node* %21)
  br i1 %call11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end
  br label %return

if.end.13:                                        ; preds = %if.end
  %22 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  %23 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  %call14 = call zeroext i1 @check_unique_operand_names(%union.tree_node* %22, %union.tree_node* %23)
  br i1 %call14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.13
  br label %return

if.end.16:                                        ; preds = %if.end.13
  %24 = load %union.tree_node*, %union.tree_node** %string.addr, align 8
  %25 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  %26 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  %27 = load i8**, i8*** %constraints, align 8
  %call17 = call %union.tree_node* @resolve_operand_names(%union.tree_node* %24, %union.tree_node* %25, %union.tree_node* %26, i8** %27)
  store %union.tree_node* %call17, %union.tree_node** %string.addr, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.16
  %call18 = call %union.tree_node* @build_string(i32 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0))
  %28 = load %union.tree_node*, %union.tree_node** %clobbers.addr, align 8
  %call19 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call18, %union.tree_node* %28)
  store %union.tree_node* %call19, %union.tree_node** %clobbers.addr, align 8
  %call20 = call %union.tree_node* @build_string(i32 4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0))
  %29 = load %union.tree_node*, %union.tree_node** %clobbers.addr, align 8
  %call21 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call20, %union.tree_node* %29)
  store %union.tree_node* %call21, %union.tree_node** %clobbers.addr, align 8
  %call22 = call %union.tree_node* @build_string(i32 7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0))
  %30 = load %union.tree_node*, %union.tree_node** %clobbers.addr, align 8
  %call23 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call22, %union.tree_node* %30)
  store %union.tree_node* %call23, %union.tree_node** %clobbers.addr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  store i32 0, i32* %nclobbers, align 4
  %31 = load %union.tree_node*, %union.tree_node** %clobbers.addr, align 8
  store %union.tree_node* %31, %union.tree_node** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %32 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %tobool = icmp ne %union.tree_node* %32, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %33 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list = bitcast %union.tree_node* %33 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %34 = load %union.tree_node*, %union.tree_node** %value, align 8
  %string24 = bitcast %union.tree_node* %34 to %struct.tree_string*
  %pointer = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string24, i32 0, i32 3
  %35 = load i8*, i8** %pointer, align 8
  store i8* %35, i8** %regname, align 8
  %36 = load i8*, i8** %regname, align 8
  %call25 = call i32 @decode_reg_name(i8* %36)
  store i32 %call25, i32* %i, align 4
  %37 = load i32, i32* %i, align 4
  %cmp26 = icmp sge i32 %37, 0
  br i1 %cmp26, label %if.then.30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %38 = load i32, i32* %i, align 4
  %cmp28 = icmp eq i32 %38, -4
  br i1 %cmp28, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %lor.lhs.false, %for.body
  %39 = load i32, i32* %nclobbers, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %nclobbers, align 4
  br label %if.end.35

if.else:                                          ; preds = %lor.lhs.false
  %40 = load i32, i32* %i, align 4
  %cmp31 = icmp eq i32 %40, -2
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.else
  %41 = load i8*, i8** %regname, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i32 0, i32 0), i8* %41)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.else
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.30
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %42 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %43 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %43, %union.tree_node** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %44 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %44, i32 0, i32 1
  %45 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %45, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  store i32 0, i32* %ninout, align 4
  store i32 0, i32* %i, align 4
  %46 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %46, %union.tree_node** %tail, align 8
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.100, %for.end
  %47 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %tobool37 = icmp ne %union.tree_node* %47, null
  br i1 %tobool37, label %for.body.38, label %for.end.104

for.body.38:                                      ; preds = %for.cond.36
  %48 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list39 = bitcast %union.tree_node* %48 to %struct.tree_list*
  %value40 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list39, i32 0, i32 2
  %49 = load %union.tree_node*, %union.tree_node** %value40, align 8
  store %union.tree_node* %49, %union.tree_node** %val, align 8
  %50 = load %union.tree_node*, %union.tree_node** %val, align 8
  %common41 = bitcast %union.tree_node* %50 to %struct.tree_common*
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 1
  %51 = load %union.tree_node*, %union.tree_node** %type42, align 8
  store %union.tree_node* %51, %union.tree_node** %type, align 8
  %52 = load %union.tree_node*, %union.tree_node** %type, align 8
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp43 = icmp eq %union.tree_node* %52, %53
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %for.body.38
  br label %return

if.end.46:                                        ; preds = %for.body.38
  %54 = load i32, i32* %i, align 4
  %idxprom = sext i32 %54 to i64
  %55 = load i8**, i8*** %constraints, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %55, i64 %idxprom
  %56 = load i8*, i8** %arrayidx, align 8
  store i8* %56, i8** %constraint, align 8
  %57 = load i32, i32* %i, align 4
  %58 = load i32, i32* %ninputs, align 4
  %59 = load i32, i32* %noutputs, align 4
  %call47 = call zeroext i1 @parse_output_constraint(i8** %constraint, i32 %57, i32 %58, i32 %59, i8* %allows_mem, i8* %allows_reg, i8* %is_inout)
  br i1 %call47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.end.46
  br label %return

if.end.49:                                        ; preds = %if.end.46
  %60 = load i8, i8* %allows_reg, align 1
  %tobool50 = trunc i8 %60 to i1
  br i1 %tobool50, label %if.end.95, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.49
  %61 = load i8, i8* %allows_mem, align 1
  %tobool51 = trunc i8 %61 to i1
  br i1 %tobool51, label %if.then.93, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %land.lhs.true
  %62 = load i8, i8* %is_inout, align 1
  %tobool54 = trunc i8 %62 to i1
  br i1 %tobool54, label %if.then.93, label %lor.lhs.false.56

lor.lhs.false.56:                                 ; preds = %lor.lhs.false.53
  %63 = load %union.tree_node*, %union.tree_node** %val, align 8
  %common57 = bitcast %union.tree_node* %63 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom58 = sext i32 %bf.clear to i64
  %arrayidx59 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom58
  %64 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %64 to i32
  %cmp61 = icmp eq i32 %conv60, 100
  br i1 %cmp61, label %land.lhs.true.63, label %if.end.95

land.lhs.true.63:                                 ; preds = %lor.lhs.false.56
  %65 = load %union.tree_node*, %union.tree_node** %val, align 8
  %decl = bitcast %union.tree_node* %65 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool64 = icmp ne %struct.rtx_def* %66, null
  br i1 %tobool64, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.63
  %67 = load %union.tree_node*, %union.tree_node** %val, align 8
  %decl65 = bitcast %union.tree_node* %67 to %struct.tree_decl*
  %rtl66 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl65, i32 0, i32 17
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtl66, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.63
  %69 = load %union.tree_node*, %union.tree_node** %val, align 8
  call void @make_decl_rtl(%union.tree_node* %69, i8* null)
  %70 = load %union.tree_node*, %union.tree_node** %val, align 8
  %decl67 = bitcast %union.tree_node* %70 to %struct.tree_decl*
  %rtl68 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl67, i32 0, i32 17
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtl68, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %68, %cond.true ], [ %71, %cond.false ]
  %72 = bitcast %struct.rtx_def* %cond to i32*
  %bf.load69 = load i32, i32* %72, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 61
  br i1 %cmp71, label %land.lhs.true.73, label %if.end.95

land.lhs.true.73:                                 ; preds = %cond.end
  %73 = load %union.tree_node*, %union.tree_node** %val, align 8
  %decl74 = bitcast %union.tree_node* %73 to %struct.tree_decl*
  %rtl75 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl74, i32 0, i32 17
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtl75, align 8
  %tobool76 = icmp ne %struct.rtx_def* %74, null
  br i1 %tobool76, label %cond.true.77, label %cond.false.80

cond.true.77:                                     ; preds = %land.lhs.true.73
  %75 = load %union.tree_node*, %union.tree_node** %val, align 8
  %decl78 = bitcast %union.tree_node* %75 to %struct.tree_decl*
  %rtl79 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl78, i32 0, i32 17
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtl79, align 8
  br label %cond.end.83

cond.false.80:                                    ; preds = %land.lhs.true.73
  %77 = load %union.tree_node*, %union.tree_node** %val, align 8
  call void @make_decl_rtl(%union.tree_node* %77, i8* null)
  %78 = load %union.tree_node*, %union.tree_node** %val, align 8
  %decl81 = bitcast %union.tree_node* %78 to %struct.tree_decl*
  %rtl82 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl81, i32 0, i32 17
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtl82, align 8
  br label %cond.end.83

cond.end.83:                                      ; preds = %cond.false.80, %cond.true.77
  %cond84 = phi %struct.rtx_def* [ %76, %cond.true.77 ], [ %79, %cond.false.80 ]
  %80 = bitcast %struct.rtx_def* %cond84 to i32*
  %bf.load85 = load i32, i32* %80, align 8
  %bf.lshr = lshr i32 %bf.load85, 16
  %bf.clear86 = and i32 %bf.lshr, 255
  %81 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type87 = bitcast %union.tree_node* %81 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type87, i32 0, i32 6
  %bf.load88 = load i32, i32* %mode, align 4
  %bf.lshr89 = lshr i32 %bf.load88, 9
  %bf.clear90 = and i32 %bf.lshr89, 127
  %cmp91 = icmp ne i32 %bf.clear86, %bf.clear90
  br i1 %cmp91, label %if.then.93, label %if.end.95

if.then.93:                                       ; preds = %cond.end.83, %lor.lhs.false.53, %land.lhs.true
  %82 = load %union.tree_node*, %union.tree_node** %val, align 8
  %call94 = call i32 @mark_addressable(%union.tree_node* %82)
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.93, %cond.end.83, %cond.end, %lor.lhs.false.56, %if.end.49
  %83 = load i8, i8* %is_inout, align 1
  %tobool96 = trunc i8 %83 to i1
  br i1 %tobool96, label %if.then.97, label %if.end.99

if.then.97:                                       ; preds = %if.end.95
  %84 = load i32, i32* %ninout, align 4
  %inc98 = add nsw i32 %84, 1
  store i32 %inc98, i32* %ninout, align 4
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.97, %if.end.95
  br label %for.inc.100

for.inc.100:                                      ; preds = %if.end.99
  %85 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common101 = bitcast %union.tree_node* %85 to %struct.tree_common*
  %chain102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 0
  %86 = load %union.tree_node*, %union.tree_node** %chain102, align 8
  store %union.tree_node* %86, %union.tree_node** %tail, align 8
  %87 = load i32, i32* %i, align 4
  %inc103 = add nsw i32 %87, 1
  store i32 %inc103, i32* %i, align 4
  br label %for.cond.36

for.end.104:                                      ; preds = %for.cond.36
  %88 = load i32, i32* %ninout, align 4
  %89 = load i32, i32* %ninputs, align 4
  %add105 = add nsw i32 %89, %88
  store i32 %add105, i32* %ninputs, align 4
  %90 = load i32, i32* %ninputs, align 4
  %91 = load i32, i32* %noutputs, align 4
  %add106 = add nsw i32 %90, %91
  %cmp107 = icmp sgt i32 %add106, 30
  br i1 %cmp107, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %for.end.104
  call void (i8*, ...) @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i32 0, i32 0), i32 30)
  br label %return

if.end.110:                                       ; preds = %for.end.104
  store i32 0, i32* %i, align 4
  %92 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  store %union.tree_node* %92, %union.tree_node** %tail, align 8
  br label %for.cond.111

for.cond.111:                                     ; preds = %for.inc.140, %if.end.110
  %93 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %tobool112 = icmp ne %union.tree_node* %93, null
  br i1 %tobool112, label %for.body.113, label %for.end.144

for.body.113:                                     ; preds = %for.cond.111
  %94 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list117 = bitcast %union.tree_node* %94 to %struct.tree_list*
  %value118 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list117, i32 0, i32 2
  %95 = load %union.tree_node*, %union.tree_node** %value118, align 8
  %common119 = bitcast %union.tree_node* %95 to %struct.tree_common*
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 1
  %96 = load %union.tree_node*, %union.tree_node** %type120, align 8
  %97 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp121 = icmp eq %union.tree_node* %96, %97
  br i1 %cmp121, label %if.then.123, label %if.end.124

if.then.123:                                      ; preds = %for.body.113
  br label %return

if.end.124:                                       ; preds = %for.body.113
  %98 = load i32, i32* %i, align 4
  %99 = load i32, i32* %noutputs, align 4
  %add125 = add nsw i32 %98, %99
  %idxprom126 = sext i32 %add125 to i64
  %100 = load i8**, i8*** %constraints, align 8
  %arrayidx127 = getelementptr inbounds i8*, i8** %100, i64 %idxprom126
  %101 = load i8*, i8** %arrayidx127, align 8
  store i8* %101, i8** %constraint116, align 8
  %102 = load i32, i32* %i, align 4
  %103 = load i32, i32* %ninputs, align 4
  %104 = load i32, i32* %noutputs, align 4
  %105 = load i32, i32* %ninout, align 4
  %106 = load i8**, i8*** %constraints, align 8
  %call128 = call zeroext i1 @parse_input_constraint(i8** %constraint116, i32 %102, i32 %103, i32 %104, i32 %105, i8** %106, i8* %allows_mem115, i8* %allows_reg114)
  br i1 %call128, label %if.end.130, label %if.then.129

if.then.129:                                      ; preds = %if.end.124
  br label %return

if.end.130:                                       ; preds = %if.end.124
  %107 = load i8, i8* %allows_reg114, align 1
  %tobool131 = trunc i8 %107 to i1
  br i1 %tobool131, label %if.end.139, label %land.lhs.true.132

land.lhs.true.132:                                ; preds = %if.end.130
  %108 = load i8, i8* %allows_mem115, align 1
  %tobool133 = trunc i8 %108 to i1
  br i1 %tobool133, label %if.then.135, label %if.end.139

if.then.135:                                      ; preds = %land.lhs.true.132
  %109 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list136 = bitcast %union.tree_node* %109 to %struct.tree_list*
  %value137 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list136, i32 0, i32 2
  %110 = load %union.tree_node*, %union.tree_node** %value137, align 8
  %call138 = call i32 @mark_addressable(%union.tree_node* %110)
  br label %if.end.139

if.end.139:                                       ; preds = %if.then.135, %land.lhs.true.132, %if.end.130
  br label %for.inc.140

for.inc.140:                                      ; preds = %if.end.139
  %111 = load i32, i32* %i, align 4
  %inc141 = add nsw i32 %111, 1
  store i32 %inc141, i32* %i, align 4
  %112 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common142 = bitcast %union.tree_node* %112 to %struct.tree_common*
  %chain143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 0
  %113 = load %union.tree_node*, %union.tree_node** %chain143, align 8
  store %union.tree_node* %113, %union.tree_node** %tail, align 8
  br label %for.cond.111

for.end.144:                                      ; preds = %for.cond.111
  store i32 0, i32* %ninout, align 4
  store i32 0, i32* %i, align 4
  %114 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %114, %union.tree_node** %tail, align 8
  br label %for.cond.145

for.cond.145:                                     ; preds = %for.inc.320, %for.end.144
  %115 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %tobool146 = icmp ne %union.tree_node* %115, null
  br i1 %tobool146, label %for.body.147, label %for.end.324

for.body.147:                                     ; preds = %for.cond.145
  %116 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list149 = bitcast %union.tree_node* %116 to %struct.tree_list*
  %value150 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list149, i32 0, i32 2
  %117 = load %union.tree_node*, %union.tree_node** %value150, align 8
  store %union.tree_node* %117, %union.tree_node** %val148, align 8
  %118 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %common152 = bitcast %union.tree_node* %118 to %struct.tree_common*
  %type153 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common152, i32 0, i32 1
  %119 = load %union.tree_node*, %union.tree_node** %type153, align 8
  store %union.tree_node* %119, %union.tree_node** %type151, align 8
  %120 = load i32, i32* %i, align 4
  %idxprom157 = sext i32 %120 to i64
  %121 = load i8**, i8*** %constraints, align 8
  %arrayidx158 = getelementptr inbounds i8*, i8** %121, i64 %idxprom157
  %122 = load i32, i32* %i, align 4
  %123 = load i32, i32* %ninputs, align 4
  %124 = load i32, i32* %noutputs, align 4
  %call159 = call zeroext i1 @parse_output_constraint(i8** %arrayidx158, i32 %122, i32 %123, i32 %124, i8* %allows_mem156, i8* %allows_reg155, i8* %is_inout154)
  br i1 %call159, label %if.end.161, label %if.then.160

if.then.160:                                      ; preds = %for.body.147
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1726, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.expand_asm_operands, i32 0, i32 0)) #6
  unreachable

if.end.161:                                       ; preds = %for.body.147
  store i32 0, i32* @generating_concat_p, align 4
  %125 = load i32, i32* %i, align 4
  %idxprom162 = sext i32 %125 to i64
  %126 = load %struct.rtx_def**, %struct.rtx_def*** %real_output_rtx, align 8
  %arrayidx163 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %126, i64 %idxprom162
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx163, align 8
  %127 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %common164 = bitcast %union.tree_node* %127 to %struct.tree_common*
  %code165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 2
  %bf.load166 = load i32, i32* %code165, align 8
  %bf.clear167 = and i32 %bf.load166, 255
  %cmp168 = icmp eq i32 %bf.clear167, 41
  br i1 %cmp168, label %land.lhs.true.170, label %lor.lhs.false.173

land.lhs.true.170:                                ; preds = %if.end.161
  %128 = load i8, i8* %allows_mem156, align 1
  %tobool171 = trunc i8 %128 to i1
  br i1 %tobool171, label %if.then.245, label %lor.lhs.false.173

lor.lhs.false.173:                                ; preds = %land.lhs.true.170, %if.end.161
  %129 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %common174 = bitcast %union.tree_node* %129 to %struct.tree_common*
  %code175 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common174, i32 0, i32 2
  %bf.load176 = load i32, i32* %code175, align 8
  %bf.clear177 = and i32 %bf.load176, 255
  %idxprom178 = sext i32 %bf.clear177 to i64
  %arrayidx179 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom178
  %130 = load i8, i8* %arrayidx179, align 1
  %conv180 = sext i8 %130 to i32
  %cmp181 = icmp eq i32 %conv180, 100
  br i1 %cmp181, label %land.lhs.true.183, label %lor.lhs.false.240

land.lhs.true.183:                                ; preds = %lor.lhs.false.173
  %131 = load i8, i8* %allows_mem156, align 1
  %tobool184 = trunc i8 %131 to i1
  br i1 %tobool184, label %land.lhs.true.202, label %lor.lhs.false.186

lor.lhs.false.186:                                ; preds = %land.lhs.true.183
  %132 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl187 = bitcast %union.tree_node* %132 to %struct.tree_decl*
  %rtl188 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl187, i32 0, i32 17
  %133 = load %struct.rtx_def*, %struct.rtx_def** %rtl188, align 8
  %tobool189 = icmp ne %struct.rtx_def* %133, null
  br i1 %tobool189, label %cond.true.190, label %cond.false.193

cond.true.190:                                    ; preds = %lor.lhs.false.186
  %134 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl191 = bitcast %union.tree_node* %134 to %struct.tree_decl*
  %rtl192 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl191, i32 0, i32 17
  %135 = load %struct.rtx_def*, %struct.rtx_def** %rtl192, align 8
  br label %cond.end.196

cond.false.193:                                   ; preds = %lor.lhs.false.186
  %136 = load %union.tree_node*, %union.tree_node** %val148, align 8
  call void @make_decl_rtl(%union.tree_node* %136, i8* null)
  %137 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl194 = bitcast %union.tree_node* %137 to %struct.tree_decl*
  %rtl195 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl194, i32 0, i32 17
  %138 = load %struct.rtx_def*, %struct.rtx_def** %rtl195, align 8
  br label %cond.end.196

cond.end.196:                                     ; preds = %cond.false.193, %cond.true.190
  %cond197 = phi %struct.rtx_def* [ %135, %cond.true.190 ], [ %138, %cond.false.193 ]
  %139 = bitcast %struct.rtx_def* %cond197 to i32*
  %bf.load198 = load i32, i32* %139, align 8
  %bf.clear199 = and i32 %bf.load198, 65535
  %cmp200 = icmp eq i32 %bf.clear199, 61
  br i1 %cmp200, label %land.lhs.true.202, label %lor.lhs.false.240

land.lhs.true.202:                                ; preds = %cond.end.196, %land.lhs.true.183
  %140 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl203 = bitcast %union.tree_node* %140 to %struct.tree_decl*
  %rtl204 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl203, i32 0, i32 17
  %141 = load %struct.rtx_def*, %struct.rtx_def** %rtl204, align 8
  %tobool205 = icmp ne %struct.rtx_def* %141, null
  br i1 %tobool205, label %cond.true.206, label %cond.false.209

cond.true.206:                                    ; preds = %land.lhs.true.202
  %142 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl207 = bitcast %union.tree_node* %142 to %struct.tree_decl*
  %rtl208 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl207, i32 0, i32 17
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rtl208, align 8
  br label %cond.end.212

cond.false.209:                                   ; preds = %land.lhs.true.202
  %144 = load %union.tree_node*, %union.tree_node** %val148, align 8
  call void @make_decl_rtl(%union.tree_node* %144, i8* null)
  %145 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl210 = bitcast %union.tree_node* %145 to %struct.tree_decl*
  %rtl211 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl210, i32 0, i32 17
  %146 = load %struct.rtx_def*, %struct.rtx_def** %rtl211, align 8
  br label %cond.end.212

cond.end.212:                                     ; preds = %cond.false.209, %cond.true.206
  %cond213 = phi %struct.rtx_def* [ %143, %cond.true.206 ], [ %146, %cond.false.209 ]
  %147 = bitcast %struct.rtx_def* %cond213 to i32*
  %bf.load214 = load i32, i32* %147, align 8
  %bf.clear215 = and i32 %bf.load214, 65535
  %cmp216 = icmp eq i32 %bf.clear215, 61
  br i1 %cmp216, label %land.lhs.true.218, label %if.then.245

land.lhs.true.218:                                ; preds = %cond.end.212
  %148 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl219 = bitcast %union.tree_node* %148 to %struct.tree_decl*
  %rtl220 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl219, i32 0, i32 17
  %149 = load %struct.rtx_def*, %struct.rtx_def** %rtl220, align 8
  %tobool221 = icmp ne %struct.rtx_def* %149, null
  br i1 %tobool221, label %cond.true.222, label %cond.false.225

cond.true.222:                                    ; preds = %land.lhs.true.218
  %150 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl223 = bitcast %union.tree_node* %150 to %struct.tree_decl*
  %rtl224 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl223, i32 0, i32 17
  %151 = load %struct.rtx_def*, %struct.rtx_def** %rtl224, align 8
  br label %cond.end.228

cond.false.225:                                   ; preds = %land.lhs.true.218
  %152 = load %union.tree_node*, %union.tree_node** %val148, align 8
  call void @make_decl_rtl(%union.tree_node* %152, i8* null)
  %153 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %decl226 = bitcast %union.tree_node* %153 to %struct.tree_decl*
  %rtl227 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl226, i32 0, i32 17
  %154 = load %struct.rtx_def*, %struct.rtx_def** %rtl227, align 8
  br label %cond.end.228

cond.end.228:                                     ; preds = %cond.false.225, %cond.true.222
  %cond229 = phi %struct.rtx_def* [ %151, %cond.true.222 ], [ %154, %cond.false.225 ]
  %155 = bitcast %struct.rtx_def* %cond229 to i32*
  %bf.load230 = load i32, i32* %155, align 8
  %bf.lshr231 = lshr i32 %bf.load230, 16
  %bf.clear232 = and i32 %bf.lshr231, 255
  %156 = load %union.tree_node*, %union.tree_node** %type151, align 8
  %type233 = bitcast %union.tree_node* %156 to %struct.tree_type*
  %mode234 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type233, i32 0, i32 6
  %bf.load235 = load i32, i32* %mode234, align 4
  %bf.lshr236 = lshr i32 %bf.load235, 9
  %bf.clear237 = and i32 %bf.lshr236, 127
  %cmp238 = icmp ne i32 %bf.clear232, %bf.clear237
  br i1 %cmp238, label %lor.lhs.false.240, label %if.then.245

lor.lhs.false.240:                                ; preds = %cond.end.228, %cond.end.196, %lor.lhs.false.173
  %157 = load i8, i8* %allows_reg155, align 1
  %tobool241 = trunc i8 %157 to i1
  br i1 %tobool241, label %lor.lhs.false.242, label %if.then.245

lor.lhs.false.242:                                ; preds = %lor.lhs.false.240
  %158 = load i8, i8* %is_inout154, align 1
  %tobool243 = trunc i8 %158 to i1
  br i1 %tobool243, label %if.then.245, label %if.else.297

if.then.245:                                      ; preds = %lor.lhs.false.242, %lor.lhs.false.240, %cond.end.228, %cond.end.212, %land.lhs.true.170
  %159 = load %union.tree_node*, %union.tree_node** %val148, align 8
  %call246 = call %struct.rtx_def* @expand_expr(%union.tree_node* %159, %struct.rtx_def* null, i32 0, i32 4)
  %160 = load i32, i32* %i, align 4
  %idxprom247 = sext i32 %160 to i64
  %161 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx248 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %161, i64 %idxprom247
  store %struct.rtx_def* %call246, %struct.rtx_def** %arrayidx248, align 8
  %162 = load i8, i8* %allows_reg155, align 1
  %tobool249 = trunc i8 %162 to i1
  br i1 %tobool249, label %if.end.258, label %land.lhs.true.250

land.lhs.true.250:                                ; preds = %if.then.245
  %163 = load i32, i32* %i, align 4
  %idxprom251 = sext i32 %163 to i64
  %164 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx252 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %164, i64 %idxprom251
  %165 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx252, align 8
  %166 = bitcast %struct.rtx_def* %165 to i32*
  %bf.load253 = load i32, i32* %166, align 8
  %bf.clear254 = and i32 %bf.load253, 65535
  %cmp255 = icmp ne i32 %bf.clear254, 66
  br i1 %cmp255, label %if.then.257, label %if.end.258

if.then.257:                                      ; preds = %land.lhs.true.250
  %167 = load i32, i32* %i, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i32 0, i32 0), i32 %167)
  br label %if.end.258

if.end.258:                                       ; preds = %if.then.257, %land.lhs.true.250, %if.then.245
  %168 = load i8, i8* %allows_mem156, align 1
  %tobool259 = trunc i8 %168 to i1
  br i1 %tobool259, label %lor.lhs.false.267, label %land.lhs.true.260

land.lhs.true.260:                                ; preds = %if.end.258
  %169 = load i32, i32* %i, align 4
  %idxprom261 = sext i32 %169 to i64
  %170 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx262 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %170, i64 %idxprom261
  %171 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx262, align 8
  %172 = bitcast %struct.rtx_def* %171 to i32*
  %bf.load263 = load i32, i32* %172, align 8
  %bf.clear264 = and i32 %bf.load263, 65535
  %cmp265 = icmp eq i32 %bf.clear264, 66
  br i1 %cmp265, label %if.then.274, label %lor.lhs.false.267

lor.lhs.false.267:                                ; preds = %land.lhs.true.260, %if.end.258
  %173 = load i32, i32* %i, align 4
  %idxprom268 = sext i32 %173 to i64
  %174 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx269 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %174, i64 %idxprom268
  %175 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx269, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load270 = load i32, i32* %176, align 8
  %bf.clear271 = and i32 %bf.load270, 65535
  %cmp272 = icmp eq i32 %bf.clear271, 65
  br i1 %cmp272, label %if.then.274, label %if.end.296

if.then.274:                                      ; preds = %lor.lhs.false.267, %land.lhs.true.260
  %177 = load i32, i32* %i, align 4
  %idxprom275 = sext i32 %177 to i64
  %178 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx276 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %178, i64 %idxprom275
  %179 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx276, align 8
  %call277 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %179, i32 1)
  %180 = load i32, i32* %i, align 4
  %idxprom278 = sext i32 %180 to i64
  %181 = load %struct.rtx_def**, %struct.rtx_def*** %real_output_rtx, align 8
  %arrayidx279 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %181, i64 %idxprom278
  store %struct.rtx_def* %call277, %struct.rtx_def** %arrayidx279, align 8
  %182 = load i32, i32* %i, align 4
  %idxprom280 = sext i32 %182 to i64
  %183 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx281 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %183, i64 %idxprom280
  %184 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx281, align 8
  %185 = bitcast %struct.rtx_def* %184 to i32*
  %bf.load282 = load i32, i32* %185, align 8
  %bf.lshr283 = lshr i32 %bf.load282, 16
  %bf.clear284 = and i32 %bf.lshr283, 255
  %call285 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear284)
  %186 = load i32, i32* %i, align 4
  %idxprom286 = sext i32 %186 to i64
  %187 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx287 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %187, i64 %idxprom286
  store %struct.rtx_def* %call285, %struct.rtx_def** %arrayidx287, align 8
  %188 = load i8, i8* %is_inout154, align 1
  %tobool288 = trunc i8 %188 to i1
  br i1 %tobool288, label %if.then.289, label %if.end.295

if.then.289:                                      ; preds = %if.then.274
  %189 = load i32, i32* %i, align 4
  %idxprom290 = sext i32 %189 to i64
  %190 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx291 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %190, i64 %idxprom290
  %191 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx291, align 8
  %192 = load i32, i32* %i, align 4
  %idxprom292 = sext i32 %192 to i64
  %193 = load %struct.rtx_def**, %struct.rtx_def*** %real_output_rtx, align 8
  %arrayidx293 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %193, i64 %idxprom292
  %194 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx293, align 8
  %call294 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %191, %struct.rtx_def* %194)
  br label %if.end.295

if.end.295:                                       ; preds = %if.then.289, %if.then.274
  br label %if.end.296

if.end.296:                                       ; preds = %if.end.295, %lor.lhs.false.267
  br label %if.end.306

if.else.297:                                      ; preds = %lor.lhs.false.242
  %195 = load %union.tree_node*, %union.tree_node** %type151, align 8
  %call298 = call %struct.rtx_def* @assign_temp(%union.tree_node* %195, i32 0, i32 0, i32 1)
  %196 = load i32, i32* %i, align 4
  %idxprom299 = sext i32 %196 to i64
  %197 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx300 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %197, i64 %idxprom299
  store %struct.rtx_def* %call298, %struct.rtx_def** %arrayidx300, align 8
  %198 = load %union.tree_node*, %union.tree_node** %type151, align 8
  %199 = load i32, i32* %i, align 4
  %idxprom301 = sext i32 %199 to i64
  %200 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx302 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %200, i64 %idxprom301
  %201 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx302, align 8
  %call303 = call %union.tree_node* @make_tree(%union.tree_node* %198, %struct.rtx_def* %201)
  %202 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list304 = bitcast %union.tree_node* %202 to %struct.tree_list*
  %value305 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list304, i32 0, i32 2
  store %union.tree_node* %call303, %union.tree_node** %value305, align 8
  br label %if.end.306

if.end.306:                                       ; preds = %if.else.297, %if.end.296
  %203 = load i32, i32* %old_generating_concat_p, align 4
  store i32 %203, i32* @generating_concat_p, align 4
  %204 = load i8, i8* %is_inout154, align 1
  %tobool307 = trunc i8 %204 to i1
  br i1 %tobool307, label %if.then.308, label %if.end.319

if.then.308:                                      ; preds = %if.end.306
  %205 = load %union.tree_node*, %union.tree_node** %type151, align 8
  %type309 = bitcast %union.tree_node* %205 to %struct.tree_type*
  %mode310 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type309, i32 0, i32 6
  %bf.load311 = load i32, i32* %mode310, align 4
  %bf.lshr312 = lshr i32 %bf.load311, 9
  %bf.clear313 = and i32 %bf.lshr312, 127
  %206 = load i32, i32* %ninout, align 4
  %idxprom314 = sext i32 %206 to i64
  %207 = load i32*, i32** %inout_mode, align 8
  %arrayidx315 = getelementptr inbounds i32, i32* %207, i64 %idxprom314
  store i32 %bf.clear313, i32* %arrayidx315, align 4
  %208 = load i32, i32* %i, align 4
  %209 = load i32, i32* %ninout, align 4
  %inc316 = add nsw i32 %209, 1
  store i32 %inc316, i32* %ninout, align 4
  %idxprom317 = sext i32 %209 to i64
  %210 = load i32*, i32** %inout_opnum, align 8
  %arrayidx318 = getelementptr inbounds i32, i32* %210, i64 %idxprom317
  store i32 %208, i32* %arrayidx318, align 4
  br label %if.end.319

if.end.319:                                       ; preds = %if.then.308, %if.end.306
  br label %for.inc.320

for.inc.320:                                      ; preds = %if.end.319
  %211 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common321 = bitcast %union.tree_node* %211 to %struct.tree_common*
  %chain322 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common321, i32 0, i32 0
  %212 = load %union.tree_node*, %union.tree_node** %chain322, align 8
  store %union.tree_node* %212, %union.tree_node** %tail, align 8
  %213 = load i32, i32* %i, align 4
  %inc323 = add nsw i32 %213, 1
  store i32 %inc323, i32* %i, align 4
  br label %for.cond.145

for.end.324:                                      ; preds = %for.cond.145
  %214 = load i32, i32* %ninputs, align 4
  %call325 = call %struct.rtvec_def* @rtvec_alloc(i32 %214)
  store %struct.rtvec_def* %call325, %struct.rtvec_def** %argvec, align 8
  %215 = load i32, i32* %ninputs, align 4
  %call326 = call %struct.rtvec_def* @rtvec_alloc(i32 %215)
  store %struct.rtvec_def* %call326, %struct.rtvec_def** %constraintvec, align 8
  %216 = load i32, i32* %noutputs, align 4
  %cmp327 = icmp eq i32 %216, 0
  br i1 %cmp327, label %cond.true.329, label %cond.false.330

cond.true.329:                                    ; preds = %for.end.324
  br label %cond.end.335

cond.false.330:                                   ; preds = %for.end.324
  %217 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx331 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %217, i64 0
  %218 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx331, align 8
  %219 = bitcast %struct.rtx_def* %218 to i32*
  %bf.load332 = load i32, i32* %219, align 8
  %bf.lshr333 = lshr i32 %bf.load332, 16
  %bf.clear334 = and i32 %bf.lshr333, 255
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.false.330, %cond.true.329
  %cond336 = phi i32 [ 0, %cond.true.329 ], [ %bf.clear334, %cond.false.330 ]
  %220 = load %union.tree_node*, %union.tree_node** %string.addr, align 8
  %string337 = bitcast %union.tree_node* %220 to %struct.tree_string*
  %pointer338 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string337, i32 0, i32 3
  %221 = load i8*, i8** %pointer338, align 8
  %222 = load %struct.rtvec_def*, %struct.rtvec_def** %argvec, align 8
  %223 = load %struct.rtvec_def*, %struct.rtvec_def** %constraintvec, align 8
  %224 = load i8*, i8** %filename.addr, align 8
  %225 = load i32, i32* %line.addr, align 4
  %call339 = call %struct.rtx_def* @gen_rtx_fmt_ssiEEsi(i32 41, i32 %cond336, i8* %221, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @empty_string, i32 0, i32 0), i32 0, %struct.rtvec_def* %222, %struct.rtvec_def* %223, i8* %224, i32 %225)
  store %struct.rtx_def* %call339, %struct.rtx_def** %body, align 8
  %226 = load i32, i32* %vol.addr, align 4
  %227 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %228 = bitcast %struct.rtx_def* %227 to i32*
  %bf.load340 = load i32, i32* %228, align 8
  %bf.value = and i32 %226, 1
  %bf.shl = shl i32 %bf.value, 27
  %bf.clear341 = and i32 %bf.load340, -134217729
  %bf.set = or i32 %bf.clear341, %bf.shl
  store i32 %bf.set, i32* %228, align 8
  store i32 0, i32* %i, align 4
  %229 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  store %union.tree_node* %229, %union.tree_node** %tail, align 8
  br label %for.cond.342

for.cond.342:                                     ; preds = %for.inc.528, %cond.end.335
  %230 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %tobool343 = icmp ne %union.tree_node* %230, null
  br i1 %tobool343, label %for.body.344, label %for.end.532

for.body.344:                                     ; preds = %for.cond.342
  %231 = load i32, i32* %i, align 4
  %232 = load i32, i32* %noutputs, align 4
  %add350 = add nsw i32 %231, %232
  %idxprom351 = sext i32 %add350 to i64
  %233 = load i8**, i8*** %constraints, align 8
  %arrayidx352 = getelementptr inbounds i8*, i8** %233, i64 %idxprom351
  %234 = load i8*, i8** %arrayidx352, align 8
  store i8* %234, i8** %constraint347, align 8
  %235 = load i32, i32* %i, align 4
  %236 = load i32, i32* %ninputs, align 4
  %237 = load i32, i32* %noutputs, align 4
  %238 = load i32, i32* %ninout, align 4
  %239 = load i8**, i8*** %constraints, align 8
  %call353 = call zeroext i1 @parse_input_constraint(i8** %constraint347, i32 %235, i32 %236, i32 %237, i32 %238, i8** %239, i8* %allows_mem346, i8* %allows_reg345)
  br i1 %call353, label %if.end.355, label %if.then.354

if.then.354:                                      ; preds = %for.body.344
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 1800, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.expand_asm_operands, i32 0, i32 0)) #6
  unreachable

if.end.355:                                       ; preds = %for.body.344
  store i32 0, i32* @generating_concat_p, align 4
  %240 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list356 = bitcast %union.tree_node* %240 to %struct.tree_list*
  %value357 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list356, i32 0, i32 2
  %241 = load %union.tree_node*, %union.tree_node** %value357, align 8
  store %union.tree_node* %241, %union.tree_node** %val348, align 8
  %242 = load %union.tree_node*, %union.tree_node** %val348, align 8
  %common358 = bitcast %union.tree_node* %242 to %struct.tree_common*
  %type359 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common358, i32 0, i32 1
  %243 = load %union.tree_node*, %union.tree_node** %type359, align 8
  store %union.tree_node* %243, %union.tree_node** %type349, align 8
  %244 = load %union.tree_node*, %union.tree_node** %val348, align 8
  %call360 = call %struct.rtx_def* @expand_expr(%union.tree_node* %244, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call360, %struct.rtx_def** %op, align 8
  %245 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %246 = bitcast %struct.rtx_def* %245 to i32*
  %bf.load361 = load i32, i32* %246, align 8
  %bf.clear362 = and i32 %bf.load361, 65535
  %cmp363 = icmp eq i32 %bf.clear362, 65
  br i1 %cmp363, label %if.then.365, label %if.end.370

if.then.365:                                      ; preds = %if.end.355
  %247 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %248 = bitcast %struct.rtx_def* %247 to i32*
  %bf.load366 = load i32, i32* %248, align 8
  %bf.lshr367 = lshr i32 %bf.load366, 16
  %bf.clear368 = and i32 %bf.lshr367, 255
  %249 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call369 = call %struct.rtx_def* @force_reg(i32 %bf.clear368, %struct.rtx_def* %249)
  store %struct.rtx_def* %call369, %struct.rtx_def** %op, align 8
  br label %if.end.370

if.end.370:                                       ; preds = %if.then.365, %if.end.355
  %250 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %251 = load i8*, i8** %constraint347, align 8
  %call371 = call i32 @asm_operand_ok(%struct.rtx_def* %250, i8* %251)
  %cmp372 = icmp sle i32 %call371, 0
  br i1 %cmp372, label %if.then.374, label %if.end.509

if.then.374:                                      ; preds = %if.end.370
  %252 = load i8, i8* %allows_reg345, align 1
  %tobool375 = trunc i8 %252 to i1
  br i1 %tobool375, label %if.then.376, label %if.else.383

if.then.376:                                      ; preds = %if.then.374
  %253 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %type377 = bitcast %union.tree_node* %253 to %struct.tree_type*
  %mode378 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type377, i32 0, i32 6
  %bf.load379 = load i32, i32* %mode378, align 4
  %bf.lshr380 = lshr i32 %bf.load379, 9
  %bf.clear381 = and i32 %bf.lshr380, 127
  %254 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call382 = call %struct.rtx_def* @force_reg(i32 %bf.clear381, %struct.rtx_def* %254)
  store %struct.rtx_def* %call382, %struct.rtx_def** %op, align 8
  br label %if.end.508

if.else.383:                                      ; preds = %if.then.374
  %255 = load i8, i8* %allows_mem346, align 1
  %tobool384 = trunc i8 %255 to i1
  br i1 %tobool384, label %if.else.387, label %if.then.385

if.then.385:                                      ; preds = %if.else.383
  %256 = load i32, i32* %i, align 4
  %257 = load i32, i32* %noutputs, align 4
  %add386 = add nsw i32 %256, %257
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.12, i32 0, i32 0), i32 %add386)
  br label %if.end.507

if.else.387:                                      ; preds = %if.else.383
  %258 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %259 = bitcast %struct.rtx_def* %258 to i32*
  %bf.load388 = load i32, i32* %259, align 8
  %bf.clear389 = and i32 %bf.load388, 65535
  %cmp390 = icmp eq i32 %bf.clear389, 67
  br i1 %cmp390, label %if.then.427, label %lor.lhs.false.392

lor.lhs.false.392:                                ; preds = %if.else.387
  %260 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %261 = bitcast %struct.rtx_def* %260 to i32*
  %bf.load393 = load i32, i32* %261, align 8
  %bf.clear394 = and i32 %bf.load393, 65535
  %cmp395 = icmp eq i32 %bf.clear394, 68
  br i1 %cmp395, label %if.then.427, label %lor.lhs.false.397

lor.lhs.false.397:                                ; preds = %lor.lhs.false.392
  %262 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %263 = bitcast %struct.rtx_def* %262 to i32*
  %bf.load398 = load i32, i32* %263, align 8
  %bf.clear399 = and i32 %bf.load398, 65535
  %cmp400 = icmp eq i32 %bf.clear399, 54
  br i1 %cmp400, label %if.then.427, label %lor.lhs.false.402

lor.lhs.false.402:                                ; preds = %lor.lhs.false.397
  %264 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %265 = bitcast %struct.rtx_def* %264 to i32*
  %bf.load403 = load i32, i32* %265, align 8
  %bf.clear404 = and i32 %bf.load403, 65535
  %cmp405 = icmp eq i32 %bf.clear404, 55
  br i1 %cmp405, label %if.then.427, label %lor.lhs.false.407

lor.lhs.false.407:                                ; preds = %lor.lhs.false.402
  %266 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %267 = bitcast %struct.rtx_def* %266 to i32*
  %bf.load408 = load i32, i32* %267, align 8
  %bf.clear409 = and i32 %bf.load408, 65535
  %cmp410 = icmp eq i32 %bf.clear409, 58
  br i1 %cmp410, label %if.then.427, label %lor.lhs.false.412

lor.lhs.false.412:                                ; preds = %lor.lhs.false.407
  %268 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %269 = bitcast %struct.rtx_def* %268 to i32*
  %bf.load413 = load i32, i32* %269, align 8
  %bf.clear414 = and i32 %bf.load413, 65535
  %cmp415 = icmp eq i32 %bf.clear414, 134
  br i1 %cmp415, label %if.then.427, label %lor.lhs.false.417

lor.lhs.false.417:                                ; preds = %lor.lhs.false.412
  %270 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %271 = bitcast %struct.rtx_def* %270 to i32*
  %bf.load418 = load i32, i32* %271, align 8
  %bf.clear419 = and i32 %bf.load418, 65535
  %cmp420 = icmp eq i32 %bf.clear419, 56
  br i1 %cmp420, label %if.then.427, label %lor.lhs.false.422

lor.lhs.false.422:                                ; preds = %lor.lhs.false.417
  %272 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %273 = bitcast %struct.rtx_def* %272 to i32*
  %bf.load423 = load i32, i32* %273, align 8
  %bf.clear424 = and i32 %bf.load423, 65535
  %cmp425 = icmp eq i32 %bf.clear424, 140
  br i1 %cmp425, label %if.then.427, label %if.else.434

if.then.427:                                      ; preds = %lor.lhs.false.422, %lor.lhs.false.417, %lor.lhs.false.412, %lor.lhs.false.407, %lor.lhs.false.402, %lor.lhs.false.397, %lor.lhs.false.392, %if.else.387
  %274 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %type428 = bitcast %union.tree_node* %274 to %struct.tree_type*
  %mode429 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type428, i32 0, i32 6
  %bf.load430 = load i32, i32* %mode429, align 4
  %bf.lshr431 = lshr i32 %bf.load430, 9
  %bf.clear432 = and i32 %bf.lshr431, 127
  %275 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call433 = call %struct.rtx_def* @force_const_mem(i32 %bf.clear432, %struct.rtx_def* %275)
  store %struct.rtx_def* %call433, %struct.rtx_def** %op, align 8
  br label %if.end.506

if.else.434:                                      ; preds = %lor.lhs.false.422
  %276 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %277 = bitcast %struct.rtx_def* %276 to i32*
  %bf.load435 = load i32, i32* %277, align 8
  %bf.clear436 = and i32 %bf.load435, 65535
  %cmp437 = icmp eq i32 %bf.clear436, 61
  br i1 %cmp437, label %if.then.454, label %lor.lhs.false.439

lor.lhs.false.439:                                ; preds = %if.else.434
  %278 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %279 = bitcast %struct.rtx_def* %278 to i32*
  %bf.load440 = load i32, i32* %279, align 8
  %bf.clear441 = and i32 %bf.load440, 65535
  %cmp442 = icmp eq i32 %bf.clear441, 63
  br i1 %cmp442, label %if.then.454, label %lor.lhs.false.444

lor.lhs.false.444:                                ; preds = %lor.lhs.false.439
  %280 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %281 = bitcast %struct.rtx_def* %280 to i32*
  %bf.load445 = load i32, i32* %281, align 8
  %bf.clear446 = and i32 %bf.load445, 65535
  %cmp447 = icmp eq i32 %bf.clear446, 70
  br i1 %cmp447, label %if.then.454, label %lor.lhs.false.449

lor.lhs.false.449:                                ; preds = %lor.lhs.false.444
  %282 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %283 = bitcast %struct.rtx_def* %282 to i32*
  %bf.load450 = load i32, i32* %283, align 8
  %bf.clear451 = and i32 %bf.load450, 65535
  %cmp452 = icmp eq i32 %bf.clear451, 65
  br i1 %cmp452, label %if.then.454, label %if.else.486

if.then.454:                                      ; preds = %lor.lhs.false.449, %lor.lhs.false.444, %lor.lhs.false.439, %if.else.434
  %284 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %285 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %common455 = bitcast %union.tree_node* %285 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common455, i32 0, i32 2
  %bf.load456 = load i32, i32* %readonly_flag, align 8
  %bf.lshr457 = lshr i32 %bf.load456, 12
  %bf.clear458 = and i32 %bf.lshr457, 1
  %mul459 = mul nsw i32 %bf.clear458, 1
  %286 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %common460 = bitcast %union.tree_node* %286 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common460, i32 0, i32 2
  %bf.load461 = load i32, i32* %volatile_flag, align 8
  %bf.lshr462 = lshr i32 %bf.load461, 11
  %bf.clear463 = and i32 %bf.lshr462, 1
  %mul464 = mul nsw i32 %bf.clear463, 2
  %or = or i32 %mul459, %mul464
  %287 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %type465 = bitcast %union.tree_node* %287 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type465, i32 0, i32 6
  %bf.load466 = load i32, i32* %restrict_flag, align 4
  %bf.lshr467 = lshr i32 %bf.load466, 21
  %bf.clear468 = and i32 %bf.lshr467, 1
  %mul469 = mul nsw i32 %bf.clear468, 4
  %or470 = or i32 %or, %mul469
  %288 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %common471 = bitcast %union.tree_node* %288 to %struct.tree_common*
  %code472 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common471, i32 0, i32 2
  %bf.load473 = load i32, i32* %code472, align 8
  %bf.clear474 = and i32 %bf.load473, 255
  %cmp475 = icmp eq i32 %bf.clear474, 20
  br i1 %cmp475, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.454
  %289 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %common477 = bitcast %union.tree_node* %289 to %struct.tree_common*
  %type478 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common477, i32 0, i32 1
  %290 = load %union.tree_node*, %union.tree_node** %type478, align 8
  %tobool479 = icmp ne %union.tree_node* %290, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.454
  %291 = phi i1 [ false, %if.then.454 ], [ %tobool479, %land.rhs ]
  %land.ext = zext i1 %291 to i32
  %mul480 = mul nsw i32 %land.ext, 8
  %or481 = or i32 %or470, %mul480
  %or482 = or i32 %or481, 1
  %call483 = call %union.tree_node* @build_qualified_type(%union.tree_node* %284, i32 %or482)
  store %union.tree_node* %call483, %union.tree_node** %qual_type, align 8
  %292 = load %union.tree_node*, %union.tree_node** %qual_type, align 8
  %call484 = call %struct.rtx_def* @assign_temp(%union.tree_node* %292, i32 1, i32 1, i32 1)
  store %struct.rtx_def* %call484, %struct.rtx_def** %memloc, align 8
  %293 = load %struct.rtx_def*, %struct.rtx_def** %memloc, align 8
  %294 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call485 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %293, %struct.rtx_def* %294)
  %295 = load %struct.rtx_def*, %struct.rtx_def** %memloc, align 8
  store %struct.rtx_def* %295, %struct.rtx_def** %op, align 8
  br label %if.end.505

if.else.486:                                      ; preds = %lor.lhs.false.449
  %296 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %297 = bitcast %struct.rtx_def* %296 to i32*
  %bf.load487 = load i32, i32* %297, align 8
  %bf.clear488 = and i32 %bf.load487, 65535
  %cmp489 = icmp eq i32 %bf.clear488, 66
  br i1 %cmp489, label %land.lhs.true.491, label %if.else.497

land.lhs.true.491:                                ; preds = %if.else.486
  %298 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %299 = bitcast %struct.rtx_def* %298 to i32*
  %bf.load492 = load i32, i32* %299, align 8
  %bf.lshr493 = lshr i32 %bf.load492, 27
  %bf.clear494 = and i32 %bf.lshr493, 1
  %tobool495 = icmp ne i32 %bf.clear494, 0
  br i1 %tobool495, label %if.then.496, label %if.else.497

if.then.496:                                      ; preds = %land.lhs.true.491
  br label %if.end.504

if.else.497:                                      ; preds = %land.lhs.true.491, %if.else.486
  %300 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %call498 = call i32 @queued_subexp_p(%struct.rtx_def* %300)
  %tobool499 = icmp ne i32 %call498, 0
  br i1 %tobool499, label %if.then.500, label %if.else.501

if.then.500:                                      ; preds = %if.else.497
  br label %if.end.503

if.else.501:                                      ; preds = %if.else.497
  %301 = load i32, i32* %i, align 4
  %302 = load i32, i32* %noutputs, align 4
  %add502 = add nsw i32 %301, %302
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.12, i32 0, i32 0), i32 %add502)
  br label %if.end.503

if.end.503:                                       ; preds = %if.else.501, %if.then.500
  br label %if.end.504

if.end.504:                                       ; preds = %if.end.503, %if.then.496
  br label %if.end.505

if.end.505:                                       ; preds = %if.end.504, %land.end
  br label %if.end.506

if.end.506:                                       ; preds = %if.end.505, %if.then.427
  br label %if.end.507

if.end.507:                                       ; preds = %if.end.506, %if.then.385
  br label %if.end.508

if.end.508:                                       ; preds = %if.end.507, %if.then.376
  br label %if.end.509

if.end.509:                                       ; preds = %if.end.508, %if.end.370
  %303 = load i32, i32* %old_generating_concat_p, align 4
  store i32 %303, i32* @generating_concat_p, align 4
  %304 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8
  %305 = load i32, i32* %i, align 4
  %idxprom510 = sext i32 %305 to i64
  %306 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %306, i32 0, i32 1
  %arrayidx511 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtvec = bitcast %union.rtunion_def* %arrayidx511 to %struct.rtvec_def**
  %307 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %307, i32 0, i32 1
  %arrayidx512 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom510
  store %struct.rtx_def* %304, %struct.rtx_def** %arrayidx512, align 8
  %308 = load %union.tree_node*, %union.tree_node** %type349, align 8
  %type513 = bitcast %union.tree_node* %308 to %struct.tree_type*
  %mode514 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type513, i32 0, i32 6
  %bf.load515 = load i32, i32* %mode514, align 4
  %bf.lshr516 = lshr i32 %bf.load515, 9
  %bf.clear517 = and i32 %bf.lshr516, 127
  %309 = load i32, i32* %i, align 4
  %310 = load i32, i32* %noutputs, align 4
  %add518 = add nsw i32 %309, %310
  %idxprom519 = sext i32 %add518 to i64
  %311 = load i8**, i8*** %constraints, align 8
  %arrayidx520 = getelementptr inbounds i8*, i8** %311, i64 %idxprom519
  %312 = load i8*, i8** %arrayidx520, align 8
  %call521 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 40, i32 %bf.clear517, i8* %312)
  %313 = load i32, i32* %i, align 4
  %idxprom522 = sext i32 %313 to i64
  %314 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld523 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %314, i32 0, i32 1
  %arrayidx524 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld523, i32 0, i64 4
  %rtvec525 = bitcast %union.rtunion_def* %arrayidx524 to %struct.rtvec_def**
  %315 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec525, align 8
  %elem526 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %315, i32 0, i32 1
  %arrayidx527 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem526, i32 0, i64 %idxprom522
  store %struct.rtx_def* %call521, %struct.rtx_def** %arrayidx527, align 8
  br label %for.inc.528

for.inc.528:                                      ; preds = %if.end.509
  %316 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common529 = bitcast %union.tree_node* %316 to %struct.tree_common*
  %chain530 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common529, i32 0, i32 0
  %317 = load %union.tree_node*, %union.tree_node** %chain530, align 8
  store %union.tree_node* %317, %union.tree_node** %tail, align 8
  %318 = load i32, i32* %i, align 4
  %inc531 = add nsw i32 %318, 1
  store i32 %inc531, i32* %i, align 4
  br label %for.cond.342

for.end.532:                                      ; preds = %for.cond.342
  store i32 0, i32* @generating_concat_p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.533

for.cond.533:                                     ; preds = %for.inc.550, %for.end.532
  %319 = load i32, i32* %i, align 4
  %320 = load i32, i32* %ninputs, align 4
  %321 = load i32, i32* %ninout, align 4
  %sub = sub nsw i32 %320, %321
  %cmp534 = icmp slt i32 %319, %sub
  br i1 %cmp534, label %for.body.536, label %for.end.552

for.body.536:                                     ; preds = %for.cond.533
  %322 = load i32, i32* %i, align 4
  %idxprom537 = sext i32 %322 to i64
  %323 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld538 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %323, i32 0, i32 1
  %arrayidx539 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld538, i32 0, i64 3
  %rtvec540 = bitcast %union.rtunion_def* %arrayidx539 to %struct.rtvec_def**
  %324 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec540, align 8
  %elem541 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %324, i32 0, i32 1
  %arrayidx542 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem541, i32 0, i64 %idxprom537
  %325 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx542, align 8
  %call543 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %325, i32 0)
  %326 = load i32, i32* %i, align 4
  %idxprom544 = sext i32 %326 to i64
  %327 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld545 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %327, i32 0, i32 1
  %arrayidx546 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld545, i32 0, i64 3
  %rtvec547 = bitcast %union.rtunion_def* %arrayidx546 to %struct.rtvec_def**
  %328 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec547, align 8
  %elem548 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %328, i32 0, i32 1
  %arrayidx549 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem548, i32 0, i64 %idxprom544
  store %struct.rtx_def* %call543, %struct.rtx_def** %arrayidx549, align 8
  br label %for.inc.550

for.inc.550:                                      ; preds = %for.body.536
  %329 = load i32, i32* %i, align 4
  %inc551 = add nsw i32 %329, 1
  store i32 %inc551, i32* %i, align 4
  br label %for.cond.533

for.end.552:                                      ; preds = %for.cond.533
  store i32 0, i32* %i, align 4
  br label %for.cond.553

for.cond.553:                                     ; preds = %for.inc.562, %for.end.552
  %330 = load i32, i32* %i, align 4
  %331 = load i32, i32* %noutputs, align 4
  %cmp554 = icmp slt i32 %330, %331
  br i1 %cmp554, label %for.body.556, label %for.end.564

for.body.556:                                     ; preds = %for.cond.553
  %332 = load i32, i32* %i, align 4
  %idxprom557 = sext i32 %332 to i64
  %333 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx558 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %333, i64 %idxprom557
  %334 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx558, align 8
  %call559 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %334, i32 1)
  %335 = load i32, i32* %i, align 4
  %idxprom560 = sext i32 %335 to i64
  %336 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx561 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %336, i64 %idxprom560
  store %struct.rtx_def* %call559, %struct.rtx_def** %arrayidx561, align 8
  br label %for.inc.562

for.inc.562:                                      ; preds = %for.body.556
  %337 = load i32, i32* %i, align 4
  %inc563 = add nsw i32 %337, 1
  store i32 %inc563, i32* %i, align 4
  br label %for.cond.553

for.end.564:                                      ; preds = %for.cond.553
  store i32 0, i32* %i, align 4
  br label %for.cond.565

for.cond.565:                                     ; preds = %for.inc.595, %for.end.564
  %338 = load i32, i32* %i, align 4
  %339 = load i32, i32* %ninout, align 4
  %cmp566 = icmp slt i32 %338, %339
  br i1 %cmp566, label %for.body.568, label %for.end.597

for.body.568:                                     ; preds = %for.cond.565
  %340 = load i32, i32* %i, align 4
  %idxprom569 = sext i32 %340 to i64
  %341 = load i32*, i32** %inout_opnum, align 8
  %arrayidx570 = getelementptr inbounds i32, i32* %341, i64 %idxprom569
  %342 = load i32, i32* %arrayidx570, align 4
  store i32 %342, i32* %j, align 4
  %343 = load i32, i32* %j, align 4
  %idxprom571 = sext i32 %343 to i64
  %344 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx572 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %344, i64 %idxprom571
  %345 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx572, align 8
  %346 = load i32, i32* %ninputs, align 4
  %347 = load i32, i32* %ninout, align 4
  %sub573 = sub nsw i32 %346, %347
  %348 = load i32, i32* %i, align 4
  %add574 = add nsw i32 %sub573, %348
  %idxprom575 = sext i32 %add574 to i64
  %349 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld576 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %349, i32 0, i32 1
  %arrayidx577 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld576, i32 0, i64 3
  %rtvec578 = bitcast %union.rtunion_def* %arrayidx577 to %struct.rtvec_def**
  %350 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec578, align 8
  %elem579 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %350, i32 0, i32 1
  %arrayidx580 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem579, i32 0, i64 %idxprom575
  store %struct.rtx_def* %345, %struct.rtx_def** %arrayidx580, align 8
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buffer, i32 0, i32 0
  %351 = load i32, i32* %j, align 4
  %call581 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 %351) #5
  %352 = load i32, i32* %i, align 4
  %idxprom582 = sext i32 %352 to i64
  %353 = load i32*, i32** %inout_mode, align 8
  %arrayidx583 = getelementptr inbounds i32, i32* %353, i64 %idxprom582
  %354 = load i32, i32* %arrayidx583, align 4
  %arraydecay584 = getelementptr inbounds [16 x i8], [16 x i8]* %buffer, i32 0, i32 0
  %call585 = call i8* @ggc_alloc_string(i8* %arraydecay584, i32 -1)
  %call586 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 40, i32 %354, i8* %call585)
  %355 = load i32, i32* %ninputs, align 4
  %356 = load i32, i32* %ninout, align 4
  %sub587 = sub nsw i32 %355, %356
  %357 = load i32, i32* %i, align 4
  %add588 = add nsw i32 %sub587, %357
  %idxprom589 = sext i32 %add588 to i64
  %358 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld590 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %358, i32 0, i32 1
  %arrayidx591 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld590, i32 0, i64 4
  %rtvec592 = bitcast %union.rtunion_def* %arrayidx591 to %struct.rtvec_def**
  %359 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec592, align 8
  %elem593 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %359, i32 0, i32 1
  %arrayidx594 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem593, i32 0, i64 %idxprom589
  store %struct.rtx_def* %call586, %struct.rtx_def** %arrayidx594, align 8
  br label %for.inc.595

for.inc.595:                                      ; preds = %for.body.568
  %360 = load i32, i32* %i, align 4
  %inc596 = add nsw i32 %360, 1
  store i32 %inc596, i32* %i, align 4
  br label %for.cond.565

for.end.597:                                      ; preds = %for.cond.565
  %361 = load i32, i32* %old_generating_concat_p, align 4
  store i32 %361, i32* @generating_concat_p, align 4
  %362 = load i32, i32* %noutputs, align 4
  %cmp598 = icmp eq i32 %362, 1
  br i1 %cmp598, label %land.lhs.true.600, label %if.else.610

land.lhs.true.600:                                ; preds = %for.end.597
  %363 = load i32, i32* %nclobbers, align 4
  %cmp601 = icmp eq i32 %363, 0
  br i1 %cmp601, label %if.then.603, label %if.else.610

if.then.603:                                      ; preds = %land.lhs.true.600
  %364 = load i8**, i8*** %constraints, align 8
  %arrayidx604 = getelementptr inbounds i8*, i8** %364, i64 0
  %365 = load i8*, i8** %arrayidx604, align 8
  %366 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld605 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %366, i32 0, i32 1
  %arrayidx606 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld605, i32 0, i64 1
  %rtstr = bitcast %union.rtunion_def* %arrayidx606 to i8**
  store i8* %365, i8** %rtstr, align 8
  %367 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx607 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %367, i64 0
  %368 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx607, align 8
  %369 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %call608 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %368, %struct.rtx_def* %369)
  %call609 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call608)
  store %struct.rtx_def* %call609, %struct.rtx_def** %insn, align 8
  br label %if.end.724

if.else.610:                                      ; preds = %land.lhs.true.600, %for.end.597
  %370 = load i32, i32* %noutputs, align 4
  %cmp611 = icmp eq i32 %370, 0
  br i1 %cmp611, label %land.lhs.true.613, label %if.else.618

land.lhs.true.613:                                ; preds = %if.else.610
  %371 = load i32, i32* %nclobbers, align 4
  %cmp614 = icmp eq i32 %371, 0
  br i1 %cmp614, label %if.then.616, label %if.else.618

if.then.616:                                      ; preds = %land.lhs.true.613
  %372 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %call617 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %372)
  store %struct.rtx_def* %call617, %struct.rtx_def** %insn, align 8
  br label %if.end.723

if.else.618:                                      ; preds = %land.lhs.true.613, %if.else.610
  %373 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  store %struct.rtx_def* %373, %struct.rtx_def** %obody, align 8
  %374 = load i32, i32* %noutputs, align 4
  store i32 %374, i32* %num, align 4
  %375 = load i32, i32* %num, align 4
  %cmp619 = icmp eq i32 %375, 0
  br i1 %cmp619, label %if.then.621, label %if.end.622

if.then.621:                                      ; preds = %if.else.618
  store i32 1, i32* %num, align 4
  br label %if.end.622

if.end.622:                                       ; preds = %if.then.621, %if.else.618
  %376 = load i32, i32* %num, align 4
  %377 = load i32, i32* %nclobbers, align 4
  %add623 = add nsw i32 %376, %377
  %call624 = call %struct.rtvec_def* @rtvec_alloc(i32 %add623)
  %call625 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call624)
  store %struct.rtx_def* %call625, %struct.rtx_def** %body, align 8
  store i32 0, i32* %i, align 4
  %378 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %378, %union.tree_node** %tail, align 8
  br label %for.cond.626

for.cond.626:                                     ; preds = %for.inc.661, %if.end.622
  %379 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %tobool627 = icmp ne %union.tree_node* %379, null
  br i1 %tobool627, label %for.body.628, label %for.end.665

for.body.628:                                     ; preds = %for.cond.626
  %380 = load i32, i32* %i, align 4
  %idxprom629 = sext i32 %380 to i64
  %381 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx630 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %381, i64 %idxprom629
  %382 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx630, align 8
  %383 = load i32, i32* %i, align 4
  %idxprom631 = sext i32 %383 to i64
  %384 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx632 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %384, i64 %idxprom631
  %385 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx632, align 8
  %386 = bitcast %struct.rtx_def* %385 to i32*
  %bf.load633 = load i32, i32* %386, align 8
  %bf.lshr634 = lshr i32 %bf.load633, 16
  %bf.clear635 = and i32 %bf.lshr634, 255
  %387 = load %union.tree_node*, %union.tree_node** %string.addr, align 8
  %string636 = bitcast %union.tree_node* %387 to %struct.tree_string*
  %pointer637 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string636, i32 0, i32 3
  %388 = load i8*, i8** %pointer637, align 8
  %389 = load i32, i32* %i, align 4
  %idxprom638 = sext i32 %389 to i64
  %390 = load i8**, i8*** %constraints, align 8
  %arrayidx639 = getelementptr inbounds i8*, i8** %390, i64 %idxprom638
  %391 = load i8*, i8** %arrayidx639, align 8
  %392 = load i32, i32* %i, align 4
  %393 = load %struct.rtvec_def*, %struct.rtvec_def** %argvec, align 8
  %394 = load %struct.rtvec_def*, %struct.rtvec_def** %constraintvec, align 8
  %395 = load i8*, i8** %filename.addr, align 8
  %396 = load i32, i32* %line.addr, align 4
  %call640 = call %struct.rtx_def* @gen_rtx_fmt_ssiEEsi(i32 41, i32 %bf.clear635, i8* %388, i8* %391, i32 %392, %struct.rtvec_def* %393, %struct.rtvec_def* %394, i8* %395, i32 %396)
  %call641 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %382, %struct.rtx_def* %call640)
  %397 = load i32, i32* %i, align 4
  %idxprom642 = sext i32 %397 to i64
  %398 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld643 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %398, i32 0, i32 1
  %arrayidx644 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld643, i32 0, i64 0
  %rtvec645 = bitcast %union.rtunion_def* %arrayidx644 to %struct.rtvec_def**
  %399 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec645, align 8
  %elem646 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %399, i32 0, i32 1
  %arrayidx647 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem646, i32 0, i64 %idxprom642
  store %struct.rtx_def* %call641, %struct.rtx_def** %arrayidx647, align 8
  %400 = load i32, i32* %vol.addr, align 4
  %401 = load i32, i32* %i, align 4
  %idxprom648 = sext i32 %401 to i64
  %402 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld649 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %402, i32 0, i32 1
  %arrayidx650 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld649, i32 0, i64 0
  %rtvec651 = bitcast %union.rtunion_def* %arrayidx650 to %struct.rtvec_def**
  %403 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec651, align 8
  %elem652 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %403, i32 0, i32 1
  %arrayidx653 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem652, i32 0, i64 %idxprom648
  %404 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx653, align 8
  %fld654 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %404, i32 0, i32 1
  %arrayidx655 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld654, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx655 to %struct.rtx_def**
  %405 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %406 = bitcast %struct.rtx_def* %405 to i32*
  %bf.load656 = load i32, i32* %406, align 8
  %bf.value657 = and i32 %400, 1
  %bf.shl658 = shl i32 %bf.value657, 27
  %bf.clear659 = and i32 %bf.load656, -134217729
  %bf.set660 = or i32 %bf.clear659, %bf.shl658
  store i32 %bf.set660, i32* %406, align 8
  br label %for.inc.661

for.inc.661:                                      ; preds = %for.body.628
  %407 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common662 = bitcast %union.tree_node* %407 to %struct.tree_common*
  %chain663 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common662, i32 0, i32 0
  %408 = load %union.tree_node*, %union.tree_node** %chain663, align 8
  store %union.tree_node* %408, %union.tree_node** %tail, align 8
  %409 = load i32, i32* %i, align 4
  %inc664 = add nsw i32 %409, 1
  store i32 %inc664, i32* %i, align 4
  br label %for.cond.626

for.end.665:                                      ; preds = %for.cond.626
  %410 = load i32, i32* %i, align 4
  %cmp666 = icmp eq i32 %410, 0
  br i1 %cmp666, label %if.then.668, label %if.end.676

if.then.668:                                      ; preds = %for.end.665
  %411 = load %struct.rtx_def*, %struct.rtx_def** %obody, align 8
  %412 = load i32, i32* %i, align 4
  %inc669 = add nsw i32 %412, 1
  store i32 %inc669, i32* %i, align 4
  %idxprom670 = sext i32 %412 to i64
  %413 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld671 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %413, i32 0, i32 1
  %arrayidx672 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld671, i32 0, i64 0
  %rtvec673 = bitcast %union.rtunion_def* %arrayidx672 to %struct.rtvec_def**
  %414 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec673, align 8
  %elem674 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %414, i32 0, i32 1
  %arrayidx675 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem674, i32 0, i64 %idxprom670
  store %struct.rtx_def* %411, %struct.rtx_def** %arrayidx675, align 8
  br label %if.end.676

if.end.676:                                       ; preds = %if.then.668, %for.end.665
  %415 = load %union.tree_node*, %union.tree_node** %clobbers.addr, align 8
  store %union.tree_node* %415, %union.tree_node** %tail, align 8
  br label %for.cond.677

for.cond.677:                                     ; preds = %for.inc.718, %if.end.676
  %416 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %tobool678 = icmp ne %union.tree_node* %416, null
  br i1 %tobool678, label %for.body.679, label %for.end.721

for.body.679:                                     ; preds = %for.cond.677
  %417 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list681 = bitcast %union.tree_node* %417 to %struct.tree_list*
  %value682 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list681, i32 0, i32 2
  %418 = load %union.tree_node*, %union.tree_node** %value682, align 8
  %string683 = bitcast %union.tree_node* %418 to %struct.tree_string*
  %pointer684 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string683, i32 0, i32 3
  %419 = load i8*, i8** %pointer684, align 8
  store i8* %419, i8** %regname680, align 8
  %420 = load i8*, i8** %regname680, align 8
  %call686 = call i32 @decode_reg_name(i8* %420)
  store i32 %call686, i32* %j685, align 4
  %421 = load i32, i32* %j685, align 4
  %cmp687 = icmp slt i32 %421, 0
  br i1 %cmp687, label %if.then.689, label %if.end.708

if.then.689:                                      ; preds = %for.body.679
  %422 = load i32, i32* %j685, align 4
  %cmp690 = icmp eq i32 %422, -3
  br i1 %cmp690, label %if.then.692, label %if.end.693

if.then.692:                                      ; preds = %if.then.689
  br label %for.inc.718

if.end.693:                                       ; preds = %if.then.689
  %423 = load i32, i32* %j685, align 4
  %cmp694 = icmp eq i32 %423, -4
  br i1 %cmp694, label %if.then.696, label %if.end.707

if.then.696:                                      ; preds = %if.end.693
  %call697 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0)
  %call698 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call697)
  %call699 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call698)
  %424 = load i32, i32* %i, align 4
  %inc700 = add nsw i32 %424, 1
  store i32 %inc700, i32* %i, align 4
  %idxprom701 = sext i32 %424 to i64
  %425 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld702 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %425, i32 0, i32 1
  %arrayidx703 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld702, i32 0, i64 0
  %rtvec704 = bitcast %union.rtunion_def* %arrayidx703 to %struct.rtvec_def**
  %426 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec704, align 8
  %elem705 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %426, i32 0, i32 1
  %arrayidx706 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem705, i32 0, i64 %idxprom701
  store %struct.rtx_def* %call699, %struct.rtx_def** %arrayidx706, align 8
  br label %for.inc.718

if.end.707:                                       ; preds = %if.end.693
  br label %for.inc.718

if.end.708:                                       ; preds = %for.body.679
  %427 = load i32, i32* %j685, align 4
  %call709 = call %struct.rtx_def* @gen_rtx_REG(i32 2, i32 %427)
  %call710 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call709)
  %428 = load i32, i32* %i, align 4
  %inc711 = add nsw i32 %428, 1
  store i32 %inc711, i32* %i, align 4
  %idxprom712 = sext i32 %428 to i64
  %429 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %fld713 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %429, i32 0, i32 1
  %arrayidx714 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld713, i32 0, i64 0
  %rtvec715 = bitcast %union.rtunion_def* %arrayidx714 to %struct.rtvec_def**
  %430 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec715, align 8
  %elem716 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %430, i32 0, i32 1
  %arrayidx717 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem716, i32 0, i64 %idxprom712
  store %struct.rtx_def* %call710, %struct.rtx_def** %arrayidx717, align 8
  br label %for.inc.718

for.inc.718:                                      ; preds = %if.end.708, %if.end.707, %if.then.696, %if.then.692
  %431 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common719 = bitcast %union.tree_node* %431 to %struct.tree_common*
  %chain720 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common719, i32 0, i32 0
  %432 = load %union.tree_node*, %union.tree_node** %chain720, align 8
  store %union.tree_node* %432, %union.tree_node** %tail, align 8
  br label %for.cond.677

for.end.721:                                      ; preds = %for.cond.677
  %433 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8
  %call722 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %433)
  store %struct.rtx_def* %call722, %struct.rtx_def** %insn, align 8
  br label %if.end.723

if.end.723:                                       ; preds = %for.end.721, %if.then.616
  br label %if.end.724

if.end.724:                                       ; preds = %if.end.723, %if.then.603
  store i32 0, i32* %i, align 4
  br label %for.cond.725

for.cond.725:                                     ; preds = %for.inc.739, %if.end.724
  %434 = load i32, i32* %i, align 4
  %435 = load i32, i32* %noutputs, align 4
  %cmp726 = icmp slt i32 %434, %435
  br i1 %cmp726, label %for.body.728, label %for.end.741

for.body.728:                                     ; preds = %for.cond.725
  %436 = load i32, i32* %i, align 4
  %idxprom729 = sext i32 %436 to i64
  %437 = load %struct.rtx_def**, %struct.rtx_def*** %real_output_rtx, align 8
  %arrayidx730 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %437, i64 %idxprom729
  %438 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx730, align 8
  %tobool731 = icmp ne %struct.rtx_def* %438, null
  br i1 %tobool731, label %if.then.732, label %if.end.738

if.then.732:                                      ; preds = %for.body.728
  %439 = load i32, i32* %i, align 4
  %idxprom733 = sext i32 %439 to i64
  %440 = load %struct.rtx_def**, %struct.rtx_def*** %real_output_rtx, align 8
  %arrayidx734 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %440, i64 %idxprom733
  %441 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx734, align 8
  %442 = load i32, i32* %i, align 4
  %idxprom735 = sext i32 %442 to i64
  %443 = load %struct.rtx_def**, %struct.rtx_def*** %output_rtx, align 8
  %arrayidx736 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %443, i64 %idxprom735
  %444 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx736, align 8
  %call737 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %441, %struct.rtx_def* %444)
  br label %if.end.738

if.end.738:                                       ; preds = %if.then.732, %for.body.728
  br label %for.inc.739

for.inc.739:                                      ; preds = %if.end.738
  %445 = load i32, i32* %i, align 4
  %inc740 = add nsw i32 %445, 1
  store i32 %inc740, i32* %i, align 4
  br label %for.cond.725

for.end.741:                                      ; preds = %for.cond.725
  call void @free_temp_slots()
  br label %return

return:                                           ; preds = %for.end.741, %if.then.129, %if.then.123, %if.then.109, %if.then.48, %if.then.45, %if.then.15, %if.then.12
  ret void
}

declare i32 @list_length(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define internal zeroext i1 @check_operand_nalternatives(%union.tree_node* %outputs, %union.tree_node* %inputs) #0 {
entry:
  %retval = alloca i1, align 1
  %outputs.addr = alloca %union.tree_node*, align 8
  %inputs.addr = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %nalternatives = alloca i32, align 4
  %next = alloca %union.tree_node*, align 8
  %constraint = alloca i8*, align 8
  store %union.tree_node* %outputs, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %inputs, %union.tree_node** %inputs.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  %tobool = icmp ne %union.tree_node* %0, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  %tobool1 = icmp ne %union.tree_node* %1, null
  br i1 %tobool1, label %if.then, label %if.end.24

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  %tobool2 = icmp ne %union.tree_node* %2, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ %4, %cond.false ]
  %list = bitcast %union.tree_node* %cond to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %5 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  store %union.tree_node* %5, %union.tree_node** %tmp, align 8
  %6 = load %union.tree_node*, %union.tree_node** %tmp, align 8
  %list4 = bitcast %union.tree_node* %6 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list4, i32 0, i32 2
  %7 = load %union.tree_node*, %union.tree_node** %value, align 8
  %string = bitcast %union.tree_node* %7 to %struct.tree_string*
  %pointer = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 3
  %8 = load i8*, i8** %pointer, align 8
  %call = call i32 @n_occurrences(i32 44, i8* %8)
  store i32 %call, i32* %nalternatives, align 4
  %9 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  store %union.tree_node* %9, %union.tree_node** %next, align 8
  %10 = load i32, i32* %nalternatives, align 4
  %add = add nsw i32 %10, 1
  %cmp = icmp sgt i32 %add, 30
  br i1 %cmp, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.25, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %11 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %11, %union.tree_node** %tmp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.23, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %tmp, align 8
  %tobool7 = icmp ne %union.tree_node* %12, null
  br i1 %tobool7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %union.tree_node*, %union.tree_node** %tmp, align 8
  %list9 = bitcast %union.tree_node* %13 to %struct.tree_list*
  %purpose10 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list9, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %purpose10, align 8
  %list11 = bitcast %union.tree_node* %14 to %struct.tree_list*
  %value12 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list11, i32 0, i32 2
  %15 = load %union.tree_node*, %union.tree_node** %value12, align 8
  %string13 = bitcast %union.tree_node* %15 to %struct.tree_string*
  %pointer14 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string13, i32 0, i32 3
  %16 = load i8*, i8** %pointer14, align 8
  store i8* %16, i8** %constraint, align 8
  %17 = load i8*, i8** %constraint, align 8
  %call15 = call i32 @n_occurrences(i32 44, i8* %17)
  %18 = load i32, i32* %nalternatives, align 4
  %cmp16 = icmp ne i32 %call15, %18
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %while.body
  call void (i8*, ...) @error(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.26, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

if.end.18:                                        ; preds = %while.body
  %19 = load %union.tree_node*, %union.tree_node** %tmp, align 8
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %20 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %tobool19 = icmp ne %union.tree_node* %20, null
  br i1 %tobool19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %if.end.18
  %21 = load %union.tree_node*, %union.tree_node** %tmp, align 8
  %common21 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %chain22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 0
  %22 = load %union.tree_node*, %union.tree_node** %chain22, align 8
  store %union.tree_node* %22, %union.tree_node** %tmp, align 8
  br label %if.end.23

if.else:                                          ; preds = %if.end.18
  %23 = load %union.tree_node*, %union.tree_node** %next, align 8
  store %union.tree_node* %23, %union.tree_node** %tmp, align 8
  store %union.tree_node* null, %union.tree_node** %next, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.else, %if.then.20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.24

if.end.24:                                        ; preds = %while.end, %lor.lhs.false
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.24, %if.then.17, %if.then.6
  %24 = load i1, i1* %retval
  ret i1 %24
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @check_unique_operand_names(%union.tree_node* %outputs, %union.tree_node* %inputs) #0 {
entry:
  %retval = alloca i1, align 1
  %outputs.addr = alloca %union.tree_node*, align 8
  %inputs.addr = alloca %union.tree_node*, align 8
  %i = alloca %union.tree_node*, align 8
  %j = alloca %union.tree_node*, align 8
  %i_name = alloca %union.tree_node*, align 8
  %i_name22 = alloca %union.tree_node*, align 8
  store %union.tree_node* %outputs, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %inputs, %union.tree_node** %inputs.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %0, %union.tree_node** %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.15, %entry
  %1 = load %union.tree_node*, %union.tree_node** %i, align 8
  %tobool = icmp ne %union.tree_node* %1, null
  br i1 %tobool, label %for.body, label %for.end.18

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %i, align 8
  %list = bitcast %union.tree_node* %2 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %3 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %list1 = bitcast %union.tree_node* %3 to %struct.tree_list*
  %purpose2 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %purpose2, align 8
  store %union.tree_node* %4, %union.tree_node** %i_name, align 8
  %5 = load %union.tree_node*, %union.tree_node** %i_name, align 8
  %tobool3 = icmp ne %union.tree_node* %5, null
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc.15

if.end:                                           ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %i, align 8
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %7, %union.tree_node** %j, align 8
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %j, align 8
  %tobool5 = icmp ne %union.tree_node* %8, null
  br i1 %tobool5, label %for.body.6, label %for.end

for.body.6:                                       ; preds = %for.cond.4
  %9 = load %union.tree_node*, %union.tree_node** %i_name, align 8
  %10 = load %union.tree_node*, %union.tree_node** %j, align 8
  %list7 = bitcast %union.tree_node* %10 to %struct.tree_list*
  %purpose8 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list7, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %purpose8, align 8
  %list9 = bitcast %union.tree_node* %11 to %struct.tree_list*
  %purpose10 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list9, i32 0, i32 1
  %12 = load %union.tree_node*, %union.tree_node** %purpose10, align 8
  %cmp = icmp eq %union.tree_node* %9, %12
  br i1 %cmp, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %for.body.6
  br label %failure

if.end.12:                                        ; preds = %for.body.6
  br label %for.inc

for.inc:                                          ; preds = %if.end.12
  %13 = load %union.tree_node*, %union.tree_node** %j, align 8
  %common13 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %chain14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 0
  %14 = load %union.tree_node*, %union.tree_node** %chain14, align 8
  store %union.tree_node* %14, %union.tree_node** %j, align 8
  br label %for.cond.4

for.end:                                          ; preds = %for.cond.4
  br label %for.inc.15

for.inc.15:                                       ; preds = %for.end, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %i, align 8
  %common16 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %chain17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 0
  %16 = load %union.tree_node*, %union.tree_node** %chain17, align 8
  store %union.tree_node* %16, %union.tree_node** %i, align 8
  br label %for.cond

for.end.18:                                       ; preds = %for.cond
  %17 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  store %union.tree_node* %17, %union.tree_node** %i, align 8
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.60, %for.end.18
  %18 = load %union.tree_node*, %union.tree_node** %i, align 8
  %tobool20 = icmp ne %union.tree_node* %18, null
  br i1 %tobool20, label %for.body.21, label %for.end.63

for.body.21:                                      ; preds = %for.cond.19
  %19 = load %union.tree_node*, %union.tree_node** %i, align 8
  %list23 = bitcast %union.tree_node* %19 to %struct.tree_list*
  %purpose24 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list23, i32 0, i32 1
  %20 = load %union.tree_node*, %union.tree_node** %purpose24, align 8
  %list25 = bitcast %union.tree_node* %20 to %struct.tree_list*
  %purpose26 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list25, i32 0, i32 1
  %21 = load %union.tree_node*, %union.tree_node** %purpose26, align 8
  store %union.tree_node* %21, %union.tree_node** %i_name22, align 8
  %22 = load %union.tree_node*, %union.tree_node** %i_name22, align 8
  %tobool27 = icmp ne %union.tree_node* %22, null
  br i1 %tobool27, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %for.body.21
  br label %for.inc.60

if.end.29:                                        ; preds = %for.body.21
  %23 = load %union.tree_node*, %union.tree_node** %i, align 8
  %common30 = bitcast %union.tree_node* %23 to %struct.tree_common*
  %chain31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 0
  %24 = load %union.tree_node*, %union.tree_node** %chain31, align 8
  store %union.tree_node* %24, %union.tree_node** %j, align 8
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.42, %if.end.29
  %25 = load %union.tree_node*, %union.tree_node** %j, align 8
  %tobool33 = icmp ne %union.tree_node* %25, null
  br i1 %tobool33, label %for.body.34, label %for.end.45

for.body.34:                                      ; preds = %for.cond.32
  %26 = load %union.tree_node*, %union.tree_node** %i_name22, align 8
  %27 = load %union.tree_node*, %union.tree_node** %j, align 8
  %list35 = bitcast %union.tree_node* %27 to %struct.tree_list*
  %purpose36 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list35, i32 0, i32 1
  %28 = load %union.tree_node*, %union.tree_node** %purpose36, align 8
  %list37 = bitcast %union.tree_node* %28 to %struct.tree_list*
  %purpose38 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list37, i32 0, i32 1
  %29 = load %union.tree_node*, %union.tree_node** %purpose38, align 8
  %cmp39 = icmp eq %union.tree_node* %26, %29
  br i1 %cmp39, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %for.body.34
  br label %failure

if.end.41:                                        ; preds = %for.body.34
  br label %for.inc.42

for.inc.42:                                       ; preds = %if.end.41
  %30 = load %union.tree_node*, %union.tree_node** %j, align 8
  %common43 = bitcast %union.tree_node* %30 to %struct.tree_common*
  %chain44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 0
  %31 = load %union.tree_node*, %union.tree_node** %chain44, align 8
  store %union.tree_node* %31, %union.tree_node** %j, align 8
  br label %for.cond.32

for.end.45:                                       ; preds = %for.cond.32
  %32 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %32, %union.tree_node** %j, align 8
  br label %for.cond.46

for.cond.46:                                      ; preds = %for.inc.56, %for.end.45
  %33 = load %union.tree_node*, %union.tree_node** %j, align 8
  %tobool47 = icmp ne %union.tree_node* %33, null
  br i1 %tobool47, label %for.body.48, label %for.end.59

for.body.48:                                      ; preds = %for.cond.46
  %34 = load %union.tree_node*, %union.tree_node** %i_name22, align 8
  %35 = load %union.tree_node*, %union.tree_node** %j, align 8
  %list49 = bitcast %union.tree_node* %35 to %struct.tree_list*
  %purpose50 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list49, i32 0, i32 1
  %36 = load %union.tree_node*, %union.tree_node** %purpose50, align 8
  %list51 = bitcast %union.tree_node* %36 to %struct.tree_list*
  %purpose52 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list51, i32 0, i32 1
  %37 = load %union.tree_node*, %union.tree_node** %purpose52, align 8
  %cmp53 = icmp eq %union.tree_node* %34, %37
  br i1 %cmp53, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %for.body.48
  br label %failure

if.end.55:                                        ; preds = %for.body.48
  br label %for.inc.56

for.inc.56:                                       ; preds = %if.end.55
  %38 = load %union.tree_node*, %union.tree_node** %j, align 8
  %common57 = bitcast %union.tree_node* %38 to %struct.tree_common*
  %chain58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 0
  %39 = load %union.tree_node*, %union.tree_node** %chain58, align 8
  store %union.tree_node* %39, %union.tree_node** %j, align 8
  br label %for.cond.46

for.end.59:                                       ; preds = %for.cond.46
  br label %for.inc.60

for.inc.60:                                       ; preds = %for.end.59, %if.then.28
  %40 = load %union.tree_node*, %union.tree_node** %i, align 8
  %common61 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %chain62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 0
  %41 = load %union.tree_node*, %union.tree_node** %chain62, align 8
  store %union.tree_node* %41, %union.tree_node** %i, align 8
  br label %for.cond.19

for.end.63:                                       ; preds = %for.cond.19
  store i1 true, i1* %retval
  br label %return

failure:                                          ; preds = %if.then.54, %if.then.40, %if.then.11
  %42 = load %union.tree_node*, %union.tree_node** %i, align 8
  %list64 = bitcast %union.tree_node* %42 to %struct.tree_list*
  %purpose65 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list64, i32 0, i32 1
  %43 = load %union.tree_node*, %union.tree_node** %purpose65, align 8
  %list66 = bitcast %union.tree_node* %43 to %struct.tree_list*
  %purpose67 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list66, i32 0, i32 1
  %44 = load %union.tree_node*, %union.tree_node** %purpose67, align 8
  %identifier = bitcast %union.tree_node* %44 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %45 = load i8*, i8** %str, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.27, i32 0, i32 0), i8* %45)
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %failure, %for.end.63
  %46 = load i1, i1* %retval
  ret i1 %46
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @resolve_operand_names(%union.tree_node* %string, %union.tree_node* %outputs, %union.tree_node* %inputs, i8** %pconstraints) #0 {
entry:
  %string.addr = alloca %union.tree_node*, align 8
  %outputs.addr = alloca %union.tree_node*, align 8
  %inputs.addr = alloca %union.tree_node*, align 8
  %pconstraints.addr = alloca i8**, align 8
  %buffer = alloca i8*, align 8
  %p = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  %c = alloca i8*, align 8
  store %union.tree_node* %string, %union.tree_node** %string.addr, align 8
  store %union.tree_node* %outputs, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %inputs, %union.tree_node** %inputs.addr, align 8
  store i8** %pconstraints, i8*** %pconstraints.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %string.addr, align 8
  %string1 = bitcast %union.tree_node* %0 to %struct.tree_string*
  %pointer = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1, i32 0, i32 3
  %1 = load i8*, i8** %pointer, align 8
  %call = call noalias i8* @xstrdup(i8* %1)
  store i8* %call, i8** %buffer, align 8
  %2 = load i8*, i8** %buffer, align 8
  store i8* %2, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.18, %if.else.16, %entry
  %3 = load i8*, i8** %p, align 8
  %call2 = call i8* @strchr(i8* %3, i32 37) #7
  store i8* %call2, i8** %p, align 8
  %cmp = icmp ne i8* %call2, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv, 91
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 1
  store i8* %add.ptr, i8** %p, align 8
  br label %if.end.18

if.else:                                          ; preds = %while.body
  %7 = load i8*, i8** %p, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %8 to i32
  %and = and i32 %conv6, 255
  %idxprom = sext i32 %and to i64
  %arrayidx7 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i32 0, i64 %idxprom
  %9 = load i16, i16* %arrayidx7, align 2
  %conv8 = zext i16 %9 to i32
  %and9 = and i32 %conv8, 136
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %land.lhs.true, label %if.else.16

land.lhs.true:                                    ; preds = %if.else
  %10 = load i8*, i8** %p, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %10, i64 2
  %11 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %11 to i32
  %cmp12 = icmp eq i32 %conv11, 91
  br i1 %cmp12, label %if.then.14, label %if.else.16

if.then.14:                                       ; preds = %land.lhs.true
  %12 = load i8*, i8** %p, align 8
  %add.ptr15 = getelementptr inbounds i8, i8* %12, i64 2
  store i8* %add.ptr15, i8** %p, align 8
  br label %if.end

if.else.16:                                       ; preds = %land.lhs.true, %if.else
  %13 = load i8*, i8** %p, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %13, i64 1
  store i8* %add.ptr17, i8** %p, align 8
  br label %while.cond

if.end:                                           ; preds = %if.then.14
  br label %if.end.18

if.end.18:                                        ; preds = %if.end, %if.then
  %14 = load i8*, i8** %p, align 8
  %15 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  %16 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  %call19 = call i8* @resolve_operand_name_1(i8* %14, %union.tree_node* %15, %union.tree_node* %16)
  store i8* %call19, i8** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %buffer, align 8
  %call20 = call i64 @strlen(i8* %17) #7
  %conv21 = trunc i64 %call20 to i32
  %18 = load i8*, i8** %buffer, align 8
  %call22 = call %union.tree_node* @build_string(i32 %conv21, i8* %18)
  store %union.tree_node* %call22, %union.tree_node** %string.addr, align 8
  %19 = load i8*, i8** %buffer, align 8
  call void @free(i8* %19) #5
  %20 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %20, %union.tree_node** %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool23 = icmp ne %union.tree_node* %21, null
  br i1 %tobool23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list = bitcast %union.tree_node* %22 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %23 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %list24 = bitcast %union.tree_node* %23 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list24, i32 0, i32 2
  %24 = load %union.tree_node*, %union.tree_node** %value, align 8
  %string25 = bitcast %union.tree_node* %24 to %struct.tree_string*
  %pointer26 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string25, i32 0, i32 3
  %25 = load i8*, i8** %pointer26, align 8
  %26 = load i8**, i8*** %pconstraints.addr, align 8
  store i8* %25, i8** %26, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %28 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %28, %union.tree_node** %t, align 8
  %29 = load i8**, i8*** %pconstraints.addr, align 8
  %incdec.ptr = getelementptr inbounds i8*, i8** %29, i32 1
  store i8** %incdec.ptr, i8*** %pconstraints.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  store %union.tree_node* %30, %union.tree_node** %t, align 8
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.51, %for.end
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool28 = icmp ne %union.tree_node* %31, null
  br i1 %tobool28, label %for.body.29, label %for.end.55

for.body.29:                                      ; preds = %for.cond.27
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list30 = bitcast %union.tree_node* %32 to %struct.tree_list*
  %purpose31 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list30, i32 0, i32 1
  %33 = load %union.tree_node*, %union.tree_node** %purpose31, align 8
  %list32 = bitcast %union.tree_node* %33 to %struct.tree_list*
  %value33 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list32, i32 0, i32 2
  %34 = load %union.tree_node*, %union.tree_node** %value33, align 8
  %string34 = bitcast %union.tree_node* %34 to %struct.tree_string*
  %pointer35 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string34, i32 0, i32 3
  %35 = load i8*, i8** %pointer35, align 8
  store i8* %35, i8** %c, align 8
  %36 = load i8*, i8** %c, align 8
  %call36 = call i8* @strchr(i8* %36, i32 91) #7
  %cmp37 = icmp eq i8* %call36, null
  br i1 %cmp37, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %for.body.29
  %37 = load i8*, i8** %c, align 8
  %38 = load i8**, i8*** %pconstraints.addr, align 8
  store i8* %37, i8** %38, align 8
  br label %if.end.50

if.else.40:                                       ; preds = %for.body.29
  %39 = load i8*, i8** %c, align 8
  %call41 = call noalias i8* @xstrdup(i8* %39)
  store i8* %call41, i8** %buffer, align 8
  store i8* %call41, i8** %p, align 8
  br label %while.cond.42

while.cond.42:                                    ; preds = %while.body.46, %if.else.40
  %40 = load i8*, i8** %p, align 8
  %call43 = call i8* @strchr(i8* %40, i32 91) #7
  store i8* %call43, i8** %p, align 8
  %cmp44 = icmp ne i8* %call43, null
  br i1 %cmp44, label %while.body.46, label %while.end.48

while.body.46:                                    ; preds = %while.cond.42
  %41 = load i8*, i8** %p, align 8
  %42 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  %43 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  %call47 = call i8* @resolve_operand_name_1(i8* %41, %union.tree_node* %42, %union.tree_node* %43)
  store i8* %call47, i8** %p, align 8
  br label %while.cond.42

while.end.48:                                     ; preds = %while.cond.42
  %44 = load i8*, i8** %buffer, align 8
  %call49 = call i8* @ggc_alloc_string(i8* %44, i32 -1)
  %45 = load i8**, i8*** %pconstraints.addr, align 8
  store i8* %call49, i8** %45, align 8
  %46 = load i8*, i8** %buffer, align 8
  call void @free(i8* %46) #5
  br label %if.end.50

if.end.50:                                        ; preds = %while.end.48, %if.then.39
  br label %for.inc.51

for.inc.51:                                       ; preds = %if.end.50
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common52 = bitcast %union.tree_node* %47 to %struct.tree_common*
  %chain53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 0
  %48 = load %union.tree_node*, %union.tree_node** %chain53, align 8
  store %union.tree_node* %48, %union.tree_node** %t, align 8
  %49 = load i8**, i8*** %pconstraints.addr, align 8
  %incdec.ptr54 = getelementptr inbounds i8*, i8** %49, i32 1
  store i8** %incdec.ptr54, i8*** %pconstraints.addr, align 8
  br label %for.cond.27

for.end.55:                                       ; preds = %for.cond.27
  %50 = load %union.tree_node*, %union.tree_node** %string.addr, align 8
  ret %union.tree_node* %50
}

declare %union.tree_node* @build_string(i32, i8*) #2

declare i32 @decode_reg_name(i8*) #2

declare i32 @mark_addressable(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define internal zeroext i1 @parse_input_constraint(i8** %constraint_p, i32 %input_num, i32 %ninputs, i32 %noutputs, i32 %ninout, i8** %constraints, i8* %allows_mem, i8* %allows_reg) #0 {
entry:
  %retval = alloca i1, align 1
  %constraint_p.addr = alloca i8**, align 8
  %input_num.addr = alloca i32, align 4
  %ninputs.addr = alloca i32, align 4
  %noutputs.addr = alloca i32, align 4
  %ninout.addr = alloca i32, align 4
  %constraints.addr = alloca i8**, align 8
  %allows_mem.addr = alloca i8*, align 8
  %allows_reg.addr = alloca i8*, align 8
  %constraint = alloca i8*, align 8
  %orig_constraint = alloca i8*, align 8
  %c_len = alloca i64, align 8
  %j = alloca i64, align 8
  %end = alloca i8*, align 8
  %match = alloca i64, align 8
  store i8** %constraint_p, i8*** %constraint_p.addr, align 8
  store i32 %input_num, i32* %input_num.addr, align 4
  store i32 %ninputs, i32* %ninputs.addr, align 4
  store i32 %noutputs, i32* %noutputs.addr, align 4
  store i32 %ninout, i32* %ninout.addr, align 4
  store i8** %constraints, i8*** %constraints.addr, align 8
  store i8* %allows_mem, i8** %allows_mem.addr, align 8
  store i8* %allows_reg, i8** %allows_reg.addr, align 8
  %0 = load i8**, i8*** %constraint_p.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %constraint, align 8
  %2 = load i8*, i8** %constraint, align 8
  store i8* %2, i8** %orig_constraint, align 8
  %3 = load i8*, i8** %constraint, align 8
  %call = call i64 @strlen(i8* %3) #7
  store i64 %call, i64* %c_len, align 8
  %4 = load i8*, i8** %allows_mem.addr, align 8
  store i8 0, i8* %4, align 1
  %5 = load i8*, i8** %allows_reg.addr, align 8
  store i8 0, i8* %5, align 1
  store i64 0, i64* %j, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i64, i64* %j, align 8
  %7 = load i64, i64* %c_len, align 8
  %cmp = icmp ult i64 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i64, i64* %j, align 8
  %9 = load i8*, i8** %constraint, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %8
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  switch i32 %conv, label %sw.default [
    i32 43, label %sw.bb
    i32 61, label %sw.bb
    i32 38, label %sw.bb
    i32 37, label %sw.bb.5
    i32 86, label %sw.bb.12
    i32 109, label %sw.bb.12
    i32 111, label %sw.bb.12
    i32 60, label %sw.bb.13
    i32 62, label %sw.bb.13
    i32 63, label %sw.bb.13
    i32 33, label %sw.bb.13
    i32 42, label %sw.bb.13
    i32 35, label %sw.bb.13
    i32 69, label %sw.bb.13
    i32 70, label %sw.bb.13
    i32 71, label %sw.bb.13
    i32 72, label %sw.bb.13
    i32 115, label %sw.bb.13
    i32 105, label %sw.bb.13
    i32 110, label %sw.bb.13
    i32 73, label %sw.bb.13
    i32 74, label %sw.bb.13
    i32 75, label %sw.bb.13
    i32 76, label %sw.bb.13
    i32 77, label %sw.bb.13
    i32 78, label %sw.bb.13
    i32 79, label %sw.bb.13
    i32 80, label %sw.bb.13
    i32 44, label %sw.bb.13
    i32 48, label %sw.bb.14
    i32 49, label %sw.bb.14
    i32 50, label %sw.bb.14
    i32 51, label %sw.bb.14
    i32 52, label %sw.bb.14
    i32 53, label %sw.bb.14
    i32 54, label %sw.bb.14
    i32 55, label %sw.bb.14
    i32 56, label %sw.bb.14
    i32 57, label %sw.bb.14
    i32 112, label %sw.bb.38
    i32 114, label %sw.bb.38
    i32 103, label %sw.bb.39
    i32 88, label %sw.bb.39
  ]

sw.bb:                                            ; preds = %for.body, %for.body, %for.body
  %11 = load i8*, i8** %constraint, align 8
  %12 = load i8*, i8** %orig_constraint, align 8
  %cmp1 = icmp eq i8* %11, %12
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %13 = load i64, i64* %j, align 8
  %14 = load i8*, i8** %constraint, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %14, i64 %13
  %15 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %15 to i32
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.22, i32 0, i32 0), i32 %conv4)
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.epilog

sw.bb.5:                                          ; preds = %for.body
  %16 = load i8*, i8** %constraint, align 8
  %17 = load i8*, i8** %orig_constraint, align 8
  %cmp6 = icmp eq i8* %16, %17
  br i1 %cmp6, label %land.lhs.true, label %if.end.11

land.lhs.true:                                    ; preds = %sw.bb.5
  %18 = load i32, i32* %input_num.addr, align 4
  %add = add nsw i32 %18, 1
  %19 = load i32, i32* %ninputs.addr, align 4
  %20 = load i32, i32* %ninout.addr, align 4
  %sub = sub nsw i32 %19, %20
  %cmp8 = icmp eq i32 %add, %sub
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

if.end.11:                                        ; preds = %land.lhs.true, %sw.bb.5
  br label %sw.epilog

sw.bb.12:                                         ; preds = %for.body, %for.body, %for.body
  %21 = load i8*, i8** %allows_mem.addr, align 8
  store i8 1, i8* %21, align 1
  br label %sw.epilog

sw.bb.13:                                         ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  br label %sw.epilog

sw.bb.14:                                         ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %22 = load i8*, i8** %constraint, align 8
  %23 = load i64, i64* %j, align 8
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 %23
  %call15 = call i64 @strtoul(i8* %add.ptr, i8** %end, i32 10) #5
  store i64 %call15, i64* %match, align 8
  %24 = load i64, i64* %match, align 8
  %25 = load i32, i32* %noutputs.addr, align 4
  %conv16 = sext i32 %25 to i64
  %cmp17 = icmp uge i64 %24, %conv16
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %sw.bb.14
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.23, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb.14
  %26 = load i8*, i8** %end, align 8
  %27 = load i8, i8* %26, align 1
  %conv21 = sext i8 %27 to i32
  %cmp22 = icmp eq i32 %conv21, 0
  br i1 %cmp22, label %land.lhs.true.24, label %if.else

land.lhs.true.24:                                 ; preds = %if.end.20
  %28 = load i64, i64* %j, align 8
  %cmp25 = icmp eq i64 %28, 0
  br i1 %cmp25, label %if.then.34, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.24
  %29 = load i64, i64* %j, align 8
  %cmp27 = icmp eq i64 %29, 1
  br i1 %cmp27, label %land.lhs.true.29, label %if.else

land.lhs.true.29:                                 ; preds = %lor.lhs.false
  %30 = load i8*, i8** %constraint, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %30, i64 0
  %31 = load i8, i8* %arrayidx30, align 1
  %conv31 = sext i8 %31 to i32
  %cmp32 = icmp eq i32 %conv31, 37
  br i1 %cmp32, label %if.then.34, label %if.else

if.then.34:                                       ; preds = %land.lhs.true.29, %land.lhs.true.24
  %32 = load i64, i64* %match, align 8
  %33 = load i8**, i8*** %constraints.addr, align 8
  %arrayidx35 = getelementptr inbounds i8*, i8** %33, i64 %32
  %34 = load i8*, i8** %arrayidx35, align 8
  store i8* %34, i8** %constraint, align 8
  %35 = load i8*, i8** %constraint, align 8
  %36 = load i8**, i8*** %constraint_p.addr, align 8
  store i8* %35, i8** %36, align 8
  %37 = load i8*, i8** %constraint, align 8
  %call36 = call i64 @strlen(i8* %37) #7
  store i64 %call36, i64* %c_len, align 8
  store i64 0, i64* %j, align 8
  br label %sw.epilog

if.else:                                          ; preds = %land.lhs.true.29, %lor.lhs.false, %if.end.20
  %38 = load i8*, i8** %end, align 8
  %39 = load i8*, i8** %constraint, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %38 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %39 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %j, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.else
  br label %sw.bb.38

sw.bb.38:                                         ; preds = %for.body, %for.body, %if.end.37
  %40 = load i8*, i8** %allows_reg.addr, align 8
  store i8 1, i8* %40, align 1
  br label %sw.epilog

sw.bb.39:                                         ; preds = %for.body, %for.body
  %41 = load i8*, i8** %allows_reg.addr, align 8
  store i8 1, i8* %41, align 1
  %42 = load i8*, i8** %allows_mem.addr, align 8
  store i8 1, i8* %42, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %43 = load i64, i64* %j, align 8
  %44 = load i8*, i8** %constraint, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %44, i64 %43
  %45 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %45 to i32
  %and = and i32 %conv41, 255
  %idxprom = sext i32 %and to i64
  %arrayidx42 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i32 0, i64 %idxprom
  %46 = load i16, i16* %arrayidx42, align 2
  %conv43 = zext i16 %46 to i32
  %and44 = and i32 %conv43, 136
  %tobool = icmp ne i32 %and44, 0
  br i1 %tobool, label %if.end.48, label %if.then.45

if.then.45:                                       ; preds = %sw.default
  %47 = load i64, i64* %j, align 8
  %48 = load i8*, i8** %constraint, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %48, i64 %47
  %49 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %49 to i32
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.24, i32 0, i32 0), i32 %conv47)
  store i1 false, i1* %retval
  br label %return

if.end.48:                                        ; preds = %sw.default
  %50 = load i64, i64* %j, align 8
  %51 = load i8*, i8** %constraint, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %51, i64 %50
  %52 = load i8, i8* %arrayidx49, align 1
  %conv50 = sext i8 %52 to i32
  %cmp51 = icmp eq i32 %conv50, 114
  br i1 %cmp51, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.48
  br label %cond.end.210

cond.false:                                       ; preds = %if.end.48
  %53 = load i64, i64* %j, align 8
  %54 = load i8*, i8** %constraint, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %54, i64 %53
  %55 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %55 to i32
  %cmp55 = icmp eq i32 %conv54, 82
  br i1 %cmp55, label %cond.true.57, label %cond.false.58

cond.true.57:                                     ; preds = %cond.false
  br label %cond.end.208

cond.false.58:                                    ; preds = %cond.false
  %56 = load i64, i64* %j, align 8
  %57 = load i8*, i8** %constraint, align 8
  %arrayidx59 = getelementptr inbounds i8, i8* %57, i64 %56
  %58 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %58 to i32
  %cmp61 = icmp eq i32 %conv60, 113
  br i1 %cmp61, label %cond.true.63, label %cond.false.66

cond.true.63:                                     ; preds = %cond.false.58
  %59 = load i32, i32* @target_flags, align 4
  %and64 = and i32 %59, 33554432
  %tobool65 = icmp ne i32 %and64, 0
  %cond = select i1 %tobool65, i32 12, i32 8
  br label %cond.end.206

cond.false.66:                                    ; preds = %cond.false.58
  %60 = load i64, i64* %j, align 8
  %61 = load i8*, i8** %constraint, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %61, i64 %60
  %62 = load i8, i8* %arrayidx67, align 1
  %conv68 = sext i8 %62 to i32
  %cmp69 = icmp eq i32 %conv68, 81
  br i1 %cmp69, label %cond.true.71, label %cond.false.72

cond.true.71:                                     ; preds = %cond.false.66
  br label %cond.end.204

cond.false.72:                                    ; preds = %cond.false.66
  %63 = load i64, i64* %j, align 8
  %64 = load i8*, i8** %constraint, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %64, i64 %63
  %65 = load i8, i8* %arrayidx73, align 1
  %conv74 = sext i8 %65 to i32
  %cmp75 = icmp eq i32 %conv74, 102
  br i1 %cmp75, label %cond.true.77, label %cond.false.83

cond.true.77:                                     ; preds = %cond.false.72
  %66 = load i32, i32* @target_flags, align 4
  %and78 = and i32 %66, 1
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true.77
  %67 = load i32, i32* @target_flags, align 4
  %and80 = and i32 %67, 32
  %tobool81 = icmp ne i32 %and80, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true.77
  %68 = phi i1 [ true, %cond.true.77 ], [ %tobool81, %lor.rhs ]
  %cond82 = select i1 %68, i32 15, i32 0
  br label %cond.end.202

cond.false.83:                                    ; preds = %cond.false.72
  %69 = load i64, i64* %j, align 8
  %70 = load i8*, i8** %constraint, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %70, i64 %69
  %71 = load i8, i8* %arrayidx84, align 1
  %conv85 = sext i8 %71 to i32
  %cmp86 = icmp eq i32 %conv85, 116
  br i1 %cmp86, label %cond.true.88, label %cond.false.96

cond.true.88:                                     ; preds = %cond.false.83
  %72 = load i32, i32* @target_flags, align 4
  %and89 = and i32 %72, 1
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %lor.end.94, label %lor.rhs.91

lor.rhs.91:                                       ; preds = %cond.true.88
  %73 = load i32, i32* @target_flags, align 4
  %and92 = and i32 %73, 32
  %tobool93 = icmp ne i32 %and92, 0
  br label %lor.end.94

lor.end.94:                                       ; preds = %lor.rhs.91, %cond.true.88
  %74 = phi i1 [ true, %cond.true.88 ], [ %tobool93, %lor.rhs.91 ]
  %cond95 = select i1 %74, i32 13, i32 0
  br label %cond.end.200

cond.false.96:                                    ; preds = %cond.false.83
  %75 = load i64, i64* %j, align 8
  %76 = load i8*, i8** %constraint, align 8
  %arrayidx97 = getelementptr inbounds i8, i8* %76, i64 %75
  %77 = load i8, i8* %arrayidx97, align 1
  %conv98 = sext i8 %77 to i32
  %cmp99 = icmp eq i32 %conv98, 117
  br i1 %cmp99, label %cond.true.101, label %cond.false.109

cond.true.101:                                    ; preds = %cond.false.96
  %78 = load i32, i32* @target_flags, align 4
  %and102 = and i32 %78, 1
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %lor.end.107, label %lor.rhs.104

lor.rhs.104:                                      ; preds = %cond.true.101
  %79 = load i32, i32* @target_flags, align 4
  %and105 = and i32 %79, 32
  %tobool106 = icmp ne i32 %and105, 0
  br label %lor.end.107

lor.end.107:                                      ; preds = %lor.rhs.104, %cond.true.101
  %80 = phi i1 [ true, %cond.true.101 ], [ %tobool106, %lor.rhs.104 ]
  %cond108 = select i1 %80, i32 14, i32 0
  br label %cond.end.198

cond.false.109:                                   ; preds = %cond.false.96
  %81 = load i64, i64* %j, align 8
  %82 = load i8*, i8** %constraint, align 8
  %arrayidx110 = getelementptr inbounds i8, i8* %82, i64 %81
  %83 = load i8, i8* %arrayidx110, align 1
  %conv111 = sext i8 %83 to i32
  %cmp112 = icmp eq i32 %conv111, 97
  br i1 %cmp112, label %cond.true.114, label %cond.false.115

cond.true.114:                                    ; preds = %cond.false.109
  br label %cond.end.196

cond.false.115:                                   ; preds = %cond.false.109
  %84 = load i64, i64* %j, align 8
  %85 = load i8*, i8** %constraint, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %85, i64 %84
  %86 = load i8, i8* %arrayidx116, align 1
  %conv117 = sext i8 %86 to i32
  %cmp118 = icmp eq i32 %conv117, 98
  br i1 %cmp118, label %cond.true.120, label %cond.false.121

cond.true.120:                                    ; preds = %cond.false.115
  br label %cond.end.194

cond.false.121:                                   ; preds = %cond.false.115
  %87 = load i64, i64* %j, align 8
  %88 = load i8*, i8** %constraint, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %88, i64 %87
  %89 = load i8, i8* %arrayidx122, align 1
  %conv123 = sext i8 %89 to i32
  %cmp124 = icmp eq i32 %conv123, 99
  br i1 %cmp124, label %cond.true.126, label %cond.false.127

cond.true.126:                                    ; preds = %cond.false.121
  br label %cond.end.192

cond.false.127:                                   ; preds = %cond.false.121
  %90 = load i64, i64* %j, align 8
  %91 = load i8*, i8** %constraint, align 8
  %arrayidx128 = getelementptr inbounds i8, i8* %91, i64 %90
  %92 = load i8, i8* %arrayidx128, align 1
  %conv129 = sext i8 %92 to i32
  %cmp130 = icmp eq i32 %conv129, 100
  br i1 %cmp130, label %cond.true.132, label %cond.false.133

cond.true.132:                                    ; preds = %cond.false.127
  br label %cond.end.190

cond.false.133:                                   ; preds = %cond.false.127
  %93 = load i64, i64* %j, align 8
  %94 = load i8*, i8** %constraint, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %94, i64 %93
  %95 = load i8, i8* %arrayidx134, align 1
  %conv135 = sext i8 %95 to i32
  %cmp136 = icmp eq i32 %conv135, 120
  br i1 %cmp136, label %cond.true.138, label %cond.false.143

cond.true.138:                                    ; preds = %cond.false.133
  %96 = load i32, i32* @target_flags, align 4
  %and139 = and i32 %96, 327680
  %cmp140 = icmp ne i32 %and139, 0
  %cond142 = select i1 %cmp140, i32 16, i32 0
  br label %cond.end.188

cond.false.143:                                   ; preds = %cond.false.133
  %97 = load i64, i64* %j, align 8
  %98 = load i8*, i8** %constraint, align 8
  %arrayidx144 = getelementptr inbounds i8, i8* %98, i64 %97
  %99 = load i8, i8* %arrayidx144, align 1
  %conv145 = sext i8 %99 to i32
  %cmp146 = icmp eq i32 %conv145, 89
  br i1 %cmp146, label %cond.true.148, label %cond.false.153

cond.true.148:                                    ; preds = %cond.false.143
  %100 = load i32, i32* @target_flags, align 4
  %and149 = and i32 %100, 262144
  %cmp150 = icmp ne i32 %and149, 0
  %cond152 = select i1 %cmp150, i32 16, i32 0
  br label %cond.end.186

cond.false.153:                                   ; preds = %cond.false.143
  %101 = load i64, i64* %j, align 8
  %102 = load i8*, i8** %constraint, align 8
  %arrayidx154 = getelementptr inbounds i8, i8* %102, i64 %101
  %103 = load i8, i8* %arrayidx154, align 1
  %conv155 = sext i8 %103 to i32
  %cmp156 = icmp eq i32 %conv155, 121
  br i1 %cmp156, label %cond.true.158, label %cond.false.163

cond.true.158:                                    ; preds = %cond.false.153
  %104 = load i32, i32* @target_flags, align 4
  %and159 = and i32 %104, 16384
  %cmp160 = icmp ne i32 %and159, 0
  %cond162 = select i1 %cmp160, i32 17, i32 0
  br label %cond.end.184

cond.false.163:                                   ; preds = %cond.false.153
  %105 = load i64, i64* %j, align 8
  %106 = load i8*, i8** %constraint, align 8
  %arrayidx164 = getelementptr inbounds i8, i8* %106, i64 %105
  %107 = load i8, i8* %arrayidx164, align 1
  %conv165 = sext i8 %107 to i32
  %cmp166 = icmp eq i32 %conv165, 65
  br i1 %cmp166, label %cond.true.168, label %cond.false.169

cond.true.168:                                    ; preds = %cond.false.163
  br label %cond.end.182

cond.false.169:                                   ; preds = %cond.false.163
  %108 = load i64, i64* %j, align 8
  %109 = load i8*, i8** %constraint, align 8
  %arrayidx170 = getelementptr inbounds i8, i8* %109, i64 %108
  %110 = load i8, i8* %arrayidx170, align 1
  %conv171 = sext i8 %110 to i32
  %cmp172 = icmp eq i32 %conv171, 68
  br i1 %cmp172, label %cond.true.174, label %cond.false.175

cond.true.174:                                    ; preds = %cond.false.169
  br label %cond.end

cond.false.175:                                   ; preds = %cond.false.169
  %111 = load i64, i64* %j, align 8
  %112 = load i8*, i8** %constraint, align 8
  %arrayidx176 = getelementptr inbounds i8, i8* %112, i64 %111
  %113 = load i8, i8* %arrayidx176, align 1
  %conv177 = sext i8 %113 to i32
  %cmp178 = icmp eq i32 %conv177, 83
  %cond180 = select i1 %cmp178, i32 5, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.175, %cond.true.174
  %cond181 = phi i32 [ 6, %cond.true.174 ], [ %cond180, %cond.false.175 ]
  br label %cond.end.182

cond.end.182:                                     ; preds = %cond.end, %cond.true.168
  %cond183 = phi i32 [ 7, %cond.true.168 ], [ %cond181, %cond.end ]
  br label %cond.end.184

cond.end.184:                                     ; preds = %cond.end.182, %cond.true.158
  %cond185 = phi i32 [ %cond162, %cond.true.158 ], [ %cond183, %cond.end.182 ]
  br label %cond.end.186

cond.end.186:                                     ; preds = %cond.end.184, %cond.true.148
  %cond187 = phi i32 [ %cond152, %cond.true.148 ], [ %cond185, %cond.end.184 ]
  br label %cond.end.188

cond.end.188:                                     ; preds = %cond.end.186, %cond.true.138
  %cond189 = phi i32 [ %cond142, %cond.true.138 ], [ %cond187, %cond.end.186 ]
  br label %cond.end.190

cond.end.190:                                     ; preds = %cond.end.188, %cond.true.132
  %cond191 = phi i32 [ 2, %cond.true.132 ], [ %cond189, %cond.end.188 ]
  br label %cond.end.192

cond.end.192:                                     ; preds = %cond.end.190, %cond.true.126
  %cond193 = phi i32 [ 3, %cond.true.126 ], [ %cond191, %cond.end.190 ]
  br label %cond.end.194

cond.end.194:                                     ; preds = %cond.end.192, %cond.true.120
  %cond195 = phi i32 [ 4, %cond.true.120 ], [ %cond193, %cond.end.192 ]
  br label %cond.end.196

cond.end.196:                                     ; preds = %cond.end.194, %cond.true.114
  %cond197 = phi i32 [ 1, %cond.true.114 ], [ %cond195, %cond.end.194 ]
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.end.196, %lor.end.107
  %cond199 = phi i32 [ %cond108, %lor.end.107 ], [ %cond197, %cond.end.196 ]
  br label %cond.end.200

cond.end.200:                                     ; preds = %cond.end.198, %lor.end.94
  %cond201 = phi i32 [ %cond95, %lor.end.94 ], [ %cond199, %cond.end.198 ]
  br label %cond.end.202

cond.end.202:                                     ; preds = %cond.end.200, %lor.end
  %cond203 = phi i32 [ %cond82, %lor.end ], [ %cond201, %cond.end.200 ]
  br label %cond.end.204

cond.end.204:                                     ; preds = %cond.end.202, %cond.true.71
  %cond205 = phi i32 [ 8, %cond.true.71 ], [ %cond203, %cond.end.202 ]
  br label %cond.end.206

cond.end.206:                                     ; preds = %cond.end.204, %cond.true.63
  %cond207 = phi i32 [ %cond, %cond.true.63 ], [ %cond205, %cond.end.204 ]
  br label %cond.end.208

cond.end.208:                                     ; preds = %cond.end.206, %cond.true.57
  %cond209 = phi i32 [ 11, %cond.true.57 ], [ %cond207, %cond.end.206 ]
  br label %cond.end.210

cond.end.210:                                     ; preds = %cond.end.208, %cond.true
  %cond211 = phi i32 [ 12, %cond.true ], [ %cond209, %cond.end.208 ]
  %cmp212 = icmp ne i32 %cond211, 0
  br i1 %cmp212, label %if.then.214, label %if.else.215

if.then.214:                                      ; preds = %cond.end.210
  %114 = load i8*, i8** %allows_reg.addr, align 8
  store i8 1, i8* %114, align 1
  br label %if.end.216

if.else.215:                                      ; preds = %cond.end.210
  %115 = load i8*, i8** %allows_reg.addr, align 8
  store i8 1, i8* %115, align 1
  %116 = load i8*, i8** %allows_mem.addr, align 8
  store i8 1, i8* %116, align 1
  br label %if.end.216

if.end.216:                                       ; preds = %if.else.215, %if.then.214
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.216, %sw.bb.39, %sw.bb.38, %if.then.34, %sw.bb.13, %sw.bb.12, %if.end.11, %if.end
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %117 = load i64, i64* %j, align 8
  %inc = add i64 %117, 1
  store i64 %inc, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.45, %if.then.19, %if.then.10, %if.then
  %118 = load i1, i1* %retval
  ret i1 %118
}

declare %struct.rtx_def* @protect_from_queue(%struct.rtx_def*, i32) #2

declare %struct.rtx_def* @gen_reg_rtx(i32) #2

declare %struct.rtx_def* @assign_temp(%union.tree_node*, i32, i32, i32) #2

declare %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #2

declare %struct.rtvec_def* @rtvec_alloc(i32) #2

declare %struct.rtx_def* @gen_rtx_fmt_ssiEEsi(i32, i32, i8*, i8*, i32, %struct.rtvec_def*, %struct.rtvec_def*, i8*, i32) #2

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

declare i32 @asm_operand_ok(%struct.rtx_def*, i8*) #2

declare %struct.rtx_def* @force_const_mem(i32, %struct.rtx_def*) #2

declare %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #2

declare i32 @queued_subexp_p(%struct.rtx_def*) #2

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #1

declare %struct.rtx_def* @gen_rtx_fmt_E(i32, i32, %struct.rtvec_def*) #2

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_rtx_fmt_0(i32, i32) #2

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

declare void @free_temp_slots() #2

; Function Attrs: nounwind uwtable
define void @expand_expr_stmt(%union.tree_node* %exp) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  call void @expand_expr_stmt_value(%union.tree_node* %0, i32 -1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_expr_stmt_value(%union.tree_node* %exp, i32 %want_value, i32 %maybe_last) #0 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %want_value.addr = alloca i32, align 4
  %maybe_last.addr = alloca i32, align 4
  %value = alloca %struct.rtx_def*, align 8
  %type = alloca %union.tree_node*, align 8
  %lab = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  store i32 %want_value, i32* %want_value.addr, align 4
  store i32 %maybe_last, i32* %maybe_last.addr, align 4
  %0 = load i32, i32* %want_value.addr, align 4
  %cmp = icmp eq i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1
  %2 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %2, i32 0, i32 10
  %3 = load i32, i32* %x_expr_stmts_for_value, align 4
  %cmp1 = icmp ne i32 %3, 0
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %want_value.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %want_value.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end.39, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1
  %6 = load %struct.stmt_status*, %struct.stmt_status** %stmt2, align 8
  %x_expr_stmts_for_value3 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %6, i32 0, i32 10
  %7 = load i32, i32* %x_expr_stmts_for_value3, align 4
  %cmp4 = icmp eq i32 %7, 0
  br i1 %cmp4, label %land.lhs.true.7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %8 = load i32, i32* %maybe_last.addr, align 4
  %tobool6 = icmp ne i32 %8, 0
  br i1 %tobool6, label %if.end.39, label %land.lhs.true.7

land.lhs.true.7:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp8 = icmp ne %union.tree_node* %9, %10
  br i1 %cmp8, label %if.then.10, label %if.end.39

if.then.10:                                       ; preds = %land.lhs.true.7
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %side_effects_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 8
  %bf.clear = and i32 %bf.lshr, 1
  %tobool11 = icmp ne i32 %bf.clear, 0
  br i1 %tobool11, label %if.else, label %if.then.12

if.then.12:                                       ; preds = %if.then.10
  %12 = load i32, i32* @extra_warnings, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %land.lhs.true.16, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %if.then.12
  %13 = load i32, i32* @warn_unused_value, align 4
  %tobool15 = icmp ne i32 %13, 0
  br i1 %tobool15, label %land.lhs.true.16, label %if.end.34

land.lhs.true.16:                                 ; preds = %lor.lhs.false.14, %if.then.12
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common17 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2
  %bf.load18 = load i32, i32* %code, align 8
  %bf.clear19 = and i32 %bf.load18, 255
  %cmp20 = icmp eq i32 %bf.clear19, 114
  br i1 %cmp20, label %land.lhs.true.22, label %if.then.31

land.lhs.true.22:                                 ; preds = %land.lhs.true.16
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common23 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 1
  %16 = load %union.tree_node*, %union.tree_node** %type24, align 8
  %common25 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %code26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2
  %bf.load27 = load i32, i32* %code26, align 8
  %bf.clear28 = and i32 %bf.load27, 255
  %cmp29 = icmp eq i32 %bf.clear28, 5
  br i1 %cmp29, label %if.end.34, label %if.then.31

if.then.31:                                       ; preds = %land.lhs.true.22, %land.lhs.true.16
  %17 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt32 = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 1
  %18 = load %struct.stmt_status*, %struct.stmt_status** %stmt32, align 8
  %x_emit_filename = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %18, i32 0, i32 11
  %19 = load i8*, i8** %x_emit_filename, align 8
  %20 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt33 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 1
  %21 = load %struct.stmt_status*, %struct.stmt_status** %stmt33, align 8
  %x_emit_lineno = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %21, i32 0, i32 12
  %22 = load i32, i32* %x_emit_lineno, align 4
  call void (i8*, i32, i8*, ...) @warning_with_file_and_line(i8* %19, i32 %22, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i32 0, i32 0))
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.31, %land.lhs.true.22, %lor.lhs.false.14
  br label %if.end.38

if.else:                                          ; preds = %if.then.10
  %23 = load i32, i32* @warn_unused_value, align 4
  %tobool35 = icmp ne i32 %23, 0
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.else
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call = call i32 @warn_if_unused_value(%union.tree_node* %24)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.36, %if.else
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.end.34
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %land.lhs.true.7, %lor.lhs.false, %if.end
  %25 = load i32, i32* %want_value.addr, align 4
  %tobool40 = icmp ne i32 %25, 0
  br i1 %tobool40, label %land.lhs.true.41, label %if.end.55

land.lhs.true.41:                                 ; preds = %if.end.39
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common42 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 1
  %27 = load %union.tree_node*, %union.tree_node** %type43, align 8
  %common44 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %code45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2
  %bf.load46 = load i32, i32* %code45, align 8
  %bf.clear47 = and i32 %bf.load46, 255
  %cmp48 = icmp eq i32 %bf.clear47, 23
  br i1 %cmp48, label %if.then.50, label %if.end.55

if.then.50:                                       ; preds = %land.lhs.true.41
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common51 = bitcast %union.tree_node* %28 to %struct.tree_common*
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 1
  %29 = load %union.tree_node*, %union.tree_node** %type52, align 8
  %call53 = call %union.tree_node* @build_pointer_type(%union.tree_node* %29)
  %30 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %call54 = call %union.tree_node* @build1(i32 121, %union.tree_node* %call53, %union.tree_node* %30)
  store %union.tree_node* %call54, %union.tree_node** %exp.addr, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.50, %land.lhs.true.41, %if.end.39
  %31 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %32 = load i32, i32* %want_value.addr, align 4
  %tobool56 = icmp ne i32 %32, 0
  br i1 %tobool56, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.55
  br label %cond.end

cond.false:                                       ; preds = %if.end.55
  %33 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %33, %cond.false ]
  %call57 = call %struct.rtx_def* @expand_expr(%union.tree_node* %31, %struct.rtx_def* %cond, i32 0, i32 0)
  store %struct.rtx_def* %call57, %struct.rtx_def** %value, align 8
  %34 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common58 = bitcast %union.tree_node* %34 to %struct.tree_common*
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 1
  %35 = load %union.tree_node*, %union.tree_node** %type59, align 8
  store %union.tree_node* %35, %union.tree_node** %type, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %tobool60 = icmp ne %struct.rtx_def* %36, null
  br i1 %tobool60, label %land.lhs.true.61, label %if.end.97

land.lhs.true.61:                                 ; preds = %cond.end
  %37 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load62 = load i32, i32* %38, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 66
  br i1 %cmp64, label %land.lhs.true.66, label %if.end.97

land.lhs.true.66:                                 ; preds = %land.lhs.true.61
  %39 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common67 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2
  %bf.load68 = load i32, i32* %volatile_flag, align 8
  %bf.lshr69 = lshr i32 %bf.load68, 11
  %bf.clear70 = and i32 %bf.lshr69, 1
  %tobool71 = icmp ne i32 %bf.clear70, 0
  br i1 %tobool71, label %if.then.72, label %if.end.97

if.then.72:                                       ; preds = %land.lhs.true.66
  %40 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type73 = bitcast %union.tree_node* %40 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type73, i32 0, i32 6
  %bf.load74 = load i32, i32* %mode, align 4
  %bf.lshr75 = lshr i32 %bf.load74, 9
  %bf.clear76 = and i32 %bf.lshr75, 127
  %cmp77 = icmp eq i32 %bf.clear76, 0
  br i1 %cmp77, label %if.then.79, label %if.else.80

if.then.79:                                       ; preds = %if.then.72
  br label %if.end.96

if.else.80:                                       ; preds = %if.then.72
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type81 = bitcast %union.tree_node* %41 to %struct.tree_type*
  %mode82 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type81, i32 0, i32 6
  %bf.load83 = load i32, i32* %mode82, align 4
  %bf.lshr84 = lshr i32 %bf.load83, 9
  %bf.clear85 = and i32 %bf.lshr84, 127
  %cmp86 = icmp ne i32 %bf.clear85, 51
  br i1 %cmp86, label %if.then.88, label %if.else.90

if.then.88:                                       ; preds = %if.else.80
  %42 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %call89 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %42)
  store %struct.rtx_def* %call89, %struct.rtx_def** %value, align 8
  br label %if.end.95

if.else.90:                                       ; preds = %if.else.80
  %call91 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call91, %struct.rtx_def** %lab, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type92 = bitcast %union.tree_node* %45 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type92, i32 0, i32 2
  %46 = load %union.tree_node*, %union.tree_node** %size, align 8
  %call93 = call %struct.rtx_def* @expand_expr(%union.tree_node* %46, %struct.rtx_def* null, i32 0, i32 0)
  %47 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %43, %struct.rtx_def* %44, i32 103, %struct.rtx_def* %call93, i32 51, i32 0, %struct.rtx_def* %47)
  %48 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8
  %call94 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %48)
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.90, %if.then.88
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.then.79
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %land.lhs.true.66, %land.lhs.true.61, %cond.end
  %49 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  call void @preserve_temp_slots(%struct.rtx_def* %49)
  call void @free_temp_slots()
  %50 = load i32, i32* %want_value.addr, align 4
  %tobool98 = icmp ne i32 %50, 0
  br i1 %tobool98, label %if.then.99, label %if.end.102

if.then.99:                                       ; preds = %if.end.97
  %51 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8
  %52 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt100 = getelementptr inbounds %struct.function, %struct.function* %52, i32 0, i32 1
  %53 = load %struct.stmt_status*, %struct.stmt_status** %stmt100, align 8
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %53, i32 0, i32 9
  store %struct.rtx_def* %51, %struct.rtx_def** %x_last_expr_value, align 8
  %54 = load %union.tree_node*, %union.tree_node** %type, align 8
  %55 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt101 = getelementptr inbounds %struct.function, %struct.function* %55, i32 0, i32 1
  %56 = load %struct.stmt_status*, %struct.stmt_status** %stmt101, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %56, i32 0, i32 8
  store %union.tree_node* %54, %union.tree_node** %x_last_expr_type, align 8
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.99, %if.end.97
  call void @emit_queue()
  ret void
}

declare void @warning_with_file_and_line(i8*, i32, i8*, ...) #2

; Function Attrs: nounwind uwtable
define i32 @warn_if_unused_value(%union.tree_node* %exp) #0 {
entry:
  %retval = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %used_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load3 = load i32, i32* %code, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp = icmp eq i32 %bf.clear4, 5
  br i1 %cmp, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common7 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  switch i32 %bf.clear10, label %sw.default [
    i32 130, label %sw.bb
    i32 132, label %sw.bb
    i32 129, label %sw.bb
    i32 131, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 120, label %sw.bb
    i32 134, label %sw.bb
    i32 55, label %sw.bb
    i32 140, label %sw.bb
    i32 52, label %sw.bb.11
    i32 118, label %sw.bb.13
    i32 92, label %sw.bb.18
    i32 91, label %sw.bb.18
    i32 47, label %sw.bb.23
    i32 115, label %sw.bb.52
    i32 114, label %sw.bb.52
    i32 116, label %sw.bb.52
    i32 41, label %sw.bb.95
  ]

sw.bb:                                            ; preds = %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6, %if.end.6
  store i32 0, i32* %retval
  br label %return

sw.bb.11:                                         ; preds = %if.end.6
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp12 = bitcast %union.tree_node* %4 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %call = call i32 @warn_if_unused_value(%union.tree_node* %5)
  store i32 %call, i32* %retval
  br label %return

sw.bb.13:                                         ; preds = %if.end.6
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp14 = bitcast %union.tree_node* %6 to %struct.tree_exp*
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 2
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i32 0, i64 1
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8
  %call17 = call i32 @warn_if_unused_value(%union.tree_node* %7)
  store i32 %call17, i32* %retval
  br label %return

sw.bb.18:                                         ; preds = %if.end.6, %if.end.6
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp19 = bitcast %union.tree_node* %8 to %struct.tree_exp*
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 2
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i32 0, i64 1
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8
  %call22 = call i32 @warn_if_unused_value(%union.tree_node* %9)
  store i32 %call22, i32* %retval
  br label %return

sw.bb.23:                                         ; preds = %if.end.6
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common24 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2
  %bf.load25 = load i32, i32* %static_flag, align 8
  %bf.lshr26 = lshr i32 %bf.load25, 18
  %bf.clear27 = and i32 %bf.lshr26, 1
  %tobool28 = icmp ne i32 %bf.clear27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.23
  store i32 0, i32* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.23
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp31 = bitcast %union.tree_node* %11 to %struct.tree_exp*
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 2
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i32 0, i64 0
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8
  %call34 = call i32 @warn_if_unused_value(%union.tree_node* %12)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.30
  store i32 1, i32* %retval
  br label %return

if.end.37:                                        ; preds = %if.end.30
  %13 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp38 = bitcast %union.tree_node* %13 to %struct.tree_exp*
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 2
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i32 0, i64 1
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8
  %common41 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %constant_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2
  %bf.load42 = load i32, i32* %constant_flag, align 8
  %bf.lshr43 = lshr i32 %bf.load42, 9
  %bf.clear44 = and i32 %bf.lshr43, 1
  %tobool45 = icmp ne i32 %bf.clear44, 0
  br i1 %tobool45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %if.end.37
  store i32 0, i32* %retval
  br label %return

if.end.47:                                        ; preds = %if.end.37
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp48 = bitcast %union.tree_node* %15 to %struct.tree_exp*
  %operands49 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 2
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands49, i32 0, i64 1
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8
  %call51 = call i32 @warn_if_unused_value(%union.tree_node* %16)
  store i32 %call51, i32* %retval
  br label %return

sw.bb.52:                                         ; preds = %if.end.6, %if.end.6, %if.end.6
  %17 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common53 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %static_flag54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2
  %bf.load55 = load i32, i32* %static_flag54, align 8
  %bf.lshr56 = lshr i32 %bf.load55, 18
  %bf.clear57 = and i32 %bf.lshr56, 1
  %tobool58 = icmp ne i32 %bf.clear57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %sw.bb.52
  store i32 0, i32* %retval
  br label %return

if.end.60:                                        ; preds = %sw.bb.52
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp61 = bitcast %union.tree_node* %18 to %struct.tree_exp*
  %operands62 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp61, i32 0, i32 2
  %arrayidx63 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands62, i32 0, i64 0
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx63, align 8
  store %union.tree_node* %19, %union.tree_node** %tem, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.60
  %20 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common64 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %code65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2
  %bf.load66 = load i32, i32* %code65, align 8
  %bf.clear67 = and i32 %bf.load66, 255
  %cmp68 = icmp eq i32 %bf.clear67, 114
  br i1 %cmp68, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %21 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common69 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %code70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2
  %bf.load71 = load i32, i32* %code70, align 8
  %bf.clear72 = and i32 %bf.load71, 255
  %cmp73 = icmp eq i32 %bf.clear72, 115
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %22 = phi i1 [ true, %while.cond ], [ %cmp73, %lor.rhs ]
  br i1 %22, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %23 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %exp74 = bitcast %union.tree_node* %23 to %struct.tree_exp*
  %operands75 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp74, i32 0, i32 2
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands75, i32 0, i64 0
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8
  store %union.tree_node* %24, %union.tree_node** %tem, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %25 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common77 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %code78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2
  %bf.load79 = load i32, i32* %code78, align 8
  %bf.clear80 = and i32 %bf.load79, 255
  %cmp81 = icmp eq i32 %bf.clear80, 48
  br i1 %cmp81, label %if.then.93, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %26 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common82 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %code83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2
  %bf.load84 = load i32, i32* %code83, align 8
  %bf.clear85 = and i32 %bf.load84, 255
  %cmp86 = icmp eq i32 %bf.clear85, 49
  br i1 %cmp86, label %if.then.93, label %lor.lhs.false.87

lor.lhs.false.87:                                 ; preds = %lor.lhs.false
  %27 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common88 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %code89 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 2
  %bf.load90 = load i32, i32* %code89, align 8
  %bf.clear91 = and i32 %bf.load90, 255
  %cmp92 = icmp eq i32 %bf.clear91, 53
  br i1 %cmp92, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %lor.lhs.false.87, %lor.lhs.false, %while.end
  store i32 0, i32* %retval
  br label %return

if.end.94:                                        ; preds = %lor.lhs.false.87
  br label %maybe_warn

sw.bb.95:                                         ; preds = %if.end.6
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp96 = bitcast %union.tree_node* %28 to %struct.tree_exp*
  %operands97 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp96, i32 0, i32 2
  %arrayidx98 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands97, i32 0, i64 0
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx98, align 8
  %common99 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %type100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 1
  %30 = load %union.tree_node*, %union.tree_node** %type100, align 8
  %common101 = bitcast %union.tree_node* %30 to %struct.tree_common*
  %code102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 2
  %bf.load103 = load i32, i32* %code102, align 8
  %bf.clear104 = and i32 %bf.load103, 255
  %cmp105 = icmp eq i32 %bf.clear104, 15
  br i1 %cmp105, label %if.then.106, label %if.end.111

if.then.106:                                      ; preds = %sw.bb.95
  %31 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %exp107 = bitcast %union.tree_node* %31 to %struct.tree_exp*
  %operands108 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp107, i32 0, i32 2
  %arrayidx109 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands108, i32 0, i64 0
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx109, align 8
  %call110 = call i32 @warn_if_unused_value(%union.tree_node* %32)
  store i32 %call110, i32* %retval
  br label %return

if.end.111:                                       ; preds = %sw.bb.95
  br label %sw.default

sw.default:                                       ; preds = %if.end.6, %if.end.111
  %33 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common112 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %code113 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common112, i32 0, i32 2
  %bf.load114 = load i32, i32* %code113, align 8
  %bf.clear115 = and i32 %bf.load114, 255
  %idxprom = sext i32 %bf.clear115 to i64
  %arrayidx116 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %34 = load i8, i8* %arrayidx116, align 1
  %conv = sext i8 %34 to i32
  %cmp117 = icmp eq i32 %conv, 100
  br i1 %cmp117, label %land.lhs.true, label %lor.lhs.false.119

lor.lhs.false.119:                                ; preds = %sw.default
  %35 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common120 = bitcast %union.tree_node* %35 to %struct.tree_common*
  %code121 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common120, i32 0, i32 2
  %bf.load122 = load i32, i32* %code121, align 8
  %bf.clear123 = and i32 %bf.load122, 255
  %idxprom124 = sext i32 %bf.clear123 to i64
  %arrayidx125 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom124
  %36 = load i8, i8* %arrayidx125, align 1
  %conv126 = sext i8 %36 to i32
  %cmp127 = icmp eq i32 %conv126, 114
  br i1 %cmp127, label %land.lhs.true, label %if.end.135

land.lhs.true:                                    ; preds = %lor.lhs.false.119, %sw.default
  %37 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common129 = bitcast %union.tree_node* %37 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2
  %bf.load130 = load i32, i32* %volatile_flag, align 8
  %bf.lshr131 = lshr i32 %bf.load130, 11
  %bf.clear132 = and i32 %bf.lshr131, 1
  %tobool133 = icmp ne i32 %bf.clear132, 0
  br i1 %tobool133, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end.135:                                       ; preds = %land.lhs.true, %lor.lhs.false.119
  %38 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common136 = bitcast %union.tree_node* %38 to %struct.tree_common*
  %code137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2
  %bf.load138 = load i32, i32* %code137, align 8
  %bf.clear139 = and i32 %bf.load138, 255
  %idxprom140 = sext i32 %bf.clear139 to i64
  %arrayidx141 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom140
  %39 = load i8, i8* %arrayidx141, align 1
  %conv142 = sext i8 %39 to i32
  %cmp143 = icmp eq i32 %conv142, 101
  br i1 %cmp143, label %land.lhs.true.145, label %if.end.155

land.lhs.true.145:                                ; preds = %if.end.135
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common146 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %code147 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common146, i32 0, i32 2
  %bf.load148 = load i32, i32* %code147, align 8
  %bf.clear149 = and i32 %bf.load148, 255
  %idxprom150 = sext i32 %bf.clear149 to i64
  %arrayidx151 = getelementptr inbounds [256 x i32], [256 x i32]* @tree_code_length, i32 0, i64 %idxprom150
  %41 = load i32, i32* %arrayidx151, align 4
  %cmp152 = icmp eq i32 %41, 0
  br i1 %cmp152, label %if.then.154, label %if.end.155

if.then.154:                                      ; preds = %land.lhs.true.145
  store i32 0, i32* %retval
  br label %return

if.end.155:                                       ; preds = %land.lhs.true.145, %if.end.135
  br label %maybe_warn

maybe_warn:                                       ; preds = %if.end.155, %if.end.94
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common156 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common156, i32 0, i32 2
  %bf.load157 = load i32, i32* %side_effects_flag, align 8
  %bf.lshr158 = lshr i32 %bf.load157, 8
  %bf.clear159 = and i32 %bf.lshr158, 1
  %tobool160 = icmp ne i32 %bf.clear159, 0
  br i1 %tobool160, label %if.then.161, label %if.end.162

if.then.161:                                      ; preds = %maybe_warn
  store i32 0, i32* %retval
  br label %return

if.end.162:                                       ; preds = %maybe_warn
  %43 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 1
  %44 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_emit_filename = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %44, i32 0, i32 11
  %45 = load i8*, i8** %x_emit_filename, align 8
  %46 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt163 = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 1
  %47 = load %struct.stmt_status*, %struct.stmt_status** %stmt163, align 8
  %x_emit_lineno = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %47, i32 0, i32 12
  %48 = load i32, i32* %x_emit_lineno, align 4
  call void (i8*, i32, i8*, ...) @warning_with_file_and_line(i8* %45, i32 %48, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.15, i32 0, i32 0))
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.162, %if.then.161, %if.then.154, %if.then.134, %if.then.106, %if.then.93, %if.then.59, %if.end.47, %if.then.46, %if.then.36, %if.then.29, %sw.bb.18, %sw.bb.13, %sw.bb.11, %sw.bb, %if.then.5, %if.then
  %49 = load i32, i32* %retval
  ret i32 %49
}

declare %union.tree_node* @build1(i32, %union.tree_node*, %union.tree_node*) #2

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare void @emit_cmp_and_jump_insns(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, %struct.rtx_def*) #2

declare void @preserve_temp_slots(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @clear_last_expr() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @expand_start_stmt_expr(i32 %has_scope) #0 {
entry:
  %has_scope.addr = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store i32 %has_scope, i32* %has_scope.addr, align 4
  %call = call %union.tree_node* @make_node(i32 120)
  store %union.tree_node* %call, %union.tree_node** %t, align 8
  call void @do_pending_stack_adjust()
  %0 = load i32, i32* %has_scope.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t, align 8
  call void @start_sequence_for_rtl_expr(%union.tree_node* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  call void @start_sequence()
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 2
  %3 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status, %struct.expr_status* %3, i32 0, i32 1
  %4 = load i32, i32* %x_inhibit_defer_pop, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %x_inhibit_defer_pop, align 4
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1
  %6 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %6, i32 0, i32 10
  %7 = load i32, i32* %x_expr_stmts_for_value, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %x_expr_stmts_for_value, align 4
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 1
  %9 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %9, i32 0, i32 9
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_expr_value, align 8
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8
  ret %union.tree_node* %10
}

declare %union.tree_node* @make_node(i32) #2

declare void @start_sequence_for_rtl_expr(%union.tree_node*) #2

declare void @start_sequence() #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @expand_end_stmt_expr(%union.tree_node* %t) #0 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 2
  %1 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status, %struct.expr_status* %1, i32 0, i32 1
  %2 = load i32, i32* %x_inhibit_defer_pop, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %x_inhibit_defer_pop, align 4
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 9
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1
  %7 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %7, i32 0, i32 8
  %8 = load %union.tree_node*, %union.tree_node** %x_last_expr_type, align 8
  %tobool2 = icmp ne %union.tree_node* %8, null
  br i1 %tobool2, label %if.else, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt3 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1
  %11 = load %struct.stmt_status*, %struct.stmt_status** %stmt3, align 8
  %x_last_expr_value4 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %11, i32 0, i32 9
  store %struct.rtx_def* %9, %struct.rtx_def** %x_last_expr_value4, align 8
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %13 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt5 = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 1
  %14 = load %struct.stmt_status*, %struct.stmt_status** %stmt5, align 8
  %x_last_expr_type6 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %14, i32 0, i32 8
  store %union.tree_node* %12, %union.tree_node** %x_last_expr_type6, align 8
  br label %if.end.61

if.else:                                          ; preds = %lor.lhs.false
  %15 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt7 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1
  %16 = load %struct.stmt_status*, %struct.stmt_status** %stmt7, align 8
  %x_last_expr_value8 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %16, i32 0, i32 9
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value8, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load = load i32, i32* %18, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 61
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %19 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt9 = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 1
  %20 = load %struct.stmt_status*, %struct.stmt_status** %stmt9, align 8
  %x_last_expr_value10 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %20, i32 0, i32 9
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value10, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load11 = load i32, i32* %22, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 67
  br i1 %cmp13, label %if.end, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %land.lhs.true
  %23 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt15 = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 1
  %24 = load %struct.stmt_status*, %struct.stmt_status** %stmt15, align 8
  %x_last_expr_value16 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %24, i32 0, i32 9
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value16, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load17 = load i32, i32* %26, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 68
  br i1 %cmp19, label %if.end, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.14
  %27 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt21 = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 1
  %28 = load %struct.stmt_status*, %struct.stmt_status** %stmt21, align 8
  %x_last_expr_value22 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %28, i32 0, i32 9
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value22, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load23 = load i32, i32* %30, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 54
  br i1 %cmp25, label %if.end, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false.20
  %31 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt27 = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 1
  %32 = load %struct.stmt_status*, %struct.stmt_status** %stmt27, align 8
  %x_last_expr_value28 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %32, i32 0, i32 9
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value28, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load29 = load i32, i32* %34, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 55
  br i1 %cmp31, label %if.end, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %lor.lhs.false.26
  %35 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt33 = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 1
  %36 = load %struct.stmt_status*, %struct.stmt_status** %stmt33, align 8
  %x_last_expr_value34 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %36, i32 0, i32 9
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value34, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load35 = load i32, i32* %38, align 8
  %bf.clear36 = and i32 %bf.load35, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 58
  br i1 %cmp37, label %if.end, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %lor.lhs.false.32
  %39 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt39 = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 1
  %40 = load %struct.stmt_status*, %struct.stmt_status** %stmt39, align 8
  %x_last_expr_value40 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %40, i32 0, i32 9
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value40, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load41 = load i32, i32* %42, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 134
  br i1 %cmp43, label %if.end, label %lor.lhs.false.44

lor.lhs.false.44:                                 ; preds = %lor.lhs.false.38
  %43 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt45 = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 1
  %44 = load %struct.stmt_status*, %struct.stmt_status** %stmt45, align 8
  %x_last_expr_value46 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %44, i32 0, i32 9
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value46, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load47 = load i32, i32* %46, align 8
  %bf.clear48 = and i32 %bf.load47, 65535
  %cmp49 = icmp eq i32 %bf.clear48, 56
  br i1 %cmp49, label %if.end, label %lor.lhs.false.50

lor.lhs.false.50:                                 ; preds = %lor.lhs.false.44
  %47 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt51 = getelementptr inbounds %struct.function, %struct.function* %47, i32 0, i32 1
  %48 = load %struct.stmt_status*, %struct.stmt_status** %stmt51, align 8
  %x_last_expr_value52 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %48, i32 0, i32 9
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value52, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load53 = load i32, i32* %50, align 8
  %bf.clear54 = and i32 %bf.load53, 65535
  %cmp55 = icmp eq i32 %bf.clear54, 140
  br i1 %cmp55, label %if.end, label %if.then.56

if.then.56:                                       ; preds = %lor.lhs.false.50
  %51 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt57 = getelementptr inbounds %struct.function, %struct.function* %51, i32 0, i32 1
  %52 = load %struct.stmt_status*, %struct.stmt_status** %stmt57, align 8
  %x_last_expr_value58 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %52, i32 0, i32 9
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value58, align 8
  %call = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %53, i32 0)
  %54 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt59 = getelementptr inbounds %struct.function, %struct.function* %54, i32 0, i32 1
  %55 = load %struct.stmt_status*, %struct.stmt_status** %stmt59, align 8
  %x_last_expr_value60 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %55, i32 0, i32 9
  store %struct.rtx_def* %call, %struct.rtx_def** %x_last_expr_value60, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.56, %lor.lhs.false.50, %lor.lhs.false.44, %lor.lhs.false.38, %lor.lhs.false.32, %lor.lhs.false.26, %lor.lhs.false.20, %lor.lhs.false.14, %land.lhs.true, %if.else
  br label %if.end.61

if.end.61:                                        ; preds = %if.end, %if.then
  call void @emit_queue()
  %56 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt62 = getelementptr inbounds %struct.function, %struct.function* %56, i32 0, i32 1
  %57 = load %struct.stmt_status*, %struct.stmt_status** %stmt62, align 8
  %x_last_expr_type63 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %57, i32 0, i32 8
  %58 = load %union.tree_node*, %union.tree_node** %x_last_expr_type63, align 8
  %59 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %common = bitcast %union.tree_node* %59 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  store %union.tree_node* %58, %union.tree_node** %type, align 8
  %60 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt64 = getelementptr inbounds %struct.function, %struct.function* %60, i32 0, i32 1
  %61 = load %struct.stmt_status*, %struct.stmt_status** %stmt64, align 8
  %x_last_expr_value65 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %61, i32 0, i32 9
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value65, align 8
  %63 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %exp = bitcast %union.tree_node* %63 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %64 = bitcast %union.tree_node** %arrayidx to %struct.rtx_def**
  store %struct.rtx_def* %62, %struct.rtx_def** %64, align 8
  %call66 = call %struct.rtx_def* @get_insns()
  %65 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %exp67 = bitcast %union.tree_node* %65 to %struct.tree_exp*
  %operands68 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp67, i32 0, i32 2
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands68, i32 0, i64 0
  %66 = bitcast %union.tree_node** %arrayidx69 to %struct.rtx_def**
  store %struct.rtx_def* %call66, %struct.rtx_def** %66, align 8
  %67 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %68 = load %struct.function*, %struct.function** @cfun, align 8
  %x_rtl_expr_chain = getelementptr inbounds %struct.function, %struct.function* %68, i32 0, i32 27
  %69 = load %union.tree_node*, %union.tree_node** %x_rtl_expr_chain, align 8
  %call70 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %67, %union.tree_node* %69)
  %70 = load %struct.function*, %struct.function** @cfun, align 8
  %x_rtl_expr_chain71 = getelementptr inbounds %struct.function, %struct.function* %70, i32 0, i32 27
  store %union.tree_node* %call70, %union.tree_node** %x_rtl_expr_chain71, align 8
  call void @end_sequence()
  %71 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %common72 = bitcast %union.tree_node* %71 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2
  %bf.load73 = load i32, i32* %side_effects_flag, align 8
  %bf.clear74 = and i32 %bf.load73, -257
  %bf.set = or i32 %bf.clear74, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  %72 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt75 = getelementptr inbounds %struct.function, %struct.function* %72, i32 0, i32 1
  %73 = load %struct.stmt_status*, %struct.stmt_status** %stmt75, align 8
  %x_last_expr_value76 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %73, i32 0, i32 9
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value76, align 8
  %call77 = call i32 @volatile_refs_p(%struct.rtx_def* %74)
  %75 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %common78 = bitcast %union.tree_node* %75 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2
  %bf.load79 = load i32, i32* %volatile_flag, align 8
  %bf.value = and i32 %call77, 1
  %bf.shl = shl i32 %bf.value, 11
  %bf.clear80 = and i32 %bf.load79, -2049
  %bf.set81 = or i32 %bf.clear80, %bf.shl
  store i32 %bf.set81, i32* %volatile_flag, align 8
  %76 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt82 = getelementptr inbounds %struct.function, %struct.function* %76, i32 0, i32 1
  %77 = load %struct.stmt_status*, %struct.stmt_status** %stmt82, align 8
  %x_last_expr_type83 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %77, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type83, align 8
  %78 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt84 = getelementptr inbounds %struct.function, %struct.function* %78, i32 0, i32 1
  %79 = load %struct.stmt_status*, %struct.stmt_status** %stmt84, align 8
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %79, i32 0, i32 10
  %80 = load i32, i32* %x_expr_stmts_for_value, align 4
  %dec = add nsw i32 %80, -1
  store i32 %dec, i32* %x_expr_stmts_for_value, align 4
  %81 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  ret %union.tree_node* %81
}

declare %struct.rtx_def* @get_insns() #2

declare void @end_sequence() #2

declare i32 @volatile_refs_p(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_start_cond(%union.tree_node* %cond, i32 %exitflag) #0 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  %exitflag.addr = alloca i32, align 4
  %thiscond = alloca %struct.nesting*, align 8
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp35 = alloca i8*, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  store i32 %exitflag, i32* %exitflag.addr, align 4
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__h, align 8
  %0 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %0, %struct.obstack** %__o, align 8
  store i32 120, i32* %__len, align 4
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4
  %2 = load i8*, i8** %chunk_limit, align 8
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3
  %4 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %5 = load i32, i32* %__len, align 4
  %conv = sext i32 %5 to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %7 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %__len, align 4
  %9 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free2 = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 3
  %10 = load i8*, i8** %next_free2, align 8
  %idx.ext = sext i32 %8 to i64
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr, i8** %next_free2, align 8
  %11 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %11, %struct.obstack** %__o1, align 8
  %12 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 2
  %13 = load i8*, i8** %object_base, align 8
  store i8* %13, i8** %value, align 8
  %14 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3
  %15 = load i8*, i8** %next_free5, align 8
  %16 = load i8*, i8** %value, align 8
  %cmp6 = icmp eq i8* %15, %16
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end
  %18 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free10 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3
  %19 = load i8*, i8** %next_free10, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %19 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast11, 0
  %20 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 6
  %21 = load i32, i32* %alignment_mask, align 4
  %conv13 = sext i32 %21 to i64
  %add = add nsw i64 %sub.ptr.sub12, %conv13
  %22 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask14 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 6
  %23 = load i32, i32* %alignment_mask14, align 4
  %neg = xor i32 %23, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8, i8* null, i64 %and
  %24 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 3
  store i8* %add.ptr16, i8** %next_free17, align 8
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free18 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 3
  %26 = load i8*, i8** %next_free18, align 8
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 1
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %29 = bitcast %struct._obstack_chunk* %28 to i8*
  %sub.ptr.lhs.cast19 = ptrtoint i8* %26 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %29 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %30 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit22 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 4
  %31 = load i8*, i8** %chunk_limit22, align 8
  %32 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk23 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk23, align 8
  %34 = bitcast %struct._obstack_chunk* %33 to i8*
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %if.end.9
  %35 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit30 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4
  %36 = load i8*, i8** %chunk_limit30, align 8
  %37 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free31 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 3
  store i8* %36, i8** %next_free31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %if.end.9
  %38 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 3
  %39 = load i8*, i8** %next_free33, align 8
  %40 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base34 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 2
  store i8* %39, i8** %object_base34, align 8
  %41 = load i8*, i8** %value, align 8
  store i8* %41, i8** %tmp35
  %42 = load i8*, i8** %tmp35
  store i8* %42, i8** %tmp
  %43 = load i8*, i8** %tmp
  %44 = bitcast i8* %43 to %struct.nesting*
  store %struct.nesting* %44, %struct.nesting** %thiscond, align 8
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 1
  %46 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %46, i32 0, i32 2
  %47 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %48 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %48, i32 0, i32 1
  store %struct.nesting* %47, %struct.nesting** %next, align 8
  %49 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt36 = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 1
  %50 = load %struct.stmt_status*, %struct.stmt_status** %stmt36, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %50, i32 0, i32 5
  %51 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  %52 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %52, i32 0, i32 0
  store %struct.nesting* %51, %struct.nesting** %all, align 8
  %53 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt37 = getelementptr inbounds %struct.function, %struct.function* %53, i32 0, i32 1
  %54 = load %struct.stmt_status*, %struct.stmt_status** %stmt37, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %54, i32 0, i32 6
  %55 = load i32, i32* %x_nesting_depth, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x_nesting_depth, align 4
  %56 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %56, i32 0, i32 2
  store i32 %inc, i32* %depth, align 4
  %call = call %struct.rtx_def* @gen_label_rtx()
  %57 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %57, i32 0, i32 4
  %cond38 = bitcast %union.anon.3* %data to %struct.anon.4*
  %next_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond38, i32 0, i32 1
  store %struct.rtx_def* %call, %struct.rtx_def** %next_label, align 8
  %58 = load i32, i32* %exitflag.addr, align 4
  %tobool = icmp ne i32 %58, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.32
  %call39 = call %struct.rtx_def* @gen_label_rtx()
  br label %cond.end

cond.false:                                       ; preds = %if.end.32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond40 = phi %struct.rtx_def* [ %call39, %cond.true ], [ null, %cond.false ]
  %59 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %59, i32 0, i32 3
  store %struct.rtx_def* %cond40, %struct.rtx_def** %exit_label, align 8
  %60 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %exit_label41 = getelementptr inbounds %struct.nesting, %struct.nesting* %60, i32 0, i32 3
  %61 = load %struct.rtx_def*, %struct.rtx_def** %exit_label41, align 8
  %62 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %data42 = getelementptr inbounds %struct.nesting, %struct.nesting* %62, i32 0, i32 4
  %cond43 = bitcast %union.anon.3* %data42 to %struct.anon.4*
  %endif_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond43, i32 0, i32 0
  store %struct.rtx_def* %61, %struct.rtx_def** %endif_label, align 8
  %63 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %64 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt44 = getelementptr inbounds %struct.function, %struct.function* %64, i32 0, i32 1
  %65 = load %struct.stmt_status*, %struct.stmt_status** %stmt44, align 8
  %x_cond_stack45 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %65, i32 0, i32 2
  store %struct.nesting* %63, %struct.nesting** %x_cond_stack45, align 8
  %66 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %67 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt46 = getelementptr inbounds %struct.function, %struct.function* %67, i32 0, i32 1
  %68 = load %struct.stmt_status*, %struct.stmt_status** %stmt46, align 8
  %x_nesting_stack47 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %68, i32 0, i32 5
  store %struct.nesting* %66, %struct.nesting** %x_nesting_stack47, align 8
  %69 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8
  %70 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %data48 = getelementptr inbounds %struct.nesting, %struct.nesting* %70, i32 0, i32 4
  %cond49 = bitcast %union.anon.3* %data48 to %struct.anon.4*
  %next_label50 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond49, i32 0, i32 1
  %71 = load %struct.rtx_def*, %struct.rtx_def** %next_label50, align 8
  call void @do_jump(%union.tree_node* %69, %struct.rtx_def* %71, %struct.rtx_def* null)
  ret void
}

declare void @_obstack_newchunk(%struct.obstack*, i32) #2

declare void @do_jump(%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_start_elseif(%union.tree_node* %cond) #0 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 2
  %2 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %2, i32 0, i32 4
  %cond1 = bitcast %union.anon.3* %data to %struct.anon.4*
  %endif_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond1, i32 0, i32 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %endif_label, align 8
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.rtx_def* @gen_label_rtx()
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt2, align 8
  %x_cond_stack3 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 2
  %6 = load %struct.nesting*, %struct.nesting** %x_cond_stack3, align 8
  %data4 = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 4
  %cond5 = bitcast %union.anon.3* %data4 to %struct.anon.4*
  %endif_label6 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond5, i32 0, i32 0
  store %struct.rtx_def* %call, %struct.rtx_def** %endif_label6, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt7 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 1
  %8 = load %struct.stmt_status*, %struct.stmt_status** %stmt7, align 8
  %x_cond_stack8 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %8, i32 0, i32 2
  %9 = load %struct.nesting*, %struct.nesting** %x_cond_stack8, align 8
  %data9 = getelementptr inbounds %struct.nesting, %struct.nesting* %9, i32 0, i32 4
  %cond10 = bitcast %union.anon.3* %data9 to %struct.anon.4*
  %endif_label11 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond10, i32 0, i32 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %endif_label11, align 8
  call void @emit_jump(%struct.rtx_def* %10)
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt12 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1
  %12 = load %struct.stmt_status*, %struct.stmt_status** %stmt12, align 8
  %x_cond_stack13 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %12, i32 0, i32 2
  %13 = load %struct.nesting*, %struct.nesting** %x_cond_stack13, align 8
  %data14 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %cond15 = bitcast %union.anon.3* %data14 to %struct.anon.4*
  %next_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond15, i32 0, i32 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %next_label, align 8
  %call16 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %14)
  %call17 = call %struct.rtx_def* @gen_label_rtx()
  %15 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt18 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1
  %16 = load %struct.stmt_status*, %struct.stmt_status** %stmt18, align 8
  %x_cond_stack19 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %16, i32 0, i32 2
  %17 = load %struct.nesting*, %struct.nesting** %x_cond_stack19, align 8
  %data20 = getelementptr inbounds %struct.nesting, %struct.nesting* %17, i32 0, i32 4
  %cond21 = bitcast %union.anon.3* %data20 to %struct.anon.4*
  %next_label22 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond21, i32 0, i32 1
  store %struct.rtx_def* %call17, %struct.rtx_def** %next_label22, align 8
  %18 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8
  %19 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt23 = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 1
  %20 = load %struct.stmt_status*, %struct.stmt_status** %stmt23, align 8
  %x_cond_stack24 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %20, i32 0, i32 2
  %21 = load %struct.nesting*, %struct.nesting** %x_cond_stack24, align 8
  %data25 = getelementptr inbounds %struct.nesting, %struct.nesting* %21, i32 0, i32 4
  %cond26 = bitcast %union.anon.3* %data25 to %struct.anon.4*
  %next_label27 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond26, i32 0, i32 1
  %22 = load %struct.rtx_def*, %struct.rtx_def** %next_label27, align 8
  call void @do_jump(%union.tree_node* %18, %struct.rtx_def* %22, %struct.rtx_def* null)
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_start_else() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 2
  %2 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %2, i32 0, i32 4
  %cond = bitcast %union.anon.3* %data to %struct.anon.4*
  %endif_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond, i32 0, i32 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %endif_label, align 8
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.rtx_def* @gen_label_rtx()
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_cond_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 2
  %6 = load %struct.nesting*, %struct.nesting** %x_cond_stack2, align 8
  %data3 = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 4
  %cond4 = bitcast %union.anon.3* %data3 to %struct.anon.4*
  %endif_label5 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond4, i32 0, i32 0
  store %struct.rtx_def* %call, %struct.rtx_def** %endif_label5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt6 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 1
  %8 = load %struct.stmt_status*, %struct.stmt_status** %stmt6, align 8
  %x_cond_stack7 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %8, i32 0, i32 2
  %9 = load %struct.nesting*, %struct.nesting** %x_cond_stack7, align 8
  %data8 = getelementptr inbounds %struct.nesting, %struct.nesting* %9, i32 0, i32 4
  %cond9 = bitcast %union.anon.3* %data8 to %struct.anon.4*
  %endif_label10 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond9, i32 0, i32 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %endif_label10, align 8
  call void @emit_jump(%struct.rtx_def* %10)
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt11 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1
  %12 = load %struct.stmt_status*, %struct.stmt_status** %stmt11, align 8
  %x_cond_stack12 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %12, i32 0, i32 2
  %13 = load %struct.nesting*, %struct.nesting** %x_cond_stack12, align 8
  %data13 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %cond14 = bitcast %union.anon.3* %data13 to %struct.anon.4*
  %next_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond14, i32 0, i32 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %next_label, align 8
  %call15 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %14)
  %15 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt16 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1
  %16 = load %struct.stmt_status*, %struct.stmt_status** %stmt16, align 8
  %x_cond_stack17 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %16, i32 0, i32 2
  %17 = load %struct.nesting*, %struct.nesting** %x_cond_stack17, align 8
  %data18 = getelementptr inbounds %struct.nesting, %struct.nesting* %17, i32 0, i32 4
  %cond19 = bitcast %union.anon.3* %data18 to %struct.anon.4*
  %next_label20 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond19, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %next_label20, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_elseif(%union.tree_node* %cond) #0 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  %call = call %struct.rtx_def* @gen_label_rtx()
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 2
  %2 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %2, i32 0, i32 4
  %cond1 = bitcast %union.anon.3* %data to %struct.anon.4*
  %next_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond1, i32 0, i32 1
  store %struct.rtx_def* %call, %struct.rtx_def** %next_label, align 8
  %3 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt2, align 8
  %x_cond_stack3 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 2
  %6 = load %struct.nesting*, %struct.nesting** %x_cond_stack3, align 8
  %data4 = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 4
  %cond5 = bitcast %union.anon.3* %data4 to %struct.anon.4*
  %next_label6 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond5, i32 0, i32 1
  %7 = load %struct.rtx_def*, %struct.rtx_def** %next_label6, align 8
  call void @do_jump(%union.tree_node* %3, %struct.rtx_def* %7, %struct.rtx_def* null)
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_cond() #0 {
entry:
  %thiscond = alloca %struct.nesting*, align 8
  %target = alloca %struct.nesting*, align 8
  %this = alloca %struct.nesting*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 2
  %2 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  store %struct.nesting* %2, %struct.nesting** %thiscond, align 8
  call void @do_pending_stack_adjust()
  %3 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %3, i32 0, i32 4
  %cond = bitcast %union.anon.3* %data to %struct.anon.4*
  %next_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond, i32 0, i32 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %next_label, align 8
  %tobool = icmp ne %struct.rtx_def* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %data1 = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %cond2 = bitcast %union.anon.3* %data1 to %struct.anon.4*
  %next_label3 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond2, i32 0, i32 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %next_label3, align 8
  %call = call %struct.rtx_def* @emit_label(%struct.rtx_def* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %data4 = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %cond5 = bitcast %union.anon.3* %data4 to %struct.anon.4*
  %endif_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond5, i32 0, i32 0
  %8 = load %struct.rtx_def*, %struct.rtx_def** %endif_label, align 8
  %tobool6 = icmp ne %struct.rtx_def* %8, null
  br i1 %tobool6, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.end
  %9 = load %struct.nesting*, %struct.nesting** %thiscond, align 8
  %data8 = getelementptr inbounds %struct.nesting, %struct.nesting* %9, i32 0, i32 4
  %cond9 = bitcast %union.anon.3* %data8 to %struct.anon.4*
  %endif_label10 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond9, i32 0, i32 0
  %10 = load %struct.rtx_def*, %struct.rtx_def** %endif_label10, align 8
  %call11 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %10)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.7, %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.12
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt13 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1
  %12 = load %struct.stmt_status*, %struct.stmt_status** %stmt13, align 8
  %x_cond_stack14 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %12, i32 0, i32 2
  %13 = load %struct.nesting*, %struct.nesting** %x_cond_stack14, align 8
  store %struct.nesting* %13, %struct.nesting** %target, align 8
  br label %do.body.15

do.body.15:                                       ; preds = %do.cond, %do.body
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt16 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1
  %15 = load %struct.stmt_status*, %struct.stmt_status** %stmt16, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %15, i32 0, i32 5
  %16 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  store %struct.nesting* %16, %struct.nesting** %this, align 8
  %17 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt17 = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 1
  %18 = load %struct.stmt_status*, %struct.stmt_status** %stmt17, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %18, i32 0, i32 3
  %19 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %20 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp = icmp eq %struct.nesting* %19, %20
  br i1 %cmp, label %if.then.18, label %if.end.23

if.then.18:                                       ; preds = %do.body.15
  %21 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt19 = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 1
  %22 = load %struct.stmt_status*, %struct.stmt_status** %stmt19, align 8
  %x_loop_stack20 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %22, i32 0, i32 3
  %23 = load %struct.nesting*, %struct.nesting** %x_loop_stack20, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %23, i32 0, i32 1
  %24 = load %struct.nesting*, %struct.nesting** %next, align 8
  %25 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt21 = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 1
  %26 = load %struct.stmt_status*, %struct.stmt_status** %stmt21, align 8
  %x_loop_stack22 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %26, i32 0, i32 3
  store %struct.nesting* %24, %struct.nesting** %x_loop_stack22, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.18, %do.body.15
  %27 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt24 = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 1
  %28 = load %struct.stmt_status*, %struct.stmt_status** %stmt24, align 8
  %x_cond_stack25 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %28, i32 0, i32 2
  %29 = load %struct.nesting*, %struct.nesting** %x_cond_stack25, align 8
  %30 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp26 = icmp eq %struct.nesting* %29, %30
  br i1 %cmp26, label %if.then.27, label %if.end.33

if.then.27:                                       ; preds = %if.end.23
  %31 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt28 = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 1
  %32 = load %struct.stmt_status*, %struct.stmt_status** %stmt28, align 8
  %x_cond_stack29 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %32, i32 0, i32 2
  %33 = load %struct.nesting*, %struct.nesting** %x_cond_stack29, align 8
  %next30 = getelementptr inbounds %struct.nesting, %struct.nesting* %33, i32 0, i32 1
  %34 = load %struct.nesting*, %struct.nesting** %next30, align 8
  %35 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt31 = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 1
  %36 = load %struct.stmt_status*, %struct.stmt_status** %stmt31, align 8
  %x_cond_stack32 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %36, i32 0, i32 2
  store %struct.nesting* %34, %struct.nesting** %x_cond_stack32, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.27, %if.end.23
  %37 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt34 = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 1
  %38 = load %struct.stmt_status*, %struct.stmt_status** %stmt34, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %38, i32 0, i32 0
  %39 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %40 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp35 = icmp eq %struct.nesting* %39, %40
  br i1 %cmp35, label %if.then.36, label %if.end.42

if.then.36:                                       ; preds = %if.end.33
  %41 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt37 = getelementptr inbounds %struct.function, %struct.function* %41, i32 0, i32 1
  %42 = load %struct.stmt_status*, %struct.stmt_status** %stmt37, align 8
  %x_block_stack38 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %42, i32 0, i32 0
  %43 = load %struct.nesting*, %struct.nesting** %x_block_stack38, align 8
  %next39 = getelementptr inbounds %struct.nesting, %struct.nesting* %43, i32 0, i32 1
  %44 = load %struct.nesting*, %struct.nesting** %next39, align 8
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt40 = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 1
  %46 = load %struct.stmt_status*, %struct.stmt_status** %stmt40, align 8
  %x_block_stack41 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %46, i32 0, i32 0
  store %struct.nesting* %44, %struct.nesting** %x_block_stack41, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.36, %if.end.33
  %47 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt43 = getelementptr inbounds %struct.function, %struct.function* %47, i32 0, i32 1
  %48 = load %struct.stmt_status*, %struct.stmt_status** %stmt43, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %48, i32 0, i32 1
  %49 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %50 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp44 = icmp eq %struct.nesting* %49, %50
  br i1 %cmp44, label %if.then.45, label %if.end.51

if.then.45:                                       ; preds = %if.end.42
  %51 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt46 = getelementptr inbounds %struct.function, %struct.function* %51, i32 0, i32 1
  %52 = load %struct.stmt_status*, %struct.stmt_status** %stmt46, align 8
  %x_stack_block_stack47 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %52, i32 0, i32 1
  %53 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack47, align 8
  %next48 = getelementptr inbounds %struct.nesting, %struct.nesting* %53, i32 0, i32 1
  %54 = load %struct.nesting*, %struct.nesting** %next48, align 8
  %55 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt49 = getelementptr inbounds %struct.function, %struct.function* %55, i32 0, i32 1
  %56 = load %struct.stmt_status*, %struct.stmt_status** %stmt49, align 8
  %x_stack_block_stack50 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %56, i32 0, i32 1
  store %struct.nesting* %54, %struct.nesting** %x_stack_block_stack50, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.45, %if.end.42
  %57 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt52 = getelementptr inbounds %struct.function, %struct.function* %57, i32 0, i32 1
  %58 = load %struct.stmt_status*, %struct.stmt_status** %stmt52, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %58, i32 0, i32 4
  %59 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %60 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp53 = icmp eq %struct.nesting* %59, %60
  br i1 %cmp53, label %if.then.54, label %if.end.60

if.then.54:                                       ; preds = %if.end.51
  %61 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt55 = getelementptr inbounds %struct.function, %struct.function* %61, i32 0, i32 1
  %62 = load %struct.stmt_status*, %struct.stmt_status** %stmt55, align 8
  %x_case_stack56 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %62, i32 0, i32 4
  %63 = load %struct.nesting*, %struct.nesting** %x_case_stack56, align 8
  %next57 = getelementptr inbounds %struct.nesting, %struct.nesting* %63, i32 0, i32 1
  %64 = load %struct.nesting*, %struct.nesting** %next57, align 8
  %65 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt58 = getelementptr inbounds %struct.function, %struct.function* %65, i32 0, i32 1
  %66 = load %struct.stmt_status*, %struct.stmt_status** %stmt58, align 8
  %x_case_stack59 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %66, i32 0, i32 4
  store %struct.nesting* %64, %struct.nesting** %x_case_stack59, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.54, %if.end.51
  %67 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt61 = getelementptr inbounds %struct.function, %struct.function* %67, i32 0, i32 1
  %68 = load %struct.stmt_status*, %struct.stmt_status** %stmt61, align 8
  %x_nesting_stack62 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %68, i32 0, i32 5
  %69 = load %struct.nesting*, %struct.nesting** %x_nesting_stack62, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %69, i32 0, i32 2
  %70 = load i32, i32* %depth, align 4
  %sub = sub nsw i32 %70, 1
  %71 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt63 = getelementptr inbounds %struct.function, %struct.function* %71, i32 0, i32 1
  %72 = load %struct.stmt_status*, %struct.stmt_status** %stmt63, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %72, i32 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4
  %73 = load %struct.nesting*, %struct.nesting** %this, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %73, i32 0, i32 0
  %74 = load %struct.nesting*, %struct.nesting** %all, align 8
  %75 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt64 = getelementptr inbounds %struct.function, %struct.function* %75, i32 0, i32 1
  %76 = load %struct.stmt_status*, %struct.stmt_status** %stmt64, align 8
  %x_nesting_stack65 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %76, i32 0, i32 5
  store %struct.nesting* %74, %struct.nesting** %x_nesting_stack65, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__o, align 8
  %77 = load %struct.nesting*, %struct.nesting** %this, align 8
  %78 = bitcast %struct.nesting* %77 to i8*
  store i8* %78, i8** %__obj, align 8
  %79 = load i8*, i8** %__obj, align 8
  %80 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %80, i32 0, i32 1
  %81 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %82 = bitcast %struct._obstack_chunk* %81 to i8*
  %cmp66 = icmp ugt i8* %79, %82
  br i1 %cmp66, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.60
  %83 = load i8*, i8** %__obj, align 8
  %84 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %84, i32 0, i32 4
  %85 = load i8*, i8** %chunk_limit, align 8
  %cmp67 = icmp ult i8* %83, %85
  br i1 %cmp67, label %if.then.68, label %if.else

if.then.68:                                       ; preds = %land.lhs.true
  %86 = load i8*, i8** %__obj, align 8
  %87 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %87, i32 0, i32 2
  store i8* %86, i8** %object_base, align 8
  %88 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %88, i32 0, i32 3
  store i8* %86, i8** %next_free, align 8
  br label %if.end.69

if.else:                                          ; preds = %land.lhs.true, %if.end.60
  %89 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %90 = load i8*, i8** %__obj, align 8
  call void @obstack_free(%struct.obstack* %89, i8* %90)
  br label %if.end.69

if.end.69:                                        ; preds = %if.else, %if.then.68
  br label %do.cond

do.cond:                                          ; preds = %if.end.69
  %91 = load %struct.nesting*, %struct.nesting** %this, align 8
  %92 = load %struct.nesting*, %struct.nesting** %target, align 8
  %cmp70 = icmp ne %struct.nesting* %91, %92
  br i1 %cmp70, label %do.body.15, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end.72

do.end.72:                                        ; preds = %do.end
  %93 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt73 = getelementptr inbounds %struct.function, %struct.function* %93, i32 0, i32 1
  %94 = load %struct.stmt_status*, %struct.stmt_status** %stmt73, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %94, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  ret void
}

declare void @obstack_free(%struct.obstack*, i8*) #2

; Function Attrs: nounwind uwtable
define %struct.nesting* @expand_start_loop(i32 %exit_flag) #0 {
entry:
  %exit_flag.addr = alloca i32, align 4
  %thisloop = alloca %struct.nesting*, align 8
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp35 = alloca i8*, align 8
  store i32 %exit_flag, i32* %exit_flag.addr, align 4
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__h, align 8
  %0 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %0, %struct.obstack** %__o, align 8
  store i32 120, i32* %__len, align 4
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4
  %2 = load i8*, i8** %chunk_limit, align 8
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3
  %4 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %5 = load i32, i32* %__len, align 4
  %conv = sext i32 %5 to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %7 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %__len, align 4
  %9 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free2 = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 3
  %10 = load i8*, i8** %next_free2, align 8
  %idx.ext = sext i32 %8 to i64
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr, i8** %next_free2, align 8
  %11 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %11, %struct.obstack** %__o1, align 8
  %12 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 2
  %13 = load i8*, i8** %object_base, align 8
  store i8* %13, i8** %value, align 8
  %14 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3
  %15 = load i8*, i8** %next_free5, align 8
  %16 = load i8*, i8** %value, align 8
  %cmp6 = icmp eq i8* %15, %16
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end
  %18 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free10 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3
  %19 = load i8*, i8** %next_free10, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %19 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast11, 0
  %20 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 6
  %21 = load i32, i32* %alignment_mask, align 4
  %conv13 = sext i32 %21 to i64
  %add = add nsw i64 %sub.ptr.sub12, %conv13
  %22 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask14 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 6
  %23 = load i32, i32* %alignment_mask14, align 4
  %neg = xor i32 %23, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8, i8* null, i64 %and
  %24 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 3
  store i8* %add.ptr16, i8** %next_free17, align 8
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free18 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 3
  %26 = load i8*, i8** %next_free18, align 8
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 1
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %29 = bitcast %struct._obstack_chunk* %28 to i8*
  %sub.ptr.lhs.cast19 = ptrtoint i8* %26 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %29 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %30 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit22 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 4
  %31 = load i8*, i8** %chunk_limit22, align 8
  %32 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk23 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk23, align 8
  %34 = bitcast %struct._obstack_chunk* %33 to i8*
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %if.end.9
  %35 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit30 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4
  %36 = load i8*, i8** %chunk_limit30, align 8
  %37 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free31 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 3
  store i8* %36, i8** %next_free31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %if.end.9
  %38 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 3
  %39 = load i8*, i8** %next_free33, align 8
  %40 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base34 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 2
  store i8* %39, i8** %object_base34, align 8
  %41 = load i8*, i8** %value, align 8
  store i8* %41, i8** %tmp35
  %42 = load i8*, i8** %tmp35
  store i8* %42, i8** %tmp
  %43 = load i8*, i8** %tmp
  %44 = bitcast i8* %43 to %struct.nesting*
  store %struct.nesting* %44, %struct.nesting** %thisloop, align 8
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 1
  %46 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %46, i32 0, i32 3
  %47 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %48 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %48, i32 0, i32 1
  store %struct.nesting* %47, %struct.nesting** %next, align 8
  %49 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt36 = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 1
  %50 = load %struct.stmt_status*, %struct.stmt_status** %stmt36, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %50, i32 0, i32 5
  %51 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  %52 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %52, i32 0, i32 0
  store %struct.nesting* %51, %struct.nesting** %all, align 8
  %53 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt37 = getelementptr inbounds %struct.function, %struct.function* %53, i32 0, i32 1
  %54 = load %struct.stmt_status*, %struct.stmt_status** %stmt37, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %54, i32 0, i32 6
  %55 = load i32, i32* %x_nesting_depth, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x_nesting_depth, align 4
  %56 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %56, i32 0, i32 2
  store i32 %inc, i32* %depth, align 4
  %call = call %struct.rtx_def* @gen_label_rtx()
  %57 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %57, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %start_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 0
  store %struct.rtx_def* %call, %struct.rtx_def** %start_label, align 8
  %call38 = call %struct.rtx_def* @gen_label_rtx()
  %58 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data39 = getelementptr inbounds %struct.nesting, %struct.nesting* %58, i32 0, i32 4
  %loop40 = bitcast %union.anon.3* %data39 to %struct.anon.5*
  %end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop40, i32 0, i32 1
  store %struct.rtx_def* %call38, %struct.rtx_def** %end_label, align 8
  %59 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data41 = getelementptr inbounds %struct.nesting, %struct.nesting* %59, i32 0, i32 4
  %loop42 = bitcast %union.anon.3* %data41 to %struct.anon.5*
  %alt_end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop42, i32 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %alt_end_label, align 8
  %60 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data43 = getelementptr inbounds %struct.nesting, %struct.nesting* %60, i32 0, i32 4
  %loop44 = bitcast %union.anon.3* %data43 to %struct.anon.5*
  %start_label45 = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop44, i32 0, i32 0
  %61 = load %struct.rtx_def*, %struct.rtx_def** %start_label45, align 8
  %62 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data46 = getelementptr inbounds %struct.nesting, %struct.nesting* %62, i32 0, i32 4
  %loop47 = bitcast %union.anon.3* %data46 to %struct.anon.5*
  %continue_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop47, i32 0, i32 3
  store %struct.rtx_def* %61, %struct.rtx_def** %continue_label, align 8
  %63 = load i32, i32* %exit_flag.addr, align 4
  %tobool = icmp ne i32 %63, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.32
  %64 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data48 = getelementptr inbounds %struct.nesting, %struct.nesting* %64, i32 0, i32 4
  %loop49 = bitcast %union.anon.3* %data48 to %struct.anon.5*
  %end_label50 = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop49, i32 0, i32 1
  %65 = load %struct.rtx_def*, %struct.rtx_def** %end_label50, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %65, %cond.true ], [ null, %cond.false ]
  %66 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %66, i32 0, i32 3
  store %struct.rtx_def* %cond, %struct.rtx_def** %exit_label, align 8
  %67 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %68 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt51 = getelementptr inbounds %struct.function, %struct.function* %68, i32 0, i32 1
  %69 = load %struct.stmt_status*, %struct.stmt_status** %stmt51, align 8
  %x_loop_stack52 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %69, i32 0, i32 3
  store %struct.nesting* %67, %struct.nesting** %x_loop_stack52, align 8
  %70 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %71 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt53 = getelementptr inbounds %struct.function, %struct.function* %71, i32 0, i32 1
  %72 = load %struct.stmt_status*, %struct.stmt_status** %stmt53, align 8
  %x_nesting_stack54 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %72, i32 0, i32 5
  store %struct.nesting* %70, %struct.nesting** %x_nesting_stack54, align 8
  call void @do_pending_stack_adjust()
  call void @emit_queue()
  %call55 = call %struct.rtx_def* @emit_note(i8* null, i32 -96)
  %73 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data56 = getelementptr inbounds %struct.nesting, %struct.nesting* %73, i32 0, i32 4
  %loop57 = bitcast %union.anon.3* %data56 to %struct.anon.5*
  %start_label58 = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop57, i32 0, i32 0
  %74 = load %struct.rtx_def*, %struct.rtx_def** %start_label58, align 8
  %call59 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %74)
  %75 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  ret %struct.nesting* %75
}

declare %struct.rtx_def* @emit_note(i8*, i32) #2

; Function Attrs: nounwind uwtable
define %struct.nesting* @expand_start_loop_continue_elsewhere(i32 %exit_flag) #0 {
entry:
  %exit_flag.addr = alloca i32, align 4
  %thisloop = alloca %struct.nesting*, align 8
  store i32 %exit_flag, i32* %exit_flag.addr, align 4
  %0 = load i32, i32* %exit_flag.addr, align 4
  %call = call %struct.nesting* @expand_start_loop(i32 %0)
  store %struct.nesting* %call, %struct.nesting** %thisloop, align 8
  %call1 = call %struct.rtx_def* @gen_label_rtx()
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1
  %2 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %2, i32 0, i32 3
  %3 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %3, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %continue_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 3
  store %struct.rtx_def* %call1, %struct.rtx_def** %continue_label, align 8
  %4 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  ret %struct.nesting* %4
}

; Function Attrs: nounwind uwtable
define %struct.nesting* @expand_start_null_loop() #0 {
entry:
  %thisloop = alloca %struct.nesting*, align 8
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp35 = alloca i8*, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__h, align 8
  %0 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %0, %struct.obstack** %__o, align 8
  store i32 120, i32* %__len, align 4
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4
  %2 = load i8*, i8** %chunk_limit, align 8
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3
  %4 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %5 = load i32, i32* %__len, align 4
  %conv = sext i32 %5 to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %7 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %__len, align 4
  %9 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free2 = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 3
  %10 = load i8*, i8** %next_free2, align 8
  %idx.ext = sext i32 %8 to i64
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr, i8** %next_free2, align 8
  %11 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %11, %struct.obstack** %__o1, align 8
  %12 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 2
  %13 = load i8*, i8** %object_base, align 8
  store i8* %13, i8** %value, align 8
  %14 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3
  %15 = load i8*, i8** %next_free5, align 8
  %16 = load i8*, i8** %value, align 8
  %cmp6 = icmp eq i8* %15, %16
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end
  %18 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free10 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3
  %19 = load i8*, i8** %next_free10, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %19 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast11, 0
  %20 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 6
  %21 = load i32, i32* %alignment_mask, align 4
  %conv13 = sext i32 %21 to i64
  %add = add nsw i64 %sub.ptr.sub12, %conv13
  %22 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask14 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 6
  %23 = load i32, i32* %alignment_mask14, align 4
  %neg = xor i32 %23, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8, i8* null, i64 %and
  %24 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 3
  store i8* %add.ptr16, i8** %next_free17, align 8
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free18 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 3
  %26 = load i8*, i8** %next_free18, align 8
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 1
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %29 = bitcast %struct._obstack_chunk* %28 to i8*
  %sub.ptr.lhs.cast19 = ptrtoint i8* %26 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %29 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %30 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit22 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 4
  %31 = load i8*, i8** %chunk_limit22, align 8
  %32 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk23 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk23, align 8
  %34 = bitcast %struct._obstack_chunk* %33 to i8*
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %if.end.9
  %35 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit30 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4
  %36 = load i8*, i8** %chunk_limit30, align 8
  %37 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free31 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 3
  store i8* %36, i8** %next_free31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %if.end.9
  %38 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 3
  %39 = load i8*, i8** %next_free33, align 8
  %40 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base34 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 2
  store i8* %39, i8** %object_base34, align 8
  %41 = load i8*, i8** %value, align 8
  store i8* %41, i8** %tmp35
  %42 = load i8*, i8** %tmp35
  store i8* %42, i8** %tmp
  %43 = load i8*, i8** %tmp
  %44 = bitcast i8* %43 to %struct.nesting*
  store %struct.nesting* %44, %struct.nesting** %thisloop, align 8
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 1
  %46 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %46, i32 0, i32 3
  %47 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %48 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %48, i32 0, i32 1
  store %struct.nesting* %47, %struct.nesting** %next, align 8
  %49 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt36 = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 1
  %50 = load %struct.stmt_status*, %struct.stmt_status** %stmt36, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %50, i32 0, i32 5
  %51 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  %52 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %52, i32 0, i32 0
  store %struct.nesting* %51, %struct.nesting** %all, align 8
  %53 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt37 = getelementptr inbounds %struct.function, %struct.function* %53, i32 0, i32 1
  %54 = load %struct.stmt_status*, %struct.stmt_status** %stmt37, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %54, i32 0, i32 6
  %55 = load i32, i32* %x_nesting_depth, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x_nesting_depth, align 4
  %56 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %56, i32 0, i32 2
  store i32 %inc, i32* %depth, align 4
  %call = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  %57 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %57, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %start_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 0
  store %struct.rtx_def* %call, %struct.rtx_def** %start_label, align 8
  %call38 = call %struct.rtx_def* @gen_label_rtx()
  %58 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data39 = getelementptr inbounds %struct.nesting, %struct.nesting* %58, i32 0, i32 4
  %loop40 = bitcast %union.anon.3* %data39 to %struct.anon.5*
  %end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop40, i32 0, i32 1
  store %struct.rtx_def* %call38, %struct.rtx_def** %end_label, align 8
  %59 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data41 = getelementptr inbounds %struct.nesting, %struct.nesting* %59, i32 0, i32 4
  %loop42 = bitcast %union.anon.3* %data41 to %struct.anon.5*
  %alt_end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop42, i32 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %alt_end_label, align 8
  %60 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data43 = getelementptr inbounds %struct.nesting, %struct.nesting* %60, i32 0, i32 4
  %loop44 = bitcast %union.anon.3* %data43 to %struct.anon.5*
  %end_label45 = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop44, i32 0, i32 1
  %61 = load %struct.rtx_def*, %struct.rtx_def** %end_label45, align 8
  %62 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data46 = getelementptr inbounds %struct.nesting, %struct.nesting* %62, i32 0, i32 4
  %loop47 = bitcast %union.anon.3* %data46 to %struct.anon.5*
  %continue_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop47, i32 0, i32 3
  store %struct.rtx_def* %61, %struct.rtx_def** %continue_label, align 8
  %63 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %data48 = getelementptr inbounds %struct.nesting, %struct.nesting* %63, i32 0, i32 4
  %loop49 = bitcast %union.anon.3* %data48 to %struct.anon.5*
  %end_label50 = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop49, i32 0, i32 1
  %64 = load %struct.rtx_def*, %struct.rtx_def** %end_label50, align 8
  %65 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %65, i32 0, i32 3
  store %struct.rtx_def* %64, %struct.rtx_def** %exit_label, align 8
  %66 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %67 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt51 = getelementptr inbounds %struct.function, %struct.function* %67, i32 0, i32 1
  %68 = load %struct.stmt_status*, %struct.stmt_status** %stmt51, align 8
  %x_loop_stack52 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %68, i32 0, i32 3
  store %struct.nesting* %66, %struct.nesting** %x_loop_stack52, align 8
  %69 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  %70 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt53 = getelementptr inbounds %struct.function, %struct.function* %70, i32 0, i32 1
  %71 = load %struct.stmt_status*, %struct.stmt_status** %stmt53, align 8
  %x_nesting_stack54 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %71, i32 0, i32 5
  store %struct.nesting* %69, %struct.nesting** %x_nesting_stack54, align 8
  %72 = load %struct.nesting*, %struct.nesting** %thisloop, align 8
  ret %struct.nesting* %72
}

; Function Attrs: nounwind uwtable
define void @expand_loop_continue_here() #0 {
entry:
  call void @do_pending_stack_adjust()
  %call = call %struct.rtx_def* @emit_note(i8* null, i32 -94)
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 3
  %2 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %2, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %continue_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 3
  %3 = load %struct.rtx_def*, %struct.rtx_def** %continue_label, align 8
  %call1 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_loop() #0 {
entry:
  %start_label = alloca %struct.rtx_def*, align 8
  %etc_note = alloca %struct.rtx_def*, align 8
  %eh_regions = alloca i32, align 4
  %debug_blocks = alloca i32, align 4
  %top_label = alloca %struct.rtx_def*, align 8
  %start_move = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next_insn = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.nesting*, align 8
  %this = alloca %struct.nesting*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 3
  %2 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %2, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %start_label1 = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %start_label1, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %start_label, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1
  %6 = load %struct.stmt_status*, %struct.stmt_status** %stmt2, align 8
  %x_loop_stack3 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %6, i32 0, i32 3
  %7 = load %struct.nesting*, %struct.nesting** %x_loop_stack3, align 8
  %data4 = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %loop5 = bitcast %union.anon.3* %data4 to %struct.anon.5*
  %continue_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop5, i32 0, i32 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %continue_label, align 8
  %cmp = icmp eq %struct.rtx_def* %4, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  %call = call %struct.rtx_def* @emit_note_before(i32 -94, %struct.rtx_def* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @do_pending_stack_adjust()
  store i32 0, i32* %debug_blocks, align 4
  store i32 0, i32* %eh_regions, align 4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %etc_note, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %tobool = icmp ne %struct.rtx_def* %11, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp6 = icmp eq i32 %bf.clear, 37
  br i1 %cmp6, label %if.then.7, label %if.end.50

if.then.7:                                        ; preds = %for.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %15 = load i32, i32* %rtint, align 4
  %cmp8 = icmp eq i32 %15, -92
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.then.7
  br label %for.end

if.else:                                          ; preds = %if.then.7
  %16 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 4
  %rtint12 = bitcast %union.rtunion_def* %arrayidx11 to i32*
  %17 = load i32, i32* %rtint12, align 4
  %cmp13 = icmp eq i32 %17, -96
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %if.else
  store %struct.rtx_def* null, %struct.rtx_def** %etc_note, align 8
  br label %for.end

if.else.15:                                       ; preds = %if.else
  %18 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 4
  %rtint18 = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %19 = load i32, i32* %rtint18, align 4
  %cmp19 = icmp eq i32 %19, -86
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %if.else.15
  %20 = load i32, i32* %eh_regions, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %eh_regions, align 4
  br label %if.end.47

if.else.21:                                       ; preds = %if.else.15
  %21 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 4
  %rtint24 = bitcast %union.rtunion_def* %arrayidx23 to i32*
  %22 = load i32, i32* %rtint24, align 4
  %cmp25 = icmp eq i32 %22, -85
  br i1 %cmp25, label %if.then.26, label %if.else.30

if.then.26:                                       ; preds = %if.else.21
  %23 = load i32, i32* %eh_regions, align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* %eh_regions, align 4
  %cmp27 = icmp slt i32 %dec, 0
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.then.26
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2733, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.expand_end_loop, i32 0, i32 0)) #6
  unreachable

if.end.29:                                        ; preds = %if.then.26
  br label %if.end.46

if.else.30:                                       ; preds = %if.else.21
  %24 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 4
  %rtint33 = bitcast %union.rtunion_def* %arrayidx32 to i32*
  %25 = load i32, i32* %rtint33, align 4
  %cmp34 = icmp eq i32 %25, -98
  br i1 %cmp34, label %if.then.35, label %if.else.37

if.then.35:                                       ; preds = %if.else.30
  %26 = load i32, i32* %debug_blocks, align 4
  %inc36 = add nsw i32 %26, 1
  store i32 %inc36, i32* %debug_blocks, align 4
  br label %if.end.45

if.else.37:                                       ; preds = %if.else.30
  %27 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 4
  %rtint40 = bitcast %union.rtunion_def* %arrayidx39 to i32*
  %28 = load i32, i32* %rtint40, align 4
  %cmp41 = icmp eq i32 %28, -97
  br i1 %cmp41, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %if.else.37
  %29 = load i32, i32* %debug_blocks, align 4
  %dec43 = add nsw i32 %29, -1
  store i32 %dec43, i32* %debug_blocks, align 4
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %if.else.37
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then.35
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.end.29
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.20
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.50
  %30 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %31, %struct.rtx_def** %etc_note, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.14, %if.then.9, %for.cond
  %32 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %tobool53 = icmp ne %struct.rtx_def* %32, null
  br i1 %tobool53, label %land.lhs.true, label %if.end.124

land.lhs.true:                                    ; preds = %for.end
  %33 = load i32, i32* @optimize, align 4
  %tobool54 = icmp ne i32 %33, 0
  br i1 %tobool54, label %land.lhs.true.55, label %if.end.124

land.lhs.true.55:                                 ; preds = %land.lhs.true
  %34 = load i32, i32* %eh_regions, align 4
  %cmp56 = icmp eq i32 %34, 0
  br i1 %cmp56, label %land.lhs.true.57, label %if.end.124

land.lhs.true.57:                                 ; preds = %land.lhs.true.55
  %35 = load i32, i32* %debug_blocks, align 4
  %cmp58 = icmp eq i32 %35, 0
  br i1 %cmp58, label %land.lhs.true.60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.57
  %36 = load i32, i32* @optimize, align 4
  %cmp59 = icmp sge i32 %36, 2
  br i1 %cmp59, label %land.lhs.true.60, label %if.end.124

land.lhs.true.60:                                 ; preds = %lor.lhs.false, %land.lhs.true.57
  %37 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 2
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx63, align 8
  %cmp64 = icmp ne %struct.rtx_def* %38, null
  br i1 %cmp64, label %land.lhs.true.65, label %if.end.124

land.lhs.true.65:                                 ; preds = %land.lhs.true.60
  %call66 = call %struct.rtx_def* @get_last_insn()
  %call67 = call i32 @any_condjump_p(%struct.rtx_def* %call66)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end.124, label %if.then.69

if.then.69:                                       ; preds = %land.lhs.true.65
  %call70 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call70, %struct.rtx_def** %top_label, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %start_move, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %start_move, align 8
  %fld71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i32 0, i64 1
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx73, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load74 = load i32, i32* %42, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 37
  br i1 %cmp76, label %land.lhs.true.77, label %if.end.89

land.lhs.true.77:                                 ; preds = %if.then.69
  %43 = load %struct.rtx_def*, %struct.rtx_def** %start_move, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 1
  %rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx80, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 4
  %rtint83 = bitcast %union.rtunion_def* %arrayidx82 to i32*
  %45 = load i32, i32* %rtint83, align 4
  %cmp84 = icmp eq i32 %45, -94
  br i1 %cmp84, label %if.then.85, label %if.end.89

if.then.85:                                       ; preds = %land.lhs.true.77
  %46 = load %struct.rtx_def*, %struct.rtx_def** %start_move, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 1
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx88, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %start_move, align 8
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.85, %land.lhs.true.77, %if.then.69
  %48 = load %struct.rtx_def*, %struct.rtx_def** %top_label, align 8
  %49 = load %struct.rtx_def*, %struct.rtx_def** %start_move, align 8
  %call90 = call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %48, %struct.rtx_def* %49)
  %50 = load i32, i32* %debug_blocks, align 4
  %cmp91 = icmp eq i32 %50, 0
  br i1 %cmp91, label %if.then.92, label %if.else.94

if.then.92:                                       ; preds = %if.end.89
  %51 = load %struct.rtx_def*, %struct.rtx_def** %start_move, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %call93 = call %struct.rtx_def* @get_last_insn()
  call void @reorder_insns(%struct.rtx_def* %51, %struct.rtx_def* %52, %struct.rtx_def* %call93)
  br label %if.end.120

if.else.94:                                       ; preds = %if.end.89
  %53 = load %struct.rtx_def*, %struct.rtx_def** %start_move, align 8
  store %struct.rtx_def* %53, %struct.rtx_def** %insn, align 8
  br label %for.cond.95

for.cond.95:                                      ; preds = %for.inc.118, %if.else.94
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool96 = icmp ne %struct.rtx_def* %54, null
  br i1 %tobool96, label %for.body.97, label %for.end.119

for.body.97:                                      ; preds = %for.cond.95
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %etc_note, align 8
  %cmp98 = icmp eq %struct.rtx_def* %55, %56
  br i1 %cmp98, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.97
  br label %cond.end

cond.false:                                       ; preds = %for.body.97
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i32 0, i64 2
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtx101, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %58, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %next_insn, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %60 = bitcast %struct.rtx_def* %59 to i32*
  %bf.load102 = load i32, i32* %60, align 8
  %bf.clear103 = and i32 %bf.load102, 65535
  %cmp104 = icmp eq i32 %bf.clear103, 37
  br i1 %cmp104, label %land.lhs.true.105, label %if.end.116

land.lhs.true.105:                                ; preds = %cond.end
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i32 0, i64 4
  %rtint108 = bitcast %union.rtunion_def* %arrayidx107 to i32*
  %62 = load i32, i32* %rtint108, align 4
  %cmp109 = icmp eq i32 %62, -98
  br i1 %cmp109, label %if.then.115, label %lor.lhs.false.110

lor.lhs.false.110:                                ; preds = %land.lhs.true.105
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 4
  %rtint113 = bitcast %union.rtunion_def* %arrayidx112 to i32*
  %64 = load i32, i32* %rtint113, align 4
  %cmp114 = icmp eq i32 %64, -97
  br i1 %cmp114, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %lor.lhs.false.110, %land.lhs.true.105
  br label %for.inc.118

if.end.116:                                       ; preds = %lor.lhs.false.110, %cond.end
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call117 = call %struct.rtx_def* @get_last_insn()
  call void @reorder_insns(%struct.rtx_def* %65, %struct.rtx_def* %66, %struct.rtx_def* %call117)
  br label %for.inc.118

for.inc.118:                                      ; preds = %if.end.116, %if.then.115
  %67 = load %struct.rtx_def*, %struct.rtx_def** %next_insn, align 8
  store %struct.rtx_def* %67, %struct.rtx_def** %insn, align 8
  br label %for.cond.95

for.end.119:                                      ; preds = %for.cond.95
  br label %if.end.120

if.end.120:                                       ; preds = %for.end.119, %if.then.92
  %68 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  %call121 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %68)
  %69 = load %struct.rtx_def*, %struct.rtx_def** %top_label, align 8
  %call122 = call %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def* %call121, %struct.rtx_def* %69)
  %70 = load %struct.rtx_def*, %struct.rtx_def** %top_label, align 8
  %call123 = call %struct.rtx_def* @emit_barrier_before(%struct.rtx_def* %70)
  %71 = load %struct.rtx_def*, %struct.rtx_def** %top_label, align 8
  store %struct.rtx_def* %71, %struct.rtx_def** %start_label, align 8
  br label %if.end.124

if.end.124:                                       ; preds = %if.end.120, %land.lhs.true.65, %land.lhs.true.60, %lor.lhs.false, %land.lhs.true.55, %land.lhs.true, %for.end
  %72 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  call void @emit_jump(%struct.rtx_def* %72)
  %call125 = call %struct.rtx_def* @emit_note(i8* null, i32 -95)
  %73 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt126 = getelementptr inbounds %struct.function, %struct.function* %73, i32 0, i32 1
  %74 = load %struct.stmt_status*, %struct.stmt_status** %stmt126, align 8
  %x_loop_stack127 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %74, i32 0, i32 3
  %75 = load %struct.nesting*, %struct.nesting** %x_loop_stack127, align 8
  %data128 = getelementptr inbounds %struct.nesting, %struct.nesting* %75, i32 0, i32 4
  %loop129 = bitcast %union.anon.3* %data128 to %struct.anon.5*
  %end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop129, i32 0, i32 1
  %76 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %call130 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %76)
  br label %do.body

do.body:                                          ; preds = %if.end.124
  %77 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt131 = getelementptr inbounds %struct.function, %struct.function* %77, i32 0, i32 1
  %78 = load %struct.stmt_status*, %struct.stmt_status** %stmt131, align 8
  %x_loop_stack132 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %78, i32 0, i32 3
  %79 = load %struct.nesting*, %struct.nesting** %x_loop_stack132, align 8
  store %struct.nesting* %79, %struct.nesting** %target, align 8
  br label %do.body.133

do.body.133:                                      ; preds = %do.cond, %do.body
  %80 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt134 = getelementptr inbounds %struct.function, %struct.function* %80, i32 0, i32 1
  %81 = load %struct.stmt_status*, %struct.stmt_status** %stmt134, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %81, i32 0, i32 5
  %82 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  store %struct.nesting* %82, %struct.nesting** %this, align 8
  %83 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt135 = getelementptr inbounds %struct.function, %struct.function* %83, i32 0, i32 1
  %84 = load %struct.stmt_status*, %struct.stmt_status** %stmt135, align 8
  %x_loop_stack136 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %84, i32 0, i32 3
  %85 = load %struct.nesting*, %struct.nesting** %x_loop_stack136, align 8
  %86 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp137 = icmp eq %struct.nesting* %85, %86
  br i1 %cmp137, label %if.then.138, label %if.end.143

if.then.138:                                      ; preds = %do.body.133
  %87 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt139 = getelementptr inbounds %struct.function, %struct.function* %87, i32 0, i32 1
  %88 = load %struct.stmt_status*, %struct.stmt_status** %stmt139, align 8
  %x_loop_stack140 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %88, i32 0, i32 3
  %89 = load %struct.nesting*, %struct.nesting** %x_loop_stack140, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %89, i32 0, i32 1
  %90 = load %struct.nesting*, %struct.nesting** %next, align 8
  %91 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt141 = getelementptr inbounds %struct.function, %struct.function* %91, i32 0, i32 1
  %92 = load %struct.stmt_status*, %struct.stmt_status** %stmt141, align 8
  %x_loop_stack142 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %92, i32 0, i32 3
  store %struct.nesting* %90, %struct.nesting** %x_loop_stack142, align 8
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.138, %do.body.133
  %93 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt144 = getelementptr inbounds %struct.function, %struct.function* %93, i32 0, i32 1
  %94 = load %struct.stmt_status*, %struct.stmt_status** %stmt144, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %94, i32 0, i32 2
  %95 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %96 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp145 = icmp eq %struct.nesting* %95, %96
  br i1 %cmp145, label %if.then.146, label %if.end.152

if.then.146:                                      ; preds = %if.end.143
  %97 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt147 = getelementptr inbounds %struct.function, %struct.function* %97, i32 0, i32 1
  %98 = load %struct.stmt_status*, %struct.stmt_status** %stmt147, align 8
  %x_cond_stack148 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %98, i32 0, i32 2
  %99 = load %struct.nesting*, %struct.nesting** %x_cond_stack148, align 8
  %next149 = getelementptr inbounds %struct.nesting, %struct.nesting* %99, i32 0, i32 1
  %100 = load %struct.nesting*, %struct.nesting** %next149, align 8
  %101 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt150 = getelementptr inbounds %struct.function, %struct.function* %101, i32 0, i32 1
  %102 = load %struct.stmt_status*, %struct.stmt_status** %stmt150, align 8
  %x_cond_stack151 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %102, i32 0, i32 2
  store %struct.nesting* %100, %struct.nesting** %x_cond_stack151, align 8
  br label %if.end.152

if.end.152:                                       ; preds = %if.then.146, %if.end.143
  %103 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt153 = getelementptr inbounds %struct.function, %struct.function* %103, i32 0, i32 1
  %104 = load %struct.stmt_status*, %struct.stmt_status** %stmt153, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %104, i32 0, i32 0
  %105 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %106 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp154 = icmp eq %struct.nesting* %105, %106
  br i1 %cmp154, label %if.then.155, label %if.end.161

if.then.155:                                      ; preds = %if.end.152
  %107 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt156 = getelementptr inbounds %struct.function, %struct.function* %107, i32 0, i32 1
  %108 = load %struct.stmt_status*, %struct.stmt_status** %stmt156, align 8
  %x_block_stack157 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %108, i32 0, i32 0
  %109 = load %struct.nesting*, %struct.nesting** %x_block_stack157, align 8
  %next158 = getelementptr inbounds %struct.nesting, %struct.nesting* %109, i32 0, i32 1
  %110 = load %struct.nesting*, %struct.nesting** %next158, align 8
  %111 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt159 = getelementptr inbounds %struct.function, %struct.function* %111, i32 0, i32 1
  %112 = load %struct.stmt_status*, %struct.stmt_status** %stmt159, align 8
  %x_block_stack160 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %112, i32 0, i32 0
  store %struct.nesting* %110, %struct.nesting** %x_block_stack160, align 8
  br label %if.end.161

if.end.161:                                       ; preds = %if.then.155, %if.end.152
  %113 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt162 = getelementptr inbounds %struct.function, %struct.function* %113, i32 0, i32 1
  %114 = load %struct.stmt_status*, %struct.stmt_status** %stmt162, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %114, i32 0, i32 1
  %115 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %116 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp163 = icmp eq %struct.nesting* %115, %116
  br i1 %cmp163, label %if.then.164, label %if.end.170

if.then.164:                                      ; preds = %if.end.161
  %117 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt165 = getelementptr inbounds %struct.function, %struct.function* %117, i32 0, i32 1
  %118 = load %struct.stmt_status*, %struct.stmt_status** %stmt165, align 8
  %x_stack_block_stack166 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %118, i32 0, i32 1
  %119 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack166, align 8
  %next167 = getelementptr inbounds %struct.nesting, %struct.nesting* %119, i32 0, i32 1
  %120 = load %struct.nesting*, %struct.nesting** %next167, align 8
  %121 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt168 = getelementptr inbounds %struct.function, %struct.function* %121, i32 0, i32 1
  %122 = load %struct.stmt_status*, %struct.stmt_status** %stmt168, align 8
  %x_stack_block_stack169 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %122, i32 0, i32 1
  store %struct.nesting* %120, %struct.nesting** %x_stack_block_stack169, align 8
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.164, %if.end.161
  %123 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt171 = getelementptr inbounds %struct.function, %struct.function* %123, i32 0, i32 1
  %124 = load %struct.stmt_status*, %struct.stmt_status** %stmt171, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %124, i32 0, i32 4
  %125 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %126 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp172 = icmp eq %struct.nesting* %125, %126
  br i1 %cmp172, label %if.then.173, label %if.end.179

if.then.173:                                      ; preds = %if.end.170
  %127 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt174 = getelementptr inbounds %struct.function, %struct.function* %127, i32 0, i32 1
  %128 = load %struct.stmt_status*, %struct.stmt_status** %stmt174, align 8
  %x_case_stack175 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %128, i32 0, i32 4
  %129 = load %struct.nesting*, %struct.nesting** %x_case_stack175, align 8
  %next176 = getelementptr inbounds %struct.nesting, %struct.nesting* %129, i32 0, i32 1
  %130 = load %struct.nesting*, %struct.nesting** %next176, align 8
  %131 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt177 = getelementptr inbounds %struct.function, %struct.function* %131, i32 0, i32 1
  %132 = load %struct.stmt_status*, %struct.stmt_status** %stmt177, align 8
  %x_case_stack178 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %132, i32 0, i32 4
  store %struct.nesting* %130, %struct.nesting** %x_case_stack178, align 8
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.173, %if.end.170
  %133 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt180 = getelementptr inbounds %struct.function, %struct.function* %133, i32 0, i32 1
  %134 = load %struct.stmt_status*, %struct.stmt_status** %stmt180, align 8
  %x_nesting_stack181 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %134, i32 0, i32 5
  %135 = load %struct.nesting*, %struct.nesting** %x_nesting_stack181, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %135, i32 0, i32 2
  %136 = load i32, i32* %depth, align 4
  %sub = sub nsw i32 %136, 1
  %137 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt182 = getelementptr inbounds %struct.function, %struct.function* %137, i32 0, i32 1
  %138 = load %struct.stmt_status*, %struct.stmt_status** %stmt182, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %138, i32 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4
  %139 = load %struct.nesting*, %struct.nesting** %this, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %139, i32 0, i32 0
  %140 = load %struct.nesting*, %struct.nesting** %all, align 8
  %141 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt183 = getelementptr inbounds %struct.function, %struct.function* %141, i32 0, i32 1
  %142 = load %struct.stmt_status*, %struct.stmt_status** %stmt183, align 8
  %x_nesting_stack184 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %142, i32 0, i32 5
  store %struct.nesting* %140, %struct.nesting** %x_nesting_stack184, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__o, align 8
  %143 = load %struct.nesting*, %struct.nesting** %this, align 8
  %144 = bitcast %struct.nesting* %143 to i8*
  store i8* %144, i8** %__obj, align 8
  %145 = load i8*, i8** %__obj, align 8
  %146 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %146, i32 0, i32 1
  %147 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %148 = bitcast %struct._obstack_chunk* %147 to i8*
  %cmp185 = icmp ugt i8* %145, %148
  br i1 %cmp185, label %land.lhs.true.186, label %if.else.189

land.lhs.true.186:                                ; preds = %if.end.179
  %149 = load i8*, i8** %__obj, align 8
  %150 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %150, i32 0, i32 4
  %151 = load i8*, i8** %chunk_limit, align 8
  %cmp187 = icmp ult i8* %149, %151
  br i1 %cmp187, label %if.then.188, label %if.else.189

if.then.188:                                      ; preds = %land.lhs.true.186
  %152 = load i8*, i8** %__obj, align 8
  %153 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %153, i32 0, i32 2
  store i8* %152, i8** %object_base, align 8
  %154 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %154, i32 0, i32 3
  store i8* %152, i8** %next_free, align 8
  br label %if.end.190

if.else.189:                                      ; preds = %land.lhs.true.186, %if.end.179
  %155 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %156 = load i8*, i8** %__obj, align 8
  call void @obstack_free(%struct.obstack* %155, i8* %156)
  br label %if.end.190

if.end.190:                                       ; preds = %if.else.189, %if.then.188
  br label %do.cond

do.cond:                                          ; preds = %if.end.190
  %157 = load %struct.nesting*, %struct.nesting** %this, align 8
  %158 = load %struct.nesting*, %struct.nesting** %target, align 8
  %cmp191 = icmp ne %struct.nesting* %157, %158
  br i1 %cmp191, label %do.body.133, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end.193

do.end.193:                                       ; preds = %do.end
  %159 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt194 = getelementptr inbounds %struct.function, %struct.function* %159, i32 0, i32 1
  %160 = load %struct.stmt_status*, %struct.stmt_status** %stmt194, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %160, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  ret void
}

declare %struct.rtx_def* @emit_note_before(i32, %struct.rtx_def*) #2

declare i32 @any_condjump_p(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_label_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @reorder_insns(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @emit_barrier_before(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_end_null_loop() #0 {
entry:
  %target = alloca %struct.nesting*, align 8
  %this = alloca %struct.nesting*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  call void @do_pending_stack_adjust()
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 3
  %2 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %2, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 1
  %3 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %call = call %struct.rtx_def* @emit_label(%struct.rtx_def* %3)
  br label %do.body

do.body:                                          ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_loop_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 3
  %6 = load %struct.nesting*, %struct.nesting** %x_loop_stack2, align 8
  store %struct.nesting* %6, %struct.nesting** %target, align 8
  br label %do.body.3

do.body.3:                                        ; preds = %do.cond, %do.body
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt4 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 1
  %8 = load %struct.stmt_status*, %struct.stmt_status** %stmt4, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %8, i32 0, i32 5
  %9 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  store %struct.nesting* %9, %struct.nesting** %this, align 8
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt5 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1
  %11 = load %struct.stmt_status*, %struct.stmt_status** %stmt5, align 8
  %x_loop_stack6 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %11, i32 0, i32 3
  %12 = load %struct.nesting*, %struct.nesting** %x_loop_stack6, align 8
  %13 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp = icmp eq %struct.nesting* %12, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body.3
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt7 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1
  %15 = load %struct.stmt_status*, %struct.stmt_status** %stmt7, align 8
  %x_loop_stack8 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %15, i32 0, i32 3
  %16 = load %struct.nesting*, %struct.nesting** %x_loop_stack8, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %16, i32 0, i32 1
  %17 = load %struct.nesting*, %struct.nesting** %next, align 8
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt9 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 1
  %19 = load %struct.stmt_status*, %struct.stmt_status** %stmt9, align 8
  %x_loop_stack10 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %19, i32 0, i32 3
  store %struct.nesting* %17, %struct.nesting** %x_loop_stack10, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body.3
  %20 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt11 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 1
  %21 = load %struct.stmt_status*, %struct.stmt_status** %stmt11, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %21, i32 0, i32 2
  %22 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %23 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp12 = icmp eq %struct.nesting* %22, %23
  br i1 %cmp12, label %if.then.13, label %if.end.19

if.then.13:                                       ; preds = %if.end
  %24 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt14 = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 1
  %25 = load %struct.stmt_status*, %struct.stmt_status** %stmt14, align 8
  %x_cond_stack15 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %25, i32 0, i32 2
  %26 = load %struct.nesting*, %struct.nesting** %x_cond_stack15, align 8
  %next16 = getelementptr inbounds %struct.nesting, %struct.nesting* %26, i32 0, i32 1
  %27 = load %struct.nesting*, %struct.nesting** %next16, align 8
  %28 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt17 = getelementptr inbounds %struct.function, %struct.function* %28, i32 0, i32 1
  %29 = load %struct.stmt_status*, %struct.stmt_status** %stmt17, align 8
  %x_cond_stack18 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %29, i32 0, i32 2
  store %struct.nesting* %27, %struct.nesting** %x_cond_stack18, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.13, %if.end
  %30 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt20 = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 1
  %31 = load %struct.stmt_status*, %struct.stmt_status** %stmt20, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %31, i32 0, i32 0
  %32 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %33 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp21 = icmp eq %struct.nesting* %32, %33
  br i1 %cmp21, label %if.then.22, label %if.end.28

if.then.22:                                       ; preds = %if.end.19
  %34 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt23 = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 1
  %35 = load %struct.stmt_status*, %struct.stmt_status** %stmt23, align 8
  %x_block_stack24 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %35, i32 0, i32 0
  %36 = load %struct.nesting*, %struct.nesting** %x_block_stack24, align 8
  %next25 = getelementptr inbounds %struct.nesting, %struct.nesting* %36, i32 0, i32 1
  %37 = load %struct.nesting*, %struct.nesting** %next25, align 8
  %38 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt26 = getelementptr inbounds %struct.function, %struct.function* %38, i32 0, i32 1
  %39 = load %struct.stmt_status*, %struct.stmt_status** %stmt26, align 8
  %x_block_stack27 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %39, i32 0, i32 0
  store %struct.nesting* %37, %struct.nesting** %x_block_stack27, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.22, %if.end.19
  %40 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt29 = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 1
  %41 = load %struct.stmt_status*, %struct.stmt_status** %stmt29, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %41, i32 0, i32 1
  %42 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %43 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp30 = icmp eq %struct.nesting* %42, %43
  br i1 %cmp30, label %if.then.31, label %if.end.37

if.then.31:                                       ; preds = %if.end.28
  %44 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt32 = getelementptr inbounds %struct.function, %struct.function* %44, i32 0, i32 1
  %45 = load %struct.stmt_status*, %struct.stmt_status** %stmt32, align 8
  %x_stack_block_stack33 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %45, i32 0, i32 1
  %46 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack33, align 8
  %next34 = getelementptr inbounds %struct.nesting, %struct.nesting* %46, i32 0, i32 1
  %47 = load %struct.nesting*, %struct.nesting** %next34, align 8
  %48 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt35 = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 1
  %49 = load %struct.stmt_status*, %struct.stmt_status** %stmt35, align 8
  %x_stack_block_stack36 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %49, i32 0, i32 1
  store %struct.nesting* %47, %struct.nesting** %x_stack_block_stack36, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.31, %if.end.28
  %50 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt38 = getelementptr inbounds %struct.function, %struct.function* %50, i32 0, i32 1
  %51 = load %struct.stmt_status*, %struct.stmt_status** %stmt38, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %51, i32 0, i32 4
  %52 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %53 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp39 = icmp eq %struct.nesting* %52, %53
  br i1 %cmp39, label %if.then.40, label %if.end.46

if.then.40:                                       ; preds = %if.end.37
  %54 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt41 = getelementptr inbounds %struct.function, %struct.function* %54, i32 0, i32 1
  %55 = load %struct.stmt_status*, %struct.stmt_status** %stmt41, align 8
  %x_case_stack42 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %55, i32 0, i32 4
  %56 = load %struct.nesting*, %struct.nesting** %x_case_stack42, align 8
  %next43 = getelementptr inbounds %struct.nesting, %struct.nesting* %56, i32 0, i32 1
  %57 = load %struct.nesting*, %struct.nesting** %next43, align 8
  %58 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt44 = getelementptr inbounds %struct.function, %struct.function* %58, i32 0, i32 1
  %59 = load %struct.stmt_status*, %struct.stmt_status** %stmt44, align 8
  %x_case_stack45 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %59, i32 0, i32 4
  store %struct.nesting* %57, %struct.nesting** %x_case_stack45, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.40, %if.end.37
  %60 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt47 = getelementptr inbounds %struct.function, %struct.function* %60, i32 0, i32 1
  %61 = load %struct.stmt_status*, %struct.stmt_status** %stmt47, align 8
  %x_nesting_stack48 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %61, i32 0, i32 5
  %62 = load %struct.nesting*, %struct.nesting** %x_nesting_stack48, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %62, i32 0, i32 2
  %63 = load i32, i32* %depth, align 4
  %sub = sub nsw i32 %63, 1
  %64 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt49 = getelementptr inbounds %struct.function, %struct.function* %64, i32 0, i32 1
  %65 = load %struct.stmt_status*, %struct.stmt_status** %stmt49, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %65, i32 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4
  %66 = load %struct.nesting*, %struct.nesting** %this, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %66, i32 0, i32 0
  %67 = load %struct.nesting*, %struct.nesting** %all, align 8
  %68 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt50 = getelementptr inbounds %struct.function, %struct.function* %68, i32 0, i32 1
  %69 = load %struct.stmt_status*, %struct.stmt_status** %stmt50, align 8
  %x_nesting_stack51 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %69, i32 0, i32 5
  store %struct.nesting* %67, %struct.nesting** %x_nesting_stack51, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__o, align 8
  %70 = load %struct.nesting*, %struct.nesting** %this, align 8
  %71 = bitcast %struct.nesting* %70 to i8*
  store i8* %71, i8** %__obj, align 8
  %72 = load i8*, i8** %__obj, align 8
  %73 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %73, i32 0, i32 1
  %74 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %75 = bitcast %struct._obstack_chunk* %74 to i8*
  %cmp52 = icmp ugt i8* %72, %75
  br i1 %cmp52, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.46
  %76 = load i8*, i8** %__obj, align 8
  %77 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %77, i32 0, i32 4
  %78 = load i8*, i8** %chunk_limit, align 8
  %cmp53 = icmp ult i8* %76, %78
  br i1 %cmp53, label %if.then.54, label %if.else

if.then.54:                                       ; preds = %land.lhs.true
  %79 = load i8*, i8** %__obj, align 8
  %80 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %80, i32 0, i32 2
  store i8* %79, i8** %object_base, align 8
  %81 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %81, i32 0, i32 3
  store i8* %79, i8** %next_free, align 8
  br label %if.end.55

if.else:                                          ; preds = %land.lhs.true, %if.end.46
  %82 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %83 = load i8*, i8** %__obj, align 8
  call void @obstack_free(%struct.obstack* %82, i8* %83)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else, %if.then.54
  br label %do.cond

do.cond:                                          ; preds = %if.end.55
  %84 = load %struct.nesting*, %struct.nesting** %this, align 8
  %85 = load %struct.nesting*, %struct.nesting** %target, align 8
  %cmp56 = icmp ne %struct.nesting* %84, %85
  br i1 %cmp56, label %do.body.3, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end.58

do.end.58:                                        ; preds = %do.end
  %86 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt59 = getelementptr inbounds %struct.function, %struct.function* %86, i32 0, i32 1
  %87 = load %struct.stmt_status*, %struct.stmt_status** %stmt59, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %87, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @expand_continue_loop(%struct.nesting* %whichloop) #0 {
entry:
  %retval = alloca i32, align 4
  %whichloop.addr = alloca %struct.nesting*, align 8
  store %struct.nesting* %whichloop, %struct.nesting** %whichloop.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  %2 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %cmp = icmp eq %struct.nesting* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 3
  %5 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  store %struct.nesting* %5, %struct.nesting** %whichloop.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %cmp2 = icmp eq %struct.nesting* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %7 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %continue_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 3
  %8 = load %struct.rtx_def*, %struct.rtx_def** %continue_label, align 8
  call void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %8, %struct.rtx_def* null)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @expand_exit_loop(%struct.nesting* %whichloop) #0 {
entry:
  %retval = alloca i32, align 4
  %whichloop.addr = alloca %struct.nesting*, align 8
  store %struct.nesting* %whichloop, %struct.nesting** %whichloop.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  %2 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %cmp = icmp eq %struct.nesting* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 3
  %5 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  store %struct.nesting* %5, %struct.nesting** %whichloop.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %cmp2 = icmp eq %struct.nesting* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %7 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  call void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %8, %struct.rtx_def* null)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @expand_exit_loop_if_false(%struct.nesting* %whichloop, %union.tree_node* %cond) #0 {
entry:
  %retval = alloca i32, align 4
  %whichloop.addr = alloca %struct.nesting*, align 8
  %cond.addr = alloca %union.tree_node*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %last_insn = alloca %struct.rtx_def*, align 8
  store %struct.nesting* %whichloop, %struct.nesting** %whichloop.addr, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %label, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  %2 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %cmp = icmp eq %struct.nesting* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 3
  %5 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  store %struct.nesting* %5, %struct.nesting** %whichloop.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %cmp2 = icmp eq %struct.nesting* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  call void @do_jump(%union.tree_node* %7, %struct.rtx_def* null, %struct.rtx_def* %8)
  %call5 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call5, %struct.rtx_def** %last_insn, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load = load i32, i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp6 = icmp eq i32 %bf.clear, 36
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  %12 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %12, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %alt_end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 2
  store %struct.rtx_def* %11, %struct.rtx_def** %alt_end_label, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end.4
  %13 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %data9 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %loop10 = bitcast %union.anon.3* %data9 to %struct.anon.5*
  %end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop10, i32 0, i32 1
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  call void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %14, %struct.rtx_def* null)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call11 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %15)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.3
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define i32 @expand_exit_loop_top_cond(%struct.nesting* %whichloop, %union.tree_node* %cond) #0 {
entry:
  %retval = alloca i32, align 4
  %whichloop.addr = alloca %struct.nesting*, align 8
  %cond.addr = alloca %union.tree_node*, align 8
  store %struct.nesting* %whichloop, %struct.nesting** %whichloop.addr, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  %0 = load %struct.nesting*, %struct.nesting** %whichloop.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8
  %call = call i32 @expand_exit_loop_if_false(%struct.nesting* %0, %union.tree_node* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct.rtx_def* @emit_note(i8* null, i32 -92)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define i32 @stmt_loop_nest_empty() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %cmp = icmp eq %struct.stmt_status* %1, null
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 1
  %3 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %3, i32 0, i32 3
  %4 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %cmp2 = icmp eq %struct.nesting* %4, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %5 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define i32 @preserve_subexpressions_p() #0 {
entry:
  %retval = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %0 = load i32, i32* @flag_expensive_optimizations, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @optimize, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then.7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %cmp1 = icmp eq %struct.function* %2, null
  br i1 %cmp1, label %if.then.7, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %cmp3 = icmp eq %struct.stmt_status* %4, null
  br i1 %cmp3, label %if.then.7, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false.2
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt5 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1
  %6 = load %struct.stmt_status*, %struct.stmt_status** %stmt5, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %6, i32 0, i32 3
  %7 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %cmp6 = icmp eq %struct.nesting* %7, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %lor.lhs.false.4, %lor.lhs.false.2, %lor.lhs.false, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %lor.lhs.false.4
  %call = call %struct.rtx_def* @get_last_insn_anywhere()
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool9 = icmp ne %struct.rtx_def* %8, null
  br i1 %tobool9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %10 = load i32, i32* %rtint, align 4
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt10 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1
  %12 = load %struct.stmt_status*, %struct.stmt_status** %stmt10, align 8
  %x_loop_stack11 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %12, i32 0, i32 3
  %13 = load %struct.nesting*, %struct.nesting** %x_loop_stack11, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data to %struct.anon.5*
  %start_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtint14 = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %15 = load i32, i32* %rtint14, align 4
  %sub = sub nsw i32 %10, %15
  %16 = load i32, i32* @n_non_fixed_regs, align 4
  %mul = mul nsw i32 %16, 3
  %cmp15 = icmp slt i32 %sub, %mul
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.8
  %17 = phi i1 [ false, %if.end.8 ], [ %cmp15, %land.rhs ]
  %land.ext = zext i1 %17 to i32
  store i32 %land.ext, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then.7, %if.then
  %18 = load i32, i32* %retval
  ret i32 %18
}

declare %struct.rtx_def* @get_last_insn_anywhere() #2

; Function Attrs: nounwind uwtable
define i32 @expand_exit_something() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca %struct.nesting*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 1
  %3 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %3, i32 0, i32 5
  %4 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  store %struct.nesting* %4, %struct.nesting** %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.nesting*, %struct.nesting** %n, align 8
  %tobool = icmp ne %struct.nesting* %5, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.nesting*, %struct.nesting** %n, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %exit_label, align 8
  %cmp = icmp ne %struct.rtx_def* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %8 = load %struct.nesting*, %struct.nesting** %n, align 8
  %exit_label2 = getelementptr inbounds %struct.nesting, %struct.nesting* %8, i32 0, i32 3
  %9 = load %struct.rtx_def*, %struct.rtx_def** %exit_label2, align 8
  call void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %9, %struct.rtx_def* null)
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.nesting*, %struct.nesting** %n, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %10, i32 0, i32 0
  %11 = load %struct.nesting*, %struct.nesting** %all, align 8
  store %struct.nesting* %11, %struct.nesting** %n, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define void @expand_null_return() #0 {
entry:
  %last_insn = alloca %struct.rtx_def*, align 8
  %call = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call, %struct.rtx_def** %last_insn, align 8
  call void @clobber_return_register()
  %0 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  call void @expand_null_return_1(%struct.rtx_def* %0)
  ret void
}

declare void @clobber_return_register() #2

; Function Attrs: nounwind uwtable
define internal void @expand_null_return_1(%struct.rtx_def* %last_insn) #0 {
entry:
  %last_insn.addr = alloca %struct.rtx_def*, align 8
  %end_label = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %last_insn, %struct.rtx_def** %last_insn.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_cleanup_label = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 23
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x_cleanup_label, align 8
  %tobool = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %x_cleanup_label1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 23
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x_cleanup_label1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %x_return_label = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 24
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x_return_label, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %3, %cond.true ], [ %5, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %end_label, align 8
  call void @clear_pending_stack_adjust()
  call void @do_pending_stack_adjust()
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1
  %7 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %7, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %cmp = icmp eq %struct.rtx_def* %8, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %call = call %struct.rtx_def* @gen_label_rtx()
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  %x_return_label2 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 24
  store %struct.rtx_def* %call, %struct.rtx_def** %x_return_label2, align 8
  store %struct.rtx_def* %call, %struct.rtx_def** %end_label, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %last_insn.addr, align 8
  call void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %10, %struct.rtx_def* %11)
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_return(%union.tree_node* %retval) #0 {
entry:
  %retval.addr = alloca %union.tree_node*, align 8
  %last_insn = alloca %struct.rtx_def*, align 8
  %result_rtl = alloca %struct.rtx_def*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %retval_rhs = alloca %union.tree_node*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %expr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %bitpos = alloca i64, align 8
  %xbitpos = alloca i64, align 8
  %big_endian_correction = alloca i64, align 8
  %bytes = alloca i64, align 8
  %n_regs = alloca i32, align 4
  %bitsize = alloca i32, align 4
  %result_pseudos = alloca %struct.rtx_def**, align 8
  %result_reg = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dst = alloca %struct.rtx_def*, align 8
  %result_val = alloca %struct.rtx_def*, align 8
  %tmpmode = alloca i32, align 4
  %result_reg_mode = alloca i32, align 4
  %ot = alloca %union.tree_node*, align 8
  %nt = alloca %union.tree_node*, align 8
  store %union.tree_node* %retval, %union.tree_node** %retval.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %last_insn, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %val, align 8
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1
  %2 = load %union.tree_node*, %union.tree_node** %type2, align 8
  %common3 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %3, %struct.rtx_def* null, i32 0, i32 0)
  call void @emit_queue()
  call void @expand_null_return()
  br label %if.end.353

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp4 = icmp eq %union.tree_node* %4, %5
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  call void @expand_null_return()
  br label %if.end.353

if.else:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %common6 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %code7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2
  %bf.load8 = load i32, i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 36
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %if.else
  %7 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  store %union.tree_node* %7, %union.tree_node** %retval_rhs, align 8
  br label %if.end.44

if.else.12:                                       ; preds = %if.else
  %8 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %common13 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load15 = load i32, i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp eq i32 %bf.clear16, 48
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.12
  %9 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %common18 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 49
  br i1 %cmp22, label %land.lhs.true, label %if.else.32

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.else.12
  %10 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %common23 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %code24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2
  %bf.load25 = load i32, i32* %code24, align 8
  %bf.clear26 = and i32 %bf.load25, 255
  %cmp27 = icmp eq i32 %bf.clear26, 36
  br i1 %cmp27, label %if.then.28, label %if.else.32

if.then.28:                                       ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %exp29 = bitcast %union.tree_node* %12 to %struct.tree_exp*
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 2
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i32 0, i64 1
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8
  store %union.tree_node* %13, %union.tree_node** %retval_rhs, align 8
  br label %if.end.43

if.else.32:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %14 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %common33 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 1
  %15 = load %union.tree_node*, %union.tree_node** %type34, align 8
  %common35 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %code36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2
  %bf.load37 = load i32, i32* %code36, align 8
  %bf.clear38 = and i32 %bf.load37, 255
  %cmp39 = icmp eq i32 %bf.clear38, 5
  br i1 %cmp39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %if.else.32
  %16 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  store %union.tree_node* %16, %union.tree_node** %retval_rhs, align 8
  br label %if.end.42

if.else.41:                                       ; preds = %if.else.32
  store %union.tree_node* null, %union.tree_node** %retval_rhs, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.41, %if.then.40
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.then.28
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.then.11
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44
  %call46 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call46, %struct.rtx_def** %last_insn, align 8
  %17 = load i32, i32* @optimize, align 4
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %land.lhs.true.47, label %if.end.107

land.lhs.true.47:                                 ; preds = %if.end.45
  %18 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %cmp48 = icmp ne %union.tree_node* %18, null
  br i1 %cmp48, label %land.lhs.true.49, label %if.end.107

land.lhs.true.49:                                 ; preds = %land.lhs.true.47
  %19 = load %struct.function*, %struct.function** @cfun, align 8
  %x_frame_offset = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 32
  %20 = load i64, i64* %x_frame_offset, align 8
  %cmp50 = icmp eq i64 %20, 0
  br i1 %cmp50, label %land.lhs.true.51, label %if.end.107

land.lhs.true.51:                                 ; preds = %land.lhs.true.49
  %21 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %common52 = bitcast %union.tree_node* %21 to %struct.tree_common*
  %code53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2
  %bf.load54 = load i32, i32* %code53, align 8
  %bf.clear55 = and i32 %bf.load54, 255
  %cmp56 = icmp eq i32 %bf.clear55, 51
  br i1 %cmp56, label %land.lhs.true.57, label %if.end.107

land.lhs.true.57:                                 ; preds = %land.lhs.true.51
  %22 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %exp58 = bitcast %union.tree_node* %22 to %struct.tree_exp*
  %operands59 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp58, i32 0, i32 2
  %arrayidx60 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands59, i32 0, i64 1
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx60, align 8
  %common61 = bitcast %union.tree_node* %23 to %struct.tree_common*
  %code62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2
  %bf.load63 = load i32, i32* %code62, align 8
  %bf.clear64 = and i32 %bf.load63, 255
  %cmp65 = icmp eq i32 %bf.clear64, 53
  br i1 %cmp65, label %if.then.75, label %lor.lhs.false.66

lor.lhs.false.66:                                 ; preds = %land.lhs.true.57
  %24 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %exp67 = bitcast %union.tree_node* %24 to %struct.tree_exp*
  %operands68 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp67, i32 0, i32 2
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands68, i32 0, i64 2
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8
  %common70 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %code71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 2
  %bf.load72 = load i32, i32* %code71, align 8
  %bf.clear73 = and i32 %bf.load72, 255
  %cmp74 = icmp eq i32 %bf.clear73, 53
  br i1 %cmp74, label %if.then.75, label %if.end.107

if.then.75:                                       ; preds = %lor.lhs.false.66, %land.lhs.true.57
  %call76 = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call76, %struct.rtx_def** %label, align 8
  %26 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %exp77 = bitcast %union.tree_node* %26 to %struct.tree_exp*
  %operands78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 2
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands78, i32 0, i64 0
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  call void @do_jump(%union.tree_node* %27, %struct.rtx_def* %28, %struct.rtx_def* null)
  call void @start_cleanup_deferral()
  %29 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common80 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 1
  %30 = load %union.tree_node*, %union.tree_node** %type81, align 8
  %common82 = bitcast %union.tree_node* %30 to %struct.tree_common*
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 1
  %31 = load %union.tree_node*, %union.tree_node** %type83, align 8
  %32 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %32 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 11
  %33 = load %union.tree_node*, %union.tree_node** %result, align 8
  %34 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %exp84 = bitcast %union.tree_node* %34 to %struct.tree_exp*
  %operands85 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp84, i32 0, i32 2
  %arrayidx86 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands85, i32 0, i64 1
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx86, align 8
  %call87 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %31, %union.tree_node* %33, %union.tree_node* %35)
  store %union.tree_node* %call87, %union.tree_node** %expr, align 8
  %36 = load %union.tree_node*, %union.tree_node** %expr, align 8
  %common88 = bitcast %union.tree_node* %36 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 2
  %bf.load89 = load i32, i32* %side_effects_flag, align 8
  %bf.clear90 = and i32 %bf.load89, -257
  %bf.set = or i32 %bf.clear90, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  %37 = load %union.tree_node*, %union.tree_node** %expr, align 8
  call void @expand_return(%union.tree_node* %37)
  %38 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call91 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %38)
  %39 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common92 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 1
  %40 = load %union.tree_node*, %union.tree_node** %type93, align 8
  %common94 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %type95 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 1
  %41 = load %union.tree_node*, %union.tree_node** %type95, align 8
  %42 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl96 = bitcast %union.tree_node* %42 to %struct.tree_decl*
  %result97 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl96, i32 0, i32 11
  %43 = load %union.tree_node*, %union.tree_node** %result97, align 8
  %44 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %exp98 = bitcast %union.tree_node* %44 to %struct.tree_exp*
  %operands99 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp98, i32 0, i32 2
  %arrayidx100 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands99, i32 0, i64 2
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx100, align 8
  %call101 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 48, %union.tree_node* %41, %union.tree_node* %43, %union.tree_node* %45)
  store %union.tree_node* %call101, %union.tree_node** %expr, align 8
  %46 = load %union.tree_node*, %union.tree_node** %expr, align 8
  %common102 = bitcast %union.tree_node* %46 to %struct.tree_common*
  %side_effects_flag103 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common102, i32 0, i32 2
  %bf.load104 = load i32, i32* %side_effects_flag103, align 8
  %bf.clear105 = and i32 %bf.load104, -257
  %bf.set106 = or i32 %bf.clear105, 256
  store i32 %bf.set106, i32* %side_effects_flag103, align 8
  %47 = load %union.tree_node*, %union.tree_node** %expr, align 8
  call void @expand_return(%union.tree_node* %47)
  call void @end_cleanup_deferral()
  br label %if.end.353

if.end.107:                                       ; preds = %lor.lhs.false.66, %land.lhs.true.51, %land.lhs.true.49, %land.lhs.true.47, %if.end.45
  %48 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl108 = bitcast %union.tree_node* %48 to %struct.tree_decl*
  %result109 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl108, i32 0, i32 11
  %49 = load %union.tree_node*, %union.tree_node** %result109, align 8
  %decl110 = bitcast %union.tree_node* %49 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl110, i32 0, i32 17
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool111 = icmp ne %struct.rtx_def* %50, null
  br i1 %tobool111, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.107
  %51 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl112 = bitcast %union.tree_node* %51 to %struct.tree_decl*
  %result113 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl112, i32 0, i32 11
  %52 = load %union.tree_node*, %union.tree_node** %result113, align 8
  %decl114 = bitcast %union.tree_node* %52 to %struct.tree_decl*
  %rtl115 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl114, i32 0, i32 17
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl115, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.107
  %54 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl116 = bitcast %union.tree_node* %54 to %struct.tree_decl*
  %result117 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl116, i32 0, i32 11
  %55 = load %union.tree_node*, %union.tree_node** %result117, align 8
  call void @make_decl_rtl(%union.tree_node* %55, i8* null)
  %56 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl118 = bitcast %union.tree_node* %56 to %struct.tree_decl*
  %result119 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl118, i32 0, i32 11
  %57 = load %union.tree_node*, %union.tree_node** %result119, align 8
  %decl120 = bitcast %union.tree_node* %57 to %struct.tree_decl*
  %rtl121 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl120, i32 0, i32 17
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtl121, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %53, %cond.true ], [ %58, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %result_rtl, align 8
  %59 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %cmp122 = icmp ne %union.tree_node* %59, null
  br i1 %cmp122, label %land.lhs.true.123, label %if.else.288

land.lhs.true.123:                                ; preds = %cond.end
  %60 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %common124 = bitcast %union.tree_node* %60 to %struct.tree_common*
  %type125 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common124, i32 0, i32 1
  %61 = load %union.tree_node*, %union.tree_node** %type125, align 8
  %type126 = bitcast %union.tree_node* %61 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type126, i32 0, i32 6
  %bf.load127 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load127, 9
  %bf.clear128 = and i32 %bf.lshr, 127
  %cmp129 = icmp eq i32 %bf.clear128, 51
  br i1 %cmp129, label %land.lhs.true.130, label %if.else.288

land.lhs.true.130:                                ; preds = %land.lhs.true.123
  %62 = load %struct.rtx_def*, %struct.rtx_def** %result_rtl, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load131 = load i32, i32* %63, align 8
  %bf.clear132 = and i32 %bf.load131, 65535
  %cmp133 = icmp eq i32 %bf.clear132, 61
  br i1 %cmp133, label %if.then.134, label %if.else.288

if.then.134:                                      ; preds = %land.lhs.true.130
  store i64 0, i64* %big_endian_correction, align 8
  %64 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %common135 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %type136 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common135, i32 0, i32 1
  %65 = load %union.tree_node*, %union.tree_node** %type136, align 8
  %call137 = call i64 @int_size_in_bytes(%union.tree_node* %65)
  store i64 %call137, i64* %bytes, align 8
  %66 = load i64, i64* %bytes, align 8
  %67 = load i32, i32* @target_flags, align 4
  %and = and i32 %67, 33554432
  %tobool138 = icmp ne i32 %and, 0
  %cond139 = select i1 %tobool138, i32 8, i32 4
  %conv = sext i32 %cond139 to i64
  %add = add i64 %66, %conv
  %sub = sub i64 %add, 1
  %68 = load i32, i32* @target_flags, align 4
  %and140 = and i32 %68, 33554432
  %tobool141 = icmp ne i32 %and140, 0
  %cond142 = select i1 %tobool141, i32 8, i32 4
  %conv143 = sext i32 %cond142 to i64
  %div = udiv i64 %sub, %conv143
  %conv144 = trunc i64 %div to i32
  store i32 %conv144, i32* %n_regs, align 4
  %69 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %common145 = bitcast %union.tree_node* %69 to %struct.tree_common*
  %type146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common145, i32 0, i32 1
  %70 = load %union.tree_node*, %union.tree_node** %type146, align 8
  %type147 = bitcast %union.tree_node* %70 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type147, i32 0, i32 7
  %71 = load i32, i32* %align, align 4
  %72 = load i32, i32* @target_flags, align 4
  %and148 = and i32 %72, 33554432
  %tobool149 = icmp ne i32 %and148, 0
  %cond150 = select i1 %tobool149, i32 64, i32 32
  %cmp151 = icmp ult i32 %71, %cond150
  br i1 %cmp151, label %cond.true.153, label %cond.false.158

cond.true.153:                                    ; preds = %if.then.134
  %73 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %common154 = bitcast %union.tree_node* %73 to %struct.tree_common*
  %type155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 1
  %74 = load %union.tree_node*, %union.tree_node** %type155, align 8
  %type156 = bitcast %union.tree_node* %74 to %struct.tree_type*
  %align157 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type156, i32 0, i32 7
  %75 = load i32, i32* %align157, align 4
  br label %cond.end.162

cond.false.158:                                   ; preds = %if.then.134
  %76 = load i32, i32* @target_flags, align 4
  %and159 = and i32 %76, 33554432
  %tobool160 = icmp ne i32 %and159, 0
  %cond161 = select i1 %tobool160, i32 64, i32 32
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.false.158, %cond.true.153
  %cond163 = phi i32 [ %75, %cond.true.153 ], [ %cond161, %cond.false.158 ]
  store i32 %cond163, i32* %bitsize, align 4
  %77 = load i32, i32* %n_regs, align 4
  %conv164 = sext i32 %77 to i64
  %mul = mul i64 8, %conv164
  %78 = alloca i8, i64 %mul
  %79 = bitcast i8* %78 to %struct.rtx_def**
  store %struct.rtx_def** %79, %struct.rtx_def*** %result_pseudos, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %src, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %dst, align 8
  %80 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %call165 = call %struct.rtx_def* @expand_expr(%union.tree_node* %80, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call165, %struct.rtx_def** %result_val, align 8
  %81 = load i64, i64* %bytes, align 8
  %cmp166 = icmp eq i64 %81, 0
  br i1 %cmp166, label %if.then.168, label %if.end.169

if.then.168:                                      ; preds = %cond.end.162
  call void @expand_null_return()
  br label %if.end.353

if.end.169:                                       ; preds = %cond.end.162
  store i64 0, i64* %bitpos, align 8
  %82 = load i64, i64* %big_endian_correction, align 8
  store i64 %82, i64* %xbitpos, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.169
  %83 = load i64, i64* %bitpos, align 8
  %84 = load i64, i64* %bytes, align 8
  %mul170 = mul i64 %84, 8
  %cmp171 = icmp ult i64 %83, %mul170
  br i1 %cmp171, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %85 = load i64, i64* %xbitpos, align 8
  %86 = load i32, i32* @target_flags, align 4
  %and173 = and i32 %86, 33554432
  %tobool174 = icmp ne i32 %and173, 0
  %cond175 = select i1 %tobool174, i32 64, i32 32
  %conv176 = sext i32 %cond175 to i64
  %rem = urem i64 %85, %conv176
  %cmp177 = icmp eq i64 %rem, 0
  br i1 %cmp177, label %if.then.182, label %lor.lhs.false.179

lor.lhs.false.179:                                ; preds = %for.body
  %87 = load i64, i64* %xbitpos, align 8
  %88 = load i64, i64* %big_endian_correction, align 8
  %cmp180 = icmp eq i64 %87, %88
  br i1 %cmp180, label %if.then.182, label %if.end.195

if.then.182:                                      ; preds = %lor.lhs.false.179, %for.body
  %89 = load i32, i32* @word_mode, align 4
  %call183 = call %struct.rtx_def* @gen_reg_rtx(i32 %89)
  store %struct.rtx_def* %call183, %struct.rtx_def** %dst, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %91 = load i64, i64* %xbitpos, align 8
  %92 = load i32, i32* @target_flags, align 4
  %and184 = and i32 %92, 33554432
  %tobool185 = icmp ne i32 %and184, 0
  %cond186 = select i1 %tobool185, i32 64, i32 32
  %conv187 = sext i32 %cond186 to i64
  %div188 = udiv i64 %91, %conv187
  %93 = load %struct.rtx_def**, %struct.rtx_def*** %result_pseudos, align 8
  %arrayidx189 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %93, i64 %div188
  store %struct.rtx_def* %90, %struct.rtx_def** %arrayidx189, align 8
  %94 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %96 = bitcast %struct.rtx_def* %95 to i32*
  %bf.load190 = load i32, i32* %96, align 8
  %bf.lshr191 = lshr i32 %bf.load190, 16
  %bf.clear192 = and i32 %bf.lshr191, 255
  %idxprom = sext i32 %bf.clear192 to i64
  %arrayidx193 = getelementptr inbounds [59 x %struct.rtx_def*], [59 x %struct.rtx_def*]* getelementptr inbounds ([3 x [59 x %struct.rtx_def*]], [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i32 0, i64 0), i32 0, i64 %idxprom
  %97 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx193, align 8
  %call194 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %94, %struct.rtx_def* %97)
  br label %if.end.195

if.end.195:                                       ; preds = %if.then.182, %lor.lhs.false.179
  %98 = load i64, i64* %bitpos, align 8
  %99 = load i32, i32* @target_flags, align 4
  %and196 = and i32 %99, 33554432
  %tobool197 = icmp ne i32 %and196, 0
  %cond198 = select i1 %tobool197, i32 64, i32 32
  %conv199 = sext i32 %cond198 to i64
  %rem200 = urem i64 %98, %conv199
  %cmp201 = icmp eq i64 %rem200, 0
  br i1 %cmp201, label %if.then.203, label %if.end.211

if.then.203:                                      ; preds = %if.end.195
  %100 = load %struct.rtx_def*, %struct.rtx_def** %result_val, align 8
  %101 = load i64, i64* %bitpos, align 8
  %102 = load i32, i32* @target_flags, align 4
  %and204 = and i32 %102, 33554432
  %tobool205 = icmp ne i32 %and204, 0
  %cond206 = select i1 %tobool205, i32 64, i32 32
  %conv207 = sext i32 %cond206 to i64
  %div208 = udiv i64 %101, %conv207
  %conv209 = trunc i64 %div208 to i32
  %call210 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %100, i32 %conv209, i32 51)
  store %struct.rtx_def* %call210, %struct.rtx_def** %src, align 8
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.203, %if.end.195
  %103 = load %struct.rtx_def*, %struct.rtx_def** %dst, align 8
  %104 = load i32, i32* %bitsize, align 4
  %conv212 = zext i32 %104 to i64
  %105 = load i64, i64* %xbitpos, align 8
  %106 = load i32, i32* @target_flags, align 4
  %and213 = and i32 %106, 33554432
  %tobool214 = icmp ne i32 %and213, 0
  %cond215 = select i1 %tobool214, i32 64, i32 32
  %conv216 = sext i32 %cond215 to i64
  %rem217 = urem i64 %105, %conv216
  %107 = load i32, i32* @word_mode, align 4
  %108 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %109 = load i32, i32* %bitsize, align 4
  %conv218 = zext i32 %109 to i64
  %110 = load i64, i64* %bitpos, align 8
  %111 = load i32, i32* @target_flags, align 4
  %and219 = and i32 %111, 33554432
  %tobool220 = icmp ne i32 %and219, 0
  %cond221 = select i1 %tobool220, i32 64, i32 32
  %conv222 = sext i32 %cond221 to i64
  %rem223 = urem i64 %110, %conv222
  %112 = load i32, i32* @word_mode, align 4
  %113 = load i32, i32* @word_mode, align 4
  %114 = load i32, i32* @target_flags, align 4
  %and224 = and i32 %114, 33554432
  %tobool225 = icmp ne i32 %and224, 0
  %cond226 = select i1 %tobool225, i32 64, i32 32
  %conv227 = sext i32 %cond226 to i64
  %call228 = call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %108, i64 %conv218, i64 %rem223, i32 1, %struct.rtx_def* null, i32 %112, i32 %113, i64 %conv227)
  %115 = load i32, i32* @target_flags, align 4
  %and229 = and i32 %115, 33554432
  %tobool230 = icmp ne i32 %and229, 0
  %cond231 = select i1 %tobool230, i32 64, i32 32
  %conv232 = sext i32 %cond231 to i64
  %call233 = call %struct.rtx_def* @store_bit_field(%struct.rtx_def* %103, i64 %conv212, i64 %rem217, i32 %107, %struct.rtx_def* %call228, i64 %conv232)
  br label %for.inc

for.inc:                                          ; preds = %if.end.211
  %116 = load i32, i32* %bitsize, align 4
  %conv234 = zext i32 %116 to i64
  %117 = load i64, i64* %bitpos, align 8
  %add235 = add i64 %117, %conv234
  store i64 %add235, i64* %bitpos, align 8
  %118 = load i32, i32* %bitsize, align 4
  %conv236 = zext i32 %118 to i64
  %119 = load i64, i64* %xbitpos, align 8
  %add237 = add i64 %119, %conv236
  store i64 %add237, i64* %xbitpos, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %120 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %120, i32* %tmpmode, align 4
  br label %for.cond.238

for.cond.238:                                     ; preds = %for.inc.249, %for.end
  %121 = load i32, i32* %tmpmode, align 4
  %cmp239 = icmp ne i32 %121, 0
  br i1 %cmp239, label %for.body.241, label %for.end.253

for.body.241:                                     ; preds = %for.cond.238
  %122 = load i32, i32* %tmpmode, align 4
  %idxprom242 = sext i32 %122 to i64
  %arrayidx243 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom242
  %123 = load i8, i8* %arrayidx243, align 1
  %conv244 = zext i8 %123 to i64
  %124 = load i64, i64* %bytes, align 8
  %cmp245 = icmp uge i64 %conv244, %124
  br i1 %cmp245, label %if.then.247, label %if.end.248

if.then.247:                                      ; preds = %for.body.241
  br label %for.end.253

if.end.248:                                       ; preds = %for.body.241
  br label %for.inc.249

for.inc.249:                                      ; preds = %if.end.248
  %125 = load i32, i32* %tmpmode, align 4
  %idxprom250 = sext i32 %125 to i64
  %arrayidx251 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom250
  %126 = load i8, i8* %arrayidx251, align 1
  %conv252 = zext i8 %126 to i32
  store i32 %conv252, i32* %tmpmode, align 4
  br label %for.cond.238

for.end.253:                                      ; preds = %if.then.247, %for.cond.238
  %127 = load i32, i32* %tmpmode, align 4
  %cmp254 = icmp eq i32 %127, 0
  br i1 %cmp254, label %if.then.256, label %if.end.257

if.then.256:                                      ; preds = %for.end.253
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3202, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__FUNCTION__.expand_return, i32 0, i32 0)) #6
  unreachable

if.end.257:                                       ; preds = %for.end.253
  %128 = load i32, i32* %tmpmode, align 4
  %129 = load %struct.rtx_def*, %struct.rtx_def** %result_rtl, align 8
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load258 = load i32, i32* %130, align 8
  %bf.value = and i32 %128, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear259 = and i32 %bf.load258, -16711681
  %bf.set260 = or i32 %bf.clear259, %bf.shl
  store i32 %bf.set260, i32* %130, align 8
  %131 = load i32, i32* %tmpmode, align 4
  %idxprom261 = sext i32 %131 to i64
  %arrayidx262 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom261
  %132 = load i8, i8* %arrayidx262, align 1
  %conv263 = zext i8 %132 to i32
  %133 = load i32, i32* @word_mode, align 4
  %idxprom264 = sext i32 %133 to i64
  %arrayidx265 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom264
  %134 = load i8, i8* %arrayidx265, align 1
  %conv266 = zext i8 %134 to i32
  %cmp267 = icmp slt i32 %conv263, %conv266
  br i1 %cmp267, label %if.then.269, label %if.else.270

if.then.269:                                      ; preds = %if.end.257
  %135 = load i32, i32* @word_mode, align 4
  store i32 %135, i32* %result_reg_mode, align 4
  br label %if.end.271

if.else.270:                                      ; preds = %if.end.257
  %136 = load i32, i32* %tmpmode, align 4
  store i32 %136, i32* %result_reg_mode, align 4
  br label %if.end.271

if.end.271:                                       ; preds = %if.else.270, %if.then.269
  %137 = load i32, i32* %result_reg_mode, align 4
  %call272 = call %struct.rtx_def* @gen_reg_rtx(i32 %137)
  store %struct.rtx_def* %call272, %struct.rtx_def** %result_reg, align 8
  call void @emit_queue()
  store i32 0, i32* %i, align 4
  br label %for.cond.273

for.cond.273:                                     ; preds = %for.inc.281, %if.end.271
  %138 = load i32, i32* %i, align 4
  %139 = load i32, i32* %n_regs, align 4
  %cmp274 = icmp slt i32 %138, %139
  br i1 %cmp274, label %for.body.276, label %for.end.282

for.body.276:                                     ; preds = %for.cond.273
  %140 = load %struct.rtx_def*, %struct.rtx_def** %result_reg, align 8
  %141 = load i32, i32* %i, align 4
  %142 = load i32, i32* %result_reg_mode, align 4
  %call277 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %140, i32 %141, i32 0, i32 %142)
  %143 = load i32, i32* %i, align 4
  %idxprom278 = sext i32 %143 to i64
  %144 = load %struct.rtx_def**, %struct.rtx_def*** %result_pseudos, align 8
  %arrayidx279 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %144, i64 %idxprom278
  %145 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx279, align 8
  %call280 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call277, %struct.rtx_def* %145)
  br label %for.inc.281

for.inc.281:                                      ; preds = %for.body.276
  %146 = load i32, i32* %i, align 4
  %inc = add nsw i32 %146, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.273

for.end.282:                                      ; preds = %for.cond.273
  %147 = load i32, i32* %tmpmode, align 4
  %148 = load i32, i32* %result_reg_mode, align 4
  %cmp283 = icmp ne i32 %147, %148
  br i1 %cmp283, label %if.then.285, label %if.end.287

if.then.285:                                      ; preds = %for.end.282
  %149 = load i32, i32* %tmpmode, align 4
  %150 = load %struct.rtx_def*, %struct.rtx_def** %result_reg, align 8
  %call286 = call %struct.rtx_def* @gen_lowpart(i32 %149, %struct.rtx_def* %150)
  store %struct.rtx_def* %call286, %struct.rtx_def** %result_reg, align 8
  br label %if.end.287

if.end.287:                                       ; preds = %if.then.285, %for.end.282
  %151 = load %struct.rtx_def*, %struct.rtx_def** %result_reg, align 8
  call void @expand_value_return(%struct.rtx_def* %151)
  br label %if.end.353

if.else.288:                                      ; preds = %land.lhs.true.130, %land.lhs.true.123, %cond.end
  %152 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %cmp289 = icmp ne %union.tree_node* %152, null
  br i1 %cmp289, label %land.lhs.true.291, label %if.else.350

land.lhs.true.291:                                ; preds = %if.else.288
  %153 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %common292 = bitcast %union.tree_node* %153 to %struct.tree_common*
  %type293 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common292, i32 0, i32 1
  %154 = load %union.tree_node*, %union.tree_node** %type293, align 8
  %common294 = bitcast %union.tree_node* %154 to %struct.tree_common*
  %code295 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common294, i32 0, i32 2
  %bf.load296 = load i32, i32* %code295, align 8
  %bf.clear297 = and i32 %bf.load296, 255
  %cmp298 = icmp eq i32 %bf.clear297, 5
  br i1 %cmp298, label %if.else.350, label %land.lhs.true.300

land.lhs.true.300:                                ; preds = %land.lhs.true.291
  %155 = load %struct.rtx_def*, %struct.rtx_def** %result_rtl, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %bf.load301 = load i32, i32* %156, align 8
  %bf.clear302 = and i32 %bf.load301, 65535
  %cmp303 = icmp eq i32 %bf.clear302, 61
  br i1 %cmp303, label %if.then.310, label %lor.lhs.false.305

lor.lhs.false.305:                                ; preds = %land.lhs.true.300
  %157 = load %struct.rtx_def*, %struct.rtx_def** %result_rtl, align 8
  %158 = bitcast %struct.rtx_def* %157 to i32*
  %bf.load306 = load i32, i32* %158, align 8
  %bf.clear307 = and i32 %bf.load306, 65535
  %cmp308 = icmp eq i32 %bf.clear307, 39
  br i1 %cmp308, label %if.then.310, label %if.else.350

if.then.310:                                      ; preds = %lor.lhs.false.305, %land.lhs.true.300
  %159 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl311 = bitcast %union.tree_node* %159 to %struct.tree_decl*
  %result312 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl311, i32 0, i32 11
  %160 = load %union.tree_node*, %union.tree_node** %result312, align 8
  %common313 = bitcast %union.tree_node* %160 to %struct.tree_common*
  %type314 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common313, i32 0, i32 1
  %161 = load %union.tree_node*, %union.tree_node** %type314, align 8
  store %union.tree_node* %161, %union.tree_node** %ot, align 8
  %162 = load %union.tree_node*, %union.tree_node** %ot, align 8
  %163 = load %union.tree_node*, %union.tree_node** %ot, align 8
  %common315 = bitcast %union.tree_node* %163 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common315, i32 0, i32 2
  %bf.load316 = load i32, i32* %readonly_flag, align 8
  %bf.lshr317 = lshr i32 %bf.load316, 12
  %bf.clear318 = and i32 %bf.lshr317, 1
  %mul319 = mul nsw i32 %bf.clear318, 1
  %164 = load %union.tree_node*, %union.tree_node** %ot, align 8
  %common320 = bitcast %union.tree_node* %164 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common320, i32 0, i32 2
  %bf.load321 = load i32, i32* %volatile_flag, align 8
  %bf.lshr322 = lshr i32 %bf.load321, 11
  %bf.clear323 = and i32 %bf.lshr322, 1
  %mul324 = mul nsw i32 %bf.clear323, 2
  %or = or i32 %mul319, %mul324
  %165 = load %union.tree_node*, %union.tree_node** %ot, align 8
  %type325 = bitcast %union.tree_node* %165 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type325, i32 0, i32 6
  %bf.load326 = load i32, i32* %restrict_flag, align 4
  %bf.lshr327 = lshr i32 %bf.load326, 21
  %bf.clear328 = and i32 %bf.lshr327, 1
  %mul329 = mul nsw i32 %bf.clear328, 4
  %or330 = or i32 %or, %mul329
  %166 = load %union.tree_node*, %union.tree_node** %ot, align 8
  %common331 = bitcast %union.tree_node* %166 to %struct.tree_common*
  %code332 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common331, i32 0, i32 2
  %bf.load333 = load i32, i32* %code332, align 8
  %bf.clear334 = and i32 %bf.load333, 255
  %cmp335 = icmp eq i32 %bf.clear334, 20
  br i1 %cmp335, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.310
  %167 = load %union.tree_node*, %union.tree_node** %ot, align 8
  %common337 = bitcast %union.tree_node* %167 to %struct.tree_common*
  %type338 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common337, i32 0, i32 1
  %168 = load %union.tree_node*, %union.tree_node** %type338, align 8
  %tobool339 = icmp ne %union.tree_node* %168, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.310
  %169 = phi i1 [ false, %if.then.310 ], [ %tobool339, %land.rhs ]
  %land.ext = zext i1 %169 to i32
  %mul340 = mul nsw i32 %land.ext, 8
  %or341 = or i32 %or330, %mul340
  %or342 = or i32 %or341, 1
  %call343 = call %union.tree_node* @build_qualified_type(%union.tree_node* %162, i32 %or342)
  store %union.tree_node* %call343, %union.tree_node** %nt, align 8
  %170 = load %union.tree_node*, %union.tree_node** %nt, align 8
  %call344 = call %struct.rtx_def* @assign_temp(%union.tree_node* %170, i32 0, i32 0, i32 1)
  store %struct.rtx_def* %call344, %struct.rtx_def** %val, align 8
  %171 = load %union.tree_node*, %union.tree_node** %retval_rhs, align 8
  %172 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %173 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %174 = bitcast %struct.rtx_def* %173 to i32*
  %bf.load345 = load i32, i32* %174, align 8
  %bf.lshr346 = lshr i32 %bf.load345, 16
  %bf.clear347 = and i32 %bf.lshr346, 255
  %call348 = call %struct.rtx_def* @expand_expr(%union.tree_node* %171, %struct.rtx_def* %172, i32 %bf.clear347, i32 0)
  store %struct.rtx_def* %call348, %struct.rtx_def** %val, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %call349 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %175)
  store %struct.rtx_def* %call349, %struct.rtx_def** %val, align 8
  call void @emit_queue()
  %176 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  call void @expand_value_return(%struct.rtx_def* %176)
  br label %if.end.352

if.else.350:                                      ; preds = %lor.lhs.false.305, %land.lhs.true.291, %if.else.288
  %177 = load %union.tree_node*, %union.tree_node** %retval.addr, align 8
  %178 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call351 = call %struct.rtx_def* @expand_expr(%union.tree_node* %177, %struct.rtx_def* %178, i32 0, i32 0)
  call void @emit_queue()
  %179 = load %struct.rtx_def*, %struct.rtx_def** %result_rtl, align 8
  call void @expand_value_return(%struct.rtx_def* %179)
  br label %if.end.352

if.end.352:                                       ; preds = %if.else.350, %land.end
  br label %if.end.353

if.end.353:                                       ; preds = %if.then, %if.then.5, %if.then.75, %if.then.168, %if.end.352, %if.end.287
  ret void
}

; Function Attrs: nounwind uwtable
define void @start_cleanup_deferral() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 0
  %2 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %tobool = icmp ne %struct.nesting* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_block_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 0
  %5 = load %struct.nesting*, %struct.nesting** %x_block_stack2, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %conditional_code = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 10
  %6 = load i32, i32* %conditional_code, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %conditional_code, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #2

; Function Attrs: nounwind uwtable
define void @end_cleanup_deferral() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 0
  %2 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %tobool = icmp ne %struct.nesting* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_block_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 0
  %5 = load %struct.nesting*, %struct.nesting** %x_block_stack2, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %conditional_code = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 10
  %6 = load i32, i32* %conditional_code, align 4
  %dec = add nsw i32 %6, -1
  store i32 %dec, i32* %conditional_code, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i64 @int_size_in_bytes(%union.tree_node*) #2

declare %struct.rtx_def* @operand_subword_force(%struct.rtx_def*, i32, i32) #2

declare %struct.rtx_def* @store_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*, i64) #2

declare %struct.rtx_def* @extract_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*, i32, i32, i64) #2

declare %struct.rtx_def* @operand_subword(%struct.rtx_def*, i32, i32, i32) #2

declare %struct.rtx_def* @gen_lowpart(i32, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @expand_value_return(%struct.rtx_def* %val) #0 {
entry:
  %val.addr = alloca %struct.rtx_def*, align 8
  %last_insn = alloca %struct.rtx_def*, align 8
  %return_reg = alloca %struct.rtx_def*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %val, %struct.rtx_def** %val.addr, align 8
  %call = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call, %struct.rtx_def** %last_insn, align 8
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 11
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8
  %decl1 = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 17
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool = icmp ne %struct.rtx_def* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl2 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %result3 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 11
  %4 = load %union.tree_node*, %union.tree_node** %result3, align 8
  %decl4 = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %rtl5 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl4, i32 0, i32 17
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl6 = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %result7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 11
  %7 = load %union.tree_node*, %union.tree_node** %result7, align 8
  call void @make_decl_rtl(%union.tree_node* %7, i8* null)
  %8 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl8 = bitcast %union.tree_node* %8 to %struct.tree_decl*
  %result9 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 11
  %9 = load %union.tree_node*, %union.tree_node** %result9, align 8
  %decl10 = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %rtl11 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 17
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl11, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %5, %cond.true ], [ %10, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %return_reg, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %return_reg, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8
  %cmp = icmp ne %struct.rtx_def* %11, %12
  br i1 %cmp, label %if.then, label %if.end.19

if.then:                                          ; preds = %cond.end
  %13 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl12 = bitcast %union.tree_node* %13 to %struct.tree_decl*
  %result13 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl12, i32 0, i32 11
  %14 = load %union.tree_node*, %union.tree_node** %result13, align 8
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %15 = load %union.tree_node*, %union.tree_node** %type14, align 8
  store %union.tree_node* %15, %union.tree_node** %type, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %return_reg, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load = load i32, i32* %17, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp15 = icmp eq i32 %bf.clear, 39
  br i1 %cmp15, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %return_reg, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call17 = call i64 @int_size_in_bytes(%union.tree_node* %20)
  %conv = trunc i64 %call17 to i32
  call void @emit_group_load(%struct.rtx_def* %18, %struct.rtx_def* %19, i32 %conv)
  br label %if.end

if.else:                                          ; preds = %if.then
  %21 = load %struct.rtx_def*, %struct.rtx_def** %return_reg, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8
  %call18 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %21, %struct.rtx_def* %22)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.16
  br label %if.end.19

if.end.19:                                        ; preds = %if.end, %cond.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8
  call void @expand_null_return_1(%struct.rtx_def* %23)
  ret void
}

declare %struct.rtx_def* @force_not_mem(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define i32 @drop_through_at_end_p() #0 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %call = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool1 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool1, label %land.rhs.2, label %land.end.6

land.rhs.2:                                       ; preds = %while.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load3 = load i32, i32* %8, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp ne i32 %bf.clear4, 35
  br label %land.end.6

land.end.6:                                       ; preds = %land.rhs.2, %while.end
  %9 = phi i1 [ false, %while.end ], [ %cmp5, %land.rhs.2 ]
  %land.ext = zext i1 %9 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @optimize_tail_recursion(%union.tree_node* %arguments, %struct.rtx_def* %last_insn) #0 {
entry:
  %retval = alloca i32, align 4
  %arguments.addr = alloca %union.tree_node*, align 8
  %last_insn.addr = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %arguments, %union.tree_node** %arguments.addr, align 8
  store %struct.rtx_def* %last_insn, %struct.rtx_def** %last_insn.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %arguments.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %arguments1 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 10
  %2 = load %union.tree_node*, %union.tree_node** %arguments1, align 8
  %call = call i32 @tail_recursion_args(%union.tree_node* %0, %union.tree_node* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_label = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 28
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_label, align 8
  %cmp = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %call3 = call %struct.rtx_def* @gen_label_rtx()
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_label4 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 28
  store %struct.rtx_def* %call3, %struct.rtx_def** %x_tail_recursion_label4, align 8
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_label5 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 28
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_label5, align 8
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_reentry = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 29
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_reentry, align 8
  %call6 = call %struct.rtx_def* @emit_label_after(%struct.rtx_def* %7, %struct.rtx_def* %9)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  call void @emit_queue()
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_label7 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 28
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_label7, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %last_insn.addr, align 8
  call void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %11, %struct.rtx_def* %12)
  %call8 = call %struct.rtx_def* @emit_barrier()
  store i32 1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.end
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @tail_recursion_args(%union.tree_node* %actuals, %union.tree_node* %formals) #0 {
entry:
  %retval = alloca i32, align 4
  %actuals.addr = alloca %union.tree_node*, align 8
  %formals.addr = alloca %union.tree_node*, align 8
  %a = alloca %union.tree_node*, align 8
  %f = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %argvec = alloca %struct.rtx_def**, align 8
  %copy = alloca i32, align 4
  %j = alloca i32, align 4
  store %union.tree_node* %actuals, %union.tree_node** %actuals.addr, align 8
  store %union.tree_node* %formals, %union.tree_node** %formals.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %actuals.addr, align 8
  store %union.tree_node* %0, %union.tree_node** %a, align 8
  %1 = load %union.tree_node*, %union.tree_node** %formals.addr, align 8
  store %union.tree_node* %1, %union.tree_node** %f, align 8
  %2 = load %union.tree_node*, %union.tree_node** %actuals.addr, align 8
  store %union.tree_node* %2, %union.tree_node** %a, align 8
  %3 = load %union.tree_node*, %union.tree_node** %formals.addr, align 8
  store %union.tree_node* %3, %union.tree_node** %f, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %a, align 8
  %tobool = icmp ne %union.tree_node* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %f, align 8
  %tobool1 = icmp ne %union.tree_node* %5, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %tobool1, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load %union.tree_node*, %union.tree_node** %a, align 8
  %list = bitcast %union.tree_node* %7 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type2 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 15
  %10 = load %union.tree_node*, %union.tree_node** %main_variant, align 8
  %11 = load %union.tree_node*, %union.tree_node** %f, align 8
  %common3 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1
  %12 = load %union.tree_node*, %union.tree_node** %type4, align 8
  %type5 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %main_variant6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 15
  %13 = load %union.tree_node*, %union.tree_node** %main_variant6, align 8
  %cmp = icmp ne %union.tree_node* %10, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %14 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool7 = icmp ne %struct.rtx_def* %15, null
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl8 = bitcast %union.tree_node* %16 to %struct.tree_decl*
  %rtl9 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %f, align 8
  call void @make_decl_rtl(%union.tree_node* %18, i8* null)
  %19 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl10 = bitcast %union.tree_node* %19 to %struct.tree_decl*
  %rtl11 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 17
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl11, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %17, %cond.true ], [ %20, %cond.false ]
  %21 = bitcast %struct.rtx_def* %cond to i32*
  %bf.load = load i32, i32* %21, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp12 = icmp ne i32 %bf.clear, 61
  br i1 %cmp12, label %if.then.17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl13 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %mode = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl13, i32 0, i32 5
  %23 = bitcast i48* %mode to i64*
  %bf.load14 = load i64, i64* %23, align 8
  %bf.clear15 = and i64 %bf.load14, 255
  %bf.cast = trunc i64 %bf.clear15 to i32
  %cmp16 = icmp eq i32 %bf.cast, 51
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %lor.lhs.false, %cond.end
  store i32 0, i32* %retval
  br label %return

if.end.18:                                        ; preds = %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end.18
  %24 = load %union.tree_node*, %union.tree_node** %a, align 8
  %common19 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 0
  %25 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %25, %union.tree_node** %a, align 8
  %26 = load %union.tree_node*, %union.tree_node** %f, align 8
  %common20 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %chain21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 0
  %27 = load %union.tree_node*, %union.tree_node** %chain21, align 8
  store %union.tree_node* %27, %union.tree_node** %f, align 8
  %28 = load i32, i32* %i, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %29 = load %union.tree_node*, %union.tree_node** %a, align 8
  %cmp22 = icmp ne %union.tree_node* %29, null
  br i1 %cmp22, label %if.then.25, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %for.end
  %30 = load %union.tree_node*, %union.tree_node** %f, align 8
  %cmp24 = icmp ne %union.tree_node* %30, null
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %lor.lhs.false.23, %for.end
  store i32 0, i32* %retval
  br label %return

if.end.26:                                        ; preds = %lor.lhs.false.23
  %31 = load i32, i32* %i, align 4
  %conv = sext i32 %31 to i64
  %mul = mul i64 %conv, 8
  %32 = alloca i8, i64 %mul
  %33 = bitcast i8* %32 to %struct.rtx_def**
  store %struct.rtx_def** %33, %struct.rtx_def*** %argvec, align 8
  %34 = load %union.tree_node*, %union.tree_node** %actuals.addr, align 8
  store %union.tree_node* %34, %union.tree_node** %a, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.32, %if.end.26
  %35 = load %union.tree_node*, %union.tree_node** %a, align 8
  %tobool28 = icmp ne %union.tree_node* %35, null
  br i1 %tobool28, label %for.body.29, label %for.end.36

for.body.29:                                      ; preds = %for.cond.27
  %36 = load %union.tree_node*, %union.tree_node** %a, align 8
  %list30 = bitcast %union.tree_node* %36 to %struct.tree_list*
  %value31 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list30, i32 0, i32 2
  %37 = load %union.tree_node*, %union.tree_node** %value31, align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %37, %struct.rtx_def* null, i32 0, i32 0)
  %38 = load i32, i32* %i, align 4
  %idxprom = sext i32 %38 to i64
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %argvec, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %39, i64 %idxprom
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8
  br label %for.inc.32

for.inc.32:                                       ; preds = %for.body.29
  %40 = load %union.tree_node*, %union.tree_node** %a, align 8
  %common33 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %chain34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 0
  %41 = load %union.tree_node*, %union.tree_node** %chain34, align 8
  store %union.tree_node* %41, %union.tree_node** %a, align 8
  %42 = load i32, i32* %i, align 4
  %inc35 = add nsw i32 %42, 1
  store i32 %inc35, i32* %i, align 4
  br label %for.cond.27

for.end.36:                                       ; preds = %for.cond.27
  %43 = load %union.tree_node*, %union.tree_node** %actuals.addr, align 8
  store %union.tree_node* %43, %union.tree_node** %a, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.74, %for.end.36
  %44 = load %union.tree_node*, %union.tree_node** %a, align 8
  %tobool38 = icmp ne %union.tree_node* %44, null
  br i1 %tobool38, label %for.body.39, label %for.end.78

for.body.39:                                      ; preds = %for.cond.37
  store i32 0, i32* %copy, align 4
  %45 = load %union.tree_node*, %union.tree_node** %formals.addr, align 8
  store %union.tree_node* %45, %union.tree_node** %f, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond.40

for.cond.40:                                      ; preds = %for.inc.61, %for.body.39
  %46 = load i32, i32* %j, align 4
  %47 = load i32, i32* %i, align 4
  %cmp41 = icmp slt i32 %46, %47
  br i1 %cmp41, label %for.body.43, label %for.end.65

for.body.43:                                      ; preds = %for.cond.40
  %48 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl44 = bitcast %union.tree_node* %48 to %struct.tree_decl*
  %rtl45 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl44, i32 0, i32 17
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtl45, align 8
  %tobool46 = icmp ne %struct.rtx_def* %49, null
  br i1 %tobool46, label %cond.true.47, label %cond.false.50

cond.true.47:                                     ; preds = %for.body.43
  %50 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl48 = bitcast %union.tree_node* %50 to %struct.tree_decl*
  %rtl49 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl48, i32 0, i32 17
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtl49, align 8
  br label %cond.end.53

cond.false.50:                                    ; preds = %for.body.43
  %52 = load %union.tree_node*, %union.tree_node** %f, align 8
  call void @make_decl_rtl(%union.tree_node* %52, i8* null)
  %53 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl51 = bitcast %union.tree_node* %53 to %struct.tree_decl*
  %rtl52 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl51, i32 0, i32 17
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtl52, align 8
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.50, %cond.true.47
  %cond54 = phi %struct.rtx_def* [ %51, %cond.true.47 ], [ %54, %cond.false.50 ]
  %55 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %55 to i64
  %56 = load %struct.rtx_def**, %struct.rtx_def*** %argvec, align 8
  %arrayidx56 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %56, i64 %idxprom55
  %57 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx56, align 8
  %call57 = call i32 @reg_mentioned_p(%struct.rtx_def* %cond54, %struct.rtx_def* %57)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %cond.end.53
  store i32 1, i32* %copy, align 4
  br label %for.end.65

if.end.60:                                        ; preds = %cond.end.53
  br label %for.inc.61

for.inc.61:                                       ; preds = %if.end.60
  %58 = load %union.tree_node*, %union.tree_node** %f, align 8
  %common62 = bitcast %union.tree_node* %58 to %struct.tree_common*
  %chain63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 0
  %59 = load %union.tree_node*, %union.tree_node** %chain63, align 8
  store %union.tree_node* %59, %union.tree_node** %f, align 8
  %60 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %60, 1
  store i32 %inc64, i32* %j, align 4
  br label %for.cond.40

for.end.65:                                       ; preds = %if.then.59, %for.cond.40
  %61 = load i32, i32* %copy, align 4
  %tobool66 = icmp ne i32 %61, 0
  br i1 %tobool66, label %if.then.67, label %if.end.73

if.then.67:                                       ; preds = %for.end.65
  %62 = load i32, i32* %i, align 4
  %idxprom68 = sext i32 %62 to i64
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %argvec, align 8
  %arrayidx69 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %63, i64 %idxprom68
  %64 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx69, align 8
  %call70 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %64)
  %65 = load i32, i32* %i, align 4
  %idxprom71 = sext i32 %65 to i64
  %66 = load %struct.rtx_def**, %struct.rtx_def*** %argvec, align 8
  %arrayidx72 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %66, i64 %idxprom71
  store %struct.rtx_def* %call70, %struct.rtx_def** %arrayidx72, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.67, %for.end.65
  br label %for.inc.74

for.inc.74:                                       ; preds = %if.end.73
  %67 = load %union.tree_node*, %union.tree_node** %a, align 8
  %common75 = bitcast %union.tree_node* %67 to %struct.tree_common*
  %chain76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 0
  %68 = load %union.tree_node*, %union.tree_node** %chain76, align 8
  store %union.tree_node* %68, %union.tree_node** %a, align 8
  %69 = load i32, i32* %i, align 4
  %inc77 = add nsw i32 %69, 1
  store i32 %inc77, i32* %i, align 4
  br label %for.cond.37

for.end.78:                                       ; preds = %for.cond.37
  %70 = load %union.tree_node*, %union.tree_node** %formals.addr, align 8
  store %union.tree_node* %70, %union.tree_node** %f, align 8
  %71 = load %union.tree_node*, %union.tree_node** %actuals.addr, align 8
  store %union.tree_node* %71, %union.tree_node** %a, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.79

for.cond.79:                                      ; preds = %for.inc.139, %for.end.78
  %72 = load %union.tree_node*, %union.tree_node** %f, align 8
  %tobool80 = icmp ne %union.tree_node* %72, null
  br i1 %tobool80, label %for.body.81, label %for.end.145

for.body.81:                                      ; preds = %for.cond.79
  %73 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl82 = bitcast %union.tree_node* %73 to %struct.tree_decl*
  %rtl83 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl82, i32 0, i32 17
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtl83, align 8
  %tobool84 = icmp ne %struct.rtx_def* %74, null
  br i1 %tobool84, label %cond.true.85, label %cond.false.88

cond.true.85:                                     ; preds = %for.body.81
  %75 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl86 = bitcast %union.tree_node* %75 to %struct.tree_decl*
  %rtl87 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl86, i32 0, i32 17
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtl87, align 8
  br label %cond.end.91

cond.false.88:                                    ; preds = %for.body.81
  %77 = load %union.tree_node*, %union.tree_node** %f, align 8
  call void @make_decl_rtl(%union.tree_node* %77, i8* null)
  %78 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl89 = bitcast %union.tree_node* %78 to %struct.tree_decl*
  %rtl90 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl89, i32 0, i32 17
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtl90, align 8
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.88, %cond.true.85
  %cond92 = phi %struct.rtx_def* [ %76, %cond.true.85 ], [ %79, %cond.false.88 ]
  %80 = bitcast %struct.rtx_def* %cond92 to i32*
  %bf.load93 = load i32, i32* %80, align 8
  %bf.lshr = lshr i32 %bf.load93, 16
  %bf.clear94 = and i32 %bf.lshr, 255
  %81 = load i32, i32* %i, align 4
  %idxprom95 = sext i32 %81 to i64
  %82 = load %struct.rtx_def**, %struct.rtx_def*** %argvec, align 8
  %arrayidx96 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %82, i64 %idxprom95
  %83 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx96, align 8
  %84 = bitcast %struct.rtx_def* %83 to i32*
  %bf.load97 = load i32, i32* %84, align 8
  %bf.lshr98 = lshr i32 %bf.load97, 16
  %bf.clear99 = and i32 %bf.lshr98, 255
  %cmp100 = icmp eq i32 %bf.clear94, %bf.clear99
  br i1 %cmp100, label %if.then.102, label %if.else

if.then.102:                                      ; preds = %cond.end.91
  %85 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl103 = bitcast %union.tree_node* %85 to %struct.tree_decl*
  %rtl104 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl103, i32 0, i32 17
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rtl104, align 8
  %tobool105 = icmp ne %struct.rtx_def* %86, null
  br i1 %tobool105, label %cond.true.106, label %cond.false.109

cond.true.106:                                    ; preds = %if.then.102
  %87 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl107 = bitcast %union.tree_node* %87 to %struct.tree_decl*
  %rtl108 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl107, i32 0, i32 17
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtl108, align 8
  br label %cond.end.112

cond.false.109:                                   ; preds = %if.then.102
  %89 = load %union.tree_node*, %union.tree_node** %f, align 8
  call void @make_decl_rtl(%union.tree_node* %89, i8* null)
  %90 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl110 = bitcast %union.tree_node* %90 to %struct.tree_decl*
  %rtl111 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl110, i32 0, i32 17
  %91 = load %struct.rtx_def*, %struct.rtx_def** %rtl111, align 8
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.109, %cond.true.106
  %cond113 = phi %struct.rtx_def* [ %88, %cond.true.106 ], [ %91, %cond.false.109 ]
  %92 = load i32, i32* %i, align 4
  %idxprom114 = sext i32 %92 to i64
  %93 = load %struct.rtx_def**, %struct.rtx_def*** %argvec, align 8
  %arrayidx115 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %93, i64 %idxprom114
  %94 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx115, align 8
  %call116 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %cond113, %struct.rtx_def* %94)
  br label %if.end.138

if.else:                                          ; preds = %cond.end.91
  %95 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl117 = bitcast %union.tree_node* %95 to %struct.tree_decl*
  %rtl118 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl117, i32 0, i32 17
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtl118, align 8
  %tobool119 = icmp ne %struct.rtx_def* %96, null
  br i1 %tobool119, label %cond.true.120, label %cond.false.123

cond.true.120:                                    ; preds = %if.else
  %97 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl121 = bitcast %union.tree_node* %97 to %struct.tree_decl*
  %rtl122 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl121, i32 0, i32 17
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtl122, align 8
  br label %cond.end.126

cond.false.123:                                   ; preds = %if.else
  %99 = load %union.tree_node*, %union.tree_node** %f, align 8
  call void @make_decl_rtl(%union.tree_node* %99, i8* null)
  %100 = load %union.tree_node*, %union.tree_node** %f, align 8
  %decl124 = bitcast %union.tree_node* %100 to %struct.tree_decl*
  %rtl125 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl124, i32 0, i32 17
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtl125, align 8
  br label %cond.end.126

cond.end.126:                                     ; preds = %cond.false.123, %cond.true.120
  %cond127 = phi %struct.rtx_def* [ %98, %cond.true.120 ], [ %101, %cond.false.123 ]
  %102 = load i32, i32* %i, align 4
  %idxprom128 = sext i32 %102 to i64
  %103 = load %struct.rtx_def**, %struct.rtx_def*** %argvec, align 8
  %arrayidx129 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %103, i64 %idxprom128
  %104 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx129, align 8
  %105 = load %union.tree_node*, %union.tree_node** %a, align 8
  %list130 = bitcast %union.tree_node* %105 to %struct.tree_list*
  %value131 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list130, i32 0, i32 2
  %106 = load %union.tree_node*, %union.tree_node** %value131, align 8
  %common132 = bitcast %union.tree_node* %106 to %struct.tree_common*
  %type133 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common132, i32 0, i32 1
  %107 = load %union.tree_node*, %union.tree_node** %type133, align 8
  %common134 = bitcast %union.tree_node* %107 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 2
  %bf.load135 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr136 = lshr i32 %bf.load135, 13
  %bf.clear137 = and i32 %bf.lshr136, 1
  call void @convert_move(%struct.rtx_def* %cond127, %struct.rtx_def* %104, i32 %bf.clear137)
  br label %if.end.138

if.end.138:                                       ; preds = %cond.end.126, %cond.end.112
  br label %for.inc.139

for.inc.139:                                      ; preds = %if.end.138
  %108 = load %union.tree_node*, %union.tree_node** %f, align 8
  %common140 = bitcast %union.tree_node* %108 to %struct.tree_common*
  %chain141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 0
  %109 = load %union.tree_node*, %union.tree_node** %chain141, align 8
  store %union.tree_node* %109, %union.tree_node** %f, align 8
  %110 = load %union.tree_node*, %union.tree_node** %a, align 8
  %common142 = bitcast %union.tree_node* %110 to %struct.tree_common*
  %chain143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 0
  %111 = load %union.tree_node*, %union.tree_node** %chain143, align 8
  store %union.tree_node* %111, %union.tree_node** %a, align 8
  %112 = load i32, i32* %i, align 4
  %inc144 = add nsw i32 %112, 1
  store i32 %inc144, i32* %i, align 4
  br label %for.cond.79

for.end.145:                                      ; preds = %for.cond.79
  call void @free_temp_slots()
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.145, %if.then.25, %if.then.17, %if.then
  %113 = load i32, i32* %retval
  ret i32 %113
}

declare %struct.rtx_def* @emit_label_after(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_start_bindings_and_block(i32 %flags, %union.tree_node* %block) #0 {
entry:
  %flags.addr = alloca i32, align 4
  %block.addr = alloca %union.tree_node*, align 8
  %thisblock = alloca %struct.nesting*, align 8
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp35 = alloca i8*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %exit_flag = alloca i32, align 4
  %block_flag = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__h, align 8
  %0 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %0, %struct.obstack** %__o, align 8
  store i32 120, i32* %__len, align 4
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4
  %2 = load i8*, i8** %chunk_limit, align 8
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3
  %4 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %5 = load i32, i32* %__len, align 4
  %conv = sext i32 %5 to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %7 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %__len, align 4
  %9 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free2 = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 3
  %10 = load i8*, i8** %next_free2, align 8
  %idx.ext = sext i32 %8 to i64
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr, i8** %next_free2, align 8
  %11 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %11, %struct.obstack** %__o1, align 8
  %12 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 2
  %13 = load i8*, i8** %object_base, align 8
  store i8* %13, i8** %value, align 8
  %14 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3
  %15 = load i8*, i8** %next_free5, align 8
  %16 = load i8*, i8** %value, align 8
  %cmp6 = icmp eq i8* %15, %16
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end
  %18 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free10 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3
  %19 = load i8*, i8** %next_free10, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %19 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast11, 0
  %20 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 6
  %21 = load i32, i32* %alignment_mask, align 4
  %conv13 = sext i32 %21 to i64
  %add = add nsw i64 %sub.ptr.sub12, %conv13
  %22 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask14 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 6
  %23 = load i32, i32* %alignment_mask14, align 4
  %neg = xor i32 %23, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8, i8* null, i64 %and
  %24 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 3
  store i8* %add.ptr16, i8** %next_free17, align 8
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free18 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 3
  %26 = load i8*, i8** %next_free18, align 8
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 1
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %29 = bitcast %struct._obstack_chunk* %28 to i8*
  %sub.ptr.lhs.cast19 = ptrtoint i8* %26 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %29 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %30 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit22 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 4
  %31 = load i8*, i8** %chunk_limit22, align 8
  %32 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk23 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk23, align 8
  %34 = bitcast %struct._obstack_chunk* %33 to i8*
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %if.end.9
  %35 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit30 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4
  %36 = load i8*, i8** %chunk_limit30, align 8
  %37 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free31 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 3
  store i8* %36, i8** %next_free31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %if.end.9
  %38 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 3
  %39 = load i8*, i8** %next_free33, align 8
  %40 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base34 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 2
  store i8* %39, i8** %object_base34, align 8
  %41 = load i8*, i8** %value, align 8
  store i8* %41, i8** %tmp35
  %42 = load i8*, i8** %tmp35
  store i8* %42, i8** %tmp
  %43 = load i8*, i8** %tmp
  %44 = bitcast i8* %43 to %struct.nesting*
  store %struct.nesting* %44, %struct.nesting** %thisblock, align 8
  %45 = load i32, i32* %flags.addr, align 4
  %and38 = and i32 %45, 1
  %cmp39 = icmp ne i32 %and38, 0
  %conv40 = zext i1 %cmp39 to i32
  store i32 %conv40, i32* %exit_flag, align 4
  %46 = load i32, i32* %flags.addr, align 4
  %and42 = and i32 %46, 2
  %cmp43 = icmp eq i32 %and42, 0
  %conv44 = zext i1 %cmp43 to i32
  store i32 %conv44, i32* %block_flag, align 4
  %47 = load i32, i32* %block_flag, align 4
  %tobool = icmp ne i32 %47, 0
  br i1 %tobool, label %if.end.47, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.32
  %48 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %tobool45 = icmp ne %union.tree_node* %48, null
  br i1 %tobool45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3395, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__FUNCTION__.expand_start_bindings_and_block, i32 0, i32 0)) #6
  unreachable

if.end.47:                                        ; preds = %land.lhs.true, %if.end.32
  %49 = load i32, i32* %block_flag, align 4
  %tobool48 = icmp ne i32 %49, 0
  br i1 %tobool48, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %if.end.47
  %call = call %struct.rtx_def* @emit_note(i8* null, i32 -98)
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8
  %50 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx to %union.tree_node**
  store %union.tree_node* %50, %union.tree_node** %rttree, align 8
  br label %if.end.51

if.else:                                          ; preds = %if.end.47
  %call50 = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  store %struct.rtx_def* %call50, %struct.rtx_def** %note, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.else, %if.then.49
  %52 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %52, i32 0, i32 1
  %53 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %53, i32 0, i32 0
  %54 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %55 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %55, i32 0, i32 1
  store %struct.nesting* %54, %struct.nesting** %next, align 8
  %56 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt52 = getelementptr inbounds %struct.function, %struct.function* %56, i32 0, i32 1
  %57 = load %struct.stmt_status*, %struct.stmt_status** %stmt52, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %57, i32 0, i32 5
  %58 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  %59 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %59, i32 0, i32 0
  store %struct.nesting* %58, %struct.nesting** %all, align 8
  %60 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt53 = getelementptr inbounds %struct.function, %struct.function* %60, i32 0, i32 1
  %61 = load %struct.stmt_status*, %struct.stmt_status** %stmt53, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %61, i32 0, i32 6
  %62 = load i32, i32* %x_nesting_depth, align 4
  %inc = add nsw i32 %62, 1
  store i32 %inc, i32* %x_nesting_depth, align 4
  %63 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %63, i32 0, i32 2
  store i32 %inc, i32* %depth, align 4
  %64 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %64, i32 0, i32 4
  %block54 = bitcast %union.anon.3* %data to %struct.anon.6*
  %stack_level = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block54, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %stack_level, align 8
  %65 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data55 = getelementptr inbounds %struct.nesting, %struct.nesting* %65, i32 0, i32 4
  %block56 = bitcast %union.anon.3* %data55 to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block56, i32 0, i32 4
  store %union.tree_node* null, %union.tree_node** %cleanups, align 8
  %66 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data57 = getelementptr inbounds %struct.nesting, %struct.nesting* %66, i32 0, i32 4
  %block58 = bitcast %union.anon.3* %data57 to %struct.anon.6*
  %n_function_calls = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block58, i32 0, i32 7
  store i32 0, i32* %n_function_calls, align 4
  %67 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data59 = getelementptr inbounds %struct.nesting, %struct.nesting* %67, i32 0, i32 4
  %block60 = bitcast %union.anon.3* %data59 to %struct.anon.6*
  %exception_region = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block60, i32 0, i32 8
  store i32 0, i32* %exception_region, align 4
  %68 = load %struct.function*, %struct.function** @cfun, align 8
  %x_target_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %68, i32 0, i32 42
  %69 = load i32, i32* %x_target_temp_slot_level, align 4
  %70 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data61 = getelementptr inbounds %struct.nesting, %struct.nesting* %70, i32 0, i32 4
  %block62 = bitcast %union.anon.3* %data61 to %struct.anon.6*
  %block_target_temp_slot_level = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block62, i32 0, i32 9
  store i32 %69, i32* %block_target_temp_slot_level, align 4
  %71 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data63 = getelementptr inbounds %struct.nesting, %struct.nesting* %71, i32 0, i32 4
  %block64 = bitcast %union.anon.3* %data63 to %struct.anon.6*
  %conditional_code = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block64, i32 0, i32 10
  store i32 0, i32* %conditional_code, align 4
  %72 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %73 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data65 = getelementptr inbounds %struct.nesting, %struct.nesting* %73, i32 0, i32 4
  %block66 = bitcast %union.anon.3* %data65 to %struct.anon.6*
  %last_unconditional_cleanup = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block66, i32 0, i32 11
  store %struct.rtx_def* %72, %struct.rtx_def** %last_unconditional_cleanup, align 8
  %call67 = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  %74 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data68 = getelementptr inbounds %struct.nesting, %struct.nesting* %74, i32 0, i32 4
  %block69 = bitcast %union.anon.3* %data68 to %struct.anon.6*
  %cleanups70 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block69, i32 0, i32 4
  %75 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data71 = getelementptr inbounds %struct.nesting, %struct.nesting* %75, i32 0, i32 4
  %block72 = bitcast %union.anon.3* %data71 to %struct.anon.6*
  %cleanup_ptr = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block72, i32 0, i32 12
  store %union.tree_node** %cleanups70, %union.tree_node*** %cleanup_ptr, align 8
  %76 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt73 = getelementptr inbounds %struct.function, %struct.function* %76, i32 0, i32 1
  %77 = load %struct.stmt_status*, %struct.stmt_status** %stmt73, align 8
  %x_block_stack74 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %77, i32 0, i32 0
  %78 = load %struct.nesting*, %struct.nesting** %x_block_stack74, align 8
  %tobool75 = icmp ne %struct.nesting* %78, null
  br i1 %tobool75, label %land.lhs.true.76, label %if.else.106

land.lhs.true.76:                                 ; preds = %if.end.51
  %79 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt77 = getelementptr inbounds %struct.function, %struct.function* %79, i32 0, i32 1
  %80 = load %struct.stmt_status*, %struct.stmt_status** %stmt77, align 8
  %x_block_stack78 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %80, i32 0, i32 0
  %81 = load %struct.nesting*, %struct.nesting** %x_block_stack78, align 8
  %data79 = getelementptr inbounds %struct.nesting, %struct.nesting* %81, i32 0, i32 4
  %block80 = bitcast %union.anon.3* %data79 to %struct.anon.6*
  %cleanups81 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block80, i32 0, i32 4
  %82 = load %union.tree_node*, %union.tree_node** %cleanups81, align 8
  %cmp82 = icmp eq %union.tree_node* %82, null
  br i1 %cmp82, label %land.lhs.true.84, label %if.then.91

land.lhs.true.84:                                 ; preds = %land.lhs.true.76
  %83 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt85 = getelementptr inbounds %struct.function, %struct.function* %83, i32 0, i32 1
  %84 = load %struct.stmt_status*, %struct.stmt_status** %stmt85, align 8
  %x_block_stack86 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %84, i32 0, i32 0
  %85 = load %struct.nesting*, %struct.nesting** %x_block_stack86, align 8
  %data87 = getelementptr inbounds %struct.nesting, %struct.nesting* %85, i32 0, i32 4
  %block88 = bitcast %union.anon.3* %data87 to %struct.anon.6*
  %outer_cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block88, i32 0, i32 5
  %86 = load %union.tree_node*, %union.tree_node** %outer_cleanups, align 8
  %cmp89 = icmp eq %union.tree_node* %86, null
  br i1 %cmp89, label %if.else.106, label %if.then.91

if.then.91:                                       ; preds = %land.lhs.true.84, %land.lhs.true.76
  %87 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt92 = getelementptr inbounds %struct.function, %struct.function* %87, i32 0, i32 1
  %88 = load %struct.stmt_status*, %struct.stmt_status** %stmt92, align 8
  %x_block_stack93 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %88, i32 0, i32 0
  %89 = load %struct.nesting*, %struct.nesting** %x_block_stack93, align 8
  %data94 = getelementptr inbounds %struct.nesting, %struct.nesting* %89, i32 0, i32 4
  %block95 = bitcast %union.anon.3* %data94 to %struct.anon.6*
  %cleanups96 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block95, i32 0, i32 4
  %90 = load %union.tree_node*, %union.tree_node** %cleanups96, align 8
  %91 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt97 = getelementptr inbounds %struct.function, %struct.function* %91, i32 0, i32 1
  %92 = load %struct.stmt_status*, %struct.stmt_status** %stmt97, align 8
  %x_block_stack98 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %92, i32 0, i32 0
  %93 = load %struct.nesting*, %struct.nesting** %x_block_stack98, align 8
  %data99 = getelementptr inbounds %struct.nesting, %struct.nesting* %93, i32 0, i32 4
  %block100 = bitcast %union.anon.3* %data99 to %struct.anon.6*
  %outer_cleanups101 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block100, i32 0, i32 5
  %94 = load %union.tree_node*, %union.tree_node** %outer_cleanups101, align 8
  %call102 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %90, %union.tree_node* %94)
  %95 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data103 = getelementptr inbounds %struct.nesting, %struct.nesting* %95, i32 0, i32 4
  %block104 = bitcast %union.anon.3* %data103 to %struct.anon.6*
  %outer_cleanups105 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block104, i32 0, i32 5
  store %union.tree_node* %call102, %union.tree_node** %outer_cleanups105, align 8
  br label %if.end.110

if.else.106:                                      ; preds = %land.lhs.true.84, %if.end.51
  %96 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data107 = getelementptr inbounds %struct.nesting, %struct.nesting* %96, i32 0, i32 4
  %block108 = bitcast %union.anon.3* %data107 to %struct.anon.6*
  %outer_cleanups109 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block108, i32 0, i32 5
  store %union.tree_node* null, %union.tree_node** %outer_cleanups109, align 8
  br label %if.end.110

if.end.110:                                       ; preds = %if.else.106, %if.then.91
  %97 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data111 = getelementptr inbounds %struct.nesting, %struct.nesting* %97, i32 0, i32 4
  %block112 = bitcast %union.anon.3* %data111 to %struct.anon.6*
  %label_chain = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block112, i32 0, i32 6
  store %struct.label_chain* null, %struct.label_chain** %label_chain, align 8
  %98 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt113 = getelementptr inbounds %struct.function, %struct.function* %98, i32 0, i32 1
  %99 = load %struct.stmt_status*, %struct.stmt_status** %stmt113, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %99, i32 0, i32 1
  %100 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %101 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data114 = getelementptr inbounds %struct.nesting, %struct.nesting* %101, i32 0, i32 4
  %block115 = bitcast %union.anon.3* %data114 to %struct.anon.6*
  %innermost_stack_block = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block115, i32 0, i32 3
  store %struct.nesting* %100, %struct.nesting** %innermost_stack_block, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %103 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data116 = getelementptr inbounds %struct.nesting, %struct.nesting* %103, i32 0, i32 4
  %block117 = bitcast %union.anon.3* %data116 to %struct.anon.6*
  %first_insn = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block117, i32 0, i32 2
  store %struct.rtx_def* %102, %struct.rtx_def** %first_insn, align 8
  %104 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt118 = getelementptr inbounds %struct.function, %struct.function* %104, i32 0, i32 1
  %105 = load %struct.stmt_status*, %struct.stmt_status** %stmt118, align 8
  %x_block_start_count = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %105, i32 0, i32 7
  %106 = load i32, i32* %x_block_start_count, align 4
  %inc119 = add nsw i32 %106, 1
  store i32 %inc119, i32* %x_block_start_count, align 4
  %107 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data120 = getelementptr inbounds %struct.nesting, %struct.nesting* %107, i32 0, i32 4
  %block121 = bitcast %union.anon.3* %data120 to %struct.anon.6*
  %block_start_count = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block121, i32 0, i32 0
  store i32 %inc119, i32* %block_start_count, align 4
  %108 = load i32, i32* %exit_flag, align 4
  %tobool122 = icmp ne i32 %108, 0
  br i1 %tobool122, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.110
  %call123 = call %struct.rtx_def* @gen_label_rtx()
  br label %cond.end

cond.false:                                       ; preds = %if.end.110
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %call123, %cond.true ], [ null, %cond.false ]
  %109 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %109, i32 0, i32 3
  store %struct.rtx_def* %cond, %struct.rtx_def** %exit_label, align 8
  %110 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %111 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt124 = getelementptr inbounds %struct.function, %struct.function* %111, i32 0, i32 1
  %112 = load %struct.stmt_status*, %struct.stmt_status** %stmt124, align 8
  %x_block_stack125 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %112, i32 0, i32 0
  store %struct.nesting* %110, %struct.nesting** %x_block_stack125, align 8
  %113 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %114 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt126 = getelementptr inbounds %struct.function, %struct.function* %114, i32 0, i32 1
  %115 = load %struct.stmt_status*, %struct.stmt_status** %stmt126, align 8
  %x_nesting_stack127 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %115, i32 0, i32 5
  store %struct.nesting* %113, %struct.nesting** %x_nesting_stack127, align 8
  call void @push_temp_slots()
  ret void
}

declare void @push_temp_slots() #2

; Function Attrs: nounwind uwtable
define void @expand_start_target_temps() #0 {
entry:
  call void @push_temp_slots()
  call void @expand_start_bindings_and_block(i32 2, %union.tree_node* null)
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 40
  %1 = load i32, i32* %x_temp_slot_level, align 4
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %x_target_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 42
  store i32 %1, i32* %x_target_temp_slot_level, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_target_temps() #0 {
entry:
  call void @expand_end_bindings(%union.tree_node* null, i32 0, i32 0)
  call void @pop_temp_slots()
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_bindings(%union.tree_node* %vars, i32 %mark_ends, i32 %dont_jump_in) #0 {
entry:
  %vars.addr = alloca %union.tree_node*, align 8
  %mark_ends.addr = alloca i32, align 4
  %dont_jump_in.addr = alloca i32, align 4
  %thisblock = alloca %struct.nesting*, align 8
  %chain = alloca %struct.label_chain*, align 8
  %reachable = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %old_expr_stmts_for_value = alloca i32, align 4
  %old_last_expr_value = alloca %struct.rtx_def*, align 8
  %old_last_expr_type = alloca %union.tree_node*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.nesting*, align 8
  %this = alloca %struct.nesting*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  store %union.tree_node* %vars, %union.tree_node** %vars.addr, align 8
  store i32 %mark_ends, i32* %mark_ends.addr, align 4
  store i32 %dont_jump_in, i32* %dont_jump_in.addr, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 0
  %2 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  store %struct.nesting* %2, %struct.nesting** %thisblock, align 8
  %3 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8
  call void @warn_about_unused_variables(%union.tree_node* %3)
  %4 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %4, i32 0, i32 3
  %5 = load %struct.rtx_def*, %struct.rtx_def** %exit_label, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @do_pending_stack_adjust()
  %6 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %exit_label1 = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %exit_label1, align 8
  %call = call %struct.rtx_def* @emit_label(%struct.rtx_def* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %x_function_call_count = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 18
  %9 = load i32, i32* %x_function_call_count, align 4
  %10 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %10, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %n_function_calls = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 7
  %11 = load i32, i32* %n_function_calls, align 4
  %cmp = icmp ne i32 %9, %11
  br i1 %cmp, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %if.end
  %12 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 19
  %13 = load %union.tree_node*, %union.tree_node** %x_nonlocal_labels, align 8
  %tobool2 = icmp ne %union.tree_node* %13, null
  br i1 %tobool2, label %land.lhs.true.3, label %if.end.13

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %14 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %14, i32 0, i32 1
  %15 = load %struct.nesting*, %struct.nesting** %next, align 8
  %cmp4 = icmp eq %struct.nesting* %15, null
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.3
  %16 = load %struct.function*, %struct.function** @cfun, align 8
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 56
  %17 = bitcast i24* %has_nonlocal_label to i32*
  %bf.load = load i32, i32* %17, align 8
  %bf.lshr = lshr i32 %bf.load, 8
  %bf.clear = and i32 %bf.lshr, 1
  %tobool5 = icmp ne i32 %bf.clear, 0
  br i1 %tobool5, label %if.then.12, label %if.end.13

cond.false:                                       ; preds = %land.lhs.true.3
  %18 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data6 = getelementptr inbounds %struct.nesting, %struct.nesting* %18, i32 0, i32 4
  %block7 = bitcast %union.anon.3* %data6 to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block7, i32 0, i32 4
  %19 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  %cmp8 = icmp ne %union.tree_node* %19, null
  br i1 %cmp8, label %if.then.12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false
  %20 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data9 = getelementptr inbounds %struct.nesting, %struct.nesting* %20, i32 0, i32 4
  %block10 = bitcast %union.anon.3* %data9 to %struct.anon.6*
  %stack_level = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block10, i32 0, i32 1
  %21 = load %struct.rtx_def*, %struct.rtx_def** %stack_level, align 8
  %cmp11 = icmp ne %struct.rtx_def* %21, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %lor.lhs.false, %cond.false, %cond.true
  %22 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  call void @expand_nl_goto_receivers(%struct.nesting* %22)
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %lor.lhs.false, %cond.true, %land.lhs.true, %if.end
  %23 = load i32, i32* %dont_jump_in.addr, align 4
  %tobool14 = icmp ne i32 %23, 0
  br i1 %tobool14, label %if.then.20, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %if.end.13
  %24 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data16 = getelementptr inbounds %struct.nesting, %struct.nesting* %24, i32 0, i32 4
  %block17 = bitcast %union.anon.3* %data16 to %struct.anon.6*
  %stack_level18 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block17, i32 0, i32 1
  %25 = load %struct.rtx_def*, %struct.rtx_def** %stack_level18, align 8
  %cmp19 = icmp ne %struct.rtx_def* %25, null
  br i1 %cmp19, label %if.then.20, label %if.end.35

if.then.20:                                       ; preds = %lor.lhs.false.15, %if.end.13
  %26 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data21 = getelementptr inbounds %struct.nesting, %struct.nesting* %26, i32 0, i32 4
  %block22 = bitcast %union.anon.3* %data21 to %struct.anon.6*
  %label_chain = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block22, i32 0, i32 6
  %27 = load %struct.label_chain*, %struct.label_chain** %label_chain, align 8
  store %struct.label_chain* %27, %struct.label_chain** %chain, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.20
  %28 = load %struct.label_chain*, %struct.label_chain** %chain, align 8
  %tobool23 = icmp ne %struct.label_chain* %28, null
  br i1 %tobool23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load %struct.label_chain*, %struct.label_chain** %chain, align 8
  %label = getelementptr inbounds %struct.label_chain, %struct.label_chain* %29, i32 0, i32 1
  %30 = load %union.tree_node*, %union.tree_node** %label, align 8
  %decl = bitcast %union.tree_node* %30 to %struct.tree_decl*
  %bit_field_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %31 = bitcast i48* %bit_field_flag to i64*
  %bf.load24 = load i64, i64* %31, align 8
  %bf.clear25 = and i64 %bf.load24, -4097
  %bf.set = or i64 %bf.clear25, 4096
  store i64 %bf.set, i64* %31, align 8
  %32 = load %struct.label_chain*, %struct.label_chain** %chain, align 8
  %label26 = getelementptr inbounds %struct.label_chain, %struct.label_chain* %32, i32 0, i32 1
  %33 = load %union.tree_node*, %union.tree_node** %label26, align 8
  %common = bitcast %union.tree_node* %33 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load27 = load i32, i32* %addressable_flag, align 8
  %bf.lshr28 = lshr i32 %bf.load27, 10
  %bf.clear29 = and i32 %bf.lshr28, 1
  %tobool30 = icmp ne i32 %bf.clear29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %for.body
  %34 = load %struct.label_chain*, %struct.label_chain** %chain, align 8
  %label32 = getelementptr inbounds %struct.label_chain, %struct.label_chain* %34, i32 0, i32 1
  %35 = load %union.tree_node*, %union.tree_node** %label32, align 8
  call void (%union.tree_node*, i8*, ...) @error_with_decl(%union.tree_node* %35, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.17, i32 0, i32 0))
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.33
  %36 = load %struct.label_chain*, %struct.label_chain** %chain, align 8
  %next34 = getelementptr inbounds %struct.label_chain, %struct.label_chain* %36, i32 0, i32 0
  %37 = load %struct.label_chain*, %struct.label_chain** %next34, align 8
  store %struct.label_chain* %37, %struct.label_chain** %chain, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.35

if.end.35:                                        ; preds = %for.end, %lor.lhs.false.15
  %38 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data36 = getelementptr inbounds %struct.nesting, %struct.nesting* %38, i32 0, i32 4
  %block37 = bitcast %union.anon.3* %data36 to %struct.anon.6*
  %stack_level38 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block37, i32 0, i32 1
  %39 = load %struct.rtx_def*, %struct.rtx_def** %stack_level38, align 8
  %cmp39 = icmp ne %struct.rtx_def* %39, null
  br i1 %cmp39, label %if.then.45, label %lor.lhs.false.40

lor.lhs.false.40:                                 ; preds = %if.end.35
  %40 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data41 = getelementptr inbounds %struct.nesting, %struct.nesting* %40, i32 0, i32 4
  %block42 = bitcast %union.anon.3* %data41 to %struct.anon.6*
  %cleanups43 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block42, i32 0, i32 4
  %41 = load %union.tree_node*, %union.tree_node** %cleanups43, align 8
  %cmp44 = icmp ne %union.tree_node* %41, null
  br i1 %cmp44, label %if.then.45, label %if.end.98

if.then.45:                                       ; preds = %lor.lhs.false.40, %if.end.35
  %42 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt46 = getelementptr inbounds %struct.function, %struct.function* %42, i32 0, i32 1
  %43 = load %struct.stmt_status*, %struct.stmt_status** %stmt46, align 8
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %43, i32 0, i32 10
  %44 = load i32, i32* %x_expr_stmts_for_value, align 4
  store i32 %44, i32* %old_expr_stmts_for_value, align 4
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt47 = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 1
  %46 = load %struct.stmt_status*, %struct.stmt_status** %stmt47, align 8
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %46, i32 0, i32 9
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x_last_expr_value, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %old_last_expr_value, align 8
  %48 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt48 = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 1
  %49 = load %struct.stmt_status*, %struct.stmt_status** %stmt48, align 8
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %49, i32 0, i32 8
  %50 = load %union.tree_node*, %union.tree_node** %x_last_expr_type, align 8
  store %union.tree_node* %50, %union.tree_node** %old_last_expr_type, align 8
  %51 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt49 = getelementptr inbounds %struct.function, %struct.function* %51, i32 0, i32 1
  %52 = load %struct.stmt_status*, %struct.stmt_status** %stmt49, align 8
  %x_expr_stmts_for_value50 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %52, i32 0, i32 10
  store i32 0, i32* %x_expr_stmts_for_value50, align 4
  %call51 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call51, %struct.rtx_def** %insn, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load52 = load i32, i32* %54, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 37
  br i1 %cmp54, label %if.then.55, label %if.end.57

if.then.55:                                       ; preds = %if.then.45
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call56 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %55)
  store %struct.rtx_def* %call56, %struct.rtx_def** %insn, align 8
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.55, %if.then.45
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool58 = icmp ne %struct.rtx_def* %56, null
  br i1 %tobool58, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end.57
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load59 = load i32, i32* %58, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %cmp61 = icmp ne i32 %bf.clear60, 35
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.57
  %59 = phi i1 [ true, %if.end.57 ], [ %cmp61, %lor.rhs ]
  %lor.ext = zext i1 %59 to i32
  store i32 %lor.ext, i32* %reachable, align 4
  %60 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data62 = getelementptr inbounds %struct.nesting, %struct.nesting* %60, i32 0, i32 4
  %block63 = bitcast %union.anon.3* %data62 to %struct.anon.6*
  %cleanups64 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block63, i32 0, i32 4
  %61 = load %union.tree_node*, %union.tree_node** %cleanups64, align 8
  %62 = load i32, i32* %reachable, align 4
  call void @expand_cleanups(%union.tree_node* %61, %union.tree_node* null, i32 0, i32 %62)
  %63 = load i32, i32* %reachable, align 4
  %tobool65 = icmp ne i32 %63, 0
  br i1 %tobool65, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %lor.end
  call void @do_pending_stack_adjust()
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.66, %lor.end
  %64 = load i32, i32* %old_expr_stmts_for_value, align 4
  %65 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt68 = getelementptr inbounds %struct.function, %struct.function* %65, i32 0, i32 1
  %66 = load %struct.stmt_status*, %struct.stmt_status** %stmt68, align 8
  %x_expr_stmts_for_value69 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %66, i32 0, i32 10
  store i32 %64, i32* %x_expr_stmts_for_value69, align 4
  %67 = load %struct.rtx_def*, %struct.rtx_def** %old_last_expr_value, align 8
  %68 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt70 = getelementptr inbounds %struct.function, %struct.function* %68, i32 0, i32 1
  %69 = load %struct.stmt_status*, %struct.stmt_status** %stmt70, align 8
  %x_last_expr_value71 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %69, i32 0, i32 9
  store %struct.rtx_def* %67, %struct.rtx_def** %x_last_expr_value71, align 8
  %70 = load %union.tree_node*, %union.tree_node** %old_last_expr_type, align 8
  %71 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt72 = getelementptr inbounds %struct.function, %struct.function* %71, i32 0, i32 1
  %72 = load %struct.stmt_status*, %struct.stmt_status** %stmt72, align 8
  %x_last_expr_type73 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %72, i32 0, i32 8
  store %union.tree_node* %70, %union.tree_node** %x_last_expr_type73, align 8
  %73 = load i32, i32* %reachable, align 4
  %tobool74 = icmp ne i32 %73, 0
  br i1 %tobool74, label %land.lhs.true.75, label %if.end.89

land.lhs.true.75:                                 ; preds = %if.end.67
  %74 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data76 = getelementptr inbounds %struct.nesting, %struct.nesting* %74, i32 0, i32 4
  %block77 = bitcast %union.anon.3* %data76 to %struct.anon.6*
  %stack_level78 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block77, i32 0, i32 1
  %75 = load %struct.rtx_def*, %struct.rtx_def** %stack_level78, align 8
  %cmp79 = icmp ne %struct.rtx_def* %75, null
  br i1 %cmp79, label %if.then.80, label %if.end.89

if.then.80:                                       ; preds = %land.lhs.true.75
  %76 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %next81 = getelementptr inbounds %struct.nesting, %struct.nesting* %76, i32 0, i32 1
  %77 = load %struct.nesting*, %struct.nesting** %next81, align 8
  %tobool82 = icmp ne %struct.nesting* %77, null
  %cond = select i1 %tobool82, i32 0, i32 1
  %78 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data83 = getelementptr inbounds %struct.nesting, %struct.nesting* %78, i32 0, i32 4
  %block84 = bitcast %union.anon.3* %data83 to %struct.anon.6*
  %stack_level85 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block84, i32 0, i32 1
  %79 = load %struct.rtx_def*, %struct.rtx_def** %stack_level85, align 8
  call void @emit_stack_restore(i32 %cond, %struct.rtx_def* %79, %struct.rtx_def* null)
  %80 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %80, i32 0, i32 20
  %81 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  %cmp86 = icmp ne %struct.rtx_def* %81, null
  br i1 %cmp86, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.then.80
  %82 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function, %struct.function* %82, i32 0, i32 22
  call void @emit_stack_save(i32 2, %struct.rtx_def** %x_nonlocal_goto_stack_level, %struct.rtx_def* null)
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %if.then.80
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %land.lhs.true.75, %if.end.67
  %83 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %84 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data90 = getelementptr inbounds %struct.nesting, %struct.nesting* %84, i32 0, i32 4
  %block91 = bitcast %union.anon.3* %data90 to %struct.anon.6*
  %stack_level92 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block91, i32 0, i32 1
  %85 = load %struct.rtx_def*, %struct.rtx_def** %stack_level92, align 8
  %86 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data93 = getelementptr inbounds %struct.nesting, %struct.nesting* %86, i32 0, i32 4
  %block94 = bitcast %union.anon.3* %data93 to %struct.anon.6*
  %cleanups95 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block94, i32 0, i32 4
  %87 = load %union.tree_node*, %union.tree_node** %cleanups95, align 8
  %88 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data96 = getelementptr inbounds %struct.nesting, %struct.nesting* %88, i32 0, i32 4
  %block97 = bitcast %union.anon.3* %data96 to %struct.anon.6*
  %first_insn = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block97, i32 0, i32 2
  %89 = load %struct.rtx_def*, %struct.rtx_def** %first_insn, align 8
  %90 = load i32, i32* %dont_jump_in.addr, align 4
  call void @fixup_gotos(%struct.nesting* %83, %struct.rtx_def* %85, %union.tree_node* %87, %struct.rtx_def* %89, i32 %90)
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.89, %lor.lhs.false.40
  %91 = load i32, i32* %mark_ends.addr, align 4
  %tobool99 = icmp ne i32 %91, 0
  br i1 %tobool99, label %if.then.100, label %if.else

if.then.100:                                      ; preds = %if.end.98
  %call101 = call %struct.rtx_def* @emit_note(i8* null, i32 -97)
  store %struct.rtx_def* %call101, %struct.rtx_def** %note, align 8
  %92 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data102 = getelementptr inbounds %struct.nesting, %struct.nesting* %92, i32 0, i32 4
  %block103 = bitcast %union.anon.3* %data102 to %struct.anon.6*
  %first_insn104 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block103, i32 0, i32 2
  %93 = load %struct.rtx_def*, %struct.rtx_def** %first_insn104, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx to %union.tree_node**
  %94 = load %union.tree_node*, %union.tree_node** %rttree, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 3
  %rttree107 = bitcast %union.rtunion_def* %arrayidx106 to %union.tree_node**
  store %union.tree_node* %94, %union.tree_node** %rttree107, align 8
  br label %if.end.113

if.else:                                          ; preds = %if.end.98
  %96 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data108 = getelementptr inbounds %struct.nesting, %struct.nesting* %96, i32 0, i32 4
  %block109 = bitcast %union.anon.3* %data108 to %struct.anon.6*
  %first_insn110 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block109, i32 0, i32 2
  %97 = load %struct.rtx_def*, %struct.rtx_def** %first_insn110, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx112 to i32*
  store i32 -99, i32* %rtint, align 4
  br label %if.end.113

if.end.113:                                       ; preds = %if.else, %if.then.100
  %98 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data114 = getelementptr inbounds %struct.nesting, %struct.nesting* %98, i32 0, i32 4
  %block115 = bitcast %union.anon.3* %data114 to %struct.anon.6*
  %block_target_temp_slot_level = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block115, i32 0, i32 9
  %99 = load i32, i32* %block_target_temp_slot_level, align 4
  %100 = load %struct.function*, %struct.function** @cfun, align 8
  %x_target_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %100, i32 0, i32 42
  store i32 %99, i32* %x_target_temp_slot_level, align 4
  %101 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data116 = getelementptr inbounds %struct.nesting, %struct.nesting* %101, i32 0, i32 4
  %block117 = bitcast %union.anon.3* %data116 to %struct.anon.6*
  %innermost_stack_block = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block117, i32 0, i32 3
  %102 = load %struct.nesting*, %struct.nesting** %innermost_stack_block, align 8
  %103 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt118 = getelementptr inbounds %struct.function, %struct.function* %103, i32 0, i32 1
  %104 = load %struct.stmt_status*, %struct.stmt_status** %stmt118, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %104, i32 0, i32 1
  store %struct.nesting* %102, %struct.nesting** %x_stack_block_stack, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.113
  %105 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt119 = getelementptr inbounds %struct.function, %struct.function* %105, i32 0, i32 1
  %106 = load %struct.stmt_status*, %struct.stmt_status** %stmt119, align 8
  %x_block_stack120 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %106, i32 0, i32 0
  %107 = load %struct.nesting*, %struct.nesting** %x_block_stack120, align 8
  store %struct.nesting* %107, %struct.nesting** %target, align 8
  br label %do.body.121

do.body.121:                                      ; preds = %do.cond, %do.body
  %108 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt122 = getelementptr inbounds %struct.function, %struct.function* %108, i32 0, i32 1
  %109 = load %struct.stmt_status*, %struct.stmt_status** %stmt122, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %109, i32 0, i32 5
  %110 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  store %struct.nesting* %110, %struct.nesting** %this, align 8
  %111 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt123 = getelementptr inbounds %struct.function, %struct.function* %111, i32 0, i32 1
  %112 = load %struct.stmt_status*, %struct.stmt_status** %stmt123, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %112, i32 0, i32 3
  %113 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %114 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp124 = icmp eq %struct.nesting* %113, %114
  br i1 %cmp124, label %if.then.125, label %if.end.131

if.then.125:                                      ; preds = %do.body.121
  %115 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt126 = getelementptr inbounds %struct.function, %struct.function* %115, i32 0, i32 1
  %116 = load %struct.stmt_status*, %struct.stmt_status** %stmt126, align 8
  %x_loop_stack127 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %116, i32 0, i32 3
  %117 = load %struct.nesting*, %struct.nesting** %x_loop_stack127, align 8
  %next128 = getelementptr inbounds %struct.nesting, %struct.nesting* %117, i32 0, i32 1
  %118 = load %struct.nesting*, %struct.nesting** %next128, align 8
  %119 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt129 = getelementptr inbounds %struct.function, %struct.function* %119, i32 0, i32 1
  %120 = load %struct.stmt_status*, %struct.stmt_status** %stmt129, align 8
  %x_loop_stack130 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %120, i32 0, i32 3
  store %struct.nesting* %118, %struct.nesting** %x_loop_stack130, align 8
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.125, %do.body.121
  %121 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt132 = getelementptr inbounds %struct.function, %struct.function* %121, i32 0, i32 1
  %122 = load %struct.stmt_status*, %struct.stmt_status** %stmt132, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %122, i32 0, i32 2
  %123 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %124 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp133 = icmp eq %struct.nesting* %123, %124
  br i1 %cmp133, label %if.then.134, label %if.end.140

if.then.134:                                      ; preds = %if.end.131
  %125 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt135 = getelementptr inbounds %struct.function, %struct.function* %125, i32 0, i32 1
  %126 = load %struct.stmt_status*, %struct.stmt_status** %stmt135, align 8
  %x_cond_stack136 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %126, i32 0, i32 2
  %127 = load %struct.nesting*, %struct.nesting** %x_cond_stack136, align 8
  %next137 = getelementptr inbounds %struct.nesting, %struct.nesting* %127, i32 0, i32 1
  %128 = load %struct.nesting*, %struct.nesting** %next137, align 8
  %129 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt138 = getelementptr inbounds %struct.function, %struct.function* %129, i32 0, i32 1
  %130 = load %struct.stmt_status*, %struct.stmt_status** %stmt138, align 8
  %x_cond_stack139 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %130, i32 0, i32 2
  store %struct.nesting* %128, %struct.nesting** %x_cond_stack139, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %if.then.134, %if.end.131
  %131 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt141 = getelementptr inbounds %struct.function, %struct.function* %131, i32 0, i32 1
  %132 = load %struct.stmt_status*, %struct.stmt_status** %stmt141, align 8
  %x_block_stack142 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %132, i32 0, i32 0
  %133 = load %struct.nesting*, %struct.nesting** %x_block_stack142, align 8
  %134 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp143 = icmp eq %struct.nesting* %133, %134
  br i1 %cmp143, label %if.then.144, label %if.end.150

if.then.144:                                      ; preds = %if.end.140
  %135 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt145 = getelementptr inbounds %struct.function, %struct.function* %135, i32 0, i32 1
  %136 = load %struct.stmt_status*, %struct.stmt_status** %stmt145, align 8
  %x_block_stack146 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %136, i32 0, i32 0
  %137 = load %struct.nesting*, %struct.nesting** %x_block_stack146, align 8
  %next147 = getelementptr inbounds %struct.nesting, %struct.nesting* %137, i32 0, i32 1
  %138 = load %struct.nesting*, %struct.nesting** %next147, align 8
  %139 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt148 = getelementptr inbounds %struct.function, %struct.function* %139, i32 0, i32 1
  %140 = load %struct.stmt_status*, %struct.stmt_status** %stmt148, align 8
  %x_block_stack149 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %140, i32 0, i32 0
  store %struct.nesting* %138, %struct.nesting** %x_block_stack149, align 8
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.144, %if.end.140
  %141 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt151 = getelementptr inbounds %struct.function, %struct.function* %141, i32 0, i32 1
  %142 = load %struct.stmt_status*, %struct.stmt_status** %stmt151, align 8
  %x_stack_block_stack152 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %142, i32 0, i32 1
  %143 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack152, align 8
  %144 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp153 = icmp eq %struct.nesting* %143, %144
  br i1 %cmp153, label %if.then.154, label %if.end.160

if.then.154:                                      ; preds = %if.end.150
  %145 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt155 = getelementptr inbounds %struct.function, %struct.function* %145, i32 0, i32 1
  %146 = load %struct.stmt_status*, %struct.stmt_status** %stmt155, align 8
  %x_stack_block_stack156 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %146, i32 0, i32 1
  %147 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack156, align 8
  %next157 = getelementptr inbounds %struct.nesting, %struct.nesting* %147, i32 0, i32 1
  %148 = load %struct.nesting*, %struct.nesting** %next157, align 8
  %149 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt158 = getelementptr inbounds %struct.function, %struct.function* %149, i32 0, i32 1
  %150 = load %struct.stmt_status*, %struct.stmt_status** %stmt158, align 8
  %x_stack_block_stack159 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %150, i32 0, i32 1
  store %struct.nesting* %148, %struct.nesting** %x_stack_block_stack159, align 8
  br label %if.end.160

if.end.160:                                       ; preds = %if.then.154, %if.end.150
  %151 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt161 = getelementptr inbounds %struct.function, %struct.function* %151, i32 0, i32 1
  %152 = load %struct.stmt_status*, %struct.stmt_status** %stmt161, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %152, i32 0, i32 4
  %153 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %154 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp162 = icmp eq %struct.nesting* %153, %154
  br i1 %cmp162, label %if.then.163, label %if.end.169

if.then.163:                                      ; preds = %if.end.160
  %155 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt164 = getelementptr inbounds %struct.function, %struct.function* %155, i32 0, i32 1
  %156 = load %struct.stmt_status*, %struct.stmt_status** %stmt164, align 8
  %x_case_stack165 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %156, i32 0, i32 4
  %157 = load %struct.nesting*, %struct.nesting** %x_case_stack165, align 8
  %next166 = getelementptr inbounds %struct.nesting, %struct.nesting* %157, i32 0, i32 1
  %158 = load %struct.nesting*, %struct.nesting** %next166, align 8
  %159 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt167 = getelementptr inbounds %struct.function, %struct.function* %159, i32 0, i32 1
  %160 = load %struct.stmt_status*, %struct.stmt_status** %stmt167, align 8
  %x_case_stack168 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %160, i32 0, i32 4
  store %struct.nesting* %158, %struct.nesting** %x_case_stack168, align 8
  br label %if.end.169

if.end.169:                                       ; preds = %if.then.163, %if.end.160
  %161 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt170 = getelementptr inbounds %struct.function, %struct.function* %161, i32 0, i32 1
  %162 = load %struct.stmt_status*, %struct.stmt_status** %stmt170, align 8
  %x_nesting_stack171 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %162, i32 0, i32 5
  %163 = load %struct.nesting*, %struct.nesting** %x_nesting_stack171, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %163, i32 0, i32 2
  %164 = load i32, i32* %depth, align 4
  %sub = sub nsw i32 %164, 1
  %165 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt172 = getelementptr inbounds %struct.function, %struct.function* %165, i32 0, i32 1
  %166 = load %struct.stmt_status*, %struct.stmt_status** %stmt172, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %166, i32 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4
  %167 = load %struct.nesting*, %struct.nesting** %this, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %167, i32 0, i32 0
  %168 = load %struct.nesting*, %struct.nesting** %all, align 8
  %169 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt173 = getelementptr inbounds %struct.function, %struct.function* %169, i32 0, i32 1
  %170 = load %struct.stmt_status*, %struct.stmt_status** %stmt173, align 8
  %x_nesting_stack174 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %170, i32 0, i32 5
  store %struct.nesting* %168, %struct.nesting** %x_nesting_stack174, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__o, align 8
  %171 = load %struct.nesting*, %struct.nesting** %this, align 8
  %172 = bitcast %struct.nesting* %171 to i8*
  store i8* %172, i8** %__obj, align 8
  %173 = load i8*, i8** %__obj, align 8
  %174 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %174, i32 0, i32 1
  %175 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %176 = bitcast %struct._obstack_chunk* %175 to i8*
  %cmp175 = icmp ugt i8* %173, %176
  br i1 %cmp175, label %land.lhs.true.176, label %if.else.179

land.lhs.true.176:                                ; preds = %if.end.169
  %177 = load i8*, i8** %__obj, align 8
  %178 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %178, i32 0, i32 4
  %179 = load i8*, i8** %chunk_limit, align 8
  %cmp177 = icmp ult i8* %177, %179
  br i1 %cmp177, label %if.then.178, label %if.else.179

if.then.178:                                      ; preds = %land.lhs.true.176
  %180 = load i8*, i8** %__obj, align 8
  %181 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %181, i32 0, i32 2
  store i8* %180, i8** %object_base, align 8
  %182 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %182, i32 0, i32 3
  store i8* %180, i8** %next_free, align 8
  br label %if.end.180

if.else.179:                                      ; preds = %land.lhs.true.176, %if.end.169
  %183 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %184 = load i8*, i8** %__obj, align 8
  call void @obstack_free(%struct.obstack* %183, i8* %184)
  br label %if.end.180

if.end.180:                                       ; preds = %if.else.179, %if.then.178
  br label %do.cond

do.cond:                                          ; preds = %if.end.180
  %185 = load %struct.nesting*, %struct.nesting** %this, align 8
  %186 = load %struct.nesting*, %struct.nesting** %target, align 8
  %cmp181 = icmp ne %struct.nesting* %185, %186
  br i1 %cmp181, label %do.body.121, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end.183

do.end.183:                                       ; preds = %do.end
  call void @pop_temp_slots()
  ret void
}

declare void @pop_temp_slots() #2

; Function Attrs: nounwind uwtable
define i32 @is_body_block(%union.tree_node* %stmt) #0 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.tree_node*, align 8
  %parent = alloca %union.tree_node*, align 8
  %grandparent = alloca %union.tree_node*, align 8
  store %union.tree_node* %stmt, %union.tree_node** %stmt.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 4
  br i1 %cmp, label %if.then, label %if.end.18

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %stmt.addr, align 8
  %block = bitcast %union.tree_node* %1 to %struct.tree_block*
  %supercontext = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 4
  %2 = load %union.tree_node*, %union.tree_node** %supercontext, align 8
  store %union.tree_node* %2, %union.tree_node** %parent, align 8
  %3 = load %union.tree_node*, %union.tree_node** %parent, align 8
  %tobool = icmp ne %union.tree_node* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end.17

land.lhs.true:                                    ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %parent, align 8
  %common1 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 4
  br i1 %cmp5, label %if.then.6, label %if.end.17

if.then.6:                                        ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %parent, align 8
  %block7 = bitcast %union.tree_node* %5 to %struct.tree_block*
  %supercontext8 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block7, i32 0, i32 4
  %6 = load %union.tree_node*, %union.tree_node** %supercontext8, align 8
  store %union.tree_node* %6, %union.tree_node** %grandparent, align 8
  %7 = load %union.tree_node*, %union.tree_node** %grandparent, align 8
  %tobool9 = icmp ne %union.tree_node* %7, null
  br i1 %tobool9, label %land.lhs.true.10, label %if.end

land.lhs.true.10:                                 ; preds = %if.then.6
  %8 = load %union.tree_node*, %union.tree_node** %grandparent, align 8
  %common11 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2
  %bf.load13 = load i32, i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 30
  br i1 %cmp15, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %land.lhs.true.10
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.10, %if.then.6
  br label %if.end.17

if.end.17:                                        ; preds = %if.end, %land.lhs.true, %if.then
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.18, %if.then.16
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define i32 @conditional_context() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 0
  %2 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %tobool = icmp ne %struct.nesting* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_block_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 0
  %5 = load %struct.nesting*, %struct.nesting** %x_block_stack2, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %conditional_code = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 10
  %6 = load i32, i32* %conditional_code, align 4
  %tobool3 = icmp ne i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %7 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %7 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define %struct.nesting* @current_nesting_level() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %tobool = icmp ne %struct.function* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1
  %2 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %2, i32 0, i32 0
  %3 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.nesting* [ %3, %cond.true ], [ null, %cond.false ]
  ret %struct.nesting* %cond
}

; Function Attrs: nounwind uwtable
define void @warn_about_unused_variables(%union.tree_node* %vars) #0 {
entry:
  %vars.addr = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %vars, %union.tree_node** %vars.addr, align 8
  %0 = load i32, i32* @warn_unused_variable, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end.24

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8
  store %union.tree_node* %1, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool1 = icmp ne %union.tree_node* %2, null
  br i1 %tobool1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load3 = load i32, i32* %used_flag, align 8
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear4 = and i32 %bf.lshr, 1
  %tobool5 = icmp ne i32 %bf.clear4, 0
  br i1 %tobool5, label %if.end, label %land.lhs.true.6

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl7 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %in_system_header_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 5
  %6 = bitcast i48* %in_system_header_flag to i64*
  %bf.load8 = load i64, i64* %6, align 8
  %bf.lshr9 = lshr i64 %bf.load8, 16
  %bf.clear10 = and i64 %bf.lshr9, 1
  %bf.cast = trunc i64 %bf.clear10 to i32
  %tobool11 = icmp ne i32 %bf.cast, 0
  br i1 %tobool11, label %if.end, label %land.lhs.true.12

land.lhs.true.12:                                 ; preds = %land.lhs.true.6
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl13 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl13, i32 0, i32 8
  %8 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool14 = icmp ne %union.tree_node* %8, null
  br i1 %tobool14, label %land.lhs.true.15, label %if.end

land.lhs.true.15:                                 ; preds = %land.lhs.true.12
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl16 = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl16, i32 0, i32 5
  %10 = bitcast i48* %artificial_flag to i64*
  %bf.load17 = load i64, i64* %10, align 8
  %bf.lshr18 = lshr i64 %bf.load17, 22
  %bf.clear19 = and i64 %bf.lshr18, 1
  %bf.cast20 = trunc i64 %bf.clear19 to i32
  %tobool21 = icmp ne i32 %bf.cast20, 0
  br i1 %tobool21, label %if.end, label %if.then.22

if.then.22:                                       ; preds = %land.lhs.true.15
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void (%union.tree_node*, i8*, ...) @warning_with_decl(%union.tree_node* %11, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then.22, %land.lhs.true.15, %land.lhs.true.12, %land.lhs.true.6, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common23 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 0
  %13 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %13, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.24

if.end.24:                                        ; preds = %for.end, %entry
  ret void
}

declare void @warning_with_decl(%union.tree_node*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define internal void @expand_nl_goto_receivers(%struct.nesting* %thisblock) #0 {
entry:
  %thisblock.addr = alloca %struct.nesting*, align 8
  %link = alloca %union.tree_node*, align 8
  %afterward = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %slot = alloca %struct.rtx_def*, align 8
  %label_list = alloca %struct.rtx_def*, align 8
  %any_invalid = alloca i32, align 4
  %save_receiver = alloca %struct.rtx_def*, align 8
  %lab = alloca %struct.rtx_def*, align 8
  %lab50 = alloca %struct.rtx_def*, align 8
  store %struct.nesting* %thisblock, %struct.nesting** %thisblock.addr, align 8
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %afterward, align 8
  %0 = load %struct.nesting*, %struct.nesting** %thisblock.addr, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %0, i32 0, i32 1
  %1 = load %struct.nesting*, %struct.nesting** %next, align 8
  %cmp = icmp ne %struct.nesting* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 20
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %slot, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %tobool = icmp ne %struct.rtx_def* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* @target_flags, align 4
  %and = and i32 %5, 33554432
  %tobool1 = icmp ne i32 %and, 0
  %cond = select i1 %tobool1, i32 5, i32 4
  %call2 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond)
  store %struct.rtx_def* %call2, %struct.rtx_def** %save_receiver, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %save_receiver, align 8
  %call3 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %7, %struct.rtx_def* %8)
  call void @start_sequence()
  %9 = load %struct.rtx_def*, %struct.rtx_def** %save_receiver, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %call7 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %9, %struct.rtx_def* %11)
  %call8 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call8, %struct.rtx_def** %insns, align 8
  call void @end_sequence()
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %13 = load %struct.nesting*, %struct.nesting** %thisblock.addr, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %first_insn = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %first_insn, align 8
  %call9 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %12, %struct.rtx_def* %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 1
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx12, align 8
  store %struct.rtx_def* %16, %struct.rtx_def** %slot, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %17 = load %struct.rtx_def*, %struct.rtx_def** %afterward, align 8
  call void @emit_jump(%struct.rtx_def* %17)
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 19
  %19 = load %union.tree_node*, %union.tree_node** %x_nonlocal_labels, align 8
  store %union.tree_node* %19, %union.tree_node** %link, align 8
  %20 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots13 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 20
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots13, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %slot, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %label_list, align 8
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.30, %if.end
  %22 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool15 = icmp ne %union.tree_node* %22, null
  br i1 %tobool15, label %for.body.16, label %for.end.34

for.body.16:                                      ; preds = %for.cond.14
  %23 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list = bitcast %union.tree_node* %23 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %24 = load %union.tree_node*, %union.tree_node** %value, align 8
  %decl = bitcast %union.tree_node* %24 to %struct.tree_decl*
  %bit_field_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %25 = bitcast i48* %bit_field_flag to i64*
  %bf.load = load i64, i64* %25, align 8
  %bf.lshr = lshr i64 %bf.load, 12
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool17 = icmp ne i32 %bf.cast, 0
  br i1 %tobool17, label %if.end.29, label %if.then.18

if.then.18:                                       ; preds = %for.body.16
  %26 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %28 = load %struct.nesting*, %struct.nesting** %thisblock.addr, align 8
  %data22 = getelementptr inbounds %struct.nesting, %struct.nesting* %28, i32 0, i32 4
  %block23 = bitcast %union.anon.3* %data22 to %struct.anon.6*
  %first_insn24 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block23, i32 0, i32 2
  %29 = load %struct.rtx_def*, %struct.rtx_def** %first_insn24, align 8
  %call25 = call %struct.rtx_def* @expand_nl_handler_label(%struct.rtx_def* %27, %struct.rtx_def* %29)
  store %struct.rtx_def* %call25, %struct.rtx_def** %lab, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %label_list, align 8
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %30, %struct.rtx_def* %31)
  store %struct.rtx_def* %call26, %struct.rtx_def** %label_list, align 8
  call void @expand_nl_goto_receiver()
  %32 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list27 = bitcast %union.tree_node* %32 to %struct.tree_list*
  %value28 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list27, i32 0, i32 2
  %33 = load %union.tree_node*, %union.tree_node** %value28, align 8
  call void @expand_goto(%union.tree_node* %33)
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.18, %for.body.16
  br label %for.inc.30

for.inc.30:                                       ; preds = %if.end.29
  %34 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %35 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %35, %union.tree_node** %link, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 1
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  store %struct.rtx_def* %37, %struct.rtx_def** %slot, align 8
  br label %for.cond.14

for.end.34:                                       ; preds = %for.cond.14
  %38 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels35 = getelementptr inbounds %struct.function, %struct.function* %38, i32 0, i32 19
  %39 = load %union.tree_node*, %union.tree_node** %x_nonlocal_labels35, align 8
  store %union.tree_node* %39, %union.tree_node** %link, align 8
  %40 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots36 = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 20
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots36, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %slot, align 8
  store i32 0, i32* %any_invalid, align 4
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.60, %for.end.34
  %42 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool38 = icmp ne %union.tree_node* %42, null
  br i1 %tobool38, label %for.body.39, label %for.end.66

for.body.39:                                      ; preds = %for.cond.37
  %43 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list40 = bitcast %union.tree_node* %43 to %struct.tree_list*
  %value41 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list40, i32 0, i32 2
  %44 = load %union.tree_node*, %union.tree_node** %value41, align 8
  %decl42 = bitcast %union.tree_node* %44 to %struct.tree_decl*
  %bit_field_flag43 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl42, i32 0, i32 5
  %45 = bitcast i48* %bit_field_flag43 to i64*
  %bf.load44 = load i64, i64* %45, align 8
  %bf.lshr45 = lshr i64 %bf.load44, 12
  %bf.clear46 = and i64 %bf.lshr45, 1
  %bf.cast47 = trunc i64 %bf.clear46 to i32
  %tobool48 = icmp ne i32 %bf.cast47, 0
  br i1 %tobool48, label %if.then.49, label %if.end.59

if.then.49:                                       ; preds = %for.body.39
  %46 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 0
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx53, align 8
  %48 = load %struct.nesting*, %struct.nesting** %thisblock.addr, align 8
  %data54 = getelementptr inbounds %struct.nesting, %struct.nesting* %48, i32 0, i32 4
  %block55 = bitcast %union.anon.3* %data54 to %struct.anon.6*
  %first_insn56 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block55, i32 0, i32 2
  %49 = load %struct.rtx_def*, %struct.rtx_def** %first_insn56, align 8
  %call57 = call %struct.rtx_def* @expand_nl_handler_label(%struct.rtx_def* %47, %struct.rtx_def* %49)
  store %struct.rtx_def* %call57, %struct.rtx_def** %lab50, align 8
  %50 = load %struct.rtx_def*, %struct.rtx_def** %lab50, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %label_list, align 8
  %call58 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %50, %struct.rtx_def* %51)
  store %struct.rtx_def* %call58, %struct.rtx_def** %label_list, align 8
  store i32 1, i32* %any_invalid, align 4
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.49, %for.body.39
  br label %for.inc.60

for.inc.60:                                       ; preds = %if.end.59
  %52 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common61 = bitcast %union.tree_node* %52 to %struct.tree_common*
  %chain62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 0
  %53 = load %union.tree_node*, %union.tree_node** %chain62, align 8
  store %union.tree_node* %53, %union.tree_node** %link, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 1
  %rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx65, align 8
  store %struct.rtx_def* %55, %struct.rtx_def** %slot, align 8
  br label %for.cond.37

for.end.66:                                       ; preds = %for.cond.37
  %56 = load i32, i32* %any_invalid, align 4
  %tobool67 = icmp ne i32 %56, 0
  br i1 %tobool67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %for.end.66
  call void @expand_nl_goto_receiver()
  call void @expand_builtin_trap()
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.68, %for.end.66
  %57 = load %struct.rtx_def*, %struct.rtx_def** %label_list, align 8
  %58 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_labels = getelementptr inbounds %struct.function, %struct.function* %58, i32 0, i32 21
  store %struct.rtx_def* %57, %struct.rtx_def** %x_nonlocal_goto_handler_labels, align 8
  %59 = load %struct.rtx_def*, %struct.rtx_def** %afterward, align 8
  %call70 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %59)
  ret void
}

declare void @error_with_decl(%union.tree_node*, i8*, ...) #2

declare %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @expand_cleanups(%union.tree_node* %list, %union.tree_node* %dont_do, i32 %in_fixup, i32 %reachable) #0 {
entry:
  %list.addr = alloca %union.tree_node*, align 8
  %dont_do.addr = alloca %union.tree_node*, align 8
  %in_fixup.addr = alloca i32, align 4
  %reachable.addr = alloca i32, align 4
  %tail = alloca %union.tree_node*, align 8
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  store %union.tree_node* %dont_do, %union.tree_node** %dont_do.addr, align 8
  store i32 %in_fixup, i32* %in_fixup.addr, align 4
  store i32 %reachable, i32* %reachable.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %list.addr, align 8
  store %union.tree_node* %0, %union.tree_node** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %tobool = icmp ne %union.tree_node* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %dont_do.addr, align 8
  %cmp = icmp eq %union.tree_node* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %3 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list1 = bitcast %union.tree_node* %3 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %5 = load %union.tree_node*, %union.tree_node** %dont_do.addr, align 8
  %cmp2 = icmp ne %union.tree_node* %4, %5
  br i1 %cmp2, label %if.then, label %if.end.35

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %6 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list3 = bitcast %union.tree_node* %6 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list3, i32 0, i32 2
  %7 = load %union.tree_node*, %union.tree_node** %value, align 8
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp4 = icmp eq i32 %bf.clear, 2
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list6 = bitcast %union.tree_node* %8 to %struct.tree_list*
  %value7 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list6, i32 0, i32 2
  %9 = load %union.tree_node*, %union.tree_node** %value7, align 8
  %10 = load %union.tree_node*, %union.tree_node** %dont_do.addr, align 8
  %11 = load i32, i32* %in_fixup.addr, align 4
  %12 = load i32, i32* %reachable.addr, align 4
  call void @expand_cleanups(%union.tree_node* %9, %union.tree_node* %10, i32 %11, i32 %12)
  br label %if.end.34

if.else:                                          ; preds = %if.then
  %13 = load i32, i32* %in_fixup.addr, align 4
  %tobool8 = icmp ne i32 %13, 0
  br i1 %tobool8, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %14 = load i32, i32* @using_eh_for_cleanups_p, align 4
  %tobool9 = icmp ne i32 %14, 0
  br i1 %tobool9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list11 = bitcast %union.tree_node* %15 to %struct.tree_list*
  %value12 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list11, i32 0, i32 2
  %16 = load %union.tree_node*, %union.tree_node** %value12, align 8
  call void @expand_eh_region_end_cleanup(%union.tree_node* %16)
  br label %if.end

if.end:                                           ; preds = %if.then.10, %land.lhs.true, %if.else
  %17 = load i32, i32* %reachable.addr, align 4
  %tobool13 = icmp ne i32 %17, 0
  br i1 %tobool13, label %land.lhs.true.14, label %if.end.33

land.lhs.true.14:                                 ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common15 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2
  %bf.load16 = load i32, i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load16, 18
  %bf.clear17 = and i32 %bf.lshr, 1
  %tobool18 = icmp ne i32 %bf.clear17, 0
  br i1 %tobool18, label %if.end.33, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true.14
  %19 = load i32, i32* %in_fixup.addr, align 4
  %tobool20 = icmp ne i32 %19, 0
  br i1 %tobool20, label %land.lhs.true.21, label %if.else.28

land.lhs.true.21:                                 ; preds = %if.then.19
  %20 = load i32, i32* @using_eh_for_cleanups_p, align 4
  %tobool22 = icmp ne i32 %20, 0
  br i1 %tobool22, label %if.then.23, label %if.else.28

if.then.23:                                       ; preds = %land.lhs.true.21
  call void @expand_eh_region_start()
  %21 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list24 = bitcast %union.tree_node* %21 to %struct.tree_list*
  %value25 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list24, i32 0, i32 2
  %22 = load %union.tree_node*, %union.tree_node** %value25, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %22, %struct.rtx_def* %23, i32 0, i32 0)
  %24 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list26 = bitcast %union.tree_node* %24 to %struct.tree_list*
  %value27 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list26, i32 0, i32 2
  %25 = load %union.tree_node*, %union.tree_node** %value27, align 8
  call void @expand_eh_region_end_fixup(%union.tree_node* %25)
  br label %if.end.32

if.else.28:                                       ; preds = %land.lhs.true.21, %if.then.19
  %26 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %list29 = bitcast %union.tree_node* %26 to %struct.tree_list*
  %value30 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list29, i32 0, i32 2
  %27 = load %union.tree_node*, %union.tree_node** %value30, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call31 = call %struct.rtx_def* @expand_expr(%union.tree_node* %27, %struct.rtx_def* %28, i32 0, i32 0)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.28, %if.then.23
  call void @free_temp_slots()
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %land.lhs.true.14, %if.end
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.5
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %29 = load %union.tree_node*, %union.tree_node** %tail, align 8
  %common36 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 0
  %30 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %30, %union.tree_node** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @save_stack_pointer() #0 {
entry:
  %thisblock = alloca %struct.nesting*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 0
  %2 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  store %struct.nesting* %2, %struct.nesting** %thisblock, align 8
  %3 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %3, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %stack_level = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %stack_level, align 8
  %cmp = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 1
  %6 = load %struct.nesting*, %struct.nesting** %next, align 8
  %tobool = icmp ne %struct.nesting* %6, null
  %cond = select i1 %tobool, i32 0, i32 1
  %7 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data1 = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %block2 = bitcast %union.anon.3* %data1 to %struct.anon.6*
  %stack_level3 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block2, i32 0, i32 1
  %8 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data4 = getelementptr inbounds %struct.nesting, %struct.nesting* %8, i32 0, i32 4
  %block5 = bitcast %union.anon.3* %data4 to %struct.anon.6*
  %first_insn = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block5, i32 0, i32 2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %first_insn, align 8
  call void @emit_stack_save(i32 %cond, %struct.rtx_def** %stack_level3, %struct.rtx_def* %9)
  %10 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt6 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1
  %12 = load %struct.stmt_status*, %struct.stmt_status** %stmt6, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %12, i32 0, i32 1
  store %struct.nesting* %10, %struct.nesting** %x_stack_block_stack, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_decl(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %thisblock = alloca %struct.nesting*, align 8
  %type = alloca %union.tree_node*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %unsignedp = alloca i32, align 4
  %reg_mode = alloca i32, align 4
  %oldaddr = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %x263 = alloca %struct.rtx_def*, align 8
  %address = alloca %struct.rtx_def*, align 8
  %size376 = alloca %struct.rtx_def*, align 8
  %x377 = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8
  store %union.tree_node* %1, %union.tree_node** %type, align 8
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type3 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 6
  %bf.load4 = load i32, i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load4, 9
  %bf.clear5 = and i32 %bf.lshr, 127
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl6 = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %mode7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 5
  %5 = bitcast i48* %mode7 to i64*
  %6 = zext i32 %bf.clear5 to i64
  %bf.load8 = load i64, i64* %5, align 8
  %bf.value = and i64 %6, 255
  %bf.clear9 = and i64 %bf.load8, -256
  %bf.set = or i64 %bf.clear9, %bf.value
  store i64 %bf.set, i64* %5, align 8
  %bf.result.cast = trunc i64 %bf.value to i32
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type10 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 7
  %8 = load i32, i32* %align, align 4
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl11 = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %u1 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl11, i32 0, i32 6
  %a = bitcast %union.anon* %u1 to %struct.anon.0*
  %10 = bitcast %struct.anon.0* %a to i32*
  %bf.load12 = load i32, i32* %10, align 4
  %bf.value13 = and i32 %8, 16777215
  %bf.clear14 = and i32 %bf.load12, -16777216
  %bf.set15 = or i32 %bf.clear14, %bf.value13
  store i32 %bf.set15, i32* %10, align 4
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type16 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 2
  %12 = load %union.tree_node*, %union.tree_node** %size, align 8
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl17 = bitcast %union.tree_node* %13 to %struct.tree_decl*
  %size18 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl17, i32 0, i32 4
  store %union.tree_node* %12, %union.tree_node** %size18, align 8
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type19 = bitcast %union.tree_node* %14 to %struct.tree_type*
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 3
  %15 = load %union.tree_node*, %union.tree_node** %size_unit, align 8
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl20 = bitcast %union.tree_node* %16 to %struct.tree_decl*
  %size_unit21 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl20, i32 0, i32 7
  store %union.tree_node* %15, %union.tree_node** %size_unit21, align 8
  br label %if.end.426

if.end:                                           ; preds = %entry
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common22 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %code23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2
  %bf.load24 = load i32, i32* %code23, align 8
  %bf.clear25 = and i32 %bf.load24, 255
  %cmp26 = icmp ne i32 %bf.clear25, 34
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end
  br label %if.end.426

if.end.28:                                        ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common29 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2
  %bf.load30 = load i32, i32* %static_flag, align 8
  %bf.lshr31 = lshr i32 %bf.load30, 18
  %bf.clear32 = and i32 %bf.lshr31, 1
  %tobool = icmp ne i32 %bf.clear32, 0
  br i1 %tobool, label %if.then.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.28
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl33 = bitcast %union.tree_node* %19 to %struct.tree_decl*
  %external_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl33, i32 0, i32 5
  %20 = bitcast i48* %external_flag to i64*
  %bf.load34 = load i64, i64* %20, align 8
  %bf.lshr35 = lshr i64 %bf.load34, 8
  %bf.clear36 = and i64 %bf.lshr35, 1
  %bf.cast = trunc i64 %bf.clear36 to i32
  %tobool37 = icmp ne i32 %bf.cast, 0
  br i1 %tobool37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %lor.lhs.false, %if.end.28
  br label %if.end.426

if.end.39:                                        ; preds = %lor.lhs.false
  %21 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 1
  %22 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %22, i32 0, i32 0
  %23 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  store %struct.nesting* %23, %struct.nesting** %thisblock, align 8
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp40 = icmp eq %union.tree_node* %24, %25
  br i1 %cmp40, label %if.then.41, label %if.else

if.then.41:                                       ; preds = %if.end.39
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %26)
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl42 = bitcast %union.tree_node* %27 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl42, i32 0, i32 17
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl, align 8
  br label %if.end.426

if.else:                                          ; preds = %if.end.39
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl43 = bitcast %union.tree_node* %28 to %struct.tree_decl*
  %size44 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl43, i32 0, i32 4
  %29 = load %union.tree_node*, %union.tree_node** %size44, align 8
  %cmp45 = icmp eq %union.tree_node* %29, null
  br i1 %cmp45, label %if.then.46, label %if.else.58

if.then.46:                                       ; preds = %if.else
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl47 = bitcast %union.tree_node* %30 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl47, i32 0, i32 12
  %31 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %cmp48 = icmp eq %union.tree_node* %31, null
  br i1 %cmp48, label %if.then.49, label %if.else.51

if.then.49:                                       ; preds = %if.then.46
  %32 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call50 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %32)
  store %struct.rtx_def* %call50, %struct.rtx_def** %x, align 8
  br label %if.end.55

if.else.51:                                       ; preds = %if.then.46
  %33 = load i32, i32* @target_flags, align 4
  %and = and i32 %33, 33554432
  %tobool52 = icmp ne i32 %and, 0
  %cond = select i1 %tobool52, i32 5, i32 4
  %call53 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond)
  %call54 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call53)
  store %struct.rtx_def* %call54, %struct.rtx_def** %x, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.51, %if.then.49
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %34, %union.tree_node* %35, i32 1)
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %37 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl56 = bitcast %union.tree_node* %37 to %struct.tree_decl*
  %rtl57 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl56, i32 0, i32 17
  store %struct.rtx_def* %36, %struct.rtx_def** %rtl57, align 8
  br label %if.end.425

if.else.58:                                       ; preds = %if.else
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl59 = bitcast %union.tree_node* %38 to %struct.tree_decl*
  %mode60 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl59, i32 0, i32 5
  %39 = bitcast i48* %mode60 to i64*
  %bf.load61 = load i64, i64* %39, align 8
  %bf.clear62 = and i64 %bf.load61, 255
  %bf.cast63 = trunc i64 %bf.clear62 to i32
  %cmp64 = icmp ne i32 %bf.cast63, 51
  br i1 %cmp64, label %land.lhs.true, label %if.else.243

land.lhs.true:                                    ; preds = %if.else.58
  %40 = load i32, i32* @flag_float_store, align 4
  %tobool65 = icmp ne i32 %40, 0
  br i1 %tobool65, label %land.lhs.true.66, label %land.lhs.true.72

land.lhs.true.66:                                 ; preds = %land.lhs.true
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common67 = bitcast %union.tree_node* %41 to %struct.tree_common*
  %code68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2
  %bf.load69 = load i32, i32* %code68, align 8
  %bf.clear70 = and i32 %bf.load69, 255
  %cmp71 = icmp eq i32 %bf.clear70, 7
  br i1 %cmp71, label %if.else.243, label %land.lhs.true.72

land.lhs.true.72:                                 ; preds = %land.lhs.true.66, %land.lhs.true
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common73 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2
  %bf.load74 = load i32, i32* %volatile_flag, align 8
  %bf.lshr75 = lshr i32 %bf.load74, 11
  %bf.clear76 = and i32 %bf.lshr75, 1
  %tobool77 = icmp ne i32 %bf.clear76, 0
  br i1 %tobool77, label %if.else.243, label %land.lhs.true.78

land.lhs.true.78:                                 ; preds = %land.lhs.true.72
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl79 = bitcast %union.tree_node* %43 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl79, i32 0, i32 5
  %44 = bitcast i48* %regdecl_flag to i64*
  %bf.load80 = load i64, i64* %44, align 8
  %bf.lshr81 = lshr i64 %bf.load80, 10
  %bf.clear82 = and i64 %bf.lshr81, 1
  %bf.cast83 = trunc i64 %bf.clear82 to i32
  %tobool84 = icmp ne i32 %bf.cast83, 0
  br i1 %tobool84, label %if.then.87, label %lor.lhs.false.85

lor.lhs.false.85:                                 ; preds = %land.lhs.true.78
  %45 = load i32, i32* @optimize, align 4
  %tobool86 = icmp ne i32 %45, 0
  br i1 %tobool86, label %if.then.87, label %if.else.243

if.then.87:                                       ; preds = %lor.lhs.false.85, %land.lhs.true.78
  %46 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common88 = bitcast %union.tree_node* %46 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 2
  %bf.load89 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr90 = lshr i32 %bf.load89, 13
  %bf.clear91 = and i32 %bf.lshr90, 1
  store i32 %bf.clear91, i32* %unsignedp, align 4
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl92 = bitcast %union.tree_node* %48 to %struct.tree_decl*
  %mode93 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl92, i32 0, i32 5
  %49 = bitcast i48* %mode93 to i64*
  %bf.load94 = load i64, i64* %49, align 8
  %bf.clear95 = and i64 %bf.load94, 255
  %bf.cast96 = trunc i64 %bf.clear95 to i32
  %call97 = call i32 @promote_mode(%union.tree_node* %47, i32 %bf.cast96, i32* %unsignedp, i32 0)
  store i32 %call97, i32* %reg_mode, align 4
  %50 = load i32, i32* %reg_mode, align 4
  %call98 = call %struct.rtx_def* @gen_reg_rtx(i32 %50)
  %51 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl99 = bitcast %union.tree_node* %51 to %struct.tree_decl*
  %rtl100 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl99, i32 0, i32 17
  store %struct.rtx_def* %call98, %struct.rtx_def** %rtl100, align 8
  %52 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl101 = bitcast %union.tree_node* %52 to %struct.tree_decl*
  %rtl102 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl101, i32 0, i32 17
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl102, align 8
  %tobool103 = icmp ne %struct.rtx_def* %53, null
  br i1 %tobool103, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.87
  %54 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl104 = bitcast %union.tree_node* %54 to %struct.tree_decl*
  %rtl105 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl104, i32 0, i32 17
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtl105, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.87
  %56 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %56, i8* null)
  %57 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl106 = bitcast %union.tree_node* %57 to %struct.tree_decl*
  %rtl107 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl106, i32 0, i32 17
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtl107, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond108 = phi %struct.rtx_def* [ %55, %cond.true ], [ %58, %cond.false ]
  %59 = bitcast %struct.rtx_def* %cond108 to i32*
  %bf.load109 = load i32, i32* %59, align 8
  %bf.clear110 = and i32 %bf.load109, 65535
  %cmp111 = icmp eq i32 %bf.clear110, 61
  br i1 %cmp111, label %if.then.112, label %if.else.125

if.then.112:                                      ; preds = %cond.end
  %60 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %61 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl113 = bitcast %union.tree_node* %61 to %struct.tree_decl*
  %rtl114 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl113, i32 0, i32 17
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtl114, align 8
  %tobool115 = icmp ne %struct.rtx_def* %62, null
  br i1 %tobool115, label %cond.true.116, label %cond.false.119

cond.true.116:                                    ; preds = %if.then.112
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl117 = bitcast %union.tree_node* %63 to %struct.tree_decl*
  %rtl118 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl117, i32 0, i32 17
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtl118, align 8
  br label %cond.end.122

cond.false.119:                                   ; preds = %if.then.112
  %65 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %65, i8* null)
  %66 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl120 = bitcast %union.tree_node* %66 to %struct.tree_decl*
  %rtl121 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl120, i32 0, i32 17
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rtl121, align 8
  br label %cond.end.122

cond.end.122:                                     ; preds = %cond.false.119, %cond.true.116
  %cond123 = phi %struct.rtx_def* [ %64, %cond.true.116 ], [ %67, %cond.false.119 ]
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond123, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %68 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %68 to i64
  %69 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %69, i32 0, i32 3
  %70 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %regno_decl = getelementptr inbounds %struct.emit_status, %struct.emit_status* %70, i32 0, i32 11
  %71 = load %union.tree_node**, %union.tree_node*** %regno_decl, align 8
  %arrayidx124 = getelementptr inbounds %union.tree_node*, %union.tree_node** %71, i64 %idxprom
  store %union.tree_node* %60, %union.tree_node** %arrayidx124, align 8
  br label %if.end.183

if.else.125:                                      ; preds = %cond.end
  %72 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl126 = bitcast %union.tree_node* %72 to %struct.tree_decl*
  %rtl127 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl126, i32 0, i32 17
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtl127, align 8
  %tobool128 = icmp ne %struct.rtx_def* %73, null
  br i1 %tobool128, label %cond.true.129, label %cond.false.132

cond.true.129:                                    ; preds = %if.else.125
  %74 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl130 = bitcast %union.tree_node* %74 to %struct.tree_decl*
  %rtl131 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl130, i32 0, i32 17
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rtl131, align 8
  br label %cond.end.135

cond.false.132:                                   ; preds = %if.else.125
  %76 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %76, i8* null)
  %77 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl133 = bitcast %union.tree_node* %77 to %struct.tree_decl*
  %rtl134 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl133, i32 0, i32 17
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtl134, align 8
  br label %cond.end.135

cond.end.135:                                     ; preds = %cond.false.132, %cond.true.129
  %cond136 = phi %struct.rtx_def* [ %75, %cond.true.129 ], [ %78, %cond.false.132 ]
  %79 = bitcast %struct.rtx_def* %cond136 to i32*
  %bf.load137 = load i32, i32* %79, align 8
  %bf.clear138 = and i32 %bf.load137, 65535
  %cmp139 = icmp eq i32 %bf.clear138, 65
  br i1 %cmp139, label %if.then.140, label %if.end.182

if.then.140:                                      ; preds = %cond.end.135
  %80 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %81 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl141 = bitcast %union.tree_node* %81 to %struct.tree_decl*
  %rtl142 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl141, i32 0, i32 17
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtl142, align 8
  %tobool143 = icmp ne %struct.rtx_def* %82, null
  br i1 %tobool143, label %cond.true.144, label %cond.false.147

cond.true.144:                                    ; preds = %if.then.140
  %83 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl145 = bitcast %union.tree_node* %83 to %struct.tree_decl*
  %rtl146 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl145, i32 0, i32 17
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtl146, align 8
  br label %cond.end.150

cond.false.147:                                   ; preds = %if.then.140
  %85 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %85, i8* null)
  %86 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl148 = bitcast %union.tree_node* %86 to %struct.tree_decl*
  %rtl149 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl148, i32 0, i32 17
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtl149, align 8
  br label %cond.end.150

cond.end.150:                                     ; preds = %cond.false.147, %cond.true.144
  %cond151 = phi %struct.rtx_def* [ %84, %cond.true.144 ], [ %87, %cond.false.147 ]
  %fld152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond151, i32 0, i32 1
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld154, i32 0, i64 0
  %rtuint156 = bitcast %union.rtunion_def* %arrayidx155 to i32*
  %89 = load i32, i32* %rtuint156, align 4
  %idxprom157 = zext i32 %89 to i64
  %90 = load %struct.function*, %struct.function** @cfun, align 8
  %emit158 = getelementptr inbounds %struct.function, %struct.function* %90, i32 0, i32 3
  %91 = load %struct.emit_status*, %struct.emit_status** %emit158, align 8
  %regno_decl159 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %91, i32 0, i32 11
  %92 = load %union.tree_node**, %union.tree_node*** %regno_decl159, align 8
  %arrayidx160 = getelementptr inbounds %union.tree_node*, %union.tree_node** %92, i64 %idxprom157
  store %union.tree_node* %80, %union.tree_node** %arrayidx160, align 8
  %93 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %94 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl161 = bitcast %union.tree_node* %94 to %struct.tree_decl*
  %rtl162 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl161, i32 0, i32 17
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rtl162, align 8
  %tobool163 = icmp ne %struct.rtx_def* %95, null
  br i1 %tobool163, label %cond.true.164, label %cond.false.167

cond.true.164:                                    ; preds = %cond.end.150
  %96 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl165 = bitcast %union.tree_node* %96 to %struct.tree_decl*
  %rtl166 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl165, i32 0, i32 17
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtl166, align 8
  br label %cond.end.170

cond.false.167:                                   ; preds = %cond.end.150
  %98 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %98, i8* null)
  %99 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl168 = bitcast %union.tree_node* %99 to %struct.tree_decl*
  %rtl169 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl168, i32 0, i32 17
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rtl169, align 8
  br label %cond.end.170

cond.end.170:                                     ; preds = %cond.false.167, %cond.true.164
  %cond171 = phi %struct.rtx_def* [ %97, %cond.true.164 ], [ %100, %cond.false.167 ]
  %fld172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond171, i32 0, i32 1
  %arrayidx173 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld172, i32 0, i64 1
  %rtx174 = bitcast %union.rtunion_def* %arrayidx173 to %struct.rtx_def**
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtx174, align 8
  %fld175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i32 0, i64 0
  %rtuint177 = bitcast %union.rtunion_def* %arrayidx176 to i32*
  %102 = load i32, i32* %rtuint177, align 4
  %idxprom178 = zext i32 %102 to i64
  %103 = load %struct.function*, %struct.function** @cfun, align 8
  %emit179 = getelementptr inbounds %struct.function, %struct.function* %103, i32 0, i32 3
  %104 = load %struct.emit_status*, %struct.emit_status** %emit179, align 8
  %regno_decl180 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %104, i32 0, i32 11
  %105 = load %union.tree_node**, %union.tree_node*** %regno_decl180, align 8
  %arrayidx181 = getelementptr inbounds %union.tree_node*, %union.tree_node** %105, i64 %idxprom178
  store %union.tree_node* %93, %union.tree_node** %arrayidx181, align 8
  br label %if.end.182

if.end.182:                                       ; preds = %cond.end.170, %cond.end.135
  br label %if.end.183

if.end.183:                                       ; preds = %if.end.182, %cond.end.122
  %106 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl184 = bitcast %union.tree_node* %106 to %struct.tree_decl*
  %rtl185 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl184, i32 0, i32 17
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rtl185, align 8
  %tobool186 = icmp ne %struct.rtx_def* %107, null
  br i1 %tobool186, label %cond.true.187, label %cond.false.190

cond.true.187:                                    ; preds = %if.end.183
  %108 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl188 = bitcast %union.tree_node* %108 to %struct.tree_decl*
  %rtl189 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl188, i32 0, i32 17
  %109 = load %struct.rtx_def*, %struct.rtx_def** %rtl189, align 8
  br label %cond.end.193

cond.false.190:                                   ; preds = %if.end.183
  %110 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %110, i8* null)
  %111 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl191 = bitcast %union.tree_node* %111 to %struct.tree_decl*
  %rtl192 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl191, i32 0, i32 17
  %112 = load %struct.rtx_def*, %struct.rtx_def** %rtl192, align 8
  br label %cond.end.193

cond.end.193:                                     ; preds = %cond.false.190, %cond.true.187
  %cond194 = phi %struct.rtx_def* [ %109, %cond.true.187 ], [ %112, %cond.false.190 ]
  call void @mark_user_reg(%struct.rtx_def* %cond194)
  %113 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common195 = bitcast %union.tree_node* %113 to %struct.tree_common*
  %code196 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common195, i32 0, i32 2
  %bf.load197 = load i32, i32* %code196, align 8
  %bf.clear198 = and i32 %bf.load197, 255
  %cmp199 = icmp eq i32 %bf.clear198, 13
  br i1 %cmp199, label %if.then.206, label %lor.lhs.false.200

lor.lhs.false.200:                                ; preds = %cond.end.193
  %114 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common201 = bitcast %union.tree_node* %114 to %struct.tree_common*
  %code202 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common201, i32 0, i32 2
  %bf.load203 = load i32, i32* %code202, align 8
  %bf.clear204 = and i32 %bf.load203, 255
  %cmp205 = icmp eq i32 %bf.clear204, 15
  br i1 %cmp205, label %if.then.206, label %if.end.224

if.then.206:                                      ; preds = %lor.lhs.false.200, %cond.end.193
  %115 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl207 = bitcast %union.tree_node* %115 to %struct.tree_decl*
  %rtl208 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl207, i32 0, i32 17
  %116 = load %struct.rtx_def*, %struct.rtx_def** %rtl208, align 8
  %tobool209 = icmp ne %struct.rtx_def* %116, null
  br i1 %tobool209, label %cond.true.210, label %cond.false.213

cond.true.210:                                    ; preds = %if.then.206
  %117 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl211 = bitcast %union.tree_node* %117 to %struct.tree_decl*
  %rtl212 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl211, i32 0, i32 17
  %118 = load %struct.rtx_def*, %struct.rtx_def** %rtl212, align 8
  br label %cond.end.216

cond.false.213:                                   ; preds = %if.then.206
  %119 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %119, i8* null)
  %120 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl214 = bitcast %union.tree_node* %120 to %struct.tree_decl*
  %rtl215 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl214, i32 0, i32 17
  %121 = load %struct.rtx_def*, %struct.rtx_def** %rtl215, align 8
  br label %cond.end.216

cond.end.216:                                     ; preds = %cond.false.213, %cond.true.210
  %cond217 = phi %struct.rtx_def* [ %118, %cond.true.210 ], [ %121, %cond.false.213 ]
  %122 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common218 = bitcast %union.tree_node* %122 to %struct.tree_common*
  %type219 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common218, i32 0, i32 1
  %123 = load %union.tree_node*, %union.tree_node** %type219, align 8
  %common220 = bitcast %union.tree_node* %123 to %struct.tree_common*
  %type221 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common220, i32 0, i32 1
  %124 = load %union.tree_node*, %union.tree_node** %type221, align 8
  %type222 = bitcast %union.tree_node* %124 to %struct.tree_type*
  %align223 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type222, i32 0, i32 7
  %125 = load i32, i32* %align223, align 4
  call void @mark_reg_pointer(%struct.rtx_def* %cond217, i32 %125)
  br label %if.end.224

if.end.224:                                       ; preds = %cond.end.216, %lor.lhs.false.200
  %126 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl225 = bitcast %union.tree_node* %126 to %struct.tree_decl*
  %rtl226 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl225, i32 0, i32 17
  %127 = load %struct.rtx_def*, %struct.rtx_def** %rtl226, align 8
  %tobool227 = icmp ne %struct.rtx_def* %127, null
  br i1 %tobool227, label %cond.true.228, label %cond.false.231

cond.true.228:                                    ; preds = %if.end.224
  %128 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl229 = bitcast %union.tree_node* %128 to %struct.tree_decl*
  %rtl230 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl229, i32 0, i32 17
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtl230, align 8
  br label %cond.end.234

cond.false.231:                                   ; preds = %if.end.224
  %130 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %130, i8* null)
  %131 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl232 = bitcast %union.tree_node* %131 to %struct.tree_decl*
  %rtl233 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl232, i32 0, i32 17
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rtl233, align 8
  br label %cond.end.234

cond.end.234:                                     ; preds = %cond.false.231, %cond.true.228
  %cond235 = phi %struct.rtx_def* [ %129, %cond.true.228 ], [ %132, %cond.false.231 ]
  %133 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @maybe_set_unchanging(%struct.rtx_def* %cond235, %union.tree_node* %133)
  %134 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common236 = bitcast %union.tree_node* %134 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common236, i32 0, i32 2
  %bf.load237 = load i32, i32* %addressable_flag, align 8
  %bf.lshr238 = lshr i32 %bf.load237, 10
  %bf.clear239 = and i32 %bf.lshr238, 1
  %tobool240 = icmp ne i32 %bf.clear239, 0
  br i1 %tobool240, label %if.then.241, label %if.end.242

if.then.241:                                      ; preds = %cond.end.234
  %135 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @put_var_into_stack(%union.tree_node* %135)
  br label %if.end.242

if.end.242:                                       ; preds = %if.then.241, %cond.end.234
  br label %if.end.424

if.else.243:                                      ; preds = %lor.lhs.false.85, %land.lhs.true.72, %land.lhs.true.66, %if.else.58
  %136 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl244 = bitcast %union.tree_node* %136 to %struct.tree_decl*
  %size_unit245 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl244, i32 0, i32 7
  %137 = load %union.tree_node*, %union.tree_node** %size_unit245, align 8
  %common246 = bitcast %union.tree_node* %137 to %struct.tree_common*
  %code247 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common246, i32 0, i32 2
  %bf.load248 = load i32, i32* %code247, align 8
  %bf.clear249 = and i32 %bf.load248, 255
  %cmp250 = icmp eq i32 %bf.clear249, 25
  br i1 %cmp250, label %land.lhs.true.251, label %if.else.375

land.lhs.true.251:                                ; preds = %if.else.243
  %138 = load i32, i32* @flag_stack_check, align 4
  %tobool252 = icmp ne i32 %138, 0
  br i1 %tobool252, label %land.lhs.true.253, label %if.then.262

land.lhs.true.253:                                ; preds = %land.lhs.true.251
  %139 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl254 = bitcast %union.tree_node* %139 to %struct.tree_decl*
  %size_unit255 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl254, i32 0, i32 7
  %140 = load %union.tree_node*, %union.tree_node** %size_unit255, align 8
  %141 = load i32, i32* @target_flags, align 4
  %and256 = and i32 %141, 33554432
  %tobool257 = icmp ne i32 %and256, 0
  %cond258 = select i1 %tobool257, i32 8, i32 4
  %sub = sub nsw i32 4096, %cond258
  %div = sdiv i32 %sub, 100
  %conv = sext i32 %div to i64
  %call259 = call i32 @compare_tree_int(%union.tree_node* %140, i64 %conv)
  %cmp260 = icmp slt i32 0, %call259
  br i1 %cmp260, label %if.else.375, label %if.then.262

if.then.262:                                      ; preds = %land.lhs.true.253, %land.lhs.true.251
  store %struct.rtx_def* null, %struct.rtx_def** %oldaddr, align 8
  %142 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl264 = bitcast %union.tree_node* %142 to %struct.tree_decl*
  %rtl265 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl264, i32 0, i32 17
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rtl265, align 8
  %cmp266 = icmp ne %struct.rtx_def* %143, null
  br i1 %cmp266, label %if.then.268, label %if.end.319

if.then.268:                                      ; preds = %if.then.262
  %144 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl269 = bitcast %union.tree_node* %144 to %struct.tree_decl*
  %rtl270 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl269, i32 0, i32 17
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rtl270, align 8
  %tobool271 = icmp ne %struct.rtx_def* %145, null
  br i1 %tobool271, label %cond.true.272, label %cond.false.275

cond.true.272:                                    ; preds = %if.then.268
  %146 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl273 = bitcast %union.tree_node* %146 to %struct.tree_decl*
  %rtl274 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl273, i32 0, i32 17
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rtl274, align 8
  br label %cond.end.278

cond.false.275:                                   ; preds = %if.then.268
  %148 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %148, i8* null)
  %149 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl276 = bitcast %union.tree_node* %149 to %struct.tree_decl*
  %rtl277 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl276, i32 0, i32 17
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtl277, align 8
  br label %cond.end.278

cond.end.278:                                     ; preds = %cond.false.275, %cond.true.272
  %cond279 = phi %struct.rtx_def* [ %147, %cond.true.272 ], [ %150, %cond.false.275 ]
  %151 = bitcast %struct.rtx_def* %cond279 to i32*
  %bf.load280 = load i32, i32* %151, align 8
  %bf.clear281 = and i32 %bf.load280, 65535
  %cmp282 = icmp ne i32 %bf.clear281, 66
  br i1 %cmp282, label %if.then.303, label %lor.lhs.false.284

lor.lhs.false.284:                                ; preds = %cond.end.278
  %152 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl285 = bitcast %union.tree_node* %152 to %struct.tree_decl*
  %rtl286 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl285, i32 0, i32 17
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rtl286, align 8
  %tobool287 = icmp ne %struct.rtx_def* %153, null
  br i1 %tobool287, label %cond.true.288, label %cond.false.291

cond.true.288:                                    ; preds = %lor.lhs.false.284
  %154 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl289 = bitcast %union.tree_node* %154 to %struct.tree_decl*
  %rtl290 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl289, i32 0, i32 17
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtl290, align 8
  br label %cond.end.294

cond.false.291:                                   ; preds = %lor.lhs.false.284
  %156 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %156, i8* null)
  %157 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl292 = bitcast %union.tree_node* %157 to %struct.tree_decl*
  %rtl293 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl292, i32 0, i32 17
  %158 = load %struct.rtx_def*, %struct.rtx_def** %rtl293, align 8
  br label %cond.end.294

cond.end.294:                                     ; preds = %cond.false.291, %cond.true.288
  %cond295 = phi %struct.rtx_def* [ %155, %cond.true.288 ], [ %158, %cond.false.291 ]
  %fld296 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond295, i32 0, i32 1
  %arrayidx297 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld296, i32 0, i64 0
  %rtx298 = bitcast %union.rtunion_def* %arrayidx297 to %struct.rtx_def**
  %159 = load %struct.rtx_def*, %struct.rtx_def** %rtx298, align 8
  %160 = bitcast %struct.rtx_def* %159 to i32*
  %bf.load299 = load i32, i32* %160, align 8
  %bf.clear300 = and i32 %bf.load299, 65535
  %cmp301 = icmp ne i32 %bf.clear300, 61
  br i1 %cmp301, label %if.then.303, label %if.end.304

if.then.303:                                      ; preds = %cond.end.294, %cond.end.278
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 3969, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__FUNCTION__.expand_decl, i32 0, i32 0)) #6
  unreachable

if.end.304:                                       ; preds = %cond.end.294
  %161 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl305 = bitcast %union.tree_node* %161 to %struct.tree_decl*
  %rtl306 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl305, i32 0, i32 17
  %162 = load %struct.rtx_def*, %struct.rtx_def** %rtl306, align 8
  %tobool307 = icmp ne %struct.rtx_def* %162, null
  br i1 %tobool307, label %cond.true.308, label %cond.false.311

cond.true.308:                                    ; preds = %if.end.304
  %163 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl309 = bitcast %union.tree_node* %163 to %struct.tree_decl*
  %rtl310 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl309, i32 0, i32 17
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rtl310, align 8
  br label %cond.end.314

cond.false.311:                                   ; preds = %if.end.304
  %165 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %165, i8* null)
  %166 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl312 = bitcast %union.tree_node* %166 to %struct.tree_decl*
  %rtl313 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl312, i32 0, i32 17
  %167 = load %struct.rtx_def*, %struct.rtx_def** %rtl313, align 8
  br label %cond.end.314

cond.end.314:                                     ; preds = %cond.false.311, %cond.true.308
  %cond315 = phi %struct.rtx_def* [ %164, %cond.true.308 ], [ %167, %cond.false.311 ]
  %fld316 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond315, i32 0, i32 1
  %arrayidx317 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld316, i32 0, i64 0
  %rtx318 = bitcast %union.rtunion_def* %arrayidx317 to %struct.rtx_def**
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rtx318, align 8
  store %struct.rtx_def* %168, %struct.rtx_def** %oldaddr, align 8
  br label %if.end.319

if.end.319:                                       ; preds = %cond.end.314, %if.then.262
  %169 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl320 = bitcast %union.tree_node* %169 to %struct.tree_decl*
  %mode321 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl320, i32 0, i32 5
  %170 = bitcast i48* %mode321 to i64*
  %bf.load322 = load i64, i64* %170, align 8
  %bf.clear323 = and i64 %bf.load322, 255
  %bf.cast324 = trunc i64 %bf.clear323 to i32
  %cmp325 = icmp eq i32 %bf.cast324, 51
  br i1 %cmp325, label %cond.true.327, label %cond.false.328

cond.true.327:                                    ; preds = %if.end.319
  br label %cond.end.337

cond.false.328:                                   ; preds = %if.end.319
  %171 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl329 = bitcast %union.tree_node* %171 to %struct.tree_decl*
  %mode330 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl329, i32 0, i32 5
  %172 = bitcast i48* %mode330 to i64*
  %bf.load331 = load i64, i64* %172, align 8
  %bf.clear332 = and i64 %bf.load331, 255
  %bf.cast333 = trunc i64 %bf.clear332 to i32
  %idxprom334 = sext i32 %bf.cast333 to i64
  %arrayidx335 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom334
  %173 = load i16, i16* %arrayidx335, align 2
  %conv336 = zext i16 %173 to i32
  br label %cond.end.337

cond.end.337:                                     ; preds = %cond.false.328, %cond.true.327
  %cond338 = phi i32 [ 128, %cond.true.327 ], [ %conv336, %cond.false.328 ]
  %174 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl339 = bitcast %union.tree_node* %174 to %struct.tree_decl*
  %u1340 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl339, i32 0, i32 6
  %a341 = bitcast %union.anon* %u1340 to %struct.anon.0*
  %175 = bitcast %struct.anon.0* %a341 to i32*
  %bf.load342 = load i32, i32* %175, align 4
  %bf.value343 = and i32 %cond338, 16777215
  %bf.clear344 = and i32 %bf.load342, -16777216
  %bf.set345 = or i32 %bf.clear344, %bf.value343
  store i32 %bf.set345, i32* %175, align 4
  %176 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl346 = bitcast %union.tree_node* %176 to %struct.tree_decl*
  %user_align = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl346, i32 0, i32 5
  %177 = bitcast i48* %user_align to i64*
  %bf.load347 = load i64, i64* %177, align 8
  %bf.clear348 = and i64 %bf.load347, -34359738369
  store i64 %bf.clear348, i64* %177, align 8
  %178 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call349 = call %struct.rtx_def* @assign_temp(%union.tree_node* %178, i32 1, i32 1, i32 1)
  store %struct.rtx_def* %call349, %struct.rtx_def** %x263, align 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** %x263, align 8
  %180 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %179, %union.tree_node* %180, i32 1)
  %181 = load %struct.rtx_def*, %struct.rtx_def** %x263, align 8
  %182 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl350 = bitcast %union.tree_node* %182 to %struct.tree_decl*
  %rtl351 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl350, i32 0, i32 17
  store %struct.rtx_def* %181, %struct.rtx_def** %rtl351, align 8
  %183 = load %struct.rtx_def*, %struct.rtx_def** %oldaddr, align 8
  %tobool352 = icmp ne %struct.rtx_def* %183, null
  br i1 %tobool352, label %if.then.353, label %if.end.374

if.then.353:                                      ; preds = %cond.end.337
  %184 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl354 = bitcast %union.tree_node* %184 to %struct.tree_decl*
  %rtl355 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl354, i32 0, i32 17
  %185 = load %struct.rtx_def*, %struct.rtx_def** %rtl355, align 8
  %tobool356 = icmp ne %struct.rtx_def* %185, null
  br i1 %tobool356, label %cond.true.357, label %cond.false.360

cond.true.357:                                    ; preds = %if.then.353
  %186 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl358 = bitcast %union.tree_node* %186 to %struct.tree_decl*
  %rtl359 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl358, i32 0, i32 17
  %187 = load %struct.rtx_def*, %struct.rtx_def** %rtl359, align 8
  br label %cond.end.363

cond.false.360:                                   ; preds = %if.then.353
  %188 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %188, i8* null)
  %189 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl361 = bitcast %union.tree_node* %189 to %struct.tree_decl*
  %rtl362 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl361, i32 0, i32 17
  %190 = load %struct.rtx_def*, %struct.rtx_def** %rtl362, align 8
  br label %cond.end.363

cond.end.363:                                     ; preds = %cond.false.360, %cond.true.357
  %cond364 = phi %struct.rtx_def* [ %187, %cond.true.357 ], [ %190, %cond.false.360 ]
  %fld365 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond364, i32 0, i32 1
  %arrayidx366 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld365, i32 0, i64 0
  %rtx367 = bitcast %union.rtunion_def* %arrayidx366 to %struct.rtx_def**
  %191 = load %struct.rtx_def*, %struct.rtx_def** %rtx367, align 8
  %192 = load %struct.rtx_def*, %struct.rtx_def** %oldaddr, align 8
  %call368 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %191, %struct.rtx_def* %192)
  store %struct.rtx_def* %call368, %struct.rtx_def** %addr, align 8
  %193 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %194 = load %struct.rtx_def*, %struct.rtx_def** %oldaddr, align 8
  %cmp369 = icmp ne %struct.rtx_def* %193, %194
  br i1 %cmp369, label %if.then.371, label %if.end.373

if.then.371:                                      ; preds = %cond.end.363
  %195 = load %struct.rtx_def*, %struct.rtx_def** %oldaddr, align 8
  %196 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call372 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %195, %struct.rtx_def* %196)
  br label %if.end.373

if.end.373:                                       ; preds = %if.then.371, %cond.end.363
  br label %if.end.374

if.end.374:                                       ; preds = %if.end.373, %cond.end.337
  br label %if.end.423

if.else.375:                                      ; preds = %land.lhs.true.253, %if.else.243
  call void @do_pending_stack_adjust()
  call void @save_stack_pointer()
  %197 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common378 = bitcast %union.tree_node* %197 to %struct.tree_common*
  %code379 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common378, i32 0, i32 2
  %bf.load380 = load i32, i32* %code379, align 8
  %bf.clear381 = and i32 %bf.load380, 255
  %cmp382 = icmp eq i32 %bf.clear381, 18
  br i1 %cmp382, label %land.lhs.true.384, label %if.end.392

land.lhs.true.384:                                ; preds = %if.else.375
  %198 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type385 = bitcast %union.tree_node* %198 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type385, i32 0, i32 1
  %199 = load %union.tree_node*, %union.tree_node** %values, align 8
  %tobool386 = icmp ne %union.tree_node* %199, null
  br i1 %tobool386, label %if.then.387, label %if.end.392

if.then.387:                                      ; preds = %land.lhs.true.384
  %200 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type388 = bitcast %union.tree_node* %200 to %struct.tree_type*
  %values389 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type388, i32 0, i32 1
  %201 = load %union.tree_node*, %union.tree_node** %values389, align 8
  %type390 = bitcast %union.tree_node* %201 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type390, i32 0, i32 13
  %202 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %203 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call391 = call %struct.rtx_def* @expand_expr(%union.tree_node* %202, %struct.rtx_def* %203, i32 0, i32 0)
  br label %if.end.392

if.end.392:                                       ; preds = %if.then.387, %land.lhs.true.384, %if.else.375
  %204 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl393 = bitcast %union.tree_node* %204 to %struct.tree_decl*
  %size_unit394 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl393, i32 0, i32 7
  %205 = load %union.tree_node*, %union.tree_node** %size_unit394, align 8
  %call395 = call %struct.rtx_def* @expand_expr(%union.tree_node* %205, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call395, %struct.rtx_def** %size376, align 8
  call void @free_temp_slots()
  %206 = load %struct.rtx_def*, %struct.rtx_def** %size376, align 8
  %207 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common396 = bitcast %union.tree_node* %207 to %struct.tree_common*
  %type397 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common396, i32 0, i32 1
  %208 = load %union.tree_node*, %union.tree_node** %type397, align 8
  %type398 = bitcast %union.tree_node* %208 to %struct.tree_type*
  %align399 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type398, i32 0, i32 7
  %209 = load i32, i32* %align399, align 4
  %call400 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %206, %struct.rtx_def* null, i32 %209)
  store %struct.rtx_def* %call400, %struct.rtx_def** %address, align 8
  %210 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl401 = bitcast %union.tree_node* %210 to %struct.tree_decl*
  %mode402 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl401, i32 0, i32 5
  %211 = bitcast i48* %mode402 to i64*
  %bf.load403 = load i64, i64* %211, align 8
  %bf.clear404 = and i64 %bf.load403, 255
  %bf.cast405 = trunc i64 %bf.clear404 to i32
  %212 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8
  %call406 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast405, %struct.rtx_def* %212)
  store %struct.rtx_def* %call406, %struct.rtx_def** %x377, align 8
  %213 = load %struct.rtx_def*, %struct.rtx_def** %x377, align 8
  %214 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %213, %union.tree_node* %214, i32 1)
  %215 = load %struct.rtx_def*, %struct.rtx_def** %x377, align 8
  %216 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl407 = bitcast %union.tree_node* %216 to %struct.tree_decl*
  %rtl408 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl407, i32 0, i32 17
  store %struct.rtx_def* %215, %struct.rtx_def** %rtl408, align 8
  %217 = load i32, i32* @target_flags, align 4
  %and409 = and i32 %217, 33554432
  %tobool410 = icmp ne i32 %and409, 0
  %cond411 = select i1 %tobool410, i32 64, i32 32
  %218 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl412 = bitcast %union.tree_node* %218 to %struct.tree_decl*
  %u1413 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl412, i32 0, i32 6
  %a414 = bitcast %union.anon* %u1413 to %struct.anon.0*
  %219 = bitcast %struct.anon.0* %a414 to i32*
  %bf.load415 = load i32, i32* %219, align 4
  %bf.value416 = and i32 %cond411, 16777215
  %bf.clear417 = and i32 %bf.load415, -16777216
  %bf.set418 = or i32 %bf.clear417, %bf.value416
  store i32 %bf.set418, i32* %219, align 4
  %220 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl419 = bitcast %union.tree_node* %220 to %struct.tree_decl*
  %user_align420 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl419, i32 0, i32 5
  %221 = bitcast i48* %user_align420 to i64*
  %bf.load421 = load i64, i64* %221, align 8
  %bf.clear422 = and i64 %bf.load421, -34359738369
  store i64 %bf.clear422, i64* %221, align 8
  br label %if.end.423

if.end.423:                                       ; preds = %if.end.392, %if.end.374
  br label %if.end.424

if.end.424:                                       ; preds = %if.end.423, %if.end.242
  br label %if.end.425

if.end.425:                                       ; preds = %if.end.424, %if.end.55
  br label %if.end.426

if.end.426:                                       ; preds = %if.then, %if.then.27, %if.then.38, %if.end.425, %if.then.41
  ret void
}

declare void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #2

declare i32 @promote_mode(%union.tree_node*, i32, i32*, i32) #2

declare void @mark_user_reg(%struct.rtx_def*) #2

declare void @mark_reg_pointer(%struct.rtx_def*, i32) #2

declare void @maybe_set_unchanging(%struct.rtx_def*, %union.tree_node*) #2

declare void @put_var_into_stack(%union.tree_node*) #2

declare i32 @compare_tree_int(%union.tree_node*, i64) #2

declare %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def*, %struct.rtx_def*, i32) #2

; Function Attrs: nounwind uwtable
define void @expand_decl_init(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %was_used = alloca i32, align 4
  %code11 = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %used_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 1
  store i32 %bf.clear, i32* %was_used, align 4
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load2 = load i32, i32* %code, align 8
  %bf.clear3 = and i32 %bf.load2, 255
  %cmp = icmp eq i32 %bf.clear3, 32
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common4 = bitcast %union.tree_node* %2 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2
  %bf.load5 = load i32, i32* %static_flag, align 8
  %bf.lshr6 = lshr i32 %bf.load5, 18
  %bf.clear7 = and i32 %bf.lshr6, 1
  %tobool = icmp ne i32 %bf.clear7, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl8 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 12
  %4 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp9 = icmp eq %union.tree_node* %4, %5
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common12 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common13 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %code14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load15 = load i32, i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  store i32 %bf.clear16, i32* %code11, align 4
  %8 = load i32, i32* %code11, align 4
  %cmp17 = icmp eq i32 %8, 6
  br i1 %cmp17, label %if.then.26, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %if.then.10
  %9 = load i32, i32* %code11, align 4
  %cmp19 = icmp eq i32 %9, 7
  br i1 %cmp19, label %if.then.26, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.18
  %10 = load i32, i32* %code11, align 4
  %cmp21 = icmp eq i32 %10, 10
  br i1 %cmp21, label %if.then.26, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %lor.lhs.false.20
  %11 = load i32, i32* %code11, align 4
  %cmp23 = icmp eq i32 %11, 13
  br i1 %cmp23, label %if.then.26, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.22
  %12 = load i32, i32* %code11, align 4
  %cmp25 = icmp eq i32 %12, 15
  br i1 %cmp25, label %if.then.26, label %if.end.30

if.then.26:                                       ; preds = %lor.lhs.false.24, %lor.lhs.false.22, %lor.lhs.false.20, %lor.lhs.false.18, %if.then.10
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common27 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 1
  %15 = load %union.tree_node*, %union.tree_node** %type28, align 8
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  %call = call %union.tree_node* @convert(%union.tree_node* %15, %union.tree_node* %16)
  %call29 = call %struct.rtx_def* @expand_assignment(%union.tree_node* %13, %union.tree_node* %call, i32 0, i32 0)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.26, %lor.lhs.false.24
  call void @emit_queue()
  br label %if.end.49

if.else:                                          ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl31 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %initial32 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl31, i32 0, i32 12
  %18 = load %union.tree_node*, %union.tree_node** %initial32, align 8
  %tobool33 = icmp ne %union.tree_node* %18, null
  br i1 %tobool33, label %land.lhs.true, label %if.end.48

land.lhs.true:                                    ; preds = %if.else
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl34 = bitcast %union.tree_node* %19 to %struct.tree_decl*
  %initial35 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl34, i32 0, i32 12
  %20 = load %union.tree_node*, %union.tree_node** %initial35, align 8
  %common36 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %code37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2
  %bf.load38 = load i32, i32* %code37, align 8
  %bf.clear39 = and i32 %bf.load38, 255
  %cmp40 = icmp ne i32 %bf.clear39, 2
  br i1 %cmp40, label %if.then.41, label %if.end.48

if.then.41:                                       ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl42 = bitcast %union.tree_node* %21 to %struct.tree_decl*
  %filename = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl42, i32 0, i32 1
  %22 = load i8*, i8** %filename, align 8
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl43 = bitcast %union.tree_node* %23 to %struct.tree_decl*
  %linenum = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl43, i32 0, i32 2
  %24 = load i32, i32* %linenum, align 4
  %call44 = call %struct.rtx_def* @emit_line_note(i8* %22, i32 %24)
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl45 = bitcast %union.tree_node* %26 to %struct.tree_decl*
  %initial46 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl45, i32 0, i32 12
  %27 = load %union.tree_node*, %union.tree_node** %initial46, align 8
  %call47 = call %struct.rtx_def* @expand_assignment(%union.tree_node* %25, %union.tree_node* %27, i32 0, i32 0)
  call void @emit_queue()
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.41, %land.lhs.true, %if.else
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.end.30
  %28 = load i32, i32* %was_used, align 4
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common50 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %used_flag51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2
  %bf.load52 = load i32, i32* %used_flag51, align 8
  %bf.value = and i32 %28, 1
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear53 = and i32 %bf.load52, -65537
  %bf.set = or i32 %bf.clear53, %bf.shl
  store i32 %bf.set, i32* %used_flag51, align 8
  call void @preserve_temp_slots(%struct.rtx_def* null)
  call void @free_temp_slots()
  br label %return

return:                                           ; preds = %if.end.49, %if.then
  ret void
}

declare %struct.rtx_def* @expand_assignment(%union.tree_node*, %union.tree_node*, i32, i32) #2

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #2

declare %struct.rtx_def* @emit_line_note(i8*, i32) #2

; Function Attrs: nounwind uwtable
define i32 @expand_decl_cleanup(%union.tree_node* %decl, %union.tree_node* %cleanup) #0 {
entry:
  %retval = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %cleanup.addr = alloca %union.tree_node*, align 8
  %thisblock = alloca %struct.nesting*, align 8
  %t = alloca %union.tree_node*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %cleanups = alloca %union.tree_node**, align 8
  %cond_context = alloca i32, align 4
  %flag = alloca %struct.rtx_def*, align 8
  %set_flag_0 = alloca %struct.rtx_def*, align 8
  %cond = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %union.tree_node* %cleanup, %union.tree_node** %cleanup.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %cmp = icmp eq %struct.function* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1
  %2 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %2, i32 0, i32 0
  %3 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %cmp1 = icmp eq %struct.nesting* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt2, align 8
  %x_block_stack3 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 0
  %6 = load %struct.nesting*, %struct.nesting** %x_block_stack3, align 8
  store %struct.nesting* %6, %struct.nesting** %thisblock, align 8
  %7 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %cmp4 = icmp ne %union.tree_node* %7, null
  br i1 %cmp4, label %if.then.5, label %if.end.65

if.then.5:                                        ; preds = %if.end
  %8 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %8, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %cleanups6 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 4
  store %union.tree_node** %cleanups6, %union.tree_node*** %cleanups, align 8
  %call = call i32 @conditional_context()
  store i32 %call, i32* %cond_context, align 4
  %9 = load i32, i32* %cond_context, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then.7, label %if.end.26

if.then.7:                                        ; preds = %if.then.5
  %10 = load i32, i32* @word_mode, align 4
  %call8 = call %struct.rtx_def* @gen_reg_rtx(i32 %10)
  store %struct.rtx_def* %call8, %struct.rtx_def** %flag, align 8
  call void @start_sequence()
  %11 = load %struct.rtx_def*, %struct.rtx_def** %flag, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call9 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %12)
  %call10 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call10, %struct.rtx_def** %set_flag_0, align 8
  call void @end_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %set_flag_0, align 8
  %14 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data11 = getelementptr inbounds %struct.nesting, %struct.nesting* %14, i32 0, i32 4
  %block12 = bitcast %union.anon.3* %data11 to %struct.anon.6*
  %last_unconditional_cleanup = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block12, i32 0, i32 11
  %15 = load %struct.rtx_def*, %struct.rtx_def** %last_unconditional_cleanup, align 8
  %call13 = call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %13, %struct.rtx_def* %15)
  %16 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data14 = getelementptr inbounds %struct.nesting, %struct.nesting* %16, i32 0, i32 4
  %block15 = bitcast %union.anon.3* %data14 to %struct.anon.6*
  %last_unconditional_cleanup16 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block15, i32 0, i32 11
  store %struct.rtx_def* %call13, %struct.rtx_def** %last_unconditional_cleanup16, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %flag, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 65), align 8
  %call17 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %17, %struct.rtx_def* %18)
  %19 = load i32, i32* @word_mode, align 4
  %call18 = call %union.tree_node* @type_for_mode(i32 %19, i32 1)
  %call19 = call %union.tree_node* @build_decl(i32 34, %union.tree_node* null, %union.tree_node* %call18)
  store %union.tree_node* %call19, %union.tree_node** %cond, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %flag, align 8
  %21 = load %union.tree_node*, %union.tree_node** %cond, align 8
  %decl20 = bitcast %union.tree_node* %21 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl20, i32 0, i32 17
  store %struct.rtx_def* %20, %struct.rtx_def** %rtl, align 8
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %23 = load %union.tree_node*, %union.tree_node** %cond, align 8
  %call21 = call %union.tree_node* @truthvalue_conversion(%union.tree_node* %23)
  %24 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  %call22 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 51, %union.tree_node* %22, %union.tree_node* %call21, %union.tree_node* %24, %union.tree_node* %25)
  store %union.tree_node* %call22, %union.tree_node** %cleanup.addr, align 8
  %26 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %call23 = call %union.tree_node* @fold(%union.tree_node* %26)
  store %union.tree_node* %call23, %union.tree_node** %cleanup.addr, align 8
  %27 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data24 = getelementptr inbounds %struct.nesting, %struct.nesting* %27, i32 0, i32 4
  %block25 = bitcast %union.anon.3* %data24 to %struct.anon.6*
  %cleanup_ptr = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block25, i32 0, i32 12
  %28 = load %union.tree_node**, %union.tree_node*** %cleanup_ptr, align 8
  store %union.tree_node** %28, %union.tree_node*** %cleanups, align 8
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.7, %if.then.5
  %29 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %call27 = call %union.tree_node* @unsave_expr(%union.tree_node* %29)
  store %union.tree_node* %call27, %union.tree_node** %cleanup.addr, align 8
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %31 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %32 = load %union.tree_node**, %union.tree_node*** %cleanups, align 8
  %33 = load %union.tree_node*, %union.tree_node** %32, align 8
  %call28 = call %union.tree_node* @tree_cons(%union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %33)
  %34 = load %union.tree_node**, %union.tree_node*** %cleanups, align 8
  store %union.tree_node* %call28, %union.tree_node** %34, align 8
  store %union.tree_node* %call28, %union.tree_node** %t, align 8
  %35 = load i32, i32* %cond_context, align 4
  %tobool29 = icmp ne i32 %35, 0
  br i1 %tobool29, label %if.end.32, label %if.then.30

if.then.30:                                       ; preds = %if.end.26
  %36 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %37 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt31 = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 1
  %38 = load %struct.stmt_status*, %struct.stmt_status** %stmt31, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %38, i32 0, i32 1
  store %struct.nesting* %36, %struct.nesting** %x_stack_block_stack, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.30, %if.end.26
  %39 = load i32, i32* %cond_context, align 4
  %tobool33 = icmp ne i32 %39, 0
  br i1 %tobool33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end.32
  call void @start_sequence()
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.end.32
  %40 = load i32, i32* @using_eh_for_cleanups_p, align 4
  %tobool36 = icmp ne i32 %40, 0
  br i1 %tobool36, label %if.else, label %if.then.37

if.then.37:                                       ; preds = %if.end.35
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common = bitcast %union.tree_node* %41 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %addressable_flag, align 8
  %bf.clear = and i32 %bf.load, -1025
  %bf.set = or i32 %bf.clear, 1024
  store i32 %bf.set, i32* %addressable_flag, align 8
  br label %if.end.38

if.else:                                          ; preds = %if.end.35
  call void @expand_eh_region_start()
  br label %if.end.38

if.end.38:                                        ; preds = %if.else, %if.then.37
  %42 = load i32, i32* %cond_context, align 4
  %tobool39 = icmp ne i32 %42, 0
  br i1 %tobool39, label %if.then.40, label %if.else.52

if.then.40:                                       ; preds = %if.end.38
  %call41 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call41, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %43 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %tobool42 = icmp ne %struct.rtx_def* %43, null
  br i1 %tobool42, label %if.then.43, label %if.end.51

if.then.43:                                       ; preds = %if.then.40
  %44 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %45 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data44 = getelementptr inbounds %struct.nesting, %struct.nesting* %45, i32 0, i32 4
  %block45 = bitcast %union.anon.3* %data44 to %struct.anon.6*
  %last_unconditional_cleanup46 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block45, i32 0, i32 11
  %46 = load %struct.rtx_def*, %struct.rtx_def** %last_unconditional_cleanup46, align 8
  %call47 = call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %44, %struct.rtx_def* %46)
  %47 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data48 = getelementptr inbounds %struct.nesting, %struct.nesting* %47, i32 0, i32 4
  %block49 = bitcast %union.anon.3* %data48 to %struct.anon.6*
  %last_unconditional_cleanup50 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block49, i32 0, i32 11
  store %struct.rtx_def* %call47, %struct.rtx_def** %last_unconditional_cleanup50, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.43, %if.then.40
  br label %if.end.64

if.else.52:                                       ; preds = %if.end.38
  %call53 = call %struct.rtx_def* @get_last_insn()
  %48 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data54 = getelementptr inbounds %struct.nesting, %struct.nesting* %48, i32 0, i32 4
  %block55 = bitcast %union.anon.3* %data54 to %struct.anon.6*
  %last_unconditional_cleanup56 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block55, i32 0, i32 11
  store %struct.rtx_def* %call53, %struct.rtx_def** %last_unconditional_cleanup56, align 8
  %call57 = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  %49 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data58 = getelementptr inbounds %struct.nesting, %struct.nesting* %49, i32 0, i32 4
  %block59 = bitcast %union.anon.3* %data58 to %struct.anon.6*
  %cleanups60 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block59, i32 0, i32 4
  %50 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data61 = getelementptr inbounds %struct.nesting, %struct.nesting* %50, i32 0, i32 4
  %block62 = bitcast %union.anon.3* %data61 to %struct.anon.6*
  %cleanup_ptr63 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block62, i32 0, i32 12
  store %union.tree_node** %cleanups60, %union.tree_node*** %cleanup_ptr63, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.52, %if.end.51
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.65, %if.then
  %51 = load i32, i32* %retval
  ret i32 %51
}

declare %struct.rtx_def* @emit_insns_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare %union.tree_node* @build_decl(i32, %union.tree_node*, %union.tree_node*) #2

declare %union.tree_node* @type_for_mode(i32, i32) #2

declare %union.tree_node* @truthvalue_conversion(%union.tree_node*) #2

declare %union.tree_node* @fold(%union.tree_node*) #2

declare %union.tree_node* @unsave_expr(%union.tree_node*) #2

declare void @expand_eh_region_start() #2

; Function Attrs: nounwind uwtable
define i32 @expand_decl_cleanup_eh(%union.tree_node* %decl, %union.tree_node* %cleanup, i32 %eh_only) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %cleanup.addr = alloca %union.tree_node*, align 8
  %eh_only.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %node = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %union.tree_node* %cleanup, %union.tree_node** %cleanup.addr, align 8
  store i32 %eh_only, i32* %eh_only.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %call = call i32 @expand_decl_cleanup(%union.tree_node* %0, %union.tree_node* %1)
  store i32 %call, i32* %ret, align 4
  %2 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %ret, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 0
  %6 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 4
  %7 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  store %union.tree_node* %7, %union.tree_node** %node, align 8
  %8 = load i32, i32* %eh_only.addr, align 4
  %9 = load %union.tree_node*, %union.tree_node** %node, align 8
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %static_flag, align 8
  %bf.value = and i32 %8, 1
  %bf.shl = shl i32 %bf.value, 18
  %bf.clear = and i32 %bf.load, -262145
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %static_flag, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load i32, i32* %ret, align 4
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define void @expand_anon_union_decl(%union.tree_node* %decl, %union.tree_node* %cleanup, %union.tree_node* %decl_elts) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %cleanup.addr = alloca %union.tree_node*, align 8
  %decl_elts.addr = alloca %union.tree_node*, align 8
  %thisblock = alloca %struct.nesting*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %decl_elt = alloca %union.tree_node*, align 8
  %cleanup_elt = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %union.tree_node* %cleanup, %union.tree_node** %cleanup.addr, align 8
  store %union.tree_node* %decl_elts, %union.tree_node** %decl_elts.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %cmp = icmp eq %struct.function* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1
  %2 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %2, i32 0, i32 0
  %3 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.nesting* [ null, %cond.true ], [ %3, %cond.false ]
  store %struct.nesting* %cond, %struct.nesting** %thisblock, align 8
  %4 = load %union.tree_node*, %union.tree_node** %decl_elts.addr, align 8
  store %union.tree_node* %4, %union.tree_node** %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool = icmp ne %union.tree_node* %5, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list = bitcast %union.tree_node* %6 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %7 = load %union.tree_node*, %union.tree_node** %value, align 8
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %addressable_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 10
  %bf.clear = and i32 %bf.lshr, 1
  %tobool1 = icmp ne i32 %bf.clear, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common2 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %addressable_flag3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load4 = load i32, i32* %addressable_flag3, align 8
  %bf.clear5 = and i32 %bf.load4, -1025
  %bf.set = or i32 %bf.clear5, 1024
  store i32 %bf.set, i32* %addressable_flag3, align 8
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common6 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 0
  %10 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %10, %union.tree_node** %t, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @expand_decl(%union.tree_node* %11)
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %13 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %call = call i32 @expand_decl_cleanup(%union.tree_node* %12, %union.tree_node* %13)
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl7 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool8 = icmp ne %struct.rtx_def* %15, null
  br i1 %tobool8, label %cond.true.9, label %cond.false.12

cond.true.9:                                      ; preds = %for.end
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl10 = bitcast %union.tree_node* %16 to %struct.tree_decl*
  %rtl11 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtl11, align 8
  br label %cond.end.15

cond.false.12:                                    ; preds = %for.end
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %18, i8* null)
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl13 = bitcast %union.tree_node* %19 to %struct.tree_decl*
  %rtl14 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl13, i32 0, i32 17
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl14, align 8
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.false.12, %cond.true.9
  %cond16 = phi %struct.rtx_def* [ %17, %cond.true.9 ], [ %20, %cond.false.12 ]
  store %struct.rtx_def* %cond16, %struct.rtx_def** %x, align 8
  %21 = load %union.tree_node*, %union.tree_node** %decl_elts.addr, align 8
  store %union.tree_node* %21, %union.tree_node** %t, align 8
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.120, %cond.end.15
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool18 = icmp ne %union.tree_node* %22, null
  br i1 %tobool18, label %for.body.19, label %for.end.123

for.body.19:                                      ; preds = %for.cond.17
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list20 = bitcast %union.tree_node* %23 to %struct.tree_list*
  %value21 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list20, i32 0, i32 2
  %24 = load %union.tree_node*, %union.tree_node** %value21, align 8
  store %union.tree_node* %24, %union.tree_node** %decl_elt, align 8
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list22 = bitcast %union.tree_node* %25 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list22, i32 0, i32 1
  %26 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  store %union.tree_node* %26, %union.tree_node** %cleanup_elt, align 8
  %27 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %common23 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 1
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type24 = bitcast %union.tree_node* %28 to %struct.tree_type*
  %mode25 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 6
  %bf.load26 = load i32, i32* %mode25, align 4
  %bf.lshr27 = lshr i32 %bf.load26, 9
  %bf.clear28 = and i32 %bf.lshr27, 127
  store i32 %bf.clear28, i32* %mode, align 4
  %29 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %common29 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2
  %bf.load30 = load i32, i32* %used_flag, align 8
  %bf.lshr31 = lshr i32 %bf.load30, 16
  %bf.clear32 = and i32 %bf.lshr31, 1
  %tobool33 = icmp ne i32 %bf.clear32, 0
  br i1 %tobool33, label %if.then.34, label %if.end.40

if.then.34:                                       ; preds = %for.body.19
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common35 = bitcast %union.tree_node* %30 to %struct.tree_common*
  %used_flag36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2
  %bf.load37 = load i32, i32* %used_flag36, align 8
  %bf.clear38 = and i32 %bf.load37, -65537
  %bf.set39 = or i32 %bf.clear38, 65536
  store i32 %bf.set39, i32* %used_flag36, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.34, %for.body.19
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl41 = bitcast %union.tree_node* %31 to %struct.tree_decl*
  %u1 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl41, i32 0, i32 6
  %a = bitcast %union.anon* %u1 to %struct.anon.0*
  %32 = bitcast %struct.anon.0* %a to i32*
  %bf.load42 = load i32, i32* %32, align 4
  %bf.clear43 = and i32 %bf.load42, 16777215
  %33 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %decl44 = bitcast %union.tree_node* %33 to %struct.tree_decl*
  %u145 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl44, i32 0, i32 6
  %a46 = bitcast %union.anon* %u145 to %struct.anon.0*
  %34 = bitcast %struct.anon.0* %a46 to i32*
  %bf.load47 = load i32, i32* %34, align 4
  %bf.value = and i32 %bf.clear43, 16777215
  %bf.clear48 = and i32 %bf.load47, -16777216
  %bf.set49 = or i32 %bf.clear48, %bf.value
  store i32 %bf.set49, i32* %34, align 4
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl50 = bitcast %union.tree_node* %35 to %struct.tree_decl*
  %user_align = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl50, i32 0, i32 5
  %36 = bitcast i48* %user_align to i64*
  %bf.load51 = load i64, i64* %36, align 8
  %bf.lshr52 = lshr i64 %bf.load51, 35
  %bf.clear53 = and i64 %bf.lshr52, 1
  %bf.cast = trunc i64 %bf.clear53 to i32
  %37 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %decl54 = bitcast %union.tree_node* %37 to %struct.tree_decl*
  %user_align55 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl54, i32 0, i32 5
  %38 = bitcast i48* %user_align55 to i64*
  %39 = zext i32 %bf.cast to i64
  %bf.load56 = load i64, i64* %38, align 8
  %bf.value57 = and i64 %39, 1
  %bf.shl = shl i64 %bf.value57, 35
  %bf.clear58 = and i64 %bf.load56, -34359738369
  %bf.set59 = or i64 %bf.clear58, %bf.shl
  store i64 %bf.set59, i64* %38, align 8
  %bf.result.cast = trunc i64 %bf.value57 to i32
  %40 = load i32, i32* %mode, align 4
  %cmp60 = icmp eq i32 %40, 51
  br i1 %cmp60, label %land.lhs.true, label %if.end.77

land.lhs.true:                                    ; preds = %if.end.40
  %41 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl61 = bitcast %union.tree_node* %41 to %struct.tree_decl*
  %mode62 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl61, i32 0, i32 5
  %42 = bitcast i48* %mode62 to i64*
  %bf.load63 = load i64, i64* %42, align 8
  %bf.clear64 = and i64 %bf.load63, 255
  %bf.cast65 = trunc i64 %bf.clear64 to i32
  %cmp66 = icmp ne i32 %bf.cast65, 51
  br i1 %cmp66, label %if.then.67, label %if.end.77

if.then.67:                                       ; preds = %land.lhs.true
  %43 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %decl68 = bitcast %union.tree_node* %43 to %struct.tree_decl*
  %size = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl68, i32 0, i32 4
  %44 = load %union.tree_node*, %union.tree_node** %size, align 8
  %call69 = call i32 @mode_for_size_tree(%union.tree_node* %44, i32 1, i32 1)
  store i32 %call69, i32* %mode, align 4
  %45 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %decl70 = bitcast %union.tree_node* %45 to %struct.tree_decl*
  %mode71 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl70, i32 0, i32 5
  %46 = bitcast i48* %mode71 to i64*
  %47 = zext i32 %call69 to i64
  %bf.load72 = load i64, i64* %46, align 8
  %bf.value73 = and i64 %47, 255
  %bf.clear74 = and i64 %bf.load72, -256
  %bf.set75 = or i64 %bf.clear74, %bf.value73
  store i64 %bf.set75, i64* %46, align 8
  %bf.result.cast76 = trunc i64 %bf.value73 to i32
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.67, %land.lhs.true, %if.end.40
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load78 = load i32, i32* %49, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  %cmp80 = icmp eq i32 %bf.clear79, 66
  br i1 %cmp80, label %if.then.81, label %if.else.93

if.then.81:                                       ; preds = %if.end.77
  %50 = load i32, i32* %mode, align 4
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load82 = load i32, i32* %52, align 8
  %bf.lshr83 = lshr i32 %bf.load82, 16
  %bf.clear84 = and i32 %bf.lshr83, 255
  %cmp85 = icmp eq i32 %50, %bf.clear84
  br i1 %cmp85, label %if.then.86, label %if.else

if.then.86:                                       ; preds = %if.then.81
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %54 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %decl87 = bitcast %union.tree_node* %54 to %struct.tree_decl*
  %rtl88 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl87, i32 0, i32 17
  store %struct.rtx_def* %53, %struct.rtx_def** %rtl88, align 8
  br label %if.end.92

if.else:                                          ; preds = %if.then.81
  %55 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %56 = load i32, i32* %mode, align 4
  %call89 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %55, i32 %56, i64 0, i32 0, i32 1)
  %57 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %decl90 = bitcast %union.tree_node* %57 to %struct.tree_decl*
  %rtl91 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl90, i32 0, i32 17
  store %struct.rtx_def* %call89, %struct.rtx_def** %rtl91, align 8
  br label %if.end.92

if.end.92:                                        ; preds = %if.else, %if.then.86
  br label %if.end.112

if.else.93:                                       ; preds = %if.end.77
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load94 = load i32, i32* %59, align 8
  %bf.clear95 = and i32 %bf.load94, 65535
  %cmp96 = icmp eq i32 %bf.clear95, 61
  br i1 %cmp96, label %if.then.97, label %if.else.110

if.then.97:                                       ; preds = %if.else.93
  %60 = load i32, i32* %mode, align 4
  %61 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load98 = load i32, i32* %62, align 8
  %bf.lshr99 = lshr i32 %bf.load98, 16
  %bf.clear100 = and i32 %bf.lshr99, 255
  %cmp101 = icmp eq i32 %60, %bf.clear100
  br i1 %cmp101, label %if.then.102, label %if.else.105

if.then.102:                                      ; preds = %if.then.97
  %63 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %64 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %decl103 = bitcast %union.tree_node* %64 to %struct.tree_decl*
  %rtl104 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl103, i32 0, i32 17
  store %struct.rtx_def* %63, %struct.rtx_def** %rtl104, align 8
  br label %if.end.109

if.else.105:                                      ; preds = %if.then.97
  %65 = load i32, i32* %mode, align 4
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %call106 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %65, %struct.rtx_def* %66)
  %67 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %decl107 = bitcast %union.tree_node* %67 to %struct.tree_decl*
  %rtl108 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl107, i32 0, i32 17
  store %struct.rtx_def* %call106, %struct.rtx_def** %rtl108, align 8
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.105, %if.then.102
  br label %if.end.111

if.else.110:                                      ; preds = %if.else.93
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 4259, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.expand_anon_union_decl, i32 0, i32 0)) #6
  unreachable

if.end.111:                                       ; preds = %if.end.109
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.end.92
  %68 = load %union.tree_node*, %union.tree_node** %cleanup.addr, align 8
  %cmp113 = icmp ne %union.tree_node* %68, null
  br i1 %cmp113, label %if.then.114, label %if.end.119

if.then.114:                                      ; preds = %if.end.112
  %69 = load %union.tree_node*, %union.tree_node** %decl_elt, align 8
  %70 = load %union.tree_node*, %union.tree_node** %cleanup_elt, align 8
  %71 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %71, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 4
  %72 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  %call115 = call %union.tree_node* @tree_cons(%union.tree_node* %69, %union.tree_node* %70, %union.tree_node* %72)
  %73 = load %struct.nesting*, %struct.nesting** %thisblock, align 8
  %data116 = getelementptr inbounds %struct.nesting, %struct.nesting* %73, i32 0, i32 4
  %block117 = bitcast %union.anon.3* %data116 to %struct.anon.6*
  %cleanups118 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block117, i32 0, i32 4
  store %union.tree_node* %call115, %union.tree_node** %cleanups118, align 8
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.114, %if.end.112
  br label %for.inc.120

for.inc.120:                                      ; preds = %if.end.119
  %74 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common121 = bitcast %union.tree_node* %74 to %struct.tree_common*
  %chain122 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common121, i32 0, i32 0
  %75 = load %union.tree_node*, %union.tree_node** %chain122, align 8
  store %union.tree_node* %75, %union.tree_node** %t, align 8
  br label %for.cond.17

for.end.123:                                      ; preds = %for.cond.17
  ret void
}

declare i32 @mode_for_size_tree(%union.tree_node*, i32, i32) #2

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #2

declare %struct.rtx_def* @gen_lowpart_SUBREG(i32, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @move_cleanups_up() #0 {
entry:
  %block = alloca %struct.nesting*, align 8
  %outer = alloca %struct.nesting*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 0
  %2 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  store %struct.nesting* %2, %struct.nesting** %block, align 8
  %3 = load %struct.nesting*, %struct.nesting** %block, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %3, i32 0, i32 1
  %4 = load %struct.nesting*, %struct.nesting** %next, align 8
  store %struct.nesting* %4, %struct.nesting** %outer, align 8
  %5 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %block1 = bitcast %union.anon.3* %data to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block1, i32 0, i32 4
  %6 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  %7 = load %struct.nesting*, %struct.nesting** %outer, align 8
  %data2 = getelementptr inbounds %struct.nesting, %struct.nesting* %7, i32 0, i32 4
  %block3 = bitcast %union.anon.3* %data2 to %struct.anon.6*
  %cleanups4 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block3, i32 0, i32 4
  %8 = load %union.tree_node*, %union.tree_node** %cleanups4, align 8
  %call = call %union.tree_node* @chainon(%union.tree_node* %6, %union.tree_node* %8)
  %9 = load %struct.nesting*, %struct.nesting** %outer, align 8
  %data5 = getelementptr inbounds %struct.nesting, %struct.nesting* %9, i32 0, i32 4
  %block6 = bitcast %union.anon.3* %data5 to %struct.anon.6*
  %cleanups7 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block6, i32 0, i32 4
  store %union.tree_node* %call, %union.tree_node** %cleanups7, align 8
  %10 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data8 = getelementptr inbounds %struct.nesting, %struct.nesting* %10, i32 0, i32 4
  %block9 = bitcast %union.anon.3* %data8 to %struct.anon.6*
  %cleanups10 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block9, i32 0, i32 4
  store %union.tree_node* null, %union.tree_node** %cleanups10, align 8
  ret void
}

declare %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @last_cleanup_this_contour() #0 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 0
  %2 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %cmp = icmp eq %struct.nesting* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_block_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 0
  %5 = load %struct.nesting*, %struct.nesting** %x_block_stack2, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %block = bitcast %union.anon.3* %data to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block, i32 0, i32 4
  %6 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  store %union.tree_node* %6, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %7
}

; Function Attrs: nounwind uwtable
define i32 @any_pending_cleanups(i32 %this_contour) #0 {
entry:
  %retval = alloca i32, align 4
  %this_contour.addr = alloca i32, align 4
  %block = alloca %struct.nesting*, align 8
  store i32 %this_contour, i32* %this_contour.addr, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %cmp = icmp eq %struct.function* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1
  %2 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %cmp1 = icmp eq %struct.stmt_status* %2, null
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt3 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt3, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 0
  %5 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %cmp4 = icmp eq %struct.nesting* %5, null
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.2
  %6 = load i32, i32* %this_contour.addr, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt5 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 1
  %8 = load %struct.stmt_status*, %struct.stmt_status** %stmt5, align 8
  %x_block_stack6 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %8, i32 0, i32 0
  %9 = load %struct.nesting*, %struct.nesting** %x_block_stack6, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %9, i32 0, i32 4
  %block7 = bitcast %union.anon.3* %data to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block7, i32 0, i32 4
  %10 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  %cmp8 = icmp ne %union.tree_node* %10, null
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %land.lhs.true, %if.end
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt11 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1
  %12 = load %struct.stmt_status*, %struct.stmt_status** %stmt11, align 8
  %x_block_stack12 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %12, i32 0, i32 0
  %13 = load %struct.nesting*, %struct.nesting** %x_block_stack12, align 8
  %data13 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %block14 = bitcast %union.anon.3* %data13 to %struct.anon.6*
  %cleanups15 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block14, i32 0, i32 4
  %14 = load %union.tree_node*, %union.tree_node** %cleanups15, align 8
  %cmp16 = icmp eq %union.tree_node* %14, null
  br i1 %cmp16, label %land.lhs.true.17, label %if.end.24

land.lhs.true.17:                                 ; preds = %if.end.10
  %15 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt18 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1
  %16 = load %struct.stmt_status*, %struct.stmt_status** %stmt18, align 8
  %x_block_stack19 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %16, i32 0, i32 0
  %17 = load %struct.nesting*, %struct.nesting** %x_block_stack19, align 8
  %data20 = getelementptr inbounds %struct.nesting, %struct.nesting* %17, i32 0, i32 4
  %block21 = bitcast %union.anon.3* %data20 to %struct.anon.6*
  %outer_cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block21, i32 0, i32 5
  %18 = load %union.tree_node*, %union.tree_node** %outer_cleanups, align 8
  %cmp22 = icmp eq %union.tree_node* %18, null
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %land.lhs.true.17
  store i32 0, i32* %retval
  br label %return

if.end.24:                                        ; preds = %land.lhs.true.17, %if.end.10
  %19 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt25 = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 1
  %20 = load %struct.stmt_status*, %struct.stmt_status** %stmt25, align 8
  %x_block_stack26 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %20, i32 0, i32 0
  %21 = load %struct.nesting*, %struct.nesting** %x_block_stack26, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %21, i32 0, i32 1
  %22 = load %struct.nesting*, %struct.nesting** %next, align 8
  store %struct.nesting* %22, %struct.nesting** %block, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.24
  %23 = load %struct.nesting*, %struct.nesting** %block, align 8
  %tobool27 = icmp ne %struct.nesting* %23, null
  br i1 %tobool27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data28 = getelementptr inbounds %struct.nesting, %struct.nesting* %24, i32 0, i32 4
  %block29 = bitcast %union.anon.3* %data28 to %struct.anon.6*
  %cleanups30 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block29, i32 0, i32 4
  %25 = load %union.tree_node*, %union.tree_node** %cleanups30, align 8
  %cmp31 = icmp ne %union.tree_node* %25, null
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.33
  %26 = load %struct.nesting*, %struct.nesting** %block, align 8
  %next34 = getelementptr inbounds %struct.nesting, %struct.nesting* %26, i32 0, i32 1
  %27 = load %struct.nesting*, %struct.nesting** %next34, align 8
  store %struct.nesting* %27, %struct.nesting** %block, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.32, %if.then.23, %if.then.9, %if.then
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define void @expand_start_case(i32 %exit_flag, %union.tree_node* %expr, %union.tree_node* %type, i8* %printname) #0 {
entry:
  %exit_flag.addr = alloca i32, align 4
  %expr.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %printname.addr = alloca i8*, align 8
  %thiscase = alloca %struct.nesting*, align 8
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp35 = alloca i8*, align 8
  store i32 %exit_flag, i32* %exit_flag.addr, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i8* %printname, i8** %printname.addr, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__h, align 8
  %0 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %0, %struct.obstack** %__o, align 8
  store i32 120, i32* %__len, align 4
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4
  %2 = load i8*, i8** %chunk_limit, align 8
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3
  %4 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %5 = load i32, i32* %__len, align 4
  %conv = sext i32 %5 to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %7 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %__len, align 4
  %9 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free2 = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 3
  %10 = load i8*, i8** %next_free2, align 8
  %idx.ext = sext i32 %8 to i64
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr, i8** %next_free2, align 8
  %11 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %11, %struct.obstack** %__o1, align 8
  %12 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 2
  %13 = load i8*, i8** %object_base, align 8
  store i8* %13, i8** %value, align 8
  %14 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3
  %15 = load i8*, i8** %next_free5, align 8
  %16 = load i8*, i8** %value, align 8
  %cmp6 = icmp eq i8* %15, %16
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end
  %18 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free10 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3
  %19 = load i8*, i8** %next_free10, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %19 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast11, 0
  %20 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 6
  %21 = load i32, i32* %alignment_mask, align 4
  %conv13 = sext i32 %21 to i64
  %add = add nsw i64 %sub.ptr.sub12, %conv13
  %22 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask14 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 6
  %23 = load i32, i32* %alignment_mask14, align 4
  %neg = xor i32 %23, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8, i8* null, i64 %and
  %24 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 3
  store i8* %add.ptr16, i8** %next_free17, align 8
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free18 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 3
  %26 = load i8*, i8** %next_free18, align 8
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 1
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %29 = bitcast %struct._obstack_chunk* %28 to i8*
  %sub.ptr.lhs.cast19 = ptrtoint i8* %26 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %29 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %30 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit22 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 4
  %31 = load i8*, i8** %chunk_limit22, align 8
  %32 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk23 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk23, align 8
  %34 = bitcast %struct._obstack_chunk* %33 to i8*
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %if.end.9
  %35 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit30 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4
  %36 = load i8*, i8** %chunk_limit30, align 8
  %37 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free31 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 3
  store i8* %36, i8** %next_free31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %if.end.9
  %38 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 3
  %39 = load i8*, i8** %next_free33, align 8
  %40 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base34 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 2
  store i8* %39, i8** %object_base34, align 8
  %41 = load i8*, i8** %value, align 8
  store i8* %41, i8** %tmp35
  %42 = load i8*, i8** %tmp35
  store i8* %42, i8** %tmp
  %43 = load i8*, i8** %tmp
  %44 = bitcast i8* %43 to %struct.nesting*
  store %struct.nesting* %44, %struct.nesting** %thiscase, align 8
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 1
  %46 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %46, i32 0, i32 4
  %47 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %48 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %48, i32 0, i32 1
  store %struct.nesting* %47, %struct.nesting** %next, align 8
  %49 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt36 = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 1
  %50 = load %struct.stmt_status*, %struct.stmt_status** %stmt36, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %50, i32 0, i32 5
  %51 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  %52 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %52, i32 0, i32 0
  store %struct.nesting* %51, %struct.nesting** %all, align 8
  %53 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt37 = getelementptr inbounds %struct.function, %struct.function* %53, i32 0, i32 1
  %54 = load %struct.stmt_status*, %struct.stmt_status** %stmt37, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %54, i32 0, i32 6
  %55 = load i32, i32* %x_nesting_depth, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x_nesting_depth, align 4
  %56 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %56, i32 0, i32 2
  store i32 %inc, i32* %depth, align 4
  %57 = load i32, i32* %exit_flag.addr, align 4
  %tobool = icmp ne i32 %57, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.32
  %call = call %struct.rtx_def* @gen_label_rtx()
  br label %cond.end

cond.false:                                       ; preds = %if.end.32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %call, %cond.true ], [ null, %cond.false ]
  %58 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %58, i32 0, i32 3
  store %struct.rtx_def* %cond, %struct.rtx_def** %exit_label, align 8
  %59 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %59, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %case_list = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 1
  store %struct.case_node* null, %struct.case_node** %case_list, align 8
  %60 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8
  %61 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data38 = getelementptr inbounds %struct.nesting, %struct.nesting* %61, i32 0, i32 4
  %case_stmt39 = bitcast %union.anon.3* %data38 to %struct.anon.7*
  %index_expr = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt39, i32 0, i32 3
  store %union.tree_node* %60, %union.tree_node** %index_expr, align 8
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %63 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data40 = getelementptr inbounds %struct.nesting, %struct.nesting* %63, i32 0, i32 4
  %case_stmt41 = bitcast %union.anon.3* %data40 to %struct.anon.7*
  %nominal_type = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt41, i32 0, i32 4
  store %union.tree_node* %62, %union.tree_node** %nominal_type, align 8
  %64 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data42 = getelementptr inbounds %struct.nesting, %struct.nesting* %64, i32 0, i32 4
  %case_stmt43 = bitcast %union.anon.3* %data42 to %struct.anon.7*
  %default_label = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt43, i32 0, i32 2
  store %union.tree_node* null, %union.tree_node** %default_label, align 8
  %65 = load i8*, i8** %printname.addr, align 8
  %66 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data44 = getelementptr inbounds %struct.nesting, %struct.nesting* %66, i32 0, i32 4
  %case_stmt45 = bitcast %union.anon.3* %data44 to %struct.anon.7*
  %printname46 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt45, i32 0, i32 5
  store i8* %65, i8** %printname46, align 8
  %call47 = call i32 @force_line_numbers()
  %67 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data48 = getelementptr inbounds %struct.nesting, %struct.nesting* %67, i32 0, i32 4
  %case_stmt49 = bitcast %union.anon.3* %data48 to %struct.anon.7*
  %line_number_status = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt49, i32 0, i32 6
  store i32 %call47, i32* %line_number_status, align 4
  %68 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %69 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt50 = getelementptr inbounds %struct.function, %struct.function* %69, i32 0, i32 1
  %70 = load %struct.stmt_status*, %struct.stmt_status** %stmt50, align 8
  %x_case_stack51 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %70, i32 0, i32 4
  store %struct.nesting* %68, %struct.nesting** %x_case_stack51, align 8
  %71 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %72 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt52 = getelementptr inbounds %struct.function, %struct.function* %72, i32 0, i32 1
  %73 = load %struct.stmt_status*, %struct.stmt_status** %stmt52, align 8
  %x_nesting_stack53 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %73, i32 0, i32 5
  store %struct.nesting* %71, %struct.nesting** %x_nesting_stack53, align 8
  call void @do_pending_stack_adjust()
  %call54 = call %struct.rtx_def* @get_last_insn()
  %74 = bitcast %struct.rtx_def* %call54 to i32*
  %bf.load55 = load i32, i32* %74, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp ne i32 %bf.clear56, 37
  br i1 %cmp57, label %if.then.59, label %if.end.61

if.then.59:                                       ; preds = %cond.end
  %call60 = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.59, %cond.end
  %call62 = call %struct.rtx_def* @get_last_insn()
  %75 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data63 = getelementptr inbounds %struct.nesting, %struct.nesting* %75, i32 0, i32 4
  %case_stmt64 = bitcast %union.anon.3* %data63 to %struct.anon.7*
  %start = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt64, i32 0, i32 0
  store %struct.rtx_def* %call62, %struct.rtx_def** %start, align 8
  call void @start_cleanup_deferral()
  ret void
}

declare i32 @force_line_numbers() #2

; Function Attrs: nounwind uwtable
define void @expand_start_case_dummy() #0 {
entry:
  %thiscase = alloca %struct.nesting*, align 8
  %__h = alloca %struct.obstack*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__len = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %__o1 = alloca %struct.obstack*, align 8
  %value = alloca i8*, align 8
  %tmp35 = alloca i8*, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__h, align 8
  %0 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %0, %struct.obstack** %__o, align 8
  store i32 120, i32* %__len, align 4
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 4
  %2 = load i8*, i8** %chunk_limit, align 8
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3
  %4 = load i8*, i8** %next_free, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %5 = load i32, i32* %__len, align 4
  %conv = sext i32 %5 to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %7 = load i32, i32* %__len, align 4
  call void @_obstack_newchunk(%struct.obstack* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %__len, align 4
  %9 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free2 = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 3
  %10 = load i8*, i8** %next_free2, align 8
  %idx.ext = sext i32 %8 to i64
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr, i8** %next_free2, align 8
  %11 = load %struct.obstack*, %struct.obstack** %__h, align 8
  store %struct.obstack* %11, %struct.obstack** %__o1, align 8
  %12 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 2
  %13 = load i8*, i8** %object_base, align 8
  store i8* %13, i8** %value, align 8
  %14 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3
  %15 = load i8*, i8** %next_free5, align 8
  %16 = load i8*, i8** %value, align 8
  %cmp6 = icmp eq i8* %15, %16
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 10
  %bf.load = load i8, i8* %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %maybe_empty_object, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end
  %18 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free10 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3
  %19 = load i8*, i8** %next_free10, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %19 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast11, 0
  %20 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 6
  %21 = load i32, i32* %alignment_mask, align 4
  %conv13 = sext i32 %21 to i64
  %add = add nsw i64 %sub.ptr.sub12, %conv13
  %22 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %alignment_mask14 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 6
  %23 = load i32, i32* %alignment_mask14, align 4
  %neg = xor i32 %23, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8, i8* null, i64 %and
  %24 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free17 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 3
  store i8* %add.ptr16, i8** %next_free17, align 8
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free18 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 3
  %26 = load i8*, i8** %next_free18, align 8
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 1
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %29 = bitcast %struct._obstack_chunk* %28 to i8*
  %sub.ptr.lhs.cast19 = ptrtoint i8* %26 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %29 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %30 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit22 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 4
  %31 = load i8*, i8** %chunk_limit22, align 8
  %32 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk23 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 1
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk23, align 8
  %34 = bitcast %struct._obstack_chunk* %33 to i8*
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %34 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %if.end.9
  %35 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %chunk_limit30 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4
  %36 = load i8*, i8** %chunk_limit30, align 8
  %37 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free31 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 3
  store i8* %36, i8** %next_free31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %if.end.9
  %38 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 3
  %39 = load i8*, i8** %next_free33, align 8
  %40 = load %struct.obstack*, %struct.obstack** %__o1, align 8
  %object_base34 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 2
  store i8* %39, i8** %object_base34, align 8
  %41 = load i8*, i8** %value, align 8
  store i8* %41, i8** %tmp35
  %42 = load i8*, i8** %tmp35
  store i8* %42, i8** %tmp
  %43 = load i8*, i8** %tmp
  %44 = bitcast i8* %43 to %struct.nesting*
  store %struct.nesting* %44, %struct.nesting** %thiscase, align 8
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 1
  %46 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %46, i32 0, i32 4
  %47 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %48 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %48, i32 0, i32 1
  store %struct.nesting* %47, %struct.nesting** %next, align 8
  %49 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt36 = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 1
  %50 = load %struct.stmt_status*, %struct.stmt_status** %stmt36, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %50, i32 0, i32 5
  %51 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  %52 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %52, i32 0, i32 0
  store %struct.nesting* %51, %struct.nesting** %all, align 8
  %53 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt37 = getelementptr inbounds %struct.function, %struct.function* %53, i32 0, i32 1
  %54 = load %struct.stmt_status*, %struct.stmt_status** %stmt37, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %54, i32 0, i32 6
  %55 = load i32, i32* %x_nesting_depth, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x_nesting_depth, align 4
  %56 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %56, i32 0, i32 2
  store i32 %inc, i32* %depth, align 4
  %57 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %57, i32 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %exit_label, align 8
  %58 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %58, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %case_list = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 1
  store %struct.case_node* null, %struct.case_node** %case_list, align 8
  %59 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data38 = getelementptr inbounds %struct.nesting, %struct.nesting* %59, i32 0, i32 4
  %case_stmt39 = bitcast %union.anon.3* %data38 to %struct.anon.7*
  %start = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt39, i32 0, i32 0
  store %struct.rtx_def* null, %struct.rtx_def** %start, align 8
  %60 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data40 = getelementptr inbounds %struct.nesting, %struct.nesting* %60, i32 0, i32 4
  %case_stmt41 = bitcast %union.anon.3* %data40 to %struct.anon.7*
  %nominal_type = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt41, i32 0, i32 4
  store %union.tree_node* null, %union.tree_node** %nominal_type, align 8
  %61 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data42 = getelementptr inbounds %struct.nesting, %struct.nesting* %61, i32 0, i32 4
  %case_stmt43 = bitcast %union.anon.3* %data42 to %struct.anon.7*
  %default_label = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt43, i32 0, i32 2
  store %union.tree_node* null, %union.tree_node** %default_label, align 8
  %62 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %63 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt44 = getelementptr inbounds %struct.function, %struct.function* %63, i32 0, i32 1
  %64 = load %struct.stmt_status*, %struct.stmt_status** %stmt44, align 8
  %x_case_stack45 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %64, i32 0, i32 4
  store %struct.nesting* %62, %struct.nesting** %x_case_stack45, align 8
  %65 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %66 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt46 = getelementptr inbounds %struct.function, %struct.function* %66, i32 0, i32 1
  %67 = load %struct.stmt_status*, %struct.stmt_status** %stmt46, align 8
  %x_nesting_stack47 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %67, i32 0, i32 5
  store %struct.nesting* %65, %struct.nesting** %x_nesting_stack47, align 8
  call void @start_cleanup_deferral()
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_case_dummy() #0 {
entry:
  %target = alloca %struct.nesting*, align 8
  %this = alloca %struct.nesting*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  call void @end_cleanup_deferral()
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 4
  %2 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  store %struct.nesting* %2, %struct.nesting** %target, align 8
  br label %do.body.1

do.body.1:                                        ; preds = %do.cond, %do.body
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt2, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 5
  %5 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  store %struct.nesting* %5, %struct.nesting** %this, align 8
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt3 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1
  %7 = load %struct.stmt_status*, %struct.stmt_status** %stmt3, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %7, i32 0, i32 3
  %8 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %9 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp = icmp eq %struct.nesting* %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body.1
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt4 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1
  %11 = load %struct.stmt_status*, %struct.stmt_status** %stmt4, align 8
  %x_loop_stack5 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %11, i32 0, i32 3
  %12 = load %struct.nesting*, %struct.nesting** %x_loop_stack5, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %12, i32 0, i32 1
  %13 = load %struct.nesting*, %struct.nesting** %next, align 8
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt6 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1
  %15 = load %struct.stmt_status*, %struct.stmt_status** %stmt6, align 8
  %x_loop_stack7 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %15, i32 0, i32 3
  store %struct.nesting* %13, %struct.nesting** %x_loop_stack7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body.1
  %16 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt8 = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 1
  %17 = load %struct.stmt_status*, %struct.stmt_status** %stmt8, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %17, i32 0, i32 2
  %18 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %19 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp9 = icmp eq %struct.nesting* %18, %19
  br i1 %cmp9, label %if.then.10, label %if.end.16

if.then.10:                                       ; preds = %if.end
  %20 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt11 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 1
  %21 = load %struct.stmt_status*, %struct.stmt_status** %stmt11, align 8
  %x_cond_stack12 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %21, i32 0, i32 2
  %22 = load %struct.nesting*, %struct.nesting** %x_cond_stack12, align 8
  %next13 = getelementptr inbounds %struct.nesting, %struct.nesting* %22, i32 0, i32 1
  %23 = load %struct.nesting*, %struct.nesting** %next13, align 8
  %24 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt14 = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 1
  %25 = load %struct.stmt_status*, %struct.stmt_status** %stmt14, align 8
  %x_cond_stack15 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %25, i32 0, i32 2
  store %struct.nesting* %23, %struct.nesting** %x_cond_stack15, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.10, %if.end
  %26 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt17 = getelementptr inbounds %struct.function, %struct.function* %26, i32 0, i32 1
  %27 = load %struct.stmt_status*, %struct.stmt_status** %stmt17, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %27, i32 0, i32 0
  %28 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %29 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp18 = icmp eq %struct.nesting* %28, %29
  br i1 %cmp18, label %if.then.19, label %if.end.25

if.then.19:                                       ; preds = %if.end.16
  %30 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt20 = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 1
  %31 = load %struct.stmt_status*, %struct.stmt_status** %stmt20, align 8
  %x_block_stack21 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %31, i32 0, i32 0
  %32 = load %struct.nesting*, %struct.nesting** %x_block_stack21, align 8
  %next22 = getelementptr inbounds %struct.nesting, %struct.nesting* %32, i32 0, i32 1
  %33 = load %struct.nesting*, %struct.nesting** %next22, align 8
  %34 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt23 = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 1
  %35 = load %struct.stmt_status*, %struct.stmt_status** %stmt23, align 8
  %x_block_stack24 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %35, i32 0, i32 0
  store %struct.nesting* %33, %struct.nesting** %x_block_stack24, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.19, %if.end.16
  %36 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt26 = getelementptr inbounds %struct.function, %struct.function* %36, i32 0, i32 1
  %37 = load %struct.stmt_status*, %struct.stmt_status** %stmt26, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %37, i32 0, i32 1
  %38 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %39 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp27 = icmp eq %struct.nesting* %38, %39
  br i1 %cmp27, label %if.then.28, label %if.end.34

if.then.28:                                       ; preds = %if.end.25
  %40 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt29 = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 1
  %41 = load %struct.stmt_status*, %struct.stmt_status** %stmt29, align 8
  %x_stack_block_stack30 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %41, i32 0, i32 1
  %42 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack30, align 8
  %next31 = getelementptr inbounds %struct.nesting, %struct.nesting* %42, i32 0, i32 1
  %43 = load %struct.nesting*, %struct.nesting** %next31, align 8
  %44 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt32 = getelementptr inbounds %struct.function, %struct.function* %44, i32 0, i32 1
  %45 = load %struct.stmt_status*, %struct.stmt_status** %stmt32, align 8
  %x_stack_block_stack33 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %45, i32 0, i32 1
  store %struct.nesting* %43, %struct.nesting** %x_stack_block_stack33, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.28, %if.end.25
  %46 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt35 = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 1
  %47 = load %struct.stmt_status*, %struct.stmt_status** %stmt35, align 8
  %x_case_stack36 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %47, i32 0, i32 4
  %48 = load %struct.nesting*, %struct.nesting** %x_case_stack36, align 8
  %49 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp37 = icmp eq %struct.nesting* %48, %49
  br i1 %cmp37, label %if.then.38, label %if.end.44

if.then.38:                                       ; preds = %if.end.34
  %50 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt39 = getelementptr inbounds %struct.function, %struct.function* %50, i32 0, i32 1
  %51 = load %struct.stmt_status*, %struct.stmt_status** %stmt39, align 8
  %x_case_stack40 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %51, i32 0, i32 4
  %52 = load %struct.nesting*, %struct.nesting** %x_case_stack40, align 8
  %next41 = getelementptr inbounds %struct.nesting, %struct.nesting* %52, i32 0, i32 1
  %53 = load %struct.nesting*, %struct.nesting** %next41, align 8
  %54 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt42 = getelementptr inbounds %struct.function, %struct.function* %54, i32 0, i32 1
  %55 = load %struct.stmt_status*, %struct.stmt_status** %stmt42, align 8
  %x_case_stack43 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %55, i32 0, i32 4
  store %struct.nesting* %53, %struct.nesting** %x_case_stack43, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.38, %if.end.34
  %56 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt45 = getelementptr inbounds %struct.function, %struct.function* %56, i32 0, i32 1
  %57 = load %struct.stmt_status*, %struct.stmt_status** %stmt45, align 8
  %x_nesting_stack46 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %57, i32 0, i32 5
  %58 = load %struct.nesting*, %struct.nesting** %x_nesting_stack46, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %58, i32 0, i32 2
  %59 = load i32, i32* %depth, align 4
  %sub = sub nsw i32 %59, 1
  %60 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt47 = getelementptr inbounds %struct.function, %struct.function* %60, i32 0, i32 1
  %61 = load %struct.stmt_status*, %struct.stmt_status** %stmt47, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %61, i32 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4
  %62 = load %struct.nesting*, %struct.nesting** %this, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %62, i32 0, i32 0
  %63 = load %struct.nesting*, %struct.nesting** %all, align 8
  %64 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt48 = getelementptr inbounds %struct.function, %struct.function* %64, i32 0, i32 1
  %65 = load %struct.stmt_status*, %struct.stmt_status** %stmt48, align 8
  %x_nesting_stack49 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %65, i32 0, i32 5
  store %struct.nesting* %63, %struct.nesting** %x_nesting_stack49, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__o, align 8
  %66 = load %struct.nesting*, %struct.nesting** %this, align 8
  %67 = bitcast %struct.nesting* %66 to i8*
  store i8* %67, i8** %__obj, align 8
  %68 = load i8*, i8** %__obj, align 8
  %69 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %69, i32 0, i32 1
  %70 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %71 = bitcast %struct._obstack_chunk* %70 to i8*
  %cmp50 = icmp ugt i8* %68, %71
  br i1 %cmp50, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.44
  %72 = load i8*, i8** %__obj, align 8
  %73 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %73, i32 0, i32 4
  %74 = load i8*, i8** %chunk_limit, align 8
  %cmp51 = icmp ult i8* %72, %74
  br i1 %cmp51, label %if.then.52, label %if.else

if.then.52:                                       ; preds = %land.lhs.true
  %75 = load i8*, i8** %__obj, align 8
  %76 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %76, i32 0, i32 2
  store i8* %75, i8** %object_base, align 8
  %77 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %77, i32 0, i32 3
  store i8* %75, i8** %next_free, align 8
  br label %if.end.53

if.else:                                          ; preds = %land.lhs.true, %if.end.44
  %78 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %79 = load i8*, i8** %__obj, align 8
  call void @obstack_free(%struct.obstack* %78, i8* %79)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else, %if.then.52
  br label %do.cond

do.cond:                                          ; preds = %if.end.53
  %80 = load %struct.nesting*, %struct.nesting** %this, align 8
  %81 = load %struct.nesting*, %struct.nesting** %target, align 8
  %cmp54 = icmp ne %struct.nesting* %80, %81
  br i1 %cmp54, label %do.body.1, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end.56

do.end.56:                                        ; preds = %do.end
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @case_index_expr_type() #0 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 4
  %2 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %tobool = icmp ne %struct.nesting* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_case_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 4
  %5 = load %struct.nesting*, %struct.nesting** %x_case_stack2, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %index_expr = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 3
  %6 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  store %union.tree_node* %7, %union.tree_node** %retval
  br label %return

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %8
}

; Function Attrs: nounwind uwtable
define i32 @pushcase(%union.tree_node* %value, %union.tree_node* (%union.tree_node*, %union.tree_node*)* %converter, %union.tree_node* %label, %union.tree_node** %duplicate) #0 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca %union.tree_node*, align 8
  %converter.addr = alloca %union.tree_node* (%union.tree_node*, %union.tree_node*)*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  %duplicate.addr = alloca %union.tree_node**, align 8
  %index_type = alloca %union.tree_node*, align 8
  %nominal_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  store %union.tree_node* (%union.tree_node*, %union.tree_node*)* %converter, %union.tree_node* (%union.tree_node*, %union.tree_node*)** %converter.addr, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  store %union.tree_node** %duplicate, %union.tree_node*** %duplicate.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 4
  %2 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %tobool = icmp ne %struct.nesting* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_case_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 4
  %5 = load %struct.nesting*, %struct.nesting** %x_case_stack2, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %start = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %tobool3 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt4 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 1
  %8 = load %struct.stmt_status*, %struct.stmt_status** %stmt4, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %8, i32 0, i32 1
  %9 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %tobool5 = icmp ne %struct.nesting* %9, null
  br i1 %tobool5, label %land.lhs.true.6, label %if.end.13

land.lhs.true.6:                                  ; preds = %if.end
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt7 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1
  %11 = load %struct.stmt_status*, %struct.stmt_status** %stmt7, align 8
  %x_stack_block_stack8 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %11, i32 0, i32 1
  %12 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack8, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %12, i32 0, i32 2
  %13 = load i32, i32* %depth, align 4
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt9 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1
  %15 = load %struct.stmt_status*, %struct.stmt_status** %stmt9, align 8
  %x_case_stack10 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %15, i32 0, i32 4
  %16 = load %struct.nesting*, %struct.nesting** %x_case_stack10, align 8
  %depth11 = getelementptr inbounds %struct.nesting, %struct.nesting* %16, i32 0, i32 2
  %17 = load i32, i32* %depth11, align 4
  %cmp = icmp sgt i32 %13, %17
  br i1 %cmp, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %land.lhs.true.6
  store i32 5, i32* %retval
  br label %return

if.end.13:                                        ; preds = %land.lhs.true.6, %if.end
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt14 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 1
  %19 = load %struct.stmt_status*, %struct.stmt_status** %stmt14, align 8
  %x_case_stack15 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %19, i32 0, i32 4
  %20 = load %struct.nesting*, %struct.nesting** %x_case_stack15, align 8
  %data16 = getelementptr inbounds %struct.nesting, %struct.nesting* %20, i32 0, i32 4
  %case_stmt17 = bitcast %union.anon.3* %data16 to %struct.anon.7*
  %index_expr = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt17, i32 0, i32 3
  %21 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8
  store %union.tree_node* %22, %union.tree_node** %index_type, align 8
  %23 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt18 = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 1
  %24 = load %struct.stmt_status*, %struct.stmt_status** %stmt18, align 8
  %x_case_stack19 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %24, i32 0, i32 4
  %25 = load %struct.nesting*, %struct.nesting** %x_case_stack19, align 8
  %data20 = getelementptr inbounds %struct.nesting, %struct.nesting* %25, i32 0, i32 4
  %case_stmt21 = bitcast %union.anon.3* %data20 to %struct.anon.7*
  %nominal_type22 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt21, i32 0, i32 4
  %26 = load %union.tree_node*, %union.tree_node** %nominal_type22, align 8
  store %union.tree_node* %26, %union.tree_node** %nominal_type, align 8
  %27 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp23 = icmp eq %union.tree_node* %27, %28
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.13
  %29 = load %union.tree_node*, %union.tree_node** %value.addr, align 8
  %cmp26 = icmp ne %union.tree_node* %29, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.25
  %30 = load %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)** %converter.addr, align 8
  %31 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8
  %32 = load %union.tree_node*, %union.tree_node** %value.addr, align 8
  %call = call %union.tree_node* %30(%union.tree_node* %31, %union.tree_node* %32)
  store %union.tree_node* %call, %union.tree_node** %value.addr, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %if.end.25
  call void @check_seenlabel()
  %33 = load %union.tree_node*, %union.tree_node** %value.addr, align 8
  %cmp29 = icmp ne %union.tree_node* %33, null
  br i1 %cmp29, label %land.lhs.true.30, label %if.end.36

land.lhs.true.30:                                 ; preds = %if.end.28
  %34 = load %union.tree_node*, %union.tree_node** %value.addr, align 8
  %common31 = bitcast %union.tree_node* %34 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2
  %bf.load = load i32, i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 18
  %bf.clear = and i32 %bf.lshr, 1
  %tobool32 = icmp ne i32 %bf.clear, 0
  br i1 %tobool32, label %if.then.35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.30
  %35 = load %union.tree_node*, %union.tree_node** %value.addr, align 8
  %36 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %call33 = call i32 @int_fits_type_p(%union.tree_node* %35, %union.tree_node* %36)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %lor.lhs.false, %land.lhs.true.30
  store i32 3, i32* %retval
  br label %return

if.end.36:                                        ; preds = %lor.lhs.false, %if.end.28
  %37 = load %union.tree_node*, %union.tree_node** %value.addr, align 8
  %38 = load %union.tree_node*, %union.tree_node** %value.addr, align 8
  %39 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %40 = load %union.tree_node**, %union.tree_node*** %duplicate.addr, align 8
  %call37 = call i32 @add_case_node(%union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %39, %union.tree_node** %40)
  store i32 %call37, i32* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.35, %if.then.24, %if.then.12, %if.then
  %41 = load i32, i32* %retval
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define internal void @check_seenlabel() #0 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 4
  %2 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %2, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %line_number_status = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 6
  %3 = load i32, i32* %line_number_status, align 4
  %cmp = icmp sge i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end.53

if.then:                                          ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_case_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 4
  %6 = load %struct.nesting*, %struct.nesting** %x_case_stack2, align 8
  %data3 = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 4
  %case_stmt4 = bitcast %union.anon.3* %data3 to %struct.anon.7*
  %line_number_status5 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt4, i32 0, i32 6
  %7 = load i32, i32* %line_number_status5, align 4
  call void @restore_line_number_status(i32 %7)
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt6 = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 1
  %9 = load %struct.stmt_status*, %struct.stmt_status** %stmt6, align 8
  %x_case_stack7 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %9, i32 0, i32 4
  %10 = load %struct.nesting*, %struct.nesting** %x_case_stack7, align 8
  %data8 = getelementptr inbounds %struct.nesting, %struct.nesting* %10, i32 0, i32 4
  %case_stmt9 = bitcast %union.anon.3* %data8 to %struct.anon.7*
  %line_number_status10 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt9, i32 0, i32 6
  store i32 -1, i32* %line_number_status10, align 4
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt11 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1
  %12 = load %struct.stmt_status*, %struct.stmt_status** %stmt11, align 8
  %x_case_stack12 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %12, i32 0, i32 4
  %13 = load %struct.nesting*, %struct.nesting** %x_case_stack12, align 8
  %data13 = getelementptr inbounds %struct.nesting, %struct.nesting* %13, i32 0, i32 4
  %case_stmt14 = bitcast %union.anon.3* %data13 to %struct.anon.7*
  %start = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt14, i32 0, i32 0
  %14 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %15, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load = load i32, i32* %17, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp15 = icmp eq i32 %bf.clear, 36
  br i1 %cmp15, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load17 = load i32, i32* %19, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp ne i32 %bf.clear18, 37
  br i1 %cmp19, label %land.lhs.true, label %if.end.49

land.lhs.true:                                    ; preds = %if.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load20 = load i32, i32* %21, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp ne i32 %bf.clear21, 32
  br i1 %cmp22, label %if.then.26, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load23 = load i32, i32* %24, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp ne i32 %bf.clear24, 48
  br i1 %cmp25, label %if.then.26, label %if.end.49

if.then.26:                                       ; preds = %lor.lhs.false, %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then.26
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 1
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %insn, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool30 = icmp ne %struct.rtx_def* %27, null
  br i1 %tobool30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load31 = load i32, i32* %29, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp ne i32 %bf.clear32, 37
  br i1 %cmp33, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx35 to i32*
  %31 = load i32, i32* %rtint, align 4
  %cmp36 = icmp slt i32 %31, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %32 = phi i1 [ true, %land.rhs ], [ %cmp36, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %do.cond
  %33 = phi i1 [ false, %do.cond ], [ %32, %lor.end ]
  br i1 %33, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool37 = icmp ne %struct.rtx_def* %34, null
  br i1 %tobool37, label %if.then.38, label %if.end.48

if.then.38:                                       ; preds = %do.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 3
  %rtstr = bitcast %union.rtunion_def* %arrayidx40 to i8**
  %36 = load i8*, i8** %rtstr, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 4
  %rtint43 = bitcast %union.rtunion_def* %arrayidx42 to i32*
  %38 = load i32, i32* %rtint43, align 4
  %39 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt44 = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 1
  %40 = load %struct.stmt_status*, %struct.stmt_status** %stmt44, align 8
  %x_case_stack45 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %40, i32 0, i32 4
  %41 = load %struct.nesting*, %struct.nesting** %x_case_stack45, align 8
  %data46 = getelementptr inbounds %struct.nesting, %struct.nesting* %41, i32 0, i32 4
  %case_stmt47 = bitcast %union.anon.3* %data46 to %struct.anon.7*
  %printname = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt47, i32 0, i32 5
  %42 = load i8*, i8** %printname, align 8
  call void (i8*, i32, i8*, ...) @warning_with_file_and_line(i8* %36, i32 %38, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0), i8* %42)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.38, %do.end
  br label %for.end

if.end.49:                                        ; preds = %lor.lhs.false, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.49
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 2
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx52, align 8
  store %struct.rtx_def* %44, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end.48, %if.then.16, %for.cond
  br label %if.end.53

if.end.53:                                        ; preds = %for.end, %entry
  ret void
}

declare i32 @int_fits_type_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define i32 @add_case_node(%union.tree_node* %low, %union.tree_node* %high, %union.tree_node* %label, %union.tree_node** %duplicate) #0 {
entry:
  %retval = alloca i32, align 4
  %low.addr = alloca %union.tree_node*, align 8
  %high.addr = alloca %union.tree_node*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  %duplicate.addr = alloca %union.tree_node**, align 8
  %p = alloca %struct.case_node*, align 8
  %q = alloca %struct.case_node**, align 8
  %r = alloca %struct.case_node*, align 8
  %s = alloca %struct.case_node*, align 8
  %b = alloca i32, align 4
  %b2 = alloca i32, align 4
  %t = alloca %struct.case_node*, align 8
  %b137 = alloca i32, align 4
  %b2180 = alloca i32, align 4
  %t181 = alloca %struct.case_node*, align 8
  store %union.tree_node* %low, %union.tree_node** %low.addr, align 8
  store %union.tree_node* %high, %union.tree_node** %high.addr, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  store %union.tree_node** %duplicate, %union.tree_node*** %duplicate.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %high.addr, align 8
  %tobool = icmp ne %union.tree_node* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %low.addr, align 8
  store %union.tree_node* %1, %union.tree_node** %high.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.tree_node*, %union.tree_node** %high.addr, align 8
  %tobool1 = icmp ne %union.tree_node* %2, null
  br i1 %tobool1, label %if.end.16, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %low.addr, align 8
  %tobool2 = icmp ne %union.tree_node* %3, null
  br i1 %tobool2, label %if.end.16, label %if.then.3

if.then.3:                                        ; preds = %land.lhs.true
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 4
  %6 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %default_label = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 2
  %7 = load %union.tree_node*, %union.tree_node** %default_label, align 8
  %cmp = icmp ne %union.tree_node* %7, null
  br i1 %cmp, label %if.then.4, label %if.end.10

if.then.4:                                        ; preds = %if.then.3
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt5 = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 1
  %9 = load %struct.stmt_status*, %struct.stmt_status** %stmt5, align 8
  %x_case_stack6 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %9, i32 0, i32 4
  %10 = load %struct.nesting*, %struct.nesting** %x_case_stack6, align 8
  %data7 = getelementptr inbounds %struct.nesting, %struct.nesting* %10, i32 0, i32 4
  %case_stmt8 = bitcast %union.anon.3* %data7 to %struct.anon.7*
  %default_label9 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt8, i32 0, i32 2
  %11 = load %union.tree_node*, %union.tree_node** %default_label9, align 8
  %12 = load %union.tree_node**, %union.tree_node*** %duplicate.addr, align 8
  store %union.tree_node* %11, %union.tree_node** %12, align 8
  store i32 2, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.then.3
  %13 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt11 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1
  %15 = load %struct.stmt_status*, %struct.stmt_status** %stmt11, align 8
  %x_case_stack12 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %15, i32 0, i32 4
  %16 = load %struct.nesting*, %struct.nesting** %x_case_stack12, align 8
  %data13 = getelementptr inbounds %struct.nesting, %struct.nesting* %16, i32 0, i32 4
  %case_stmt14 = bitcast %union.anon.3* %data13 to %struct.anon.7*
  %default_label15 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt14, i32 0, i32 2
  store %union.tree_node* %13, %union.tree_node** %default_label15, align 8
  %17 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  call void @expand_label(%union.tree_node* %17)
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %land.lhs.true, %if.end
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt17 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 1
  %19 = load %struct.stmt_status*, %struct.stmt_status** %stmt17, align 8
  %x_case_stack18 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %19, i32 0, i32 4
  %20 = load %struct.nesting*, %struct.nesting** %x_case_stack18, align 8
  %data19 = getelementptr inbounds %struct.nesting, %struct.nesting* %20, i32 0, i32 4
  %case_stmt20 = bitcast %union.anon.3* %data19 to %struct.anon.7*
  %case_list = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt20, i32 0, i32 1
  store %struct.case_node** %case_list, %struct.case_node*** %q, align 8
  %21 = load %struct.case_node**, %struct.case_node*** %q, align 8
  %22 = load %struct.case_node*, %struct.case_node** %21, align 8
  store %struct.case_node* %22, %struct.case_node** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.31, %if.end.16
  %23 = load %struct.case_node**, %struct.case_node*** %q, align 8
  %24 = load %struct.case_node*, %struct.case_node** %23, align 8
  store %struct.case_node* %24, %struct.case_node** %r, align 8
  %tobool21 = icmp ne %struct.case_node* %24, null
  br i1 %tobool21, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %25 = load %struct.case_node*, %struct.case_node** %r, align 8
  store %struct.case_node* %25, %struct.case_node** %p, align 8
  %26 = load %union.tree_node*, %union.tree_node** %high.addr, align 8
  %27 = load %struct.case_node*, %struct.case_node** %p, align 8
  %low22 = getelementptr inbounds %struct.case_node, %struct.case_node* %27, i32 0, i32 3
  %28 = load %union.tree_node*, %union.tree_node** %low22, align 8
  %call = call i32 @tree_int_cst_lt(%union.tree_node* %26, %union.tree_node* %28)
  %tobool23 = icmp ne i32 %call, 0
  br i1 %tobool23, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %while.body
  %29 = load %struct.case_node*, %struct.case_node** %p, align 8
  %left = getelementptr inbounds %struct.case_node, %struct.case_node* %29, i32 0, i32 0
  store %struct.case_node** %left, %struct.case_node*** %q, align 8
  br label %if.end.31

if.else:                                          ; preds = %while.body
  %30 = load %struct.case_node*, %struct.case_node** %p, align 8
  %high25 = getelementptr inbounds %struct.case_node, %struct.case_node* %30, i32 0, i32 4
  %31 = load %union.tree_node*, %union.tree_node** %high25, align 8
  %32 = load %union.tree_node*, %union.tree_node** %low.addr, align 8
  %call26 = call i32 @tree_int_cst_lt(%union.tree_node* %31, %union.tree_node* %32)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %if.else
  %33 = load %struct.case_node*, %struct.case_node** %p, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %33, i32 0, i32 1
  store %struct.case_node** %right, %struct.case_node*** %q, align 8
  br label %if.end.30

if.else.29:                                       ; preds = %if.else
  %34 = load %struct.case_node*, %struct.case_node** %p, align 8
  %code_label = getelementptr inbounds %struct.case_node, %struct.case_node* %34, i32 0, i32 5
  %35 = load %union.tree_node*, %union.tree_node** %code_label, align 8
  %36 = load %union.tree_node**, %union.tree_node*** %duplicate.addr, align 8
  store %union.tree_node* %35, %union.tree_node** %36, align 8
  store i32 2, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.then.28
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.then.24
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call32 = call noalias i8* @xmalloc(i64 56)
  %37 = bitcast i8* %call32 to %struct.case_node*
  store %struct.case_node* %37, %struct.case_node** %r, align 8
  %38 = load %union.tree_node*, %union.tree_node** %low.addr, align 8
  %39 = load %struct.case_node*, %struct.case_node** %r, align 8
  %low33 = getelementptr inbounds %struct.case_node, %struct.case_node* %39, i32 0, i32 3
  store %union.tree_node* %38, %union.tree_node** %low33, align 8
  %40 = load %union.tree_node*, %union.tree_node** %low.addr, align 8
  %41 = load %union.tree_node*, %union.tree_node** %high.addr, align 8
  %call34 = call i32 @tree_int_cst_equal(%union.tree_node* %40, %union.tree_node* %41)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.then.36, label %if.else.39

if.then.36:                                       ; preds = %while.end
  %42 = load %struct.case_node*, %struct.case_node** %r, align 8
  %low37 = getelementptr inbounds %struct.case_node, %struct.case_node* %42, i32 0, i32 3
  %43 = load %union.tree_node*, %union.tree_node** %low37, align 8
  %44 = load %struct.case_node*, %struct.case_node** %r, align 8
  %high38 = getelementptr inbounds %struct.case_node, %struct.case_node* %44, i32 0, i32 4
  store %union.tree_node* %43, %union.tree_node** %high38, align 8
  br label %if.end.41

if.else.39:                                       ; preds = %while.end
  %45 = load %union.tree_node*, %union.tree_node** %high.addr, align 8
  %46 = load %struct.case_node*, %struct.case_node** %r, align 8
  %high40 = getelementptr inbounds %struct.case_node, %struct.case_node* %46, i32 0, i32 4
  store %union.tree_node* %45, %union.tree_node** %high40, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.39, %if.then.36
  %47 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %48 = load %struct.case_node*, %struct.case_node** %r, align 8
  %code_label42 = getelementptr inbounds %struct.case_node, %struct.case_node* %48, i32 0, i32 5
  store %union.tree_node* %47, %union.tree_node** %code_label42, align 8
  %49 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  call void @expand_label(%union.tree_node* %49)
  %50 = load %struct.case_node*, %struct.case_node** %r, align 8
  %51 = load %struct.case_node**, %struct.case_node*** %q, align 8
  store %struct.case_node* %50, %struct.case_node** %51, align 8
  %52 = load %struct.case_node*, %struct.case_node** %p, align 8
  %53 = load %struct.case_node*, %struct.case_node** %r, align 8
  %parent = getelementptr inbounds %struct.case_node, %struct.case_node* %53, i32 0, i32 2
  store %struct.case_node* %52, %struct.case_node** %parent, align 8
  %54 = load %struct.case_node*, %struct.case_node** %r, align 8
  %left43 = getelementptr inbounds %struct.case_node, %struct.case_node* %54, i32 0, i32 0
  store %struct.case_node* null, %struct.case_node** %left43, align 8
  %55 = load %struct.case_node*, %struct.case_node** %r, align 8
  %right44 = getelementptr inbounds %struct.case_node, %struct.case_node* %55, i32 0, i32 1
  store %struct.case_node* null, %struct.case_node** %right44, align 8
  %56 = load %struct.case_node*, %struct.case_node** %r, align 8
  %balance = getelementptr inbounds %struct.case_node, %struct.case_node* %56, i32 0, i32 6
  store i32 0, i32* %balance, align 4
  br label %while.cond.45

while.cond.45:                                    ; preds = %if.end.230, %if.end.41
  %57 = load %struct.case_node*, %struct.case_node** %p, align 8
  %tobool46 = icmp ne %struct.case_node* %57, null
  br i1 %tobool46, label %while.body.47, label %while.end.232

while.body.47:                                    ; preds = %while.cond.45
  %58 = load %struct.case_node*, %struct.case_node** %r, align 8
  %59 = load %struct.case_node*, %struct.case_node** %p, align 8
  %left48 = getelementptr inbounds %struct.case_node, %struct.case_node* %59, i32 0, i32 0
  %60 = load %struct.case_node*, %struct.case_node** %left48, align 8
  %cmp49 = icmp eq %struct.case_node* %58, %60
  br i1 %cmp49, label %if.then.50, label %if.else.136

if.then.50:                                       ; preds = %while.body.47
  %61 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance51 = getelementptr inbounds %struct.case_node, %struct.case_node* %61, i32 0, i32 6
  %62 = load i32, i32* %balance51, align 4
  store i32 %62, i32* %b, align 4
  %tobool52 = icmp ne i32 %62, 0
  br i1 %tobool52, label %if.else.55, label %if.then.53

if.then.53:                                       ; preds = %if.then.50
  %63 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance54 = getelementptr inbounds %struct.case_node, %struct.case_node* %63, i32 0, i32 6
  store i32 -1, i32* %balance54, align 4
  br label %if.end.135

if.else.55:                                       ; preds = %if.then.50
  %64 = load i32, i32* %b, align 4
  %cmp56 = icmp slt i32 %64, 0
  br i1 %cmp56, label %if.then.57, label %if.else.133

if.then.57:                                       ; preds = %if.else.55
  %65 = load %struct.case_node*, %struct.case_node** %r, align 8
  %balance58 = getelementptr inbounds %struct.case_node, %struct.case_node* %65, i32 0, i32 6
  %66 = load i32, i32* %balance58, align 4
  %cmp59 = icmp slt i32 %66, 0
  br i1 %cmp59, label %if.then.60, label %if.else.89

if.then.60:                                       ; preds = %if.then.57
  %67 = load %struct.case_node*, %struct.case_node** %r, align 8
  %right61 = getelementptr inbounds %struct.case_node, %struct.case_node* %67, i32 0, i32 1
  %68 = load %struct.case_node*, %struct.case_node** %right61, align 8
  store %struct.case_node* %68, %struct.case_node** %s, align 8
  %69 = load %struct.case_node*, %struct.case_node** %p, align 8
  %left62 = getelementptr inbounds %struct.case_node, %struct.case_node* %69, i32 0, i32 0
  store %struct.case_node* %68, %struct.case_node** %left62, align 8
  %tobool63 = icmp ne %struct.case_node* %68, null
  br i1 %tobool63, label %if.then.64, label %if.end.66

if.then.64:                                       ; preds = %if.then.60
  %70 = load %struct.case_node*, %struct.case_node** %p, align 8
  %71 = load %struct.case_node*, %struct.case_node** %s, align 8
  %parent65 = getelementptr inbounds %struct.case_node, %struct.case_node* %71, i32 0, i32 2
  store %struct.case_node* %70, %struct.case_node** %parent65, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.64, %if.then.60
  %72 = load %struct.case_node*, %struct.case_node** %p, align 8
  %73 = load %struct.case_node*, %struct.case_node** %r, align 8
  %right67 = getelementptr inbounds %struct.case_node, %struct.case_node* %73, i32 0, i32 1
  store %struct.case_node* %72, %struct.case_node** %right67, align 8
  %74 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance68 = getelementptr inbounds %struct.case_node, %struct.case_node* %74, i32 0, i32 6
  store i32 0, i32* %balance68, align 4
  %75 = load %struct.case_node*, %struct.case_node** %r, align 8
  %balance69 = getelementptr inbounds %struct.case_node, %struct.case_node* %75, i32 0, i32 6
  store i32 0, i32* %balance69, align 4
  %76 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent70 = getelementptr inbounds %struct.case_node, %struct.case_node* %76, i32 0, i32 2
  %77 = load %struct.case_node*, %struct.case_node** %parent70, align 8
  store %struct.case_node* %77, %struct.case_node** %s, align 8
  %78 = load %struct.case_node*, %struct.case_node** %r, align 8
  %79 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent71 = getelementptr inbounds %struct.case_node, %struct.case_node* %79, i32 0, i32 2
  store %struct.case_node* %78, %struct.case_node** %parent71, align 8
  %80 = load %struct.case_node*, %struct.case_node** %s, align 8
  %81 = load %struct.case_node*, %struct.case_node** %r, align 8
  %parent72 = getelementptr inbounds %struct.case_node, %struct.case_node* %81, i32 0, i32 2
  store %struct.case_node* %80, %struct.case_node** %parent72, align 8
  %tobool73 = icmp ne %struct.case_node* %80, null
  br i1 %tobool73, label %if.then.74, label %if.else.82

if.then.74:                                       ; preds = %if.end.66
  %82 = load %struct.case_node*, %struct.case_node** %s, align 8
  %left75 = getelementptr inbounds %struct.case_node, %struct.case_node* %82, i32 0, i32 0
  %83 = load %struct.case_node*, %struct.case_node** %left75, align 8
  %84 = load %struct.case_node*, %struct.case_node** %p, align 8
  %cmp76 = icmp eq %struct.case_node* %83, %84
  br i1 %cmp76, label %if.then.77, label %if.else.79

if.then.77:                                       ; preds = %if.then.74
  %85 = load %struct.case_node*, %struct.case_node** %r, align 8
  %86 = load %struct.case_node*, %struct.case_node** %s, align 8
  %left78 = getelementptr inbounds %struct.case_node, %struct.case_node* %86, i32 0, i32 0
  store %struct.case_node* %85, %struct.case_node** %left78, align 8
  br label %if.end.81

if.else.79:                                       ; preds = %if.then.74
  %87 = load %struct.case_node*, %struct.case_node** %r, align 8
  %88 = load %struct.case_node*, %struct.case_node** %s, align 8
  %right80 = getelementptr inbounds %struct.case_node, %struct.case_node* %88, i32 0, i32 1
  store %struct.case_node* %87, %struct.case_node** %right80, align 8
  br label %if.end.81

if.end.81:                                        ; preds = %if.else.79, %if.then.77
  br label %if.end.88

if.else.82:                                       ; preds = %if.end.66
  %89 = load %struct.case_node*, %struct.case_node** %r, align 8
  %90 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt83 = getelementptr inbounds %struct.function, %struct.function* %90, i32 0, i32 1
  %91 = load %struct.stmt_status*, %struct.stmt_status** %stmt83, align 8
  %x_case_stack84 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %91, i32 0, i32 4
  %92 = load %struct.nesting*, %struct.nesting** %x_case_stack84, align 8
  %data85 = getelementptr inbounds %struct.nesting, %struct.nesting* %92, i32 0, i32 4
  %case_stmt86 = bitcast %union.anon.3* %data85 to %struct.anon.7*
  %case_list87 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt86, i32 0, i32 1
  store %struct.case_node* %89, %struct.case_node** %case_list87, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.else.82, %if.end.81
  br label %if.end.132

if.else.89:                                       ; preds = %if.then.57
  %93 = load %struct.case_node*, %struct.case_node** %r, align 8
  %right90 = getelementptr inbounds %struct.case_node, %struct.case_node* %93, i32 0, i32 1
  %94 = load %struct.case_node*, %struct.case_node** %right90, align 8
  store %struct.case_node* %94, %struct.case_node** %t, align 8
  %95 = load %struct.case_node*, %struct.case_node** %t, align 8
  %right91 = getelementptr inbounds %struct.case_node, %struct.case_node* %95, i32 0, i32 1
  %96 = load %struct.case_node*, %struct.case_node** %right91, align 8
  store %struct.case_node* %96, %struct.case_node** %s, align 8
  %97 = load %struct.case_node*, %struct.case_node** %p, align 8
  %left92 = getelementptr inbounds %struct.case_node, %struct.case_node* %97, i32 0, i32 0
  store %struct.case_node* %96, %struct.case_node** %left92, align 8
  %tobool93 = icmp ne %struct.case_node* %96, null
  br i1 %tobool93, label %if.then.94, label %if.end.96

if.then.94:                                       ; preds = %if.else.89
  %98 = load %struct.case_node*, %struct.case_node** %p, align 8
  %99 = load %struct.case_node*, %struct.case_node** %s, align 8
  %parent95 = getelementptr inbounds %struct.case_node, %struct.case_node* %99, i32 0, i32 2
  store %struct.case_node* %98, %struct.case_node** %parent95, align 8
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.94, %if.else.89
  %100 = load %struct.case_node*, %struct.case_node** %p, align 8
  %101 = load %struct.case_node*, %struct.case_node** %t, align 8
  %right97 = getelementptr inbounds %struct.case_node, %struct.case_node* %101, i32 0, i32 1
  store %struct.case_node* %100, %struct.case_node** %right97, align 8
  %102 = load %struct.case_node*, %struct.case_node** %t, align 8
  %left98 = getelementptr inbounds %struct.case_node, %struct.case_node* %102, i32 0, i32 0
  %103 = load %struct.case_node*, %struct.case_node** %left98, align 8
  store %struct.case_node* %103, %struct.case_node** %s, align 8
  %104 = load %struct.case_node*, %struct.case_node** %r, align 8
  %right99 = getelementptr inbounds %struct.case_node, %struct.case_node* %104, i32 0, i32 1
  store %struct.case_node* %103, %struct.case_node** %right99, align 8
  %tobool100 = icmp ne %struct.case_node* %103, null
  br i1 %tobool100, label %if.then.101, label %if.end.103

if.then.101:                                      ; preds = %if.end.96
  %105 = load %struct.case_node*, %struct.case_node** %r, align 8
  %106 = load %struct.case_node*, %struct.case_node** %s, align 8
  %parent102 = getelementptr inbounds %struct.case_node, %struct.case_node* %106, i32 0, i32 2
  store %struct.case_node* %105, %struct.case_node** %parent102, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.101, %if.end.96
  %107 = load %struct.case_node*, %struct.case_node** %r, align 8
  %108 = load %struct.case_node*, %struct.case_node** %t, align 8
  %left104 = getelementptr inbounds %struct.case_node, %struct.case_node* %108, i32 0, i32 0
  store %struct.case_node* %107, %struct.case_node** %left104, align 8
  %109 = load %struct.case_node*, %struct.case_node** %t, align 8
  %balance105 = getelementptr inbounds %struct.case_node, %struct.case_node* %109, i32 0, i32 6
  %110 = load i32, i32* %balance105, align 4
  store i32 %110, i32* %b, align 4
  %111 = load i32, i32* %b, align 4
  %cmp106 = icmp slt i32 %111, 0
  %conv = zext i1 %cmp106 to i32
  store i32 %conv, i32* %b2, align 4
  %112 = load i32, i32* %b2, align 4
  %113 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance107 = getelementptr inbounds %struct.case_node, %struct.case_node* %113, i32 0, i32 6
  store i32 %112, i32* %balance107, align 4
  %114 = load i32, i32* %b2, align 4
  %sub = sub nsw i32 0, %114
  %115 = load i32, i32* %b, align 4
  %sub108 = sub nsw i32 %sub, %115
  store i32 %sub108, i32* %b2, align 4
  %116 = load i32, i32* %b2, align 4
  %117 = load %struct.case_node*, %struct.case_node** %r, align 8
  %balance109 = getelementptr inbounds %struct.case_node, %struct.case_node* %117, i32 0, i32 6
  store i32 %116, i32* %balance109, align 4
  %118 = load %struct.case_node*, %struct.case_node** %t, align 8
  %balance110 = getelementptr inbounds %struct.case_node, %struct.case_node* %118, i32 0, i32 6
  store i32 0, i32* %balance110, align 4
  %119 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent111 = getelementptr inbounds %struct.case_node, %struct.case_node* %119, i32 0, i32 2
  %120 = load %struct.case_node*, %struct.case_node** %parent111, align 8
  store %struct.case_node* %120, %struct.case_node** %s, align 8
  %121 = load %struct.case_node*, %struct.case_node** %t, align 8
  %122 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent112 = getelementptr inbounds %struct.case_node, %struct.case_node* %122, i32 0, i32 2
  store %struct.case_node* %121, %struct.case_node** %parent112, align 8
  %123 = load %struct.case_node*, %struct.case_node** %t, align 8
  %124 = load %struct.case_node*, %struct.case_node** %r, align 8
  %parent113 = getelementptr inbounds %struct.case_node, %struct.case_node* %124, i32 0, i32 2
  store %struct.case_node* %123, %struct.case_node** %parent113, align 8
  %125 = load %struct.case_node*, %struct.case_node** %s, align 8
  %126 = load %struct.case_node*, %struct.case_node** %t, align 8
  %parent114 = getelementptr inbounds %struct.case_node, %struct.case_node* %126, i32 0, i32 2
  store %struct.case_node* %125, %struct.case_node** %parent114, align 8
  %tobool115 = icmp ne %struct.case_node* %125, null
  br i1 %tobool115, label %if.then.116, label %if.else.125

if.then.116:                                      ; preds = %if.end.103
  %127 = load %struct.case_node*, %struct.case_node** %s, align 8
  %left117 = getelementptr inbounds %struct.case_node, %struct.case_node* %127, i32 0, i32 0
  %128 = load %struct.case_node*, %struct.case_node** %left117, align 8
  %129 = load %struct.case_node*, %struct.case_node** %p, align 8
  %cmp118 = icmp eq %struct.case_node* %128, %129
  br i1 %cmp118, label %if.then.120, label %if.else.122

if.then.120:                                      ; preds = %if.then.116
  %130 = load %struct.case_node*, %struct.case_node** %t, align 8
  %131 = load %struct.case_node*, %struct.case_node** %s, align 8
  %left121 = getelementptr inbounds %struct.case_node, %struct.case_node* %131, i32 0, i32 0
  store %struct.case_node* %130, %struct.case_node** %left121, align 8
  br label %if.end.124

if.else.122:                                      ; preds = %if.then.116
  %132 = load %struct.case_node*, %struct.case_node** %t, align 8
  %133 = load %struct.case_node*, %struct.case_node** %s, align 8
  %right123 = getelementptr inbounds %struct.case_node, %struct.case_node* %133, i32 0, i32 1
  store %struct.case_node* %132, %struct.case_node** %right123, align 8
  br label %if.end.124

if.end.124:                                       ; preds = %if.else.122, %if.then.120
  br label %if.end.131

if.else.125:                                      ; preds = %if.end.103
  %134 = load %struct.case_node*, %struct.case_node** %t, align 8
  %135 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt126 = getelementptr inbounds %struct.function, %struct.function* %135, i32 0, i32 1
  %136 = load %struct.stmt_status*, %struct.stmt_status** %stmt126, align 8
  %x_case_stack127 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %136, i32 0, i32 4
  %137 = load %struct.nesting*, %struct.nesting** %x_case_stack127, align 8
  %data128 = getelementptr inbounds %struct.nesting, %struct.nesting* %137, i32 0, i32 4
  %case_stmt129 = bitcast %union.anon.3* %data128 to %struct.anon.7*
  %case_list130 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt129, i32 0, i32 1
  store %struct.case_node* %134, %struct.case_node** %case_list130, align 8
  br label %if.end.131

if.end.131:                                       ; preds = %if.else.125, %if.end.124
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %if.end.88
  br label %while.end.232

if.else.133:                                      ; preds = %if.else.55
  %138 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance134 = getelementptr inbounds %struct.case_node, %struct.case_node* %138, i32 0, i32 6
  store i32 0, i32* %balance134, align 4
  br label %while.end.232

if.end.135:                                       ; preds = %if.then.53
  br label %if.end.230

if.else.136:                                      ; preds = %while.body.47
  %139 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance138 = getelementptr inbounds %struct.case_node, %struct.case_node* %139, i32 0, i32 6
  %140 = load i32, i32* %balance138, align 4
  store i32 %140, i32* %b137, align 4
  %tobool139 = icmp ne i32 %140, 0
  br i1 %tobool139, label %if.else.142, label %if.then.140

if.then.140:                                      ; preds = %if.else.136
  %141 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance141 = getelementptr inbounds %struct.case_node, %struct.case_node* %141, i32 0, i32 6
  %142 = load i32, i32* %balance141, align 4
  %inc = add nsw i32 %142, 1
  store i32 %inc, i32* %balance141, align 4
  br label %if.end.229

if.else.142:                                      ; preds = %if.else.136
  %143 = load i32, i32* %b137, align 4
  %cmp143 = icmp sgt i32 %143, 0
  br i1 %cmp143, label %if.then.145, label %if.else.227

if.then.145:                                      ; preds = %if.else.142
  %144 = load %struct.case_node*, %struct.case_node** %r, align 8
  %balance146 = getelementptr inbounds %struct.case_node, %struct.case_node* %144, i32 0, i32 6
  %145 = load i32, i32* %balance146, align 4
  %cmp147 = icmp sgt i32 %145, 0
  br i1 %cmp147, label %if.then.149, label %if.else.179

if.then.149:                                      ; preds = %if.then.145
  %146 = load %struct.case_node*, %struct.case_node** %r, align 8
  %left150 = getelementptr inbounds %struct.case_node, %struct.case_node* %146, i32 0, i32 0
  %147 = load %struct.case_node*, %struct.case_node** %left150, align 8
  store %struct.case_node* %147, %struct.case_node** %s, align 8
  %148 = load %struct.case_node*, %struct.case_node** %p, align 8
  %right151 = getelementptr inbounds %struct.case_node, %struct.case_node* %148, i32 0, i32 1
  store %struct.case_node* %147, %struct.case_node** %right151, align 8
  %tobool152 = icmp ne %struct.case_node* %147, null
  br i1 %tobool152, label %if.then.153, label %if.end.155

if.then.153:                                      ; preds = %if.then.149
  %149 = load %struct.case_node*, %struct.case_node** %p, align 8
  %150 = load %struct.case_node*, %struct.case_node** %s, align 8
  %parent154 = getelementptr inbounds %struct.case_node, %struct.case_node* %150, i32 0, i32 2
  store %struct.case_node* %149, %struct.case_node** %parent154, align 8
  br label %if.end.155

if.end.155:                                       ; preds = %if.then.153, %if.then.149
  %151 = load %struct.case_node*, %struct.case_node** %p, align 8
  %152 = load %struct.case_node*, %struct.case_node** %r, align 8
  %left156 = getelementptr inbounds %struct.case_node, %struct.case_node* %152, i32 0, i32 0
  store %struct.case_node* %151, %struct.case_node** %left156, align 8
  %153 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance157 = getelementptr inbounds %struct.case_node, %struct.case_node* %153, i32 0, i32 6
  store i32 0, i32* %balance157, align 4
  %154 = load %struct.case_node*, %struct.case_node** %r, align 8
  %balance158 = getelementptr inbounds %struct.case_node, %struct.case_node* %154, i32 0, i32 6
  store i32 0, i32* %balance158, align 4
  %155 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent159 = getelementptr inbounds %struct.case_node, %struct.case_node* %155, i32 0, i32 2
  %156 = load %struct.case_node*, %struct.case_node** %parent159, align 8
  store %struct.case_node* %156, %struct.case_node** %s, align 8
  %157 = load %struct.case_node*, %struct.case_node** %r, align 8
  %158 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent160 = getelementptr inbounds %struct.case_node, %struct.case_node* %158, i32 0, i32 2
  store %struct.case_node* %157, %struct.case_node** %parent160, align 8
  %159 = load %struct.case_node*, %struct.case_node** %s, align 8
  %160 = load %struct.case_node*, %struct.case_node** %r, align 8
  %parent161 = getelementptr inbounds %struct.case_node, %struct.case_node* %160, i32 0, i32 2
  store %struct.case_node* %159, %struct.case_node** %parent161, align 8
  %tobool162 = icmp ne %struct.case_node* %159, null
  br i1 %tobool162, label %if.then.163, label %if.else.172

if.then.163:                                      ; preds = %if.end.155
  %161 = load %struct.case_node*, %struct.case_node** %s, align 8
  %left164 = getelementptr inbounds %struct.case_node, %struct.case_node* %161, i32 0, i32 0
  %162 = load %struct.case_node*, %struct.case_node** %left164, align 8
  %163 = load %struct.case_node*, %struct.case_node** %p, align 8
  %cmp165 = icmp eq %struct.case_node* %162, %163
  br i1 %cmp165, label %if.then.167, label %if.else.169

if.then.167:                                      ; preds = %if.then.163
  %164 = load %struct.case_node*, %struct.case_node** %r, align 8
  %165 = load %struct.case_node*, %struct.case_node** %s, align 8
  %left168 = getelementptr inbounds %struct.case_node, %struct.case_node* %165, i32 0, i32 0
  store %struct.case_node* %164, %struct.case_node** %left168, align 8
  br label %if.end.171

if.else.169:                                      ; preds = %if.then.163
  %166 = load %struct.case_node*, %struct.case_node** %r, align 8
  %167 = load %struct.case_node*, %struct.case_node** %s, align 8
  %right170 = getelementptr inbounds %struct.case_node, %struct.case_node* %167, i32 0, i32 1
  store %struct.case_node* %166, %struct.case_node** %right170, align 8
  br label %if.end.171

if.end.171:                                       ; preds = %if.else.169, %if.then.167
  br label %if.end.178

if.else.172:                                      ; preds = %if.end.155
  %168 = load %struct.case_node*, %struct.case_node** %r, align 8
  %169 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt173 = getelementptr inbounds %struct.function, %struct.function* %169, i32 0, i32 1
  %170 = load %struct.stmt_status*, %struct.stmt_status** %stmt173, align 8
  %x_case_stack174 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %170, i32 0, i32 4
  %171 = load %struct.nesting*, %struct.nesting** %x_case_stack174, align 8
  %data175 = getelementptr inbounds %struct.nesting, %struct.nesting* %171, i32 0, i32 4
  %case_stmt176 = bitcast %union.anon.3* %data175 to %struct.anon.7*
  %case_list177 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt176, i32 0, i32 1
  store %struct.case_node* %168, %struct.case_node** %case_list177, align 8
  br label %if.end.178

if.end.178:                                       ; preds = %if.else.172, %if.end.171
  br label %if.end.226

if.else.179:                                      ; preds = %if.then.145
  %172 = load %struct.case_node*, %struct.case_node** %r, align 8
  %left182 = getelementptr inbounds %struct.case_node, %struct.case_node* %172, i32 0, i32 0
  %173 = load %struct.case_node*, %struct.case_node** %left182, align 8
  store %struct.case_node* %173, %struct.case_node** %t181, align 8
  %174 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %left183 = getelementptr inbounds %struct.case_node, %struct.case_node* %174, i32 0, i32 0
  %175 = load %struct.case_node*, %struct.case_node** %left183, align 8
  store %struct.case_node* %175, %struct.case_node** %s, align 8
  %176 = load %struct.case_node*, %struct.case_node** %p, align 8
  %right184 = getelementptr inbounds %struct.case_node, %struct.case_node* %176, i32 0, i32 1
  store %struct.case_node* %175, %struct.case_node** %right184, align 8
  %tobool185 = icmp ne %struct.case_node* %175, null
  br i1 %tobool185, label %if.then.186, label %if.end.188

if.then.186:                                      ; preds = %if.else.179
  %177 = load %struct.case_node*, %struct.case_node** %p, align 8
  %178 = load %struct.case_node*, %struct.case_node** %s, align 8
  %parent187 = getelementptr inbounds %struct.case_node, %struct.case_node* %178, i32 0, i32 2
  store %struct.case_node* %177, %struct.case_node** %parent187, align 8
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.186, %if.else.179
  %179 = load %struct.case_node*, %struct.case_node** %p, align 8
  %180 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %left189 = getelementptr inbounds %struct.case_node, %struct.case_node* %180, i32 0, i32 0
  store %struct.case_node* %179, %struct.case_node** %left189, align 8
  %181 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %right190 = getelementptr inbounds %struct.case_node, %struct.case_node* %181, i32 0, i32 1
  %182 = load %struct.case_node*, %struct.case_node** %right190, align 8
  store %struct.case_node* %182, %struct.case_node** %s, align 8
  %183 = load %struct.case_node*, %struct.case_node** %r, align 8
  %left191 = getelementptr inbounds %struct.case_node, %struct.case_node* %183, i32 0, i32 0
  store %struct.case_node* %182, %struct.case_node** %left191, align 8
  %tobool192 = icmp ne %struct.case_node* %182, null
  br i1 %tobool192, label %if.then.193, label %if.end.195

if.then.193:                                      ; preds = %if.end.188
  %184 = load %struct.case_node*, %struct.case_node** %r, align 8
  %185 = load %struct.case_node*, %struct.case_node** %s, align 8
  %parent194 = getelementptr inbounds %struct.case_node, %struct.case_node* %185, i32 0, i32 2
  store %struct.case_node* %184, %struct.case_node** %parent194, align 8
  br label %if.end.195

if.end.195:                                       ; preds = %if.then.193, %if.end.188
  %186 = load %struct.case_node*, %struct.case_node** %r, align 8
  %187 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %right196 = getelementptr inbounds %struct.case_node, %struct.case_node* %187, i32 0, i32 1
  store %struct.case_node* %186, %struct.case_node** %right196, align 8
  %188 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %balance197 = getelementptr inbounds %struct.case_node, %struct.case_node* %188, i32 0, i32 6
  %189 = load i32, i32* %balance197, align 4
  store i32 %189, i32* %b137, align 4
  %190 = load i32, i32* %b137, align 4
  %cmp198 = icmp slt i32 %190, 0
  %conv199 = zext i1 %cmp198 to i32
  store i32 %conv199, i32* %b2180, align 4
  %191 = load i32, i32* %b2180, align 4
  %192 = load %struct.case_node*, %struct.case_node** %r, align 8
  %balance200 = getelementptr inbounds %struct.case_node, %struct.case_node* %192, i32 0, i32 6
  store i32 %191, i32* %balance200, align 4
  %193 = load i32, i32* %b2180, align 4
  %sub201 = sub nsw i32 0, %193
  %194 = load i32, i32* %b137, align 4
  %sub202 = sub nsw i32 %sub201, %194
  store i32 %sub202, i32* %b2180, align 4
  %195 = load i32, i32* %b2180, align 4
  %196 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance203 = getelementptr inbounds %struct.case_node, %struct.case_node* %196, i32 0, i32 6
  store i32 %195, i32* %balance203, align 4
  %197 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %balance204 = getelementptr inbounds %struct.case_node, %struct.case_node* %197, i32 0, i32 6
  store i32 0, i32* %balance204, align 4
  %198 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent205 = getelementptr inbounds %struct.case_node, %struct.case_node* %198, i32 0, i32 2
  %199 = load %struct.case_node*, %struct.case_node** %parent205, align 8
  store %struct.case_node* %199, %struct.case_node** %s, align 8
  %200 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %201 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent206 = getelementptr inbounds %struct.case_node, %struct.case_node* %201, i32 0, i32 2
  store %struct.case_node* %200, %struct.case_node** %parent206, align 8
  %202 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %203 = load %struct.case_node*, %struct.case_node** %r, align 8
  %parent207 = getelementptr inbounds %struct.case_node, %struct.case_node* %203, i32 0, i32 2
  store %struct.case_node* %202, %struct.case_node** %parent207, align 8
  %204 = load %struct.case_node*, %struct.case_node** %s, align 8
  %205 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %parent208 = getelementptr inbounds %struct.case_node, %struct.case_node* %205, i32 0, i32 2
  store %struct.case_node* %204, %struct.case_node** %parent208, align 8
  %tobool209 = icmp ne %struct.case_node* %204, null
  br i1 %tobool209, label %if.then.210, label %if.else.219

if.then.210:                                      ; preds = %if.end.195
  %206 = load %struct.case_node*, %struct.case_node** %s, align 8
  %left211 = getelementptr inbounds %struct.case_node, %struct.case_node* %206, i32 0, i32 0
  %207 = load %struct.case_node*, %struct.case_node** %left211, align 8
  %208 = load %struct.case_node*, %struct.case_node** %p, align 8
  %cmp212 = icmp eq %struct.case_node* %207, %208
  br i1 %cmp212, label %if.then.214, label %if.else.216

if.then.214:                                      ; preds = %if.then.210
  %209 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %210 = load %struct.case_node*, %struct.case_node** %s, align 8
  %left215 = getelementptr inbounds %struct.case_node, %struct.case_node* %210, i32 0, i32 0
  store %struct.case_node* %209, %struct.case_node** %left215, align 8
  br label %if.end.218

if.else.216:                                      ; preds = %if.then.210
  %211 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %212 = load %struct.case_node*, %struct.case_node** %s, align 8
  %right217 = getelementptr inbounds %struct.case_node, %struct.case_node* %212, i32 0, i32 1
  store %struct.case_node* %211, %struct.case_node** %right217, align 8
  br label %if.end.218

if.end.218:                                       ; preds = %if.else.216, %if.then.214
  br label %if.end.225

if.else.219:                                      ; preds = %if.end.195
  %213 = load %struct.case_node*, %struct.case_node** %t181, align 8
  %214 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt220 = getelementptr inbounds %struct.function, %struct.function* %214, i32 0, i32 1
  %215 = load %struct.stmt_status*, %struct.stmt_status** %stmt220, align 8
  %x_case_stack221 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %215, i32 0, i32 4
  %216 = load %struct.nesting*, %struct.nesting** %x_case_stack221, align 8
  %data222 = getelementptr inbounds %struct.nesting, %struct.nesting* %216, i32 0, i32 4
  %case_stmt223 = bitcast %union.anon.3* %data222 to %struct.anon.7*
  %case_list224 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt223, i32 0, i32 1
  store %struct.case_node* %213, %struct.case_node** %case_list224, align 8
  br label %if.end.225

if.end.225:                                       ; preds = %if.else.219, %if.end.218
  br label %if.end.226

if.end.226:                                       ; preds = %if.end.225, %if.end.178
  br label %while.end.232

if.else.227:                                      ; preds = %if.else.142
  %217 = load %struct.case_node*, %struct.case_node** %p, align 8
  %balance228 = getelementptr inbounds %struct.case_node, %struct.case_node* %217, i32 0, i32 6
  store i32 0, i32* %balance228, align 4
  br label %while.end.232

if.end.229:                                       ; preds = %if.then.140
  br label %if.end.230

if.end.230:                                       ; preds = %if.end.229, %if.end.135
  %218 = load %struct.case_node*, %struct.case_node** %p, align 8
  store %struct.case_node* %218, %struct.case_node** %r, align 8
  %219 = load %struct.case_node*, %struct.case_node** %p, align 8
  %parent231 = getelementptr inbounds %struct.case_node, %struct.case_node* %219, i32 0, i32 2
  %220 = load %struct.case_node*, %struct.case_node** %parent231, align 8
  store %struct.case_node* %220, %struct.case_node** %p, align 8
  br label %while.cond.45

while.end.232:                                    ; preds = %if.else.227, %if.end.226, %if.else.133, %if.end.132, %while.cond.45
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %while.end.232, %if.else.29, %if.end.10, %if.then.4
  %221 = load i32, i32* %retval
  ret i32 %221
}

; Function Attrs: nounwind uwtable
define i32 @pushcase_range(%union.tree_node* %value1, %union.tree_node* %value2, %union.tree_node* (%union.tree_node*, %union.tree_node*)* %converter, %union.tree_node* %label, %union.tree_node** %duplicate) #0 {
entry:
  %retval = alloca i32, align 4
  %value1.addr = alloca %union.tree_node*, align 8
  %value2.addr = alloca %union.tree_node*, align 8
  %converter.addr = alloca %union.tree_node* (%union.tree_node*, %union.tree_node*)*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  %duplicate.addr = alloca %union.tree_node**, align 8
  %index_type = alloca %union.tree_node*, align 8
  %nominal_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %value1, %union.tree_node** %value1.addr, align 8
  store %union.tree_node* %value2, %union.tree_node** %value2.addr, align 8
  store %union.tree_node* (%union.tree_node*, %union.tree_node*)* %converter, %union.tree_node* (%union.tree_node*, %union.tree_node*)** %converter.addr, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  store %union.tree_node** %duplicate, %union.tree_node*** %duplicate.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 4
  %2 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %tobool = icmp ne %struct.nesting* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1
  %4 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_case_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %4, i32 0, i32 4
  %5 = load %struct.nesting*, %struct.nesting** %x_case_stack2, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %5, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %start = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 0
  %6 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %tobool3 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt4 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 1
  %8 = load %struct.stmt_status*, %struct.stmt_status** %stmt4, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %8, i32 0, i32 1
  %9 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %tobool5 = icmp ne %struct.nesting* %9, null
  br i1 %tobool5, label %land.lhs.true.6, label %if.end.13

land.lhs.true.6:                                  ; preds = %if.end
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt7 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1
  %11 = load %struct.stmt_status*, %struct.stmt_status** %stmt7, align 8
  %x_stack_block_stack8 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %11, i32 0, i32 1
  %12 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack8, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %12, i32 0, i32 2
  %13 = load i32, i32* %depth, align 4
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt9 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1
  %15 = load %struct.stmt_status*, %struct.stmt_status** %stmt9, align 8
  %x_case_stack10 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %15, i32 0, i32 4
  %16 = load %struct.nesting*, %struct.nesting** %x_case_stack10, align 8
  %depth11 = getelementptr inbounds %struct.nesting, %struct.nesting* %16, i32 0, i32 2
  %17 = load i32, i32* %depth11, align 4
  %cmp = icmp sgt i32 %13, %17
  br i1 %cmp, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %land.lhs.true.6
  store i32 5, i32* %retval
  br label %return

if.end.13:                                        ; preds = %land.lhs.true.6, %if.end
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt14 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 1
  %19 = load %struct.stmt_status*, %struct.stmt_status** %stmt14, align 8
  %x_case_stack15 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %19, i32 0, i32 4
  %20 = load %struct.nesting*, %struct.nesting** %x_case_stack15, align 8
  %data16 = getelementptr inbounds %struct.nesting, %struct.nesting* %20, i32 0, i32 4
  %case_stmt17 = bitcast %union.anon.3* %data16 to %struct.anon.7*
  %index_expr = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt17, i32 0, i32 3
  %21 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8
  store %union.tree_node* %22, %union.tree_node** %index_type, align 8
  %23 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt18 = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 1
  %24 = load %struct.stmt_status*, %struct.stmt_status** %stmt18, align 8
  %x_case_stack19 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %24, i32 0, i32 4
  %25 = load %struct.nesting*, %struct.nesting** %x_case_stack19, align 8
  %data20 = getelementptr inbounds %struct.nesting, %struct.nesting* %25, i32 0, i32 4
  %case_stmt21 = bitcast %union.anon.3* %data20 to %struct.anon.7*
  %nominal_type22 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt21, i32 0, i32 4
  %26 = load %union.tree_node*, %union.tree_node** %nominal_type22, align 8
  store %union.tree_node* %26, %union.tree_node** %nominal_type, align 8
  %27 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp23 = icmp eq %union.tree_node* %27, %28
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.13
  call void @check_seenlabel()
  %29 = load %union.tree_node*, %union.tree_node** %value1.addr, align 8
  %cmp26 = icmp eq %union.tree_node* %29, null
  br i1 %cmp26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %if.end.25
  %30 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %type28 = bitcast %union.tree_node* %30 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 12
  %31 = load %union.tree_node*, %union.tree_node** %minval, align 8
  store %union.tree_node* %31, %union.tree_node** %value1.addr, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %if.end.25
  %32 = load %union.tree_node*, %union.tree_node** %value2.addr, align 8
  %cmp30 = icmp eq %union.tree_node* %32, null
  br i1 %cmp30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %if.end.29
  %33 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %type32 = bitcast %union.tree_node* %33 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 13
  %34 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  store %union.tree_node* %34, %union.tree_node** %value2.addr, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %if.end.29
  %35 = load %union.tree_node*, %union.tree_node** %value2.addr, align 8
  %cmp34 = icmp ne %union.tree_node* %35, null
  br i1 %cmp34, label %land.lhs.true.35, label %if.end.38

land.lhs.true.35:                                 ; preds = %if.end.33
  %36 = load %union.tree_node*, %union.tree_node** %value2.addr, align 8
  %37 = load %union.tree_node*, %union.tree_node** %value1.addr, align 8
  %call = call i32 @tree_int_cst_lt(%union.tree_node* %36, %union.tree_node* %37)
  %tobool36 = icmp ne i32 %call, 0
  br i1 %tobool36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %land.lhs.true.35
  store i32 4, i32* %retval
  br label %return

if.end.38:                                        ; preds = %land.lhs.true.35, %if.end.33
  %38 = load %union.tree_node*, %union.tree_node** %value2.addr, align 8
  %cmp39 = icmp eq %union.tree_node* %38, null
  br i1 %cmp39, label %if.then.40, label %if.end.43

if.then.40:                                       ; preds = %if.end.38
  %39 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8
  %type41 = bitcast %union.tree_node* %39 to %struct.tree_type*
  %maxval42 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 13
  %40 = load %union.tree_node*, %union.tree_node** %maxval42, align 8
  store %union.tree_node* %40, %union.tree_node** %value2.addr, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.40, %if.end.38
  %41 = load %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)** %converter.addr, align 8
  %42 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8
  %43 = load %union.tree_node*, %union.tree_node** %value1.addr, align 8
  %call44 = call %union.tree_node* %41(%union.tree_node* %42, %union.tree_node* %43)
  store %union.tree_node* %call44, %union.tree_node** %value1.addr, align 8
  %44 = load %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)** %converter.addr, align 8
  %45 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8
  %46 = load %union.tree_node*, %union.tree_node** %value2.addr, align 8
  %call45 = call %union.tree_node* %44(%union.tree_node* %45, %union.tree_node* %46)
  store %union.tree_node* %call45, %union.tree_node** %value2.addr, align 8
  %47 = load %union.tree_node*, %union.tree_node** %value1.addr, align 8
  %common46 = bitcast %union.tree_node* %47 to %struct.tree_common*
  %static_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2
  %bf.load = load i32, i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 18
  %bf.clear = and i32 %bf.lshr, 1
  %tobool47 = icmp ne i32 %bf.clear, 0
  br i1 %tobool47, label %if.then.50, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.43
  %48 = load %union.tree_node*, %union.tree_node** %value1.addr, align 8
  %49 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %call48 = call i32 @int_fits_type_p(%union.tree_node* %48, %union.tree_node* %49)
  %tobool49 = icmp ne i32 %call48, 0
  br i1 %tobool49, label %if.end.51, label %if.then.50

if.then.50:                                       ; preds = %lor.lhs.false, %if.end.43
  store i32 3, i32* %retval
  br label %return

if.end.51:                                        ; preds = %lor.lhs.false
  %50 = load %union.tree_node*, %union.tree_node** %value2.addr, align 8
  %common52 = bitcast %union.tree_node* %50 to %struct.tree_common*
  %static_flag53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2
  %bf.load54 = load i32, i32* %static_flag53, align 8
  %bf.lshr55 = lshr i32 %bf.load54, 18
  %bf.clear56 = and i32 %bf.lshr55, 1
  %tobool57 = icmp ne i32 %bf.clear56, 0
  br i1 %tobool57, label %if.then.61, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %if.end.51
  %51 = load %union.tree_node*, %union.tree_node** %value2.addr, align 8
  %52 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %call59 = call i32 @int_fits_type_p(%union.tree_node* %51, %union.tree_node* %52)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.end.62, label %if.then.61

if.then.61:                                       ; preds = %lor.lhs.false.58, %if.end.51
  store i32 3, i32* %retval
  br label %return

if.end.62:                                        ; preds = %lor.lhs.false.58
  %53 = load %union.tree_node*, %union.tree_node** %value1.addr, align 8
  %54 = load %union.tree_node*, %union.tree_node** %value2.addr, align 8
  %55 = load %union.tree_node*, %union.tree_node** %label.addr, align 8
  %56 = load %union.tree_node**, %union.tree_node*** %duplicate.addr, align 8
  %call63 = call i32 @add_case_node(%union.tree_node* %53, %union.tree_node* %54, %union.tree_node* %55, %union.tree_node** %56)
  store i32 %call63, i32* %retval
  br label %return

return:                                           ; preds = %if.end.62, %if.then.61, %if.then.50, %if.then.37, %if.then.24, %if.then.12, %if.then
  %57 = load i32, i32* %retval
  ret i32 %57
}

declare i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

declare i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define i64 @all_cases_count(%union.tree_node* %type, i32* %sparseness) #0 {
entry:
  %retval = alloca i64, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %sparseness.addr = alloca i32*, align 8
  %t = alloca %union.tree_node*, align 8
  %count = alloca i64, align 8
  %minval = alloca i64, align 8
  %lastval = alloca i64, align 8
  %thisval = alloca i64, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32* %sparseness, i32** %sparseness.addr, align 8
  %0 = load i32*, i32** %sparseness.addr, align 8
  store i32 0, i32* %0, align 4
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 11, label %sw.bb
    i32 12, label %sw.bb.1
    i32 6, label %sw.bb.2
    i32 10, label %sw.bb.18
  ]

sw.bb:                                            ; preds = %entry
  store i64 2, i64* %count, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  store i64 256, i64* %count, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.bb.2

sw.bb.2:                                          ; preds = %entry, %sw.default
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type3 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 13
  %3 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %cmp = icmp ne %union.tree_node* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.bb.2
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type4 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %maxval5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 13
  %6 = load %union.tree_node*, %union.tree_node** %maxval5, align 8
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type6 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %minval7 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 12
  %8 = load %union.tree_node*, %union.tree_node** %minval7, align 8
  %call = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %4, %union.tree_node* %6, %union.tree_node* %8)
  %call8 = call %union.tree_node* @fold(%union.tree_node* %call)
  store %union.tree_node* %call8, %union.tree_node** %t, align 8
  %cmp9 = icmp ne %union.tree_node* null, %call8
  br i1 %cmp9, label %land.lhs.true.10, label %if.else

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  %call11 = call %union.tree_node* @convert(%union.tree_node* %11, %union.tree_node* %12)
  %call12 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %9, %union.tree_node* %10, %union.tree_node* %call11)
  %call13 = call %union.tree_node* @fold(%union.tree_node* %call12)
  store %union.tree_node* %call13, %union.tree_node** %t, align 8
  %cmp14 = icmp ne %union.tree_node* null, %call13
  br i1 %cmp14, label %land.lhs.true.15, label %if.else

land.lhs.true.15:                                 ; preds = %land.lhs.true.10
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call16 = call i32 @host_integerp(%union.tree_node* %13, i32 1)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.15
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call17 = call i64 @tree_low_cst(%union.tree_node* %14, i32 1)
  store i64 %call17, i64* %count, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.15, %land.lhs.true.10, %land.lhs.true, %sw.bb.2
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %sw.epilog

sw.bb.18:                                         ; preds = %entry
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type19 = bitcast %union.tree_node* %15 to %struct.tree_type*
  %minval20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 12
  %16 = load %union.tree_node*, %union.tree_node** %minval20, align 8
  %call21 = call i32 @host_integerp(%union.tree_node* %16, i32 0)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %lor.lhs.false, label %if.then.31

lor.lhs.false:                                    ; preds = %sw.bb.18
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type23 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %maxval24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 13
  %18 = load %union.tree_node*, %union.tree_node** %maxval24, align 8
  %cmp25 = icmp eq %union.tree_node* %18, null
  br i1 %cmp25, label %if.then.31, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type27 = bitcast %union.tree_node* %19 to %struct.tree_type*
  %maxval28 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 13
  %20 = load %union.tree_node*, %union.tree_node** %maxval28, align 8
  %call29 = call i32 @host_integerp(%union.tree_node* %20, i32 0)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %lor.lhs.false.26, %lor.lhs.false, %sw.bb.18
  store i64 -1, i64* %retval
  br label %return

if.end.32:                                        ; preds = %lor.lhs.false.26
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type33 = bitcast %union.tree_node* %21 to %struct.tree_type*
  %minval34 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type33, i32 0, i32 12
  %22 = load %union.tree_node*, %union.tree_node** %minval34, align 8
  %call35 = call i64 @tree_low_cst(%union.tree_node* %22, i32 0)
  store i64 %call35, i64* %minval, align 8
  store i64 %call35, i64* %lastval, align 8
  store i64 0, i64* %count, align 8
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type36 = bitcast %union.tree_node* %23 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 1
  %24 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %24, %union.tree_node** %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.32
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8
  %cmp37 = icmp ne %union.tree_node* %25, null
  br i1 %cmp37, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list = bitcast %union.tree_node* %26 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %27 = load %union.tree_node*, %union.tree_node** %value, align 8
  %call38 = call i64 @tree_low_cst(%union.tree_node* %27, i32 0)
  store i64 %call38, i64* %thisval, align 8
  %28 = load i32*, i32** %sparseness.addr, align 8
  %29 = load i32, i32* %28, align 4
  %cmp39 = icmp eq i32 %29, 2
  br i1 %cmp39, label %if.then.42, label %lor.lhs.false.40

lor.lhs.false.40:                                 ; preds = %for.body
  %30 = load i64, i64* %thisval, align 8
  %31 = load i64, i64* %lastval, align 8
  %cmp41 = icmp sle i64 %30, %31
  br i1 %cmp41, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %lor.lhs.false.40, %for.body
  %32 = load i32*, i32** %sparseness.addr, align 8
  store i32 2, i32* %32, align 4
  br label %if.end.47

if.else.43:                                       ; preds = %lor.lhs.false.40
  %33 = load i64, i64* %thisval, align 8
  %34 = load i64, i64* %minval, align 8
  %35 = load i64, i64* %count, align 8
  %add = add nsw i64 %34, %35
  %cmp44 = icmp ne i64 %33, %add
  br i1 %cmp44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.else.43
  %36 = load i32*, i32** %sparseness.addr, align 8
  store i32 1, i32* %36, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.45, %if.else.43
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.42
  %37 = load i64, i64* %thisval, align 8
  store i64 %37, i64* %lastval, align 8
  %38 = load i64, i64* %count, align 8
  %inc = add nsw i64 %38, 1
  store i64 %inc, i64* %count, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.47
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common48 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 0
  %40 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %40, %union.tree_node** %t, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end, %if.end, %sw.bb.1, %sw.bb
  %41 = load i64, i64* %count, align 8
  store i64 %41, i64* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.then.31, %if.else
  %42 = load i64, i64* %retval
  ret i64 %42
}

declare i32 @host_integerp(%union.tree_node*, i32) #2

declare i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: nounwind uwtable
define void @mark_seen_cases(%union.tree_node* %type, i8* %cases_seen, i64 %count, i32 %sparseness) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %cases_seen.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %sparseness.addr = alloca i32, align 4
  %next_node_to_try = alloca %union.tree_node*, align 8
  %next_node_offset = alloca i64, align 8
  %n = alloca %struct.case_node*, align 8
  %root = alloca %struct.case_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %xlo = alloca i64, align 8
  %xlo68 = alloca i64, align 8
  %xhi = alloca i64, align 8
  %t69 = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i8* %cases_seen, i8** %cases_seen.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i32 %sparseness, i32* %sparseness.addr, align 4
  store %union.tree_node* null, %union.tree_node** %next_node_to_try, align 8
  store i64 0, i64* %next_node_offset, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 4
  %2 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %2, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %case_list = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 1
  %3 = load %struct.case_node*, %struct.case_node** %case_list, align 8
  store %struct.case_node* %3, %struct.case_node** %root, align 8
  %call = call %union.tree_node* @make_node(i32 25)
  store %union.tree_node* %call, %union.tree_node** %val, align 8
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %5 = load %union.tree_node*, %union.tree_node** %val, align 8
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  store %union.tree_node* %4, %union.tree_node** %type1, align 8
  %6 = load %struct.case_node*, %struct.case_node** %root, align 8
  %tobool = icmp ne %struct.case_node* %6, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.154

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %sparseness.addr, align 4
  %cmp = icmp eq i32 %7, 2
  br i1 %cmp, label %if.then.2, label %if.else.37

if.then.2:                                        ; preds = %if.else
  %8 = load %struct.case_node*, %struct.case_node** %root, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %8, i32 0, i32 3
  %9 = load %union.tree_node*, %union.tree_node** %low, align 8
  %common3 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type4, align 8
  %11 = load %union.tree_node*, %union.tree_node** %val, align 8
  %common5 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 1
  store %union.tree_node* %10, %union.tree_node** %type6, align 8
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type7 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %13, %union.tree_node** %t, align 8
  store i64 0, i64* %xlo, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8
  %cmp8 = icmp ne %union.tree_node* %14, null
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list = bitcast %union.tree_node* %15 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %16 = load %union.tree_node*, %union.tree_node** %value, align 8
  %int_cst = bitcast %union.tree_node* %16 to %struct.tree_int_cst*
  %int_cst9 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low10 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst9, i32 0, i32 0
  %17 = load i64, i64* %low10, align 8
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst11 = bitcast %union.tree_node* %18 to %struct.tree_int_cst*
  %int_cst12 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst11, i32 0, i32 2
  %low13 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst12, i32 0, i32 0
  store i64 %17, i64* %low13, align 8
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list14 = bitcast %union.tree_node* %19 to %struct.tree_list*
  %value15 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list14, i32 0, i32 2
  %20 = load %union.tree_node*, %union.tree_node** %value15, align 8
  %int_cst16 = bitcast %union.tree_node* %20 to %struct.tree_int_cst*
  %int_cst17 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst16, i32 0, i32 2
  %high = getelementptr inbounds %struct.anon, %struct.anon* %int_cst17, i32 0, i32 1
  %21 = load i64, i64* %high, align 8
  %22 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst18 = bitcast %union.tree_node* %22 to %struct.tree_int_cst*
  %int_cst19 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst18, i32 0, i32 2
  %high20 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst19, i32 0, i32 1
  store i64 %21, i64* %high20, align 8
  %23 = load %struct.case_node*, %struct.case_node** %root, align 8
  store %struct.case_node* %23, %struct.case_node** %n, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  %24 = load %union.tree_node*, %union.tree_node** %val, align 8
  %25 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low21 = getelementptr inbounds %struct.case_node, %struct.case_node* %25, i32 0, i32 3
  %26 = load %union.tree_node*, %union.tree_node** %low21, align 8
  %call22 = call i32 @tree_int_cst_lt(%union.tree_node* %24, %union.tree_node* %26)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body
  %27 = load %struct.case_node*, %struct.case_node** %n, align 8
  %left = getelementptr inbounds %struct.case_node, %struct.case_node* %27, i32 0, i32 0
  %28 = load %struct.case_node*, %struct.case_node** %left, align 8
  store %struct.case_node* %28, %struct.case_node** %n, align 8
  br label %if.end.34

if.else.25:                                       ; preds = %do.body
  %29 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high26 = getelementptr inbounds %struct.case_node, %struct.case_node* %29, i32 0, i32 4
  %30 = load %union.tree_node*, %union.tree_node** %high26, align 8
  %31 = load %union.tree_node*, %union.tree_node** %val, align 8
  %call27 = call i32 @tree_int_cst_lt(%union.tree_node* %30, %union.tree_node* %31)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %if.else.25
  %32 = load %struct.case_node*, %struct.case_node** %n, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %32, i32 0, i32 1
  %33 = load %struct.case_node*, %struct.case_node** %right, align 8
  store %struct.case_node* %33, %struct.case_node** %n, align 8
  br label %if.end

if.else.30:                                       ; preds = %if.else.25
  %34 = load i64, i64* %xlo, align 8
  %conv = trunc i64 %34 to i32
  %rem = urem i32 %conv, 8
  %shl = shl i32 1, %rem
  %35 = load i64, i64* %xlo, align 8
  %conv31 = trunc i64 %35 to i32
  %div = udiv i32 %conv31, 8
  %idxprom = zext i32 %div to i64
  %36 = load i8*, i8** %cases_seen.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %36, i64 %idxprom
  %37 = load i8, i8* %arrayidx, align 1
  %conv32 = zext i8 %37 to i32
  %or = or i32 %conv32, %shl
  %conv33 = trunc i32 %or to i8
  store i8 %conv33, i8* %arrayidx, align 1
  br label %do.end

if.end:                                           ; preds = %if.then.29
  br label %if.end.34

if.end.34:                                        ; preds = %if.end, %if.then.24
  br label %do.cond

do.cond:                                          ; preds = %if.end.34
  %38 = load %struct.case_node*, %struct.case_node** %n, align 8
  %tobool35 = icmp ne %struct.case_node* %38, null
  br i1 %tobool35, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.else.30
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common36 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 0
  %40 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %40, %union.tree_node** %t, align 8
  %41 = load i64, i64* %xlo, align 8
  %inc = add i64 %41, 1
  store i64 %inc, i64* %xlo, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.153

if.else.37:                                       ; preds = %if.else
  %42 = load %struct.case_node*, %struct.case_node** %root, align 8
  %left38 = getelementptr inbounds %struct.case_node, %struct.case_node* %42, i32 0, i32 0
  %43 = load %struct.case_node*, %struct.case_node** %left38, align 8
  %tobool39 = icmp ne %struct.case_node* %43, null
  br i1 %tobool39, label %if.then.40, label %if.end.47

if.then.40:                                       ; preds = %if.else.37
  %44 = load %struct.case_node*, %struct.case_node** %root, align 8
  %call41 = call %struct.case_node* @case_tree2list(%struct.case_node* %44, %struct.case_node* null)
  store %struct.case_node* %call41, %struct.case_node** %root, align 8
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt42 = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 1
  %46 = load %struct.stmt_status*, %struct.stmt_status** %stmt42, align 8
  %x_case_stack43 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %46, i32 0, i32 4
  %47 = load %struct.nesting*, %struct.nesting** %x_case_stack43, align 8
  %data44 = getelementptr inbounds %struct.nesting, %struct.nesting* %47, i32 0, i32 4
  %case_stmt45 = bitcast %union.anon.3* %data44 to %struct.anon.7*
  %case_list46 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt45, i32 0, i32 1
  store %struct.case_node* %call41, %struct.case_node** %case_list46, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.40, %if.else.37
  %48 = load %struct.case_node*, %struct.case_node** %root, align 8
  store %struct.case_node* %48, %struct.case_node** %n, align 8
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.150, %if.end.47
  %49 = load %struct.case_node*, %struct.case_node** %n, align 8
  %tobool49 = icmp ne %struct.case_node* %49, null
  br i1 %tobool49, label %for.body.50, label %for.end.152

for.body.50:                                      ; preds = %for.cond.48
  %50 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low51 = getelementptr inbounds %struct.case_node, %struct.case_node* %50, i32 0, i32 3
  %51 = load %union.tree_node*, %union.tree_node** %low51, align 8
  %int_cst52 = bitcast %union.tree_node* %51 to %struct.tree_int_cst*
  %int_cst53 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst52, i32 0, i32 2
  %low54 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst53, i32 0, i32 0
  %52 = load i64, i64* %low54, align 8
  %53 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst55 = bitcast %union.tree_node* %53 to %struct.tree_int_cst*
  %int_cst56 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst55, i32 0, i32 2
  %low57 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst56, i32 0, i32 0
  store i64 %52, i64* %low57, align 8
  %54 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low58 = getelementptr inbounds %struct.case_node, %struct.case_node* %54, i32 0, i32 3
  %55 = load %union.tree_node*, %union.tree_node** %low58, align 8
  %int_cst59 = bitcast %union.tree_node* %55 to %struct.tree_int_cst*
  %int_cst60 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst59, i32 0, i32 2
  %high61 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst60, i32 0, i32 1
  %56 = load i64, i64* %high61, align 8
  %57 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst62 = bitcast %union.tree_node* %57 to %struct.tree_int_cst*
  %int_cst63 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst62, i32 0, i32 2
  %high64 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst63, i32 0, i32 1
  store i64 %56, i64* %high64, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.136, %for.body.50
  %58 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high65 = getelementptr inbounds %struct.case_node, %struct.case_node* %58, i32 0, i32 4
  %59 = load %union.tree_node*, %union.tree_node** %high65, align 8
  %60 = load %union.tree_node*, %union.tree_node** %val, align 8
  %call66 = call i32 @tree_int_cst_lt(%union.tree_node* %59, %union.tree_node* %60)
  %tobool67 = icmp ne i32 %call66, 0
  %lnot = xor i1 %tobool67, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %61 = load i32, i32* %sparseness.addr, align 4
  %tobool70 = icmp ne i32 %61, 0
  br i1 %tobool70, label %land.lhs.true, label %if.else.99

land.lhs.true:                                    ; preds = %while.body
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type71 = bitcast %union.tree_node* %62 to %struct.tree_type*
  %values72 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type71, i32 0, i32 1
  %63 = load %union.tree_node*, %union.tree_node** %values72, align 8
  %cmp73 = icmp ne %union.tree_node* %63, null
  br i1 %cmp73, label %if.then.75, label %if.else.99

if.then.75:                                       ; preds = %land.lhs.true
  %64 = load %union.tree_node*, %union.tree_node** %next_node_to_try, align 8
  store %union.tree_node* %64, %union.tree_node** %t69, align 8
  %65 = load i64, i64* %next_node_offset, align 8
  store i64 %65, i64* %xlo68, align 8
  store i64 0, i64* %xhi, align 8
  br label %for.cond.76

for.cond.76:                                      ; preds = %if.end.97, %if.then.75
  %66 = load %union.tree_node*, %union.tree_node** %t69, align 8
  %cmp77 = icmp eq %union.tree_node* %66, null
  br i1 %cmp77, label %if.then.79, label %if.end.82

if.then.79:                                       ; preds = %for.cond.76
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type80 = bitcast %union.tree_node* %67 to %struct.tree_type*
  %values81 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type80, i32 0, i32 1
  %68 = load %union.tree_node*, %union.tree_node** %values81, align 8
  store %union.tree_node* %68, %union.tree_node** %t69, align 8
  store i64 0, i64* %xlo68, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.79, %for.cond.76
  %69 = load %union.tree_node*, %union.tree_node** %val, align 8
  %70 = load %union.tree_node*, %union.tree_node** %t69, align 8
  %list83 = bitcast %union.tree_node* %70 to %struct.tree_list*
  %value84 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list83, i32 0, i32 2
  %71 = load %union.tree_node*, %union.tree_node** %value84, align 8
  %call85 = call i32 @tree_int_cst_equal(%union.tree_node* %69, %union.tree_node* %71)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.then.87, label %if.end.90

if.then.87:                                       ; preds = %if.end.82
  %72 = load %union.tree_node*, %union.tree_node** %t69, align 8
  %common88 = bitcast %union.tree_node* %72 to %struct.tree_common*
  %chain89 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 0
  %73 = load %union.tree_node*, %union.tree_node** %chain89, align 8
  store %union.tree_node* %73, %union.tree_node** %next_node_to_try, align 8
  %74 = load i64, i64* %xlo68, align 8
  %add = add i64 %74, 1
  store i64 %add, i64* %next_node_offset, align 8
  br label %for.end.98

if.end.90:                                        ; preds = %if.end.82
  %75 = load i64, i64* %xlo68, align 8
  %inc91 = add i64 %75, 1
  store i64 %inc91, i64* %xlo68, align 8
  %76 = load %union.tree_node*, %union.tree_node** %t69, align 8
  %common92 = bitcast %union.tree_node* %76 to %struct.tree_common*
  %chain93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 0
  %77 = load %union.tree_node*, %union.tree_node** %chain93, align 8
  store %union.tree_node* %77, %union.tree_node** %t69, align 8
  %78 = load %union.tree_node*, %union.tree_node** %t69, align 8
  %79 = load %union.tree_node*, %union.tree_node** %next_node_to_try, align 8
  %cmp94 = icmp eq %union.tree_node* %78, %79
  br i1 %cmp94, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %if.end.90
  store i64 -1, i64* %xlo68, align 8
  br label %for.end.98

if.end.97:                                        ; preds = %if.end.90
  br label %for.cond.76

for.end.98:                                       ; preds = %if.then.96, %if.then.87
  br label %if.end.119

if.else.99:                                       ; preds = %land.lhs.true, %while.body
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type100 = bitcast %union.tree_node* %80 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type100, i32 0, i32 12
  %81 = load %union.tree_node*, %union.tree_node** %minval, align 8
  store %union.tree_node* %81, %union.tree_node** %t69, align 8
  %82 = load %union.tree_node*, %union.tree_node** %t69, align 8
  %tobool101 = icmp ne %union.tree_node* %82, null
  br i1 %tobool101, label %if.then.102, label %if.else.110

if.then.102:                                      ; preds = %if.else.99
  %83 = load %union.tree_node*, %union.tree_node** %t69, align 8
  %int_cst103 = bitcast %union.tree_node* %83 to %struct.tree_int_cst*
  %int_cst104 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst103, i32 0, i32 2
  %low105 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst104, i32 0, i32 0
  %84 = load i64, i64* %low105, align 8
  %85 = load %union.tree_node*, %union.tree_node** %t69, align 8
  %int_cst106 = bitcast %union.tree_node* %85 to %struct.tree_int_cst*
  %int_cst107 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst106, i32 0, i32 2
  %high108 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst107, i32 0, i32 1
  %86 = load i64, i64* %high108, align 8
  %call109 = call i32 @neg_double(i64 %84, i64 %86, i64* %xlo68, i64* %xhi)
  br label %if.end.111

if.else.110:                                      ; preds = %if.else.99
  store i64 0, i64* %xhi, align 8
  store i64 0, i64* %xlo68, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.110, %if.then.102
  %87 = load i64, i64* %xlo68, align 8
  %88 = load i64, i64* %xhi, align 8
  %89 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst112 = bitcast %union.tree_node* %89 to %struct.tree_int_cst*
  %int_cst113 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst112, i32 0, i32 2
  %low114 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst113, i32 0, i32 0
  %90 = load i64, i64* %low114, align 8
  %91 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst115 = bitcast %union.tree_node* %91 to %struct.tree_int_cst*
  %int_cst116 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst115, i32 0, i32 2
  %high117 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst116, i32 0, i32 1
  %92 = load i64, i64* %high117, align 8
  %call118 = call i32 @add_double(i64 %87, i64 %88, i64 %90, i64 %92, i64* %xlo68, i64* %xhi)
  br label %if.end.119

if.end.119:                                       ; preds = %if.end.111, %for.end.98
  %93 = load i64, i64* %xhi, align 8
  %cmp120 = icmp eq i64 %93, 0
  br i1 %cmp120, label %land.lhs.true.122, label %if.end.136

land.lhs.true.122:                                ; preds = %if.end.119
  %94 = load i64, i64* %xlo68, align 8
  %95 = load i64, i64* %count.addr, align 8
  %cmp123 = icmp ult i64 %94, %95
  br i1 %cmp123, label %if.then.125, label %if.end.136

if.then.125:                                      ; preds = %land.lhs.true.122
  %96 = load i64, i64* %xlo68, align 8
  %conv126 = trunc i64 %96 to i32
  %rem127 = urem i32 %conv126, 8
  %shl128 = shl i32 1, %rem127
  %97 = load i64, i64* %xlo68, align 8
  %conv129 = trunc i64 %97 to i32
  %div130 = udiv i32 %conv129, 8
  %idxprom131 = zext i32 %div130 to i64
  %98 = load i8*, i8** %cases_seen.addr, align 8
  %arrayidx132 = getelementptr inbounds i8, i8* %98, i64 %idxprom131
  %99 = load i8, i8* %arrayidx132, align 1
  %conv133 = zext i8 %99 to i32
  %or134 = or i32 %conv133, %shl128
  %conv135 = trunc i32 %or134 to i8
  store i8 %conv135, i8* %arrayidx132, align 1
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.125, %land.lhs.true.122, %if.end.119
  %100 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst137 = bitcast %union.tree_node* %100 to %struct.tree_int_cst*
  %int_cst138 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst137, i32 0, i32 2
  %low139 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst138, i32 0, i32 0
  %101 = load i64, i64* %low139, align 8
  %102 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst140 = bitcast %union.tree_node* %102 to %struct.tree_int_cst*
  %int_cst141 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst140, i32 0, i32 2
  %high142 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst141, i32 0, i32 1
  %103 = load i64, i64* %high142, align 8
  %104 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst143 = bitcast %union.tree_node* %104 to %struct.tree_int_cst*
  %int_cst144 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst143, i32 0, i32 2
  %low145 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst144, i32 0, i32 0
  %105 = load %union.tree_node*, %union.tree_node** %val, align 8
  %int_cst146 = bitcast %union.tree_node* %105 to %struct.tree_int_cst*
  %int_cst147 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst146, i32 0, i32 2
  %high148 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst147, i32 0, i32 1
  %call149 = call i32 @add_double(i64 %101, i64 %103, i64 1, i64 0, i64* %low145, i64* %high148)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc.150

for.inc.150:                                      ; preds = %while.end
  %106 = load %struct.case_node*, %struct.case_node** %n, align 8
  %right151 = getelementptr inbounds %struct.case_node, %struct.case_node* %106, i32 0, i32 1
  %107 = load %struct.case_node*, %struct.case_node** %right151, align 8
  store %struct.case_node* %107, %struct.case_node** %n, align 8
  br label %for.cond.48

for.end.152:                                      ; preds = %for.cond.48
  br label %if.end.153

if.end.153:                                       ; preds = %for.end.152, %for.end
  br label %if.end.154

if.end.154:                                       ; preds = %if.end.153, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.case_node* @case_tree2list(%struct.case_node* %node, %struct.case_node* %right) #0 {
entry:
  %retval = alloca %struct.case_node*, align 8
  %node.addr = alloca %struct.case_node*, align 8
  %right.addr = alloca %struct.case_node*, align 8
  %left = alloca %struct.case_node*, align 8
  store %struct.case_node* %node, %struct.case_node** %node.addr, align 8
  store %struct.case_node* %right, %struct.case_node** %right.addr, align 8
  %0 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right1 = getelementptr inbounds %struct.case_node, %struct.case_node* %0, i32 0, i32 1
  %1 = load %struct.case_node*, %struct.case_node** %right1, align 8
  %tobool = icmp ne %struct.case_node* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right2 = getelementptr inbounds %struct.case_node, %struct.case_node* %2, i32 0, i32 1
  %3 = load %struct.case_node*, %struct.case_node** %right2, align 8
  %4 = load %struct.case_node*, %struct.case_node** %right.addr, align 8
  %call = call %struct.case_node* @case_tree2list(%struct.case_node* %3, %struct.case_node* %4)
  store %struct.case_node* %call, %struct.case_node** %right.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.case_node*, %struct.case_node** %right.addr, align 8
  %6 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right3 = getelementptr inbounds %struct.case_node, %struct.case_node* %6, i32 0, i32 1
  store %struct.case_node* %5, %struct.case_node** %right3, align 8
  %7 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left4 = getelementptr inbounds %struct.case_node, %struct.case_node* %7, i32 0, i32 0
  %8 = load %struct.case_node*, %struct.case_node** %left4, align 8
  store %struct.case_node* %8, %struct.case_node** %left, align 8
  %tobool5 = icmp ne %struct.case_node* %8, null
  br i1 %tobool5, label %if.then.6, label %if.end.9

if.then.6:                                        ; preds = %if.end
  %9 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left7 = getelementptr inbounds %struct.case_node, %struct.case_node* %9, i32 0, i32 0
  store %struct.case_node* null, %struct.case_node** %left7, align 8
  %10 = load %struct.case_node*, %struct.case_node** %left, align 8
  %11 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %call8 = call %struct.case_node* @case_tree2list(%struct.case_node* %10, %struct.case_node* %11)
  store %struct.case_node* %call8, %struct.case_node** %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %12 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  store %struct.case_node* %12, %struct.case_node** %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.6
  %13 = load %struct.case_node*, %struct.case_node** %retval
  ret %struct.case_node* %13
}

declare i32 @neg_double(i64, i64, i64*, i64*) #2

declare i32 @add_double(i64, i64, i64, i64, i64*, i64*) #2

; Function Attrs: nounwind uwtable
define void @check_for_full_enumeration_handling(%union.tree_node* %type) #0 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %n = alloca %struct.case_node*, align 8
  %chain = alloca %union.tree_node*, align 8
  %sparseness = alloca i32, align 4
  %size = alloca i64, align 8
  %cases_seen = alloca i8*, align 8
  %bytes_needed = alloca i64, align 8
  %i = alloca i64, align 8
  %v = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 0, i32* %sparseness, align 4
  %0 = load i32, i32* @warn_switch, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.154

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call i64 @all_cases_count(%union.tree_node* %1, i32* %sparseness)
  store i64 %call, i64* %size, align 8
  %2 = load i64, i64* %size, align 8
  %add = add nsw i64 %2, 8
  %div = sdiv i64 %add, 8
  store i64 %div, i64* %bytes_needed, align 8
  %3 = load i64, i64* %size, align 8
  %cmp = icmp sgt i64 %3, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.17

land.lhs.true:                                    ; preds = %if.end
  %4 = load i64, i64* %size, align 8
  %cmp1 = icmp slt i64 %4, 600000
  br i1 %cmp1, label %land.lhs.true.2, label %if.end.17

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %5 = load i64, i64* %bytes_needed, align 8
  %call3 = call noalias i8* @calloc(i64 %5, i64 1) #5
  store i8* %call3, i8** %cases_seen, align 8
  %cmp4 = icmp ne i8* %call3, null
  br i1 %cmp4, label %if.then.5, label %if.end.17

if.then.5:                                        ; preds = %land.lhs.true.2
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type6 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %values, align 8
  store %union.tree_node* %7, %union.tree_node** %v, align 8
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %9 = load i8*, i8** %cases_seen, align 8
  %10 = load i64, i64* %size, align 8
  %11 = load i32, i32* %sparseness, align 4
  call void @mark_seen_cases(%union.tree_node* %8, i8* %9, i64 %10, i32 %11)
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.5
  %12 = load %union.tree_node*, %union.tree_node** %v, align 8
  %cmp7 = icmp ne %union.tree_node* %12, null
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %13 = load i64, i64* %i, align 8
  %14 = load i64, i64* %size, align 8
  %cmp8 = icmp slt i64 %13, %14
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %15 = phi i1 [ false, %for.cond ], [ %cmp8, %land.rhs ]
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %16 = load i64, i64* %i, align 8
  %conv = trunc i64 %16 to i32
  %div9 = udiv i32 %conv, 8
  %idxprom = zext i32 %div9 to i64
  %17 = load i8*, i8** %cases_seen, align 8
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %idxprom
  %18 = load i8, i8* %arrayidx, align 1
  %conv10 = zext i8 %18 to i32
  %19 = load i64, i64* %i, align 8
  %conv11 = trunc i64 %19 to i32
  %rem = urem i32 %conv11, 8
  %shl = shl i32 1, %rem
  %and = and i32 %conv10, %shl
  %cmp12 = icmp eq i32 %and, 0
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %for.body
  %20 = load %union.tree_node*, %union.tree_node** %v, align 8
  %list = bitcast %union.tree_node* %20 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %21 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %identifier = bitcast %union.tree_node* %21 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %22 = load i8*, i8** %str, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.18, i32 0, i32 0), i8* %22)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.15
  %23 = load i64, i64* %i, align 8
  %inc = add nsw i64 %23, 1
  store i64 %inc, i64* %i, align 8
  %24 = load %union.tree_node*, %union.tree_node** %v, align 8
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*
  %chain16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %25 = load %union.tree_node*, %union.tree_node** %chain16, align 8
  store %union.tree_node* %25, %union.tree_node** %v, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %26 = load i8*, i8** %cases_seen, align 8
  call void @free(i8* %26) #5
  br label %if.end.17

if.end.17:                                        ; preds = %for.end, %land.lhs.true.2, %land.lhs.true, %if.end
  %27 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 1
  %28 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %28, i32 0, i32 4
  %29 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %29, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %case_list = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 1
  %30 = load %struct.case_node*, %struct.case_node** %case_list, align 8
  %tobool18 = icmp ne %struct.case_node* %30, null
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.38

land.lhs.true.19:                                 ; preds = %if.end.17
  %31 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt20 = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 1
  %32 = load %struct.stmt_status*, %struct.stmt_status** %stmt20, align 8
  %x_case_stack21 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %32, i32 0, i32 4
  %33 = load %struct.nesting*, %struct.nesting** %x_case_stack21, align 8
  %data22 = getelementptr inbounds %struct.nesting, %struct.nesting* %33, i32 0, i32 4
  %case_stmt23 = bitcast %union.anon.3* %data22 to %struct.anon.7*
  %case_list24 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt23, i32 0, i32 1
  %34 = load %struct.case_node*, %struct.case_node** %case_list24, align 8
  %left = getelementptr inbounds %struct.case_node, %struct.case_node* %34, i32 0, i32 0
  %35 = load %struct.case_node*, %struct.case_node** %left, align 8
  %tobool25 = icmp ne %struct.case_node* %35, null
  br i1 %tobool25, label %if.then.26, label %if.end.38

if.then.26:                                       ; preds = %land.lhs.true.19
  %36 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt27 = getelementptr inbounds %struct.function, %struct.function* %36, i32 0, i32 1
  %37 = load %struct.stmt_status*, %struct.stmt_status** %stmt27, align 8
  %x_case_stack28 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %37, i32 0, i32 4
  %38 = load %struct.nesting*, %struct.nesting** %x_case_stack28, align 8
  %data29 = getelementptr inbounds %struct.nesting, %struct.nesting* %38, i32 0, i32 4
  %case_stmt30 = bitcast %union.anon.3* %data29 to %struct.anon.7*
  %case_list31 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt30, i32 0, i32 1
  %39 = load %struct.case_node*, %struct.case_node** %case_list31, align 8
  %call32 = call %struct.case_node* @case_tree2list(%struct.case_node* %39, %struct.case_node* null)
  %40 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt33 = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 1
  %41 = load %struct.stmt_status*, %struct.stmt_status** %stmt33, align 8
  %x_case_stack34 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %41, i32 0, i32 4
  %42 = load %struct.nesting*, %struct.nesting** %x_case_stack34, align 8
  %data35 = getelementptr inbounds %struct.nesting, %struct.nesting* %42, i32 0, i32 4
  %case_stmt36 = bitcast %union.anon.3* %data35 to %struct.anon.7*
  %case_list37 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt36, i32 0, i32 1
  store %struct.case_node* %call32, %struct.case_node** %case_list37, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.26, %land.lhs.true.19, %if.end.17
  %43 = load i32, i32* @warn_switch, align 4
  %tobool39 = icmp ne i32 %43, 0
  br i1 %tobool39, label %if.then.40, label %if.end.154

if.then.40:                                       ; preds = %if.end.38
  %44 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt41 = getelementptr inbounds %struct.function, %struct.function* %44, i32 0, i32 1
  %45 = load %struct.stmt_status*, %struct.stmt_status** %stmt41, align 8
  %x_case_stack42 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %45, i32 0, i32 4
  %46 = load %struct.nesting*, %struct.nesting** %x_case_stack42, align 8
  %data43 = getelementptr inbounds %struct.nesting, %struct.nesting* %46, i32 0, i32 4
  %case_stmt44 = bitcast %union.anon.3* %data43 to %struct.anon.7*
  %case_list45 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt44, i32 0, i32 1
  %47 = load %struct.case_node*, %struct.case_node** %case_list45, align 8
  store %struct.case_node* %47, %struct.case_node** %n, align 8
  br label %for.cond.46

for.cond.46:                                      ; preds = %for.inc.152, %if.then.40
  %48 = load %struct.case_node*, %struct.case_node** %n, align 8
  %tobool47 = icmp ne %struct.case_node* %48, null
  br i1 %tobool47, label %for.body.48, label %for.end.153

for.body.48:                                      ; preds = %for.cond.46
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type49 = bitcast %union.tree_node* %49 to %struct.tree_type*
  %values50 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 1
  %50 = load %union.tree_node*, %union.tree_node** %values50, align 8
  store %union.tree_node* %50, %union.tree_node** %chain, align 8
  br label %for.cond.51

for.cond.51:                                      ; preds = %for.inc.59, %for.body.48
  %51 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %tobool52 = icmp ne %union.tree_node* %51, null
  br i1 %tobool52, label %land.rhs.53, label %land.end.57

land.rhs.53:                                      ; preds = %for.cond.51
  %52 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %52, i32 0, i32 3
  %53 = load %union.tree_node*, %union.tree_node** %low, align 8
  %54 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %list54 = bitcast %union.tree_node* %54 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list54, i32 0, i32 2
  %55 = load %union.tree_node*, %union.tree_node** %value, align 8
  %call55 = call i32 @tree_int_cst_equal(%union.tree_node* %53, %union.tree_node* %55)
  %tobool56 = icmp ne i32 %call55, 0
  %lnot = xor i1 %tobool56, true
  br label %land.end.57

land.end.57:                                      ; preds = %land.rhs.53, %for.cond.51
  %56 = phi i1 [ false, %for.cond.51 ], [ %lnot, %land.rhs.53 ]
  br i1 %56, label %for.body.58, label %for.end.62

for.body.58:                                      ; preds = %land.end.57
  br label %for.inc.59

for.inc.59:                                       ; preds = %for.body.58
  %57 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %common60 = bitcast %union.tree_node* %57 to %struct.tree_common*
  %chain61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 0
  %58 = load %union.tree_node*, %union.tree_node** %chain61, align 8
  store %union.tree_node* %58, %union.tree_node** %chain, align 8
  br label %for.cond.51

for.end.62:                                       ; preds = %land.end.57
  %59 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %tobool63 = icmp ne %union.tree_node* %59, null
  br i1 %tobool63, label %if.end.90, label %if.then.64

if.then.64:                                       ; preds = %for.end.62
  %60 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type65 = bitcast %union.tree_node* %60 to %struct.tree_type*
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type65, i32 0, i32 11
  %61 = load %union.tree_node*, %union.tree_node** %name, align 8
  %cmp66 = icmp eq %union.tree_node* %61, null
  br i1 %cmp66, label %if.then.68, label %if.else

if.then.68:                                       ; preds = %if.then.64
  %62 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low69 = getelementptr inbounds %struct.case_node, %struct.case_node* %62, i32 0, i32 3
  %63 = load %union.tree_node*, %union.tree_node** %low69, align 8
  %int_cst = bitcast %union.tree_node* %63 to %struct.tree_int_cst*
  %int_cst70 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low71 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst70, i32 0, i32 0
  %64 = load i64, i64* %low71, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i64 %64)
  br label %if.end.89

if.else:                                          ; preds = %if.then.64
  %65 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low72 = getelementptr inbounds %struct.case_node, %struct.case_node* %65, i32 0, i32 3
  %66 = load %union.tree_node*, %union.tree_node** %low72, align 8
  %int_cst73 = bitcast %union.tree_node* %66 to %struct.tree_int_cst*
  %int_cst74 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst73, i32 0, i32 2
  %low75 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst74, i32 0, i32 0
  %67 = load i64, i64* %low75, align 8
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type76 = bitcast %union.tree_node* %68 to %struct.tree_type*
  %name77 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type76, i32 0, i32 11
  %69 = load %union.tree_node*, %union.tree_node** %name77, align 8
  %common78 = bitcast %union.tree_node* %69 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp79 = icmp eq i32 %bf.clear, 1
  br i1 %cmp79, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type81 = bitcast %union.tree_node* %70 to %struct.tree_type*
  %name82 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type81, i32 0, i32 11
  %71 = load %union.tree_node*, %union.tree_node** %name82, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %72 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type83 = bitcast %union.tree_node* %72 to %struct.tree_type*
  %name84 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type83, i32 0, i32 11
  %73 = load %union.tree_node*, %union.tree_node** %name84, align 8
  %decl = bitcast %union.tree_node* %73 to %struct.tree_decl*
  %name85 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 8
  %74 = load %union.tree_node*, %union.tree_node** %name85, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %71, %cond.true ], [ %74, %cond.false ]
  %identifier86 = bitcast %union.tree_node* %cond to %struct.tree_identifier*
  %id87 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier86, i32 0, i32 1
  %str88 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id87, i32 0, i32 1
  %75 = load i8*, i8** %str88, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.20, i32 0, i32 0), i64 %67, i8* %75)
  br label %if.end.89

if.end.89:                                        ; preds = %cond.end, %if.then.68
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %for.end.62
  %76 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low91 = getelementptr inbounds %struct.case_node, %struct.case_node* %76, i32 0, i32 3
  %77 = load %union.tree_node*, %union.tree_node** %low91, align 8
  %78 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %78, i32 0, i32 4
  %79 = load %union.tree_node*, %union.tree_node** %high, align 8
  %call92 = call i32 @tree_int_cst_equal(%union.tree_node* %77, %union.tree_node* %79)
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %if.end.151, label %if.then.94

if.then.94:                                       ; preds = %if.end.90
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type95 = bitcast %union.tree_node* %80 to %struct.tree_type*
  %values96 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type95, i32 0, i32 1
  %81 = load %union.tree_node*, %union.tree_node** %values96, align 8
  store %union.tree_node* %81, %union.tree_node** %chain, align 8
  br label %for.cond.97

for.cond.97:                                      ; preds = %for.inc.108, %if.then.94
  %82 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %tobool98 = icmp ne %union.tree_node* %82, null
  br i1 %tobool98, label %land.rhs.99, label %land.end.106

land.rhs.99:                                      ; preds = %for.cond.97
  %83 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high100 = getelementptr inbounds %struct.case_node, %struct.case_node* %83, i32 0, i32 4
  %84 = load %union.tree_node*, %union.tree_node** %high100, align 8
  %85 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %list101 = bitcast %union.tree_node* %85 to %struct.tree_list*
  %value102 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list101, i32 0, i32 2
  %86 = load %union.tree_node*, %union.tree_node** %value102, align 8
  %call103 = call i32 @tree_int_cst_equal(%union.tree_node* %84, %union.tree_node* %86)
  %tobool104 = icmp ne i32 %call103, 0
  %lnot105 = xor i1 %tobool104, true
  br label %land.end.106

land.end.106:                                     ; preds = %land.rhs.99, %for.cond.97
  %87 = phi i1 [ false, %for.cond.97 ], [ %lnot105, %land.rhs.99 ]
  br i1 %87, label %for.body.107, label %for.end.111

for.body.107:                                     ; preds = %land.end.106
  br label %for.inc.108

for.inc.108:                                      ; preds = %for.body.107
  %88 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %common109 = bitcast %union.tree_node* %88 to %struct.tree_common*
  %chain110 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common109, i32 0, i32 0
  %89 = load %union.tree_node*, %union.tree_node** %chain110, align 8
  store %union.tree_node* %89, %union.tree_node** %chain, align 8
  br label %for.cond.97

for.end.111:                                      ; preds = %land.end.106
  %90 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %tobool112 = icmp ne %union.tree_node* %90, null
  br i1 %tobool112, label %if.end.150, label %if.then.113

if.then.113:                                      ; preds = %for.end.111
  %91 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type114 = bitcast %union.tree_node* %91 to %struct.tree_type*
  %name115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 11
  %92 = load %union.tree_node*, %union.tree_node** %name115, align 8
  %cmp116 = icmp eq %union.tree_node* %92, null
  br i1 %cmp116, label %if.then.118, label %if.else.123

if.then.118:                                      ; preds = %if.then.113
  %93 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high119 = getelementptr inbounds %struct.case_node, %struct.case_node* %93, i32 0, i32 4
  %94 = load %union.tree_node*, %union.tree_node** %high119, align 8
  %int_cst120 = bitcast %union.tree_node* %94 to %struct.tree_int_cst*
  %int_cst121 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst120, i32 0, i32 2
  %low122 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst121, i32 0, i32 0
  %95 = load i64, i64* %low122, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i32 0, i32 0), i64 %95)
  br label %if.end.149

if.else.123:                                      ; preds = %if.then.113
  %96 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high124 = getelementptr inbounds %struct.case_node, %struct.case_node* %96, i32 0, i32 4
  %97 = load %union.tree_node*, %union.tree_node** %high124, align 8
  %int_cst125 = bitcast %union.tree_node* %97 to %struct.tree_int_cst*
  %int_cst126 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst125, i32 0, i32 2
  %low127 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst126, i32 0, i32 0
  %98 = load i64, i64* %low127, align 8
  %99 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type128 = bitcast %union.tree_node* %99 to %struct.tree_type*
  %name129 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type128, i32 0, i32 11
  %100 = load %union.tree_node*, %union.tree_node** %name129, align 8
  %common130 = bitcast %union.tree_node* %100 to %struct.tree_common*
  %code131 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common130, i32 0, i32 2
  %bf.load132 = load i32, i32* %code131, align 8
  %bf.clear133 = and i32 %bf.load132, 255
  %cmp134 = icmp eq i32 %bf.clear133, 1
  br i1 %cmp134, label %cond.true.136, label %cond.false.139

cond.true.136:                                    ; preds = %if.else.123
  %101 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type137 = bitcast %union.tree_node* %101 to %struct.tree_type*
  %name138 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type137, i32 0, i32 11
  %102 = load %union.tree_node*, %union.tree_node** %name138, align 8
  br label %cond.end.144

cond.false.139:                                   ; preds = %if.else.123
  %103 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %type140 = bitcast %union.tree_node* %103 to %struct.tree_type*
  %name141 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type140, i32 0, i32 11
  %104 = load %union.tree_node*, %union.tree_node** %name141, align 8
  %decl142 = bitcast %union.tree_node* %104 to %struct.tree_decl*
  %name143 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl142, i32 0, i32 8
  %105 = load %union.tree_node*, %union.tree_node** %name143, align 8
  br label %cond.end.144

cond.end.144:                                     ; preds = %cond.false.139, %cond.true.136
  %cond145 = phi %union.tree_node* [ %102, %cond.true.136 ], [ %105, %cond.false.139 ]
  %identifier146 = bitcast %union.tree_node* %cond145 to %struct.tree_identifier*
  %id147 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier146, i32 0, i32 1
  %str148 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id147, i32 0, i32 1
  %106 = load i8*, i8** %str148, align 8
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.20, i32 0, i32 0), i64 %98, i8* %106)
  br label %if.end.149

if.end.149:                                       ; preds = %cond.end.144, %if.then.118
  br label %if.end.150

if.end.150:                                       ; preds = %if.end.149, %for.end.111
  br label %if.end.151

if.end.151:                                       ; preds = %if.end.150, %if.end.90
  br label %for.inc.152

for.inc.152:                                      ; preds = %if.end.151
  %107 = load %struct.case_node*, %struct.case_node** %n, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %107, i32 0, i32 1
  %108 = load %struct.case_node*, %struct.case_node** %right, align 8
  store %struct.case_node* %108, %struct.case_node** %n, align 8
  br label %for.cond.46

for.end.153:                                      ; preds = %for.cond.46
  br label %if.end.154

if.end.154:                                       ; preds = %if.then, %for.end.153, %if.end.38
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @expand_end_case_type(%union.tree_node* %orig_index, %union.tree_node* %orig_type) #0 {
entry:
  %orig_index.addr = alloca %union.tree_node*, align 8
  %orig_type.addr = alloca %union.tree_node*, align 8
  %minval = alloca %union.tree_node*, align 8
  %maxval = alloca %union.tree_node*, align 8
  %range = alloca %union.tree_node*, align 8
  %default_label = alloca %struct.rtx_def*, align 8
  %n = alloca %struct.case_node*, align 8
  %count = alloca i32, align 4
  %index = alloca %struct.rtx_def*, align 8
  %table_label = alloca %struct.rtx_def*, align 8
  %ncases = alloca i32, align 4
  %labelvec = alloca %struct.rtx_def**, align 8
  %i = alloca i32, align 4
  %before_case = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %thiscase = alloca %struct.nesting*, align 8
  %index_expr = alloca %union.tree_node*, align 8
  %index_type = alloca %union.tree_node*, align 8
  %unsignedp = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %i_low = alloca i64, align 8
  %i_high = alloca i64, align 8
  %i350 = alloca i64, align 8
  %target = alloca %struct.nesting*, align 8
  %this = alloca %struct.nesting*, align 8
  %__o = alloca %struct.obstack*, align 8
  %__obj = alloca i8*, align 8
  store %union.tree_node* %orig_index, %union.tree_node** %orig_index.addr, align 8
  store %union.tree_node* %orig_type, %union.tree_node** %orig_type.addr, align 8
  store %union.tree_node* null, %union.tree_node** %minval, align 8
  store %union.tree_node* null, %union.tree_node** %maxval, align 8
  store %union.tree_node* null, %union.tree_node** %range, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %default_label, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_case_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 4
  %2 = load %struct.nesting*, %struct.nesting** %x_case_stack, align 8
  store %struct.nesting* %2, %struct.nesting** %thiscase, align 8
  %3 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %cmp = icmp eq %struct.nesting* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %table_label, align 8
  %4 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %4, i32 0, i32 4
  %case_stmt = bitcast %union.anon.3* %data to %struct.anon.7*
  %index_expr1 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt, i32 0, i32 3
  %5 = load %union.tree_node*, %union.tree_node** %index_expr1, align 8
  store %union.tree_node* %5, %union.tree_node** %index_expr, align 8
  %6 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  store %union.tree_node* %7, %union.tree_node** %index_type, align 8
  %8 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %common2 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load = load i32, i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  store i32 %bf.clear, i32* %unsignedp, align 4
  %9 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8
  %cmp3 = icmp eq %union.tree_node* %9, null
  br i1 %cmp3, label %if.then.4, label %if.end.7

if.then.4:                                        ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %orig_index.addr, align 8
  %common5 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %type6, align 8
  store %union.tree_node* %11, %union.tree_node** %orig_type.addr, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.4, %if.end
  call void @do_pending_stack_adjust()
  call void @check_seenlabel()
  %12 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp8 = icmp ne %union.tree_node* %12, %13
  br i1 %cmp8, label %if.then.9, label %if.else.424

if.then.9:                                        ; preds = %if.end.7
  %14 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data10 = getelementptr inbounds %struct.nesting, %struct.nesting* %14, i32 0, i32 4
  %case_stmt11 = bitcast %union.anon.3* %data10 to %struct.anon.7*
  %default_label12 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt11, i32 0, i32 2
  %15 = load %union.tree_node*, %union.tree_node** %default_label12, align 8
  %tobool = icmp ne %union.tree_node* %15, null
  br i1 %tobool, label %if.end.24, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then.9
  %16 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8
  %common13 = bitcast %union.tree_node* %16 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load14 = load i32, i32* %code, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %cmp16 = icmp eq i32 %bf.clear15, 10
  br i1 %cmp16, label %land.lhs.true.17, label %if.end.24

land.lhs.true.17:                                 ; preds = %land.lhs.true
  %17 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common18 = bitcast %union.tree_node* %17 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp ne i32 %bf.clear21, 25
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %land.lhs.true.17
  %18 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8
  call void @check_for_full_enumeration_handling(%union.tree_node* %18)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %land.lhs.true.17, %land.lhs.true, %if.then.9
  %19 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data25 = getelementptr inbounds %struct.nesting, %struct.nesting* %19, i32 0, i32 4
  %case_stmt26 = bitcast %union.anon.3* %data25 to %struct.anon.7*
  %default_label27 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt26, i32 0, i32 2
  %20 = load %union.tree_node*, %union.tree_node** %default_label27, align 8
  %cmp28 = icmp eq %union.tree_node* %20, null
  br i1 %cmp28, label %if.then.29, label %if.end.37

if.then.29:                                       ; preds = %if.end.24
  %call30 = call %union.tree_node* @build_decl(i32 31, %union.tree_node* null, %union.tree_node* null)
  %21 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data31 = getelementptr inbounds %struct.nesting, %struct.nesting* %21, i32 0, i32 4
  %case_stmt32 = bitcast %union.anon.3* %data31 to %struct.anon.7*
  %default_label33 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt32, i32 0, i32 2
  store %union.tree_node* %call30, %union.tree_node** %default_label33, align 8
  %22 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data34 = getelementptr inbounds %struct.nesting, %struct.nesting* %22, i32 0, i32 4
  %case_stmt35 = bitcast %union.anon.3* %data34 to %struct.anon.7*
  %default_label36 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt35, i32 0, i32 2
  %23 = load %union.tree_node*, %union.tree_node** %default_label36, align 8
  call void @expand_label(%union.tree_node* %23)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.29, %if.end.24
  %24 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data38 = getelementptr inbounds %struct.nesting, %struct.nesting* %24, i32 0, i32 4
  %case_stmt39 = bitcast %union.anon.3* %data38 to %struct.anon.7*
  %default_label40 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt39, i32 0, i32 2
  %25 = load %union.tree_node*, %union.tree_node** %default_label40, align 8
  %call41 = call %struct.rtx_def* @label_rtx(%union.tree_node* %25)
  store %struct.rtx_def* %call41, %struct.rtx_def** %default_label, align 8
  %call42 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call42, %struct.rtx_def** %before_case, align 8
  %26 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data43 = getelementptr inbounds %struct.nesting, %struct.nesting* %26, i32 0, i32 4
  %case_stmt44 = bitcast %union.anon.3* %data43 to %struct.anon.7*
  %case_list = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt44, i32 0, i32 1
  %27 = load %struct.case_node*, %struct.case_node** %case_list, align 8
  %tobool45 = icmp ne %struct.case_node* %27, null
  br i1 %tobool45, label %land.lhs.true.46, label %if.end.59

land.lhs.true.46:                                 ; preds = %if.end.37
  %28 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data47 = getelementptr inbounds %struct.nesting, %struct.nesting* %28, i32 0, i32 4
  %case_stmt48 = bitcast %union.anon.3* %data47 to %struct.anon.7*
  %case_list49 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt48, i32 0, i32 1
  %29 = load %struct.case_node*, %struct.case_node** %case_list49, align 8
  %left = getelementptr inbounds %struct.case_node, %struct.case_node* %29, i32 0, i32 0
  %30 = load %struct.case_node*, %struct.case_node** %left, align 8
  %tobool50 = icmp ne %struct.case_node* %30, null
  br i1 %tobool50, label %if.then.51, label %if.end.59

if.then.51:                                       ; preds = %land.lhs.true.46
  %31 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data52 = getelementptr inbounds %struct.nesting, %struct.nesting* %31, i32 0, i32 4
  %case_stmt53 = bitcast %union.anon.3* %data52 to %struct.anon.7*
  %case_list54 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt53, i32 0, i32 1
  %32 = load %struct.case_node*, %struct.case_node** %case_list54, align 8
  %call55 = call %struct.case_node* @case_tree2list(%struct.case_node* %32, %struct.case_node* null)
  %33 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data56 = getelementptr inbounds %struct.nesting, %struct.nesting* %33, i32 0, i32 4
  %case_stmt57 = bitcast %union.anon.3* %data56 to %struct.anon.7*
  %case_list58 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt57, i32 0, i32 1
  store %struct.case_node* %call55, %struct.case_node** %case_list58, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.51, %land.lhs.true.46, %if.end.37
  %34 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data60 = getelementptr inbounds %struct.nesting, %struct.nesting* %34, i32 0, i32 4
  %case_stmt61 = bitcast %union.anon.3* %data60 to %struct.anon.7*
  %case_list62 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt61, i32 0, i32 1
  %35 = load %struct.case_node*, %struct.case_node** %case_list62, align 8
  call void @group_case_nodes(%struct.case_node* %35)
  store i32 0, i32* %count, align 4
  %36 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data63 = getelementptr inbounds %struct.nesting, %struct.nesting* %36, i32 0, i32 4
  %case_stmt64 = bitcast %union.anon.3* %data63 to %struct.anon.7*
  %case_list65 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt64, i32 0, i32 1
  %37 = load %struct.case_node*, %struct.case_node** %case_list65, align 8
  store %struct.case_node* %37, %struct.case_node** %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.59
  %38 = load %struct.case_node*, %struct.case_node** %n, align 8
  %tobool66 = icmp ne %struct.case_node* %38, null
  br i1 %tobool66, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %39, i32 0, i32 3
  %40 = load %union.tree_node*, %union.tree_node** %low, align 8
  %common67 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %code68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2
  %bf.load69 = load i32, i32* %code68, align 8
  %bf.clear70 = and i32 %bf.load69, 255
  %cmp71 = icmp ne i32 %bf.clear70, 25
  br i1 %cmp71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5336, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.expand_end_case_type, i32 0, i32 0)) #6
  unreachable

if.end.73:                                        ; preds = %for.body
  %41 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %41, i32 0, i32 4
  %42 = load %union.tree_node*, %union.tree_node** %high, align 8
  %common74 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %code75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2
  %bf.load76 = load i32, i32* %code75, align 8
  %bf.clear77 = and i32 %bf.load76, 255
  %cmp78 = icmp ne i32 %bf.clear77, 25
  br i1 %cmp78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.end.73
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5338, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.expand_end_case_type, i32 0, i32 0)) #6
  unreachable

if.end.80:                                        ; preds = %if.end.73
  %43 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %44 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low81 = getelementptr inbounds %struct.case_node, %struct.case_node* %44, i32 0, i32 3
  %45 = load %union.tree_node*, %union.tree_node** %low81, align 8
  %call82 = call %union.tree_node* @convert(%union.tree_node* %43, %union.tree_node* %45)
  %46 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low83 = getelementptr inbounds %struct.case_node, %struct.case_node* %46, i32 0, i32 3
  store %union.tree_node* %call82, %union.tree_node** %low83, align 8
  %47 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %48 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high84 = getelementptr inbounds %struct.case_node, %struct.case_node* %48, i32 0, i32 4
  %49 = load %union.tree_node*, %union.tree_node** %high84, align 8
  %call85 = call %union.tree_node* @convert(%union.tree_node* %47, %union.tree_node* %49)
  %50 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high86 = getelementptr inbounds %struct.case_node, %struct.case_node* %50, i32 0, i32 4
  store %union.tree_node* %call85, %union.tree_node** %high86, align 8
  %51 = load i32, i32* %count, align 4
  %inc = add i32 %51, 1
  store i32 %inc, i32* %count, align 4
  %cmp87 = icmp eq i32 %51, 0
  br i1 %cmp87, label %if.then.88, label %if.else

if.then.88:                                       ; preds = %if.end.80
  %52 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low89 = getelementptr inbounds %struct.case_node, %struct.case_node* %52, i32 0, i32 3
  %53 = load %union.tree_node*, %union.tree_node** %low89, align 8
  store %union.tree_node* %53, %union.tree_node** %minval, align 8
  %54 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high90 = getelementptr inbounds %struct.case_node, %struct.case_node* %54, i32 0, i32 4
  %55 = load %union.tree_node*, %union.tree_node** %high90, align 8
  store %union.tree_node* %55, %union.tree_node** %maxval, align 8
  br label %if.end.147

if.else:                                          ; preds = %if.end.80
  %56 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low91 = getelementptr inbounds %struct.case_node, %struct.case_node* %56, i32 0, i32 3
  %57 = load %union.tree_node*, %union.tree_node** %low91, align 8
  %int_cst = bitcast %union.tree_node* %57 to %struct.tree_int_cst*
  %int_cst92 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %high93 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst92, i32 0, i32 1
  %58 = load i64, i64* %high93, align 8
  %59 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %int_cst94 = bitcast %union.tree_node* %59 to %struct.tree_int_cst*
  %int_cst95 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst94, i32 0, i32 2
  %high96 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst95, i32 0, i32 1
  %60 = load i64, i64* %high96, align 8
  %cmp97 = icmp slt i64 %58, %60
  br i1 %cmp97, label %if.then.115, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %61 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low98 = getelementptr inbounds %struct.case_node, %struct.case_node* %61, i32 0, i32 3
  %62 = load %union.tree_node*, %union.tree_node** %low98, align 8
  %int_cst99 = bitcast %union.tree_node* %62 to %struct.tree_int_cst*
  %int_cst100 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst99, i32 0, i32 2
  %high101 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst100, i32 0, i32 1
  %63 = load i64, i64* %high101, align 8
  %64 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %int_cst102 = bitcast %union.tree_node* %64 to %struct.tree_int_cst*
  %int_cst103 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst102, i32 0, i32 2
  %high104 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst103, i32 0, i32 1
  %65 = load i64, i64* %high104, align 8
  %cmp105 = icmp eq i64 %63, %65
  br i1 %cmp105, label %land.lhs.true.106, label %if.end.117

land.lhs.true.106:                                ; preds = %lor.lhs.false
  %66 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low107 = getelementptr inbounds %struct.case_node, %struct.case_node* %66, i32 0, i32 3
  %67 = load %union.tree_node*, %union.tree_node** %low107, align 8
  %int_cst108 = bitcast %union.tree_node* %67 to %struct.tree_int_cst*
  %int_cst109 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst108, i32 0, i32 2
  %low110 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst109, i32 0, i32 0
  %68 = load i64, i64* %low110, align 8
  %69 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %int_cst111 = bitcast %union.tree_node* %69 to %struct.tree_int_cst*
  %int_cst112 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst111, i32 0, i32 2
  %low113 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst112, i32 0, i32 0
  %70 = load i64, i64* %low113, align 8
  %cmp114 = icmp ult i64 %68, %70
  br i1 %cmp114, label %if.then.115, label %if.end.117

if.then.115:                                      ; preds = %land.lhs.true.106, %if.else
  %71 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low116 = getelementptr inbounds %struct.case_node, %struct.case_node* %71, i32 0, i32 3
  %72 = load %union.tree_node*, %union.tree_node** %low116, align 8
  store %union.tree_node* %72, %union.tree_node** %minval, align 8
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.115, %land.lhs.true.106, %lor.lhs.false
  %73 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %int_cst118 = bitcast %union.tree_node* %73 to %struct.tree_int_cst*
  %int_cst119 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst118, i32 0, i32 2
  %high120 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst119, i32 0, i32 1
  %74 = load i64, i64* %high120, align 8
  %75 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high121 = getelementptr inbounds %struct.case_node, %struct.case_node* %75, i32 0, i32 4
  %76 = load %union.tree_node*, %union.tree_node** %high121, align 8
  %int_cst122 = bitcast %union.tree_node* %76 to %struct.tree_int_cst*
  %int_cst123 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst122, i32 0, i32 2
  %high124 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst123, i32 0, i32 1
  %77 = load i64, i64* %high124, align 8
  %cmp125 = icmp slt i64 %74, %77
  br i1 %cmp125, label %if.then.144, label %lor.lhs.false.126

lor.lhs.false.126:                                ; preds = %if.end.117
  %78 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %int_cst127 = bitcast %union.tree_node* %78 to %struct.tree_int_cst*
  %int_cst128 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst127, i32 0, i32 2
  %high129 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst128, i32 0, i32 1
  %79 = load i64, i64* %high129, align 8
  %80 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high130 = getelementptr inbounds %struct.case_node, %struct.case_node* %80, i32 0, i32 4
  %81 = load %union.tree_node*, %union.tree_node** %high130, align 8
  %int_cst131 = bitcast %union.tree_node* %81 to %struct.tree_int_cst*
  %int_cst132 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst131, i32 0, i32 2
  %high133 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst132, i32 0, i32 1
  %82 = load i64, i64* %high133, align 8
  %cmp134 = icmp eq i64 %79, %82
  br i1 %cmp134, label %land.lhs.true.135, label %if.end.146

land.lhs.true.135:                                ; preds = %lor.lhs.false.126
  %83 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %int_cst136 = bitcast %union.tree_node* %83 to %struct.tree_int_cst*
  %int_cst137 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst136, i32 0, i32 2
  %low138 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst137, i32 0, i32 0
  %84 = load i64, i64* %low138, align 8
  %85 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high139 = getelementptr inbounds %struct.case_node, %struct.case_node* %85, i32 0, i32 4
  %86 = load %union.tree_node*, %union.tree_node** %high139, align 8
  %int_cst140 = bitcast %union.tree_node* %86 to %struct.tree_int_cst*
  %int_cst141 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst140, i32 0, i32 2
  %low142 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst141, i32 0, i32 0
  %87 = load i64, i64* %low142, align 8
  %cmp143 = icmp ult i64 %84, %87
  br i1 %cmp143, label %if.then.144, label %if.end.146

if.then.144:                                      ; preds = %land.lhs.true.135, %if.end.117
  %88 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high145 = getelementptr inbounds %struct.case_node, %struct.case_node* %88, i32 0, i32 4
  %89 = load %union.tree_node*, %union.tree_node** %high145, align 8
  store %union.tree_node* %89, %union.tree_node** %maxval, align 8
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.144, %land.lhs.true.135, %lor.lhs.false.126
  br label %if.end.147

if.end.147:                                       ; preds = %if.end.146, %if.then.88
  %90 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low148 = getelementptr inbounds %struct.case_node, %struct.case_node* %90, i32 0, i32 3
  %91 = load %union.tree_node*, %union.tree_node** %low148, align 8
  %92 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high149 = getelementptr inbounds %struct.case_node, %struct.case_node* %92, i32 0, i32 4
  %93 = load %union.tree_node*, %union.tree_node** %high149, align 8
  %call150 = call i32 @tree_int_cst_equal(%union.tree_node* %91, %union.tree_node* %93)
  %tobool151 = icmp ne i32 %call150, 0
  br i1 %tobool151, label %if.end.154, label %if.then.152

if.then.152:                                      ; preds = %if.end.147
  %94 = load i32, i32* %count, align 4
  %inc153 = add i32 %94, 1
  store i32 %inc153, i32* %count, align 4
  br label %if.end.154

if.end.154:                                       ; preds = %if.then.152, %if.end.147
  br label %for.inc

for.inc:                                          ; preds = %if.end.154
  %95 = load %struct.case_node*, %struct.case_node** %n, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %95, i32 0, i32 1
  %96 = load %struct.case_node*, %struct.case_node** %right, align 8
  store %struct.case_node* %96, %struct.case_node** %n, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %97 = load i32, i32* %count, align 4
  %cmp155 = icmp ne i32 %97, 0
  br i1 %cmp155, label %if.then.156, label %if.end.159

if.then.156:                                      ; preds = %for.end
  %98 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %99 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %100 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %call157 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %98, %union.tree_node* %99, %union.tree_node* %100)
  %call158 = call %union.tree_node* @fold(%union.tree_node* %call157)
  store %union.tree_node* %call158, %union.tree_node** %range, align 8
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.156, %for.end
  call void @end_cleanup_deferral()
  %101 = load i32, i32* %count, align 4
  %cmp160 = icmp eq i32 %101, 0
  br i1 %cmp160, label %if.then.161, label %if.else.163

if.then.161:                                      ; preds = %if.end.159
  %102 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call162 = call %struct.rtx_def* @expand_expr(%union.tree_node* %102, %struct.rtx_def* %103, i32 0, i32 0)
  call void @emit_queue()
  %104 = load %struct.rtx_def*, %struct.rtx_def** %default_label, align 8
  call void @emit_jump(%struct.rtx_def* %104)
  br label %if.end.415

if.else.163:                                      ; preds = %if.end.159
  %105 = load i32, i32* %count, align 4
  %call164 = call i32 @case_values_threshold()
  %cmp165 = icmp ult i32 %105, %call164
  br i1 %cmp165, label %if.then.195, label %lor.lhs.false.166

lor.lhs.false.166:                                ; preds = %if.else.163
  %106 = load %union.tree_node*, %union.tree_node** %range, align 8
  %107 = load i32, i32* %count, align 4
  %mul = mul i32 10, %107
  %conv = zext i32 %mul to i64
  %call167 = call i32 @compare_tree_int(%union.tree_node* %106, i64 %conv)
  %cmp168 = icmp sgt i32 %call167, 0
  br i1 %cmp168, label %if.then.195, label %lor.lhs.false.170

lor.lhs.false.170:                                ; preds = %lor.lhs.false.166
  %108 = load %union.tree_node*, %union.tree_node** %range, align 8
  %call171 = call i32 @compare_tree_int(%union.tree_node* %108, i64 0)
  %cmp172 = icmp slt i32 %call171, 0
  br i1 %cmp172, label %if.then.195, label %lor.lhs.false.174

lor.lhs.false.174:                                ; preds = %lor.lhs.false.170
  %109 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common175 = bitcast %union.tree_node* %109 to %struct.tree_common*
  %code176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 2
  %bf.load177 = load i32, i32* %code176, align 8
  %bf.clear178 = and i32 %bf.load177, 255
  %cmp179 = icmp eq i32 %bf.clear178, 25
  br i1 %cmp179, label %if.then.195, label %lor.lhs.false.181

lor.lhs.false.181:                                ; preds = %lor.lhs.false.174
  %110 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common182 = bitcast %union.tree_node* %110 to %struct.tree_common*
  %code183 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common182, i32 0, i32 2
  %bf.load184 = load i32, i32* %code183, align 8
  %bf.clear185 = and i32 %bf.load184, 255
  %cmp186 = icmp eq i32 %bf.clear185, 47
  br i1 %cmp186, label %land.lhs.true.188, label %if.else.308

land.lhs.true.188:                                ; preds = %lor.lhs.false.181
  %111 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %exp = bitcast %union.tree_node* %111 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %112 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %common189 = bitcast %union.tree_node* %112 to %struct.tree_common*
  %code190 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common189, i32 0, i32 2
  %bf.load191 = load i32, i32* %code190, align 8
  %bf.clear192 = and i32 %bf.load191, 255
  %cmp193 = icmp eq i32 %bf.clear192, 25
  br i1 %cmp193, label %if.then.195, label %if.else.308

if.then.195:                                      ; preds = %land.lhs.true.188, %lor.lhs.false.174, %lor.lhs.false.170, %lor.lhs.false.166, %if.else.163
  %113 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %call196 = call %struct.rtx_def* @expand_expr(%union.tree_node* %113, %struct.rtx_def* null, i32 0, i32 0)
  store %struct.rtx_def* %call196, %struct.rtx_def** %index, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load197 = load i32, i32* %115, align 8
  %bf.lshr198 = lshr i32 %bf.load197, 16
  %bf.clear199 = and i32 %bf.lshr198, 255
  %idxprom = sext i32 %bf.clear199 to i64
  %arrayidx200 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom
  %116 = load i32, i32* %arrayidx200, align 4
  %cmp201 = icmp eq i32 %116, 1
  br i1 %cmp201, label %land.lhs.true.203, label %if.end.227

land.lhs.true.203:                                ; preds = %if.then.195
  %117 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %118 = bitcast %struct.rtx_def* %117 to i32*
  %bf.load204 = load i32, i32* %118, align 8
  %bf.lshr205 = lshr i32 %bf.load204, 16
  %bf.clear206 = and i32 %bf.lshr205, 255
  %call207 = call i32 @have_insn_for(i32 74, i32 %bf.clear206)
  %tobool208 = icmp ne i32 %call207, 0
  br i1 %tobool208, label %if.end.227, label %if.then.209

if.then.209:                                      ; preds = %land.lhs.true.203
  %119 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %120 = bitcast %struct.rtx_def* %119 to i32*
  %bf.load210 = load i32, i32* %120, align 8
  %bf.lshr211 = lshr i32 %bf.load210, 16
  %bf.clear212 = and i32 %bf.lshr211, 255
  store i32 %bf.clear212, i32* %wider_mode, align 4
  br label %for.cond.213

for.cond.213:                                     ; preds = %for.inc.222, %if.then.209
  %121 = load i32, i32* %wider_mode, align 4
  %cmp214 = icmp ne i32 %121, 0
  br i1 %cmp214, label %for.body.216, label %for.end.226

for.body.216:                                     ; preds = %for.cond.213
  %122 = load i32, i32* %wider_mode, align 4
  %call217 = call i32 @have_insn_for(i32 74, i32 %122)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.then.219, label %if.end.221

if.then.219:                                      ; preds = %for.body.216
  %123 = load i32, i32* %wider_mode, align 4
  %124 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %125 = load i32, i32* %unsignedp, align 4
  %call220 = call %struct.rtx_def* @convert_to_mode(i32 %123, %struct.rtx_def* %124, i32 %125)
  store %struct.rtx_def* %call220, %struct.rtx_def** %index, align 8
  br label %for.end.226

if.end.221:                                       ; preds = %for.body.216
  br label %for.inc.222

for.inc.222:                                      ; preds = %if.end.221
  %126 = load i32, i32* %wider_mode, align 4
  %idxprom223 = sext i32 %126 to i64
  %arrayidx224 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom223
  %127 = load i8, i8* %arrayidx224, align 1
  %conv225 = zext i8 %127 to i32
  store i32 %conv225, i32* %wider_mode, align 4
  br label %for.cond.213

for.end.226:                                      ; preds = %if.then.219, %for.cond.213
  br label %if.end.227

if.end.227:                                       ; preds = %for.end.226, %land.lhs.true.203, %if.then.195
  call void @emit_queue()
  call void @do_pending_stack_adjust()
  %128 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %call228 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %128, i32 0)
  store %struct.rtx_def* %call228, %struct.rtx_def** %index, align 8
  %129 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load229 = load i32, i32* %130, align 8
  %bf.clear230 = and i32 %bf.load229, 65535
  %cmp231 = icmp eq i32 %bf.clear230, 66
  br i1 %cmp231, label %if.then.233, label %if.end.235

if.then.233:                                      ; preds = %if.end.227
  %131 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %call234 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %131)
  store %struct.rtx_def* %call234, %struct.rtx_def** %index, align 8
  br label %if.end.235

if.end.235:                                       ; preds = %if.then.233, %if.end.227
  %132 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %133 = bitcast %struct.rtx_def* %132 to i32*
  %bf.load236 = load i32, i32* %133, align 8
  %bf.clear237 = and i32 %bf.load236, 65535
  %cmp238 = icmp eq i32 %bf.clear237, 54
  br i1 %cmp238, label %if.then.247, label %lor.lhs.false.240

lor.lhs.false.240:                                ; preds = %if.end.235
  %134 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common241 = bitcast %union.tree_node* %134 to %struct.tree_common*
  %code242 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common241, i32 0, i32 2
  %bf.load243 = load i32, i32* %code242, align 8
  %bf.clear244 = and i32 %bf.load243, 255
  %cmp245 = icmp eq i32 %bf.clear244, 25
  br i1 %cmp245, label %if.then.247, label %if.else.289

if.then.247:                                      ; preds = %lor.lhs.false.240, %if.end.235
  %135 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %common248 = bitcast %union.tree_node* %135 to %struct.tree_common*
  %code249 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common248, i32 0, i32 2
  %bf.load250 = load i32, i32* %code249, align 8
  %bf.clear251 = and i32 %bf.load250, 255
  %cmp252 = icmp ne i32 %bf.clear251, 25
  br i1 %cmp252, label %if.then.254, label %if.end.265

if.then.254:                                      ; preds = %if.then.247
  %136 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %arrayidx255 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx255 to i64*
  %137 = load i64, i64* %rtwint, align 8
  %138 = load i32, i32* %unsignedp, align 4
  %tobool256 = icmp ne i32 %138, 0
  br i1 %tobool256, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.254
  %139 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %fld257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1
  %arrayidx258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld257, i32 0, i64 0
  %rtwint259 = bitcast %union.rtunion_def* %arrayidx258 to i64*
  %140 = load i64, i64* %rtwint259, align 8
  %cmp260 = icmp sge i64 %140, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.254
  %141 = phi i1 [ true, %if.then.254 ], [ %cmp260, %lor.rhs ]
  %cond = select i1 %141, i32 0, i32 -1
  %conv262 = sext i32 %cond to i64
  %call263 = call %union.tree_node* @build_int_2_wide(i64 %137, i64 %conv262)
  store %union.tree_node* %call263, %union.tree_node** %index_expr, align 8
  %142 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %143 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %call264 = call %union.tree_node* @convert(%union.tree_node* %142, %union.tree_node* %143)
  store %union.tree_node* %call264, %union.tree_node** %index_expr, align 8
  br label %if.end.265

if.end.265:                                       ; preds = %lor.end, %if.then.247
  %144 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data266 = getelementptr inbounds %struct.nesting, %struct.nesting* %144, i32 0, i32 4
  %case_stmt267 = bitcast %union.anon.3* %data266 to %struct.anon.7*
  %case_list268 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt267, i32 0, i32 1
  %145 = load %struct.case_node*, %struct.case_node** %case_list268, align 8
  store %struct.case_node* %145, %struct.case_node** %n, align 8
  br label %for.cond.269

for.cond.269:                                     ; preds = %for.inc.281, %if.end.265
  %146 = load %struct.case_node*, %struct.case_node** %n, align 8
  %tobool270 = icmp ne %struct.case_node* %146, null
  br i1 %tobool270, label %for.body.271, label %for.end.283

for.body.271:                                     ; preds = %for.cond.269
  %147 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %148 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low272 = getelementptr inbounds %struct.case_node, %struct.case_node* %148, i32 0, i32 3
  %149 = load %union.tree_node*, %union.tree_node** %low272, align 8
  %call273 = call i32 @tree_int_cst_lt(%union.tree_node* %147, %union.tree_node* %149)
  %tobool274 = icmp ne i32 %call273, 0
  br i1 %tobool274, label %if.end.280, label %land.lhs.true.275

land.lhs.true.275:                                ; preds = %for.body.271
  %150 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high276 = getelementptr inbounds %struct.case_node, %struct.case_node* %150, i32 0, i32 4
  %151 = load %union.tree_node*, %union.tree_node** %high276, align 8
  %152 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %call277 = call i32 @tree_int_cst_lt(%union.tree_node* %151, %union.tree_node* %152)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end.280, label %if.then.279

if.then.279:                                      ; preds = %land.lhs.true.275
  br label %for.end.283

if.end.280:                                       ; preds = %land.lhs.true.275, %for.body.271
  br label %for.inc.281

for.inc.281:                                      ; preds = %if.end.280
  %153 = load %struct.case_node*, %struct.case_node** %n, align 8
  %right282 = getelementptr inbounds %struct.case_node, %struct.case_node* %153, i32 0, i32 1
  %154 = load %struct.case_node*, %struct.case_node** %right282, align 8
  store %struct.case_node* %154, %struct.case_node** %n, align 8
  br label %for.cond.269

for.end.283:                                      ; preds = %if.then.279, %for.cond.269
  %155 = load %struct.case_node*, %struct.case_node** %n, align 8
  %tobool284 = icmp ne %struct.case_node* %155, null
  br i1 %tobool284, label %if.then.285, label %if.else.287

if.then.285:                                      ; preds = %for.end.283
  %156 = load %struct.case_node*, %struct.case_node** %n, align 8
  %code_label = getelementptr inbounds %struct.case_node, %struct.case_node* %156, i32 0, i32 5
  %157 = load %union.tree_node*, %union.tree_node** %code_label, align 8
  %call286 = call %struct.rtx_def* @label_rtx(%union.tree_node* %157)
  call void @emit_jump(%struct.rtx_def* %call286)
  br label %if.end.288

if.else.287:                                      ; preds = %for.end.283
  %158 = load %struct.rtx_def*, %struct.rtx_def** %default_label, align 8
  call void @emit_jump(%struct.rtx_def* %158)
  br label %if.end.288

if.end.288:                                       ; preds = %if.else.287, %if.then.285
  br label %if.end.307

if.else.289:                                      ; preds = %lor.lhs.false.240
  %159 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8
  %common290 = bitcast %union.tree_node* %159 to %struct.tree_common*
  %code291 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common290, i32 0, i32 2
  %bf.load292 = load i32, i32* %code291, align 8
  %bf.clear293 = and i32 %bf.load292, 255
  %cmp294 = icmp ne i32 %bf.clear293, 10
  br i1 %cmp294, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else.289
  %160 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data296 = getelementptr inbounds %struct.nesting, %struct.nesting* %160, i32 0, i32 4
  %case_stmt297 = bitcast %union.anon.3* %data296 to %struct.anon.7*
  %case_list298 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt297, i32 0, i32 1
  %161 = load %struct.case_node*, %struct.case_node** %case_list298, align 8
  %call299 = call i32 @estimate_case_costs(%struct.case_node* %161)
  %tobool300 = icmp ne i32 %call299, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else.289
  %162 = phi i1 [ false, %if.else.289 ], [ %tobool300, %land.rhs ]
  %land.ext = zext i1 %162 to i32
  store i32 %land.ext, i32* @use_cost_table, align 4
  %163 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data301 = getelementptr inbounds %struct.nesting, %struct.nesting* %163, i32 0, i32 4
  %case_stmt302 = bitcast %union.anon.3* %data301 to %struct.anon.7*
  %case_list303 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt302, i32 0, i32 1
  call void @balance_case_nodes(%struct.case_node** %case_list303, %struct.case_node* null)
  %164 = load %struct.rtx_def*, %struct.rtx_def** %index, align 8
  %165 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data304 = getelementptr inbounds %struct.nesting, %struct.nesting* %165, i32 0, i32 4
  %case_stmt305 = bitcast %union.anon.3* %data304 to %struct.anon.7*
  %case_list306 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt305, i32 0, i32 1
  %166 = load %struct.case_node*, %struct.case_node** %case_list306, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %default_label, align 8
  %168 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  call void @emit_case_nodes(%struct.rtx_def* %164, %struct.case_node* %166, %struct.rtx_def* %167, %union.tree_node* %168)
  %169 = load %struct.rtx_def*, %struct.rtx_def** %default_label, align 8
  call void @emit_jump_if_reachable(%struct.rtx_def* %169)
  br label %if.end.307

if.end.307:                                       ; preds = %land.end, %if.end.288
  br label %if.end.414

if.else.308:                                      ; preds = %land.lhs.true.188, %lor.lhs.false.181
  %170 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %171 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %172 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %173 = load %union.tree_node*, %union.tree_node** %range, align 8
  %174 = load %struct.rtx_def*, %struct.rtx_def** %table_label, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %default_label, align 8
  %call309 = call i32 @try_casesi(%union.tree_node* %170, %union.tree_node* %171, %union.tree_node* %172, %union.tree_node* %173, %struct.rtx_def* %174, %struct.rtx_def* %175)
  %tobool310 = icmp ne i32 %call309, 0
  br i1 %tobool310, label %if.end.329, label %if.then.311

if.then.311:                                      ; preds = %if.else.308
  %176 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data312 = getelementptr inbounds %struct.nesting, %struct.nesting* %176, i32 0, i32 4
  %case_stmt313 = bitcast %union.anon.3* %data312 to %struct.anon.7*
  %nominal_type = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt313, i32 0, i32 4
  %177 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8
  store %union.tree_node* %177, %union.tree_node** %index_type, align 8
  %178 = load i32, i32* @optimize_size, align 4
  %tobool314 = icmp ne i32 %178, 0
  br i1 %tobool314, label %if.end.324, label %land.lhs.true.315

land.lhs.true.315:                                ; preds = %if.then.311
  %179 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %call316 = call i32 @compare_tree_int(%union.tree_node* %179, i64 0)
  %cmp317 = icmp sgt i32 %call316, 0
  br i1 %cmp317, label %land.lhs.true.319, label %if.end.324

land.lhs.true.319:                                ; preds = %land.lhs.true.315
  %180 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %call320 = call i32 @compare_tree_int(%union.tree_node* %180, i64 3)
  %cmp321 = icmp slt i32 %call320, 0
  br i1 %cmp321, label %if.then.323, label %if.end.324

if.then.323:                                      ; preds = %land.lhs.true.319
  %181 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 11), align 8
  store %union.tree_node* %181, %union.tree_node** %minval, align 8
  %182 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  store %union.tree_node* %182, %union.tree_node** %range, align 8
  br label %if.end.324

if.end.324:                                       ; preds = %if.then.323, %land.lhs.true.319, %land.lhs.true.315, %if.then.311
  %183 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %184 = load %union.tree_node*, %union.tree_node** %index_expr, align 8
  %185 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %186 = load %union.tree_node*, %union.tree_node** %range, align 8
  %187 = load %struct.rtx_def*, %struct.rtx_def** %table_label, align 8
  %188 = load %struct.rtx_def*, %struct.rtx_def** %default_label, align 8
  %call325 = call i32 @try_tablejump(%union.tree_node* %183, %union.tree_node* %184, %union.tree_node* %185, %union.tree_node* %186, %struct.rtx_def* %187, %struct.rtx_def* %188)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end.328, label %if.then.327

if.then.327:                                      ; preds = %if.end.324
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5490, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.expand_end_case_type, i32 0, i32 0)) #6
  unreachable

if.end.328:                                       ; preds = %if.end.324
  br label %if.end.329

if.end.329:                                       ; preds = %if.end.328, %if.else.308
  %189 = load %union.tree_node*, %union.tree_node** %range, align 8
  %call330 = call i64 @tree_low_cst(%union.tree_node* %189, i32 0)
  %add = add nsw i64 %call330, 1
  %conv331 = trunc i64 %add to i32
  store i32 %conv331, i32* %ncases, align 4
  %190 = load i32, i32* %ncases, align 4
  %conv332 = sext i32 %190 to i64
  %mul333 = mul i64 %conv332, 8
  %191 = alloca i8, i64 %mul333
  %192 = bitcast i8* %191 to %struct.rtx_def**
  store %struct.rtx_def** %192, %struct.rtx_def*** %labelvec, align 8
  %193 = load %struct.rtx_def**, %struct.rtx_def*** %labelvec, align 8
  %194 = bitcast %struct.rtx_def** %193 to i8*
  %195 = load i32, i32* %ncases, align 4
  %conv334 = sext i32 %195 to i64
  %mul335 = mul i64 %conv334, 8
  call void @llvm.memset.p0i8.i64(i8* %194, i8 0, i64 %mul335, i32 1, i1 false)
  %196 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data336 = getelementptr inbounds %struct.nesting, %struct.nesting* %196, i32 0, i32 4
  %case_stmt337 = bitcast %union.anon.3* %data336 to %struct.anon.7*
  %case_list338 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt337, i32 0, i32 1
  %197 = load %struct.case_node*, %struct.case_node** %case_list338, align 8
  store %struct.case_node* %197, %struct.case_node** %n, align 8
  br label %for.cond.339

for.cond.339:                                     ; preds = %for.inc.364, %if.end.329
  %198 = load %struct.case_node*, %struct.case_node** %n, align 8
  %tobool340 = icmp ne %struct.case_node* %198, null
  br i1 %tobool340, label %for.body.341, label %for.end.366

for.body.341:                                     ; preds = %for.cond.339
  %199 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %200 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low342 = getelementptr inbounds %struct.case_node, %struct.case_node* %200, i32 0, i32 3
  %201 = load %union.tree_node*, %union.tree_node** %low342, align 8
  %202 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %call343 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %199, %union.tree_node* %201, %union.tree_node* %202)
  %call344 = call %union.tree_node* @fold(%union.tree_node* %call343)
  %call345 = call i64 @tree_low_cst(%union.tree_node* %call344, i32 1)
  store i64 %call345, i64* %i_low, align 8
  %203 = load %union.tree_node*, %union.tree_node** %index_type, align 8
  %204 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high346 = getelementptr inbounds %struct.case_node, %struct.case_node* %204, i32 0, i32 4
  %205 = load %union.tree_node*, %union.tree_node** %high346, align 8
  %206 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %call347 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %203, %union.tree_node* %205, %union.tree_node* %206)
  %call348 = call %union.tree_node* @fold(%union.tree_node* %call347)
  %call349 = call i64 @tree_low_cst(%union.tree_node* %call348, i32 1)
  store i64 %call349, i64* %i_high, align 8
  %207 = load i64, i64* %i_low, align 8
  store i64 %207, i64* %i350, align 8
  br label %for.cond.351

for.cond.351:                                     ; preds = %for.inc.361, %for.body.341
  %208 = load i64, i64* %i350, align 8
  %209 = load i64, i64* %i_high, align 8
  %cmp352 = icmp sle i64 %208, %209
  br i1 %cmp352, label %for.body.354, label %for.end.363

for.body.354:                                     ; preds = %for.cond.351
  %210 = load i32, i32* @target_flags, align 4
  %and = and i32 %210, 33554432
  %tobool355 = icmp ne i32 %and, 0
  %cond356 = select i1 %tobool355, i32 5, i32 4
  %211 = load %struct.case_node*, %struct.case_node** %n, align 8
  %code_label357 = getelementptr inbounds %struct.case_node, %struct.case_node* %211, i32 0, i32 5
  %212 = load %union.tree_node*, %union.tree_node** %code_label357, align 8
  %call358 = call %struct.rtx_def* @label_rtx(%union.tree_node* %212)
  %call359 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond356, %struct.rtx_def* %call358)
  %213 = load i64, i64* %i350, align 8
  %214 = load %struct.rtx_def**, %struct.rtx_def*** %labelvec, align 8
  %arrayidx360 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %214, i64 %213
  store %struct.rtx_def* %call359, %struct.rtx_def** %arrayidx360, align 8
  br label %for.inc.361

for.inc.361:                                      ; preds = %for.body.354
  %215 = load i64, i64* %i350, align 8
  %inc362 = add nsw i64 %215, 1
  store i64 %inc362, i64* %i350, align 8
  br label %for.cond.351

for.end.363:                                      ; preds = %for.cond.351
  br label %for.inc.364

for.inc.364:                                      ; preds = %for.end.363
  %216 = load %struct.case_node*, %struct.case_node** %n, align 8
  %right365 = getelementptr inbounds %struct.case_node, %struct.case_node* %216, i32 0, i32 1
  %217 = load %struct.case_node*, %struct.case_node** %right365, align 8
  store %struct.case_node* %217, %struct.case_node** %n, align 8
  br label %for.cond.339

for.end.366:                                      ; preds = %for.cond.339
  store i32 0, i32* %i, align 4
  br label %for.cond.367

for.cond.367:                                     ; preds = %for.inc.383, %for.end.366
  %218 = load i32, i32* %i, align 4
  %219 = load i32, i32* %ncases, align 4
  %cmp368 = icmp slt i32 %218, %219
  br i1 %cmp368, label %for.body.370, label %for.end.385

for.body.370:                                     ; preds = %for.cond.367
  %220 = load i32, i32* %i, align 4
  %idxprom371 = sext i32 %220 to i64
  %221 = load %struct.rtx_def**, %struct.rtx_def*** %labelvec, align 8
  %arrayidx372 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %221, i64 %idxprom371
  %222 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx372, align 8
  %cmp373 = icmp eq %struct.rtx_def* %222, null
  br i1 %cmp373, label %if.then.375, label %if.end.382

if.then.375:                                      ; preds = %for.body.370
  %223 = load i32, i32* @target_flags, align 4
  %and376 = and i32 %223, 33554432
  %tobool377 = icmp ne i32 %and376, 0
  %cond378 = select i1 %tobool377, i32 5, i32 4
  %224 = load %struct.rtx_def*, %struct.rtx_def** %default_label, align 8
  %call379 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond378, %struct.rtx_def* %224)
  %225 = load i32, i32* %i, align 4
  %idxprom380 = sext i32 %225 to i64
  %226 = load %struct.rtx_def**, %struct.rtx_def*** %labelvec, align 8
  %arrayidx381 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %226, i64 %idxprom380
  store %struct.rtx_def* %call379, %struct.rtx_def** %arrayidx381, align 8
  br label %if.end.382

if.end.382:                                       ; preds = %if.then.375, %for.body.370
  br label %for.inc.383

for.inc.383:                                      ; preds = %if.end.382
  %227 = load i32, i32* %i, align 4
  %inc384 = add nsw i32 %227, 1
  store i32 %inc384, i32* %i, align 4
  br label %for.cond.367

for.end.385:                                      ; preds = %for.cond.367
  %228 = load %struct.rtx_def*, %struct.rtx_def** %table_label, align 8
  %call386 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %228)
  %229 = load i32, i32* @flag_pic, align 4
  %tobool387 = icmp ne i32 %229, 0
  br i1 %tobool387, label %if.then.388, label %if.else.402

if.then.388:                                      ; preds = %for.end.385
  %230 = load i32, i32* @target_flags, align 4
  %and389 = and i32 %230, 33554432
  %tobool390 = icmp ne i32 %and389, 0
  br i1 %tobool390, label %lor.rhs.391, label %lor.end.393

lor.rhs.391:                                      ; preds = %if.then.388
  %231 = load i32, i32* @flag_pic, align 4
  %tobool392 = icmp ne i32 %231, 0
  br label %lor.end.393

lor.end.393:                                      ; preds = %lor.rhs.391, %if.then.388
  %232 = phi i1 [ true, %if.then.388 ], [ %tobool392, %lor.rhs.391 ]
  %cond394 = select i1 %232, i32 4, i32 5
  %233 = load i32, i32* @target_flags, align 4
  %and395 = and i32 %233, 33554432
  %tobool396 = icmp ne i32 %and395, 0
  %cond397 = select i1 %tobool396, i32 5, i32 4
  %234 = load %struct.rtx_def*, %struct.rtx_def** %table_label, align 8
  %call398 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond397, %struct.rtx_def* %234)
  %235 = load i32, i32* %ncases, align 4
  %236 = load %struct.rtx_def**, %struct.rtx_def*** %labelvec, align 8
  %call399 = call %struct.rtvec_def* @gen_rtvec_v(i32 %235, %struct.rtx_def** %236)
  %237 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %238 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call400 = call %struct.rtx_def* @gen_rtx_fmt_eEee0(i32 45, i32 %cond394, %struct.rtx_def* %call398, %struct.rtvec_def* %call399, %struct.rtx_def* %237, %struct.rtx_def* %238)
  %call401 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call400)
  br label %if.end.412

if.else.402:                                      ; preds = %for.end.385
  %239 = load i32, i32* @target_flags, align 4
  %and403 = and i32 %239, 33554432
  %tobool404 = icmp ne i32 %and403, 0
  br i1 %tobool404, label %lor.rhs.405, label %lor.end.407

lor.rhs.405:                                      ; preds = %if.else.402
  %240 = load i32, i32* @flag_pic, align 4
  %tobool406 = icmp ne i32 %240, 0
  br label %lor.end.407

lor.end.407:                                      ; preds = %lor.rhs.405, %if.else.402
  %241 = phi i1 [ true, %if.else.402 ], [ %tobool406, %lor.rhs.405 ]
  %cond408 = select i1 %241, i32 4, i32 5
  %242 = load i32, i32* %ncases, align 4
  %243 = load %struct.rtx_def**, %struct.rtx_def*** %labelvec, align 8
  %call409 = call %struct.rtvec_def* @gen_rtvec_v(i32 %242, %struct.rtx_def** %243)
  %call410 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 44, i32 %cond408, %struct.rtvec_def* %call409)
  %call411 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call410)
  br label %if.end.412

if.end.412:                                       ; preds = %lor.end.407, %lor.end.393
  %call413 = call %struct.rtx_def* @emit_barrier()
  br label %if.end.414

if.end.414:                                       ; preds = %if.end.412, %if.end.307
  br label %if.end.415

if.end.415:                                       ; preds = %if.end.414, %if.then.161
  %244 = load %struct.rtx_def*, %struct.rtx_def** %before_case, align 8
  %fld416 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1
  %arrayidx417 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld416, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx417 to %struct.rtx_def**
  %245 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %245, %struct.rtx_def** %before_case, align 8
  %call418 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call418, %struct.rtx_def** %end, align 8
  %call419 = call zeroext i1 @squeeze_notes(%struct.rtx_def** %before_case, %struct.rtx_def** %end)
  br i1 %call419, label %if.then.420, label %if.end.421

if.then.420:                                      ; preds = %if.end.415
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 5547, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.expand_end_case_type, i32 0, i32 0)) #6
  unreachable

if.end.421:                                       ; preds = %if.end.415
  %246 = load %struct.rtx_def*, %struct.rtx_def** %before_case, align 8
  %247 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %248 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %data422 = getelementptr inbounds %struct.nesting, %struct.nesting* %248, i32 0, i32 4
  %case_stmt423 = bitcast %union.anon.3* %data422 to %struct.anon.7*
  %start = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt423, i32 0, i32 0
  %249 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  call void @reorder_insns(%struct.rtx_def* %246, %struct.rtx_def* %247, %struct.rtx_def* %249)
  br label %if.end.425

if.else.424:                                      ; preds = %if.end.7
  call void @end_cleanup_deferral()
  br label %if.end.425

if.end.425:                                       ; preds = %if.else.424, %if.end.421
  %250 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %exit_label = getelementptr inbounds %struct.nesting, %struct.nesting* %250, i32 0, i32 3
  %251 = load %struct.rtx_def*, %struct.rtx_def** %exit_label, align 8
  %tobool426 = icmp ne %struct.rtx_def* %251, null
  br i1 %tobool426, label %if.then.427, label %if.end.430

if.then.427:                                      ; preds = %if.end.425
  %252 = load %struct.nesting*, %struct.nesting** %thiscase, align 8
  %exit_label428 = getelementptr inbounds %struct.nesting, %struct.nesting* %252, i32 0, i32 3
  %253 = load %struct.rtx_def*, %struct.rtx_def** %exit_label428, align 8
  %call429 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %253)
  br label %if.end.430

if.end.430:                                       ; preds = %if.then.427, %if.end.425
  %254 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt431 = getelementptr inbounds %struct.function, %struct.function* %254, i32 0, i32 1
  %255 = load %struct.stmt_status*, %struct.stmt_status** %stmt431, align 8
  %x_case_stack432 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %255, i32 0, i32 4
  %256 = load %struct.nesting*, %struct.nesting** %x_case_stack432, align 8
  %data433 = getelementptr inbounds %struct.nesting, %struct.nesting* %256, i32 0, i32 4
  %case_stmt434 = bitcast %union.anon.3* %data433 to %struct.anon.7*
  %case_list435 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %case_stmt434, i32 0, i32 1
  %257 = load %struct.case_node*, %struct.case_node** %case_list435, align 8
  call void @free_case_nodes(%struct.case_node* %257)
  br label %do.body

do.body:                                          ; preds = %if.end.430
  %258 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt436 = getelementptr inbounds %struct.function, %struct.function* %258, i32 0, i32 1
  %259 = load %struct.stmt_status*, %struct.stmt_status** %stmt436, align 8
  %x_case_stack437 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %259, i32 0, i32 4
  %260 = load %struct.nesting*, %struct.nesting** %x_case_stack437, align 8
  store %struct.nesting* %260, %struct.nesting** %target, align 8
  br label %do.body.438

do.body.438:                                      ; preds = %do.cond, %do.body
  %261 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt439 = getelementptr inbounds %struct.function, %struct.function* %261, i32 0, i32 1
  %262 = load %struct.stmt_status*, %struct.stmt_status** %stmt439, align 8
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %262, i32 0, i32 5
  %263 = load %struct.nesting*, %struct.nesting** %x_nesting_stack, align 8
  store %struct.nesting* %263, %struct.nesting** %this, align 8
  %264 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt440 = getelementptr inbounds %struct.function, %struct.function* %264, i32 0, i32 1
  %265 = load %struct.stmt_status*, %struct.stmt_status** %stmt440, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %265, i32 0, i32 3
  %266 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %267 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp441 = icmp eq %struct.nesting* %266, %267
  br i1 %cmp441, label %if.then.443, label %if.end.448

if.then.443:                                      ; preds = %do.body.438
  %268 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt444 = getelementptr inbounds %struct.function, %struct.function* %268, i32 0, i32 1
  %269 = load %struct.stmt_status*, %struct.stmt_status** %stmt444, align 8
  %x_loop_stack445 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %269, i32 0, i32 3
  %270 = load %struct.nesting*, %struct.nesting** %x_loop_stack445, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %270, i32 0, i32 1
  %271 = load %struct.nesting*, %struct.nesting** %next, align 8
  %272 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt446 = getelementptr inbounds %struct.function, %struct.function* %272, i32 0, i32 1
  %273 = load %struct.stmt_status*, %struct.stmt_status** %stmt446, align 8
  %x_loop_stack447 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %273, i32 0, i32 3
  store %struct.nesting* %271, %struct.nesting** %x_loop_stack447, align 8
  br label %if.end.448

if.end.448:                                       ; preds = %if.then.443, %do.body.438
  %274 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt449 = getelementptr inbounds %struct.function, %struct.function* %274, i32 0, i32 1
  %275 = load %struct.stmt_status*, %struct.stmt_status** %stmt449, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %275, i32 0, i32 2
  %276 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %277 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp450 = icmp eq %struct.nesting* %276, %277
  br i1 %cmp450, label %if.then.452, label %if.end.458

if.then.452:                                      ; preds = %if.end.448
  %278 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt453 = getelementptr inbounds %struct.function, %struct.function* %278, i32 0, i32 1
  %279 = load %struct.stmt_status*, %struct.stmt_status** %stmt453, align 8
  %x_cond_stack454 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %279, i32 0, i32 2
  %280 = load %struct.nesting*, %struct.nesting** %x_cond_stack454, align 8
  %next455 = getelementptr inbounds %struct.nesting, %struct.nesting* %280, i32 0, i32 1
  %281 = load %struct.nesting*, %struct.nesting** %next455, align 8
  %282 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt456 = getelementptr inbounds %struct.function, %struct.function* %282, i32 0, i32 1
  %283 = load %struct.stmt_status*, %struct.stmt_status** %stmt456, align 8
  %x_cond_stack457 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %283, i32 0, i32 2
  store %struct.nesting* %281, %struct.nesting** %x_cond_stack457, align 8
  br label %if.end.458

if.end.458:                                       ; preds = %if.then.452, %if.end.448
  %284 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt459 = getelementptr inbounds %struct.function, %struct.function* %284, i32 0, i32 1
  %285 = load %struct.stmt_status*, %struct.stmt_status** %stmt459, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %285, i32 0, i32 0
  %286 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  %287 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp460 = icmp eq %struct.nesting* %286, %287
  br i1 %cmp460, label %if.then.462, label %if.end.468

if.then.462:                                      ; preds = %if.end.458
  %288 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt463 = getelementptr inbounds %struct.function, %struct.function* %288, i32 0, i32 1
  %289 = load %struct.stmt_status*, %struct.stmt_status** %stmt463, align 8
  %x_block_stack464 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %289, i32 0, i32 0
  %290 = load %struct.nesting*, %struct.nesting** %x_block_stack464, align 8
  %next465 = getelementptr inbounds %struct.nesting, %struct.nesting* %290, i32 0, i32 1
  %291 = load %struct.nesting*, %struct.nesting** %next465, align 8
  %292 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt466 = getelementptr inbounds %struct.function, %struct.function* %292, i32 0, i32 1
  %293 = load %struct.stmt_status*, %struct.stmt_status** %stmt466, align 8
  %x_block_stack467 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %293, i32 0, i32 0
  store %struct.nesting* %291, %struct.nesting** %x_block_stack467, align 8
  br label %if.end.468

if.end.468:                                       ; preds = %if.then.462, %if.end.458
  %294 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt469 = getelementptr inbounds %struct.function, %struct.function* %294, i32 0, i32 1
  %295 = load %struct.stmt_status*, %struct.stmt_status** %stmt469, align 8
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %295, i32 0, i32 1
  %296 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack, align 8
  %297 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp470 = icmp eq %struct.nesting* %296, %297
  br i1 %cmp470, label %if.then.472, label %if.end.478

if.then.472:                                      ; preds = %if.end.468
  %298 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt473 = getelementptr inbounds %struct.function, %struct.function* %298, i32 0, i32 1
  %299 = load %struct.stmt_status*, %struct.stmt_status** %stmt473, align 8
  %x_stack_block_stack474 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %299, i32 0, i32 1
  %300 = load %struct.nesting*, %struct.nesting** %x_stack_block_stack474, align 8
  %next475 = getelementptr inbounds %struct.nesting, %struct.nesting* %300, i32 0, i32 1
  %301 = load %struct.nesting*, %struct.nesting** %next475, align 8
  %302 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt476 = getelementptr inbounds %struct.function, %struct.function* %302, i32 0, i32 1
  %303 = load %struct.stmt_status*, %struct.stmt_status** %stmt476, align 8
  %x_stack_block_stack477 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %303, i32 0, i32 1
  store %struct.nesting* %301, %struct.nesting** %x_stack_block_stack477, align 8
  br label %if.end.478

if.end.478:                                       ; preds = %if.then.472, %if.end.468
  %304 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt479 = getelementptr inbounds %struct.function, %struct.function* %304, i32 0, i32 1
  %305 = load %struct.stmt_status*, %struct.stmt_status** %stmt479, align 8
  %x_case_stack480 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %305, i32 0, i32 4
  %306 = load %struct.nesting*, %struct.nesting** %x_case_stack480, align 8
  %307 = load %struct.nesting*, %struct.nesting** %this, align 8
  %cmp481 = icmp eq %struct.nesting* %306, %307
  br i1 %cmp481, label %if.then.483, label %if.end.489

if.then.483:                                      ; preds = %if.end.478
  %308 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt484 = getelementptr inbounds %struct.function, %struct.function* %308, i32 0, i32 1
  %309 = load %struct.stmt_status*, %struct.stmt_status** %stmt484, align 8
  %x_case_stack485 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %309, i32 0, i32 4
  %310 = load %struct.nesting*, %struct.nesting** %x_case_stack485, align 8
  %next486 = getelementptr inbounds %struct.nesting, %struct.nesting* %310, i32 0, i32 1
  %311 = load %struct.nesting*, %struct.nesting** %next486, align 8
  %312 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt487 = getelementptr inbounds %struct.function, %struct.function* %312, i32 0, i32 1
  %313 = load %struct.stmt_status*, %struct.stmt_status** %stmt487, align 8
  %x_case_stack488 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %313, i32 0, i32 4
  store %struct.nesting* %311, %struct.nesting** %x_case_stack488, align 8
  br label %if.end.489

if.end.489:                                       ; preds = %if.then.483, %if.end.478
  %314 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt490 = getelementptr inbounds %struct.function, %struct.function* %314, i32 0, i32 1
  %315 = load %struct.stmt_status*, %struct.stmt_status** %stmt490, align 8
  %x_nesting_stack491 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %315, i32 0, i32 5
  %316 = load %struct.nesting*, %struct.nesting** %x_nesting_stack491, align 8
  %depth = getelementptr inbounds %struct.nesting, %struct.nesting* %316, i32 0, i32 2
  %317 = load i32, i32* %depth, align 4
  %sub = sub nsw i32 %317, 1
  %318 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt492 = getelementptr inbounds %struct.function, %struct.function* %318, i32 0, i32 1
  %319 = load %struct.stmt_status*, %struct.stmt_status** %stmt492, align 8
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %319, i32 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4
  %320 = load %struct.nesting*, %struct.nesting** %this, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %320, i32 0, i32 0
  %321 = load %struct.nesting*, %struct.nesting** %all, align 8
  %322 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt493 = getelementptr inbounds %struct.function, %struct.function* %322, i32 0, i32 1
  %323 = load %struct.stmt_status*, %struct.stmt_status** %stmt493, align 8
  %x_nesting_stack494 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %323, i32 0, i32 5
  store %struct.nesting* %321, %struct.nesting** %x_nesting_stack494, align 8
  store %struct.obstack* @stmt_obstack, %struct.obstack** %__o, align 8
  %324 = load %struct.nesting*, %struct.nesting** %this, align 8
  %325 = bitcast %struct.nesting* %324 to i8*
  store i8* %325, i8** %__obj, align 8
  %326 = load i8*, i8** %__obj, align 8
  %327 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %327, i32 0, i32 1
  %328 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8
  %329 = bitcast %struct._obstack_chunk* %328 to i8*
  %cmp495 = icmp ugt i8* %326, %329
  br i1 %cmp495, label %land.lhs.true.497, label %if.else.501

land.lhs.true.497:                                ; preds = %if.end.489
  %330 = load i8*, i8** %__obj, align 8
  %331 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %331, i32 0, i32 4
  %332 = load i8*, i8** %chunk_limit, align 8
  %cmp498 = icmp ult i8* %330, %332
  br i1 %cmp498, label %if.then.500, label %if.else.501

if.then.500:                                      ; preds = %land.lhs.true.497
  %333 = load i8*, i8** %__obj, align 8
  %334 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %334, i32 0, i32 2
  store i8* %333, i8** %object_base, align 8
  %335 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %335, i32 0, i32 3
  store i8* %333, i8** %next_free, align 8
  br label %if.end.502

if.else.501:                                      ; preds = %land.lhs.true.497, %if.end.489
  %336 = load %struct.obstack*, %struct.obstack** %__o, align 8
  %337 = load i8*, i8** %__obj, align 8
  call void @obstack_free(%struct.obstack* %336, i8* %337)
  br label %if.end.502

if.end.502:                                       ; preds = %if.else.501, %if.then.500
  br label %do.cond

do.cond:                                          ; preds = %if.end.502
  %338 = load %struct.nesting*, %struct.nesting** %this, align 8
  %339 = load %struct.nesting*, %struct.nesting** %target, align 8
  %cmp503 = icmp ne %struct.nesting* %338, %339
  br i1 %cmp503, label %do.body.438, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.end.506

do.end.506:                                       ; preds = %do.end
  call void @free_temp_slots()
  br label %return

return:                                           ; preds = %do.end.506, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @group_case_nodes(%struct.case_node* %head) #0 {
entry:
  %head.addr = alloca %struct.case_node*, align 8
  %node = alloca %struct.case_node*, align 8
  %lb = alloca %struct.rtx_def*, align 8
  %lb2 = alloca %struct.rtx_def*, align 8
  %np = alloca %struct.case_node*, align 8
  store %struct.case_node* %head, %struct.case_node** %head.addr, align 8
  %0 = load %struct.case_node*, %struct.case_node** %head.addr, align 8
  store %struct.case_node* %0, %struct.case_node** %node, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %1 = load %struct.case_node*, %struct.case_node** %node, align 8
  %tobool = icmp ne %struct.case_node* %1, null
  br i1 %tobool, label %while.body, label %while.end.47

while.body:                                       ; preds = %while.cond
  %2 = load %struct.case_node*, %struct.case_node** %node, align 8
  %code_label = getelementptr inbounds %struct.case_node, %struct.case_node* %2, i32 0, i32 5
  %3 = load %union.tree_node*, %union.tree_node** %code_label, align 8
  %call = call %struct.rtx_def* @label_rtx(%union.tree_node* %3)
  %call1 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %call)
  store %struct.rtx_def* %call1, %struct.rtx_def** %lb, align 8
  %4 = load %struct.case_node*, %struct.case_node** %node, align 8
  store %struct.case_node* %4, %struct.case_node** %np, align 8
  br label %while.cond.2

while.cond.2:                                     ; preds = %while.body.43, %while.body
  %5 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %5, i32 0, i32 1
  %6 = load %struct.case_node*, %struct.case_node** %right, align 8
  store %struct.case_node* %6, %struct.case_node** %np, align 8
  %cmp = icmp ne %struct.case_node* %6, null
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond.2
  %7 = load %struct.case_node*, %struct.case_node** %np, align 8
  %code_label3 = getelementptr inbounds %struct.case_node, %struct.case_node* %7, i32 0, i32 5
  %8 = load %union.tree_node*, %union.tree_node** %code_label3, align 8
  %call4 = call %struct.rtx_def* @label_rtx(%union.tree_node* %8)
  %call5 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %call4)
  store %struct.rtx_def* %call5, %struct.rtx_def** %lb2, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %lb, align 8
  %cmp6 = icmp eq %struct.rtx_def* %call5, %9
  br i1 %cmp6, label %land.lhs.true.28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %lb, align 8
  %cmp7 = icmp ne %struct.rtx_def* %10, null
  br i1 %cmp7, label %land.lhs.true.8, label %land.end

land.lhs.true.8:                                  ; preds = %lor.lhs.false
  %11 = load %struct.rtx_def*, %struct.rtx_def** %lb2, align 8
  %cmp9 = icmp ne %struct.rtx_def* %11, null
  br i1 %cmp9, label %land.lhs.true.10, label %land.end

land.lhs.true.10:                                 ; preds = %land.lhs.true.8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %lb, align 8
  %call11 = call i32 @simplejump_p(%struct.rtx_def* %12)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %land.lhs.true.13, label %land.end

land.lhs.true.13:                                 ; preds = %land.lhs.true.10
  %13 = load %struct.rtx_def*, %struct.rtx_def** %lb2, align 8
  %call14 = call i32 @simplejump_p(%struct.rtx_def* %13)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %land.lhs.true.16, label %land.end

land.lhs.true.16:                                 ; preds = %land.lhs.true.13
  %14 = load %struct.rtx_def*, %struct.rtx_def** %lb, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %lb2, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 3
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx22, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 1
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  %call26 = call i32 @rtx_equal_p(%struct.rtx_def* %16, %struct.rtx_def* %19)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %land.lhs.true.28, label %land.end

land.lhs.true.28:                                 ; preds = %land.lhs.true.16, %land.lhs.true
  %20 = load %struct.case_node*, %struct.case_node** %np, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %20, i32 0, i32 3
  %21 = load %union.tree_node*, %union.tree_node** %low, align 8
  %22 = load %struct.case_node*, %struct.case_node** %node, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %22, i32 0, i32 4
  %23 = load %union.tree_node*, %union.tree_node** %high, align 8
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8
  %25 = load %struct.case_node*, %struct.case_node** %node, align 8
  %high29 = getelementptr inbounds %struct.case_node, %struct.case_node* %25, i32 0, i32 4
  %26 = load %union.tree_node*, %union.tree_node** %high29, align 8
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 12), align 8
  %call30 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %24, %union.tree_node* %26, %union.tree_node* %27)
  %call31 = call %union.tree_node* @fold(%union.tree_node* %call30)
  %call32 = call i32 @tree_int_cst_equal(%union.tree_node* %21, %union.tree_node* %call31)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.28
  %28 = load %struct.case_node*, %struct.case_node** %node, align 8
  %high34 = getelementptr inbounds %struct.case_node, %struct.case_node* %28, i32 0, i32 4
  %29 = load %union.tree_node*, %union.tree_node** %high34, align 8
  %30 = load %struct.case_node*, %struct.case_node** %node, align 8
  %high35 = getelementptr inbounds %struct.case_node, %struct.case_node* %30, i32 0, i32 4
  %31 = load %union.tree_node*, %union.tree_node** %high35, align 8
  %common36 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 1
  %32 = load %union.tree_node*, %union.tree_node** %type37, align 8
  %33 = load %struct.case_node*, %struct.case_node** %node, align 8
  %high38 = getelementptr inbounds %struct.case_node, %struct.case_node* %33, i32 0, i32 4
  %34 = load %union.tree_node*, %union.tree_node** %high38, align 8
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 12), align 8
  %call39 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %32, %union.tree_node* %34, %union.tree_node* %35)
  %call40 = call %union.tree_node* @fold(%union.tree_node* %call39)
  %call41 = call i32 @tree_int_cst_lt(%union.tree_node* %29, %union.tree_node* %call40)
  %tobool42 = icmp ne i32 %call41, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.28, %land.lhs.true.16, %land.lhs.true.13, %land.lhs.true.10, %land.lhs.true.8, %lor.lhs.false, %while.cond.2
  %36 = phi i1 [ false, %land.lhs.true.28 ], [ false, %land.lhs.true.16 ], [ false, %land.lhs.true.13 ], [ false, %land.lhs.true.10 ], [ false, %land.lhs.true.8 ], [ false, %lor.lhs.false ], [ false, %while.cond.2 ], [ %tobool42, %land.rhs ]
  br i1 %36, label %while.body.43, label %while.end

while.body.43:                                    ; preds = %land.end
  %37 = load %struct.case_node*, %struct.case_node** %np, align 8
  %high44 = getelementptr inbounds %struct.case_node, %struct.case_node* %37, i32 0, i32 4
  %38 = load %union.tree_node*, %union.tree_node** %high44, align 8
  %39 = load %struct.case_node*, %struct.case_node** %node, align 8
  %high45 = getelementptr inbounds %struct.case_node, %struct.case_node* %39, i32 0, i32 4
  store %union.tree_node* %38, %union.tree_node** %high45, align 8
  br label %while.cond.2

while.end:                                        ; preds = %land.end
  %40 = load %struct.case_node*, %struct.case_node** %np, align 8
  %41 = load %struct.case_node*, %struct.case_node** %node, align 8
  %right46 = getelementptr inbounds %struct.case_node, %struct.case_node* %41, i32 0, i32 1
  store %struct.case_node* %40, %struct.case_node** %right46, align 8
  %42 = load %struct.case_node*, %struct.case_node** %np, align 8
  store %struct.case_node* %42, %struct.case_node** %node, align 8
  br label %while.cond

while.end.47:                                     ; preds = %while.cond
  ret void
}

declare i32 @case_values_threshold() #2

declare i32 @have_insn_for(i32, i32) #2

declare %struct.rtx_def* @convert_to_mode(i32, %struct.rtx_def*, i32) #2

declare %union.tree_node* @build_int_2_wide(i64, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @estimate_case_costs(%struct.case_node* %node) #0 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %struct.case_node*, align 8
  %min_ascii = alloca %union.tree_node*, align 8
  %max_ascii = alloca %union.tree_node*, align 8
  %n = alloca %struct.case_node*, align 8
  %i = alloca i32, align 4
  store %struct.case_node* %node, %struct.case_node** %node.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 13), align 8
  store %union.tree_node* %0, %union.tree_node** %min_ascii, align 8
  %1 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %1, i32 0, i32 4
  %2 = load %union.tree_node*, %union.tree_node** %high, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call %union.tree_node* @build_int_2_wide(i64 127, i64 0)
  %call1 = call %union.tree_node* @convert(%union.tree_node* %3, %union.tree_node* %call)
  store %union.tree_node* %call1, %union.tree_node** %max_ascii, align 8
  %4 = load i32, i32* @cost_table_initialized, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end.30, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* @cost_table_initialized, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %5, 128
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %and = and i32 %6, 255
  %idxprom = sext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i32 0, i64 %idxprom
  %7 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %7 to i32
  %and2 = and i32 %conv, 140
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %add = add nsw i32 %8, 1
  %conv5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [129 x i16], [129 x i16]* @cost_table_, i32 0, i64 %conv5
  store i16 16, i16* %arrayidx6, align 2
  br label %if.end.29

if.else:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %and7 = and i32 %9, 255
  %idxprom8 = sext i32 %and7 to i64
  %arrayidx9 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i32 0, i64 %idxprom8
  %10 = load i16, i16* %arrayidx9, align 2
  %conv10 = zext i16 %10 to i32
  %and11 = and i32 %conv10, 32
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then.13, label %if.else.17

if.then.13:                                       ; preds = %if.else
  %11 = load i32, i32* %i, align 4
  %add14 = add nsw i32 %11, 1
  %conv15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds [129 x i16], [129 x i16]* @cost_table_, i32 0, i64 %conv15
  store i16 8, i16* %arrayidx16, align 2
  br label %if.end.28

if.else.17:                                       ; preds = %if.else
  %12 = load i32, i32* %i, align 4
  %and18 = and i32 %12, 255
  %idxprom19 = sext i32 %and18 to i64
  %arrayidx20 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i32 0, i64 %idxprom19
  %13 = load i16, i16* %arrayidx20, align 2
  %conv21 = zext i16 %13 to i32
  %and22 = and i32 %conv21, 2
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then.24, label %if.end

if.then.24:                                       ; preds = %if.else.17
  %14 = load i32, i32* %i, align 4
  %add25 = add nsw i32 %14, 1
  %conv26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds [129 x i16], [129 x i16]* @cost_table_, i32 0, i64 %conv26
  store i16 -1, i16* %arrayidx27, align 2
  br label %if.end

if.end:                                           ; preds = %if.then.24, %if.else.17
  br label %if.end.28

if.end.28:                                        ; preds = %if.end, %if.then.13
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then.4
  br label %for.inc

for.inc:                                          ; preds = %if.end.29
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i16 8, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @cost_table_, i32 0, i64 33), align 2
  store i16 4, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @cost_table_, i32 0, i64 10), align 2
  store i16 4, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @cost_table_, i32 0, i64 1), align 2
  store i16 2, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @cost_table_, i32 0, i64 11), align 2
  store i16 1, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @cost_table_, i32 0, i64 13), align 2
  store i16 1, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @cost_table_, i32 0, i64 12), align 2
  store i16 1, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @cost_table_, i32 0, i64 9), align 2
  br label %if.end.30

if.end.30:                                        ; preds = %for.end, %entry
  %16 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  store %struct.case_node* %16, %struct.case_node** %n, align 8
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc.116, %if.end.30
  %17 = load %struct.case_node*, %struct.case_node** %n, align 8
  %tobool32 = icmp ne %struct.case_node* %17, null
  br i1 %tobool32, label %for.body.33, label %for.end.117

for.body.33:                                      ; preds = %for.cond.31
  %18 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %18, i32 0, i32 3
  %19 = load %union.tree_node*, %union.tree_node** %low, align 8
  %int_cst = bitcast %union.tree_node* %19 to %struct.tree_int_cst*
  %int_cst34 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %high35 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst34, i32 0, i32 1
  %20 = load i64, i64* %high35, align 8
  %21 = load %union.tree_node*, %union.tree_node** %min_ascii, align 8
  %int_cst36 = bitcast %union.tree_node* %21 to %struct.tree_int_cst*
  %int_cst37 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst36, i32 0, i32 2
  %high38 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst37, i32 0, i32 1
  %22 = load i64, i64* %high38, align 8
  %cmp39 = icmp slt i64 %20, %22
  br i1 %cmp39, label %if.then.89, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.33
  %23 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low41 = getelementptr inbounds %struct.case_node, %struct.case_node* %23, i32 0, i32 3
  %24 = load %union.tree_node*, %union.tree_node** %low41, align 8
  %int_cst42 = bitcast %union.tree_node* %24 to %struct.tree_int_cst*
  %int_cst43 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst42, i32 0, i32 2
  %high44 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst43, i32 0, i32 1
  %25 = load i64, i64* %high44, align 8
  %26 = load %union.tree_node*, %union.tree_node** %min_ascii, align 8
  %int_cst45 = bitcast %union.tree_node* %26 to %struct.tree_int_cst*
  %int_cst46 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst45, i32 0, i32 2
  %high47 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst46, i32 0, i32 1
  %27 = load i64, i64* %high47, align 8
  %cmp48 = icmp eq i64 %25, %27
  br i1 %cmp48, label %land.lhs.true, label %lor.lhs.false.59

land.lhs.true:                                    ; preds = %lor.lhs.false
  %28 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low50 = getelementptr inbounds %struct.case_node, %struct.case_node* %28, i32 0, i32 3
  %29 = load %union.tree_node*, %union.tree_node** %low50, align 8
  %int_cst51 = bitcast %union.tree_node* %29 to %struct.tree_int_cst*
  %int_cst52 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst51, i32 0, i32 2
  %low53 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst52, i32 0, i32 0
  %30 = load i64, i64* %low53, align 8
  %31 = load %union.tree_node*, %union.tree_node** %min_ascii, align 8
  %int_cst54 = bitcast %union.tree_node* %31 to %struct.tree_int_cst*
  %int_cst55 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst54, i32 0, i32 2
  %low56 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst55, i32 0, i32 0
  %32 = load i64, i64* %low56, align 8
  %cmp57 = icmp ult i64 %30, %32
  br i1 %cmp57, label %if.then.89, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %land.lhs.true, %lor.lhs.false
  %33 = load %union.tree_node*, %union.tree_node** %max_ascii, align 8
  %int_cst60 = bitcast %union.tree_node* %33 to %struct.tree_int_cst*
  %int_cst61 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst60, i32 0, i32 2
  %high62 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst61, i32 0, i32 1
  %34 = load i64, i64* %high62, align 8
  %35 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high63 = getelementptr inbounds %struct.case_node, %struct.case_node* %35, i32 0, i32 4
  %36 = load %union.tree_node*, %union.tree_node** %high63, align 8
  %int_cst64 = bitcast %union.tree_node* %36 to %struct.tree_int_cst*
  %int_cst65 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst64, i32 0, i32 2
  %high66 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst65, i32 0, i32 1
  %37 = load i64, i64* %high66, align 8
  %cmp67 = icmp slt i64 %34, %37
  br i1 %cmp67, label %if.then.89, label %lor.lhs.false.69

lor.lhs.false.69:                                 ; preds = %lor.lhs.false.59
  %38 = load %union.tree_node*, %union.tree_node** %max_ascii, align 8
  %int_cst70 = bitcast %union.tree_node* %38 to %struct.tree_int_cst*
  %int_cst71 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst70, i32 0, i32 2
  %high72 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst71, i32 0, i32 1
  %39 = load i64, i64* %high72, align 8
  %40 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high73 = getelementptr inbounds %struct.case_node, %struct.case_node* %40, i32 0, i32 4
  %41 = load %union.tree_node*, %union.tree_node** %high73, align 8
  %int_cst74 = bitcast %union.tree_node* %41 to %struct.tree_int_cst*
  %int_cst75 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst74, i32 0, i32 2
  %high76 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst75, i32 0, i32 1
  %42 = load i64, i64* %high76, align 8
  %cmp77 = icmp eq i64 %39, %42
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.90

land.lhs.true.79:                                 ; preds = %lor.lhs.false.69
  %43 = load %union.tree_node*, %union.tree_node** %max_ascii, align 8
  %int_cst80 = bitcast %union.tree_node* %43 to %struct.tree_int_cst*
  %int_cst81 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst80, i32 0, i32 2
  %low82 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst81, i32 0, i32 0
  %44 = load i64, i64* %low82, align 8
  %45 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high83 = getelementptr inbounds %struct.case_node, %struct.case_node* %45, i32 0, i32 4
  %46 = load %union.tree_node*, %union.tree_node** %high83, align 8
  %int_cst84 = bitcast %union.tree_node* %46 to %struct.tree_int_cst*
  %int_cst85 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst84, i32 0, i32 2
  %low86 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst85, i32 0, i32 0
  %47 = load i64, i64* %low86, align 8
  %cmp87 = icmp ult i64 %44, %47
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %land.lhs.true.79, %lor.lhs.false.59, %land.lhs.true, %for.body.33
  store i32 0, i32* %retval
  br label %return

if.end.90:                                        ; preds = %land.lhs.true.79, %lor.lhs.false.69
  %48 = load %struct.case_node*, %struct.case_node** %n, align 8
  %low91 = getelementptr inbounds %struct.case_node, %struct.case_node* %48, i32 0, i32 3
  %49 = load %union.tree_node*, %union.tree_node** %low91, align 8
  %int_cst92 = bitcast %union.tree_node* %49 to %struct.tree_int_cst*
  %int_cst93 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst92, i32 0, i32 2
  %low94 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst93, i32 0, i32 0
  %50 = load i64, i64* %low94, align 8
  %conv95 = trunc i64 %50 to i32
  store i32 %conv95, i32* %i, align 4
  br label %for.cond.96

for.cond.96:                                      ; preds = %for.inc.113, %if.end.90
  %51 = load i32, i32* %i, align 4
  %conv97 = sext i32 %51 to i64
  %52 = load %struct.case_node*, %struct.case_node** %n, align 8
  %high98 = getelementptr inbounds %struct.case_node, %struct.case_node* %52, i32 0, i32 4
  %53 = load %union.tree_node*, %union.tree_node** %high98, align 8
  %int_cst99 = bitcast %union.tree_node* %53 to %struct.tree_int_cst*
  %int_cst100 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst99, i32 0, i32 2
  %low101 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst100, i32 0, i32 0
  %54 = load i64, i64* %low101, align 8
  %cmp102 = icmp sle i64 %conv97, %54
  br i1 %cmp102, label %for.body.104, label %for.end.115

for.body.104:                                     ; preds = %for.cond.96
  %55 = load i32, i32* %i, align 4
  %add105 = add nsw i32 %55, 1
  %conv106 = sext i32 %add105 to i64
  %arrayidx107 = getelementptr inbounds [129 x i16], [129 x i16]* @cost_table_, i32 0, i64 %conv106
  %56 = load i16, i16* %arrayidx107, align 2
  %conv108 = sext i16 %56 to i32
  %cmp109 = icmp slt i32 %conv108, 0
  br i1 %cmp109, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %for.body.104
  store i32 0, i32* %retval
  br label %return

if.end.112:                                       ; preds = %for.body.104
  br label %for.inc.113

for.inc.113:                                      ; preds = %if.end.112
  %57 = load i32, i32* %i, align 4
  %inc114 = add nsw i32 %57, 1
  store i32 %inc114, i32* %i, align 4
  br label %for.cond.96

for.end.115:                                      ; preds = %for.cond.96
  br label %for.inc.116

for.inc.116:                                      ; preds = %for.end.115
  %58 = load %struct.case_node*, %struct.case_node** %n, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %58, i32 0, i32 1
  %59 = load %struct.case_node*, %struct.case_node** %right, align 8
  store %struct.case_node* %59, %struct.case_node** %n, align 8
  br label %for.cond.31

for.end.117:                                      ; preds = %for.cond.31
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.117, %if.then.111, %if.then.89
  %60 = load i32, i32* %retval
  ret i32 %60
}

; Function Attrs: nounwind uwtable
define internal void @balance_case_nodes(%struct.case_node** %head, %struct.case_node* %parent) #0 {
entry:
  %head.addr = alloca %struct.case_node**, align 8
  %parent.addr = alloca %struct.case_node*, align 8
  %np = alloca %struct.case_node*, align 8
  %cost = alloca i32, align 4
  %i = alloca i32, align 4
  %ranges = alloca i32, align 4
  %npp = alloca %struct.case_node**, align 8
  %left = alloca %struct.case_node*, align 8
  %n_moved = alloca i32, align 4
  store %struct.case_node** %head, %struct.case_node*** %head.addr, align 8
  store %struct.case_node* %parent, %struct.case_node** %parent.addr, align 8
  %0 = load %struct.case_node**, %struct.case_node*** %head.addr, align 8
  %1 = load %struct.case_node*, %struct.case_node** %0, align 8
  store %struct.case_node* %1, %struct.case_node** %np, align 8
  %2 = load %struct.case_node*, %struct.case_node** %np, align 8
  %tobool = icmp ne %struct.case_node* %2, null
  br i1 %tobool, label %if.then, label %if.end.110

if.then:                                          ; preds = %entry
  store i32 0, i32* %cost, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %ranges, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.21, %if.then
  %3 = load %struct.case_node*, %struct.case_node** %np, align 8
  %tobool1 = icmp ne %struct.case_node* %3, null
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.case_node*, %struct.case_node** %np, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %4, i32 0, i32 3
  %5 = load %union.tree_node*, %union.tree_node** %low, align 8
  %6 = load %struct.case_node*, %struct.case_node** %np, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %6, i32 0, i32 4
  %7 = load %union.tree_node*, %union.tree_node** %high, align 8
  %call = call i32 @tree_int_cst_equal(%union.tree_node* %5, %union.tree_node* %7)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end.10, label %if.then.3

if.then.3:                                        ; preds = %while.body
  %8 = load i32, i32* %ranges, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %ranges, align 4
  %9 = load i32, i32* @use_cost_table, align 4
  %tobool4 = icmp ne i32 %9, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then.3
  %10 = load %struct.case_node*, %struct.case_node** %np, align 8
  %high6 = getelementptr inbounds %struct.case_node, %struct.case_node* %10, i32 0, i32 4
  %11 = load %union.tree_node*, %union.tree_node** %high6, align 8
  %int_cst = bitcast %union.tree_node* %11 to %struct.tree_int_cst*
  %int_cst7 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low8 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst7, i32 0, i32 0
  %12 = load i64, i64* %low8, align 8
  %add = add i64 %12, 1
  %arrayidx = getelementptr inbounds [129 x i16], [129 x i16]* @cost_table_, i32 0, i64 %add
  %13 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %13 to i32
  %14 = load i32, i32* %cost, align 4
  %add9 = add nsw i32 %14, %conv
  store i32 %add9, i32* %cost, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then.3
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %while.body
  %15 = load i32, i32* @use_cost_table, align 4
  %tobool11 = icmp ne i32 %15, 0
  br i1 %tobool11, label %if.then.12, label %if.end.21

if.then.12:                                       ; preds = %if.end.10
  %16 = load %struct.case_node*, %struct.case_node** %np, align 8
  %low13 = getelementptr inbounds %struct.case_node, %struct.case_node* %16, i32 0, i32 3
  %17 = load %union.tree_node*, %union.tree_node** %low13, align 8
  %int_cst14 = bitcast %union.tree_node* %17 to %struct.tree_int_cst*
  %int_cst15 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst14, i32 0, i32 2
  %low16 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst15, i32 0, i32 0
  %18 = load i64, i64* %low16, align 8
  %add17 = add i64 %18, 1
  %arrayidx18 = getelementptr inbounds [129 x i16], [129 x i16]* @cost_table_, i32 0, i64 %add17
  %19 = load i16, i16* %arrayidx18, align 2
  %conv19 = sext i16 %19 to i32
  %20 = load i32, i32* %cost, align 4
  %add20 = add nsw i32 %20, %conv19
  store i32 %add20, i32* %cost, align 4
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.12, %if.end.10
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  %22 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %22, i32 0, i32 1
  %23 = load %struct.case_node*, %struct.case_node** %right, align 8
  store %struct.case_node* %23, %struct.case_node** %np, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load i32, i32* %i, align 4
  %cmp = icmp sgt i32 %24, 2
  br i1 %cmp, label %if.then.24, label %if.else.98

if.then.24:                                       ; preds = %while.end
  %25 = load %struct.case_node**, %struct.case_node*** %head.addr, align 8
  store %struct.case_node** %25, %struct.case_node*** %npp, align 8
  %26 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %27 = load %struct.case_node*, %struct.case_node** %26, align 8
  store %struct.case_node* %27, %struct.case_node** %left, align 8
  %28 = load i32, i32* @use_cost_table, align 4
  %tobool25 = icmp ne i32 %28, 0
  br i1 %tobool25, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %if.then.24
  store i32 0, i32* %n_moved, align 4
  %29 = load i32, i32* %cost, align 4
  %add27 = add nsw i32 %29, 1
  %div = sdiv i32 %add27, 2
  store i32 %div, i32* %i, align 4
  br label %while.body.29

while.body.29:                                    ; preds = %if.then.26, %if.end.54
  %30 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %31 = load %struct.case_node*, %struct.case_node** %30, align 8
  %low30 = getelementptr inbounds %struct.case_node, %struct.case_node* %31, i32 0, i32 3
  %32 = load %union.tree_node*, %union.tree_node** %low30, align 8
  %33 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %34 = load %struct.case_node*, %struct.case_node** %33, align 8
  %high31 = getelementptr inbounds %struct.case_node, %struct.case_node* %34, i32 0, i32 4
  %35 = load %union.tree_node*, %union.tree_node** %high31, align 8
  %call32 = call i32 @tree_int_cst_equal(%union.tree_node* %32, %union.tree_node* %35)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.end.42, label %if.then.34

if.then.34:                                       ; preds = %while.body.29
  %36 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %37 = load %struct.case_node*, %struct.case_node** %36, align 8
  %high35 = getelementptr inbounds %struct.case_node, %struct.case_node* %37, i32 0, i32 4
  %38 = load %union.tree_node*, %union.tree_node** %high35, align 8
  %int_cst36 = bitcast %union.tree_node* %38 to %struct.tree_int_cst*
  %int_cst37 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst36, i32 0, i32 2
  %low38 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst37, i32 0, i32 0
  %39 = load i64, i64* %low38, align 8
  %add39 = add i64 %39, 1
  %arrayidx40 = getelementptr inbounds [129 x i16], [129 x i16]* @cost_table_, i32 0, i64 %add39
  %40 = load i16, i16* %arrayidx40, align 2
  %conv41 = sext i16 %40 to i32
  %41 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %41, %conv41
  store i32 %sub, i32* %i, align 4
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.34, %while.body.29
  %42 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %43 = load %struct.case_node*, %struct.case_node** %42, align 8
  %low43 = getelementptr inbounds %struct.case_node, %struct.case_node* %43, i32 0, i32 3
  %44 = load %union.tree_node*, %union.tree_node** %low43, align 8
  %int_cst44 = bitcast %union.tree_node* %44 to %struct.tree_int_cst*
  %int_cst45 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst44, i32 0, i32 2
  %low46 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst45, i32 0, i32 0
  %45 = load i64, i64* %low46, align 8
  %add47 = add i64 %45, 1
  %arrayidx48 = getelementptr inbounds [129 x i16], [129 x i16]* @cost_table_, i32 0, i64 %add47
  %46 = load i16, i16* %arrayidx48, align 2
  %conv49 = sext i16 %46 to i32
  %47 = load i32, i32* %i, align 4
  %sub50 = sub nsw i32 %47, %conv49
  store i32 %sub50, i32* %i, align 4
  %48 = load i32, i32* %i, align 4
  %cmp51 = icmp sle i32 %48, 0
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %if.end.42
  br label %while.end.57

if.end.54:                                        ; preds = %if.end.42
  %49 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %50 = load %struct.case_node*, %struct.case_node** %49, align 8
  %right55 = getelementptr inbounds %struct.case_node, %struct.case_node* %50, i32 0, i32 1
  store %struct.case_node** %right55, %struct.case_node*** %npp, align 8
  %51 = load i32, i32* %n_moved, align 4
  %add56 = add nsw i32 %51, 1
  store i32 %add56, i32* %n_moved, align 4
  br label %while.body.29

while.end.57:                                     ; preds = %if.then.53
  %52 = load i32, i32* %n_moved, align 4
  %cmp58 = icmp eq i32 %52, 0
  br i1 %cmp58, label %if.then.60, label %if.end.68

if.then.60:                                       ; preds = %while.end.57
  %53 = load %struct.case_node**, %struct.case_node*** %head.addr, align 8
  %54 = load %struct.case_node*, %struct.case_node** %53, align 8
  store %struct.case_node* %54, %struct.case_node** %np, align 8
  %55 = load %struct.case_node*, %struct.case_node** %parent.addr, align 8
  %56 = load %struct.case_node*, %struct.case_node** %np, align 8
  %parent61 = getelementptr inbounds %struct.case_node, %struct.case_node* %56, i32 0, i32 2
  store %struct.case_node* %55, %struct.case_node** %parent61, align 8
  %57 = load %struct.case_node*, %struct.case_node** %np, align 8
  %left62 = getelementptr inbounds %struct.case_node, %struct.case_node* %57, i32 0, i32 0
  %58 = load %struct.case_node*, %struct.case_node** %np, align 8
  call void @balance_case_nodes(%struct.case_node** %left62, %struct.case_node* %58)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.60
  %59 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right63 = getelementptr inbounds %struct.case_node, %struct.case_node* %59, i32 0, i32 1
  %60 = load %struct.case_node*, %struct.case_node** %right63, align 8
  %tobool64 = icmp ne %struct.case_node* %60, null
  br i1 %tobool64, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %61 = load %struct.case_node*, %struct.case_node** %np, align 8
  %62 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right65 = getelementptr inbounds %struct.case_node, %struct.case_node* %62, i32 0, i32 1
  %63 = load %struct.case_node*, %struct.case_node** %right65, align 8
  %parent66 = getelementptr inbounds %struct.case_node, %struct.case_node* %63, i32 0, i32 2
  store %struct.case_node* %61, %struct.case_node** %parent66, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %64 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right67 = getelementptr inbounds %struct.case_node, %struct.case_node* %64, i32 0, i32 1
  %65 = load %struct.case_node*, %struct.case_node** %right67, align 8
  store %struct.case_node* %65, %struct.case_node** %np, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.110

if.end.68:                                        ; preds = %while.end.57
  br label %if.end.93

if.else:                                          ; preds = %if.then.24
  %66 = load i32, i32* %i, align 4
  %cmp69 = icmp eq i32 %66, 3
  br i1 %cmp69, label %if.then.71, label %if.else.73

if.then.71:                                       ; preds = %if.else
  %67 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %68 = load %struct.case_node*, %struct.case_node** %67, align 8
  %right72 = getelementptr inbounds %struct.case_node, %struct.case_node* %68, i32 0, i32 1
  store %struct.case_node** %right72, %struct.case_node*** %npp, align 8
  br label %if.end.92

if.else.73:                                       ; preds = %if.else
  %69 = load i32, i32* %i, align 4
  %70 = load i32, i32* %ranges, align 4
  %add74 = add nsw i32 %69, %70
  %add75 = add nsw i32 %add74, 1
  %div76 = sdiv i32 %add75, 2
  store i32 %div76, i32* %i, align 4
  br label %while.body.78

while.body.78:                                    ; preds = %if.else.73, %if.end.89
  %71 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %72 = load %struct.case_node*, %struct.case_node** %71, align 8
  %low79 = getelementptr inbounds %struct.case_node, %struct.case_node* %72, i32 0, i32 3
  %73 = load %union.tree_node*, %union.tree_node** %low79, align 8
  %74 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %75 = load %struct.case_node*, %struct.case_node** %74, align 8
  %high80 = getelementptr inbounds %struct.case_node, %struct.case_node* %75, i32 0, i32 4
  %76 = load %union.tree_node*, %union.tree_node** %high80, align 8
  %call81 = call i32 @tree_int_cst_equal(%union.tree_node* %73, %union.tree_node* %76)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.end.84, label %if.then.83

if.then.83:                                       ; preds = %while.body.78
  %77 = load i32, i32* %i, align 4
  %dec = add nsw i32 %77, -1
  store i32 %dec, i32* %i, align 4
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.83, %while.body.78
  %78 = load i32, i32* %i, align 4
  %dec85 = add nsw i32 %78, -1
  store i32 %dec85, i32* %i, align 4
  %79 = load i32, i32* %i, align 4
  %cmp86 = icmp sle i32 %79, 0
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.end.84
  br label %while.end.91

if.end.89:                                        ; preds = %if.end.84
  %80 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %81 = load %struct.case_node*, %struct.case_node** %80, align 8
  %right90 = getelementptr inbounds %struct.case_node, %struct.case_node* %81, i32 0, i32 1
  store %struct.case_node** %right90, %struct.case_node*** %npp, align 8
  br label %while.body.78

while.end.91:                                     ; preds = %if.then.88
  br label %if.end.92

if.end.92:                                        ; preds = %while.end.91, %if.then.71
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.end.68
  %82 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  %83 = load %struct.case_node*, %struct.case_node** %82, align 8
  store %struct.case_node* %83, %struct.case_node** %np, align 8
  %84 = load %struct.case_node**, %struct.case_node*** %head.addr, align 8
  store %struct.case_node* %83, %struct.case_node** %84, align 8
  %85 = load %struct.case_node**, %struct.case_node*** %npp, align 8
  store %struct.case_node* null, %struct.case_node** %85, align 8
  %86 = load %struct.case_node*, %struct.case_node** %parent.addr, align 8
  %87 = load %struct.case_node*, %struct.case_node** %np, align 8
  %parent94 = getelementptr inbounds %struct.case_node, %struct.case_node* %87, i32 0, i32 2
  store %struct.case_node* %86, %struct.case_node** %parent94, align 8
  %88 = load %struct.case_node*, %struct.case_node** %left, align 8
  %89 = load %struct.case_node*, %struct.case_node** %np, align 8
  %left95 = getelementptr inbounds %struct.case_node, %struct.case_node* %89, i32 0, i32 0
  store %struct.case_node* %88, %struct.case_node** %left95, align 8
  %90 = load %struct.case_node*, %struct.case_node** %np, align 8
  %left96 = getelementptr inbounds %struct.case_node, %struct.case_node* %90, i32 0, i32 0
  %91 = load %struct.case_node*, %struct.case_node** %np, align 8
  call void @balance_case_nodes(%struct.case_node** %left96, %struct.case_node* %91)
  %92 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right97 = getelementptr inbounds %struct.case_node, %struct.case_node* %92, i32 0, i32 1
  %93 = load %struct.case_node*, %struct.case_node** %np, align 8
  call void @balance_case_nodes(%struct.case_node** %right97, %struct.case_node* %93)
  br label %if.end.109

if.else.98:                                       ; preds = %while.end
  %94 = load %struct.case_node**, %struct.case_node*** %head.addr, align 8
  %95 = load %struct.case_node*, %struct.case_node** %94, align 8
  store %struct.case_node* %95, %struct.case_node** %np, align 8
  %96 = load %struct.case_node*, %struct.case_node** %parent.addr, align 8
  %97 = load %struct.case_node*, %struct.case_node** %np, align 8
  %parent99 = getelementptr inbounds %struct.case_node, %struct.case_node* %97, i32 0, i32 2
  store %struct.case_node* %96, %struct.case_node** %parent99, align 8
  br label %for.cond.100

for.cond.100:                                     ; preds = %for.inc.106, %if.else.98
  %98 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right101 = getelementptr inbounds %struct.case_node, %struct.case_node* %98, i32 0, i32 1
  %99 = load %struct.case_node*, %struct.case_node** %right101, align 8
  %tobool102 = icmp ne %struct.case_node* %99, null
  br i1 %tobool102, label %for.body.103, label %for.end.108

for.body.103:                                     ; preds = %for.cond.100
  %100 = load %struct.case_node*, %struct.case_node** %np, align 8
  %101 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right104 = getelementptr inbounds %struct.case_node, %struct.case_node* %101, i32 0, i32 1
  %102 = load %struct.case_node*, %struct.case_node** %right104, align 8
  %parent105 = getelementptr inbounds %struct.case_node, %struct.case_node* %102, i32 0, i32 2
  store %struct.case_node* %100, %struct.case_node** %parent105, align 8
  br label %for.inc.106

for.inc.106:                                      ; preds = %for.body.103
  %103 = load %struct.case_node*, %struct.case_node** %np, align 8
  %right107 = getelementptr inbounds %struct.case_node, %struct.case_node* %103, i32 0, i32 1
  %104 = load %struct.case_node*, %struct.case_node** %right107, align 8
  store %struct.case_node* %104, %struct.case_node** %np, align 8
  br label %for.cond.100

for.end.108:                                      ; preds = %for.cond.100
  br label %if.end.109

if.end.109:                                       ; preds = %for.end.108, %if.end.93
  br label %if.end.110

if.end.110:                                       ; preds = %for.end, %if.end.109, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @emit_case_nodes(%struct.rtx_def* %index, %struct.case_node* %node, %struct.rtx_def* %default_label, %union.tree_node* %index_type) #0 {
entry:
  %index.addr = alloca %struct.rtx_def*, align 8
  %node.addr = alloca %struct.case_node*, align 8
  %default_label.addr = alloca %struct.rtx_def*, align 8
  %index_type.addr = alloca %union.tree_node*, align 8
  %unsignedp = alloca i32, align 4
  %mode = alloca i32, align 4
  %imode = alloca i32, align 4
  %test_label = alloca %union.tree_node*, align 8
  %test_label138 = alloca %union.tree_node*, align 8
  %high_bound = alloca i32, align 4
  %low_bound = alloca i32, align 4
  %type229 = alloca %union.tree_node*, align 8
  %low231 = alloca %union.tree_node*, align 8
  %high234 = alloca %union.tree_node*, align 8
  %low_rtx = alloca %struct.rtx_def*, align 8
  %new_index = alloca %struct.rtx_def*, align 8
  %new_bound = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %index, %struct.rtx_def** %index.addr, align 8
  store %struct.case_node* %node, %struct.case_node** %node.addr, align 8
  store %struct.rtx_def* %default_label, %struct.rtx_def** %default_label.addr, align 8
  store %union.tree_node* %index_type, %union.tree_node** %index_type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  store i32 %bf.clear, i32* %unsignedp, align 4
  %1 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load1 = load i32, i32* %2, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  store i32 %bf.clear3, i32* %mode, align 4
  %3 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %type = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6
  %bf.load5 = load i32, i32* %mode4, align 4
  %bf.lshr6 = lshr i32 %bf.load5, 9
  %bf.clear7 = and i32 %bf.lshr6, 127
  store i32 %bf.clear7, i32* %imode, align 4
  %4 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %5 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call = call i32 @node_is_bounded(%struct.case_node* %4, %union.tree_node* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %code_label = getelementptr inbounds %struct.case_node, %struct.case_node* %6, i32 0, i32 5
  %7 = load %union.tree_node*, %union.tree_node** %code_label, align 8
  %call8 = call %struct.rtx_def* @label_rtx(%union.tree_node* %7)
  call void @emit_jump(%struct.rtx_def* %call8)
  br label %if.end.251

if.else:                                          ; preds = %entry
  %8 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %8, i32 0, i32 3
  %9 = load %union.tree_node*, %union.tree_node** %low, align 8
  %10 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %10, i32 0, i32 4
  %11 = load %union.tree_node*, %union.tree_node** %high, align 8
  %call9 = call i32 @tree_int_cst_equal(%union.tree_node* %9, %union.tree_node* %11)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.else.131

if.then.11:                                       ; preds = %if.else
  %12 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %13 = load i32, i32* %mode, align 4
  %14 = load i32, i32* %imode, align 4
  %15 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low12 = getelementptr inbounds %struct.case_node, %struct.case_node* %15, i32 0, i32 3
  %16 = load %union.tree_node*, %union.tree_node** %low12, align 8
  %call13 = call %struct.rtx_def* @expand_expr(%union.tree_node* %16, %struct.rtx_def* null, i32 0, i32 0)
  %17 = load i32, i32* %unsignedp, align 4
  %call14 = call %struct.rtx_def* @convert_modes(i32 %13, i32 %14, %struct.rtx_def* %call13, i32 %17)
  %18 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %code_label15 = getelementptr inbounds %struct.case_node, %struct.case_node* %18, i32 0, i32 5
  %19 = load %union.tree_node*, %union.tree_node** %code_label15, align 8
  %call16 = call %struct.rtx_def* @label_rtx(%union.tree_node* %19)
  %20 = load i32, i32* %unsignedp, align 4
  call void @do_jump_if_equal(%struct.rtx_def* %12, %struct.rtx_def* %call14, %struct.rtx_def* %call16, i32 %20)
  %21 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %21, i32 0, i32 1
  %22 = load %struct.case_node*, %struct.case_node** %right, align 8
  %cmp = icmp ne %struct.case_node* %22, null
  br i1 %cmp, label %land.lhs.true, label %if.else.51

land.lhs.true:                                    ; preds = %if.then.11
  %23 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left = getelementptr inbounds %struct.case_node, %struct.case_node* %23, i32 0, i32 0
  %24 = load %struct.case_node*, %struct.case_node** %left, align 8
  %cmp17 = icmp ne %struct.case_node* %24, null
  br i1 %cmp17, label %if.then.18, label %if.else.51

if.then.18:                                       ; preds = %land.lhs.true
  %25 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right19 = getelementptr inbounds %struct.case_node, %struct.case_node* %25, i32 0, i32 1
  %26 = load %struct.case_node*, %struct.case_node** %right19, align 8
  %27 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call20 = call i32 @node_is_bounded(%struct.case_node* %26, %union.tree_node* %27)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.else.30

if.then.22:                                       ; preds = %if.then.18
  %28 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %29 = load i32, i32* %mode, align 4
  %30 = load i32, i32* %imode, align 4
  %31 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high23 = getelementptr inbounds %struct.case_node, %struct.case_node* %31, i32 0, i32 4
  %32 = load %union.tree_node*, %union.tree_node** %high23, align 8
  %call24 = call %struct.rtx_def* @expand_expr(%union.tree_node* %32, %struct.rtx_def* null, i32 0, i32 0)
  %33 = load i32, i32* %unsignedp, align 4
  %call25 = call %struct.rtx_def* @convert_modes(i32 %29, i32 %30, %struct.rtx_def* %call24, i32 %33)
  %34 = load i32, i32* %mode, align 4
  %35 = load i32, i32* %unsignedp, align 4
  %36 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right26 = getelementptr inbounds %struct.case_node, %struct.case_node* %36, i32 0, i32 1
  %37 = load %struct.case_node*, %struct.case_node** %right26, align 8
  %code_label27 = getelementptr inbounds %struct.case_node, %struct.case_node* %37, i32 0, i32 5
  %38 = load %union.tree_node*, %union.tree_node** %code_label27, align 8
  %call28 = call %struct.rtx_def* @label_rtx(%union.tree_node* %38)
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %28, %struct.rtx_def* %call25, i32 105, %struct.rtx_def* null, i32 %34, i32 %35, %struct.rtx_def* %call28)
  %39 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %40 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left29 = getelementptr inbounds %struct.case_node, %struct.case_node* %40, i32 0, i32 0
  %41 = load %struct.case_node*, %struct.case_node** %left29, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %43 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %39, %struct.case_node* %41, %struct.rtx_def* %42, %union.tree_node* %43)
  br label %if.end.50

if.else.30:                                       ; preds = %if.then.18
  %44 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left31 = getelementptr inbounds %struct.case_node, %struct.case_node* %44, i32 0, i32 0
  %45 = load %struct.case_node*, %struct.case_node** %left31, align 8
  %46 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call32 = call i32 @node_is_bounded(%struct.case_node* %45, %union.tree_node* %46)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.then.34, label %if.else.42

if.then.34:                                       ; preds = %if.else.30
  %47 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %48 = load i32, i32* %mode, align 4
  %49 = load i32, i32* %imode, align 4
  %50 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high35 = getelementptr inbounds %struct.case_node, %struct.case_node* %50, i32 0, i32 4
  %51 = load %union.tree_node*, %union.tree_node** %high35, align 8
  %call36 = call %struct.rtx_def* @expand_expr(%union.tree_node* %51, %struct.rtx_def* null, i32 0, i32 0)
  %52 = load i32, i32* %unsignedp, align 4
  %call37 = call %struct.rtx_def* @convert_modes(i32 %48, i32 %49, %struct.rtx_def* %call36, i32 %52)
  %53 = load i32, i32* %mode, align 4
  %54 = load i32, i32* %unsignedp, align 4
  %55 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left38 = getelementptr inbounds %struct.case_node, %struct.case_node* %55, i32 0, i32 0
  %56 = load %struct.case_node*, %struct.case_node** %left38, align 8
  %code_label39 = getelementptr inbounds %struct.case_node, %struct.case_node* %56, i32 0, i32 5
  %57 = load %union.tree_node*, %union.tree_node** %code_label39, align 8
  %call40 = call %struct.rtx_def* @label_rtx(%union.tree_node* %57)
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %47, %struct.rtx_def* %call37, i32 107, %struct.rtx_def* null, i32 %53, i32 %54, %struct.rtx_def* %call40)
  %58 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %59 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right41 = getelementptr inbounds %struct.case_node, %struct.case_node* %59, i32 0, i32 1
  %60 = load %struct.case_node*, %struct.case_node** %right41, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %62 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %58, %struct.case_node* %60, %struct.rtx_def* %61, %union.tree_node* %62)
  br label %if.end

if.else.42:                                       ; preds = %if.else.30
  %call43 = call %union.tree_node* @build_decl(i32 31, %union.tree_node* null, %union.tree_node* null)
  store %union.tree_node* %call43, %union.tree_node** %test_label, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %64 = load i32, i32* %mode, align 4
  %65 = load i32, i32* %imode, align 4
  %66 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high44 = getelementptr inbounds %struct.case_node, %struct.case_node* %66, i32 0, i32 4
  %67 = load %union.tree_node*, %union.tree_node** %high44, align 8
  %call45 = call %struct.rtx_def* @expand_expr(%union.tree_node* %67, %struct.rtx_def* null, i32 0, i32 0)
  %68 = load i32, i32* %unsignedp, align 4
  %call46 = call %struct.rtx_def* @convert_modes(i32 %64, i32 %65, %struct.rtx_def* %call45, i32 %68)
  %69 = load i32, i32* %mode, align 4
  %70 = load i32, i32* %unsignedp, align 4
  %71 = load %union.tree_node*, %union.tree_node** %test_label, align 8
  %call47 = call %struct.rtx_def* @label_rtx(%union.tree_node* %71)
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %63, %struct.rtx_def* %call46, i32 105, %struct.rtx_def* null, i32 %69, i32 %70, %struct.rtx_def* %call47)
  %72 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %73 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left48 = getelementptr inbounds %struct.case_node, %struct.case_node* %73, i32 0, i32 0
  %74 = load %struct.case_node*, %struct.case_node** %left48, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %76 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %72, %struct.case_node* %74, %struct.rtx_def* %75, %union.tree_node* %76)
  %77 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_jump_if_reachable(%struct.rtx_def* %77)
  %78 = load %union.tree_node*, %union.tree_node** %test_label, align 8
  call void @expand_label(%union.tree_node* %78)
  %79 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %80 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right49 = getelementptr inbounds %struct.case_node, %struct.case_node* %80, i32 0, i32 1
  %81 = load %struct.case_node*, %struct.case_node** %right49, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %83 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %79, %struct.case_node* %81, %struct.rtx_def* %82, %union.tree_node* %83)
  br label %if.end

if.end:                                           ; preds = %if.else.42, %if.then.34
  br label %if.end.50

if.end.50:                                        ; preds = %if.end, %if.then.22
  br label %if.end.130

if.else.51:                                       ; preds = %land.lhs.true, %if.then.11
  %84 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right52 = getelementptr inbounds %struct.case_node, %struct.case_node* %84, i32 0, i32 1
  %85 = load %struct.case_node*, %struct.case_node** %right52, align 8
  %cmp53 = icmp ne %struct.case_node* %85, null
  br i1 %cmp53, label %land.lhs.true.54, label %if.else.89

land.lhs.true.54:                                 ; preds = %if.else.51
  %86 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left55 = getelementptr inbounds %struct.case_node, %struct.case_node* %86, i32 0, i32 0
  %87 = load %struct.case_node*, %struct.case_node** %left55, align 8
  %cmp56 = icmp eq %struct.case_node* %87, null
  br i1 %cmp56, label %if.then.57, label %if.else.89

if.then.57:                                       ; preds = %land.lhs.true.54
  %88 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right58 = getelementptr inbounds %struct.case_node, %struct.case_node* %88, i32 0, i32 1
  %89 = load %struct.case_node*, %struct.case_node** %right58, align 8
  %right59 = getelementptr inbounds %struct.case_node, %struct.case_node* %89, i32 0, i32 1
  %90 = load %struct.case_node*, %struct.case_node** %right59, align 8
  %tobool60 = icmp ne %struct.case_node* %90, null
  br i1 %tobool60, label %if.then.71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.57
  %91 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right61 = getelementptr inbounds %struct.case_node, %struct.case_node* %91, i32 0, i32 1
  %92 = load %struct.case_node*, %struct.case_node** %right61, align 8
  %left62 = getelementptr inbounds %struct.case_node, %struct.case_node* %92, i32 0, i32 0
  %93 = load %struct.case_node*, %struct.case_node** %left62, align 8
  %tobool63 = icmp ne %struct.case_node* %93, null
  br i1 %tobool63, label %if.then.71, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %lor.lhs.false
  %94 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right65 = getelementptr inbounds %struct.case_node, %struct.case_node* %94, i32 0, i32 1
  %95 = load %struct.case_node*, %struct.case_node** %right65, align 8
  %low66 = getelementptr inbounds %struct.case_node, %struct.case_node* %95, i32 0, i32 3
  %96 = load %union.tree_node*, %union.tree_node** %low66, align 8
  %97 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right67 = getelementptr inbounds %struct.case_node, %struct.case_node* %97, i32 0, i32 1
  %98 = load %struct.case_node*, %struct.case_node** %right67, align 8
  %high68 = getelementptr inbounds %struct.case_node, %struct.case_node* %98, i32 0, i32 4
  %99 = load %union.tree_node*, %union.tree_node** %high68, align 8
  %call69 = call i32 @tree_int_cst_equal(%union.tree_node* %96, %union.tree_node* %99)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.else.80, label %if.then.71

if.then.71:                                       ; preds = %lor.lhs.false.64, %lor.lhs.false, %if.then.57
  %100 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %101 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call72 = call i32 @node_has_low_bound(%struct.case_node* %100, %union.tree_node* %101)
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.end.78, label %if.then.74

if.then.74:                                       ; preds = %if.then.71
  %102 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %103 = load i32, i32* %mode, align 4
  %104 = load i32, i32* %imode, align 4
  %105 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high75 = getelementptr inbounds %struct.case_node, %struct.case_node* %105, i32 0, i32 4
  %106 = load %union.tree_node*, %union.tree_node** %high75, align 8
  %call76 = call %struct.rtx_def* @expand_expr(%union.tree_node* %106, %struct.rtx_def* null, i32 0, i32 0)
  %107 = load i32, i32* %unsignedp, align 4
  %call77 = call %struct.rtx_def* @convert_modes(i32 %103, i32 %104, %struct.rtx_def* %call76, i32 %107)
  %108 = load i32, i32* %mode, align 4
  %109 = load i32, i32* %unsignedp, align 4
  %110 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %102, %struct.rtx_def* %call77, i32 107, %struct.rtx_def* null, i32 %108, i32 %109, %struct.rtx_def* %110)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.74, %if.then.71
  %111 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %112 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right79 = getelementptr inbounds %struct.case_node, %struct.case_node* %112, i32 0, i32 1
  %113 = load %struct.case_node*, %struct.case_node** %right79, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %115 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %111, %struct.case_node* %113, %struct.rtx_def* %114, %union.tree_node* %115)
  br label %if.end.88

if.else.80:                                       ; preds = %lor.lhs.false.64
  %116 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %117 = load i32, i32* %mode, align 4
  %118 = load i32, i32* %imode, align 4
  %119 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right81 = getelementptr inbounds %struct.case_node, %struct.case_node* %119, i32 0, i32 1
  %120 = load %struct.case_node*, %struct.case_node** %right81, align 8
  %low82 = getelementptr inbounds %struct.case_node, %struct.case_node* %120, i32 0, i32 3
  %121 = load %union.tree_node*, %union.tree_node** %low82, align 8
  %call83 = call %struct.rtx_def* @expand_expr(%union.tree_node* %121, %struct.rtx_def* null, i32 0, i32 0)
  %122 = load i32, i32* %unsignedp, align 4
  %call84 = call %struct.rtx_def* @convert_modes(i32 %117, i32 %118, %struct.rtx_def* %call83, i32 %122)
  %123 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right85 = getelementptr inbounds %struct.case_node, %struct.case_node* %123, i32 0, i32 1
  %124 = load %struct.case_node*, %struct.case_node** %right85, align 8
  %code_label86 = getelementptr inbounds %struct.case_node, %struct.case_node* %124, i32 0, i32 5
  %125 = load %union.tree_node*, %union.tree_node** %code_label86, align 8
  %call87 = call %struct.rtx_def* @label_rtx(%union.tree_node* %125)
  %126 = load i32, i32* %unsignedp, align 4
  call void @do_jump_if_equal(%struct.rtx_def* %116, %struct.rtx_def* %call84, %struct.rtx_def* %call87, i32 %126)
  br label %if.end.88

if.end.88:                                        ; preds = %if.else.80, %if.end.78
  br label %if.end.129

if.else.89:                                       ; preds = %land.lhs.true.54, %if.else.51
  %127 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right90 = getelementptr inbounds %struct.case_node, %struct.case_node* %127, i32 0, i32 1
  %128 = load %struct.case_node*, %struct.case_node** %right90, align 8
  %cmp91 = icmp eq %struct.case_node* %128, null
  br i1 %cmp91, label %land.lhs.true.92, label %if.end.128

land.lhs.true.92:                                 ; preds = %if.else.89
  %129 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left93 = getelementptr inbounds %struct.case_node, %struct.case_node* %129, i32 0, i32 0
  %130 = load %struct.case_node*, %struct.case_node** %left93, align 8
  %cmp94 = icmp ne %struct.case_node* %130, null
  br i1 %cmp94, label %if.then.95, label %if.end.128

if.then.95:                                       ; preds = %land.lhs.true.92
  %131 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left96 = getelementptr inbounds %struct.case_node, %struct.case_node* %131, i32 0, i32 0
  %132 = load %struct.case_node*, %struct.case_node** %left96, align 8
  %left97 = getelementptr inbounds %struct.case_node, %struct.case_node* %132, i32 0, i32 0
  %133 = load %struct.case_node*, %struct.case_node** %left97, align 8
  %tobool98 = icmp ne %struct.case_node* %133, null
  br i1 %tobool98, label %if.then.110, label %lor.lhs.false.99

lor.lhs.false.99:                                 ; preds = %if.then.95
  %134 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left100 = getelementptr inbounds %struct.case_node, %struct.case_node* %134, i32 0, i32 0
  %135 = load %struct.case_node*, %struct.case_node** %left100, align 8
  %right101 = getelementptr inbounds %struct.case_node, %struct.case_node* %135, i32 0, i32 1
  %136 = load %struct.case_node*, %struct.case_node** %right101, align 8
  %tobool102 = icmp ne %struct.case_node* %136, null
  br i1 %tobool102, label %if.then.110, label %lor.lhs.false.103

lor.lhs.false.103:                                ; preds = %lor.lhs.false.99
  %137 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left104 = getelementptr inbounds %struct.case_node, %struct.case_node* %137, i32 0, i32 0
  %138 = load %struct.case_node*, %struct.case_node** %left104, align 8
  %low105 = getelementptr inbounds %struct.case_node, %struct.case_node* %138, i32 0, i32 3
  %139 = load %union.tree_node*, %union.tree_node** %low105, align 8
  %140 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left106 = getelementptr inbounds %struct.case_node, %struct.case_node* %140, i32 0, i32 0
  %141 = load %struct.case_node*, %struct.case_node** %left106, align 8
  %high107 = getelementptr inbounds %struct.case_node, %struct.case_node* %141, i32 0, i32 4
  %142 = load %union.tree_node*, %union.tree_node** %high107, align 8
  %call108 = call i32 @tree_int_cst_equal(%union.tree_node* %139, %union.tree_node* %142)
  %tobool109 = icmp ne i32 %call108, 0
  br i1 %tobool109, label %if.else.119, label %if.then.110

if.then.110:                                      ; preds = %lor.lhs.false.103, %lor.lhs.false.99, %if.then.95
  %143 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %144 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call111 = call i32 @node_has_high_bound(%struct.case_node* %143, %union.tree_node* %144)
  %tobool112 = icmp ne i32 %call111, 0
  br i1 %tobool112, label %if.end.117, label %if.then.113

if.then.113:                                      ; preds = %if.then.110
  %145 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %146 = load i32, i32* %mode, align 4
  %147 = load i32, i32* %imode, align 4
  %148 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high114 = getelementptr inbounds %struct.case_node, %struct.case_node* %148, i32 0, i32 4
  %149 = load %union.tree_node*, %union.tree_node** %high114, align 8
  %call115 = call %struct.rtx_def* @expand_expr(%union.tree_node* %149, %struct.rtx_def* null, i32 0, i32 0)
  %150 = load i32, i32* %unsignedp, align 4
  %call116 = call %struct.rtx_def* @convert_modes(i32 %146, i32 %147, %struct.rtx_def* %call115, i32 %150)
  %151 = load i32, i32* %mode, align 4
  %152 = load i32, i32* %unsignedp, align 4
  %153 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %145, %struct.rtx_def* %call116, i32 105, %struct.rtx_def* null, i32 %151, i32 %152, %struct.rtx_def* %153)
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.113, %if.then.110
  %154 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %155 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left118 = getelementptr inbounds %struct.case_node, %struct.case_node* %155, i32 0, i32 0
  %156 = load %struct.case_node*, %struct.case_node** %left118, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %158 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %154, %struct.case_node* %156, %struct.rtx_def* %157, %union.tree_node* %158)
  br label %if.end.127

if.else.119:                                      ; preds = %lor.lhs.false.103
  %159 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %160 = load i32, i32* %mode, align 4
  %161 = load i32, i32* %imode, align 4
  %162 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left120 = getelementptr inbounds %struct.case_node, %struct.case_node* %162, i32 0, i32 0
  %163 = load %struct.case_node*, %struct.case_node** %left120, align 8
  %low121 = getelementptr inbounds %struct.case_node, %struct.case_node* %163, i32 0, i32 3
  %164 = load %union.tree_node*, %union.tree_node** %low121, align 8
  %call122 = call %struct.rtx_def* @expand_expr(%union.tree_node* %164, %struct.rtx_def* null, i32 0, i32 0)
  %165 = load i32, i32* %unsignedp, align 4
  %call123 = call %struct.rtx_def* @convert_modes(i32 %160, i32 %161, %struct.rtx_def* %call122, i32 %165)
  %166 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left124 = getelementptr inbounds %struct.case_node, %struct.case_node* %166, i32 0, i32 0
  %167 = load %struct.case_node*, %struct.case_node** %left124, align 8
  %code_label125 = getelementptr inbounds %struct.case_node, %struct.case_node* %167, i32 0, i32 5
  %168 = load %union.tree_node*, %union.tree_node** %code_label125, align 8
  %call126 = call %struct.rtx_def* @label_rtx(%union.tree_node* %168)
  %169 = load i32, i32* %unsignedp, align 4
  call void @do_jump_if_equal(%struct.rtx_def* %159, %struct.rtx_def* %call123, %struct.rtx_def* %call126, i32 %169)
  br label %if.end.127

if.end.127:                                       ; preds = %if.else.119, %if.end.117
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %land.lhs.true.92, %if.else.89
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.end.88
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %if.end.50
  br label %if.end.250

if.else.131:                                      ; preds = %if.else
  %170 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right132 = getelementptr inbounds %struct.case_node, %struct.case_node* %170, i32 0, i32 1
  %171 = load %struct.case_node*, %struct.case_node** %right132, align 8
  %cmp133 = icmp ne %struct.case_node* %171, null
  br i1 %cmp133, label %land.lhs.true.134, label %if.else.166

land.lhs.true.134:                                ; preds = %if.else.131
  %172 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left135 = getelementptr inbounds %struct.case_node, %struct.case_node* %172, i32 0, i32 0
  %173 = load %struct.case_node*, %struct.case_node** %left135, align 8
  %cmp136 = icmp ne %struct.case_node* %173, null
  br i1 %cmp136, label %if.then.137, label %if.else.166

if.then.137:                                      ; preds = %land.lhs.true.134
  store %union.tree_node* null, %union.tree_node** %test_label138, align 8
  %174 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right139 = getelementptr inbounds %struct.case_node, %struct.case_node* %174, i32 0, i32 1
  %175 = load %struct.case_node*, %struct.case_node** %right139, align 8
  %176 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call140 = call i32 @node_is_bounded(%struct.case_node* %175, %union.tree_node* %176)
  %tobool141 = icmp ne i32 %call140, 0
  br i1 %tobool141, label %if.then.142, label %if.else.149

if.then.142:                                      ; preds = %if.then.137
  %177 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %178 = load i32, i32* %mode, align 4
  %179 = load i32, i32* %imode, align 4
  %180 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high143 = getelementptr inbounds %struct.case_node, %struct.case_node* %180, i32 0, i32 4
  %181 = load %union.tree_node*, %union.tree_node** %high143, align 8
  %call144 = call %struct.rtx_def* @expand_expr(%union.tree_node* %181, %struct.rtx_def* null, i32 0, i32 0)
  %182 = load i32, i32* %unsignedp, align 4
  %call145 = call %struct.rtx_def* @convert_modes(i32 %178, i32 %179, %struct.rtx_def* %call144, i32 %182)
  %183 = load i32, i32* %mode, align 4
  %184 = load i32, i32* %unsignedp, align 4
  %185 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right146 = getelementptr inbounds %struct.case_node, %struct.case_node* %185, i32 0, i32 1
  %186 = load %struct.case_node*, %struct.case_node** %right146, align 8
  %code_label147 = getelementptr inbounds %struct.case_node, %struct.case_node* %186, i32 0, i32 5
  %187 = load %union.tree_node*, %union.tree_node** %code_label147, align 8
  %call148 = call %struct.rtx_def* @label_rtx(%union.tree_node* %187)
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %177, %struct.rtx_def* %call145, i32 105, %struct.rtx_def* null, i32 %183, i32 %184, %struct.rtx_def* %call148)
  br label %if.end.155

if.else.149:                                      ; preds = %if.then.137
  %call150 = call %union.tree_node* @build_decl(i32 31, %union.tree_node* null, %union.tree_node* null)
  store %union.tree_node* %call150, %union.tree_node** %test_label138, align 8
  %188 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %189 = load i32, i32* %mode, align 4
  %190 = load i32, i32* %imode, align 4
  %191 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high151 = getelementptr inbounds %struct.case_node, %struct.case_node* %191, i32 0, i32 4
  %192 = load %union.tree_node*, %union.tree_node** %high151, align 8
  %call152 = call %struct.rtx_def* @expand_expr(%union.tree_node* %192, %struct.rtx_def* null, i32 0, i32 0)
  %193 = load i32, i32* %unsignedp, align 4
  %call153 = call %struct.rtx_def* @convert_modes(i32 %189, i32 %190, %struct.rtx_def* %call152, i32 %193)
  %194 = load i32, i32* %mode, align 4
  %195 = load i32, i32* %unsignedp, align 4
  %196 = load %union.tree_node*, %union.tree_node** %test_label138, align 8
  %call154 = call %struct.rtx_def* @label_rtx(%union.tree_node* %196)
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %188, %struct.rtx_def* %call153, i32 105, %struct.rtx_def* null, i32 %194, i32 %195, %struct.rtx_def* %call154)
  br label %if.end.155

if.end.155:                                       ; preds = %if.else.149, %if.then.142
  %197 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %198 = load i32, i32* %mode, align 4
  %199 = load i32, i32* %imode, align 4
  %200 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low156 = getelementptr inbounds %struct.case_node, %struct.case_node* %200, i32 0, i32 3
  %201 = load %union.tree_node*, %union.tree_node** %low156, align 8
  %call157 = call %struct.rtx_def* @expand_expr(%union.tree_node* %201, %struct.rtx_def* null, i32 0, i32 0)
  %202 = load i32, i32* %unsignedp, align 4
  %call158 = call %struct.rtx_def* @convert_modes(i32 %198, i32 %199, %struct.rtx_def* %call157, i32 %202)
  %203 = load i32, i32* %mode, align 4
  %204 = load i32, i32* %unsignedp, align 4
  %205 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %code_label159 = getelementptr inbounds %struct.case_node, %struct.case_node* %205, i32 0, i32 5
  %206 = load %union.tree_node*, %union.tree_node** %code_label159, align 8
  %call160 = call %struct.rtx_def* @label_rtx(%union.tree_node* %206)
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %197, %struct.rtx_def* %call158, i32 104, %struct.rtx_def* null, i32 %203, i32 %204, %struct.rtx_def* %call160)
  %207 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %208 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left161 = getelementptr inbounds %struct.case_node, %struct.case_node* %208, i32 0, i32 0
  %209 = load %struct.case_node*, %struct.case_node** %left161, align 8
  %210 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %211 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %207, %struct.case_node* %209, %struct.rtx_def* %210, %union.tree_node* %211)
  %212 = load %union.tree_node*, %union.tree_node** %test_label138, align 8
  %tobool162 = icmp ne %union.tree_node* %212, null
  br i1 %tobool162, label %if.then.163, label %if.end.165

if.then.163:                                      ; preds = %if.end.155
  %213 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_jump_if_reachable(%struct.rtx_def* %213)
  %214 = load %union.tree_node*, %union.tree_node** %test_label138, align 8
  call void @expand_label(%union.tree_node* %214)
  %215 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %216 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right164 = getelementptr inbounds %struct.case_node, %struct.case_node* %216, i32 0, i32 1
  %217 = load %struct.case_node*, %struct.case_node** %right164, align 8
  %218 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %219 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %215, %struct.case_node* %217, %struct.rtx_def* %218, %union.tree_node* %219)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.163, %if.end.155
  br label %if.end.249

if.else.166:                                      ; preds = %land.lhs.true.134, %if.else.131
  %220 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right167 = getelementptr inbounds %struct.case_node, %struct.case_node* %220, i32 0, i32 1
  %221 = load %struct.case_node*, %struct.case_node** %right167, align 8
  %cmp168 = icmp ne %struct.case_node* %221, null
  br i1 %cmp168, label %land.lhs.true.169, label %if.else.186

land.lhs.true.169:                                ; preds = %if.else.166
  %222 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left170 = getelementptr inbounds %struct.case_node, %struct.case_node* %222, i32 0, i32 0
  %223 = load %struct.case_node*, %struct.case_node** %left170, align 8
  %cmp171 = icmp eq %struct.case_node* %223, null
  br i1 %cmp171, label %if.then.172, label %if.else.186

if.then.172:                                      ; preds = %land.lhs.true.169
  %224 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %225 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call173 = call i32 @node_has_low_bound(%struct.case_node* %224, %union.tree_node* %225)
  %tobool174 = icmp ne i32 %call173, 0
  br i1 %tobool174, label %if.end.179, label %if.then.175

if.then.175:                                      ; preds = %if.then.172
  %226 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %227 = load i32, i32* %mode, align 4
  %228 = load i32, i32* %imode, align 4
  %229 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low176 = getelementptr inbounds %struct.case_node, %struct.case_node* %229, i32 0, i32 3
  %230 = load %union.tree_node*, %union.tree_node** %low176, align 8
  %call177 = call %struct.rtx_def* @expand_expr(%union.tree_node* %230, %struct.rtx_def* null, i32 0, i32 0)
  %231 = load i32, i32* %unsignedp, align 4
  %call178 = call %struct.rtx_def* @convert_modes(i32 %227, i32 %228, %struct.rtx_def* %call177, i32 %231)
  %232 = load i32, i32* %mode, align 4
  %233 = load i32, i32* %unsignedp, align 4
  %234 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %226, %struct.rtx_def* %call178, i32 107, %struct.rtx_def* null, i32 %232, i32 %233, %struct.rtx_def* %234)
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.175, %if.then.172
  %235 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %236 = load i32, i32* %mode, align 4
  %237 = load i32, i32* %imode, align 4
  %238 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high180 = getelementptr inbounds %struct.case_node, %struct.case_node* %238, i32 0, i32 4
  %239 = load %union.tree_node*, %union.tree_node** %high180, align 8
  %call181 = call %struct.rtx_def* @expand_expr(%union.tree_node* %239, %struct.rtx_def* null, i32 0, i32 0)
  %240 = load i32, i32* %unsignedp, align 4
  %call182 = call %struct.rtx_def* @convert_modes(i32 %236, i32 %237, %struct.rtx_def* %call181, i32 %240)
  %241 = load i32, i32* %mode, align 4
  %242 = load i32, i32* %unsignedp, align 4
  %243 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %code_label183 = getelementptr inbounds %struct.case_node, %struct.case_node* %243, i32 0, i32 5
  %244 = load %union.tree_node*, %union.tree_node** %code_label183, align 8
  %call184 = call %struct.rtx_def* @label_rtx(%union.tree_node* %244)
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %235, %struct.rtx_def* %call182, i32 106, %struct.rtx_def* null, i32 %241, i32 %242, %struct.rtx_def* %call184)
  %245 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %246 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right185 = getelementptr inbounds %struct.case_node, %struct.case_node* %246, i32 0, i32 1
  %247 = load %struct.case_node*, %struct.case_node** %right185, align 8
  %248 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %249 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %245, %struct.case_node* %247, %struct.rtx_def* %248, %union.tree_node* %249)
  br label %if.end.248

if.else.186:                                      ; preds = %land.lhs.true.169, %if.else.166
  %250 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right187 = getelementptr inbounds %struct.case_node, %struct.case_node* %250, i32 0, i32 1
  %251 = load %struct.case_node*, %struct.case_node** %right187, align 8
  %cmp188 = icmp eq %struct.case_node* %251, null
  br i1 %cmp188, label %land.lhs.true.189, label %if.else.206

land.lhs.true.189:                                ; preds = %if.else.186
  %252 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left190 = getelementptr inbounds %struct.case_node, %struct.case_node* %252, i32 0, i32 0
  %253 = load %struct.case_node*, %struct.case_node** %left190, align 8
  %cmp191 = icmp ne %struct.case_node* %253, null
  br i1 %cmp191, label %if.then.192, label %if.else.206

if.then.192:                                      ; preds = %land.lhs.true.189
  %254 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %255 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call193 = call i32 @node_has_high_bound(%struct.case_node* %254, %union.tree_node* %255)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end.199, label %if.then.195

if.then.195:                                      ; preds = %if.then.192
  %256 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %257 = load i32, i32* %mode, align 4
  %258 = load i32, i32* %imode, align 4
  %259 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high196 = getelementptr inbounds %struct.case_node, %struct.case_node* %259, i32 0, i32 4
  %260 = load %union.tree_node*, %union.tree_node** %high196, align 8
  %call197 = call %struct.rtx_def* @expand_expr(%union.tree_node* %260, %struct.rtx_def* null, i32 0, i32 0)
  %261 = load i32, i32* %unsignedp, align 4
  %call198 = call %struct.rtx_def* @convert_modes(i32 %257, i32 %258, %struct.rtx_def* %call197, i32 %261)
  %262 = load i32, i32* %mode, align 4
  %263 = load i32, i32* %unsignedp, align 4
  %264 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %256, %struct.rtx_def* %call198, i32 105, %struct.rtx_def* null, i32 %262, i32 %263, %struct.rtx_def* %264)
  br label %if.end.199

if.end.199:                                       ; preds = %if.then.195, %if.then.192
  %265 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %266 = load i32, i32* %mode, align 4
  %267 = load i32, i32* %imode, align 4
  %268 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low200 = getelementptr inbounds %struct.case_node, %struct.case_node* %268, i32 0, i32 3
  %269 = load %union.tree_node*, %union.tree_node** %low200, align 8
  %call201 = call %struct.rtx_def* @expand_expr(%union.tree_node* %269, %struct.rtx_def* null, i32 0, i32 0)
  %270 = load i32, i32* %unsignedp, align 4
  %call202 = call %struct.rtx_def* @convert_modes(i32 %266, i32 %267, %struct.rtx_def* %call201, i32 %270)
  %271 = load i32, i32* %mode, align 4
  %272 = load i32, i32* %unsignedp, align 4
  %273 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %code_label203 = getelementptr inbounds %struct.case_node, %struct.case_node* %273, i32 0, i32 5
  %274 = load %union.tree_node*, %union.tree_node** %code_label203, align 8
  %call204 = call %struct.rtx_def* @label_rtx(%union.tree_node* %274)
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %265, %struct.rtx_def* %call202, i32 104, %struct.rtx_def* null, i32 %271, i32 %272, %struct.rtx_def* %call204)
  %275 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %276 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left205 = getelementptr inbounds %struct.case_node, %struct.case_node* %276, i32 0, i32 0
  %277 = load %struct.case_node*, %struct.case_node** %left205, align 8
  %278 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  %279 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  call void @emit_case_nodes(%struct.rtx_def* %275, %struct.case_node* %277, %struct.rtx_def* %278, %union.tree_node* %279)
  br label %if.end.247

if.else.206:                                      ; preds = %land.lhs.true.189, %if.else.186
  %280 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %281 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call207 = call i32 @node_has_high_bound(%struct.case_node* %280, %union.tree_node* %281)
  store i32 %call207, i32* %high_bound, align 4
  %282 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %283 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call208 = call i32 @node_has_low_bound(%struct.case_node* %282, %union.tree_node* %283)
  store i32 %call208, i32* %low_bound, align 4
  %284 = load i32, i32* %high_bound, align 4
  %tobool209 = icmp ne i32 %284, 0
  br i1 %tobool209, label %if.else.216, label %land.lhs.true.210

land.lhs.true.210:                                ; preds = %if.else.206
  %285 = load i32, i32* %low_bound, align 4
  %tobool211 = icmp ne i32 %285, 0
  br i1 %tobool211, label %if.then.212, label %if.else.216

if.then.212:                                      ; preds = %land.lhs.true.210
  %286 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %287 = load i32, i32* %mode, align 4
  %288 = load i32, i32* %imode, align 4
  %289 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high213 = getelementptr inbounds %struct.case_node, %struct.case_node* %289, i32 0, i32 4
  %290 = load %union.tree_node*, %union.tree_node** %high213, align 8
  %call214 = call %struct.rtx_def* @expand_expr(%union.tree_node* %290, %struct.rtx_def* null, i32 0, i32 0)
  %291 = load i32, i32* %unsignedp, align 4
  %call215 = call %struct.rtx_def* @convert_modes(i32 %287, i32 %288, %struct.rtx_def* %call214, i32 %291)
  %292 = load i32, i32* %mode, align 4
  %293 = load i32, i32* %unsignedp, align 4
  %294 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %286, %struct.rtx_def* %call215, i32 105, %struct.rtx_def* null, i32 %292, i32 %293, %struct.rtx_def* %294)
  br label %if.end.244

if.else.216:                                      ; preds = %land.lhs.true.210, %if.else.206
  %295 = load i32, i32* %low_bound, align 4
  %tobool217 = icmp ne i32 %295, 0
  br i1 %tobool217, label %if.else.224, label %land.lhs.true.218

land.lhs.true.218:                                ; preds = %if.else.216
  %296 = load i32, i32* %high_bound, align 4
  %tobool219 = icmp ne i32 %296, 0
  br i1 %tobool219, label %if.then.220, label %if.else.224

if.then.220:                                      ; preds = %land.lhs.true.218
  %297 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %298 = load i32, i32* %mode, align 4
  %299 = load i32, i32* %imode, align 4
  %300 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low221 = getelementptr inbounds %struct.case_node, %struct.case_node* %300, i32 0, i32 3
  %301 = load %union.tree_node*, %union.tree_node** %low221, align 8
  %call222 = call %struct.rtx_def* @expand_expr(%union.tree_node* %301, %struct.rtx_def* null, i32 0, i32 0)
  %302 = load i32, i32* %unsignedp, align 4
  %call223 = call %struct.rtx_def* @convert_modes(i32 %298, i32 %299, %struct.rtx_def* %call222, i32 %302)
  %303 = load i32, i32* %mode, align 4
  %304 = load i32, i32* %unsignedp, align 4
  %305 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %297, %struct.rtx_def* %call223, i32 107, %struct.rtx_def* null, i32 %303, i32 %304, %struct.rtx_def* %305)
  br label %if.end.243

if.else.224:                                      ; preds = %land.lhs.true.218, %if.else.216
  %306 = load i32, i32* %low_bound, align 4
  %tobool225 = icmp ne i32 %306, 0
  br i1 %tobool225, label %if.end.242, label %land.lhs.true.226

land.lhs.true.226:                                ; preds = %if.else.224
  %307 = load i32, i32* %high_bound, align 4
  %tobool227 = icmp ne i32 %307, 0
  br i1 %tobool227, label %if.end.242, label %if.then.228

if.then.228:                                      ; preds = %land.lhs.true.226
  %308 = load i32, i32* %mode, align 4
  %309 = load i32, i32* %unsignedp, align 4
  %call230 = call %union.tree_node* @type_for_mode(i32 %308, i32 %309)
  store %union.tree_node* %call230, %union.tree_node** %type229, align 8
  %310 = load %union.tree_node*, %union.tree_node** %type229, align 8
  %311 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low232 = getelementptr inbounds %struct.case_node, %struct.case_node* %311, i32 0, i32 3
  %312 = load %union.tree_node*, %union.tree_node** %low232, align 8
  %call233 = call %union.tree_node* @build1(i32 114, %union.tree_node* %310, %union.tree_node* %312)
  store %union.tree_node* %call233, %union.tree_node** %low231, align 8
  %313 = load %union.tree_node*, %union.tree_node** %type229, align 8
  %314 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high235 = getelementptr inbounds %struct.case_node, %struct.case_node* %314, i32 0, i32 4
  %315 = load %union.tree_node*, %union.tree_node** %high235, align 8
  %call236 = call %union.tree_node* @build1(i32 114, %union.tree_node* %313, %union.tree_node* %315)
  store %union.tree_node* %call236, %union.tree_node** %high234, align 8
  %316 = load %union.tree_node*, %union.tree_node** %low231, align 8
  %317 = load i32, i32* %mode, align 4
  %call237 = call %struct.rtx_def* @expand_expr(%union.tree_node* %316, %struct.rtx_def* null, i32 %317, i32 0)
  store %struct.rtx_def* %call237, %struct.rtx_def** %low_rtx, align 8
  %318 = load i32, i32* %mode, align 4
  %319 = load %struct.rtx_def*, %struct.rtx_def** %index.addr, align 8
  %320 = load %struct.rtx_def*, %struct.rtx_def** %low_rtx, align 8
  %321 = load i32, i32* %unsignedp, align 4
  %call238 = call %struct.rtx_def* @expand_simple_binop(i32 %318, i32 76, %struct.rtx_def* %319, %struct.rtx_def* %320, %struct.rtx_def* null, i32 %321, i32 2)
  store %struct.rtx_def* %call238, %struct.rtx_def** %new_index, align 8
  %322 = load %union.tree_node*, %union.tree_node** %type229, align 8
  %323 = load %union.tree_node*, %union.tree_node** %high234, align 8
  %324 = load %union.tree_node*, %union.tree_node** %low231, align 8
  %call239 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %322, %union.tree_node* %323, %union.tree_node* %324)
  %call240 = call %union.tree_node* @fold(%union.tree_node* %call239)
  %325 = load i32, i32* %mode, align 4
  %call241 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call240, %struct.rtx_def* null, i32 %325, i32 0)
  store %struct.rtx_def* %call241, %struct.rtx_def** %new_bound, align 8
  %326 = load %struct.rtx_def*, %struct.rtx_def** %new_index, align 8
  %327 = load %struct.rtx_def*, %struct.rtx_def** %new_bound, align 8
  %328 = load i32, i32* %mode, align 4
  %329 = load %struct.rtx_def*, %struct.rtx_def** %default_label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %326, %struct.rtx_def* %327, i32 105, %struct.rtx_def* null, i32 %328, i32 1, %struct.rtx_def* %329)
  br label %if.end.242

if.end.242:                                       ; preds = %if.then.228, %land.lhs.true.226, %if.else.224
  br label %if.end.243

if.end.243:                                       ; preds = %if.end.242, %if.then.220
  br label %if.end.244

if.end.244:                                       ; preds = %if.end.243, %if.then.212
  %330 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %code_label245 = getelementptr inbounds %struct.case_node, %struct.case_node* %330, i32 0, i32 5
  %331 = load %union.tree_node*, %union.tree_node** %code_label245, align 8
  %call246 = call %struct.rtx_def* @label_rtx(%union.tree_node* %331)
  call void @emit_jump(%struct.rtx_def* %call246)
  br label %if.end.247

if.end.247:                                       ; preds = %if.end.244, %if.end.199
  br label %if.end.248

if.end.248:                                       ; preds = %if.end.247, %if.end.179
  br label %if.end.249

if.end.249:                                       ; preds = %if.end.248, %if.end.165
  br label %if.end.250

if.end.250:                                       ; preds = %if.end.249, %if.end.130
  br label %if.end.251

if.end.251:                                       ; preds = %if.end.250, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @emit_jump_if_reachable(%struct.rtx_def* %label) #0 {
entry:
  %label.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  %call = call %struct.rtx_def* @get_last_insn()
  %0 = bitcast %struct.rtx_def* %call to i32*
  %bf.load = load i32, i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 35
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @try_casesi(%union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*) #2

declare i32 @try_tablejump(%union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #5

declare %struct.rtx_def* @gen_rtx_fmt_eEee0(i32, i32, %struct.rtx_def*, %struct.rtvec_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtvec_def* @gen_rtvec_v(i32, %struct.rtx_def**) #2

declare zeroext i1 @squeeze_notes(%struct.rtx_def**, %struct.rtx_def**) #2

; Function Attrs: nounwind uwtable
define internal void @free_case_nodes(%struct.case_node* %cn) #0 {
entry:
  %cn.addr = alloca %struct.case_node*, align 8
  store %struct.case_node* %cn, %struct.case_node** %cn.addr, align 8
  %0 = load %struct.case_node*, %struct.case_node** %cn.addr, align 8
  %tobool = icmp ne %struct.case_node* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.case_node*, %struct.case_node** %cn.addr, align 8
  %left = getelementptr inbounds %struct.case_node, %struct.case_node* %1, i32 0, i32 0
  %2 = load %struct.case_node*, %struct.case_node** %left, align 8
  call void @free_case_nodes(%struct.case_node* %2)
  %3 = load %struct.case_node*, %struct.case_node** %cn.addr, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %3, i32 0, i32 1
  %4 = load %struct.case_node*, %struct.case_node** %right, align 8
  call void @free_case_nodes(%struct.case_node* %4)
  %5 = load %struct.case_node*, %struct.case_node** %cn.addr, align 8
  %6 = bitcast %struct.case_node* %5 to i8*
  call void @free(i8* %6) #5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_case_node(%struct.case_node* %c) #0 {
entry:
  %c.addr = alloca %struct.case_node*, align 8
  %t__ = alloca %union.tree_node*, align 8
  %t__12 = alloca %union.tree_node*, align 8
  %t__36 = alloca %union.tree_node*, align 8
  store %struct.case_node* %c, %struct.case_node** %c.addr, align 8
  %0 = load %struct.case_node*, %struct.case_node** %c.addr, align 8
  %cmp = icmp ne %struct.case_node* %0, null
  br i1 %cmp, label %if.then, label %if.end.59

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.case_node*, %struct.case_node** %c.addr, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %1, i32 0, i32 3
  %2 = load %union.tree_node*, %union.tree_node** %low, align 8
  store %union.tree_node* %2, %union.tree_node** %t__, align 8
  %3 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %cmp1 = icmp ne %union.tree_node* %3, null
  br i1 %cmp1, label %land.lhs.true, label %if.end.9

land.lhs.true:                                    ; preds = %do.body
  %4 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %5 = bitcast %union.tree_node* %4 to i8*
  %call = call i32 @ggc_set_mark(i8* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.9, label %if.then.2

if.then.2:                                        ; preds = %land.lhs.true
  br label %do.body.3

do.body.3:                                        ; preds = %if.then.2
  %6 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %6, i32 0, i32 1
  %7 = load i64, i64* %elements_used, align 8
  %8 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %8, i32 0, i32 0
  %9 = load i64, i64* %num_elements, align 8
  %cmp4 = icmp uge i64 %7, %9
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %do.body.3
  %10 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %11 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements6 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %11, i32 0, i32 0
  %12 = load i64, i64* %num_elements6, align 8
  %mul = mul i64 2, %12
  %call7 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %10, i64 %mul)
  store %struct.varray_head_tag* %call7, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %do.body.3
  %13 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %14 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used8 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %14, i32 0, i32 1
  %15 = load i64, i64* %elements_used8, align 8
  %inc = add i64 %15, 1
  store i64 %inc, i64* %elements_used8, align 8
  %16 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %16, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %15
  store %union.tree_node* %13, %union.tree_node** %arrayidx, align 8
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.9

if.end.9:                                         ; preds = %do.end, %land.lhs.true, %do.body
  br label %do.end.10

do.end.10:                                        ; preds = %if.end.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  %17 = load %struct.case_node*, %struct.case_node** %c.addr, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %17, i32 0, i32 4
  %18 = load %union.tree_node*, %union.tree_node** %high, align 8
  store %union.tree_node* %18, %union.tree_node** %t__12, align 8
  %19 = load %union.tree_node*, %union.tree_node** %t__12, align 8
  %cmp13 = icmp ne %union.tree_node* %19, null
  br i1 %cmp13, label %land.lhs.true.14, label %if.end.33

land.lhs.true.14:                                 ; preds = %do.body.11
  %20 = load %union.tree_node*, %union.tree_node** %t__12, align 8
  %21 = bitcast %union.tree_node* %20 to i8*
  %call15 = call i32 @ggc_set_mark(i8* %21)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end.33, label %if.then.17

if.then.17:                                       ; preds = %land.lhs.true.14
  br label %do.body.18

do.body.18:                                       ; preds = %if.then.17
  %22 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used19 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %22, i32 0, i32 1
  %23 = load i64, i64* %elements_used19, align 8
  %24 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements20 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %24, i32 0, i32 0
  %25 = load i64, i64* %num_elements20, align 8
  %cmp21 = icmp uge i64 %23, %25
  br i1 %cmp21, label %if.then.22, label %if.end.26

if.then.22:                                       ; preds = %do.body.18
  %26 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %27 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements23 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %27, i32 0, i32 0
  %28 = load i64, i64* %num_elements23, align 8
  %mul24 = mul i64 2, %28
  %call25 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %26, i64 %mul24)
  store %struct.varray_head_tag* %call25, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.22, %do.body.18
  %29 = load %union.tree_node*, %union.tree_node** %t__12, align 8
  %30 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used27 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %30, i32 0, i32 1
  %31 = load i64, i64* %elements_used27, align 8
  %inc28 = add i64 %31, 1
  store i64 %inc28, i64* %elements_used27, align 8
  %32 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data29 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %32, i32 0, i32 4
  %tree30 = bitcast %union.varray_data_tag* %data29 to [1 x %union.tree_node*]*
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree30, i32 0, i64 %31
  store %union.tree_node* %29, %union.tree_node** %arrayidx31, align 8
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.26
  br label %if.end.33

if.end.33:                                        ; preds = %do.end.32, %land.lhs.true.14, %do.body.11
  br label %do.end.34

do.end.34:                                        ; preds = %if.end.33
  br label %do.body.35

do.body.35:                                       ; preds = %do.end.34
  %33 = load %struct.case_node*, %struct.case_node** %c.addr, align 8
  %code_label = getelementptr inbounds %struct.case_node, %struct.case_node* %33, i32 0, i32 5
  %34 = load %union.tree_node*, %union.tree_node** %code_label, align 8
  store %union.tree_node* %34, %union.tree_node** %t__36, align 8
  %35 = load %union.tree_node*, %union.tree_node** %t__36, align 8
  %cmp37 = icmp ne %union.tree_node* %35, null
  br i1 %cmp37, label %land.lhs.true.38, label %if.end.57

land.lhs.true.38:                                 ; preds = %do.body.35
  %36 = load %union.tree_node*, %union.tree_node** %t__36, align 8
  %37 = bitcast %union.tree_node* %36 to i8*
  %call39 = call i32 @ggc_set_mark(i8* %37)
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.end.57, label %if.then.41

if.then.41:                                       ; preds = %land.lhs.true.38
  br label %do.body.42

do.body.42:                                       ; preds = %if.then.41
  %38 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used43 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %38, i32 0, i32 1
  %39 = load i64, i64* %elements_used43, align 8
  %40 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements44 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %40, i32 0, i32 0
  %41 = load i64, i64* %num_elements44, align 8
  %cmp45 = icmp uge i64 %39, %41
  br i1 %cmp45, label %if.then.46, label %if.end.50

if.then.46:                                       ; preds = %do.body.42
  %42 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %43 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements47 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %43, i32 0, i32 0
  %44 = load i64, i64* %num_elements47, align 8
  %mul48 = mul i64 2, %44
  %call49 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %42, i64 %mul48)
  store %struct.varray_head_tag* %call49, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.46, %do.body.42
  %45 = load %union.tree_node*, %union.tree_node** %t__36, align 8
  %46 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used51 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %46, i32 0, i32 1
  %47 = load i64, i64* %elements_used51, align 8
  %inc52 = add i64 %47, 1
  store i64 %inc52, i64* %elements_used51, align 8
  %48 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data53 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %48, i32 0, i32 4
  %tree54 = bitcast %union.varray_data_tag* %data53 to [1 x %union.tree_node*]*
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree54, i32 0, i64 %47
  store %union.tree_node* %45, %union.tree_node** %arrayidx55, align 8
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.50
  br label %if.end.57

if.end.57:                                        ; preds = %do.end.56, %land.lhs.true.38, %do.body.35
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  %49 = load %struct.case_node*, %struct.case_node** %c.addr, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %49, i32 0, i32 1
  %50 = load %struct.case_node*, %struct.case_node** %right, align 8
  call void @mark_case_node(%struct.case_node* %50)
  %51 = load %struct.case_node*, %struct.case_node** %c.addr, align 8
  %left = getelementptr inbounds %struct.case_node, %struct.case_node* %51, i32 0, i32 0
  %52 = load %struct.case_node*, %struct.case_node** %left, align 8
  call void @mark_case_node(%struct.case_node* %52)
  br label %if.end.59

if.end.59:                                        ; preds = %do.end.58, %entry
  ret void
}

declare void @clear_pending_stack_adjust() #2

; Function Attrs: nounwind uwtable
define internal i32 @expand_fixup(%union.tree_node* %tree_label, %struct.rtx_def* %rtl_label, %struct.rtx_def* %last_insn) #0 {
entry:
  %retval = alloca i32, align 4
  %tree_label.addr = alloca %union.tree_node*, align 8
  %rtl_label.addr = alloca %struct.rtx_def*, align 8
  %last_insn.addr = alloca %struct.rtx_def*, align 8
  %block = alloca %struct.nesting*, align 8
  %end_block = alloca %struct.nesting*, align 8
  %next_block = alloca %struct.nesting*, align 8
  %fixup = alloca %struct.goto_fixup*, align 8
  %original_before_jump = alloca %struct.rtx_def*, align 8
  %start = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %block79 = alloca %union.tree_node*, align 8
  store %union.tree_node* %tree_label, %union.tree_node** %tree_label.addr, align 8
  store %struct.rtx_def* %rtl_label, %struct.rtx_def** %rtl_label.addr, align 8
  store %struct.rtx_def* %last_insn, %struct.rtx_def** %last_insn.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1
  %1 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  %x_cond_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %1, i32 0, i32 2
  %2 = load %struct.nesting*, %struct.nesting** %x_cond_stack, align 8
  %tobool = icmp ne %struct.nesting* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl_label.addr, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt1 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1
  %5 = load %struct.stmt_status*, %struct.stmt_status** %stmt1, align 8
  %x_cond_stack2 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %5, i32 0, i32 2
  %6 = load %struct.nesting*, %struct.nesting** %x_cond_stack2, align 8
  %data = getelementptr inbounds %struct.nesting, %struct.nesting* %6, i32 0, i32 4
  %cond = bitcast %union.anon.3* %data to %struct.anon.4*
  %endif_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond, i32 0, i32 0
  %7 = load %struct.rtx_def*, %struct.rtx_def** %endif_label, align 8
  %cmp = icmp eq %struct.rtx_def* %3, %7
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl_label.addr, align 8
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt3 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 1
  %10 = load %struct.stmt_status*, %struct.stmt_status** %stmt3, align 8
  %x_cond_stack4 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %10, i32 0, i32 2
  %11 = load %struct.nesting*, %struct.nesting** %x_cond_stack4, align 8
  %data5 = getelementptr inbounds %struct.nesting, %struct.nesting* %11, i32 0, i32 4
  %cond6 = bitcast %union.anon.3* %data5 to %struct.anon.4*
  %next_label = getelementptr inbounds %struct.anon.4, %struct.anon.4* %cond6, i32 0, i32 1
  %12 = load %struct.rtx_def*, %struct.rtx_def** %next_label, align 8
  %cmp7 = icmp eq %struct.rtx_def* %8, %12
  br i1 %cmp7, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %13 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt8 = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 1
  %14 = load %struct.stmt_status*, %struct.stmt_status** %stmt8, align 8
  %x_cond_stack9 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %14, i32 0, i32 2
  %15 = load %struct.nesting*, %struct.nesting** %x_cond_stack9, align 8
  store %struct.nesting* %15, %struct.nesting** %end_block, align 8
  br label %if.end.33

if.else:                                          ; preds = %lor.lhs.false, %entry
  %16 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt10 = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 1
  %17 = load %struct.stmt_status*, %struct.stmt_status** %stmt10, align 8
  %x_loop_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %17, i32 0, i32 3
  %18 = load %struct.nesting*, %struct.nesting** %x_loop_stack, align 8
  %tobool11 = icmp ne %struct.nesting* %18, null
  br i1 %tobool11, label %land.lhs.true.12, label %if.else.32

land.lhs.true.12:                                 ; preds = %if.else
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl_label.addr, align 8
  %20 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt13 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 1
  %21 = load %struct.stmt_status*, %struct.stmt_status** %stmt13, align 8
  %x_loop_stack14 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %21, i32 0, i32 3
  %22 = load %struct.nesting*, %struct.nesting** %x_loop_stack14, align 8
  %data15 = getelementptr inbounds %struct.nesting, %struct.nesting* %22, i32 0, i32 4
  %loop = bitcast %union.anon.3* %data15 to %struct.anon.5*
  %start_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop, i32 0, i32 0
  %23 = load %struct.rtx_def*, %struct.rtx_def** %start_label, align 8
  %cmp16 = icmp eq %struct.rtx_def* %19, %23
  br i1 %cmp16, label %if.then.29, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %land.lhs.true.12
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl_label.addr, align 8
  %25 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt18 = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 1
  %26 = load %struct.stmt_status*, %struct.stmt_status** %stmt18, align 8
  %x_loop_stack19 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %26, i32 0, i32 3
  %27 = load %struct.nesting*, %struct.nesting** %x_loop_stack19, align 8
  %data20 = getelementptr inbounds %struct.nesting, %struct.nesting* %27, i32 0, i32 4
  %loop21 = bitcast %union.anon.3* %data20 to %struct.anon.5*
  %end_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop21, i32 0, i32 1
  %28 = load %struct.rtx_def*, %struct.rtx_def** %end_label, align 8
  %cmp22 = icmp eq %struct.rtx_def* %24, %28
  br i1 %cmp22, label %if.then.29, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %lor.lhs.false.17
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl_label.addr, align 8
  %30 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt24 = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 1
  %31 = load %struct.stmt_status*, %struct.stmt_status** %stmt24, align 8
  %x_loop_stack25 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %31, i32 0, i32 3
  %32 = load %struct.nesting*, %struct.nesting** %x_loop_stack25, align 8
  %data26 = getelementptr inbounds %struct.nesting, %struct.nesting* %32, i32 0, i32 4
  %loop27 = bitcast %union.anon.3* %data26 to %struct.anon.5*
  %continue_label = getelementptr inbounds %struct.anon.5, %struct.anon.5* %loop27, i32 0, i32 3
  %33 = load %struct.rtx_def*, %struct.rtx_def** %continue_label, align 8
  %cmp28 = icmp eq %struct.rtx_def* %29, %33
  br i1 %cmp28, label %if.then.29, label %if.else.32

if.then.29:                                       ; preds = %lor.lhs.false.23, %lor.lhs.false.17, %land.lhs.true.12
  %34 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt30 = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 1
  %35 = load %struct.stmt_status*, %struct.stmt_status** %stmt30, align 8
  %x_loop_stack31 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %35, i32 0, i32 3
  %36 = load %struct.nesting*, %struct.nesting** %x_loop_stack31, align 8
  store %struct.nesting* %36, %struct.nesting** %end_block, align 8
  br label %if.end

if.else.32:                                       ; preds = %lor.lhs.false.23, %if.else
  store %struct.nesting* null, %struct.nesting** %end_block, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.32, %if.then.29
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %if.then
  %37 = load %struct.nesting*, %struct.nesting** %end_block, align 8
  %tobool34 = icmp ne %struct.nesting* %37, null
  br i1 %tobool34, label %if.then.35, label %if.end.53

if.then.35:                                       ; preds = %if.end.33
  %38 = load %struct.nesting*, %struct.nesting** %end_block, align 8
  %all = getelementptr inbounds %struct.nesting, %struct.nesting* %38, i32 0, i32 0
  %39 = load %struct.nesting*, %struct.nesting** %all, align 8
  store %struct.nesting* %39, %struct.nesting** %next_block, align 8
  %40 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt36 = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 1
  %41 = load %struct.stmt_status*, %struct.stmt_status** %stmt36, align 8
  %x_block_stack = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %41, i32 0, i32 0
  %42 = load %struct.nesting*, %struct.nesting** %x_block_stack, align 8
  store %struct.nesting* %42, %struct.nesting** %block, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.35
  %43 = load %struct.nesting*, %struct.nesting** %next_block, align 8
  %tobool37 = icmp ne %struct.nesting* %43, null
  br i1 %tobool37, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %44 = load %struct.nesting*, %struct.nesting** %next_block, align 8
  %45 = load %struct.nesting*, %struct.nesting** %block, align 8
  %cmp38 = icmp ne %struct.nesting* %44, %45
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %46 = phi i1 [ false, %while.cond ], [ %cmp38, %land.rhs ]
  br i1 %46, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %47 = load %struct.nesting*, %struct.nesting** %next_block, align 8
  %all39 = getelementptr inbounds %struct.nesting, %struct.nesting* %47, i32 0, i32 0
  %48 = load %struct.nesting*, %struct.nesting** %all39, align 8
  store %struct.nesting* %48, %struct.nesting** %next_block, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %49 = load %struct.nesting*, %struct.nesting** %next_block, align 8
  %tobool40 = icmp ne %struct.nesting* %49, null
  br i1 %tobool40, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %while.end
  store i32 0, i32* %retval
  br label %return

if.end.42:                                        ; preds = %while.end
  %50 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt43 = getelementptr inbounds %struct.function, %struct.function* %50, i32 0, i32 1
  %51 = load %struct.stmt_status*, %struct.stmt_status** %stmt43, align 8
  %x_block_stack44 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %51, i32 0, i32 0
  %52 = load %struct.nesting*, %struct.nesting** %x_block_stack44, align 8
  %next = getelementptr inbounds %struct.nesting, %struct.nesting* %52, i32 0, i32 1
  %53 = load %struct.nesting*, %struct.nesting** %next, align 8
  store %struct.nesting* %53, %struct.nesting** %next_block, align 8
  %54 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt45 = getelementptr inbounds %struct.function, %struct.function* %54, i32 0, i32 1
  %55 = load %struct.stmt_status*, %struct.stmt_status** %stmt45, align 8
  %x_block_stack46 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %55, i32 0, i32 0
  %56 = load %struct.nesting*, %struct.nesting** %x_block_stack46, align 8
  store %struct.nesting* %56, %struct.nesting** %block, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.42
  %57 = load %struct.nesting*, %struct.nesting** %block, align 8
  %58 = load %struct.nesting*, %struct.nesting** %end_block, align 8
  %cmp47 = icmp ne %struct.nesting* %57, %58
  br i1 %cmp47, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %59 = load %struct.nesting*, %struct.nesting** %block, align 8
  %60 = load %struct.nesting*, %struct.nesting** %next_block, align 8
  %cmp48 = icmp eq %struct.nesting* %59, %60
  br i1 %cmp48, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %for.body
  %61 = load %struct.nesting*, %struct.nesting** %next_block, align 8
  %next50 = getelementptr inbounds %struct.nesting, %struct.nesting* %61, i32 0, i32 1
  %62 = load %struct.nesting*, %struct.nesting** %next50, align 8
  store %struct.nesting* %62, %struct.nesting** %next_block, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.49, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.51
  %63 = load %struct.nesting*, %struct.nesting** %block, align 8
  %all52 = getelementptr inbounds %struct.nesting, %struct.nesting* %63, i32 0, i32 0
  %64 = load %struct.nesting*, %struct.nesting** %all52, align 8
  store %struct.nesting* %64, %struct.nesting** %block, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %65 = load %struct.nesting*, %struct.nesting** %next_block, align 8
  store %struct.nesting* %65, %struct.nesting** %end_block, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %for.end, %if.end.33
  %66 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt54 = getelementptr inbounds %struct.function, %struct.function* %66, i32 0, i32 1
  %67 = load %struct.stmt_status*, %struct.stmt_status** %stmt54, align 8
  %x_block_stack55 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %67, i32 0, i32 0
  %68 = load %struct.nesting*, %struct.nesting** %x_block_stack55, align 8
  store %struct.nesting* %68, %struct.nesting** %block, align 8
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.68, %if.end.53
  %69 = load %struct.nesting*, %struct.nesting** %block, align 8
  %70 = load %struct.nesting*, %struct.nesting** %end_block, align 8
  %cmp57 = icmp ne %struct.nesting* %69, %70
  br i1 %cmp57, label %for.body.58, label %for.end.70

for.body.58:                                      ; preds = %for.cond.56
  %71 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data59 = getelementptr inbounds %struct.nesting, %struct.nesting* %71, i32 0, i32 4
  %block60 = bitcast %union.anon.3* %data59 to %struct.anon.6*
  %stack_level = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block60, i32 0, i32 1
  %72 = load %struct.rtx_def*, %struct.rtx_def** %stack_level, align 8
  %cmp61 = icmp ne %struct.rtx_def* %72, null
  br i1 %cmp61, label %if.then.66, label %lor.lhs.false.62

lor.lhs.false.62:                                 ; preds = %for.body.58
  %73 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data63 = getelementptr inbounds %struct.nesting, %struct.nesting* %73, i32 0, i32 4
  %block64 = bitcast %union.anon.3* %data63 to %struct.anon.6*
  %cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block64, i32 0, i32 4
  %74 = load %union.tree_node*, %union.tree_node** %cleanups, align 8
  %cmp65 = icmp ne %union.tree_node* %74, null
  br i1 %cmp65, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %lor.lhs.false.62, %for.body.58
  br label %for.end.70

if.end.67:                                        ; preds = %lor.lhs.false.62
  br label %for.inc.68

for.inc.68:                                       ; preds = %if.end.67
  %75 = load %struct.nesting*, %struct.nesting** %block, align 8
  %next69 = getelementptr inbounds %struct.nesting, %struct.nesting* %75, i32 0, i32 1
  %76 = load %struct.nesting*, %struct.nesting** %next69, align 8
  store %struct.nesting* %76, %struct.nesting** %block, align 8
  br label %for.cond.56

for.end.70:                                       ; preds = %if.then.66, %for.cond.56
  %77 = load %struct.nesting*, %struct.nesting** %block, align 8
  %78 = load %struct.nesting*, %struct.nesting** %end_block, align 8
  %cmp71 = icmp ne %struct.nesting* %77, %78
  br i1 %cmp71, label %if.then.72, label %if.end.140

if.then.72:                                       ; preds = %for.end.70
  %call = call i8* @ggc_alloc(i64 64)
  %79 = bitcast i8* %call to %struct.goto_fixup*
  store %struct.goto_fixup* %79, %struct.goto_fixup** %fixup, align 8
  %80 = load %struct.rtx_def*, %struct.rtx_def** %last_insn.addr, align 8
  %cmp73 = icmp eq %struct.rtx_def* %80, null
  br i1 %cmp73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.then.72
  call void @do_pending_stack_adjust()
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.74, %if.then.72
  %81 = load %union.tree_node*, %union.tree_node** %tree_label.addr, align 8
  %82 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %target = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %82, i32 0, i32 2
  store %union.tree_node* %81, %union.tree_node** %target, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rtl_label.addr, align 8
  %84 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %target_rtl = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %84, i32 0, i32 4
  store %struct.rtx_def* %83, %struct.rtx_def** %target_rtl, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %last_insn.addr, align 8
  %tobool76 = icmp ne %struct.rtx_def* %85, null
  br i1 %tobool76, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.75
  %86 = load %struct.rtx_def*, %struct.rtx_def** %last_insn.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.75
  %call77 = call %struct.rtx_def* @get_last_insn()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond78 = phi %struct.rtx_def* [ %86, %cond.true ], [ %call77, %cond.false ]
  store %struct.rtx_def* %cond78, %struct.rtx_def** %original_before_jump, align 8
  %call80 = call %union.tree_node* @make_node(i32 4)
  store %union.tree_node* %call80, %union.tree_node** %block79, align 8
  %87 = load %union.tree_node*, %union.tree_node** %block79, align 8
  %common = bitcast %union.tree_node* %87 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %used_flag, align 8
  %bf.clear = and i32 %bf.load, -65537
  %bf.set = or i32 %bf.clear, 65536
  store i32 %bf.set, i32* %used_flag, align 8
  %88 = load %struct.function*, %struct.function** @cfun, align 8
  %x_whole_function_mode_p = getelementptr inbounds %struct.function, %struct.function* %88, i32 0, i32 56
  %89 = bitcast i24* %x_whole_function_mode_p to i32*
  %bf.load81 = load i32, i32* %89, align 8
  %bf.lshr = lshr i32 %bf.load81, 18
  %bf.clear82 = and i32 %bf.lshr, 1
  %tobool83 = icmp ne i32 %bf.clear82, 0
  br i1 %tobool83, label %if.else.85, label %if.then.84

if.then.84:                                       ; preds = %cond.end
  %90 = load %union.tree_node*, %union.tree_node** %block79, align 8
  call void @insert_block(%union.tree_node* %90)
  br label %if.end.93

if.else.85:                                       ; preds = %cond.end
  %91 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %91 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 12
  %92 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %common86 = bitcast %union.tree_node* %92 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common86, i32 0, i32 0
  %93 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %94 = load %union.tree_node*, %union.tree_node** %block79, align 8
  %common87 = bitcast %union.tree_node* %94 to %struct.tree_common*
  %chain88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 0
  store %union.tree_node* %93, %union.tree_node** %chain88, align 8
  %95 = load %union.tree_node*, %union.tree_node** %block79, align 8
  %96 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl89 = bitcast %union.tree_node* %96 to %struct.tree_decl*
  %initial90 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl89, i32 0, i32 12
  %97 = load %union.tree_node*, %union.tree_node** %initial90, align 8
  %common91 = bitcast %union.tree_node* %97 to %struct.tree_common*
  %chain92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 0
  store %union.tree_node* %95, %union.tree_node** %chain92, align 8
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.85, %if.then.84
  call void @start_sequence()
  %call94 = call %struct.rtx_def* @emit_note(i8* null, i32 -98)
  store %struct.rtx_def* %call94, %struct.rtx_def** %start, align 8
  %98 = load %struct.function*, %struct.function** @cfun, align 8
  %x_whole_function_mode_p95 = getelementptr inbounds %struct.function, %struct.function* %98, i32 0, i32 56
  %99 = bitcast i24* %x_whole_function_mode_p95 to i32*
  %bf.load96 = load i32, i32* %99, align 8
  %bf.lshr97 = lshr i32 %bf.load96, 18
  %bf.clear98 = and i32 %bf.lshr97, 1
  %tobool99 = icmp ne i32 %bf.clear98, 0
  br i1 %tobool99, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %if.end.93
  %100 = load %union.tree_node*, %union.tree_node** %block79, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx to %union.tree_node**
  store %union.tree_node* %100, %union.tree_node** %rttree, align 8
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.100, %if.end.93
  %call102 = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  %102 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %before_jump = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %102, i32 0, i32 1
  store %struct.rtx_def* %call102, %struct.rtx_def** %before_jump, align 8
  %call103 = call %struct.rtx_def* @emit_note(i8* null, i32 -97)
  store %struct.rtx_def* %call103, %struct.rtx_def** %end, align 8
  %103 = load %struct.function*, %struct.function** @cfun, align 8
  %x_whole_function_mode_p104 = getelementptr inbounds %struct.function, %struct.function* %103, i32 0, i32 56
  %104 = bitcast i24* %x_whole_function_mode_p104 to i32*
  %bf.load105 = load i32, i32* %104, align 8
  %bf.lshr106 = lshr i32 %bf.load105, 18
  %bf.clear107 = and i32 %bf.lshr106, 1
  %tobool108 = icmp ne i32 %bf.clear107, 0
  br i1 %tobool108, label %if.then.109, label %if.end.113

if.then.109:                                      ; preds = %if.end.101
  %105 = load %union.tree_node*, %union.tree_node** %block79, align 8
  %106 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  %fld110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i32 0, i64 3
  %rttree112 = bitcast %union.rtunion_def* %arrayidx111 to %union.tree_node**
  store %union.tree_node* %105, %union.tree_node** %rttree112, align 8
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.109, %if.end.101
  %107 = load %union.tree_node*, %union.tree_node** %block79, align 8
  %108 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %context = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %108, i32 0, i32 3
  store %union.tree_node* %107, %union.tree_node** %context, align 8
  call void @end_sequence()
  %109 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8
  %110 = load %struct.rtx_def*, %struct.rtx_def** %original_before_jump, align 8
  %call114 = call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %109, %struct.rtx_def* %110)
  %111 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt115 = getelementptr inbounds %struct.function, %struct.function* %111, i32 0, i32 1
  %112 = load %struct.stmt_status*, %struct.stmt_status** %stmt115, align 8
  %x_block_start_count = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %112, i32 0, i32 7
  %113 = load i32, i32* %x_block_start_count, align 4
  %114 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %block_start_count = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %114, i32 0, i32 5
  store i32 %113, i32* %block_start_count, align 4
  %115 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %stack_level116 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %115, i32 0, i32 6
  store %struct.rtx_def* null, %struct.rtx_def** %stack_level116, align 8
  %116 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data117 = getelementptr inbounds %struct.nesting, %struct.nesting* %116, i32 0, i32 4
  %block118 = bitcast %union.anon.3* %data117 to %struct.anon.6*
  %outer_cleanups = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block118, i32 0, i32 5
  %117 = load %union.tree_node*, %union.tree_node** %outer_cleanups, align 8
  %tobool119 = icmp ne %union.tree_node* %117, null
  br i1 %tobool119, label %cond.true.125, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %if.end.113
  %118 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data121 = getelementptr inbounds %struct.nesting, %struct.nesting* %118, i32 0, i32 4
  %block122 = bitcast %union.anon.3* %data121 to %struct.anon.6*
  %cleanups123 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block122, i32 0, i32 4
  %119 = load %union.tree_node*, %union.tree_node** %cleanups123, align 8
  %tobool124 = icmp ne %union.tree_node* %119, null
  br i1 %tobool124, label %cond.true.125, label %cond.false.133

cond.true.125:                                    ; preds = %lor.lhs.false.120, %if.end.113
  %120 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data126 = getelementptr inbounds %struct.nesting, %struct.nesting* %120, i32 0, i32 4
  %block127 = bitcast %union.anon.3* %data126 to %struct.anon.6*
  %cleanups128 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block127, i32 0, i32 4
  %121 = load %union.tree_node*, %union.tree_node** %cleanups128, align 8
  %122 = load %struct.nesting*, %struct.nesting** %block, align 8
  %data129 = getelementptr inbounds %struct.nesting, %struct.nesting* %122, i32 0, i32 4
  %block130 = bitcast %union.anon.3* %data129 to %struct.anon.6*
  %outer_cleanups131 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %block130, i32 0, i32 5
  %123 = load %union.tree_node*, %union.tree_node** %outer_cleanups131, align 8
  %call132 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %121, %union.tree_node* %123)
  br label %cond.end.134

cond.false.133:                                   ; preds = %lor.lhs.false.120
  br label %cond.end.134

cond.end.134:                                     ; preds = %cond.false.133, %cond.true.125
  %cond135 = phi %union.tree_node* [ %call132, %cond.true.125 ], [ null, %cond.false.133 ]
  %124 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %cleanup_list_list = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %124, i32 0, i32 7
  store %union.tree_node* %cond135, %union.tree_node** %cleanup_list_list, align 8
  %125 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt136 = getelementptr inbounds %struct.function, %struct.function* %125, i32 0, i32 1
  %126 = load %struct.stmt_status*, %struct.stmt_status** %stmt136, align 8
  %x_goto_fixup_chain = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %126, i32 0, i32 13
  %127 = load %struct.goto_fixup*, %struct.goto_fixup** %x_goto_fixup_chain, align 8
  %128 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %next137 = getelementptr inbounds %struct.goto_fixup, %struct.goto_fixup* %128, i32 0, i32 0
  store %struct.goto_fixup* %127, %struct.goto_fixup** %next137, align 8
  %129 = load %struct.goto_fixup*, %struct.goto_fixup** %fixup, align 8
  %130 = load %struct.function*, %struct.function** @cfun, align 8
  %stmt138 = getelementptr inbounds %struct.function, %struct.function* %130, i32 0, i32 1
  %131 = load %struct.stmt_status*, %struct.stmt_status** %stmt138, align 8
  %x_goto_fixup_chain139 = getelementptr inbounds %struct.stmt_status, %struct.stmt_status* %131, i32 0, i32 13
  store %struct.goto_fixup* %129, %struct.goto_fixup** %x_goto_fixup_chain139, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %cond.end.134, %for.end.70
  %132 = load %struct.nesting*, %struct.nesting** %block, align 8
  %cmp141 = icmp ne %struct.nesting* %132, null
  %conv = zext i1 %cmp141 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.140, %if.then.41
  %133 = load i32, i32* %retval
  ret i32 %133
}

declare void @insert_block(%union.tree_node*) #2

declare void @pushlevel(i32) #2

declare void @set_block(%union.tree_node*) #2

declare %union.tree_node* @poplevel(i32, i32, i32) #2

; Function Attrs: nounwind
declare i64 @strtoul(i8*, i8**, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @n_occurrences(i32 %c, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %n = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8* %s, i8** %s.addr, align 8
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %conv, %4
  %conv1 = zext i1 %cmp to i32
  %5 = load i32, i32* %n, align 4
  %add = add nsw i32 %5, %conv1
  store i32 %add, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i32, i32* %n, align 4
  ret i32 %6
}

declare noalias i8* @xstrdup(i8*) #2

; Function Attrs: nounwind uwtable
define internal i8* @resolve_operand_name_1(i8* %p, %union.tree_node* %outputs, %union.tree_node* %inputs) #0 {
entry:
  %retval = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %outputs.addr = alloca %union.tree_node*, align 8
  %inputs.addr = alloca %union.tree_node*, align 8
  %q = alloca i8*, align 8
  %op = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %len = alloca i64, align 8
  %id = alloca %union.tree_node*, align 8
  %c = alloca i8*, align 8
  %id17 = alloca %union.tree_node*, align 8
  %c24 = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store %union.tree_node* %outputs, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %inputs, %union.tree_node** %inputs.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %call = call i8* @strchr(i8* %0, i32 93) #7
  store i8* %call, i8** %q, align 8
  %1 = load i8*, i8** %q, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.28, i32 0, i32 0))
  %2 = load i8*, i8** %p.addr, align 8
  %call1 = call i8* @strchr(i8* %2, i32 0) #7
  store i8* %call1, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %q, align 8
  %4 = load i8*, i8** %p.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  store i64 %sub, i64* %len, align 8
  store i32 0, i32* %op, align 4
  %5 = load %union.tree_node*, %union.tree_node** %outputs.addr, align 8
  store %union.tree_node* %5, %union.tree_node** %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool2 = icmp ne %union.tree_node* %6, null
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list = bitcast %union.tree_node* %7 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %list3 = bitcast %union.tree_node* %8 to %struct.tree_list*
  %purpose4 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list3, i32 0, i32 1
  %9 = load %union.tree_node*, %union.tree_node** %purpose4, align 8
  store %union.tree_node* %9, %union.tree_node** %id, align 8
  %10 = load %union.tree_node*, %union.tree_node** %id, align 8
  %tobool5 = icmp ne %union.tree_node* %10, null
  br i1 %tobool5, label %if.then.6, label %if.end.13

if.then.6:                                        ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %id, align 8
  %identifier = bitcast %union.tree_node* %11 to %struct.tree_identifier*
  %id7 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id7, i32 0, i32 1
  %12 = load i8*, i8** %str, align 8
  store i8* %12, i8** %c, align 8
  %13 = load i8*, i8** %c, align 8
  %14 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 1
  %15 = load i64, i64* %len, align 8
  %call8 = call i32 @strncmp(i8* %13, i8* %add.ptr, i64 %15) #7
  %cmp = icmp eq i32 %call8, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %if.then.6
  %16 = load i64, i64* %len, align 8
  %17 = load i8*, i8** %c, align 8
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %16
  %18 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %18 to i32
  %cmp9 = icmp eq i32 %conv, 0
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %land.lhs.true
  br label %found

if.end.12:                                        ; preds = %land.lhs.true, %if.then.6
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.13
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %20 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %20, %union.tree_node** %t, align 8
  %21 = load i32, i32* %op, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %op, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load %union.tree_node*, %union.tree_node** %inputs.addr, align 8
  store %union.tree_node* %22, %union.tree_node** %t, align 8
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.40, %for.end
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool15 = icmp ne %union.tree_node* %23, null
  br i1 %tobool15, label %for.body.16, label %for.end.44

for.body.16:                                      ; preds = %for.cond.14
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list18 = bitcast %union.tree_node* %24 to %struct.tree_list*
  %purpose19 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list18, i32 0, i32 1
  %25 = load %union.tree_node*, %union.tree_node** %purpose19, align 8
  %list20 = bitcast %union.tree_node* %25 to %struct.tree_list*
  %purpose21 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list20, i32 0, i32 1
  %26 = load %union.tree_node*, %union.tree_node** %purpose21, align 8
  store %union.tree_node* %26, %union.tree_node** %id17, align 8
  %27 = load %union.tree_node*, %union.tree_node** %id17, align 8
  %tobool22 = icmp ne %union.tree_node* %27, null
  br i1 %tobool22, label %if.then.23, label %if.end.39

if.then.23:                                       ; preds = %for.body.16
  %28 = load %union.tree_node*, %union.tree_node** %id17, align 8
  %identifier25 = bitcast %union.tree_node* %28 to %struct.tree_identifier*
  %id26 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier25, i32 0, i32 1
  %str27 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id26, i32 0, i32 1
  %29 = load i8*, i8** %str27, align 8
  store i8* %29, i8** %c24, align 8
  %30 = load i8*, i8** %c24, align 8
  %31 = load i8*, i8** %p.addr, align 8
  %add.ptr28 = getelementptr inbounds i8, i8* %31, i64 1
  %32 = load i64, i64* %len, align 8
  %call29 = call i32 @strncmp(i8* %30, i8* %add.ptr28, i64 %32) #7
  %cmp30 = icmp eq i32 %call29, 0
  br i1 %cmp30, label %land.lhs.true.32, label %if.end.38

land.lhs.true.32:                                 ; preds = %if.then.23
  %33 = load i64, i64* %len, align 8
  %34 = load i8*, i8** %c24, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %34, i64 %33
  %35 = load i8, i8* %arrayidx33, align 1
  %conv34 = sext i8 %35 to i32
  %cmp35 = icmp eq i32 %conv34, 0
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %land.lhs.true.32
  br label %found

if.end.38:                                        ; preds = %land.lhs.true.32, %if.then.23
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %for.body.16
  br label %for.inc.40

for.inc.40:                                       ; preds = %if.end.39
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common41 = bitcast %union.tree_node* %36 to %struct.tree_common*
  %chain42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 0
  %37 = load %union.tree_node*, %union.tree_node** %chain42, align 8
  store %union.tree_node* %37, %union.tree_node** %t, align 8
  %38 = load i32, i32* %op, align 4
  %inc43 = add nsw i32 %38, 1
  store i32 %inc43, i32* %op, align 4
  br label %for.cond.14

for.end.44:                                       ; preds = %for.cond.14
  %39 = load i8*, i8** %q, align 8
  store i8 0, i8* %39, align 1
  %40 = load i8*, i8** %p.addr, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %40, i64 1
  call void (i8*, ...) @error(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.29, i32 0, i32 0), i8* %add.ptr45)
  store i32 0, i32* %op, align 4
  br label %found

found:                                            ; preds = %for.end.44, %if.then.37, %if.then.11
  %41 = load i8*, i8** %p.addr, align 8
  %42 = load i32, i32* %op, align 4
  %call46 = call i32 (i8*, i8*, ...) @sprintf(i8* %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 %42) #5
  %43 = load i8*, i8** %p.addr, align 8
  %call47 = call i8* @strchr(i8* %43, i32 0) #7
  store i8* %call47, i8** %p.addr, align 8
  %44 = load i8*, i8** %p.addr, align 8
  %45 = load i8*, i8** %q, align 8
  %cmp48 = icmp ugt i8* %44, %45
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %found
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2184, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.resolve_operand_name_1, i32 0, i32 0)) #6
  unreachable

if.end.51:                                        ; preds = %found
  %46 = load i8*, i8** %p.addr, align 8
  %47 = load i8*, i8** %q, align 8
  %add.ptr52 = getelementptr inbounds i8, i8* %47, i64 1
  %48 = load i8*, i8** %q, align 8
  %add.ptr53 = getelementptr inbounds i8, i8* %48, i64 1
  %call54 = call i64 @strlen(i8* %add.ptr53) #7
  %add = add i64 %call54, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %46, i8* %add.ptr52, i64 %add, i32 1, i1 false)
  %49 = load i8*, i8** %p.addr, align 8
  store i8* %49, i8** %retval
  br label %return

return:                                           ; preds = %if.end.51, %if.then
  %50 = load i8*, i8** %retval
  ret i8* %50
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

declare void @emit_group_load(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @convert_move(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare %struct.rtx_def* @emit_insns_before(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @expand_nl_handler_label(%struct.rtx_def* %slot, %struct.rtx_def* %before_insn) #0 {
entry:
  %slot.addr = alloca %struct.rtx_def*, align 8
  %before_insn.addr = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %handler_label = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %slot, %struct.rtx_def** %slot.addr, align 8
  store %struct.rtx_def* %before_insn, %struct.rtx_def** %before_insn.addr, align 8
  %call = call %struct.rtx_def* @gen_label_rtx()
  store %struct.rtx_def* %call, %struct.rtx_def** %handler_label, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %handler_label, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, -268435457
  %bf.set = or i32 %bf.clear, 268435456
  store i32 %bf.set, i32* %1, align 8
  call void @start_sequence()
  %2 = load %struct.rtx_def*, %struct.rtx_def** %slot.addr, align 8
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %4 = load %struct.rtx_def*, %struct.rtx_def** %handler_label, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %cond, %struct.rtx_def* %4)
  %call2 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %2, %struct.rtx_def* %call1)
  %call3 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call3, %struct.rtx_def** %insns, align 8
  call void @end_sequence()
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %before_insn.addr, align 8
  %call4 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %5, %struct.rtx_def* %6)
  %7 = load %struct.rtx_def*, %struct.rtx_def** %handler_label, align 8
  %call5 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %7)
  %8 = load %struct.rtx_def*, %struct.rtx_def** %handler_label, align 8
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define internal void @expand_nl_goto_receiver() #0 {
entry:
  %i = alloca i64, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %0, %struct.rtx_def* %1)
  %2 = load i8, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @fixed_regs, i32 0, i64 16), align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i64, i64* %i, align 8
  %cmp = icmp ult i64 %3, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds [4 x %struct.elims], [4 x %struct.elims]* @expand_nl_goto_receiver.elim_regs, i32 0, i64 %4
  %from = getelementptr inbounds %struct.elims, %struct.elims* %arrayidx, i32 0, i32 0
  %5 = load i32, i32* %from, align 4
  %cmp1 = icmp eq i32 %5, 16
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i64, i64* %i, align 8
  %arrayidx2 = getelementptr inbounds [4 x %struct.elims], [4 x %struct.elims]* @expand_nl_goto_receiver.elim_regs, i32 0, i64 %6
  %to = getelementptr inbounds %struct.elims, %struct.elims* %arrayidx2, i32 0, i32 1
  %7 = load i32, i32* %to, align 4
  %cmp3 = icmp eq i32 %7, 6
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %land.lhs.true
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i64, i64* %i, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.4, %for.cond
  %9 = load i64, i64* %i, align 8
  %cmp5 = icmp eq i64 %9, 4
  br i1 %cmp5, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %for.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %call7 = call %struct.rtx_def* @get_arg_pointer_save_area(%struct.function* %11)
  %call8 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call7)
  %call9 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %call8)
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.6, %for.end
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %entry
  ret void
}

declare void @expand_builtin_trap() #2

declare %struct.rtx_def* @get_arg_pointer_save_area(%struct.function*) #2

declare void @expand_eh_region_end_cleanup(%union.tree_node*) #2

declare void @expand_eh_region_end_fixup(%union.tree_node*) #2

declare void @restore_line_number_status(i32) #2

declare %struct.rtx_def* @next_real_insn(%struct.rtx_def*) #2

declare i32 @simplejump_p(%struct.rtx_def*) #2

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal i32 @node_is_bounded(%struct.case_node* %node, %union.tree_node* %index_type) #0 {
entry:
  %node.addr = alloca %struct.case_node*, align 8
  %index_type.addr = alloca %union.tree_node*, align 8
  store %struct.case_node* %node, %struct.case_node** %node.addr, align 8
  store %union.tree_node* %index_type, %union.tree_node** %index_type.addr, align 8
  %0 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %1 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call = call i32 @node_has_low_bound(%struct.case_node* %0, %union.tree_node* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %3 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %call1 = call i32 @node_has_high_bound(%struct.case_node* %2, %union.tree_node* %3)
  %tobool2 = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define internal void @do_jump_if_equal(%struct.rtx_def* %op1, %struct.rtx_def* %op2, %struct.rtx_def* %label, i32 %unsignedp) #0 {
entry:
  %op1.addr = alloca %struct.rtx_def*, align 8
  %op2.addr = alloca %struct.rtx_def*, align 8
  %label.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  store %struct.rtx_def* %op2, %struct.rtx_def** %op2.addr, align 8
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load1 = load i32, i32* %3, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 54
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx to i64*
  %5 = load i64, i64* %rtwint, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtwint6 = bitcast %union.rtunion_def* %arrayidx5 to i64*
  %7 = load i64, i64* %rtwint6, align 8
  %cmp7 = icmp eq i64 %5, %7
  br i1 %cmp7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @emit_jump(%struct.rtx_def* %8)
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.then
  br label %if.end.18

if.else:                                          ; preds = %land.lhs.true, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load9 = load i32, i32* %12, align 8
  %bf.lshr = lshr i32 %bf.load9, 16
  %bf.clear10 = and i32 %bf.lshr, 255
  %cmp11 = icmp eq i32 %bf.clear10, 0
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load12 = load i32, i32* %14, align 8
  %bf.lshr13 = lshr i32 %bf.load12, 16
  %bf.clear14 = and i32 %bf.lshr13, 255
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load15 = load i32, i32* %16, align 8
  %bf.lshr16 = lshr i32 %bf.load15, 16
  %bf.clear17 = and i32 %bf.lshr16, 255
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %bf.clear14, %cond.true ], [ %bf.clear17, %cond.false ]
  %17 = load i32, i32* %unsignedp.addr, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %9, %struct.rtx_def* %10, i32 103, %struct.rtx_def* null, i32 %cond, i32 %17, %struct.rtx_def* %18)
  br label %if.end.18

if.end.18:                                        ; preds = %cond.end, %if.end
  ret void
}

declare %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @node_has_low_bound(%struct.case_node* %node, %union.tree_node* %index_type) #0 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %struct.case_node*, align 8
  %index_type.addr = alloca %union.tree_node*, align 8
  %low_minus_one = alloca %union.tree_node*, align 8
  %pnode = alloca %struct.case_node*, align 8
  store %struct.case_node* %node, %struct.case_node** %node.addr, align 8
  store %union.tree_node* %index_type, %union.tree_node** %index_type.addr, align 8
  %0 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %0, i32 0, i32 3
  %1 = load %union.tree_node*, %union.tree_node** %low, align 8
  %2 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %type = bitcast %union.tree_node* %2 to %struct.tree_type*
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 12
  %3 = load %union.tree_node*, %union.tree_node** %minval, align 8
  %call = call i32 @tree_int_cst_equal(%union.tree_node* %1, %union.tree_node* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %left = getelementptr inbounds %struct.case_node, %struct.case_node* %4, i32 0, i32 0
  %5 = load %struct.case_node*, %struct.case_node** %left, align 8
  %tobool1 = icmp ne %struct.case_node* %5, null
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %6 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low4 = getelementptr inbounds %struct.case_node, %struct.case_node* %6, i32 0, i32 3
  %7 = load %union.tree_node*, %union.tree_node** %low4, align 8
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %type5, align 8
  %9 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low6 = getelementptr inbounds %struct.case_node, %struct.case_node* %9, i32 0, i32 3
  %10 = load %union.tree_node*, %union.tree_node** %low6, align 8
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 12), align 8
  %call7 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 60, %union.tree_node* %8, %union.tree_node* %10, %union.tree_node* %11)
  %call8 = call %union.tree_node* @fold(%union.tree_node* %call7)
  store %union.tree_node* %call8, %union.tree_node** %low_minus_one, align 8
  %12 = load %union.tree_node*, %union.tree_node** %low_minus_one, align 8
  %13 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %low9 = getelementptr inbounds %struct.case_node, %struct.case_node* %13, i32 0, i32 3
  %14 = load %union.tree_node*, %union.tree_node** %low9, align 8
  %call10 = call i32 @tree_int_cst_lt(%union.tree_node* %12, %union.tree_node* %14)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end.3
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.3
  %15 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %parent = getelementptr inbounds %struct.case_node, %struct.case_node* %15, i32 0, i32 2
  %16 = load %struct.case_node*, %struct.case_node** %parent, align 8
  store %struct.case_node* %16, %struct.case_node** %pnode, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.13
  %17 = load %struct.case_node*, %struct.case_node** %pnode, align 8
  %tobool14 = icmp ne %struct.case_node* %17, null
  br i1 %tobool14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load %union.tree_node*, %union.tree_node** %low_minus_one, align 8
  %19 = load %struct.case_node*, %struct.case_node** %pnode, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %19, i32 0, i32 4
  %20 = load %union.tree_node*, %union.tree_node** %high, align 8
  %call15 = call i32 @tree_int_cst_equal(%union.tree_node* %18, %union.tree_node* %20)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.18
  %21 = load %struct.case_node*, %struct.case_node** %pnode, align 8
  %parent19 = getelementptr inbounds %struct.case_node, %struct.case_node* %21, i32 0, i32 2
  %22 = load %struct.case_node*, %struct.case_node** %parent19, align 8
  store %struct.case_node* %22, %struct.case_node** %pnode, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.17, %if.then.12, %if.then.2, %if.then
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal i32 @node_has_high_bound(%struct.case_node* %node, %union.tree_node* %index_type) #0 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %struct.case_node*, align 8
  %index_type.addr = alloca %union.tree_node*, align 8
  %high_plus_one = alloca %union.tree_node*, align 8
  %pnode = alloca %struct.case_node*, align 8
  store %struct.case_node* %node, %struct.case_node** %node.addr, align 8
  store %union.tree_node* %index_type, %union.tree_node** %index_type.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 13
  %1 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %cmp = icmp eq %union.tree_node* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high = getelementptr inbounds %struct.case_node, %struct.case_node* %2, i32 0, i32 4
  %3 = load %union.tree_node*, %union.tree_node** %high, align 8
  %4 = load %union.tree_node*, %union.tree_node** %index_type.addr, align 8
  %type1 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %maxval2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 13
  %5 = load %union.tree_node*, %union.tree_node** %maxval2, align 8
  %call = call i32 @tree_int_cst_equal(%union.tree_node* %3, %union.tree_node* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %6 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %right = getelementptr inbounds %struct.case_node, %struct.case_node* %6, i32 0, i32 1
  %7 = load %struct.case_node*, %struct.case_node** %right, align 8
  %tobool5 = icmp ne %struct.case_node* %7, null
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.4
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end.4
  %8 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high8 = getelementptr inbounds %struct.case_node, %struct.case_node* %8, i32 0, i32 4
  %9 = load %union.tree_node*, %union.tree_node** %high8, align 8
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type9, align 8
  %11 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high10 = getelementptr inbounds %struct.case_node, %struct.case_node* %11, i32 0, i32 4
  %12 = load %union.tree_node*, %union.tree_node** %high10, align 8
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 12), align 8
  %call11 = call %union.tree_node* (i32, %union.tree_node*, ...) @build(i32 59, %union.tree_node* %10, %union.tree_node* %12, %union.tree_node* %13)
  %call12 = call %union.tree_node* @fold(%union.tree_node* %call11)
  store %union.tree_node* %call12, %union.tree_node** %high_plus_one, align 8
  %14 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %high13 = getelementptr inbounds %struct.case_node, %struct.case_node* %14, i32 0, i32 4
  %15 = load %union.tree_node*, %union.tree_node** %high13, align 8
  %16 = load %union.tree_node*, %union.tree_node** %high_plus_one, align 8
  %call14 = call i32 @tree_int_cst_lt(%union.tree_node* %15, %union.tree_node* %16)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.end.7
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.7
  %17 = load %struct.case_node*, %struct.case_node** %node.addr, align 8
  %parent = getelementptr inbounds %struct.case_node, %struct.case_node* %17, i32 0, i32 2
  %18 = load %struct.case_node*, %struct.case_node** %parent, align 8
  store %struct.case_node* %18, %struct.case_node** %pnode, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.17
  %19 = load %struct.case_node*, %struct.case_node** %pnode, align 8
  %tobool18 = icmp ne %struct.case_node* %19, null
  br i1 %tobool18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load %union.tree_node*, %union.tree_node** %high_plus_one, align 8
  %21 = load %struct.case_node*, %struct.case_node** %pnode, align 8
  %low = getelementptr inbounds %struct.case_node, %struct.case_node* %21, i32 0, i32 3
  %22 = load %union.tree_node*, %union.tree_node** %low, align 8
  %call19 = call i32 @tree_int_cst_equal(%union.tree_node* %20, %union.tree_node* %22)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.22
  %23 = load %struct.case_node*, %struct.case_node** %pnode, align 8
  %parent23 = getelementptr inbounds %struct.case_node, %struct.case_node* %23, i32 0, i32 2
  %24 = load %struct.case_node*, %struct.case_node** %parent23, align 8
  store %struct.case_node* %24, %struct.case_node** %pnode, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.21, %if.then.16, %if.then.6, %if.then.3, %if.then
  %25 = load i32, i32* %retval
  ret i32 %25
}

declare %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn }
attributes #7 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
