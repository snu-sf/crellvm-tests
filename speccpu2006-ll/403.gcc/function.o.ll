; ModuleID = 'function.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type { %struct.temp_slot*, %struct.rtx_def*, %struct.rtx_def*, i32, i64, %union.tree_node*, %union.tree_node*, i8, i8, i32, i32, i64, i64 }
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.hash_table = type { %struct.hash_entry**, i32, %struct.hash_entry* (%struct.hash_entry*, %struct.hash_table*, i8*)*, i64 (i8*)*, i1 (i8*, i8*)*, %struct.obstack }
%struct.hash_entry = type { %struct.hash_entry*, i8*, i64 }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_exp = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.mem_attrs = type { i64, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.insns_for_mem_entry = type { %struct.hash_entry, %struct.rtx_def* }
%struct.insns_for_mem_walk_info = type { %struct.hash_table*, %struct.rtx_def*, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.args_size = type { i64, %union.tree_node* }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i32, i8* }
%struct.tree_int_cst = type { %struct.tree_common, %struct.rtx_def*, %struct.anon }
%struct.anon = type { i64, i64 }
%struct.tree_block = type { %struct.tree_common, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.epi_info = type { %struct.rtx_def*, i64, %struct.rtx_def*, i64, %struct.rtx_def* }
%struct.fixup_replacement = type { %struct.rtx_def*, %struct.rtx_def*, %struct.fixup_replacement* }

@cfun = global %struct.function* null, align 8
@outer_function_chain = internal global %struct.function* null, align 8
@.str = private unnamed_addr constant [11 x i8] c"function.c\00", align 1
@__FUNCTION__.find_function_data = private unnamed_addr constant [19 x i8] c"find_function_data\00", align 1
@current_function_decl = external global %union.tree_node*, align 8
@save_lang_status = common global void (%struct.function*)* null, align 8
@reg_renumber = external global i16*, align 8
@restore_lang_status = common global void (%struct.function*)* null, align 8
@rtx_equal_function_value_matters = external global i32, align 4
@virtuals_instantiated = common global i32 0, align 4
@generating_concat_p = external global i32, align 4
@free_lang_status = common global void (%struct.function*)* null, align 8
@free_machine_status = common global void (%struct.function*)* null, align 8
@__FUNCTION__.assign_stack_temp_for_type = private unnamed_addr constant [27 x i8] c"assign_stack_temp_for_type\00", align 1
@tree_code_type = external global [256 x i8], align 16
@.str.1 = private unnamed_addr constant [35 x i8] c"size of variable `%s' is too large\00", align 1
@flag_strict_aliasing = external global i32, align 4
@flag_expensive_optimizations = external global i32, align 4
@optimize = external global i32, align 4
@inline_function_decl = common global %union.tree_node* null, align 8
@target_flags = external global i32, align 4
@__FUNCTION__.purge_addressof = private unnamed_addr constant [16 x i8] c"purge_addressof\00", align 1
@purge_bitfield_addressof_replacements = internal global %struct.rtx_def* null, align 8
@purge_addressof_replacements = internal global %struct.rtx_def* null, align 8
@rtx_class = external constant [153 x i8], align 16
@in_arg_offset = internal global i32 0, align 4
@var_offset = internal global i32 0, align 4
@dynamic_offset = internal global i32 0, align 4
@out_arg_offset = internal global i32 0, align 4
@cfa_offset = internal global i32 0, align 4
@__FUNCTION__.get_first_block_beg = private unnamed_addr constant [20 x i8] c"get_first_block_beg\00", align 1
@flag_pcc_struct_return = external global i32, align 4
@mode_class = external constant [59 x i32], align 16
@mode_size = external constant [59 x i8], align 16
@call_used_regs = external global [53 x i8], align 16
@.str.2 = private unnamed_addr constant [19 x i8] c"__builtin_va_alist\00", align 1
@global_trees = external global [51 x %union.tree_node*], align 16
@fixed_regs = external global [53 x i8], align 16
@global_rtl = external global [11 x %struct.rtx_def*], align 16
@struct_value_incoming_rtx = external global %struct.rtx_def*, align 8
@const_int_rtx = external global [129 x %struct.rtx_def*], align 16
@sizetype_tab = external global [6 x %union.tree_node*], align 16
@__FUNCTION__.assign_parms = private unnamed_addr constant [13 x i8] c"assign_parms\00", align 1
@flag_float_store = external global i32, align 4
@warn_uninitialized = external global i32, align 4
@.str.3 = private unnamed_addr constant [50 x i8] c"`%s' might be used uninitialized in this function\00", align 1
@extra_warnings = external global i32, align 4
@.str.4 = private unnamed_addr constant [57 x i8] c"variable `%s' might be clobbered by `longjmp' or `vfork'\00", align 1
@.str.5 = private unnamed_addr constant [57 x i8] c"argument `%s' might be clobbered by `longjmp' or `vfork'\00", align 1
@__FUNCTION__.lookup_static_chain = private unnamed_addr constant [20 x i8] c"lookup_static_chain\00", align 1
@__FUNCTION__.fix_lexical_addr = private unnamed_addr constant [17 x i8] c"fix_lexical_addr\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"block_stack\00", align 1
@next_block_index = internal global i32 2, align 4
@decl_printable_name = external global i8* (%union.tree_node*, i32)*, align 8
@immediate_size_expand = external global i32, align 4
@warn_aggregate_return = external global i32, align 4
@.str.7 = private unnamed_addr constant [30 x i8] c"function returns an aggregate\00", align 1
@prologue = internal global %struct.varray_head_tag* null, align 8
@epilogue = internal global %struct.varray_head_tag* null, align 8
@sibcall_epilogue = internal global %struct.varray_head_tag* null, align 8
@ix86_preferred_stack_boundary = external global i32, align 4
@flag_instrument_function_entry_exit = external global i32, align 4
@profile_flag = external global i32, align 4
@stack_limit_rtx = external global %struct.rtx_def*, align 8
@static_chain_incoming_rtx = external global %struct.rtx_def*, align 8
@__FUNCTION__.expand_function_start = private unnamed_addr constant [22 x i8] c"expand_function_start\00", align 1
@libfunc_table = external global [97 x %struct.rtx_def*], align 16
@profile_label_no = internal global i32 0, align 4
@flag_stack_check = external global i32, align 4
@warn_unused_parameter = external global i32, align 4
@.str.8 = private unnamed_addr constant [22 x i8] c"unused parameter `%s'\00", align 1
@flag_test_coverage = external global i32, align 4
@__FUNCTION__.expand_function_end = private unnamed_addr constant [20 x i8] c"expand_function_end\00", align 1
@flag_exceptions = external global i32, align 4
@entry_exit_blocks = external global [2 x %struct.basic_block_def], align 16
@__FUNCTION__.thread_prologue_and_epilogue_insns = private unnamed_addr constant [35 x i8] c"thread_prologue_and_epilogue_insns\00", align 1
@basic_block_info = external global %struct.varray_head_tag*, align 8
@ggc_pending_trees = external global %struct.varray_head_tag*, align 8
@mark_machine_status = common global void (%struct.function*)* null, align 8
@mark_lang_status = common global void (%struct.function*)* null, align 8
@.str.9 = private unnamed_addr constant [9 x i8] c"prologue\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"epilogue\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"sibcall_epilogue\00", align 1
@current_function_is_leaf = common global i32 0, align 4
@current_function_nothrow = common global i32 0, align 4
@current_function_sp_is_unchanging = common global i32 0, align 4
@current_function_uses_only_leaf_regs = common global i32 0, align 4
@init_machine_status = common global void (%struct.function*)* null, align 8
@init_lang_status = common global void (%struct.function*)* null, align 8
@__FUNCTION__.fixup_var_refs = private unnamed_addr constant [15 x i8] c"fixup_var_refs\00", align 1
@__FUNCTION__.fixup_var_refs_1 = private unnamed_addr constant [17 x i8] c"fixup_var_refs_1\00", align 1
@flag_force_mem = external global i32, align 4
@mode_bitsize = external constant [59 x i16], align 16
@rtx_format = external constant [153 x i8*], align 16
@rtx_length = external constant [153 x i8], align 16
@__FUNCTION__.optimize_bit_field = private unnamed_addr constant [19 x i8] c"optimize_bit_field\00", align 1
@__FUNCTION__.fixup_memory_subreg = private unnamed_addr constant [20 x i8] c"fixup_memory_subreg\00", align 1
@flag_force_addr = external global i32, align 4
@__FUNCTION__.put_addressof_into_stack = private unnamed_addr constant [25 x i8] c"put_addressof_into_stack\00", align 1
@__FUNCTION__.purge_addressof_1 = private unnamed_addr constant [18 x i8] c"purge_addressof_1\00", align 1
@class_narrowest_mode = external constant [9 x i32], align 16
@mode_wider_mode = external constant [59 x i8], align 16
@__FUNCTION__.instantiate_virtual_regs_1 = private unnamed_addr constant [27 x i8] c"instantiate_virtual_regs_1\00", align 1
@__FUNCTION__.identify_blocks_1 = private unnamed_addr constant [18 x i8] c"identify_blocks_1\00", align 1
@cse_not_expected = external global i32, align 4
@caller_save_needed = external global i32, align 4
@frame_pointer_needed = external global i32, align 4
@__FUNCTION__.keep_stack_depressed = private unnamed_addr constant [21 x i8] c"keep_stack_depressed\00", align 1
@regs_invalidated_by_call = external global i64, align 8
@__FUNCTION__.handle_epilogue_set = private unnamed_addr constant [20 x i8] c"handle_epilogue_set\00", align 1

; Function Attrs: nounwind uwtable
define %struct.function* @find_function_data(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.function*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %struct.function*, %struct.function** @outer_function_chain, align 8
  store %struct.function* %0, %struct.function** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.function*, %struct.function** %p, align 8
  %tobool = icmp ne %struct.function* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.function*, %struct.function** %p, align 8
  %decl1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 6
  %3 = load %union.tree_node*, %union.tree_node** %decl1, align 8
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %cmp = icmp eq %union.tree_node* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %struct.function*, %struct.function** %p, align 8
  ret %struct.function* %5

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load %struct.function*, %struct.function** %p, align 8
  %outer = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 7
  %7 = load %struct.function*, %struct.function** %outer, align 8
  store %struct.function* %7, %struct.function** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 329, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.find_function_data, i32 0, i32 0)) #6
  unreachable
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #1

; Function Attrs: nounwind uwtable
define void @push_function_context_to(%union.tree_node* %context) #0 {
entry:
  %context.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.function*, align 8
  %containing = alloca %struct.function*, align 8
  store %union.tree_node* %context, %union.tree_node** %context.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %context.addr, align 8
  %tobool = icmp ne %union.tree_node* %0, null
  br i1 %tobool, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %context.addr, align 8
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp = icmp eq %union.tree_node* %1, %2
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.then
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %contains_functions = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 56
  %4 = bitcast i24* %contains_functions to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, -1025
  %bf.set = or i32 %bf.clear, 1024
  store i32 %bf.set, i32* %4, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %context.addr, align 8
  %call = call %struct.function* @find_function_data(%union.tree_node* %5)
  store %struct.function* %call, %struct.function** %containing, align 8
  %6 = load %struct.function*, %struct.function** %containing, align 8
  %contains_functions2 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 56
  %7 = bitcast i24* %contains_functions2 to i32*
  %bf.load3 = load i32, i32* %7, align 8
  %bf.clear4 = and i32 %bf.load3, -1025
  %bf.set5 = or i32 %bf.clear4, 1024
  store i32 %bf.set5, i32* %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.1
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %entry
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %cmp7 = icmp eq %struct.function* %8, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.6
  call void @init_dummy_function_start()
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.end.6
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  store %struct.function* %9, %struct.function** %p, align 8
  %10 = load %struct.function*, %struct.function** @outer_function_chain, align 8
  %11 = load %struct.function*, %struct.function** %p, align 8
  %outer = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 7
  store %struct.function* %10, %struct.function** %outer, align 8
  %12 = load %struct.function*, %struct.function** %p, align 8
  store %struct.function* %12, %struct.function** @outer_function_chain, align 8
  %13 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 43
  store %struct.var_refs_queue* null, %struct.var_refs_queue** %fixup_var_refs_queue, align 8
  %14 = load void (%struct.function*)*, void (%struct.function*)** @save_lang_status, align 8
  %tobool10 = icmp ne void (%struct.function*)* %14, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.9
  %15 = load void (%struct.function*)*, void (%struct.function*)** @save_lang_status, align 8
  %16 = load %struct.function*, %struct.function** %p, align 8
  call void %15(%struct.function* %16)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end.9
  store %struct.function* null, %struct.function** @cfun, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_dummy_function_start() #0 {
entry:
  call void @prepare_function_start()
  ret void
}

; Function Attrs: nounwind uwtable
define void @push_function_context() #0 {
entry:
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  call void @push_function_context_to(%union.tree_node* %0)
  ret void
}

; Function Attrs: nounwind uwtable
define void @pop_function_context_from(%union.tree_node* %context) #0 {
entry:
  %context.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.function*, align 8
  %queue = alloca %struct.var_refs_queue*, align 8
  %list = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %context, %union.tree_node** %context.addr, align 8
  %0 = load %struct.function*, %struct.function** @outer_function_chain, align 8
  store %struct.function* %0, %struct.function** %p, align 8
  %1 = load %struct.function*, %struct.function** %p, align 8
  store %struct.function* %1, %struct.function** @cfun, align 8
  %2 = load %struct.function*, %struct.function** %p, align 8
  %outer = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 7
  %3 = load %struct.function*, %struct.function** %outer, align 8
  store %struct.function* %3, %struct.function** @outer_function_chain, align 8
  %4 = load %struct.function*, %struct.function** %p, align 8
  %decl = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 6
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  store %union.tree_node* %5, %union.tree_node** @current_function_decl, align 8
  store i16* null, i16** @reg_renumber, align 8
  %6 = load %struct.function*, %struct.function** %p, align 8
  call void @restore_emit_status(%struct.function* %6)
  %7 = load void (%struct.function*)*, void (%struct.function*)** @restore_lang_status, align 8
  %tobool = icmp ne void (%struct.function*)* %7, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load void (%struct.function*)*, void (%struct.function*)** @restore_lang_status, align 8
  %9 = load %struct.function*, %struct.function** %p, align 8
  call void %8(%struct.function* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 43
  %11 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue, align 8
  %cmp = icmp eq %struct.var_refs_queue* %11, null
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  br label %if.end.26

if.else:                                          ; preds = %if.end
  %12 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue2 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 43
  %13 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue2, align 8
  %next = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %13, i32 0, i32 3
  %14 = load %struct.var_refs_queue*, %struct.var_refs_queue** %next, align 8
  %cmp3 = icmp eq %struct.var_refs_queue* %14, null
  br i1 %cmp3, label %if.then.4, label %if.else.10

if.then.4:                                        ; preds = %if.else
  %15 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue5 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 43
  %16 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue5, align 8
  %modified = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %16, i32 0, i32 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %modified, align 8
  %18 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue6 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 43
  %19 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue6, align 8
  %promoted_mode = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %19, i32 0, i32 1
  %20 = load i32, i32* %promoted_mode, align 4
  %21 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue7 = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 43
  %22 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue7, align 8
  %unsignedp = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %22, i32 0, i32 2
  %23 = load i32, i32* %unsignedp, align 4
  %24 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue8 = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 43
  %25 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue8, align 8
  %modified9 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %25, i32 0, i32 0
  %26 = load %struct.rtx_def*, %struct.rtx_def** %modified9, align 8
  call void @fixup_var_refs(%struct.rtx_def* %17, i32 %20, i32 %23, %struct.rtx_def* %26, %struct.hash_table* null)
  br label %if.end.25

if.else.10:                                       ; preds = %if.else
  store %struct.rtx_def* null, %struct.rtx_def** %list, align 8
  %27 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue11 = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 43
  %28 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue11, align 8
  store %struct.var_refs_queue* %28, %struct.var_refs_queue** %queue, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.10
  %29 = load %struct.var_refs_queue*, %struct.var_refs_queue** %queue, align 8
  %tobool12 = icmp ne %struct.var_refs_queue* %29, null
  br i1 %tobool12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load %struct.var_refs_queue*, %struct.var_refs_queue** %queue, align 8
  %modified13 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %30, i32 0, i32 0
  %31 = load %struct.rtx_def*, %struct.rtx_def** %modified13, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %31, %struct.rtx_def* %32)
  store %struct.rtx_def* %call, %struct.rtx_def** %list, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %33 = load %struct.var_refs_queue*, %struct.var_refs_queue** %queue, align 8
  %next14 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %33, i32 0, i32 3
  %34 = load %struct.var_refs_queue*, %struct.var_refs_queue** %next14, align 8
  store %struct.var_refs_queue* %34, %struct.var_refs_queue** %queue, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue15 = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 43
  %36 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue15, align 8
  store %struct.var_refs_queue* %36, %struct.var_refs_queue** %queue, align 8
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.22, %for.end
  %37 = load %struct.var_refs_queue*, %struct.var_refs_queue** %queue, align 8
  %tobool17 = icmp ne %struct.var_refs_queue* %37, null
  br i1 %tobool17, label %for.body.18, label %for.end.24

for.body.18:                                      ; preds = %for.cond.16
  %38 = load %struct.var_refs_queue*, %struct.var_refs_queue** %queue, align 8
  %modified19 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %38, i32 0, i32 0
  %39 = load %struct.rtx_def*, %struct.rtx_def** %modified19, align 8
  %40 = load %struct.var_refs_queue*, %struct.var_refs_queue** %queue, align 8
  %promoted_mode20 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %40, i32 0, i32 1
  %41 = load i32, i32* %promoted_mode20, align 4
  %42 = load %struct.var_refs_queue*, %struct.var_refs_queue** %queue, align 8
  %unsignedp21 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %42, i32 0, i32 2
  %43 = load i32, i32* %unsignedp21, align 4
  %44 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8
  call void @fixup_var_refs(%struct.rtx_def* %39, i32 %41, i32 %43, %struct.rtx_def* %44, %struct.hash_table* null)
  br label %for.inc.22

for.inc.22:                                       ; preds = %for.body.18
  %45 = load %struct.var_refs_queue*, %struct.var_refs_queue** %queue, align 8
  %next23 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %45, i32 0, i32 3
  %46 = load %struct.var_refs_queue*, %struct.var_refs_queue** %next23, align 8
  store %struct.var_refs_queue* %46, %struct.var_refs_queue** %queue, align 8
  br label %for.cond.16

for.end.24:                                       ; preds = %for.cond.16
  br label %if.end.25

if.end.25:                                        ; preds = %for.end.24, %if.then.4
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.1
  %47 = load %struct.function*, %struct.function** %p, align 8
  %fixup_var_refs_queue27 = getelementptr inbounds %struct.function, %struct.function* %47, i32 0, i32 43
  store %struct.var_refs_queue* null, %struct.var_refs_queue** %fixup_var_refs_queue27, align 8
  store i32 1, i32* @rtx_equal_function_value_matters, align 4
  store i32 0, i32* @virtuals_instantiated, align 4
  store i32 1, i32* @generating_concat_p, align 4
  ret void
}

declare void @restore_emit_status(%struct.function*) #2

; Function Attrs: nounwind uwtable
define internal void @fixup_var_refs(%struct.rtx_def* %var, i32 %promoted_mode, i32 %unsignedp, %struct.rtx_def* %may_share, %struct.hash_table* %ht) #0 {
entry:
  %var.addr = alloca %struct.rtx_def*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %may_share.addr = alloca %struct.rtx_def*, align 8
  %ht.addr = alloca %struct.hash_table*, align 8
  %pending = alloca %union.tree_node*, align 8
  %first_insn = alloca %struct.rtx_def*, align 8
  %stack = alloca %struct.sequence_stack*, align 8
  %rtl_exps = alloca %union.tree_node*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %var, %struct.rtx_def** %var.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  store %struct.rtx_def* %may_share, %struct.rtx_def** %may_share.addr, align 8
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  %call = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call, %struct.rtx_def** %first_insn, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3
  %1 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %sequence_stack = getelementptr inbounds %struct.emit_status, %struct.emit_status* %1, i32 0, i32 5
  %2 = load %struct.sequence_stack*, %struct.sequence_stack** %sequence_stack, align 8
  store %struct.sequence_stack* %2, %struct.sequence_stack** %stack, align 8
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %x_rtl_expr_chain = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 27
  %4 = load %union.tree_node*, %union.tree_node** %x_rtl_expr_chain, align 8
  store %union.tree_node* %4, %union.tree_node** %rtl_exps, align 8
  %5 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %tobool = icmp ne %struct.hash_table* %5, null
  br i1 %tobool, label %if.then, label %if.end.2

if.then:                                          ; preds = %entry
  %6 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %cmp = icmp ne %struct.sequence_stack* %6, null
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 1593, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__FUNCTION__.fixup_var_refs, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %if.then
  %7 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %9 = load i32, i32* %promoted_mode.addr, align 4
  %10 = load i32, i32* %unsignedp.addr, align 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %may_share.addr, align 8
  call void @fixup_var_refs_insns_with_hash(%struct.hash_table* %7, %struct.rtx_def* %8, i32 %9, i32 %10, %struct.rtx_def* %11)
  br label %for.end.21

if.end.2:                                         ; preds = %entry
  %12 = load %struct.rtx_def*, %struct.rtx_def** %first_insn, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %14 = load i32, i32* %promoted_mode.addr, align 4
  %15 = load i32, i32* %unsignedp.addr, align 4
  %16 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %cmp3 = icmp eq %struct.sequence_stack* %16, null
  %conv = zext i1 %cmp3 to i32
  %17 = load %struct.rtx_def*, %struct.rtx_def** %may_share.addr, align 8
  call void @fixup_var_refs_insns(%struct.rtx_def* %12, %struct.rtx_def* %13, i32 %14, i32 %15, i32 %conv, %struct.rtx_def* %17)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.2
  %18 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %tobool4 = icmp ne %struct.sequence_stack* %18, null
  br i1 %tobool4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %first = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %19, i32 0, i32 0
  %20 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8
  %21 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %last = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %21, i32 0, i32 1
  %22 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  call void @push_to_full_sequence(%struct.rtx_def* %20, %struct.rtx_def* %22)
  %23 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %first5 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %23, i32 0, i32 0
  %24 = load %struct.rtx_def*, %struct.rtx_def** %first5, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %26 = load i32, i32* %promoted_mode.addr, align 4
  %27 = load i32, i32* %unsignedp.addr, align 4
  %28 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %next = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %28, i32 0, i32 3
  %29 = load %struct.sequence_stack*, %struct.sequence_stack** %next, align 8
  %cmp6 = icmp ne %struct.sequence_stack* %29, null
  %conv7 = zext i1 %cmp6 to i32
  %30 = load %struct.rtx_def*, %struct.rtx_def** %may_share.addr, align 8
  call void @fixup_var_refs_insns(%struct.rtx_def* %24, %struct.rtx_def* %25, i32 %26, i32 %27, i32 %conv7, %struct.rtx_def* %30)
  %call8 = call %struct.rtx_def* @get_last_insn()
  %31 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %last9 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %31, i32 0, i32 1
  store %struct.rtx_def* %call8, %struct.rtx_def** %last9, align 8
  call void @end_sequence()
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %32 = load %struct.sequence_stack*, %struct.sequence_stack** %stack, align 8
  %next10 = getelementptr inbounds %struct.sequence_stack, %struct.sequence_stack* %32, i32 0, i32 3
  %33 = load %struct.sequence_stack*, %struct.sequence_stack** %next10, align 8
  store %struct.sequence_stack* %33, %struct.sequence_stack** %stack, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %34 = load %union.tree_node*, %union.tree_node** %rtl_exps, align 8
  store %union.tree_node* %34, %union.tree_node** %pending, align 8
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc.20, %for.end
  %35 = load %union.tree_node*, %union.tree_node** %pending, align 8
  %tobool12 = icmp ne %union.tree_node* %35, null
  br i1 %tobool12, label %for.body.13, label %for.end.21

for.body.13:                                      ; preds = %for.cond.11
  %36 = load %union.tree_node*, %union.tree_node** %pending, align 8
  %list = bitcast %union.tree_node* %36 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %37 = load %union.tree_node*, %union.tree_node** %value, align 8
  %exp = bitcast %union.tree_node* %37 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 0
  %38 = bitcast %union.tree_node** %arrayidx to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %38, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %seq, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp14 = icmp ne %struct.rtx_def* %40, %41
  br i1 %cmp14, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %for.body.13
  %42 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %cmp16 = icmp ne %struct.rtx_def* %42, null
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %land.lhs.true
  %43 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  call void @push_to_sequence(%struct.rtx_def* %43)
  %44 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %46 = load i32, i32* %promoted_mode.addr, align 4
  %47 = load i32, i32* %unsignedp.addr, align 4
  %48 = load %struct.rtx_def*, %struct.rtx_def** %may_share.addr, align 8
  call void @fixup_var_refs_insns(%struct.rtx_def* %44, %struct.rtx_def* %45, i32 %46, i32 %47, i32 0, %struct.rtx_def* %48)
  call void @end_sequence()
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %land.lhs.true, %for.body.13
  br label %for.inc.20

for.inc.20:                                       ; preds = %if.end.19
  %49 = load %union.tree_node*, %union.tree_node** %pending, align 8
  %common = bitcast %union.tree_node* %49 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %50 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %50, %union.tree_node** %pending, align 8
  br label %for.cond.11

for.end.21:                                       ; preds = %if.end, %for.cond.11
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @pop_function_context() #0 {
entry:
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  call void @pop_function_context_from(%union.tree_node* %0)
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_after_parsing(%struct.function* %f) #0 {
entry:
  %f.addr = alloca %struct.function*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  %0 = load void (%struct.function*)*, void (%struct.function*)** @free_lang_status, align 8
  %tobool = icmp ne void (%struct.function*)* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load void (%struct.function*)*, void (%struct.function*)** @free_lang_status, align 8
  %2 = load %struct.function*, %struct.function** %f.addr, align 8
  call void %1(%struct.function* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.function*, %struct.function** %f.addr, align 8
  call void @free_stmt_status(%struct.function* %3)
  ret void
}

declare void @free_stmt_status(%struct.function*) #2

; Function Attrs: nounwind uwtable
define void @free_after_compilation(%struct.function* %f) #0 {
entry:
  %f.addr = alloca %struct.function*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  %0 = load %struct.function*, %struct.function** %f.addr, align 8
  call void @free_eh_status(%struct.function* %0)
  %1 = load %struct.function*, %struct.function** %f.addr, align 8
  call void @free_expr_status(%struct.function* %1)
  %2 = load %struct.function*, %struct.function** %f.addr, align 8
  call void @free_emit_status(%struct.function* %2)
  %3 = load %struct.function*, %struct.function** %f.addr, align 8
  call void @free_varasm_status(%struct.function* %3)
  %4 = load void (%struct.function*)*, void (%struct.function*)** @free_machine_status, align 8
  %tobool = icmp ne void (%struct.function*)* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load void (%struct.function*)*, void (%struct.function*)** @free_machine_status, align 8
  %6 = load %struct.function*, %struct.function** %f.addr, align 8
  call void %5(%struct.function* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_parm_reg_stack_loc = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 38
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc, align 8
  %tobool1 = icmp ne %struct.rtx_def** %8, null
  br i1 %tobool1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %9 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_parm_reg_stack_loc3 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 38
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc3, align 8
  %11 = bitcast %struct.rtx_def** %10 to i8*
  call void @free(i8* %11) #5
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  %12 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 39
  store %struct.temp_slot* null, %struct.temp_slot** %x_temp_slots, align 8
  %13 = load %struct.function*, %struct.function** %f.addr, align 8
  %arg_offset_rtx = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 12
  store %struct.rtx_def* null, %struct.rtx_def** %arg_offset_rtx, align 8
  %14 = load %struct.function*, %struct.function** %f.addr, align 8
  %return_rtx = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 14
  store %struct.rtx_def* null, %struct.rtx_def** %return_rtx, align 8
  %15 = load %struct.function*, %struct.function** %f.addr, align 8
  %internal_arg_pointer = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 15
  store %struct.rtx_def* null, %struct.rtx_def** %internal_arg_pointer, align 8
  %16 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_nonlocal_labels = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 19
  store %union.tree_node* null, %union.tree_node** %x_nonlocal_labels, align 8
  %17 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 20
  store %struct.rtx_def* null, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  %18 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_nonlocal_goto_handler_labels = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 21
  store %struct.rtx_def* null, %struct.rtx_def** %x_nonlocal_goto_handler_labels, align 8
  %19 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 22
  store %struct.rtx_def* null, %struct.rtx_def** %x_nonlocal_goto_stack_level, align 8
  %20 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_cleanup_label = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 23
  store %struct.rtx_def* null, %struct.rtx_def** %x_cleanup_label, align 8
  %21 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_return_label = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 24
  store %struct.rtx_def* null, %struct.rtx_def** %x_return_label, align 8
  %22 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_save_expr_regs = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 25
  store %struct.rtx_def* null, %struct.rtx_def** %x_save_expr_regs, align 8
  %23 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_stack_slot_list = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 26
  store %struct.rtx_def* null, %struct.rtx_def** %x_stack_slot_list, align 8
  %24 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_rtl_expr_chain = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 27
  store %union.tree_node* null, %union.tree_node** %x_rtl_expr_chain, align 8
  %25 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_tail_recursion_label = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 28
  store %struct.rtx_def* null, %struct.rtx_def** %x_tail_recursion_label, align 8
  %26 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_tail_recursion_reentry = getelementptr inbounds %struct.function, %struct.function* %26, i32 0, i32 29
  store %struct.rtx_def* null, %struct.rtx_def** %x_tail_recursion_reentry, align 8
  %27 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_arg_pointer_save_area = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 30
  store %struct.rtx_def* null, %struct.rtx_def** %x_arg_pointer_save_area, align 8
  %28 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_clobber_return_insn = getelementptr inbounds %struct.function, %struct.function* %28, i32 0, i32 31
  store %struct.rtx_def* null, %struct.rtx_def** %x_clobber_return_insn, align 8
  %29 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_context_display = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 33
  store %union.tree_node* null, %union.tree_node** %x_context_display, align 8
  %30 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_trampoline_list = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 34
  store %union.tree_node* null, %union.tree_node** %x_trampoline_list, align 8
  %31 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_parm_birth_insn = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 35
  store %struct.rtx_def* null, %struct.rtx_def** %x_parm_birth_insn, align 8
  %32 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_last_parm_insn = getelementptr inbounds %struct.function, %struct.function* %32, i32 0, i32 36
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_parm_insn, align 8
  %33 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_parm_reg_stack_loc5 = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 38
  store %struct.rtx_def** null, %struct.rtx_def*** %x_parm_reg_stack_loc5, align 8
  %34 = load %struct.function*, %struct.function** %f.addr, align 8
  %fixup_var_refs_queue = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 43
  store %struct.var_refs_queue* null, %struct.var_refs_queue** %fixup_var_refs_queue, align 8
  %35 = load %struct.function*, %struct.function** %f.addr, align 8
  %original_arg_vector = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 46
  store i8* null, i8** %original_arg_vector, align 8
  %36 = load %struct.function*, %struct.function** %f.addr, align 8
  %original_decl_initial = getelementptr inbounds %struct.function, %struct.function* %36, i32 0, i32 47
  store %union.tree_node* null, %union.tree_node** %original_decl_initial, align 8
  %37 = load %struct.function*, %struct.function** %f.addr, align 8
  %inl_last_parm_insn = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 48
  store %struct.rtx_def* null, %struct.rtx_def** %inl_last_parm_insn, align 8
  %38 = load %struct.function*, %struct.function** %f.addr, align 8
  %epilogue_delay_list = getelementptr inbounds %struct.function, %struct.function* %38, i32 0, i32 55
  store %struct.rtx_def* null, %struct.rtx_def** %epilogue_delay_list, align 8
  ret void
}

declare void @free_eh_status(%struct.function*) #2

declare void @free_expr_status(%struct.function*) #2

declare void @free_emit_status(%struct.function*) #2

declare void @free_varasm_status(%struct.function*) #2

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: nounwind uwtable
define i64 @get_func_frame_size(%struct.function* %f) #0 {
entry:
  %f.addr = alloca %struct.function*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  %0 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_frame_offset = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 32
  %1 = load i64, i64* %x_frame_offset, align 8
  %sub = sub nsw i64 0, %1
  ret i64 %sub
}

; Function Attrs: nounwind uwtable
define i64 @get_frame_size() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %call = call i64 @get_func_frame_size(%struct.function* %0)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @assign_stack_local(i32 %mode, i64 %size, i32 %align) #0 {
entry:
  %mode.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i64 %size, i64* %size.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %1 = load i64, i64* %size.addr, align 8
  %2 = load i32, i32* %align.addr, align 4
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %call = call %struct.rtx_def* @assign_stack_local_1(i32 %0, i64 %1, i32 %2, %struct.function* %3)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @assign_stack_local_1(i32 %mode, i64 %size, i32 %align, %struct.function* %function) #0 {
entry:
  %mode.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  %function.addr = alloca %struct.function*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %bigend_correction = alloca i32, align 4
  %alignment = alloca i32, align 4
  %frame_off = alloca i32, align 4
  %frame_alignment = alloca i32, align 4
  %frame_phase = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store i64 %size, i64* %size.addr, align 8
  store i32 %align, i32* %align.addr, align 4
  store %struct.function* %function, %struct.function** %function.addr, align 8
  store i32 0, i32* %bigend_correction, align 4
  %0 = load i32, i32* %align.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else.7

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  %cmp1 = icmp eq i32 %1, 51
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  store i32 128, i32* %alignment, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @get_mode_alignment(i32 %2)
  store i32 %call, i32* %alignment, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %3 = load i32, i32* %mode.addr, align 4
  %call3 = call %union.tree_node* @type_for_mode(i32 %3, i32 0)
  store %union.tree_node* %call3, %union.tree_node** %type, align 8
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8
  %tobool = icmp ne %union.tree_node* %4, null
  br i1 %tobool, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8
  %6 = load i32, i32* %alignment, align 4
  %call5 = call i32 @ix86_local_alignment(%union.tree_node* %5, i32 %6)
  store i32 %call5, i32* %alignment, align 4
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.4, %if.end
  %7 = load i32, i32* %alignment, align 4
  %div = sdiv i32 %7, 8
  store i32 %div, i32* %alignment, align 4
  br label %if.end.15

if.else.7:                                        ; preds = %entry
  %8 = load i32, i32* %align.addr, align 4
  %cmp8 = icmp eq i32 %8, -1
  br i1 %cmp8, label %if.then.9, label %if.else.12

if.then.9:                                        ; preds = %if.else.7
  store i32 16, i32* %alignment, align 4
  %9 = load i64, i64* %size.addr, align 8
  %10 = load i32, i32* %alignment, align 4
  %conv = sext i32 %10 to i64
  %add = add nsw i64 %9, %conv
  %sub = sub nsw i64 %add, 1
  %11 = load i32, i32* %alignment, align 4
  %sub10 = sub nsw i32 %11, 1
  %neg = xor i32 %sub10, -1
  %conv11 = sext i32 %neg to i64
  %and = and i64 %sub, %conv11
  store i64 %and, i64* %size.addr, align 8
  br label %if.end.14

if.else.12:                                       ; preds = %if.else.7
  %12 = load i32, i32* %align.addr, align 4
  %div13 = sdiv i32 %12, 8
  store i32 %div13, i32* %alignment, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.12, %if.then.9
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.end.6
  %13 = load i64, i64* %size.addr, align 8
  %14 = load %struct.function*, %struct.function** %function.addr, align 8
  %x_frame_offset = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 32
  %15 = load i64, i64* %x_frame_offset, align 8
  %sub16 = sub nsw i64 %15, %13
  store i64 %sub16, i64* %x_frame_offset, align 8
  %16 = load i32, i32* %alignment, align 4
  %mul = mul nsw i32 %16, 8
  %17 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %cmp17 = icmp sgt i32 %mul, %17
  br i1 %cmp17, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.15
  %18 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %div20 = sdiv i32 %18, 8
  store i32 %div20, i32* %alignment, align 4
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end.15
  %19 = load %struct.function*, %struct.function** %function.addr, align 8
  %stack_alignment_needed = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 52
  %20 = load i32, i32* %stack_alignment_needed, align 4
  %21 = load i32, i32* %alignment, align 4
  %mul22 = mul nsw i32 %21, 8
  %cmp23 = icmp slt i32 %20, %mul22
  br i1 %cmp23, label %if.then.25, label %if.end.28

if.then.25:                                       ; preds = %if.end.21
  %22 = load i32, i32* %alignment, align 4
  %mul26 = mul nsw i32 %22, 8
  %23 = load %struct.function*, %struct.function** %function.addr, align 8
  %stack_alignment_needed27 = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 52
  store i32 %mul26, i32* %stack_alignment_needed27, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.25, %if.end.21
  %24 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %div29 = sdiv i32 %24, 8
  store i32 %div29, i32* %frame_alignment, align 4
  %25 = load i32, i32* %frame_alignment, align 4
  %rem = srem i32 0, %25
  store i32 %rem, i32* %frame_off, align 4
  %26 = load i32, i32* %frame_off, align 4
  %tobool30 = icmp ne i32 %26, 0
  br i1 %tobool30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.28
  %27 = load i32, i32* %frame_alignment, align 4
  %28 = load i32, i32* %frame_off, align 4
  %sub31 = sub nsw i32 %27, %28
  br label %cond.end

cond.false:                                       ; preds = %if.end.28
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub31, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %frame_phase, align 4
  %29 = load %struct.function*, %struct.function** %function.addr, align 8
  %x_frame_offset32 = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 32
  %30 = load i64, i64* %x_frame_offset32, align 8
  %31 = load i32, i32* %frame_phase, align 4
  %conv33 = sext i32 %31 to i64
  %sub34 = sub nsw i64 %30, %conv33
  %32 = load i32, i32* %alignment, align 4
  %sub35 = sub nsw i32 %32, 1
  %neg36 = xor i32 %sub35, -1
  %conv37 = sext i32 %neg36 to i64
  %and38 = and i64 %sub34, %conv37
  %33 = load i32, i32* %frame_phase, align 4
  %conv39 = sext i32 %33 to i64
  %add40 = add nsw i64 %and38, %conv39
  %34 = load %struct.function*, %struct.function** %function.addr, align 8
  %x_frame_offset41 = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 32
  store i64 %add40, i64* %x_frame_offset41, align 8
  %35 = load %struct.function*, %struct.function** %function.addr, align 8
  %36 = load %struct.function*, %struct.function** @cfun, align 8
  %cmp42 = icmp eq %struct.function* %35, %36
  br i1 %cmp42, label %land.lhs.true, label %if.else.51

land.lhs.true:                                    ; preds = %cond.end
  %37 = load i32, i32* @virtuals_instantiated, align 4
  %tobool44 = icmp ne i32 %37, 0
  br i1 %tobool44, label %if.then.45, label %if.else.51

if.then.45:                                       ; preds = %land.lhs.true
  %38 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %39 = load %struct.function*, %struct.function** @cfun, align 8
  %x_frame_offset46 = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 32
  %40 = load i64, i64* %x_frame_offset46, align 8
  %41 = load i32, i32* %bigend_correction, align 4
  %conv47 = sext i32 %41 to i64
  %add48 = add nsw i64 %40, %conv47
  %add49 = add nsw i64 %add48, 0
  %call50 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %38, i64 %add49)
  store %struct.rtx_def* %call50, %struct.rtx_def** %addr, align 8
  br label %if.end.56

if.else.51:                                       ; preds = %land.lhs.true, %cond.end
  %42 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %43 = load %struct.function*, %struct.function** %function.addr, align 8
  %x_frame_offset52 = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 32
  %44 = load i64, i64* %x_frame_offset52, align 8
  %45 = load i32, i32* %bigend_correction, align 4
  %conv53 = sext i32 %45 to i64
  %add54 = add nsw i64 %44, %conv53
  %call55 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %42, i64 %add54)
  store %struct.rtx_def* %call55, %struct.rtx_def** %addr, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.51, %if.then.45
  %46 = load i32, i32* %mode.addr, align 4
  %47 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call57 = call %struct.rtx_def* @gen_rtx_MEM(i32 %46, %struct.rtx_def* %47)
  store %struct.rtx_def* %call57, %struct.rtx_def** %x, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %49 = load %struct.function*, %struct.function** %function.addr, align 8
  %x_stack_slot_list = getelementptr inbounds %struct.function, %struct.function* %49, i32 0, i32 26
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x_stack_slot_list, align 8
  %call58 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %48, %struct.rtx_def* %50)
  %51 = load %struct.function*, %struct.function** %function.addr, align 8
  %x_stack_slot_list59 = getelementptr inbounds %struct.function, %struct.function* %51, i32 0, i32 26
  store %struct.rtx_def* %call58, %struct.rtx_def** %x_stack_slot_list59, align 8
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  ret %struct.rtx_def* %52
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @assign_stack_temp_for_type(i32 %mode, i64 %size, i32 %keep, %union.tree_node* %type) #0 {
entry:
  %mode.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %keep.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  %p = alloca %struct.temp_slot*, align 8
  %best_p = alloca %struct.temp_slot*, align 8
  %slot = alloca %struct.rtx_def*, align 8
  %alignment = alloca i32, align 4
  %rounded_size = alloca i64, align 8
  %frame_offset_old = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  store i64 %size, i64* %size.addr, align 8
  store i32 %keep, i32* %keep.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store %struct.temp_slot* null, %struct.temp_slot** %best_p, align 8
  %0 = load i64, i64* %size.addr, align 8
  %cmp = icmp eq i64 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 674, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.assign_stack_temp_for_type, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4
  %cmp1 = icmp eq i32 %1, 51
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  store i32 128, i32* %align, align 4
  br label %if.end.3

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 @get_mode_alignment(i32 %2)
  store i32 %call, i32* %align, align 4
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool = icmp ne %union.tree_node* %3, null
  br i1 %tobool, label %if.end.6, label %if.then.4

if.then.4:                                        ; preds = %if.end.3
  %4 = load i32, i32* %mode.addr, align 4
  %call5 = call %union.tree_node* @type_for_mode(i32 %4, i32 0)
  store %union.tree_node* %call5, %union.tree_node** %type.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.4, %if.end.3
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool7 = icmp ne %union.tree_node* %5, null
  br i1 %tobool7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end.6
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %7 = load i32, i32* %align, align 4
  %call9 = call i32 @ix86_local_alignment(%union.tree_node* %6, i32 %7)
  store i32 %call9, i32* %align, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %if.end.6
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 39
  %9 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %9, %struct.temp_slot** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.10
  %10 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool11 = icmp ne %struct.temp_slot* %10, null
  br i1 %tobool11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %align12 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %11, i32 0, i32 3
  %12 = load i32, i32* %align12, align 4
  %13 = load i32, i32* %align, align 4
  %cmp13 = icmp uge i32 %12, %13
  br i1 %cmp13, label %land.lhs.true, label %if.end.46

land.lhs.true:                                    ; preds = %for.body
  %14 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %size14 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %14, i32 0, i32 4
  %15 = load i64, i64* %size14, align 8
  %16 = load i64, i64* %size.addr, align 8
  %cmp15 = icmp sge i64 %15, %16
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.46

land.lhs.true.16:                                 ; preds = %land.lhs.true
  %17 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %slot17 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %17, i32 0, i32 1
  %18 = load %struct.rtx_def*, %struct.rtx_def** %slot17, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load = load i32, i32* %19, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %20 = load i32, i32* %mode.addr, align 4
  %cmp18 = icmp eq i32 %bf.clear, %20
  br i1 %cmp18, label %land.lhs.true.19, label %if.end.46

land.lhs.true.19:                                 ; preds = %land.lhs.true.16
  %21 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %21, i32 0, i32 7
  %22 = load i8, i8* %in_use, align 1
  %tobool20 = icmp ne i8 %22, 0
  br i1 %tobool20, label %if.end.46, label %land.lhs.true.21

land.lhs.true.21:                                 ; preds = %land.lhs.true.19
  %23 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %type22 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %23, i32 0, i32 5
  %24 = load %union.tree_node*, %union.tree_node** %type22, align 8
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call23 = call i32 @objects_must_conflict_p(%union.tree_node* %24, %union.tree_node* %25)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %land.lhs.true.25, label %if.end.46

land.lhs.true.25:                                 ; preds = %land.lhs.true.21
  %26 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %cmp26 = icmp eq %struct.temp_slot* %26, null
  br i1 %cmp26, label %if.then.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.25
  %27 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %size27 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %27, i32 0, i32 4
  %28 = load i64, i64* %size27, align 8
  %29 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %size28 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %29, i32 0, i32 4
  %30 = load i64, i64* %size28, align 8
  %cmp29 = icmp sgt i64 %28, %30
  br i1 %cmp29, label %if.then.38, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %lor.lhs.false
  %31 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %size31 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %31, i32 0, i32 4
  %32 = load i64, i64* %size31, align 8
  %33 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %size32 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %33, i32 0, i32 4
  %34 = load i64, i64* %size32, align 8
  %cmp33 = icmp eq i64 %32, %34
  br i1 %cmp33, label %land.lhs.true.34, label %if.end.46

land.lhs.true.34:                                 ; preds = %lor.lhs.false.30
  %35 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %align35 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %35, i32 0, i32 3
  %36 = load i32, i32* %align35, align 4
  %37 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %align36 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %37, i32 0, i32 3
  %38 = load i32, i32* %align36, align 4
  %cmp37 = icmp ugt i32 %36, %38
  br i1 %cmp37, label %if.then.38, label %if.end.46

if.then.38:                                       ; preds = %land.lhs.true.34, %lor.lhs.false, %land.lhs.true.25
  %39 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %align39 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %39, i32 0, i32 3
  %40 = load i32, i32* %align39, align 4
  %41 = load i32, i32* %align, align 4
  %cmp40 = icmp eq i32 %40, %41
  br i1 %cmp40, label %land.lhs.true.41, label %if.end.45

land.lhs.true.41:                                 ; preds = %if.then.38
  %42 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %size42 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %42, i32 0, i32 4
  %43 = load i64, i64* %size42, align 8
  %44 = load i64, i64* %size.addr, align 8
  %cmp43 = icmp eq i64 %43, %44
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %land.lhs.true.41
  store %struct.temp_slot* null, %struct.temp_slot** %best_p, align 8
  br label %for.end

if.end.45:                                        ; preds = %land.lhs.true.41, %if.then.38
  %45 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  store %struct.temp_slot* %45, %struct.temp_slot** %best_p, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %land.lhs.true.34, %lor.lhs.false.30, %land.lhs.true.21, %land.lhs.true.19, %land.lhs.true.16, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.46
  %46 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %46, i32 0, i32 0
  %47 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8
  store %struct.temp_slot* %47, %struct.temp_slot** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.44, %for.cond
  %48 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %tobool47 = icmp ne %struct.temp_slot* %48, null
  br i1 %tobool47, label %if.then.48, label %if.end.91

if.then.48:                                       ; preds = %for.end
  %49 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %slot49 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %49, i32 0, i32 1
  %50 = load %struct.rtx_def*, %struct.rtx_def** %slot49, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load50 = load i32, i32* %51, align 8
  %bf.lshr51 = lshr i32 %bf.load50, 16
  %bf.clear52 = and i32 %bf.lshr51, 255
  %cmp53 = icmp eq i32 %bf.clear52, 51
  br i1 %cmp53, label %if.then.54, label %if.end.90

if.then.54:                                       ; preds = %if.then.48
  %52 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %align55 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %52, i32 0, i32 3
  %53 = load i32, i32* %align55, align 4
  %div = udiv i32 %53, 8
  store i32 %div, i32* %alignment, align 4
  %54 = load i64, i64* %size.addr, align 8
  %55 = load i32, i32* %alignment, align 4
  %conv = sext i32 %55 to i64
  %add = add nsw i64 %54, %conv
  %sub = sub nsw i64 %add, 1
  %56 = load i32, i32* %alignment, align 4
  %sub56 = sub nsw i32 %56, 1
  %neg = xor i32 %sub56, -1
  %conv57 = sext i32 %neg to i64
  %and = and i64 %sub, %conv57
  store i64 %and, i64* %rounded_size, align 8
  %57 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %size58 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %57, i32 0, i32 4
  %58 = load i64, i64* %size58, align 8
  %59 = load i64, i64* %rounded_size, align 8
  %sub59 = sub nsw i64 %58, %59
  %60 = load i32, i32* %alignment, align 4
  %conv60 = sext i32 %60 to i64
  %cmp61 = icmp sge i64 %sub59, %conv60
  br i1 %cmp61, label %if.then.63, label %if.end.89

if.then.63:                                       ; preds = %if.then.54
  %call64 = call i8* @ggc_alloc(i64 88)
  %61 = bitcast i8* %call64 to %struct.temp_slot*
  store %struct.temp_slot* %61, %struct.temp_slot** %p, align 8
  %62 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %addr_taken = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %62, i32 0, i32 8
  store i8 0, i8* %addr_taken, align 1
  %63 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use65 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %63, i32 0, i32 7
  store i8 0, i8* %in_use65, align 1
  %64 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %size66 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %64, i32 0, i32 4
  %65 = load i64, i64* %size66, align 8
  %66 = load i64, i64* %rounded_size, align 8
  %sub67 = sub nsw i64 %65, %66
  %67 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %size68 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %67, i32 0, i32 4
  store i64 %sub67, i64* %size68, align 8
  %68 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %base_offset = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %68, i32 0, i32 11
  %69 = load i64, i64* %base_offset, align 8
  %70 = load i64, i64* %rounded_size, align 8
  %add69 = add nsw i64 %69, %70
  %71 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %base_offset70 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %71, i32 0, i32 11
  store i64 %add69, i64* %base_offset70, align 8
  %72 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %full_size = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %72, i32 0, i32 12
  %73 = load i64, i64* %full_size, align 8
  %74 = load i64, i64* %rounded_size, align 8
  %sub71 = sub nsw i64 %73, %74
  %75 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %full_size72 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %75, i32 0, i32 12
  store i64 %sub71, i64* %full_size72, align 8
  %76 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %slot73 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %76, i32 0, i32 1
  %77 = load %struct.rtx_def*, %struct.rtx_def** %slot73, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %79 = load i64, i64* %rounded_size, align 8
  %call74 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %78, i64 %79)
  %call75 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call74)
  %80 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %slot76 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %80, i32 0, i32 1
  store %struct.rtx_def* %call75, %struct.rtx_def** %slot76, align 8
  %81 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %align77 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %81, i32 0, i32 3
  %82 = load i32, i32* %align77, align 4
  %83 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %align78 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %83, i32 0, i32 3
  store i32 %82, i32* %align78, align 4
  %84 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %84, i32 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %address, align 8
  %85 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %rtl_expr = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %85, i32 0, i32 6
  store %union.tree_node* null, %union.tree_node** %rtl_expr, align 8
  %86 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %type79 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %86, i32 0, i32 5
  %87 = load %union.tree_node*, %union.tree_node** %type79, align 8
  %88 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %type80 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %88, i32 0, i32 5
  store %union.tree_node* %87, %union.tree_node** %type80, align 8
  %89 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots81 = getelementptr inbounds %struct.function, %struct.function* %89, i32 0, i32 39
  %90 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots81, align 8
  %91 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next82 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %91, i32 0, i32 0
  store %struct.temp_slot* %90, %struct.temp_slot** %next82, align 8
  %92 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %93 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots83 = getelementptr inbounds %struct.function, %struct.function* %93, i32 0, i32 39
  store %struct.temp_slot* %92, %struct.temp_slot** %x_temp_slots83, align 8
  %94 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %slot84 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %94, i32 0, i32 1
  %95 = load %struct.rtx_def*, %struct.rtx_def** %slot84, align 8
  %96 = load %struct.function*, %struct.function** @cfun, align 8
  %x_stack_slot_list = getelementptr inbounds %struct.function, %struct.function* %96, i32 0, i32 26
  %97 = load %struct.rtx_def*, %struct.rtx_def** %x_stack_slot_list, align 8
  %call85 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %95, %struct.rtx_def* %97)
  %98 = load %struct.function*, %struct.function** @cfun, align 8
  %x_stack_slot_list86 = getelementptr inbounds %struct.function, %struct.function* %98, i32 0, i32 26
  store %struct.rtx_def* %call85, %struct.rtx_def** %x_stack_slot_list86, align 8
  %99 = load i64, i64* %rounded_size, align 8
  %100 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %size87 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %100, i32 0, i32 4
  store i64 %99, i64* %size87, align 8
  %101 = load i64, i64* %rounded_size, align 8
  %102 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  %full_size88 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %102, i32 0, i32 12
  store i64 %101, i64* %full_size88, align 8
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.63, %if.then.54
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.then.48
  %103 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8
  store %struct.temp_slot* %103, %struct.temp_slot** %p, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %for.end
  %104 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %cmp92 = icmp eq %struct.temp_slot* %104, null
  br i1 %cmp92, label %if.then.94, label %if.end.129

if.then.94:                                       ; preds = %if.end.91
  %105 = load %struct.function*, %struct.function** @cfun, align 8
  %x_frame_offset = getelementptr inbounds %struct.function, %struct.function* %105, i32 0, i32 32
  %106 = load i64, i64* %x_frame_offset, align 8
  store i64 %106, i64* %frame_offset_old, align 8
  %call95 = call i8* @ggc_alloc(i64 88)
  %107 = bitcast i8* %call95 to %struct.temp_slot*
  store %struct.temp_slot* %107, %struct.temp_slot** %p, align 8
  %108 = load i32, i32* %mode.addr, align 4
  %cmp96 = icmp eq i32 %108, 51
  br i1 %cmp96, label %land.lhs.true.98, label %if.end.102

land.lhs.true.98:                                 ; preds = %if.then.94
  %109 = load i32, i32* %align, align 4
  %cmp99 = icmp ult i32 %109, 128
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %land.lhs.true.98
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 759, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.assign_stack_temp_for_type, i32 0, i32 0)) #6
  unreachable

if.end.102:                                       ; preds = %land.lhs.true.98, %if.then.94
  %110 = load i32, i32* %mode.addr, align 4
  %111 = load i32, i32* %mode.addr, align 4
  %cmp103 = icmp eq i32 %111, 51
  br i1 %cmp103, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.102
  %112 = load i64, i64* %size.addr, align 8
  %113 = load i32, i32* %align, align 4
  %div105 = udiv i32 %113, 8
  %conv106 = zext i32 %div105 to i64
  %add107 = add nsw i64 %112, %conv106
  %sub108 = sub nsw i64 %add107, 1
  %114 = load i32, i32* %align, align 4
  %div109 = udiv i32 %114, 8
  %sub110 = sub i32 %div109, 1
  %neg111 = xor i32 %sub110, -1
  %conv112 = zext i32 %neg111 to i64
  %and113 = and i64 %sub108, %conv112
  br label %cond.end

cond.false:                                       ; preds = %if.end.102
  %115 = load i64, i64* %size.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %and113, %cond.true ], [ %115, %cond.false ]
  %116 = load i32, i32* %align, align 4
  %call114 = call %struct.rtx_def* @assign_stack_local(i32 %110, i64 %cond, i32 %116)
  %117 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %slot115 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %117, i32 0, i32 1
  store %struct.rtx_def* %call114, %struct.rtx_def** %slot115, align 8
  %118 = load i32, i32* %align, align 4
  %119 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %align116 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %119, i32 0, i32 3
  store i32 %118, i32* %align116, align 4
  %120 = load i64, i64* %frame_offset_old, align 8
  %121 = load %struct.function*, %struct.function** @cfun, align 8
  %x_frame_offset117 = getelementptr inbounds %struct.function, %struct.function* %121, i32 0, i32 32
  %122 = load i64, i64* %x_frame_offset117, align 8
  %sub118 = sub nsw i64 %120, %122
  %123 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %size119 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %123, i32 0, i32 4
  store i64 %sub118, i64* %size119, align 8
  %124 = load %struct.function*, %struct.function** @cfun, align 8
  %x_frame_offset120 = getelementptr inbounds %struct.function, %struct.function* %124, i32 0, i32 32
  %125 = load i64, i64* %x_frame_offset120, align 8
  %126 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %base_offset121 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %126, i32 0, i32 11
  store i64 %125, i64* %base_offset121, align 8
  %127 = load i64, i64* %frame_offset_old, align 8
  %128 = load %struct.function*, %struct.function** @cfun, align 8
  %x_frame_offset122 = getelementptr inbounds %struct.function, %struct.function* %128, i32 0, i32 32
  %129 = load i64, i64* %x_frame_offset122, align 8
  %sub123 = sub nsw i64 %127, %129
  %130 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %full_size124 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %130, i32 0, i32 12
  store i64 %sub123, i64* %full_size124, align 8
  %131 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address125 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %131, i32 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %address125, align 8
  %132 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots126 = getelementptr inbounds %struct.function, %struct.function* %132, i32 0, i32 39
  %133 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots126, align 8
  %134 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next127 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %134, i32 0, i32 0
  store %struct.temp_slot* %133, %struct.temp_slot** %next127, align 8
  %135 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %136 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots128 = getelementptr inbounds %struct.function, %struct.function* %136, i32 0, i32 39
  store %struct.temp_slot* %135, %struct.temp_slot** %x_temp_slots128, align 8
  br label %if.end.129

if.end.129:                                       ; preds = %cond.end, %if.end.91
  %137 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use130 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %137, i32 0, i32 7
  store i8 1, i8* %in_use130, align 1
  %138 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %addr_taken131 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %138, i32 0, i32 8
  store i8 0, i8* %addr_taken131, align 1
  %139 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %139, i32 0, i32 3
  %140 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %sequence_rtl_expr = getelementptr inbounds %struct.emit_status, %struct.emit_status* %140, i32 0, i32 4
  %141 = load %union.tree_node*, %union.tree_node** %sequence_rtl_expr, align 8
  %142 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %rtl_expr132 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %142, i32 0, i32 6
  store %union.tree_node* %141, %union.tree_node** %rtl_expr132, align 8
  %143 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %144 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %type133 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %144, i32 0, i32 5
  store %union.tree_node* %143, %union.tree_node** %type133, align 8
  %145 = load i32, i32* %keep.addr, align 4
  %cmp134 = icmp eq i32 %145, 2
  br i1 %cmp134, label %if.then.136, label %if.else.138

if.then.136:                                      ; preds = %if.end.129
  %146 = load %struct.function*, %struct.function** @cfun, align 8
  %x_target_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %146, i32 0, i32 42
  %147 = load i32, i32* %x_target_temp_slot_level, align 4
  %148 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %148, i32 0, i32 9
  store i32 %147, i32* %level, align 4
  %149 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %keep137 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %149, i32 0, i32 10
  store i32 0, i32* %keep137, align 4
  br label %if.end.148

if.else.138:                                      ; preds = %if.end.129
  %150 = load i32, i32* %keep.addr, align 4
  %cmp139 = icmp eq i32 %150, 3
  br i1 %cmp139, label %if.then.141, label %if.else.144

if.then.141:                                      ; preds = %if.else.138
  %151 = load %struct.function*, %struct.function** @cfun, align 8
  %x_var_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %151, i32 0, i32 41
  %152 = load i32, i32* %x_var_temp_slot_level, align 4
  %153 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level142 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %153, i32 0, i32 9
  store i32 %152, i32* %level142, align 4
  %154 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %keep143 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %154, i32 0, i32 10
  store i32 0, i32* %keep143, align 4
  br label %if.end.147

if.else.144:                                      ; preds = %if.else.138
  %155 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %155, i32 0, i32 40
  %156 = load i32, i32* %x_temp_slot_level, align 4
  %157 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level145 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %157, i32 0, i32 9
  store i32 %156, i32* %level145, align 4
  %158 = load i32, i32* %keep.addr, align 4
  %159 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %keep146 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %159, i32 0, i32 10
  store i32 %158, i32* %keep146, align 4
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.144, %if.then.141
  br label %if.end.148

if.end.148:                                       ; preds = %if.end.147, %if.then.136
  %160 = load i32, i32* %mode.addr, align 4
  %161 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %slot149 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %161, i32 0, i32 1
  %162 = load %struct.rtx_def*, %struct.rtx_def** %slot149, align 8
  %fld150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i32 0, i64 0
  %rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**
  %163 = load %struct.rtx_def*, %struct.rtx_def** %rtx152, align 8
  %call153 = call %struct.rtx_def* @gen_rtx_MEM(i32 %160, %struct.rtx_def* %163)
  store %struct.rtx_def* %call153, %struct.rtx_def** %slot, align 8
  %164 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %165 = load %struct.function*, %struct.function** @cfun, align 8
  %x_stack_slot_list154 = getelementptr inbounds %struct.function, %struct.function* %165, i32 0, i32 26
  %166 = load %struct.rtx_def*, %struct.rtx_def** %x_stack_slot_list154, align 8
  %call155 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %164, %struct.rtx_def* %166)
  %167 = load %struct.function*, %struct.function** @cfun, align 8
  %x_stack_slot_list156 = getelementptr inbounds %struct.function, %struct.function* %167, i32 0, i32 26
  store %struct.rtx_def* %call155, %struct.rtx_def** %x_stack_slot_list156, align 8
  %168 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %169 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool157 = icmp ne %union.tree_node* %169, null
  br i1 %tobool157, label %cond.true.158, label %cond.false.160

cond.true.158:                                    ; preds = %if.end.148
  %170 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call159 = call i64 @get_alias_set(%union.tree_node* %170)
  br label %cond.end.161

cond.false.160:                                   ; preds = %if.end.148
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.false.160, %cond.true.158
  %cond162 = phi i64 [ %call159, %cond.true.158 ], [ 0, %cond.false.160 ]
  call void @set_mem_alias_set(%struct.rtx_def* %168, i64 %cond162)
  %171 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %172 = load i32, i32* %align, align 4
  call void @set_mem_align(%struct.rtx_def* %171, i32 %172)
  %173 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %cmp163 = icmp ne %union.tree_node* %173, null
  br i1 %cmp163, label %if.then.165, label %if.end.226

if.then.165:                                      ; preds = %cond.end.161
  %174 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %174 to %struct.tree_common*
  %readonly_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load166 = load i32, i32* %readonly_flag, align 8
  %bf.lshr167 = lshr i32 %bf.load166, 12
  %bf.clear168 = and i32 %bf.lshr167, 1
  %175 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load169 = load i32, i32* %176, align 8
  %bf.value = and i32 %bf.clear168, 1
  %bf.shl = shl i32 %bf.value, 26
  %bf.clear170 = and i32 %bf.load169, -67108865
  %bf.set = or i32 %bf.clear170, %bf.shl
  store i32 %bf.set, i32* %176, align 8
  %177 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common171 = bitcast %union.tree_node* %177 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 2
  %bf.load172 = load i32, i32* %volatile_flag, align 8
  %bf.lshr173 = lshr i32 %bf.load172, 11
  %bf.clear174 = and i32 %bf.lshr173, 1
  %178 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %179 = bitcast %struct.rtx_def* %178 to i32*
  %bf.load175 = load i32, i32* %179, align 8
  %bf.value176 = and i32 %bf.clear174, 1
  %bf.shl177 = shl i32 %bf.value176, 27
  %bf.clear178 = and i32 %bf.load175, -134217729
  %bf.set179 = or i32 %bf.clear178, %bf.shl177
  store i32 %bf.set179, i32* %179, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.165
  %180 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common180 = bitcast %union.tree_node* %180 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common180, i32 0, i32 2
  %bf.load181 = load i32, i32* %code, align 8
  %bf.clear182 = and i32 %bf.load181, 255
  %cmp183 = icmp eq i32 %bf.clear182, 18
  br i1 %cmp183, label %if.then.213, label %lor.lhs.false.185

lor.lhs.false.185:                                ; preds = %do.body
  %181 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common186 = bitcast %union.tree_node* %181 to %struct.tree_common*
  %code187 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common186, i32 0, i32 2
  %bf.load188 = load i32, i32* %code187, align 8
  %bf.clear189 = and i32 %bf.load188, 255
  %cmp190 = icmp eq i32 %bf.clear189, 20
  br i1 %cmp190, label %if.then.213, label %lor.lhs.false.192

lor.lhs.false.192:                                ; preds = %lor.lhs.false.185
  %182 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common193 = bitcast %union.tree_node* %182 to %struct.tree_common*
  %code194 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common193, i32 0, i32 2
  %bf.load195 = load i32, i32* %code194, align 8
  %bf.clear196 = and i32 %bf.load195, 255
  %cmp197 = icmp eq i32 %bf.clear196, 21
  br i1 %cmp197, label %if.then.213, label %lor.lhs.false.199

lor.lhs.false.199:                                ; preds = %lor.lhs.false.192
  %183 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common200 = bitcast %union.tree_node* %183 to %struct.tree_common*
  %code201 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common200, i32 0, i32 2
  %bf.load202 = load i32, i32* %code201, align 8
  %bf.clear203 = and i32 %bf.load202, 255
  %cmp204 = icmp eq i32 %bf.clear203, 22
  br i1 %cmp204, label %if.then.213, label %lor.lhs.false.206

lor.lhs.false.206:                                ; preds = %lor.lhs.false.199
  %184 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common207 = bitcast %union.tree_node* %184 to %struct.tree_common*
  %code208 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common207, i32 0, i32 2
  %bf.load209 = load i32, i32* %code208, align 8
  %bf.clear210 = and i32 %bf.load209, 255
  %cmp211 = icmp eq i32 %bf.clear210, 19
  br i1 %cmp211, label %if.then.213, label %if.else.219

if.then.213:                                      ; preds = %lor.lhs.false.206, %lor.lhs.false.199, %lor.lhs.false.192, %lor.lhs.false.185, %do.body
  %185 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %186 = bitcast %struct.rtx_def* %185 to i32*
  %bf.load214 = load i32, i32* %186, align 8
  %bf.clear215 = and i32 %bf.load214, -268435457
  %bf.set216 = or i32 %bf.clear215, 268435456
  store i32 %bf.set216, i32* %186, align 8
  %187 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %bf.load217 = load i32, i32* %188, align 8
  %bf.clear218 = and i32 %bf.load217, 2147483647
  store i32 %bf.clear218, i32* %188, align 8
  br label %if.end.225

if.else.219:                                      ; preds = %lor.lhs.false.206
  %189 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %190 = bitcast %struct.rtx_def* %189 to i32*
  %bf.load220 = load i32, i32* %190, align 8
  %bf.clear221 = and i32 %bf.load220, -268435457
  store i32 %bf.clear221, i32* %190, align 8
  %191 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %192 = bitcast %struct.rtx_def* %191 to i32*
  %bf.load222 = load i32, i32* %192, align 8
  %bf.clear223 = and i32 %bf.load222, 2147483647
  %bf.set224 = or i32 %bf.clear223, -2147483648
  store i32 %bf.set224, i32* %192, align 8
  br label %if.end.225

if.end.225:                                       ; preds = %if.else.219, %if.then.213
  br label %do.end

do.end:                                           ; preds = %if.end.225
  br label %if.end.226

if.end.226:                                       ; preds = %do.end, %cond.end.161
  %193 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  ret %struct.rtx_def* %193
}

declare i32 @get_mode_alignment(i32) #2

declare %union.tree_node* @type_for_mode(i32, i32) #2

declare i32 @ix86_local_alignment(%union.tree_node*, i32) #2

declare i32 @objects_must_conflict_p(%union.tree_node*, %union.tree_node*) #2

declare i8* @ggc_alloc(i64) #2

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #2

declare void @set_mem_alias_set(%struct.rtx_def*, i64) #2

declare i64 @get_alias_set(%union.tree_node*) #2

declare void @set_mem_align(%struct.rtx_def*, i32) #2

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @assign_stack_temp(i32 %mode, i64 %size, i32 %keep) #0 {
entry:
  %mode.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %keep.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i64 %size, i64* %size.addr, align 8
  store i32 %keep, i32* %keep.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %1 = load i64, i64* %size.addr, align 8
  %2 = load i32, i32* %keep.addr, align 4
  %call = call %struct.rtx_def* @assign_stack_temp_for_type(i32 %0, i64 %1, i32 %2, %union.tree_node* null)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @assign_temp(%union.tree_node* %type_or_decl, i32 %keep, i32 %memory_required, i32 %dont_promote) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %type_or_decl.addr = alloca %union.tree_node*, align 8
  %keep.addr = alloca i32, align 4
  %memory_required.addr = alloca i32, align 4
  %dont_promote.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %size = alloca i64, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %type_or_decl, %union.tree_node** %type_or_decl.addr, align 8
  store i32 %keep, i32* %keep.addr, align 4
  store i32 %memory_required, i32* %memory_required.addr, align 4
  store i32 %dont_promote, i32* %dont_promote.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %type_or_decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 100
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type_or_decl.addr, align 8
  store %union.tree_node* %2, %union.tree_node** %decl, align 8
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8
  store %union.tree_node* %4, %union.tree_node** %type, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %decl, align 8
  %5 = load %union.tree_node*, %union.tree_node** %type_or_decl.addr, align 8
  store %union.tree_node* %5, %union.tree_node** %type, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type4 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %mode5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 6
  %bf.load6 = load i32, i32* %mode5, align 4
  %bf.lshr = lshr i32 %bf.load6, 9
  %bf.clear7 = and i32 %bf.lshr, 127
  store i32 %bf.clear7, i32* %mode, align 4
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common8 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2
  %bf.load9 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 13
  %bf.clear11 = and i32 %bf.lshr10, 1
  store i32 %bf.clear11, i32* %unsignedp, align 4
  %8 = load i32, i32* %mode, align 4
  %cmp12 = icmp eq i32 %8, 51
  br i1 %cmp12, label %if.then.14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %9 = load i32, i32* %memory_required.addr, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then.14, label %if.end.56

if.then.14:                                       ; preds = %lor.lhs.false, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %10)
  store i64 %call, i64* %size, align 8
  %11 = load i64, i64* %size, align 8
  %cmp15 = icmp eq i64 %11, 0
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.then.14
  store i64 1, i64* %size, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.then.14
  %12 = load i64, i64* %size, align 8
  %cmp19 = icmp eq i64 %12, -1
  br i1 %cmp19, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %if.end.18
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common21 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %code22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2
  %bf.load23 = load i32, i32* %code22, align 8
  %bf.clear24 = and i32 %bf.load23, 255
  %cmp25 = icmp eq i32 %bf.clear24, 18
  br i1 %cmp25, label %land.lhs.true.27, label %if.end.40

land.lhs.true.27:                                 ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type28 = bitcast %union.tree_node* %14 to %struct.tree_type*
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 13
  %15 = load %union.tree_node*, %union.tree_node** %maxval, align 8
  %cmp29 = icmp ne %union.tree_node* %15, null
  br i1 %cmp29, label %land.lhs.true.31, label %if.end.40

land.lhs.true.31:                                 ; preds = %land.lhs.true.27
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type32 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %maxval33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 13
  %17 = load %union.tree_node*, %union.tree_node** %maxval33, align 8
  %call34 = call i32 @host_integerp(%union.tree_node* %17, i32 1)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.then.36, label %if.end.40

if.then.36:                                       ; preds = %land.lhs.true.31
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type37 = bitcast %union.tree_node* %18 to %struct.tree_type*
  %maxval38 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type37, i32 0, i32 13
  %19 = load %union.tree_node*, %union.tree_node** %maxval38, align 8
  %call39 = call i64 @tree_low_cst(%union.tree_node* %19, i32 1)
  store i64 %call39, i64* %size, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.36, %land.lhs.true.31, %land.lhs.true.27, %land.lhs.true, %if.end.18
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool41 = icmp ne %union.tree_node* %20, null
  br i1 %tobool41, label %land.lhs.true.42, label %if.end.54

land.lhs.true.42:                                 ; preds = %if.end.40
  %21 = load i64, i64* %size, align 8
  %cmp43 = icmp eq i64 %21, -1
  br i1 %cmp43, label %land.lhs.true.45, label %if.end.54

land.lhs.true.45:                                 ; preds = %land.lhs.true.42
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type46 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type46, i32 0, i32 3
  %23 = load %union.tree_node*, %union.tree_node** %size_unit, align 8
  %common47 = bitcast %union.tree_node* %23 to %struct.tree_common*
  %code48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2
  %bf.load49 = load i32, i32* %code48, align 8
  %bf.clear50 = and i32 %bf.load49, 255
  %cmp51 = icmp eq i32 %bf.clear50, 25
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %land.lhs.true.45
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void (%union.tree_node*, i8*, ...) @error_with_decl(%union.tree_node* %24, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0))
  store i64 1, i64* %size, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.53, %land.lhs.true.45, %land.lhs.true.42, %if.end.40
  %25 = load i32, i32* %mode, align 4
  %26 = load i64, i64* %size, align 8
  %27 = load i32, i32* %keep.addr, align 4
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call55 = call %struct.rtx_def* @assign_stack_temp_for_type(i32 %25, i64 %26, i32 %27, %union.tree_node* %28)
  store %struct.rtx_def* %call55, %struct.rtx_def** %tmp, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %retval
  br label %return

if.end.56:                                        ; preds = %lor.lhs.false
  %30 = load i32, i32* %dont_promote.addr, align 4
  %tobool57 = icmp ne i32 %30, 0
  br i1 %tobool57, label %if.end.60, label %if.then.58

if.then.58:                                       ; preds = %if.end.56
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8
  %32 = load i32, i32* %mode, align 4
  %call59 = call i32 @promote_mode(%union.tree_node* %31, i32 %32, i32* %unsignedp, i32 0)
  store i32 %call59, i32* %mode, align 4
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.58, %if.end.56
  %33 = load i32, i32* %mode, align 4
  %call61 = call %struct.rtx_def* @gen_reg_rtx(i32 %33)
  store %struct.rtx_def* %call61, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.60, %if.end.54
  %34 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %34
}

declare i64 @int_size_in_bytes(%union.tree_node*) #2

declare i32 @host_integerp(%union.tree_node*, i32) #2

declare i64 @tree_low_cst(%union.tree_node*, i32) #2

declare void @error_with_decl(%union.tree_node*, i8*, ...) #2

declare i32 @promote_mode(%union.tree_node*, i32, i32*, i32) #2

declare %struct.rtx_def* @gen_reg_rtx(i32) #2

; Function Attrs: nounwind uwtable
define void @combine_temp_slots() #0 {
entry:
  %p = alloca %struct.temp_slot*, align 8
  %q = alloca %struct.temp_slot*, align 8
  %prev_p = alloca %struct.temp_slot*, align 8
  %prev_q = alloca %struct.temp_slot*, align 8
  %num_slots = alloca i32, align 4
  %delete_p = alloca i32, align 4
  %delete_q = alloca i32, align 4
  %0 = load i32, i32* @flag_strict_aliasing, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end.79

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @flag_expensive_optimizations, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %if.end.8, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 39
  %3 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %3, %struct.temp_slot** %p, align 8
  store i32 0, i32* %num_slots, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2
  %4 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool3 = icmp ne %struct.temp_slot* %4, null
  br i1 %tobool3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %num_slots, align 4
  %cmp = icmp sgt i32 %5, 100
  br i1 %cmp, label %if.then.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %6 = load i32, i32* %num_slots, align 4
  %cmp4 = icmp sgt i32 %6, 10
  br i1 %cmp4, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load i32, i32* @optimize, align 4
  %cmp5 = icmp eq i32 %7, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %land.lhs.true, %for.body
  br label %for.end.79

if.end.7:                                         ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end.7
  %8 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %8, i32 0, i32 0
  %9 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8
  store %struct.temp_slot* %9, %struct.temp_slot** %p, align 8
  %10 = load i32, i32* %num_slots, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %num_slots, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.8

if.end.8:                                         ; preds = %for.end, %if.end
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots9 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 39
  %12 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots9, align 8
  store %struct.temp_slot* %12, %struct.temp_slot** %p, align 8
  store %struct.temp_slot* null, %struct.temp_slot** %prev_p, align 8
  br label %for.cond.10

for.cond.10:                                      ; preds = %cond.end, %if.end.8
  %13 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool11 = icmp ne %struct.temp_slot* %13, null
  br i1 %tobool11, label %for.body.12, label %for.end.79

for.body.12:                                      ; preds = %for.cond.10
  store i32 0, i32* %delete_p, align 4
  %14 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %14, i32 0, i32 7
  %15 = load i8, i8* %in_use, align 1
  %tobool13 = icmp ne i8 %15, 0
  br i1 %tobool13, label %if.end.62, label %land.lhs.true.14

land.lhs.true.14:                                 ; preds = %for.body.12
  %16 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %slot = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %16, i32 0, i32 1
  %17 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load = load i32, i32* %18, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp15 = icmp eq i32 %bf.clear, 51
  br i1 %cmp15, label %if.then.16, label %if.end.62

if.then.16:                                       ; preds = %land.lhs.true.14
  %19 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next17 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %19, i32 0, i32 0
  %20 = load %struct.temp_slot*, %struct.temp_slot** %next17, align 8
  store %struct.temp_slot* %20, %struct.temp_slot** %q, align 8
  %21 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  store %struct.temp_slot* %21, %struct.temp_slot** %prev_q, align 8
  br label %for.cond.18

for.cond.18:                                      ; preds = %for.inc.59, %if.then.16
  %22 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %tobool19 = icmp ne %struct.temp_slot* %22, null
  br i1 %tobool19, label %for.body.20, label %for.end.61

for.body.20:                                      ; preds = %for.cond.18
  store i32 0, i32* %delete_q, align 4
  %23 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %in_use21 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %23, i32 0, i32 7
  %24 = load i8, i8* %in_use21, align 1
  %tobool22 = icmp ne i8 %24, 0
  br i1 %tobool22, label %if.end.52, label %land.lhs.true.23

land.lhs.true.23:                                 ; preds = %for.body.20
  %25 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %slot24 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %25, i32 0, i32 1
  %26 = load %struct.rtx_def*, %struct.rtx_def** %slot24, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load25 = load i32, i32* %27, align 8
  %bf.lshr26 = lshr i32 %bf.load25, 16
  %bf.clear27 = and i32 %bf.lshr26, 255
  %cmp28 = icmp eq i32 %bf.clear27, 51
  br i1 %cmp28, label %if.then.29, label %if.end.52

if.then.29:                                       ; preds = %land.lhs.true.23
  %28 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %base_offset = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %28, i32 0, i32 11
  %29 = load i64, i64* %base_offset, align 8
  %30 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %full_size = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %30, i32 0, i32 12
  %31 = load i64, i64* %full_size, align 8
  %add = add nsw i64 %29, %31
  %32 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %base_offset30 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %32, i32 0, i32 11
  %33 = load i64, i64* %base_offset30, align 8
  %cmp31 = icmp eq i64 %add, %33
  br i1 %cmp31, label %if.then.32, label %if.else

if.then.32:                                       ; preds = %if.then.29
  %34 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %size = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %34, i32 0, i32 4
  %35 = load i64, i64* %size, align 8
  %36 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %size33 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %36, i32 0, i32 4
  %37 = load i64, i64* %size33, align 8
  %add34 = add nsw i64 %37, %35
  store i64 %add34, i64* %size33, align 8
  %38 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %full_size35 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %38, i32 0, i32 12
  %39 = load i64, i64* %full_size35, align 8
  %40 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %full_size36 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %40, i32 0, i32 12
  %41 = load i64, i64* %full_size36, align 8
  %add37 = add nsw i64 %41, %39
  store i64 %add37, i64* %full_size36, align 8
  store i32 1, i32* %delete_q, align 4
  br label %if.end.51

if.else:                                          ; preds = %if.then.29
  %42 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %base_offset38 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %42, i32 0, i32 11
  %43 = load i64, i64* %base_offset38, align 8
  %44 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %full_size39 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %44, i32 0, i32 12
  %45 = load i64, i64* %full_size39, align 8
  %add40 = add nsw i64 %43, %45
  %46 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %base_offset41 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %46, i32 0, i32 11
  %47 = load i64, i64* %base_offset41, align 8
  %cmp42 = icmp eq i64 %add40, %47
  br i1 %cmp42, label %if.then.43, label %if.end.50

if.then.43:                                       ; preds = %if.else
  %48 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %size44 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %48, i32 0, i32 4
  %49 = load i64, i64* %size44, align 8
  %50 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %size45 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %50, i32 0, i32 4
  %51 = load i64, i64* %size45, align 8
  %add46 = add nsw i64 %51, %49
  store i64 %add46, i64* %size45, align 8
  %52 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %full_size47 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %52, i32 0, i32 12
  %53 = load i64, i64* %full_size47, align 8
  %54 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %full_size48 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %54, i32 0, i32 12
  %55 = load i64, i64* %full_size48, align 8
  %add49 = add nsw i64 %55, %53
  store i64 %add49, i64* %full_size48, align 8
  store i32 1, i32* %delete_p, align 4
  br label %for.end.61

if.end.50:                                        ; preds = %if.else
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.32
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %land.lhs.true.23, %for.body.20
  %56 = load i32, i32* %delete_q, align 4
  %tobool53 = icmp ne i32 %56, 0
  br i1 %tobool53, label %if.then.54, label %if.else.57

if.then.54:                                       ; preds = %if.end.52
  %57 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %next55 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %57, i32 0, i32 0
  %58 = load %struct.temp_slot*, %struct.temp_slot** %next55, align 8
  %59 = load %struct.temp_slot*, %struct.temp_slot** %prev_q, align 8
  %next56 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %59, i32 0, i32 0
  store %struct.temp_slot* %58, %struct.temp_slot** %next56, align 8
  br label %if.end.58

if.else.57:                                       ; preds = %if.end.52
  %60 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  store %struct.temp_slot* %60, %struct.temp_slot** %prev_q, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.57, %if.then.54
  br label %for.inc.59

for.inc.59:                                       ; preds = %if.end.58
  %61 = load %struct.temp_slot*, %struct.temp_slot** %prev_q, align 8
  %next60 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %61, i32 0, i32 0
  %62 = load %struct.temp_slot*, %struct.temp_slot** %next60, align 8
  store %struct.temp_slot* %62, %struct.temp_slot** %q, align 8
  br label %for.cond.18

for.end.61:                                       ; preds = %if.then.43, %for.cond.18
  br label %if.end.62

if.end.62:                                        ; preds = %for.end.61, %land.lhs.true.14, %for.body.12
  %63 = load i32, i32* %delete_p, align 4
  %tobool63 = icmp ne i32 %63, 0
  br i1 %tobool63, label %if.then.64, label %if.else.73

if.then.64:                                       ; preds = %if.end.62
  %64 = load %struct.temp_slot*, %struct.temp_slot** %prev_p, align 8
  %tobool65 = icmp ne %struct.temp_slot* %64, null
  br i1 %tobool65, label %if.then.66, label %if.else.69

if.then.66:                                       ; preds = %if.then.64
  %65 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next67 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %65, i32 0, i32 0
  %66 = load %struct.temp_slot*, %struct.temp_slot** %next67, align 8
  %67 = load %struct.temp_slot*, %struct.temp_slot** %prev_p, align 8
  %next68 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %67, i32 0, i32 0
  store %struct.temp_slot* %66, %struct.temp_slot** %next68, align 8
  br label %if.end.72

if.else.69:                                       ; preds = %if.then.64
  %68 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next70 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %68, i32 0, i32 0
  %69 = load %struct.temp_slot*, %struct.temp_slot** %next70, align 8
  %70 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots71 = getelementptr inbounds %struct.function, %struct.function* %70, i32 0, i32 39
  store %struct.temp_slot* %69, %struct.temp_slot** %x_temp_slots71, align 8
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.66
  br label %if.end.74

if.else.73:                                       ; preds = %if.end.62
  %71 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  store %struct.temp_slot* %71, %struct.temp_slot** %prev_p, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.73, %if.end.72
  br label %for.inc.75

for.inc.75:                                       ; preds = %if.end.74
  %72 = load %struct.temp_slot*, %struct.temp_slot** %prev_p, align 8
  %tobool76 = icmp ne %struct.temp_slot* %72, null
  br i1 %tobool76, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.inc.75
  %73 = load %struct.temp_slot*, %struct.temp_slot** %prev_p, align 8
  %next77 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %73, i32 0, i32 0
  %74 = load %struct.temp_slot*, %struct.temp_slot** %next77, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.inc.75
  %75 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots78 = getelementptr inbounds %struct.function, %struct.function* %75, i32 0, i32 39
  %76 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots78, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.temp_slot* [ %74, %cond.true ], [ %76, %cond.false ]
  store %struct.temp_slot* %cond, %struct.temp_slot** %p, align 8
  br label %for.cond.10

for.end.79:                                       ; preds = %if.then, %if.then.6, %for.cond.10
  ret void
}

; Function Attrs: nounwind uwtable
define void @update_temp_slot_address(%struct.rtx_def* %old, %struct.rtx_def* %new) #0 {
entry:
  %old.addr = alloca %struct.rtx_def*, align 8
  %new.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  store %struct.rtx_def* %old, %struct.rtx_def** %old.addr, align 8
  store %struct.rtx_def* %new, %struct.rtx_def** %new.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %0, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.104

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %call1 = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %2)
  store %struct.temp_slot* %call1, %struct.temp_slot** %p, align 8
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %cmp = icmp eq %struct.temp_slot* %3, null
  br i1 %cmp, label %if.then.2, label %if.else.86

if.then.2:                                        ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp3 = icmp ne i32 %bf.clear, 75
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.2
  br label %if.end.104

if.end.5:                                         ; preds = %if.then.2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load6 = load i32, i32* %7, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 61
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end.5
  %8 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  call void @update_temp_slot_address(%struct.rtx_def* %9, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 1
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx12, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  call void @update_temp_slot_address(%struct.rtx_def* %12, %struct.rtx_def* %13)
  br label %if.end.104

if.else:                                          ; preds = %if.end.5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load13 = load i32, i32* %15, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp ne i32 %bf.clear14, 75
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.else
  br label %if.end.104

if.end.17:                                        ; preds = %if.else
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17
  %16 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  %call25 = call i32 @rtx_equal_p(%struct.rtx_def* %17, %struct.rtx_def* %19)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.then.27, label %if.else.34

if.then.27:                                       ; preds = %if.end.18
  %20 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 1
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 1
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx33, align 8
  call void @update_temp_slot_address(%struct.rtx_def* %21, %struct.rtx_def* %23)
  br label %if.end.85

if.else.34:                                       ; preds = %if.end.18
  %24 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 1
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 0
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx40, align 8
  %call41 = call i32 @rtx_equal_p(%struct.rtx_def* %25, %struct.rtx_def* %27)
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.then.43, label %if.else.50

if.then.43:                                       ; preds = %if.else.34
  %28 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 1
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  call void @update_temp_slot_address(%struct.rtx_def* %29, %struct.rtx_def* %31)
  br label %if.end.84

if.else.50:                                       ; preds = %if.else.34
  %32 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 0
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx53, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 1
  %rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx56, align 8
  %call57 = call i32 @rtx_equal_p(%struct.rtx_def* %33, %struct.rtx_def* %35)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.then.59, label %if.else.66

if.then.59:                                       ; preds = %if.else.50
  %36 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 1
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx62, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 0
  %rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx65, align 8
  call void @update_temp_slot_address(%struct.rtx_def* %37, %struct.rtx_def* %39)
  br label %if.end.83

if.else.66:                                       ; preds = %if.else.50
  %40 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 1
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx69, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 1
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx72, align 8
  %call73 = call i32 @rtx_equal_p(%struct.rtx_def* %41, %struct.rtx_def* %43)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.then.75, label %if.end.82

if.then.75:                                       ; preds = %if.else.66
  %44 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx78, align 8
  %46 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 0
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx81, align 8
  call void @update_temp_slot_address(%struct.rtx_def* %45, %struct.rtx_def* %47)
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.75, %if.else.66
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82, %if.then.59
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.then.43
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.then.27
  br label %if.end.104

if.else.86:                                       ; preds = %if.end
  %48 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %48, i32 0, i32 2
  %49 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8
  %cmp87 = icmp eq %struct.rtx_def* %49, null
  br i1 %cmp87, label %if.then.88, label %if.else.90

if.then.88:                                       ; preds = %if.else.86
  %50 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %51 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address89 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %51, i32 0, i32 2
  store %struct.rtx_def* %50, %struct.rtx_def** %address89, align 8
  br label %if.end.103

if.else.90:                                       ; preds = %if.else.86
  %52 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address91 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %52, i32 0, i32 2
  %53 = load %struct.rtx_def*, %struct.rtx_def** %address91, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load92 = load i32, i32* %54, align 8
  %bf.clear93 = and i32 %bf.load92, 65535
  %cmp94 = icmp ne i32 %bf.clear93, 3
  br i1 %cmp94, label %if.then.95, label %if.end.99

if.then.95:                                       ; preds = %if.else.90
  %55 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address96 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %55, i32 0, i32 2
  %56 = load %struct.rtx_def*, %struct.rtx_def** %address96, align 8
  %call97 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %56, %struct.rtx_def* null)
  %57 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address98 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %57, i32 0, i32 2
  store %struct.rtx_def* %call97, %struct.rtx_def** %address98, align 8
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.95, %if.else.90
  %58 = load %struct.rtx_def*, %struct.rtx_def** %new.addr, align 8
  %59 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address100 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %59, i32 0, i32 2
  %60 = load %struct.rtx_def*, %struct.rtx_def** %address100, align 8
  %call101 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %58, %struct.rtx_def* %60)
  %61 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address102 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %61, i32 0, i32 2
  store %struct.rtx_def* %call101, %struct.rtx_def** %address102, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.99, %if.then.88
  br label %if.end.104

if.end.104:                                       ; preds = %if.then, %if.then.4, %if.then.9, %if.then.16, %if.end.85, %if.end.103
  ret void
}

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %x) #0 {
entry:
  %retval = alloca %struct.temp_slot*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 39
  %1 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %1, %struct.temp_slot** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.57, %entry
  %2 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool = icmp ne %struct.temp_slot* %2, null
  br i1 %tobool, label %for.body, label %for.end.59

for.body:                                         ; preds = %for.cond
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %3, i32 0, i32 7
  %4 = load i8, i8* %in_use, align 1
  %tobool1 = icmp ne i8 %4, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc.57

if.else:                                          ; preds = %for.body
  %5 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %slot = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %5, i32 0, i32 1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp, label %if.then.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %9 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %9, i32 0, i32 2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp2 = icmp eq %struct.rtx_def* %10, %11
  br i1 %cmp2, label %if.then.32, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp4 = icmp eq i32 %bf.clear, 75
  br i1 %cmp4, label %land.lhs.true, label %if.else.33

land.lhs.true:                                    ; preds = %lor.lhs.false.3
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %cmp8 = icmp eq %struct.rtx_def* %15, %16
  br i1 %cmp8, label %land.lhs.true.9, label %if.else.33

land.lhs.true.9:                                  ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 1
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx12, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load13 = load i32, i32* %19, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 54
  br i1 %cmp15, label %land.lhs.true.16, label %if.else.33

land.lhs.true.16:                                 ; preds = %land.lhs.true.9
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx21 to i64*
  %22 = load i64, i64* %rtwint, align 8
  %23 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %base_offset = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %23, i32 0, i32 11
  %24 = load i64, i64* %base_offset, align 8
  %cmp22 = icmp sge i64 %22, %24
  br i1 %cmp22, label %land.lhs.true.23, label %if.else.33

land.lhs.true.23:                                 ; preds = %land.lhs.true.16
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 1
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtwint29 = bitcast %union.rtunion_def* %arrayidx28 to i64*
  %27 = load i64, i64* %rtwint29, align 8
  %28 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %base_offset30 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %28, i32 0, i32 11
  %29 = load i64, i64* %base_offset30, align 8
  %30 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %full_size = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %30, i32 0, i32 12
  %31 = load i64, i64* %full_size, align 8
  %add = add nsw i64 %29, %31
  %cmp31 = icmp slt i64 %27, %add
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %land.lhs.true.23, %lor.lhs.false, %if.else
  %32 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  store %struct.temp_slot* %32, %struct.temp_slot** %retval
  br label %return

if.else.33:                                       ; preds = %land.lhs.true.23, %land.lhs.true.16, %land.lhs.true.9, %land.lhs.true, %lor.lhs.false.3
  %33 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address34 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %33, i32 0, i32 2
  %34 = load %struct.rtx_def*, %struct.rtx_def** %address34, align 8
  %cmp35 = icmp ne %struct.rtx_def* %34, null
  br i1 %cmp35, label %land.lhs.true.36, label %if.end.54

land.lhs.true.36:                                 ; preds = %if.else.33
  %35 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address37 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %35, i32 0, i32 2
  %36 = load %struct.rtx_def*, %struct.rtx_def** %address37, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load38 = load i32, i32* %37, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 3
  br i1 %cmp40, label %if.then.41, label %if.end.54

if.then.41:                                       ; preds = %land.lhs.true.36
  %38 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %address42 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %38, i32 0, i32 2
  %39 = load %struct.rtx_def*, %struct.rtx_def** %address42, align 8
  store %struct.rtx_def* %39, %struct.rtx_def** %next, align 8
  br label %for.cond.43

for.cond.43:                                      ; preds = %for.inc, %if.then.41
  %40 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %tobool44 = icmp ne %struct.rtx_def* %40, null
  br i1 %tobool44, label %for.body.45, label %for.end

for.body.45:                                      ; preds = %for.cond.43
  %41 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %fld46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i32 0, i64 0
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx48, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp49 = icmp eq %struct.rtx_def* %42, %43
  br i1 %cmp49, label %if.then.50, label %if.end

if.then.50:                                       ; preds = %for.body.45
  %44 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  store %struct.temp_slot* %44, %struct.temp_slot** %retval
  br label %return

if.end:                                           ; preds = %for.body.45
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %45 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  %fld51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i32 0, i64 1
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx53, align 8
  store %struct.rtx_def* %46, %struct.rtx_def** %next, align 8
  br label %for.cond.43

for.end:                                          ; preds = %for.cond.43
  br label %if.end.54

if.end.54:                                        ; preds = %for.end, %land.lhs.true.36, %if.else.33
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55
  br label %for.inc.57

for.inc.57:                                       ; preds = %if.end.56, %if.then
  %47 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next58 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %47, i32 0, i32 0
  %48 = load %struct.temp_slot*, %struct.temp_slot** %next58, align 8
  store %struct.temp_slot* %48, %struct.temp_slot** %p, align 8
  br label %for.cond

for.end.59:                                       ; preds = %for.cond
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load60 = load i32, i32* %50, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 75
  br i1 %cmp62, label %land.lhs.true.63, label %if.else.76

land.lhs.true.63:                                 ; preds = %for.end.59
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 0
  %rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx66, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load67 = load i32, i32* %53, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 61
  br i1 %cmp69, label %land.lhs.true.70, label %if.else.76

land.lhs.true.70:                                 ; preds = %land.lhs.true.63
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i32 0, i64 0
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx73, align 8
  %call = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %55)
  store %struct.temp_slot* %call, %struct.temp_slot** %p, align 8
  %cmp74 = icmp ne %struct.temp_slot* %call, null
  br i1 %cmp74, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %land.lhs.true.70
  %56 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  store %struct.temp_slot* %56, %struct.temp_slot** %retval
  br label %return

if.else.76:                                       ; preds = %land.lhs.true.70, %land.lhs.true.63, %for.end.59
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load77 = load i32, i32* %58, align 8
  %bf.clear78 = and i32 %bf.load77, 65535
  %cmp79 = icmp eq i32 %bf.clear78, 75
  br i1 %cmp79, label %land.lhs.true.80, label %if.end.94

land.lhs.true.80:                                 ; preds = %if.else.76
  %59 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i32 0, i64 1
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx83, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load84 = load i32, i32* %61, align 8
  %bf.clear85 = and i32 %bf.load84, 65535
  %cmp86 = icmp eq i32 %bf.clear85, 61
  br i1 %cmp86, label %land.lhs.true.87, label %if.end.94

land.lhs.true.87:                                 ; preds = %land.lhs.true.80
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 1
  %rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx90, align 8
  %call91 = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %63)
  store %struct.temp_slot* %call91, %struct.temp_slot** %p, align 8
  %cmp92 = icmp ne %struct.temp_slot* %call91, null
  br i1 %cmp92, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %land.lhs.true.87
  %64 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  store %struct.temp_slot* %64, %struct.temp_slot** %retval
  br label %return

if.end.94:                                        ; preds = %land.lhs.true.87, %land.lhs.true.80, %if.else.76
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94
  store %struct.temp_slot* null, %struct.temp_slot** %retval
  br label %return

return:                                           ; preds = %if.end.95, %if.then.93, %if.then.75, %if.then.50, %if.then.32
  %65 = load %struct.temp_slot*, %struct.temp_slot** %retval
  ret %struct.temp_slot* %65
}

; Function Attrs: nounwind uwtable
define void @mark_temp_addr_taken(%struct.rtx_def* %x) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.61

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp ne i32 %bf.clear, 66
  br i1 %cmp1, label %if.then.54, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 67
  br i1 %cmp4, label %if.then.54, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx8, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load9 = load i32, i32* %8, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 68
  br i1 %cmp11, label %if.then.54, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.5
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load16 = load i32, i32* %11, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp eq i32 %bf.clear17, 54
  br i1 %cmp18, label %if.then.54, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %lor.lhs.false.12
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 0
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx22, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load23 = load i32, i32* %14, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 55
  br i1 %cmp25, label %if.then.54, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false.19
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load30 = load i32, i32* %17, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 58
  br i1 %cmp32, label %if.then.54, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.26
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 0
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx36, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load37 = load i32, i32* %20, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  %cmp39 = icmp eq i32 %bf.clear38, 134
  br i1 %cmp39, label %if.then.54, label %lor.lhs.false.40

lor.lhs.false.40:                                 ; preds = %lor.lhs.false.33
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx43, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load44 = load i32, i32* %23, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp eq i32 %bf.clear45, 56
  br i1 %cmp46, label %if.then.54, label %lor.lhs.false.47

lor.lhs.false.47:                                 ; preds = %lor.lhs.false.40
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load51 = load i32, i32* %26, align 8
  %bf.clear52 = and i32 %bf.load51, 65535
  %cmp53 = icmp eq i32 %bf.clear52, 140
  br i1 %cmp53, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %lor.lhs.false.47, %lor.lhs.false.40, %lor.lhs.false.33, %lor.lhs.false.26, %lor.lhs.false.19, %lor.lhs.false.12, %lor.lhs.false.5, %lor.lhs.false, %if.end
  br label %if.end.61

if.end.55:                                        ; preds = %lor.lhs.false.47
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i32 0, i64 0
  %rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx58, align 8
  %call = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %28)
  store %struct.temp_slot* %call, %struct.temp_slot** %p, align 8
  %29 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %cmp59 = icmp ne %struct.temp_slot* %29, null
  br i1 %cmp59, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %if.end.55
  %30 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %addr_taken = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %30, i32 0, i32 8
  store i8 1, i8* %addr_taken, align 1
  br label %if.end.61

if.end.61:                                        ; preds = %if.then, %if.then.54, %if.then.60, %if.end.55
  ret void
}

; Function Attrs: nounwind uwtable
define void @preserve_temp_slots(%struct.rtx_def* %x) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  %q = alloca %struct.temp_slot*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.temp_slot* null, %struct.temp_slot** %p, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 39
  %2 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %2, %struct.temp_slot** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool = icmp ne %struct.temp_slot* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %4, i32 0, i32 7
  %5 = load i8, i8* %in_use, align 1
  %conv = sext i8 %5 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %6, i32 0, i32 9
  %7 = load i32, i32* %level, align 4
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 40
  %9 = load i32, i32* %x_temp_slot_level, align 4
  %cmp2 = icmp eq i32 %7, %9
  br i1 %cmp2, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %10 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %addr_taken = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %10, i32 0, i32 8
  %11 = load i8, i8* %addr_taken, align 1
  %conv5 = sext i8 %11 to i32
  %tobool6 = icmp ne i32 %conv5, 0
  br i1 %tobool6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %land.lhs.true.4
  %12 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level8 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %12, i32 0, i32 9
  %13 = load i32, i32* %level8, align 4
  %dec = add nsw i32 %13, -1
  store i32 %dec, i32* %level8, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.7, %land.lhs.true.4, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %14, i32 0, i32 0
  %15 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8
  store %struct.temp_slot* %15, %struct.temp_slot** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.end.172

if.end.9:                                         ; preds = %entry
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load = load i32, i32* %17, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp10 = icmp eq i32 %bf.clear, 61
  br i1 %cmp10, label %land.lhs.true.12, label %if.end.16

land.lhs.true.12:                                 ; preds = %if.end.9
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load13 = load i32, i32* %19, align 8
  %bf.lshr = lshr i32 %bf.load13, 31
  %tobool14 = icmp ne i32 %bf.lshr, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %land.lhs.true.12
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %20)
  store %struct.temp_slot* %call, %struct.temp_slot** %p, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %land.lhs.true.12, %if.end.9
  %21 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %cmp17 = icmp eq %struct.temp_slot* %21, null
  br i1 %cmp17, label %land.lhs.true.19, label %if.end.108

land.lhs.true.19:                                 ; preds = %if.end.16
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load20 = load i32, i32* %23, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp ne i32 %bf.clear21, 66
  br i1 %cmp22, label %if.then.84, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.19
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load24 = load i32, i32* %26, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 67
  br i1 %cmp26, label %if.then.84, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %lor.lhs.false
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  %29 = bitcast %struct.rtx_def* %28 to i32*
  %bf.load32 = load i32, i32* %29, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 68
  br i1 %cmp34, label %if.then.84, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %lor.lhs.false.28
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load40 = load i32, i32* %32, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 54
  br i1 %cmp42, label %if.then.84, label %lor.lhs.false.44

lor.lhs.false.44:                                 ; preds = %lor.lhs.false.36
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load48 = load i32, i32* %35, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 55
  br i1 %cmp50, label %if.then.84, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.44
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 0
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx55, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load56 = load i32, i32* %38, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 58
  br i1 %cmp58, label %if.then.84, label %lor.lhs.false.60

lor.lhs.false.60:                                 ; preds = %lor.lhs.false.52
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 0
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx63, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load64 = load i32, i32* %41, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %cmp66 = icmp eq i32 %bf.clear65, 134
  br i1 %cmp66, label %if.then.84, label %lor.lhs.false.68

lor.lhs.false.68:                                 ; preds = %lor.lhs.false.60
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 0
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx71, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load72 = load i32, i32* %44, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  %cmp74 = icmp eq i32 %bf.clear73, 56
  br i1 %cmp74, label %if.then.84, label %lor.lhs.false.76

lor.lhs.false.76:                                 ; preds = %lor.lhs.false.68
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 0
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx79, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load80 = load i32, i32* %47, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %cmp82 = icmp eq i32 %bf.clear81, 140
  br i1 %cmp82, label %if.then.84, label %if.end.108

if.then.84:                                       ; preds = %lor.lhs.false.76, %lor.lhs.false.68, %lor.lhs.false.60, %lor.lhs.false.52, %lor.lhs.false.44, %lor.lhs.false.36, %lor.lhs.false.28, %lor.lhs.false, %land.lhs.true.19
  %48 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots85 = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 39
  %49 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots85, align 8
  store %struct.temp_slot* %49, %struct.temp_slot** %p, align 8
  br label %for.cond.86

for.cond.86:                                      ; preds = %for.inc.105, %if.then.84
  %50 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool87 = icmp ne %struct.temp_slot* %50, null
  br i1 %tobool87, label %for.body.88, label %for.end.107

for.body.88:                                      ; preds = %for.cond.86
  %51 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use89 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %51, i32 0, i32 7
  %52 = load i8, i8* %in_use89, align 1
  %conv90 = sext i8 %52 to i32
  %tobool91 = icmp ne i32 %conv90, 0
  br i1 %tobool91, label %land.lhs.true.92, label %if.end.104

land.lhs.true.92:                                 ; preds = %for.body.88
  %53 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level93 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %53, i32 0, i32 9
  %54 = load i32, i32* %level93, align 4
  %55 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level94 = getelementptr inbounds %struct.function, %struct.function* %55, i32 0, i32 40
  %56 = load i32, i32* %x_temp_slot_level94, align 4
  %cmp95 = icmp eq i32 %54, %56
  br i1 %cmp95, label %land.lhs.true.97, label %if.end.104

land.lhs.true.97:                                 ; preds = %land.lhs.true.92
  %57 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %addr_taken98 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %57, i32 0, i32 8
  %58 = load i8, i8* %addr_taken98, align 1
  %conv99 = sext i8 %58 to i32
  %tobool100 = icmp ne i32 %conv99, 0
  br i1 %tobool100, label %if.then.101, label %if.end.104

if.then.101:                                      ; preds = %land.lhs.true.97
  %59 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level102 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %59, i32 0, i32 9
  %60 = load i32, i32* %level102, align 4
  %dec103 = add nsw i32 %60, -1
  store i32 %dec103, i32* %level102, align 4
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.101, %land.lhs.true.97, %land.lhs.true.92, %for.body.88
  br label %for.inc.105

for.inc.105:                                      ; preds = %if.end.104
  %61 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next106 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %61, i32 0, i32 0
  %62 = load %struct.temp_slot*, %struct.temp_slot** %next106, align 8
  store %struct.temp_slot* %62, %struct.temp_slot** %p, align 8
  br label %for.cond.86

for.end.107:                                      ; preds = %for.cond.86
  br label %for.end.172

if.end.108:                                       ; preds = %lor.lhs.false.76, %if.end.16
  %63 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %cmp109 = icmp eq %struct.temp_slot* %63, null
  br i1 %cmp109, label %if.then.111, label %if.end.116

if.then.111:                                      ; preds = %if.end.108
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i32 0, i64 0
  %rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx114, align 8
  %call115 = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %65)
  store %struct.temp_slot* %call115, %struct.temp_slot** %p, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.111, %if.end.108
  %66 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %cmp117 = icmp ne %struct.temp_slot* %66, null
  br i1 %cmp117, label %if.then.119, label %if.end.151

if.then.119:                                      ; preds = %if.end.116
  %67 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level120 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %67, i32 0, i32 9
  %68 = load i32, i32* %level120, align 4
  %69 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level121 = getelementptr inbounds %struct.function, %struct.function* %69, i32 0, i32 40
  %70 = load i32, i32* %x_temp_slot_level121, align 4
  %cmp122 = icmp eq i32 %68, %70
  br i1 %cmp122, label %if.then.124, label %if.end.150

if.then.124:                                      ; preds = %if.then.119
  %71 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots125 = getelementptr inbounds %struct.function, %struct.function* %71, i32 0, i32 39
  %72 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots125, align 8
  store %struct.temp_slot* %72, %struct.temp_slot** %q, align 8
  br label %for.cond.126

for.cond.126:                                     ; preds = %for.inc.144, %if.then.124
  %73 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %tobool127 = icmp ne %struct.temp_slot* %73, null
  br i1 %tobool127, label %for.body.128, label %for.end.146

for.body.128:                                     ; preds = %for.cond.126
  %74 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %75 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %cmp129 = icmp ne %struct.temp_slot* %74, %75
  br i1 %cmp129, label %land.lhs.true.131, label %if.end.143

land.lhs.true.131:                                ; preds = %for.body.128
  %76 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %addr_taken132 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %76, i32 0, i32 8
  %77 = load i8, i8* %addr_taken132, align 1
  %conv133 = sext i8 %77 to i32
  %tobool134 = icmp ne i32 %conv133, 0
  br i1 %tobool134, label %land.lhs.true.135, label %if.end.143

land.lhs.true.135:                                ; preds = %land.lhs.true.131
  %78 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %level136 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %78, i32 0, i32 9
  %79 = load i32, i32* %level136, align 4
  %80 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level137 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %80, i32 0, i32 9
  %81 = load i32, i32* %level137, align 4
  %cmp138 = icmp eq i32 %79, %81
  br i1 %cmp138, label %if.then.140, label %if.end.143

if.then.140:                                      ; preds = %land.lhs.true.135
  %82 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %level141 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %82, i32 0, i32 9
  %83 = load i32, i32* %level141, align 4
  %dec142 = add nsw i32 %83, -1
  store i32 %dec142, i32* %level141, align 4
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.140, %land.lhs.true.135, %land.lhs.true.131, %for.body.128
  br label %for.inc.144

for.inc.144:                                      ; preds = %if.end.143
  %84 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8
  %next145 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %84, i32 0, i32 0
  %85 = load %struct.temp_slot*, %struct.temp_slot** %next145, align 8
  store %struct.temp_slot* %85, %struct.temp_slot** %q, align 8
  br label %for.cond.126

for.end.146:                                      ; preds = %for.cond.126
  %86 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level147 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %86, i32 0, i32 9
  %87 = load i32, i32* %level147, align 4
  %dec148 = add nsw i32 %87, -1
  store i32 %dec148, i32* %level147, align 4
  %88 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %addr_taken149 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %88, i32 0, i32 8
  store i8 0, i8* %addr_taken149, align 1
  br label %if.end.150

if.end.150:                                       ; preds = %for.end.146, %if.then.119
  br label %for.end.172

if.end.151:                                       ; preds = %if.end.116
  %89 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots152 = getelementptr inbounds %struct.function, %struct.function* %89, i32 0, i32 39
  %90 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots152, align 8
  store %struct.temp_slot* %90, %struct.temp_slot** %p, align 8
  br label %for.cond.153

for.cond.153:                                     ; preds = %for.inc.170, %if.end.151
  %91 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool154 = icmp ne %struct.temp_slot* %91, null
  br i1 %tobool154, label %for.body.155, label %for.end.172

for.body.155:                                     ; preds = %for.cond.153
  %92 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use156 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %92, i32 0, i32 7
  %93 = load i8, i8* %in_use156, align 1
  %conv157 = sext i8 %93 to i32
  %tobool158 = icmp ne i32 %conv157, 0
  br i1 %tobool158, label %land.lhs.true.159, label %if.end.169

land.lhs.true.159:                                ; preds = %for.body.155
  %94 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level160 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %94, i32 0, i32 9
  %95 = load i32, i32* %level160, align 4
  %96 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level161 = getelementptr inbounds %struct.function, %struct.function* %96, i32 0, i32 40
  %97 = load i32, i32* %x_temp_slot_level161, align 4
  %cmp162 = icmp eq i32 %95, %97
  br i1 %cmp162, label %land.lhs.true.164, label %if.end.169

land.lhs.true.164:                                ; preds = %land.lhs.true.159
  %98 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %keep = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %98, i32 0, i32 10
  %99 = load i32, i32* %keep, align 4
  %tobool165 = icmp ne i32 %99, 0
  br i1 %tobool165, label %if.end.169, label %if.then.166

if.then.166:                                      ; preds = %land.lhs.true.164
  %100 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level167 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %100, i32 0, i32 9
  %101 = load i32, i32* %level167, align 4
  %dec168 = add nsw i32 %101, -1
  store i32 %dec168, i32* %level167, align 4
  br label %if.end.169

if.end.169:                                       ; preds = %if.then.166, %land.lhs.true.164, %land.lhs.true.159, %for.body.155
  br label %for.inc.170

for.inc.170:                                      ; preds = %if.end.169
  %102 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next171 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %102, i32 0, i32 0
  %103 = load %struct.temp_slot*, %struct.temp_slot** %next171, align 8
  store %struct.temp_slot* %103, %struct.temp_slot** %p, align 8
  br label %for.cond.153

for.end.172:                                      ; preds = %for.end, %for.end.107, %if.end.150, %for.cond.153
  ret void
}

; Function Attrs: nounwind uwtable
define void @preserve_rtl_expr_result(%struct.rtx_def* %x) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp ne i32 %bf.clear, 66
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load3 = load i32, i32* %5, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 67
  br i1 %cmp5, label %if.then, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false.2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load10 = load i32, i32* %8, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 68
  br i1 %cmp12, label %if.then, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.6
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load17 = load i32, i32* %11, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 54
  br i1 %cmp19, label %if.then, label %lor.lhs.false.20

lor.lhs.false.20:                                 ; preds = %lor.lhs.false.13
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load24 = load i32, i32* %14, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 55
  br i1 %cmp26, label %if.then, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.20
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 0
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx30, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load31 = load i32, i32* %17, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 58
  br i1 %cmp33, label %if.then, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %lor.lhs.false.27
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load38 = load i32, i32* %20, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 134
  br i1 %cmp40, label %if.then, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %lor.lhs.false.34
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 0
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx44, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load45 = load i32, i32* %23, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 56
  br i1 %cmp47, label %if.then, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %lor.lhs.false.41
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load52 = load i32, i32* %26, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 140
  br i1 %cmp54, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.48, %lor.lhs.false.41, %lor.lhs.false.34, %lor.lhs.false.27, %lor.lhs.false.20, %lor.lhs.false.13, %lor.lhs.false.6, %lor.lhs.false.2, %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false.48
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i32 0, i64 0
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx57, align 8
  %call = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %28)
  store %struct.temp_slot* %call, %struct.temp_slot** %p, align 8
  %29 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %cmp58 = icmp ne %struct.temp_slot* %29, null
  br i1 %cmp58, label %if.then.59, label %if.end.64

if.then.59:                                       ; preds = %if.end
  %30 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %30, i32 0, i32 9
  %31 = load i32, i32* %level, align 4
  %32 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %32, i32 0, i32 40
  %33 = load i32, i32* %x_temp_slot_level, align 4
  %cmp60 = icmp slt i32 %31, %33
  br i1 %cmp60, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.59
  %34 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level61 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %34, i32 0, i32 9
  %35 = load i32, i32* %level61, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.59
  %36 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level62 = getelementptr inbounds %struct.function, %struct.function* %36, i32 0, i32 40
  %37 = load i32, i32* %x_temp_slot_level62, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %35, %cond.true ], [ %37, %cond.false ]
  %38 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level63 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %38, i32 0, i32 9
  store i32 %cond, i32* %level63, align 4
  %39 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %rtl_expr = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %39, i32 0, i32 6
  store %union.tree_node* null, %union.tree_node** %rtl_expr, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %cond.end, %if.end
  br label %return

return:                                           ; preds = %if.end.64, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_temp_slots() #0 {
entry:
  %p = alloca %struct.temp_slot*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 39
  %1 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %1, %struct.temp_slot** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool = icmp ne %struct.temp_slot* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %3, i32 0, i32 7
  %4 = load i8, i8* %in_use, align 1
  %conv = sext i8 %4 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %5, i32 0, i32 9
  %6 = load i32, i32* %level, align 4
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 40
  %8 = load i32, i32* %x_temp_slot_level, align 4
  %cmp = icmp eq i32 %6, %8
  br i1 %cmp, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %9 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %keep = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %9, i32 0, i32 10
  %10 = load i32, i32* %keep, align 4
  %tobool4 = icmp ne i32 %10, 0
  br i1 %tobool4, label %if.end, label %land.lhs.true.5

land.lhs.true.5:                                  ; preds = %land.lhs.true.3
  %11 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %rtl_expr = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %11, i32 0, i32 6
  %12 = load %union.tree_node*, %union.tree_node** %rtl_expr, align 8
  %cmp6 = icmp eq %union.tree_node* %12, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.5
  %13 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use8 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %13, i32 0, i32 7
  store i8 0, i8* %in_use8, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.5, %land.lhs.true.3, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %14, i32 0, i32 0
  %15 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8
  store %struct.temp_slot* %15, %struct.temp_slot** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @combine_temp_slots()
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_temps_for_rtl_expr(%union.tree_node* %t) #0 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.temp_slot*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 39
  %1 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %1, %struct.temp_slot** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool = icmp ne %struct.temp_slot* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %rtl_expr = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %3, i32 0, i32 6
  %4 = load %union.tree_node*, %union.tree_node** %rtl_expr, align 8
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  %cmp = icmp eq %union.tree_node* %4, %5
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %for.body
  %6 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 40
  %7 = load i32, i32* %x_temp_slot_level, align 4
  %8 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %8, i32 0, i32 9
  %9 = load i32, i32* %level, align 4
  %cmp1 = icmp sle i32 %7, %9
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %10 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %10, i32 0, i32 7
  store i8 0, i8* %in_use, align 1
  br label %if.end

if.else:                                          ; preds = %if.then
  %11 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %rtl_expr3 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %11, i32 0, i32 6
  store %union.tree_node* null, %union.tree_node** %rtl_expr3, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.4
  %12 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %12, i32 0, i32 0
  %13 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8
  store %struct.temp_slot* %13, %struct.temp_slot** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @combine_temp_slots()
  ret void
}

; Function Attrs: nounwind uwtable
define void @mark_all_temps_used() #0 {
entry:
  %p = alloca %struct.temp_slot*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 39
  %1 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %1, %struct.temp_slot** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool = icmp ne %struct.temp_slot* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %keep = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %3, i32 0, i32 10
  store i32 1, i32* %keep, align 4
  %4 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %4, i32 0, i32 7
  store i8 1, i8* %in_use, align 1
  %5 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %5, i32 0, i32 9
  %6 = load i32, i32* %level, align 4
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 40
  %8 = load i32, i32* %x_temp_slot_level, align 4
  %cmp = icmp slt i32 %6, %8
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %9 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level1 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %9, i32 0, i32 9
  %10 = load i32, i32* %level1, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level2 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 40
  %12 = load i32, i32* %x_temp_slot_level2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %10, %cond.true ], [ %12, %cond.false ]
  %13 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level3 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %13, i32 0, i32 9
  store i32 %cond, i32* %level3, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %14 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %14, i32 0, i32 0
  %15 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8
  store %struct.temp_slot* %15, %struct.temp_slot** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @push_temp_slots() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 40
  %1 = load i32, i32* %x_temp_slot_level, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %x_temp_slot_level, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @pop_temp_slots() #0 {
entry:
  %p = alloca %struct.temp_slot*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 39
  %1 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %1, %struct.temp_slot** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %tobool = icmp ne %struct.temp_slot* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %3, i32 0, i32 7
  %4 = load i8, i8* %in_use, align 1
  %conv = sext i8 %4 to i32
  %tobool1 = icmp ne i32 %conv, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %5, i32 0, i32 9
  %6 = load i32, i32* %level, align 4
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 40
  %8 = load i32, i32* %x_temp_slot_level, align 4
  %cmp = icmp eq i32 %6, %8
  br i1 %cmp, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %9 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %rtl_expr = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %9, i32 0, i32 6
  %10 = load %union.tree_node*, %union.tree_node** %rtl_expr, align 8
  %cmp4 = icmp eq %union.tree_node* %10, null
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.3
  %11 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %in_use6 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %11, i32 0, i32 7
  store i8 0, i8* %in_use6, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.3, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %12, i32 0, i32 0
  %13 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8
  store %struct.temp_slot* %13, %struct.temp_slot** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @combine_temp_slots()
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level7 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 40
  %15 = load i32, i32* %x_temp_slot_level7, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %x_temp_slot_level7, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_temp_slots() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 39
  store %struct.temp_slot* null, %struct.temp_slot** %x_temp_slots, align 8
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %x_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 40
  store i32 0, i32* %x_temp_slot_level, align 4
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %x_var_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 41
  store i32 0, i32* %x_var_temp_slot_level, align 4
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %x_target_temp_slot_level = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 42
  store i32 0, i32* %x_target_temp_slot_level, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @put_var_into_stack(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %promoted_mode = alloca i32, align 4
  %decl_mode = alloca i32, align 4
  %function = alloca %struct.function*, align 8
  %context = alloca %union.tree_node*, align 8
  %can_use_addressof = alloca i32, align 4
  %volatilep = alloca i32, align 4
  %usedp = alloca i32, align 4
  %part_mode = alloca i32, align 4
  %part_type = alloca %union.tree_node*, align 8
  %lopart = alloca %struct.rtx_def*, align 8
  %hipart = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  store %struct.function* null, %struct.function** %function, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear, 118
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load2 = load i32, i32* %volatile_flag, align 8
  %bf.lshr = lshr i32 %bf.load2, 11
  %bf.clear3 = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear3, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  store i32 %land.ext, i32* %volatilep, align 4
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common4 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2
  %bf.load5 = load i32, i32* %used_flag, align 8
  %bf.lshr6 = lshr i32 %bf.load5, 16
  %bf.clear7 = and i32 %bf.lshr6, 1
  %tobool8 = icmp ne i32 %bf.clear7, 0
  br i1 %tobool8, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.end
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common9 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2
  %bf.load11 = load i32, i32* %code10, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  %cmp13 = icmp ne i32 %bf.clear12, 118
  br i1 %cmp13, label %land.rhs.14, label %land.end.17

land.rhs.14:                                      ; preds = %lor.rhs
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl15 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl15, i32 0, i32 12
  %6 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %cmp16 = icmp ne %union.tree_node* %6, null
  br label %land.end.17

land.end.17:                                      ; preds = %land.rhs.14, %lor.rhs
  %7 = phi i1 [ false, %lor.rhs ], [ %cmp16, %land.rhs.14 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end.17, %land.end
  %8 = phi i1 [ true, %land.end ], [ %7, %land.end.17 ]
  %lor.ext = zext i1 %8 to i32
  store i32 %lor.ext, i32* %usedp, align 4
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %9)
  store %union.tree_node* %call, %union.tree_node** %context, align 8
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common19 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %code20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2
  %bf.load21 = load i32, i32* %code20, align 8
  %bf.clear22 = and i32 %bf.load21, 255
  %cmp23 = icmp eq i32 %bf.clear22, 118
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 2
  %12 = bitcast %union.tree_node** %arrayidx to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %12, align 8
  br label %cond.end.39

cond.false:                                       ; preds = %lor.end
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl24 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl24, i32 0, i32 17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp25 = icmp ne %struct.rtx_def* %15, null
  br i1 %cmp25, label %cond.true.26, label %cond.false.36

cond.true.26:                                     ; preds = %cond.false
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl27 = bitcast %union.tree_node* %16 to %struct.tree_decl*
  %rtl28 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl27, i32 0, i32 17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtl28, align 8
  %tobool29 = icmp ne %struct.rtx_def* %17, null
  br i1 %tobool29, label %cond.true.30, label %cond.false.33

cond.true.30:                                     ; preds = %cond.true.26
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl31 = bitcast %union.tree_node* %18 to %struct.tree_decl*
  %rtl32 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl31, i32 0, i32 17
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl32, align 8
  br label %cond.end

cond.false.33:                                    ; preds = %cond.true.26
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %20, i8* null)
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl34 = bitcast %union.tree_node* %21 to %struct.tree_decl*
  %rtl35 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl34, i32 0, i32 17
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtl35, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false.33, %cond.true.30
  %cond = phi %struct.rtx_def* [ %19, %cond.true.30 ], [ %22, %cond.false.33 ]
  br label %cond.end.37

cond.false.36:                                    ; preds = %cond.false
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.36, %cond.end
  %cond38 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.36 ]
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.end.37, %cond.true
  %cond40 = phi %struct.rtx_def* [ %13, %cond.true ], [ %cond38, %cond.end.37 ]
  store %struct.rtx_def* %cond40, %struct.rtx_def** %reg, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %cmp41 = icmp eq %struct.rtx_def* %23, null
  br i1 %cmp41, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.39
  br label %if.end.223

if.end:                                           ; preds = %cond.end.39
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common42 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %code43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2
  %bf.load44 = load i32, i32* %code43, align 8
  %bf.clear45 = and i32 %bf.load44, 255
  %cmp46 = icmp eq i32 %bf.clear45, 118
  br i1 %cmp46, label %cond.true.47, label %cond.false.53

cond.true.47:                                     ; preds = %if.end
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common48 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 1
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type49 = bitcast %union.tree_node* %26 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 6
  %bf.load50 = load i32, i32* %mode, align 4
  %bf.lshr51 = lshr i32 %bf.load50, 9
  %bf.clear52 = and i32 %bf.lshr51, 127
  br label %cond.end.58

cond.false.53:                                    ; preds = %if.end
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl54 = bitcast %union.tree_node* %27 to %struct.tree_decl*
  %mode55 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl54, i32 0, i32 5
  %28 = bitcast i48* %mode55 to i64*
  %bf.load56 = load i64, i64* %28, align 8
  %bf.clear57 = and i64 %bf.load56, 255
  %bf.cast = trunc i64 %bf.clear57 to i32
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.53, %cond.true.47
  %cond59 = phi i32 [ %bf.clear52, %cond.true.47 ], [ %bf.cast, %cond.false.53 ]
  store i32 %cond59, i32* %decl_mode, align 4
  %29 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load60 = load i32, i32* %30, align 8
  %bf.lshr61 = lshr i32 %bf.load60, 16
  %bf.clear62 = and i32 %bf.lshr61, 255
  store i32 %bf.clear62, i32* %promoted_mode, align 4
  %31 = load %union.tree_node*, %union.tree_node** %context, align 8
  %32 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp63 = icmp ne %union.tree_node* %31, %32
  br i1 %cmp63, label %land.lhs.true, label %if.end.71

land.lhs.true:                                    ; preds = %cond.end.58
  %33 = load %union.tree_node*, %union.tree_node** %context, align 8
  %34 = load %union.tree_node*, %union.tree_node** @inline_function_decl, align 8
  %cmp64 = icmp ne %union.tree_node* %33, %34
  br i1 %cmp64, label %if.then.65, label %if.end.71

if.then.65:                                       ; preds = %land.lhs.true
  %35 = load %struct.function*, %struct.function** @outer_function_chain, align 8
  store %struct.function* %35, %struct.function** %function, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.65
  %36 = load %struct.function*, %struct.function** %function, align 8
  %tobool66 = icmp ne %struct.function* %36, null
  br i1 %tobool66, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load %struct.function*, %struct.function** %function, align 8
  %decl67 = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 6
  %38 = load %union.tree_node*, %union.tree_node** %decl67, align 8
  %39 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp68 = icmp eq %union.tree_node* %38, %39
  br i1 %cmp68, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %for.body
  br label %for.end

if.end.70:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.70
  %40 = load %struct.function*, %struct.function** %function, align 8
  %outer = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 7
  %41 = load %struct.function*, %struct.function** %outer, align 8
  store %struct.function* %41, %struct.function** %function, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.69, %for.cond
  br label %if.end.71

if.end.71:                                        ; preds = %for.end, %land.lhs.true, %cond.end.58
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common72 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %code73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2
  %bf.load74 = load i32, i32* %code73, align 8
  %bf.clear75 = and i32 %bf.load74, 255
  %cmp76 = icmp ne i32 %bf.clear75, 118
  br i1 %cmp76, label %land.lhs.true.77, label %if.end.107

land.lhs.true.77:                                 ; preds = %if.end.71
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl78 = bitcast %union.tree_node* %43 to %struct.tree_decl*
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl78, i32 0, i32 5
  %44 = bitcast i48* %nonlocal_flag to i64*
  %bf.load79 = load i64, i64* %44, align 8
  %bf.lshr80 = lshr i64 %bf.load79, 9
  %bf.clear81 = and i64 %bf.lshr80, 1
  %bf.cast82 = trunc i64 %bf.clear81 to i32
  %tobool83 = icmp ne i32 %bf.cast82, 0
  br i1 %tobool83, label %land.lhs.true.84, label %if.end.107

land.lhs.true.84:                                 ; preds = %land.lhs.true.77
  %45 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load85 = load i32, i32* %46, align 8
  %bf.clear86 = and i32 %bf.load85, 65535
  %cmp87 = icmp eq i32 %bf.clear86, 66
  br i1 %cmp87, label %land.lhs.true.88, label %if.end.107

land.lhs.true.88:                                 ; preds = %land.lhs.true.84
  %47 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load90 = load i32, i32* %49, align 8
  %bf.clear91 = and i32 %bf.load90, 65535
  %cmp92 = icmp eq i32 %bf.clear91, 61
  br i1 %cmp92, label %land.lhs.true.93, label %if.end.107

land.lhs.true.93:                                 ; preds = %land.lhs.true.88
  %50 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx96, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx98 to i32*
  %52 = load i32, i32* %rtuint, align 4
  %cmp99 = icmp ugt i32 %52, 57
  br i1 %cmp99, label %if.then.100, label %if.end.107

if.then.100:                                      ; preds = %land.lhs.true.93
  %53 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx103, align 8
  store %struct.rtx_def* %54, %struct.rtx_def** %reg, align 8
  %55 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load104 = load i32, i32* %56, align 8
  %bf.lshr105 = lshr i32 %bf.load104, 16
  %bf.clear106 = and i32 %bf.lshr105, 255
  store i32 %bf.clear106, i32* %promoted_mode, align 4
  store i32 %bf.clear106, i32* %decl_mode, align 4
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.100, %land.lhs.true.93, %land.lhs.true.88, %land.lhs.true.84, %land.lhs.true.77, %if.end.71
  %57 = load %struct.function*, %struct.function** %function, align 8
  %cmp108 = icmp eq %struct.function* %57, null
  br i1 %cmp108, label %land.lhs.true.109, label %land.end.113

land.lhs.true.109:                                ; preds = %if.end.107
  %58 = load i32, i32* @optimize, align 4
  %cmp110 = icmp sgt i32 %58, 0
  br i1 %cmp110, label %land.rhs.111, label %land.end.113

land.rhs.111:                                     ; preds = %land.lhs.true.109
  %59 = load i32, i32* %decl_mode, align 4
  %60 = load i32, i32* %promoted_mode, align 4
  %cmp112 = icmp eq i32 %59, %60
  br label %land.end.113

land.end.113:                                     ; preds = %land.rhs.111, %land.lhs.true.109, %if.end.107
  %61 = phi i1 [ false, %land.lhs.true.109 ], [ false, %if.end.107 ], [ %cmp112, %land.rhs.111 ]
  %land.ext114 = zext i1 %61 to i32
  store i32 %land.ext114, i32* %can_use_addressof, align 4
  %62 = load i32, i32* %can_use_addressof, align 4
  %tobool115 = icmp ne i32 %62, 0
  br i1 %tobool115, label %if.end.134, label %land.lhs.true.116

land.lhs.true.116:                                ; preds = %land.end.113
  %63 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load117 = load i32, i32* %64, align 8
  %bf.clear118 = and i32 %bf.load117, 65535
  %cmp119 = icmp eq i32 %bf.clear118, 66
  br i1 %cmp119, label %land.lhs.true.120, label %if.end.134

land.lhs.true.120:                                ; preds = %land.lhs.true.116
  %65 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i32 0, i64 0
  %rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx123, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load124 = load i32, i32* %67, align 8
  %bf.clear125 = and i32 %bf.load124, 65535
  %cmp126 = icmp eq i32 %bf.clear125, 70
  br i1 %cmp126, label %if.then.127, label %if.end.134

if.then.127:                                      ; preds = %land.lhs.true.120
  %68 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i32 0, i64 0
  %rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx130, align 8
  %fld131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx132 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld131, i32 0, i64 0
  %rtx133 = bitcast %union.rtunion_def* %arrayidx132 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtx133, align 8
  store %struct.rtx_def* %70, %struct.rtx_def** %reg, align 8
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.127, %land.lhs.true.120, %land.lhs.true.116, %land.end.113
  %71 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %72 = bitcast %struct.rtx_def* %71 to i32*
  %bf.load135 = load i32, i32* %72, align 8
  %bf.clear136 = and i32 %bf.load135, 65535
  %cmp137 = icmp eq i32 %bf.clear136, 61
  br i1 %cmp137, label %if.then.138, label %if.else.145

if.then.138:                                      ; preds = %if.end.134
  %73 = load i32, i32* %can_use_addressof, align 4
  %tobool139 = icmp ne i32 %73, 0
  br i1 %tobool139, label %if.then.140, label %if.else

if.then.140:                                      ; preds = %if.then.138
  %74 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %75 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call141 = call %struct.rtx_def* @gen_mem_addressof(%struct.rtx_def* %74, %union.tree_node* %75)
  br label %if.end.144

if.else:                                          ; preds = %if.then.138
  %76 = load %struct.function*, %struct.function** %function, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %78 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common142 = bitcast %union.tree_node* %78 to %struct.tree_common*
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 1
  %79 = load %union.tree_node*, %union.tree_node** %type143, align 8
  %80 = load i32, i32* %promoted_mode, align 4
  %81 = load i32, i32* %decl_mode, align 4
  %82 = load i32, i32* %volatilep, align 4
  %83 = load i32, i32* %usedp, align 4
  call void @put_reg_into_stack(%struct.function* %76, %struct.rtx_def* %77, %union.tree_node* %79, i32 %80, i32 %81, i32 %82, i32 0, i32 %83, %struct.hash_table* null)
  br label %if.end.144

if.end.144:                                       ; preds = %if.else, %if.then.140
  br label %if.end.223

if.else.145:                                      ; preds = %if.end.134
  %84 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %85 = bitcast %struct.rtx_def* %84 to i32*
  %bf.load146 = load i32, i32* %85, align 8
  %bf.clear147 = and i32 %bf.load146, 65535
  %cmp148 = icmp eq i32 %bf.clear147, 65
  br i1 %cmp148, label %if.then.149, label %if.else.221

if.then.149:                                      ; preds = %if.else.145
  %86 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i32 0, i64 0
  %rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rtx152, align 8
  %88 = bitcast %struct.rtx_def* %87 to i32*
  %bf.load153 = load i32, i32* %88, align 8
  %bf.lshr154 = lshr i32 %bf.load153, 16
  %bf.clear155 = and i32 %bf.lshr154, 255
  store i32 %bf.clear155, i32* %part_mode, align 4
  %89 = load i32, i32* %part_mode, align 4
  %call156 = call %union.tree_node* @type_for_mode(i32 %89, i32 0)
  store %union.tree_node* %call156, %union.tree_node** %part_type, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i32 0, i64 0
  %rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**
  %91 = load %struct.rtx_def*, %struct.rtx_def** %rtx159, align 8
  store %struct.rtx_def* %91, %struct.rtx_def** %lopart, align 8
  %92 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i32 0, i64 1
  %rtx162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.rtx_def**
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rtx162, align 8
  store %struct.rtx_def* %93, %struct.rtx_def** %hipart, align 8
  %94 = load %struct.function*, %struct.function** %function, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %hipart, align 8
  %96 = load %union.tree_node*, %union.tree_node** %part_type, align 8
  %97 = load i32, i32* %part_mode, align 4
  %98 = load i32, i32* %part_mode, align 4
  %99 = load i32, i32* %volatilep, align 4
  call void @put_reg_into_stack(%struct.function* %94, %struct.rtx_def* %95, %union.tree_node* %96, i32 %97, i32 %98, i32 %99, i32 0, i32 0, %struct.hash_table* null)
  %100 = load %struct.function*, %struct.function** %function, align 8
  %101 = load %struct.rtx_def*, %struct.rtx_def** %lopart, align 8
  %102 = load %union.tree_node*, %union.tree_node** %part_type, align 8
  %103 = load i32, i32* %part_mode, align 4
  %104 = load i32, i32* %part_mode, align 4
  %105 = load i32, i32* %volatilep, align 4
  call void @put_reg_into_stack(%struct.function* %100, %struct.rtx_def* %101, %union.tree_node* %102, i32 %103, i32 %104, i32 %105, i32 0, i32 0, %struct.hash_table* null)
  %106 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %107 = bitcast %struct.rtx_def* %106 to i32*
  %bf.load163 = load i32, i32* %107, align 8
  %bf.clear164 = and i32 %bf.load163, -65536
  %bf.set = or i32 %bf.clear164, 66
  store i32 %bf.set, i32* %107, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld165 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %108, i32 0, i32 1
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx166 to %struct.mem_attrs**
  store %struct.mem_attrs* null, %struct.mem_attrs** %rtmem, align 8
  %109 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common167 = bitcast %union.tree_node* %109 to %struct.tree_common*
  %code168 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common167, i32 0, i32 2
  %bf.load169 = load i32, i32* %code168, align 8
  %bf.clear170 = and i32 %bf.load169, 255
  %idxprom = sext i32 %bf.clear170 to i64
  %arrayidx171 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %110 = load i8, i8* %arrayidx171, align 1
  %conv = sext i8 %110 to i32
  %cmp172 = icmp eq i32 %conv, 100
  br i1 %cmp172, label %if.then.174, label %if.end.177

if.then.174:                                      ; preds = %if.then.149
  %111 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl175 = bitcast %union.tree_node* %111 to %struct.tree_decl*
  %rtl176 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl175, i32 0, i32 17
  store %struct.rtx_def* null, %struct.rtx_def** %rtl176, align 8
  br label %if.end.177

if.end.177:                                       ; preds = %if.then.174, %if.then.149
  %112 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %113 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %112, %union.tree_node* %113, i32 1)
  %114 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common178 = bitcast %union.tree_node* %114 to %struct.tree_common*
  %code179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 2
  %bf.load180 = load i32, i32* %code179, align 8
  %bf.clear181 = and i32 %bf.load180, 255
  %idxprom182 = sext i32 %bf.clear181 to i64
  %arrayidx183 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom182
  %115 = load i8, i8* %arrayidx183, align 1
  %conv184 = sext i8 %115 to i32
  %cmp185 = icmp eq i32 %conv184, 100
  br i1 %cmp185, label %if.then.187, label %if.end.190

if.then.187:                                      ; preds = %if.end.177
  %116 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %117 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl188 = bitcast %union.tree_node* %117 to %struct.tree_decl*
  %rtl189 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl188, i32 0, i32 17
  store %struct.rtx_def* %116, %struct.rtx_def** %rtl189, align 8
  br label %if.end.190

if.end.190:                                       ; preds = %if.then.187, %if.end.177
  %118 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1
  %arrayidx192 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld191, i32 0, i64 0
  %rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rtx193, align 8
  %fld194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1
  %arrayidx195 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld194, i32 0, i64 0
  %rtx196 = bitcast %union.rtunion_def* %arrayidx195 to %struct.rtx_def**
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rtx196, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i32 0, i64 0
  %rtx199 = bitcast %union.rtunion_def* %arrayidx198 to %struct.rtx_def**
  store %struct.rtx_def* %120, %struct.rtx_def** %rtx199, align 8
  %122 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld200 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1
  %arrayidx201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld200, i32 0, i64 0
  %rtx202 = bitcast %union.rtunion_def* %arrayidx201 to %struct.rtx_def**
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rtx202, align 8
  %124 = bitcast %struct.rtx_def* %123 to i32*
  %bf.load203 = load i32, i32* %124, align 8
  %bf.clear204 = and i32 %bf.load203, 65535
  %cmp205 = icmp eq i32 %bf.clear204, 75
  br i1 %cmp205, label %if.then.207, label %if.end.215

if.then.207:                                      ; preds = %if.end.190
  %125 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld208 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx209 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld208, i32 0, i64 0
  %rtx210 = bitcast %union.rtunion_def* %arrayidx209 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtx210, align 8
  %call211 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %126)
  %127 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld212 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %arrayidx213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld212, i32 0, i64 0
  %rtx214 = bitcast %union.rtunion_def* %arrayidx213 to %struct.rtx_def**
  store %struct.rtx_def* %call211, %struct.rtx_def** %rtx214, align 8
  br label %if.end.215

if.end.215:                                       ; preds = %if.then.207, %if.end.190
  %128 = load i32, i32* %usedp, align 4
  %tobool216 = icmp ne i32 %128, 0
  br i1 %tobool216, label %if.then.217, label %if.end.220

if.then.217:                                      ; preds = %if.end.215
  %129 = load %struct.function*, %struct.function** %function, align 8
  %130 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %131 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common218 = bitcast %union.tree_node* %131 to %struct.tree_common*
  %type219 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common218, i32 0, i32 1
  %132 = load %union.tree_node*, %union.tree_node** %type219, align 8
  %133 = load i32, i32* %promoted_mode, align 4
  call void @schedule_fixup_var_refs(%struct.function* %129, %struct.rtx_def* %130, %union.tree_node* %132, i32 %133, %struct.hash_table* null)
  %134 = load %struct.function*, %struct.function** %function, align 8
  %135 = load %struct.rtx_def*, %struct.rtx_def** %lopart, align 8
  %136 = load %union.tree_node*, %union.tree_node** %part_type, align 8
  %137 = load i32, i32* %part_mode, align 4
  call void @schedule_fixup_var_refs(%struct.function* %134, %struct.rtx_def* %135, %union.tree_node* %136, i32 %137, %struct.hash_table* null)
  %138 = load %struct.function*, %struct.function** %function, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** %hipart, align 8
  %140 = load %union.tree_node*, %union.tree_node** %part_type, align 8
  %141 = load i32, i32* %part_mode, align 4
  call void @schedule_fixup_var_refs(%struct.function* %138, %struct.rtx_def* %139, %union.tree_node* %140, i32 %141, %struct.hash_table* null)
  br label %if.end.220

if.end.220:                                       ; preds = %if.then.217, %if.end.215
  br label %if.end.222

if.else.221:                                      ; preds = %if.else.145
  br label %if.end.223

if.end.222:                                       ; preds = %if.end.220
  br label %if.end.223

if.end.223:                                       ; preds = %if.then, %if.else.221, %if.end.222, %if.end.144
  ret void
}

declare %union.tree_node* @decl_function_context(%union.tree_node*) #2

declare void @make_decl_rtl(%union.tree_node*, i8*) #2

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_mem_addressof(%struct.rtx_def* %reg, %union.tree_node* %decl) #0 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %r = alloca %struct.rtx_def*, align 8
  %set = alloca i64, align 8
  %type = alloca %union.tree_node*, align 8
  %decl_mode = alloca i32, align 4
  %decl_rtl = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear)
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %4 = load i32, i32* %rtuint, align 4
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eit(i32 70, i32 %cond, %struct.rtx_def* %call, i32 %4, %union.tree_node* %5)
  store %struct.rtx_def* %call1, %struct.rtx_def** %r, align 8
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %tobool2 = icmp ne %union.tree_node* %6, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call3 = call i64 @get_alias_set(%union.tree_node* %7)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i64 [ %call3, %cond.true ], [ 0, %cond.false ]
  store i64 %cond4, i64* %set, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load5 = load i32, i32* %9, align 8
  %bf.lshr6 = lshr i32 %bf.load5, 27
  %bf.clear7 = and i32 %bf.lshr6, 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load10 = load i32, i32* %12, align 8
  %bf.value = and i32 %bf.clear7, 1
  %bf.shl = shl i32 %bf.value, 27
  %bf.clear11 = and i32 %bf.load10, -134217729
  %bf.set = or i32 %bf.clear11, %bf.shl
  store i32 %bf.set, i32* %12, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load12 = load i32, i32* %14, align 8
  %bf.lshr13 = lshr i32 %bf.load12, 26
  %bf.clear14 = and i32 %bf.lshr13, 1
  %15 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load18 = load i32, i32* %17, align 8
  %bf.value19 = and i32 %bf.clear14, 1
  %bf.shl20 = shl i32 %bf.value19, 26
  %bf.clear21 = and i32 %bf.load18, -67108865
  %bf.set22 = or i32 %bf.clear21, %bf.shl20
  store i32 %bf.set22, i32* %17, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load23 = load i32, i32* %19, align 8
  %bf.clear24 = and i32 %bf.load23, -65536
  %bf.set25 = or i32 %bf.clear24, 66
  store i32 %bf.set25, i32* %19, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx27 to %struct.mem_attrs**
  store %struct.mem_attrs* null, %struct.mem_attrs** %rtmem, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 0
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  store %struct.rtx_def* %21, %struct.rtx_def** %rtx30, align 8
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %tobool31 = icmp ne %union.tree_node* %23, null
  br i1 %tobool31, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %25 = load %union.tree_node*, %union.tree_node** %type32, align 8
  store %union.tree_node* %25, %union.tree_node** %type, align 8
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common33 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2
  %bf.load34 = load i32, i32* %code, align 8
  %bf.clear35 = and i32 %bf.load34, 255
  %idxprom = sext i32 %bf.clear35 to i64
  %arrayidx36 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %27 = load i8, i8* %arrayidx36, align 1
  %conv = sext i8 %27 to i32
  %cmp = icmp eq i32 %conv, 100
  br i1 %cmp, label %cond.true.38, label %cond.false.42

cond.true.38:                                     ; preds = %if.then
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl39 = bitcast %union.tree_node* %28 to %struct.tree_decl*
  %mode = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl39, i32 0, i32 5
  %29 = bitcast i48* %mode to i64*
  %bf.load40 = load i64, i64* %29, align 8
  %bf.clear41 = and i64 %bf.load40, 255
  %bf.cast = trunc i64 %bf.clear41 to i32
  br label %cond.end.50

cond.false.42:                                    ; preds = %if.then
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common43 = bitcast %union.tree_node* %30 to %struct.tree_common*
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 1
  %31 = load %union.tree_node*, %union.tree_node** %type44, align 8
  %type45 = bitcast %union.tree_node* %31 to %struct.tree_type*
  %mode46 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type45, i32 0, i32 6
  %bf.load47 = load i32, i32* %mode46, align 4
  %bf.lshr48 = lshr i32 %bf.load47, 9
  %bf.clear49 = and i32 %bf.lshr48, 127
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.false.42, %cond.true.38
  %cond51 = phi i32 [ %bf.cast, %cond.true.38 ], [ %bf.clear49, %cond.false.42 ]
  store i32 %cond51, i32* %decl_mode, align 4
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common52 = bitcast %union.tree_node* %32 to %struct.tree_common*
  %code53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2
  %bf.load54 = load i32, i32* %code53, align 8
  %bf.clear55 = and i32 %bf.load54, 255
  %cmp56 = icmp eq i32 %bf.clear55, 118
  br i1 %cmp56, label %cond.true.58, label %cond.false.60

cond.true.58:                                     ; preds = %cond.end.50
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %exp = bitcast %union.tree_node* %33 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 2
  %34 = bitcast %union.tree_node** %arrayidx59 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %34, align 8
  br label %cond.end.79

cond.false.60:                                    ; preds = %cond.end.50
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl61 = bitcast %union.tree_node* %36 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl61, i32 0, i32 17
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp62 = icmp ne %struct.rtx_def* %37, null
  br i1 %cmp62, label %cond.true.64, label %cond.false.76

cond.true.64:                                     ; preds = %cond.false.60
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl65 = bitcast %union.tree_node* %38 to %struct.tree_decl*
  %rtl66 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl65, i32 0, i32 17
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtl66, align 8
  %tobool67 = icmp ne %struct.rtx_def* %39, null
  br i1 %tobool67, label %cond.true.68, label %cond.false.71

cond.true.68:                                     ; preds = %cond.true.64
  %40 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl69 = bitcast %union.tree_node* %40 to %struct.tree_decl*
  %rtl70 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl69, i32 0, i32 17
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtl70, align 8
  br label %cond.end.74

cond.false.71:                                    ; preds = %cond.true.64
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %42, i8* null)
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl72 = bitcast %union.tree_node* %43 to %struct.tree_decl*
  %rtl73 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl72, i32 0, i32 17
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtl73, align 8
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.false.71, %cond.true.68
  %cond75 = phi %struct.rtx_def* [ %41, %cond.true.68 ], [ %44, %cond.false.71 ]
  br label %cond.end.77

cond.false.76:                                    ; preds = %cond.false.60
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.76, %cond.end.74
  %cond78 = phi %struct.rtx_def* [ %cond75, %cond.end.74 ], [ null, %cond.false.76 ]
  br label %cond.end.79

cond.end.79:                                      ; preds = %cond.end.77, %cond.true.58
  %cond80 = phi %struct.rtx_def* [ %35, %cond.true.58 ], [ %cond78, %cond.end.77 ]
  store %struct.rtx_def* %cond80, %struct.rtx_def** %decl_rtl, align 8
  %45 = load i32, i32* %decl_mode, align 4
  %46 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load81 = load i32, i32* %47, align 8
  %bf.value82 = and i32 %45, 255
  %bf.shl83 = shl i32 %bf.value82, 16
  %bf.clear84 = and i32 %bf.load81, -16711681
  %bf.set85 = or i32 %bf.clear84, %bf.shl83
  store i32 %bf.set85, i32* %47, align 8
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common86 = bitcast %union.tree_node* %48 to %struct.tree_common*
  %code87 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common86, i32 0, i32 2
  %bf.load88 = load i32, i32* %code87, align 8
  %bf.clear89 = and i32 %bf.load88, 255
  %idxprom90 = sext i32 %bf.clear89 to i64
  %arrayidx91 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom90
  %49 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %49 to i32
  %cmp93 = icmp eq i32 %conv92, 100
  br i1 %cmp93, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end.79
  %50 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %cmp95 = icmp eq %struct.rtx_def* %50, %51
  br i1 %cmp95, label %if.then.97, label %if.end

if.then.97:                                       ; preds = %land.lhs.true
  %52 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl98 = bitcast %union.tree_node* %52 to %struct.tree_decl*
  %rtl99 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl98, i32 0, i32 17
  store %struct.rtx_def* null, %struct.rtx_def** %rtl99, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.97, %land.lhs.true, %cond.end.79
  %53 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %54 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @set_mem_attributes(%struct.rtx_def* %53, %union.tree_node* %54, i32 1)
  %55 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %56 = load i64, i64* %set, align 8
  call void @set_mem_alias_set(%struct.rtx_def* %55, i64 %56)
  %57 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common100 = bitcast %union.tree_node* %57 to %struct.tree_common*
  %code101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2
  %bf.load102 = load i32, i32* %code101, align 8
  %bf.clear103 = and i32 %bf.load102, 255
  %idxprom104 = sext i32 %bf.clear103 to i64
  %arrayidx105 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom104
  %58 = load i8, i8* %arrayidx105, align 1
  %conv106 = sext i8 %58 to i32
  %cmp107 = icmp eq i32 %conv106, 100
  br i1 %cmp107, label %land.lhs.true.109, label %if.end.115

land.lhs.true.109:                                ; preds = %if.end
  %59 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %cmp110 = icmp eq %struct.rtx_def* %59, %60
  br i1 %cmp110, label %if.then.112, label %if.end.115

if.then.112:                                      ; preds = %land.lhs.true.109
  %61 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %62 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl113 = bitcast %union.tree_node* %62 to %struct.tree_decl*
  %rtl114 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl113, i32 0, i32 17
  store %struct.rtx_def* %61, %struct.rtx_def** %rtl114, align 8
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.112, %land.lhs.true.109, %if.end
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common116 = bitcast %union.tree_node* %63 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common116, i32 0, i32 2
  %bf.load117 = load i32, i32* %used_flag, align 8
  %bf.lshr118 = lshr i32 %bf.load117, 16
  %bf.clear119 = and i32 %bf.lshr118, 1
  %tobool120 = icmp ne i32 %bf.clear119, 0
  br i1 %tobool120, label %if.then.134, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.115
  %64 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common121 = bitcast %union.tree_node* %64 to %struct.tree_common*
  %code122 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common121, i32 0, i32 2
  %bf.load123 = load i32, i32* %code122, align 8
  %bf.clear124 = and i32 %bf.load123, 255
  %idxprom125 = sext i32 %bf.clear124 to i64
  %arrayidx126 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom125
  %65 = load i8, i8* %arrayidx126, align 1
  %conv127 = sext i8 %65 to i32
  %cmp128 = icmp eq i32 %conv127, 100
  br i1 %cmp128, label %land.lhs.true.130, label %if.end.142

land.lhs.true.130:                                ; preds = %lor.lhs.false
  %66 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl131 = bitcast %union.tree_node* %66 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl131, i32 0, i32 12
  %67 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %cmp132 = icmp ne %union.tree_node* %67, null
  br i1 %cmp132, label %if.then.134, label %if.end.142

if.then.134:                                      ; preds = %land.lhs.true.130, %if.end.115
  %68 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %70 = bitcast %struct.rtx_def* %69 to i32*
  %bf.load135 = load i32, i32* %70, align 8
  %bf.lshr136 = lshr i32 %bf.load135, 16
  %bf.clear137 = and i32 %bf.lshr136, 255
  %71 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common138 = bitcast %union.tree_node* %71 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 2
  %bf.load139 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr140 = lshr i32 %bf.load139, 13
  %bf.clear141 = and i32 %bf.lshr140, 1
  %72 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  call void @fixup_var_refs(%struct.rtx_def* %68, i32 %bf.clear137, i32 %bf.clear141, %struct.rtx_def* %72, %struct.hash_table* null)
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.134, %land.lhs.true.130, %lor.lhs.false
  br label %if.end.146

if.else:                                          ; preds = %cond.end
  %73 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %74 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %75 = bitcast %struct.rtx_def* %74 to i32*
  %bf.load143 = load i32, i32* %75, align 8
  %bf.lshr144 = lshr i32 %bf.load143, 16
  %bf.clear145 = and i32 %bf.lshr144, 255
  %76 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  call void @fixup_var_refs(%struct.rtx_def* %73, i32 %bf.clear145, i32 0, %struct.rtx_def* %76, %struct.hash_table* null)
  br label %if.end.146

if.end.146:                                       ; preds = %if.else, %if.end.142
  %77 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  ret %struct.rtx_def* %77
}

; Function Attrs: nounwind uwtable
define internal void @put_reg_into_stack(%struct.function* %function, %struct.rtx_def* %reg, %union.tree_node* %type, i32 %promoted_mode, i32 %decl_mode, i32 %volatile_p, i32 %original_regno, i32 %used_p, %struct.hash_table* %ht) #0 {
entry:
  %function.addr = alloca %struct.function*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %decl_mode.addr = alloca i32, align 4
  %volatile_p.addr = alloca i32, align 4
  %original_regno.addr = alloca i32, align 4
  %used_p.addr = alloca i32, align 4
  %ht.addr = alloca %struct.hash_table*, align 8
  %func = alloca %struct.function*, align 8
  %new = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  store %struct.function* %function, %struct.function** %function.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store i32 %decl_mode, i32* %decl_mode.addr, align 4
  store i32 %volatile_p, i32* %volatile_p.addr, align 4
  store i32 %original_regno, i32* %original_regno.addr, align 4
  store i32 %used_p, i32* %used_p.addr, align 4
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  %0 = load %struct.function*, %struct.function** %function.addr, align 8
  %tobool = icmp ne %struct.function* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.function*, %struct.function** %function.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.function* [ %1, %cond.true ], [ %2, %cond.false ]
  store %struct.function* %cond, %struct.function** %func, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %new, align 8
  %3 = load i32, i32* %original_regno.addr, align 4
  store i32 %3, i32* %regno, align 4
  %4 = load i32, i32* %regno, align 4
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %6 = load i32, i32* %rtuint, align 4
  store i32 %6, i32* %regno, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %7 = load i32, i32* %regno, align 4
  %8 = load %struct.function*, %struct.function** %func, align 8
  %x_max_parm_reg = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 37
  %9 = load i32, i32* %x_max_parm_reg, align 4
  %cmp1 = icmp ult i32 %7, %9
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %10 = load i32, i32* %regno, align 4
  %idxprom = zext i32 %10 to i64
  %11 = load %struct.function*, %struct.function** %func, align 8
  %x_parm_reg_stack_loc = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 38
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc, align 8
  %arrayidx3 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 %idxprom
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8
  store %struct.rtx_def* %13, %struct.rtx_def** %new, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %cmp5 = icmp eq %struct.rtx_def* %14, null
  br i1 %cmp5, label %if.then.6, label %if.end.9

if.then.6:                                        ; preds = %if.end.4
  %15 = load i32, i32* %decl_mode.addr, align 4
  %16 = load i32, i32* %decl_mode.addr, align 4
  %idxprom7 = sext i32 %16 to i64
  %arrayidx8 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom7
  %17 = load i8, i8* %arrayidx8, align 1
  %conv = zext i8 %17 to i64
  %18 = load %struct.function*, %struct.function** %func, align 8
  %call = call %struct.rtx_def* @assign_stack_local_1(i32 %15, i64 %conv, i32 0, %struct.function* %18)
  store %struct.rtx_def* %call, %struct.rtx_def** %new, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.6, %if.end.4
  %19 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load = load i32, i32* %20, align 8
  %bf.clear = and i32 %bf.load, -65536
  %bf.set = or i32 %bf.clear, 66
  store i32 %bf.set, i32* %20, align 8
  %21 = load i32, i32* %decl_mode.addr, align 4
  %22 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load10 = load i32, i32* %23, align 8
  %bf.value = and i32 %21, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear11 = and i32 %bf.load10, -16711681
  %bf.set12 = or i32 %bf.clear11, %bf.shl
  store i32 %bf.set12, i32* %23, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 0
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  store %struct.rtx_def* %25, %struct.rtx_def** %rtx17, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx19 to %struct.mem_attrs**
  store %struct.mem_attrs* null, %struct.mem_attrs** %rtmem, align 8
  %28 = load i32, i32* %volatile_p.addr, align 4
  %29 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load20 = load i32, i32* %30, align 8
  %bf.value21 = and i32 %28, 1
  %bf.shl22 = shl i32 %bf.value21, 27
  %bf.clear23 = and i32 %bf.load20, -134217729
  %bf.set24 = or i32 %bf.clear23, %bf.shl22
  store i32 %bf.set24, i32* %30, align 8
  %31 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool25 = icmp ne %union.tree_node* %31, null
  br i1 %tobool25, label %if.then.26, label %if.end.75

if.then.26:                                       ; preds = %if.end.9
  br label %do.body

do.body:                                          ; preds = %if.then.26
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %32 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load27 = load i32, i32* %code, align 8
  %bf.clear28 = and i32 %bf.load27, 255
  %cmp29 = icmp eq i32 %bf.clear28, 18
  br i1 %cmp29, label %if.then.62, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common31 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %code32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2
  %bf.load33 = load i32, i32* %code32, align 8
  %bf.clear34 = and i32 %bf.load33, 255
  %cmp35 = icmp eq i32 %bf.clear34, 20
  br i1 %cmp35, label %if.then.62, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common38 = bitcast %union.tree_node* %34 to %struct.tree_common*
  %code39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2
  %bf.load40 = load i32, i32* %code39, align 8
  %bf.clear41 = and i32 %bf.load40, 255
  %cmp42 = icmp eq i32 %bf.clear41, 21
  br i1 %cmp42, label %if.then.62, label %lor.lhs.false.44

lor.lhs.false.44:                                 ; preds = %lor.lhs.false.37
  %35 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common45 = bitcast %union.tree_node* %35 to %struct.tree_common*
  %code46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 2
  %bf.load47 = load i32, i32* %code46, align 8
  %bf.clear48 = and i32 %bf.load47, 255
  %cmp49 = icmp eq i32 %bf.clear48, 22
  br i1 %cmp49, label %if.then.62, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %lor.lhs.false.44
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common52 = bitcast %union.tree_node* %36 to %struct.tree_common*
  %code53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2
  %bf.load54 = load i32, i32* %code53, align 8
  %bf.clear55 = and i32 %bf.load54, 255
  %cmp56 = icmp eq i32 %bf.clear55, 19
  br i1 %cmp56, label %if.then.62, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %lor.lhs.false.51
  %37 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load59 = load i32, i32* %38, align 8
  %bf.lshr = lshr i32 %bf.load59, 28
  %bf.clear60 = and i32 %bf.lshr, 1
  %tobool61 = icmp ne i32 %bf.clear60, 0
  br i1 %tobool61, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %lor.lhs.false.58, %lor.lhs.false.51, %lor.lhs.false.44, %lor.lhs.false.37, %lor.lhs.false, %do.body
  %39 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load63 = load i32, i32* %40, align 8
  %bf.clear64 = and i32 %bf.load63, -268435457
  %bf.set65 = or i32 %bf.clear64, 268435456
  store i32 %bf.set65, i32* %40, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %42 = bitcast %struct.rtx_def* %41 to i32*
  %bf.load66 = load i32, i32* %42, align 8
  %bf.clear67 = and i32 %bf.load66, 2147483647
  store i32 %bf.clear67, i32* %42, align 8
  br label %if.end.73

if.else:                                          ; preds = %lor.lhs.false.58
  %43 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load68 = load i32, i32* %44, align 8
  %bf.clear69 = and i32 %bf.load68, -268435457
  store i32 %bf.clear69, i32* %44, align 8
  %45 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load70 = load i32, i32* %46, align 8
  %bf.clear71 = and i32 %bf.load70, 2147483647
  %bf.set72 = or i32 %bf.clear71, -2147483648
  store i32 %bf.set72, i32* %46, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.else, %if.then.62
  br label %do.end

do.end:                                           ; preds = %if.end.73
  %47 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %48 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call74 = call i64 @get_alias_set(%union.tree_node* %48)
  call void @set_mem_alias_set(%struct.rtx_def* %47, i64 %call74)
  br label %if.end.75

if.end.75:                                        ; preds = %do.end, %if.end.9
  %49 = load i32, i32* %used_p.addr, align 4
  %tobool76 = icmp ne i32 %49, 0
  br i1 %tobool76, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.end.75
  %50 = load %struct.function*, %struct.function** %function.addr, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %53 = load i32, i32* %promoted_mode.addr, align 4
  %54 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  call void @schedule_fixup_var_refs(%struct.function* %50, %struct.rtx_def* %51, %union.tree_node* %52, i32 %53, %struct.hash_table* %54)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.77, %if.end.75
  ret void
}

declare void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #2

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @schedule_fixup_var_refs(%struct.function* %function, %struct.rtx_def* %reg, %union.tree_node* %type, i32 %promoted_mode, %struct.hash_table* %ht) #0 {
entry:
  %function.addr = alloca %struct.function*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %ht.addr = alloca %struct.hash_table*, align 8
  %unsigned_p = alloca i32, align 4
  %temp = alloca %struct.var_refs_queue*, align 8
  store %struct.function* %function, %struct.function** %function.addr, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool = icmp ne %union.tree_node* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %bf.clear, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %unsigned_p, align 4
  %2 = load %struct.function*, %struct.function** %function.addr, align 8
  %cmp = icmp ne %struct.function* %2, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %call = call i8* @ggc_alloc(i64 24)
  %3 = bitcast i8* %call to %struct.var_refs_queue*
  store %struct.var_refs_queue* %3, %struct.var_refs_queue** %temp, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %5 = load %struct.var_refs_queue*, %struct.var_refs_queue** %temp, align 8
  %modified = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %5, i32 0, i32 0
  store %struct.rtx_def* %4, %struct.rtx_def** %modified, align 8
  %6 = load i32, i32* %promoted_mode.addr, align 4
  %7 = load %struct.var_refs_queue*, %struct.var_refs_queue** %temp, align 8
  %promoted_mode1 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %7, i32 0, i32 1
  store i32 %6, i32* %promoted_mode1, align 4
  %8 = load i32, i32* %unsigned_p, align 4
  %9 = load %struct.var_refs_queue*, %struct.var_refs_queue** %temp, align 8
  %unsignedp = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %9, i32 0, i32 2
  store i32 %8, i32* %unsignedp, align 4
  %10 = load %struct.function*, %struct.function** %function.addr, align 8
  %fixup_var_refs_queue = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 43
  %11 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue, align 8
  %12 = load %struct.var_refs_queue*, %struct.var_refs_queue** %temp, align 8
  %next = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %12, i32 0, i32 3
  store %struct.var_refs_queue* %11, %struct.var_refs_queue** %next, align 8
  %13 = load %struct.var_refs_queue*, %struct.var_refs_queue** %temp, align 8
  %14 = load %struct.function*, %struct.function** %function.addr, align 8
  %fixup_var_refs_queue2 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 43
  store %struct.var_refs_queue* %13, %struct.var_refs_queue** %fixup_var_refs_queue2, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %16 = load i32, i32* %promoted_mode.addr, align 4
  %17 = load i32, i32* %unsigned_p, align 4
  %18 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %19 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  call void @fixup_var_refs(%struct.rtx_def* %15, i32 %16, i32 %17, %struct.rtx_def* %18, %struct.hash_table* %19)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_eit(i32, i32, %struct.rtx_def*, i32, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define void @flush_addressof(%union.tree_node* %decl) #0 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 35
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common1 = bitcast %union.tree_node* %1 to %struct.tree_common*
  %code2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2
  %bf.load3 = load i32, i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 34
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl6 = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 17
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool = icmp ne %struct.rtx_def* %3, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl7 = bitcast %union.tree_node* %4 to %struct.tree_decl*
  %rtl8 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 17
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl8, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %6, i8* null)
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl9 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %rtl10 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl9, i32 0, i32 17
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %5, %cond.true ], [ %8, %cond.false ]
  %cmp11 = icmp ne %struct.rtx_def* %cond, null
  br i1 %cmp11, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl13 = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %rtl14 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl13, i32 0, i32 17
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl14, align 8
  %tobool15 = icmp ne %struct.rtx_def* %10, null
  br i1 %tobool15, label %cond.true.16, label %cond.false.19

cond.true.16:                                     ; preds = %land.lhs.true.12
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl17 = bitcast %union.tree_node* %11 to %struct.tree_decl*
  %rtl18 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl17, i32 0, i32 17
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtl18, align 8
  br label %cond.end.22

cond.false.19:                                    ; preds = %land.lhs.true.12
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %13, i8* null)
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl20 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %rtl21 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl20, i32 0, i32 17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl21, align 8
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.false.19, %cond.true.16
  %cond23 = phi %struct.rtx_def* [ %12, %cond.true.16 ], [ %15, %cond.false.19 ]
  %16 = bitcast %struct.rtx_def* %cond23 to i32*
  %bf.load24 = load i32, i32* %16, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 66
  br i1 %cmp26, label %land.lhs.true.27, label %if.end

land.lhs.true.27:                                 ; preds = %cond.end.22
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl28 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %rtl29 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl28, i32 0, i32 17
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl29, align 8
  %tobool30 = icmp ne %struct.rtx_def* %18, null
  br i1 %tobool30, label %cond.true.31, label %cond.false.34

cond.true.31:                                     ; preds = %land.lhs.true.27
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl32 = bitcast %union.tree_node* %19 to %struct.tree_decl*
  %rtl33 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl32, i32 0, i32 17
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl33, align 8
  br label %cond.end.37

cond.false.34:                                    ; preds = %land.lhs.true.27
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %21, i8* null)
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl35 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %rtl36 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl35, i32 0, i32 17
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl36, align 8
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.34, %cond.true.31
  %cond38 = phi %struct.rtx_def* [ %20, %cond.true.31 ], [ %23, %cond.false.34 ]
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond38, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load39 = load i32, i32* %25, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp eq i32 %bf.clear40, 70
  br i1 %cmp41, label %land.lhs.true.42, label %if.end

land.lhs.true.42:                                 ; preds = %cond.end.37
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl43 = bitcast %union.tree_node* %26 to %struct.tree_decl*
  %rtl44 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl43, i32 0, i32 17
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtl44, align 8
  %tobool45 = icmp ne %struct.rtx_def* %27, null
  br i1 %tobool45, label %cond.true.46, label %cond.false.49

cond.true.46:                                     ; preds = %land.lhs.true.42
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl47 = bitcast %union.tree_node* %28 to %struct.tree_decl*
  %rtl48 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl47, i32 0, i32 17
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl48, align 8
  br label %cond.end.52

cond.false.49:                                    ; preds = %land.lhs.true.42
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %30, i8* null)
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl50 = bitcast %union.tree_node* %31 to %struct.tree_decl*
  %rtl51 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl50, i32 0, i32 17
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtl51, align 8
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.false.49, %cond.true.46
  %cond53 = phi %struct.rtx_def* [ %29, %cond.true.46 ], [ %32, %cond.false.49 ]
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond53, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 0
  %rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx56, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 0
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx59, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load60 = load i32, i32* %35, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 61
  br i1 %cmp62, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.52
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl63 = bitcast %union.tree_node* %36 to %struct.tree_decl*
  %rtl64 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl63, i32 0, i32 17
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtl64, align 8
  %tobool65 = icmp ne %struct.rtx_def* %37, null
  br i1 %tobool65, label %cond.true.66, label %cond.false.69

cond.true.66:                                     ; preds = %if.then
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl67 = bitcast %union.tree_node* %38 to %struct.tree_decl*
  %rtl68 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl67, i32 0, i32 17
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtl68, align 8
  br label %cond.end.72

cond.false.69:                                    ; preds = %if.then
  %40 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  call void @make_decl_rtl(%union.tree_node* %40, i8* null)
  %41 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl70 = bitcast %union.tree_node* %41 to %struct.tree_decl*
  %rtl71 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl70, i32 0, i32 17
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtl71, align 8
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.69, %cond.true.66
  %cond73 = phi %struct.rtx_def* [ %39, %cond.true.66 ], [ %42, %cond.false.69 ]
  %fld74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond73, i32 0, i32 1
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i32 0, i64 0
  %rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx76, align 8
  call void @put_addressof_into_stack(%struct.rtx_def* %43, %struct.hash_table* null)
  br label %if.end

if.end:                                           ; preds = %cond.end.72, %cond.end.52, %cond.end.37, %cond.end.22, %cond.end, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @put_addressof_into_stack(%struct.rtx_def* %r, %struct.hash_table* %ht) #0 {
entry:
  %r.addr = alloca %struct.rtx_def*, align 8
  %ht.addr = alloca %struct.hash_table*, align 8
  %decl = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %volatile_p = alloca i32, align 4
  %used_p = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %r, %struct.rtx_def** %r.addr, align 8
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %r.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %reg, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 61
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 2997, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__FUNCTION__.put_addressof_into_stack, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %r.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 2
  %rttree = bitcast %union.rtunion_def* %arrayidx2 to %union.tree_node**
  %5 = load %union.tree_node*, %union.tree_node** %rttree, align 8
  store %union.tree_node* %5, %union.tree_node** %decl, align 8
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool = icmp ne %union.tree_node* %6, null
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %type4, align 8
  store %union.tree_node* %8, %union.tree_node** %type, align 8
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common5 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2
  %bf.load6 = load i32, i32* %code, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  %cmp8 = icmp ne i32 %bf.clear7, 118
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.3
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common9 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %volatile_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2
  %bf.load10 = load i32, i32* %volatile_flag, align 8
  %bf.lshr = lshr i32 %bf.load10, 11
  %bf.clear11 = and i32 %bf.lshr, 1
  %tobool12 = icmp ne i32 %bf.clear11, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.3
  %11 = phi i1 [ false, %if.then.3 ], [ %tobool12, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %volatile_p, align 4
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common13 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2
  %bf.load14 = load i32, i32* %used_flag, align 8
  %bf.lshr15 = lshr i32 %bf.load14, 16
  %bf.clear16 = and i32 %bf.lshr15, 1
  %tobool17 = icmp ne i32 %bf.clear16, 0
  br i1 %tobool17, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.end
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common18 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %code19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2
  %bf.load20 = load i32, i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %idxprom = sext i32 %bf.clear21 to i64
  %arrayidx22 = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %14 = load i8, i8* %arrayidx22, align 1
  %conv = sext i8 %14 to i32
  %cmp23 = icmp eq i32 %conv, 100
  br i1 %cmp23, label %land.rhs.25, label %land.end.29

land.rhs.25:                                      ; preds = %lor.rhs
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl26 = bitcast %union.tree_node* %15 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl26, i32 0, i32 12
  %16 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %cmp27 = icmp ne %union.tree_node* %16, null
  br label %land.end.29

land.end.29:                                      ; preds = %land.rhs.25, %lor.rhs
  %17 = phi i1 [ false, %lor.rhs ], [ %cmp27, %land.rhs.25 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end.29, %land.end
  %18 = phi i1 [ true, %land.end ], [ %17, %land.end.29 ]
  %lor.ext = zext i1 %18 to i32
  store i32 %lor.ext, i32* %used_p, align 4
  br label %if.end.31

if.else:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %type, align 8
  store i32 0, i32* %volatile_p, align 4
  store i32 1, i32* %used_p, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %lor.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load32 = load i32, i32* %22, align 8
  %bf.lshr33 = lshr i32 %bf.load32, 16
  %bf.clear34 = and i32 %bf.lshr33, 255
  %23 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load35 = load i32, i32* %24, align 8
  %bf.lshr36 = lshr i32 %bf.load35, 16
  %bf.clear37 = and i32 %bf.lshr36, 255
  %25 = load i32, i32* %volatile_p, align 4
  %26 = load %struct.rtx_def*, %struct.rtx_def** %r.addr, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx39 to i32*
  %27 = load i32, i32* %rtuint, align 4
  %28 = load i32, i32* %used_p, align 4
  %29 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  call void @put_reg_into_stack(%struct.function* null, %struct.rtx_def* %19, %union.tree_node* %20, i32 %bf.clear34, i32 %bf.clear37, i32 %25, i32 %27, i32 %28, %struct.hash_table* %29)
  ret void
}

; Function Attrs: nounwind uwtable
define void @purge_addressof(%struct.rtx_def* %insns) #0 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %ht = alloca %struct.hash_table, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  call void @hash_table_init(%struct.hash_table* %ht, %struct.hash_entry* (%struct.hash_entry*, %struct.hash_table*, i8*)* @insns_for_mem_newfunc, i64 (i8*)* @insns_for_mem_hash, i1 (i8*, i8*)* @insns_for_mem_comp)
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  call void @compute_insns_for_mem(%struct.rtx_def* %0, %struct.rtx_def* null, %struct.hash_table* %ht)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.40, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %2, null
  br i1 %tobool, label %for.body, label %for.end.44

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load1 = load i32, i32* %6, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 33
  br i1 %cmp3, label %if.then, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load5 = load i32, i32* %8, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 34
  br i1 %cmp7, label %if.then, label %if.end.39

if.then:                                          ; preds = %lor.lhs.false.4, %lor.lhs.false, %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 3
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %call = call i32 @asm_noperands(%struct.rtx_def* %12)
  %cmp11 = icmp sgt i32 %call, 0
  %conv = zext i1 %cmp11 to i32
  %call12 = call zeroext i1 @purge_addressof_1(%struct.rtx_def** %rtx, %struct.rtx_def* %10, i32 %conv, i32 0, %struct.hash_table* %ht)
  br i1 %call12, label %if.end, label %if.then.13

if.then.13:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 3455, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.purge_addressof, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 6
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %call17 = call zeroext i1 @purge_addressof_1(%struct.rtx_def** %rtx16, %struct.rtx_def* null, i32 0, i32 0, %struct.hash_table* %ht)
  br i1 %call17, label %if.end.38, label %if.then.18

if.then.18:                                       ; preds = %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 6
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %note, align 8
  br label %for.cond.22

for.cond.22:                                      ; preds = %for.inc, %if.then.18
  %16 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %tobool23 = icmp ne %struct.rtx_def* %16, null
  br i1 %tobool23, label %for.body.24, label %for.end

for.body.24:                                      ; preds = %for.cond.22
  %17 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load25 = load i32, i32* %18, align 8
  %bf.lshr = lshr i32 %bf.load25, 16
  %bf.clear26 = and i32 %bf.lshr, 255
  %cmp27 = icmp eq i32 %bf.clear26, 6
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %for.body.24
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 3470, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.purge_addressof, i32 0, i32 0)) #6
  unreachable

if.end.30:                                        ; preds = %for.body.24
  %call31 = call i32 @for_each_rtx(%struct.rtx_def** %note, i32 (%struct.rtx_def**, i8*)* @is_addressof, i8* null)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.30
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  call void @remove_note(%struct.rtx_def* %19, %struct.rtx_def* %20)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.end.30
  br label %for.inc

for.inc:                                          ; preds = %if.end.34
  %21 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 1
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %note, align 8
  br label %for.cond.22

for.end:                                          ; preds = %for.cond.22
  br label %if.end.38

if.end.38:                                        ; preds = %for.end, %if.end
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %lor.lhs.false.4
  br label %for.inc.40

for.inc.40:                                       ; preds = %if.end.39
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 2
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx43, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end.44:                                       ; preds = %for.cond
  call void @hash_table_free(%struct.hash_table* %ht)
  store %struct.rtx_def* null, %struct.rtx_def** @purge_bitfield_addressof_replacements, align 8
  store %struct.rtx_def* null, %struct.rtx_def** @purge_addressof_replacements, align 8
  %call45 = call %struct.rtx_def* @get_insns()
  call void @unshare_all_rtl_again(%struct.rtx_def* %call45)
  ret void
}

declare void @hash_table_init(%struct.hash_table*, %struct.hash_entry* (%struct.hash_entry*, %struct.hash_table*, i8*)*, i64 (i8*)*, i1 (i8*, i8*)*) #2

; Function Attrs: nounwind uwtable
define internal %struct.hash_entry* @insns_for_mem_newfunc(%struct.hash_entry* %he, %struct.hash_table* %ht, i8* %k) #0 {
entry:
  %retval = alloca %struct.hash_entry*, align 8
  %he.addr = alloca %struct.hash_entry*, align 8
  %ht.addr = alloca %struct.hash_table*, align 8
  %k.addr = alloca i8*, align 8
  %ifmhe = alloca %struct.insns_for_mem_entry*, align 8
  store %struct.hash_entry* %he, %struct.hash_entry** %he.addr, align 8
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  store i8* %k, i8** %k.addr, align 8
  %0 = load %struct.hash_entry*, %struct.hash_entry** %he.addr, align 8
  %tobool = icmp ne %struct.hash_entry* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.hash_entry*, %struct.hash_entry** %he.addr, align 8
  store %struct.hash_entry* %1, %struct.hash_entry** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %call = call i8* @hash_allocate(%struct.hash_table* %2, i32 32)
  %3 = bitcast i8* %call to %struct.insns_for_mem_entry*
  store %struct.insns_for_mem_entry* %3, %struct.insns_for_mem_entry** %ifmhe, align 8
  %4 = load %struct.insns_for_mem_entry*, %struct.insns_for_mem_entry** %ifmhe, align 8
  %insns = getelementptr inbounds %struct.insns_for_mem_entry, %struct.insns_for_mem_entry* %4, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %insns, align 8
  %5 = load %struct.insns_for_mem_entry*, %struct.insns_for_mem_entry** %ifmhe, align 8
  %he1 = getelementptr inbounds %struct.insns_for_mem_entry, %struct.insns_for_mem_entry* %5, i32 0, i32 0
  store %struct.hash_entry* %he1, %struct.hash_entry** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.hash_entry*, %struct.hash_entry** %retval
  ret %struct.hash_entry* %6
}

; Function Attrs: nounwind uwtable
define internal i64 @insns_for_mem_hash(i8* %k) #0 {
entry:
  %k.addr = alloca i8*, align 8
  store i8* %k, i8** %k.addr, align 8
  %0 = load i8*, i8** %k.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @insns_for_mem_comp(i8* %k1, i8* %k2) #0 {
entry:
  %k1.addr = alloca i8*, align 8
  %k2.addr = alloca i8*, align 8
  store i8* %k1, i8** %k1.addr, align 8
  store i8* %k2, i8** %k2.addr, align 8
  %0 = load i8*, i8** %k1.addr, align 8
  %1 = load i8*, i8** %k2.addr, align 8
  %cmp = icmp eq i8* %0, %1
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define internal void @compute_insns_for_mem(%struct.rtx_def* %insns, %struct.rtx_def* %last_insn, %struct.hash_table* %ht) #0 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %last_insn.addr = alloca %struct.rtx_def*, align 8
  %ht.addr = alloca %struct.hash_table*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %ifmwi = alloca %struct.insns_for_mem_walk_info, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %last_insn, %struct.rtx_def** %last_insn.addr, align 8
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  %0 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %ht1 = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %ifmwi, i32 0, i32 0
  store %struct.hash_table* %0, %struct.hash_table** %ht1, align 8
  %pass = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %ifmwi, i32 0, i32 2
  store i32 0, i32* %pass, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.10, %entry
  %pass2 = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %ifmwi, i32 0, i32 2
  %1 = load i32, i32* %pass2, align 4
  %cmp = icmp slt i32 %1, 2
  br i1 %cmp, label %for.body, label %for.end.12

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %for.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last_insn.addr, align 8
  %cmp4 = icmp ne %struct.rtx_def* %3, %4
  br i1 %cmp4, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.3
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp6 = icmp eq i32 %conv, 105
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.5
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %insn8 = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %ifmwi, i32 0, i32 1
  store %struct.rtx_def* %8, %struct.rtx_def** %insn8, align 8
  %9 = bitcast %struct.insns_for_mem_walk_info* %ifmwi to i8*
  %call = call i32 @for_each_rtx(%struct.rtx_def** %insn, i32 (%struct.rtx_def**, i8*)* @insns_for_mem_walk, i8* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.5
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %for.inc.10

for.inc.10:                                       ; preds = %for.end
  %pass11 = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %ifmwi, i32 0, i32 2
  %12 = load i32, i32* %pass11, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %pass11, align 4
  br label %for.cond

for.end.12:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @purge_addressof_1(%struct.rtx_def** %loc, %struct.rtx_def* %insn, i32 %force, i32 %store, %struct.hash_table* %ht) #0 {
entry:
  %retval = alloca i1, align 1
  %loc.addr = alloca %struct.rtx_def**, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %force.addr = alloca i32, align 4
  %store.addr = alloca i32, align 4
  %ht.addr = alloca %struct.hash_table*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %result = alloca i8, align 1
  %sub = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %sub59 = alloca %struct.rtx_def*, align 8
  %size_x = alloca i32, align 4
  %size_sub = alloca i32, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %z = alloca %struct.rtx_def*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %p314 = alloca %struct.rtx_def*, align 8
  %tem365 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %loc, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %force, i32* %force.addr, align 4
  store i32 %store, i32* %store.addr, align 4
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  store i8 1, i8* %result, align 1
  br label %restart

restart:                                          ; preds = %if.end.399, %entry
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %cmp = icmp eq %struct.rtx_def* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %restart
  store i1 true, i1* %retval
  br label %return

if.end:                                           ; preds = %restart
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %5 = load i32, i32* %code, align 4
  %cmp1 = icmp eq i32 %5, 47
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %8 = load i32, i32* %force.addr, align 4
  %9 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %call = call zeroext i1 @purge_addressof_1(%struct.rtx_def** %rtx, %struct.rtx_def* %7, i32 %8, i32 1, %struct.hash_table* %9)
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %result, align 1
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 1
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %12 = load i32, i32* %force.addr, align 4
  %13 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %call6 = call zeroext i1 @purge_addressof_1(%struct.rtx_def** %rtx5, %struct.rtx_def* %11, i32 %12, i32 0, %struct.hash_table* %13)
  %conv = zext i1 %call6 to i32
  %14 = load i8, i8* %result, align 1
  %tobool = trunc i8 %14 to i1
  %conv7 = zext i1 %tobool to i32
  %and = and i32 %conv7, %conv
  %tobool8 = icmp ne i32 %and, 0
  %frombool9 = zext i1 %tobool8 to i8
  store i8 %frombool9, i8* %result, align 1
  %15 = load i8, i8* %result, align 1
  %tobool10 = trunc i8 %15 to i1
  store i1 %tobool10, i1* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %16 = load i32, i32* %code, align 4
  %cmp11 = icmp eq i32 %16, 70
  br i1 %cmp11, label %if.then.13, label %if.else.45

if.then.13:                                       ; preds = %if.else
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load17 = load i32, i32* %19, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp ne i32 %bf.clear18, 66
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.then.13
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %21 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  call void @put_addressof_into_stack(%struct.rtx_def* %20, %struct.hash_table* %21)
  store i1 true, i1* %retval
  br label %return

if.end.22:                                        ; preds = %if.then.13
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 0
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  %call29 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %24)
  store %struct.rtx_def* %call29, %struct.rtx_def** %sub, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %call30 = call i32 @validate_change(%struct.rtx_def* %25, %struct.rtx_def** %26, %struct.rtx_def* %27, i32 0)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then.34, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.22
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call32 = call i32 @validate_replace_rtx(%struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* %30)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %lor.lhs.false, %if.end.22
  store i1 true, i1* %retval
  br label %return

if.end.35:                                        ; preds = %lor.lhs.false
  call void @start_sequence()
  %31 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %call36 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %31, %struct.rtx_def* null)
  store %struct.rtx_def* %call36, %struct.rtx_def** %sub, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %call37 = call i32 @validate_change(%struct.rtx_def* %32, %struct.rtx_def** %33, %struct.rtx_def* %34, i32 0)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end.42, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.35
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call39 = call i32 @validate_replace_rtx(%struct.rtx_def* %35, %struct.rtx_def* %36, %struct.rtx_def* %37)
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 3088, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.purge_addressof_1, i32 0, i32 0)) #6
  unreachable

if.end.42:                                        ; preds = %land.lhs.true, %if.end.35
  %call43 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call43, %struct.rtx_def** %insns, align 8
  call void @end_sequence()
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call44 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %38, %struct.rtx_def* %39)
  store i1 true, i1* %retval
  br label %return

if.else.45:                                       ; preds = %if.else
  %40 = load i32, i32* %code, align 4
  %cmp46 = icmp eq i32 %40, 66
  br i1 %cmp46, label %land.lhs.true.48, label %if.end.404

land.lhs.true.48:                                 ; preds = %if.else.45
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  %43 = bitcast %struct.rtx_def* %42 to i32*
  %bf.load52 = load i32, i32* %43, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 70
  br i1 %cmp54, label %land.lhs.true.56, label %if.end.404

land.lhs.true.56:                                 ; preds = %land.lhs.true.48
  %44 = load i32, i32* %force.addr, align 4
  %tobool57 = icmp ne i32 %44, 0
  br i1 %tobool57, label %if.end.404, label %if.then.58

if.then.58:                                       ; preds = %land.lhs.true.56
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 0
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx62, align 8
  %fld63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i32 0, i64 0
  %rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx65, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %sub59, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load66 = load i32, i32* %49, align 8
  %bf.clear67 = and i32 %bf.load66, 65535
  %cmp68 = icmp eq i32 %bf.clear67, 66
  br i1 %cmp68, label %if.then.70, label %if.else.74

if.then.70:                                       ; preds = %if.then.58
  %50 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %52 = bitcast %struct.rtx_def* %51 to i32*
  %bf.load71 = load i32, i32* %52, align 8
  %bf.lshr = lshr i32 %bf.load71, 16
  %bf.clear72 = and i32 %bf.lshr, 255
  %call73 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %50, i32 %bf.clear72, i64 0, i32 0, i32 1)
  store %struct.rtx_def* %call73, %struct.rtx_def** %sub59, align 8
  br label %if.end.403

if.else.74:                                       ; preds = %if.then.58
  %53 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %54 = bitcast %struct.rtx_def* %53 to i32*
  %bf.load75 = load i32, i32* %54, align 8
  %bf.clear76 = and i32 %bf.load75, 65535
  %cmp77 = icmp eq i32 %bf.clear76, 61
  br i1 %cmp77, label %land.lhs.true.79, label %if.else.91

land.lhs.true.79:                                 ; preds = %if.else.74
  %55 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load80 = load i32, i32* %56, align 8
  %bf.lshr81 = lshr i32 %bf.load80, 27
  %bf.clear82 = and i32 %bf.lshr81, 1
  %tobool83 = icmp ne i32 %bf.clear82, 0
  br i1 %tobool83, label %if.then.90, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %land.lhs.true.79
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load85 = load i32, i32* %58, align 8
  %bf.lshr86 = lshr i32 %bf.load85, 16
  %bf.clear87 = and i32 %bf.lshr86, 255
  %cmp88 = icmp eq i32 %bf.clear87, 51
  br i1 %cmp88, label %if.then.90, label %if.else.91

if.then.90:                                       ; preds = %lor.lhs.false.84, %land.lhs.true.79
  br label %if.end.402

if.else.91:                                       ; preds = %lor.lhs.false.84, %if.else.74
  %59 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %60 = bitcast %struct.rtx_def* %59 to i32*
  %bf.load92 = load i32, i32* %60, align 8
  %bf.clear93 = and i32 %bf.load92, 65535
  %cmp94 = icmp eq i32 %bf.clear93, 61
  br i1 %cmp94, label %land.lhs.true.96, label %if.else.351

land.lhs.true.96:                                 ; preds = %if.else.91
  %61 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %62 = bitcast %struct.rtx_def* %61 to i32*
  %bf.load97 = load i32, i32* %62, align 8
  %bf.lshr98 = lshr i32 %bf.load97, 16
  %bf.clear99 = and i32 %bf.lshr98, 255
  %63 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %64 = bitcast %struct.rtx_def* %63 to i32*
  %bf.load100 = load i32, i32* %64, align 8
  %bf.lshr101 = lshr i32 %bf.load100, 16
  %bf.clear102 = and i32 %bf.lshr101, 255
  %cmp103 = icmp ne i32 %bf.clear99, %bf.clear102
  br i1 %cmp103, label %if.then.105, label %if.else.351

if.then.105:                                      ; preds = %land.lhs.true.96
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %tobool106 = icmp ne %struct.rtx_def* %65, null
  br i1 %tobool106, label %if.end.238, label %if.then.107

if.then.107:                                      ; preds = %if.then.105
  %66 = load %struct.rtx_def*, %struct.rtx_def** @purge_bitfield_addressof_replacements, align 8
  store %struct.rtx_def* %66, %struct.rtx_def** %tem, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.107
  %67 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %cmp108 = icmp ne %struct.rtx_def* %67, null
  br i1 %cmp108, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %68 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i32 0, i64 0
  %rtx112 = bitcast %union.rtunion_def* %arrayidx111 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtx112, align 8
  %call113 = call i32 @rtx_equal_p(%struct.rtx_def* %68, %struct.rtx_def* %70)
  %tobool114 = icmp ne i32 %call113, 0
  br i1 %tobool114, label %if.then.115, label %if.end.122

if.then.115:                                      ; preds = %for.body
  %71 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i32 0, i64 1
  %rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rtx118, align 8
  %fld119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i32 0, i64 0
  %rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx121, align 8
  %74 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %73, %struct.rtx_def** %74, align 8
  store i1 true, i1* %retval
  br label %return

if.end.122:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.122
  %75 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 1
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx125, align 8
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 1
  %rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtx128, align 8
  store %struct.rtx_def* %77, %struct.rtx_def** %tem, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %78 = load %struct.rtx_def*, %struct.rtx_def** @purge_addressof_replacements, align 8
  store %struct.rtx_def* %78, %struct.rtx_def** %tem, align 8
  br label %for.cond.129

for.cond.129:                                     ; preds = %for.inc.230, %for.end
  %79 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %cmp130 = icmp ne %struct.rtx_def* %79, null
  br i1 %cmp130, label %for.body.132, label %for.end.237

for.body.132:                                     ; preds = %for.cond.129
  %80 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i32 0, i64 0
  %rtx135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtx_def**
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtx135, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld136, i32 0, i64 0
  %rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rtx138, align 8
  %call139 = call i32 @rtx_equal_p(%struct.rtx_def* %81, %struct.rtx_def* %83)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.then.141, label %if.end.229

if.then.141:                                      ; preds = %for.body.132
  %84 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i32 0, i64 1
  %rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rtx144, align 8
  %fld145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i32 0, i64 0
  %rtx147 = bitcast %union.rtunion_def* %arrayidx146 to %struct.rtx_def**
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rtx147, align 8
  store %struct.rtx_def* %86, %struct.rtx_def** %z, align 8
  %87 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %88 = bitcast %struct.rtx_def* %87 to i32*
  %bf.load148 = load i32, i32* %88, align 8
  %bf.lshr149 = lshr i32 %bf.load148, 16
  %bf.clear150 = and i32 %bf.lshr149, 255
  %89 = load %struct.rtx_def*, %struct.rtx_def** %z, align 8
  %90 = bitcast %struct.rtx_def* %89 to i32*
  %bf.load151 = load i32, i32* %90, align 8
  %bf.lshr152 = lshr i32 %bf.load151, 16
  %bf.clear153 = and i32 %bf.lshr152, 255
  %cmp154 = icmp eq i32 %bf.clear150, %bf.clear153
  br i1 %cmp154, label %if.then.178, label %lor.lhs.false.156

lor.lhs.false.156:                                ; preds = %if.then.141
  %91 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i32 0, i64 1
  %rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rtx159, align 8
  %fld160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i32 0, i64 0
  %rtx162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.rtx_def**
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rtx162, align 8
  %94 = bitcast %struct.rtx_def* %93 to i32*
  %bf.load163 = load i32, i32* %94, align 8
  %bf.clear164 = and i32 %bf.load163, 65535
  %cmp165 = icmp ne i32 %bf.clear164, 61
  br i1 %cmp165, label %land.lhs.true.167, label %if.end.179

land.lhs.true.167:                                ; preds = %lor.lhs.false.156
  %95 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld168 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i32 0, i64 1
  %rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtx170, align 8
  %fld171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i32 0, i64 0
  %rtx173 = bitcast %union.rtunion_def* %arrayidx172 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx173, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load174 = load i32, i32* %98, align 8
  %bf.clear175 = and i32 %bf.load174, 65535
  %cmp176 = icmp ne i32 %bf.clear175, 63
  br i1 %cmp176, label %if.then.178, label %if.end.179

if.then.178:                                      ; preds = %land.lhs.true.167, %if.then.141
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 3136, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.purge_addressof_1, i32 0, i32 0)) #6
  unreachable

if.end.179:                                       ; preds = %land.lhs.true.167, %lor.lhs.false.156
  %99 = load %struct.rtx_def*, %struct.rtx_def** %z, align 8
  %100 = bitcast %struct.rtx_def* %99 to i32*
  %bf.load180 = load i32, i32* %100, align 8
  %bf.clear181 = and i32 %bf.load180, 65535
  %cmp182 = icmp eq i32 %bf.clear181, 63
  br i1 %cmp182, label %land.lhs.true.184, label %if.end.193

land.lhs.true.184:                                ; preds = %if.end.179
  %101 = load %struct.rtx_def*, %struct.rtx_def** %z, align 8
  %fld185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i32 0, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx186 to i32*
  %102 = load i32, i32* %rtuint, align 4
  %cmp187 = icmp eq i32 %102, 0
  br i1 %cmp187, label %if.then.189, label %if.end.193

if.then.189:                                      ; preds = %land.lhs.true.184
  %103 = load %struct.rtx_def*, %struct.rtx_def** %z, align 8
  %fld190 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i32 0, i64 0
  %rtx192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.rtx_def**
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rtx192, align 8
  store %struct.rtx_def* %104, %struct.rtx_def** %z, align 8
  br label %if.end.193

if.end.193:                                       ; preds = %if.then.189, %land.lhs.true.184, %if.end.179
  %105 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %106 = bitcast %struct.rtx_def* %105 to i32*
  %bf.load194 = load i32, i32* %106, align 8
  %bf.lshr195 = lshr i32 %bf.load194, 16
  %bf.clear196 = and i32 %bf.lshr195, 255
  %idxprom = sext i32 %bf.clear196 to i64
  %arrayidx197 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %107 = load i8, i8* %arrayidx197, align 1
  %conv198 = zext i8 %107 to i32
  %108 = load i32, i32* @target_flags, align 4
  %and199 = and i32 %108, 33554432
  %tobool200 = icmp ne i32 %and199, 0
  %cond = select i1 %tobool200, i32 8, i32 4
  %cmp201 = icmp sgt i32 %conv198, %cond
  br i1 %cmp201, label %land.lhs.true.203, label %if.else.223

land.lhs.true.203:                                ; preds = %if.end.193
  %109 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %110 = bitcast %struct.rtx_def* %109 to i32*
  %bf.load204 = load i32, i32* %110, align 8
  %bf.lshr205 = lshr i32 %bf.load204, 16
  %bf.clear206 = and i32 %bf.lshr205, 255
  %idxprom207 = sext i32 %bf.clear206 to i64
  %arrayidx208 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom207
  %111 = load i8, i8* %arrayidx208, align 1
  %conv209 = zext i8 %111 to i32
  %112 = load %struct.rtx_def*, %struct.rtx_def** %z, align 8
  %113 = bitcast %struct.rtx_def* %112 to i32*
  %bf.load210 = load i32, i32* %113, align 8
  %bf.lshr211 = lshr i32 %bf.load210, 16
  %bf.clear212 = and i32 %bf.lshr211, 255
  %idxprom213 = sext i32 %bf.clear212 to i64
  %arrayidx214 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom213
  %114 = load i8, i8* %arrayidx214, align 1
  %conv215 = zext i8 %114 to i32
  %cmp216 = icmp sgt i32 %conv209, %conv215
  br i1 %cmp216, label %if.then.218, label %if.else.223

if.then.218:                                      ; preds = %land.lhs.true.203
  %115 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %116 = bitcast %struct.rtx_def* %115 to i32*
  %bf.load219 = load i32, i32* %116, align 8
  %bf.lshr220 = lshr i32 %bf.load219, 16
  %bf.clear221 = and i32 %bf.lshr220, 255
  %117 = load %struct.rtx_def*, %struct.rtx_def** %z, align 8
  %call222 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %bf.clear221, %struct.rtx_def* %117, i32 0)
  store %struct.rtx_def* %call222, %struct.rtx_def** %z, align 8
  br label %if.end.228

if.else.223:                                      ; preds = %land.lhs.true.203, %if.end.193
  %118 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %119 = bitcast %struct.rtx_def* %118 to i32*
  %bf.load224 = load i32, i32* %119, align 8
  %bf.lshr225 = lshr i32 %bf.load224, 16
  %bf.clear226 = and i32 %bf.lshr225, 255
  %120 = load %struct.rtx_def*, %struct.rtx_def** %z, align 8
  %call227 = call %struct.rtx_def* @gen_lowpart(i32 %bf.clear226, %struct.rtx_def* %120)
  store %struct.rtx_def* %call227, %struct.rtx_def** %z, align 8
  br label %if.end.228

if.end.228:                                       ; preds = %if.else.223, %if.then.218
  %121 = load %struct.rtx_def*, %struct.rtx_def** %z, align 8
  %122 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %121, %struct.rtx_def** %122, align 8
  store i1 true, i1* %retval
  br label %return

if.end.229:                                       ; preds = %for.body.132
  br label %for.inc.230

for.inc.230:                                      ; preds = %if.end.229
  %123 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld231 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx232 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld231, i32 0, i64 1
  %rtx233 = bitcast %union.rtunion_def* %arrayidx232 to %struct.rtx_def**
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtx233, align 8
  %fld234 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx235 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld234, i32 0, i64 1
  %rtx236 = bitcast %union.rtunion_def* %arrayidx235 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rtx236, align 8
  store %struct.rtx_def* %125, %struct.rtx_def** %tem, align 8
  br label %for.cond.129

for.end.237:                                      ; preds = %for.cond.129
  store i1 false, i1* %retval
  br label %return

if.end.238:                                       ; preds = %if.then.105
  %126 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load239 = load i32, i32* %127, align 8
  %bf.lshr240 = lshr i32 %bf.load239, 16
  %bf.clear241 = and i32 %bf.lshr240, 255
  %idxprom242 = sext i32 %bf.clear241 to i64
  %arrayidx243 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom242
  %128 = load i16, i16* %arrayidx243, align 2
  %conv244 = zext i16 %128 to i32
  store i32 %conv244, i32* %size_x, align 4
  %129 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load245 = load i32, i32* %130, align 8
  %bf.lshr246 = lshr i32 %bf.load245, 16
  %bf.clear247 = and i32 %bf.lshr246, 255
  %idxprom248 = sext i32 %bf.clear247 to i64
  %arrayidx249 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom248
  %131 = load i16, i16* %arrayidx249, align 2
  %conv250 = zext i16 %131 to i32
  store i32 %conv250, i32* %size_sub, align 4
  %132 = load i32, i32* %size_x, align 4
  %133 = load i32, i32* %size_sub, align 4
  %cmp251 = icmp sle i32 %132, %133
  br i1 %cmp251, label %land.lhs.true.253, label %if.end.350

land.lhs.true.253:                                ; preds = %if.end.238
  %134 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %135 = bitcast %struct.rtx_def* %134 to i32*
  %bf.load254 = load i32, i32* %135, align 8
  %bf.lshr255 = lshr i32 %bf.load254, 16
  %bf.clear256 = and i32 %bf.lshr255, 255
  %call257 = call i32 @int_mode_for_mode(i32 %bf.clear256)
  %cmp258 = icmp ne i32 %call257, 51
  br i1 %cmp258, label %if.then.260, label %if.end.350

if.then.260:                                      ; preds = %land.lhs.true.253
  %136 = load i32, i32* %store.addr, align 4
  %tobool261 = icmp ne i32 %136, 0
  br i1 %tobool261, label %if.then.262, label %if.else.313

if.then.262:                                      ; preds = %if.then.260
  %137 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i32 0, i64 1
  %rtx265 = bitcast %union.rtunion_def* %arrayidx264 to %struct.rtx_def**
  %138 = load %struct.rtx_def*, %struct.rtx_def** %rtx265, align 8
  store %struct.rtx_def* %138, %struct.rtx_def** %p, align 8
  call void @start_sequence()
  %139 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %140 = bitcast %struct.rtx_def* %139 to i32*
  %bf.load266 = load i32, i32* %140, align 8
  %bf.lshr267 = lshr i32 %bf.load266, 16
  %bf.clear268 = and i32 %bf.lshr267, 255
  %call269 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear268)
  store %struct.rtx_def* %call269, %struct.rtx_def** %val, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %142 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %143 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %call270 = call i32 @validate_change(%struct.rtx_def* %141, %struct.rtx_def** %142, %struct.rtx_def* %143, i32 0)
  %tobool271 = icmp ne i32 %call270, 0
  br i1 %tobool271, label %if.end.273, label %if.then.272

if.then.272:                                      ; preds = %if.then.262
  call void @end_sequence()
  br label %give_up

if.end.273:                                       ; preds = %if.then.262
  %call274 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call274, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %144 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %145 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call275 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %144, %struct.rtx_def* %145)
  %146 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %tobool276 = icmp ne %struct.rtx_def* %146, null
  br i1 %tobool276, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.273
  %147 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld277 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1
  %arrayidx278 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld277, i32 0, i64 2
  %rtx279 = bitcast %union.rtunion_def* %arrayidx278 to %struct.rtx_def**
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rtx279, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.273
  %call280 = call %struct.rtx_def* @get_insns()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond281 = phi %struct.rtx_def* [ %148, %cond.true ], [ %call280, %cond.false ]
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %150 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  call void @compute_insns_for_mem(%struct.rtx_def* %cond281, %struct.rtx_def* %149, %struct.hash_table* %150)
  call void @start_sequence()
  %151 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %152 = load i32, i32* %size_x, align 4
  %conv282 = sext i32 %152 to i64
  %153 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %154 = bitcast %struct.rtx_def* %153 to i32*
  %bf.load283 = load i32, i32* %154, align 8
  %bf.lshr284 = lshr i32 %bf.load283, 16
  %bf.clear285 = and i32 %bf.lshr284, 255
  %155 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %156 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %157 = bitcast %struct.rtx_def* %156 to i32*
  %bf.load286 = load i32, i32* %157, align 8
  %bf.lshr287 = lshr i32 %bf.load286, 16
  %bf.clear288 = and i32 %bf.lshr287, 255
  %idxprom289 = sext i32 %bf.clear288 to i64
  %arrayidx290 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom289
  %158 = load i8, i8* %arrayidx290, align 1
  %conv291 = zext i8 %158 to i64
  %call292 = call %struct.rtx_def* @store_bit_field(%struct.rtx_def* %151, i64 %conv282, i64 0, i32 %bf.clear285, %struct.rtx_def* %155, i64 %conv291)
  %call293 = call %struct.rtx_def* @get_insns()
  call void @unshare_all_rtl_again(%struct.rtx_def* %call293)
  %call294 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call294, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %159 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call295 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %159, %struct.rtx_def* %160)
  store %struct.rtx_def* %call295, %struct.rtx_def** %p, align 8
  %161 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld296 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1
  %arrayidx297 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld296, i32 0, i64 2
  %rtx298 = bitcast %union.rtunion_def* %arrayidx297 to %struct.rtx_def**
  %162 = load %struct.rtx_def*, %struct.rtx_def** %rtx298, align 8
  %tobool299 = icmp ne %struct.rtx_def* %162, null
  br i1 %tobool299, label %if.then.300, label %if.end.312

if.then.300:                                      ; preds = %cond.end
  %163 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld301 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %arrayidx302 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld301, i32 0, i64 2
  %rtx303 = bitcast %union.rtunion_def* %arrayidx302 to %struct.rtx_def**
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rtx303, align 8
  %165 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %tobool304 = icmp ne %struct.rtx_def* %165, null
  br i1 %tobool304, label %cond.true.305, label %cond.false.309

cond.true.305:                                    ; preds = %if.then.300
  %166 = load %struct.rtx_def*, %struct.rtx_def** %p, align 8
  %fld306 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %166, i32 0, i32 1
  %arrayidx307 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld306, i32 0, i64 2
  %rtx308 = bitcast %union.rtunion_def* %arrayidx307 to %struct.rtx_def**
  %167 = load %struct.rtx_def*, %struct.rtx_def** %rtx308, align 8
  br label %cond.end.310

cond.false.309:                                   ; preds = %if.then.300
  br label %cond.end.310

cond.end.310:                                     ; preds = %cond.false.309, %cond.true.305
  %cond311 = phi %struct.rtx_def* [ %167, %cond.true.305 ], [ null, %cond.false.309 ]
  %168 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  call void @compute_insns_for_mem(%struct.rtx_def* %164, %struct.rtx_def* %cond311, %struct.hash_table* %168)
  br label %if.end.312

if.end.312:                                       ; preds = %cond.end.310, %cond.end
  br label %if.end.347

if.else.313:                                      ; preds = %if.then.260
  %169 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld315 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1
  %arrayidx316 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld315, i32 0, i64 1
  %rtx317 = bitcast %union.rtunion_def* %arrayidx316 to %struct.rtx_def**
  %170 = load %struct.rtx_def*, %struct.rtx_def** %rtx317, align 8
  store %struct.rtx_def* %170, %struct.rtx_def** %p314, align 8
  call void @start_sequence()
  %171 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %172 = load i32, i32* %size_x, align 4
  %conv318 = sext i32 %172 to i64
  %173 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %174 = bitcast %struct.rtx_def* %173 to i32*
  %bf.load319 = load i32, i32* %174, align 8
  %bf.lshr320 = lshr i32 %bf.load319, 16
  %bf.clear321 = and i32 %bf.lshr320, 255
  %175 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load322 = load i32, i32* %176, align 8
  %bf.lshr323 = lshr i32 %bf.load322, 16
  %bf.clear324 = and i32 %bf.lshr323, 255
  %177 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %178 = bitcast %struct.rtx_def* %177 to i32*
  %bf.load325 = load i32, i32* %178, align 8
  %bf.lshr326 = lshr i32 %bf.load325, 16
  %bf.clear327 = and i32 %bf.lshr326, 255
  %idxprom328 = sext i32 %bf.clear327 to i64
  %arrayidx329 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom328
  %179 = load i8, i8* %arrayidx329, align 1
  %conv330 = zext i8 %179 to i64
  %call331 = call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %171, i64 %conv318, i64 0, i32 1, %struct.rtx_def* null, i32 %bf.clear321, i32 %bf.clear324, i64 %conv330)
  store %struct.rtx_def* %call331, %struct.rtx_def** %val, align 8
  %180 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %181 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %182 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %call332 = call i32 @validate_change(%struct.rtx_def* %180, %struct.rtx_def** %181, %struct.rtx_def* %182, i32 0)
  %tobool333 = icmp ne i32 %call332, 0
  br i1 %tobool333, label %if.end.335, label %if.then.334

if.then.334:                                      ; preds = %if.else.313
  call void @end_sequence()
  br label %give_up

if.end.335:                                       ; preds = %if.else.313
  %call336 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call336, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %183 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %184 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call337 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %183, %struct.rtx_def* %184)
  %185 = load %struct.rtx_def*, %struct.rtx_def** %p314, align 8
  %tobool338 = icmp ne %struct.rtx_def* %185, null
  br i1 %tobool338, label %cond.true.339, label %cond.false.343

cond.true.339:                                    ; preds = %if.end.335
  %186 = load %struct.rtx_def*, %struct.rtx_def** %p314, align 8
  %fld340 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %186, i32 0, i32 1
  %arrayidx341 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld340, i32 0, i64 2
  %rtx342 = bitcast %union.rtunion_def* %arrayidx341 to %struct.rtx_def**
  %187 = load %struct.rtx_def*, %struct.rtx_def** %rtx342, align 8
  br label %cond.end.345

cond.false.343:                                   ; preds = %if.end.335
  %call344 = call %struct.rtx_def* @get_insns()
  br label %cond.end.345

cond.end.345:                                     ; preds = %cond.false.343, %cond.true.339
  %cond346 = phi %struct.rtx_def* [ %187, %cond.true.339 ], [ %call344, %cond.false.343 ]
  %188 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %189 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  call void @compute_insns_for_mem(%struct.rtx_def* %cond346, %struct.rtx_def* %188, %struct.hash_table* %189)
  br label %if.end.347

if.end.347:                                       ; preds = %cond.end.345, %if.end.312
  %190 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %191 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8
  %192 = load %struct.rtx_def*, %struct.rtx_def** @purge_bitfield_addressof_replacements, align 8
  %call348 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %191, %struct.rtx_def* %192)
  %call349 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %190, %struct.rtx_def* %call348)
  store %struct.rtx_def* %call349, %struct.rtx_def** @purge_bitfield_addressof_replacements, align 8
  store i1 true, i1* %retval
  br label %return

if.end.350:                                       ; preds = %land.lhs.true.253, %if.end.238
  br label %if.end.401

if.else.351:                                      ; preds = %land.lhs.true.96, %if.else.91
  %193 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %194 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %195 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %call352 = call i32 @validate_change(%struct.rtx_def* %193, %struct.rtx_def** %194, %struct.rtx_def* %195, i32 0)
  %tobool353 = icmp ne i32 %call352, 0
  br i1 %tobool353, label %if.then.354, label %if.end.400

if.then.354:                                      ; preds = %if.else.351
  %196 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %197 = bitcast %struct.rtx_def* %196 to i32*
  %bf.load355 = load i32, i32* %197, align 8
  %bf.clear356 = and i32 %bf.load355, 65535
  %cmp357 = icmp eq i32 %bf.clear356, 61
  br i1 %cmp357, label %if.then.364, label %lor.lhs.false.359

lor.lhs.false.359:                                ; preds = %if.then.354
  %198 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %199 = bitcast %struct.rtx_def* %198 to i32*
  %bf.load360 = load i32, i32* %199, align 8
  %bf.clear361 = and i32 %bf.load360, 65535
  %cmp362 = icmp eq i32 %bf.clear361, 63
  br i1 %cmp362, label %if.then.364, label %if.end.399

if.then.364:                                      ; preds = %lor.lhs.false.359, %if.then.354
  %200 = load %struct.rtx_def*, %struct.rtx_def** @purge_addressof_replacements, align 8
  store %struct.rtx_def* %200, %struct.rtx_def** %tem365, align 8
  br label %for.cond.366

for.cond.366:                                     ; preds = %for.inc.386, %if.then.364
  %201 = load %struct.rtx_def*, %struct.rtx_def** %tem365, align 8
  %cmp367 = icmp ne %struct.rtx_def* %201, null
  br i1 %cmp367, label %for.body.369, label %for.end.393

for.body.369:                                     ; preds = %for.cond.366
  %202 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld370 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %202, i32 0, i32 1
  %arrayidx371 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld370, i32 0, i64 0
  %rtx372 = bitcast %union.rtunion_def* %arrayidx371 to %struct.rtx_def**
  %203 = load %struct.rtx_def*, %struct.rtx_def** %rtx372, align 8
  %204 = load %struct.rtx_def*, %struct.rtx_def** %tem365, align 8
  %fld373 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1
  %arrayidx374 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld373, i32 0, i64 0
  %rtx375 = bitcast %union.rtunion_def* %arrayidx374 to %struct.rtx_def**
  %205 = load %struct.rtx_def*, %struct.rtx_def** %rtx375, align 8
  %call376 = call i32 @rtx_equal_p(%struct.rtx_def* %203, %struct.rtx_def* %205)
  %tobool377 = icmp ne i32 %call376, 0
  br i1 %tobool377, label %if.then.378, label %if.end.385

if.then.378:                                      ; preds = %for.body.369
  %206 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %207 = load %struct.rtx_def*, %struct.rtx_def** %tem365, align 8
  %fld379 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %207, i32 0, i32 1
  %arrayidx380 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld379, i32 0, i64 1
  %rtx381 = bitcast %union.rtunion_def* %arrayidx380 to %struct.rtx_def**
  %208 = load %struct.rtx_def*, %struct.rtx_def** %rtx381, align 8
  %fld382 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %208, i32 0, i32 1
  %arrayidx383 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld382, i32 0, i64 0
  %rtx384 = bitcast %union.rtunion_def* %arrayidx383 to %struct.rtx_def**
  store %struct.rtx_def* %206, %struct.rtx_def** %rtx384, align 8
  store i1 true, i1* %retval
  br label %return

if.end.385:                                       ; preds = %for.body.369
  br label %for.inc.386

for.inc.386:                                      ; preds = %if.end.385
  %209 = load %struct.rtx_def*, %struct.rtx_def** %tem365, align 8
  %fld387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %209, i32 0, i32 1
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i32 0, i64 1
  %rtx389 = bitcast %union.rtunion_def* %arrayidx388 to %struct.rtx_def**
  %210 = load %struct.rtx_def*, %struct.rtx_def** %rtx389, align 8
  %fld390 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %210, i32 0, i32 1
  %arrayidx391 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld390, i32 0, i64 1
  %rtx392 = bitcast %union.rtunion_def* %arrayidx391 to %struct.rtx_def**
  %211 = load %struct.rtx_def*, %struct.rtx_def** %rtx392, align 8
  store %struct.rtx_def* %211, %struct.rtx_def** %tem365, align 8
  br label %for.cond.366

for.end.393:                                      ; preds = %for.cond.366
  %212 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld394 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %212, i32 0, i32 1
  %arrayidx395 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld394, i32 0, i64 0
  %rtx396 = bitcast %union.rtunion_def* %arrayidx395 to %struct.rtx_def**
  %213 = load %struct.rtx_def*, %struct.rtx_def** %rtx396, align 8
  %214 = load %struct.rtx_def*, %struct.rtx_def** %sub59, align 8
  %215 = load %struct.rtx_def*, %struct.rtx_def** @purge_addressof_replacements, align 8
  %call397 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %214, %struct.rtx_def* %215)
  %call398 = call %struct.rtx_def* (i32, i32, ...) @gen_rtx(i32 3, i32 0, %struct.rtx_def* %213, %struct.rtx_def* %call397)
  store %struct.rtx_def* %call398, %struct.rtx_def** @purge_addressof_replacements, align 8
  store i1 true, i1* %retval
  br label %return

if.end.399:                                       ; preds = %lor.lhs.false.359
  br label %restart

if.end.400:                                       ; preds = %if.else.351
  br label %if.end.401

if.end.401:                                       ; preds = %if.end.400, %if.end.350
  br label %if.end.402

if.end.402:                                       ; preds = %if.end.401, %if.then.90
  br label %if.end.403

if.end.403:                                       ; preds = %if.end.402, %if.then.70
  br label %if.end.404

if.end.404:                                       ; preds = %if.end.403, %land.lhs.true.56, %land.lhs.true.48, %if.else.45
  br label %if.end.405

if.end.405:                                       ; preds = %if.end.404
  br label %if.end.406

if.end.406:                                       ; preds = %if.end.405
  br label %give_up

give_up:                                          ; preds = %if.end.406, %if.then.334, %if.then.272
  %216 = load i32, i32* %code, align 4
  %idxprom407 = sext i32 %216 to i64
  %arrayidx408 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom407
  %217 = load i8*, i8** %arrayidx408, align 8
  store i8* %217, i8** %fmt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.409

for.cond.409:                                     ; preds = %for.inc.460, %give_up
  %218 = load i32, i32* %i, align 4
  %219 = load i32, i32* %code, align 4
  %idxprom410 = sext i32 %219 to i64
  %arrayidx411 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom410
  %220 = load i8, i8* %arrayidx411, align 1
  %conv412 = zext i8 %220 to i32
  %cmp413 = icmp slt i32 %218, %conv412
  br i1 %cmp413, label %for.body.415, label %for.end.462

for.body.415:                                     ; preds = %for.cond.409
  %221 = load i8*, i8** %fmt, align 8
  %222 = load i8, i8* %221, align 1
  %conv416 = sext i8 %222 to i32
  %cmp417 = icmp eq i32 %conv416, 101
  br i1 %cmp417, label %if.then.419, label %if.else.431

if.then.419:                                      ; preds = %for.body.415
  %223 = load i32, i32* %i, align 4
  %idxprom420 = sext i32 %223 to i64
  %224 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld421 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %224, i32 0, i32 1
  %arrayidx422 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld421, i32 0, i64 %idxprom420
  %rtx423 = bitcast %union.rtunion_def* %arrayidx422 to %struct.rtx_def**
  %225 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %226 = load i32, i32* %force.addr, align 4
  %227 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %call424 = call zeroext i1 @purge_addressof_1(%struct.rtx_def** %rtx423, %struct.rtx_def* %225, i32 %226, i32 0, %struct.hash_table* %227)
  %conv425 = zext i1 %call424 to i32
  %228 = load i8, i8* %result, align 1
  %tobool426 = trunc i8 %228 to i1
  %conv427 = zext i1 %tobool426 to i32
  %and428 = and i32 %conv427, %conv425
  %tobool429 = icmp ne i32 %and428, 0
  %frombool430 = zext i1 %tobool429 to i8
  store i8 %frombool430, i8* %result, align 1
  br label %if.end.459

if.else.431:                                      ; preds = %for.body.415
  %229 = load i8*, i8** %fmt, align 8
  %230 = load i8, i8* %229, align 1
  %conv432 = sext i8 %230 to i32
  %cmp433 = icmp eq i32 %conv432, 69
  br i1 %cmp433, label %if.then.435, label %if.end.458

if.then.435:                                      ; preds = %if.else.431
  store i32 0, i32* %j, align 4
  br label %for.cond.436

for.cond.436:                                     ; preds = %for.inc.456, %if.then.435
  %231 = load i32, i32* %j, align 4
  %232 = load i32, i32* %i, align 4
  %idxprom437 = sext i32 %232 to i64
  %233 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld438 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %233, i32 0, i32 1
  %arrayidx439 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld438, i32 0, i64 %idxprom437
  %rtvec = bitcast %union.rtunion_def* %arrayidx439 to %struct.rtvec_def**
  %234 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %234, i32 0, i32 0
  %235 = load i32, i32* %num_elem, align 4
  %cmp440 = icmp slt i32 %231, %235
  br i1 %cmp440, label %for.body.442, label %for.end.457

for.body.442:                                     ; preds = %for.cond.436
  %236 = load i32, i32* %j, align 4
  %idxprom443 = sext i32 %236 to i64
  %237 = load i32, i32* %i, align 4
  %idxprom444 = sext i32 %237 to i64
  %238 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld445 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %238, i32 0, i32 1
  %arrayidx446 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld445, i32 0, i64 %idxprom444
  %rtvec447 = bitcast %union.rtunion_def* %arrayidx446 to %struct.rtvec_def**
  %239 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec447, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %239, i32 0, i32 1
  %arrayidx448 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom443
  %240 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %241 = load i32, i32* %force.addr, align 4
  %242 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %call449 = call zeroext i1 @purge_addressof_1(%struct.rtx_def** %arrayidx448, %struct.rtx_def* %240, i32 %241, i32 0, %struct.hash_table* %242)
  %conv450 = zext i1 %call449 to i32
  %243 = load i8, i8* %result, align 1
  %tobool451 = trunc i8 %243 to i1
  %conv452 = zext i1 %tobool451 to i32
  %and453 = and i32 %conv452, %conv450
  %tobool454 = icmp ne i32 %and453, 0
  %frombool455 = zext i1 %tobool454 to i8
  store i8 %frombool455, i8* %result, align 1
  br label %for.inc.456

for.inc.456:                                      ; preds = %for.body.442
  %244 = load i32, i32* %j, align 4
  %inc = add nsw i32 %244, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.436

for.end.457:                                      ; preds = %for.cond.436
  br label %if.end.458

if.end.458:                                       ; preds = %for.end.457, %if.else.431
  br label %if.end.459

if.end.459:                                       ; preds = %if.end.458, %if.then.419
  br label %for.inc.460

for.inc.460:                                      ; preds = %if.end.459
  %245 = load i32, i32* %i, align 4
  %inc461 = add nsw i32 %245, 1
  store i32 %inc461, i32* %i, align 4
  %246 = load i8*, i8** %fmt, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %246, i32 1
  store i8* %incdec.ptr, i8** %fmt, align 8
  br label %for.cond.409

for.end.462:                                      ; preds = %for.cond.409
  %247 = load i8, i8* %result, align 1
  %tobool463 = trunc i8 %247 to i1
  store i1 %tobool463, i1* %retval
  br label %return

return:                                           ; preds = %for.end.462, %for.end.393, %if.then.378, %if.end.347, %for.end.237, %if.end.228, %if.then.115, %if.end.42, %if.then.34, %if.then.21, %if.then.2, %if.then
  %248 = load i1, i1* %retval
  ret i1 %248
}

declare i32 @asm_noperands(%struct.rtx_def*) #2

declare i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @is_addressof(%struct.rtx_def** %rtl, i8* %data) #0 {
entry:
  %rtl.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  store %struct.rtx_def** %rtl, %struct.rtx_def*** %rtl.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %rtl.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 70
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @hash_table_free(%struct.hash_table*) #2

declare void @unshare_all_rtl_again(%struct.rtx_def*) #2

declare %struct.rtx_def* @get_insns() #2

; Function Attrs: nounwind uwtable
define void @purge_hard_subreg_sets(%struct.rtx_def* %insn) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %pattern = alloca %struct.rtx_def*, align 8
  %j = alloca i32, align 4
  %inner_pattern = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.39, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %for.body, label %for.end.43

for.body:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 105
  br i1 %cmp, label %if.then, label %if.end.38

if.then:                                          ; preds = %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %pattern, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load3 = load i32, i32* %7, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  switch i32 %bf.clear4, label %sw.default [
    i32 47, label %sw.bb
    i32 39, label %sw.bb.13
  ]

sw.bb:                                            ; preds = %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 0
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx7, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load8 = load i32, i32* %10, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 63
  br i1 %cmp10, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %sw.bb
  %11 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8
  call void @purge_single_hard_subreg_set(%struct.rtx_def* %11)
  br label %if.end

if.end:                                           ; preds = %if.then.12, %sw.bb
  br label %sw.epilog

sw.bb.13:                                         ; preds = %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtvec_def**
  %13 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %13, i32 0, i32 0
  %14 = load i32, i32* %num_elem, align 4
  %sub = sub nsw i32 %14, 1
  store i32 %sub, i32* %j, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc, %sw.bb.13
  %15 = load i32, i32* %j, align 4
  %cmp17 = icmp sge i32 %15, 0
  br i1 %cmp17, label %for.body.19, label %for.end

for.body.19:                                      ; preds = %for.cond.16
  %16 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %16 to i64
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtvec23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtvec_def**
  %18 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec23, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %18, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom20
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx24, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %inner_pattern, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %inner_pattern, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load25 = load i32, i32* %21, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 47
  br i1 %cmp27, label %land.lhs.true, label %if.end.37

land.lhs.true:                                    ; preds = %for.body.19
  %22 = load %struct.rtx_def*, %struct.rtx_def** %inner_pattern, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx31, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load32 = load i32, i32* %24, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 63
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %land.lhs.true
  %25 = load %struct.rtx_def*, %struct.rtx_def** %inner_pattern, align 8
  call void @purge_single_hard_subreg_set(%struct.rtx_def* %25)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.36, %land.lhs.true, %for.body.19
  br label %for.inc

for.inc:                                          ; preds = %if.end.37
  %26 = load i32, i32* %j, align 4
  %dec = add nsw i32 %26, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond.16

for.end:                                          ; preds = %for.cond.16
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %for.end, %if.end
  br label %if.end.38

if.end.38:                                        ; preds = %sw.epilog, %for.body
  br label %for.inc.39

for.inc.39:                                       ; preds = %if.end.38
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 2
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx42, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %insn.addr, align 8
  br label %for.cond

for.end.43:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @purge_single_hard_subreg_set(%struct.rtx_def* %pattern) #0 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %reg, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %mode, align 4
  store i32 0, i32* %offset, align 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load4 = load i32, i32* %6, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp = icmp eq i32 %bf.clear5, 63
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx8, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load9 = load i32, i32* %9, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 61
  br i1 %cmp11, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 0
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %12 = load i32, i32* %rtuint, align 4
  %cmp18 = icmp ult i32 %12, 53
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.12
  %13 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtuint24 = bitcast %union.rtunion_def* %arrayidx23 to i32*
  %15 = load i32, i32* %rtuint24, align 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 0
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx27, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load28 = load i32, i32* %18, align 8
  %bf.lshr29 = lshr i32 %bf.load28, 16
  %bf.clear30 = and i32 %bf.lshr29, 255
  %19 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i32 0, i64 1
  %rtuint33 = bitcast %union.rtunion_def* %arrayidx32 to i32*
  %20 = load i32, i32* %rtuint33, align 4
  %21 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load34 = load i32, i32* %22, align 8
  %bf.lshr35 = lshr i32 %bf.load34, 16
  %bf.clear36 = and i32 %bf.lshr35, 255
  %call = call i32 @subreg_regno_offset(i32 %15, i32 %bf.clear30, i32 %20, i32 %bf.clear36)
  store i32 %call, i32* %offset, align 4
  %23 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %reg, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.12, %land.lhs.true, %entry
  %25 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load40 = load i32, i32* %26, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 61
  br i1 %cmp42, label %land.lhs.true.43, label %if.end.56

land.lhs.true.43:                                 ; preds = %if.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtuint46 = bitcast %union.rtunion_def* %arrayidx45 to i32*
  %28 = load i32, i32* %rtuint46, align 4
  %cmp47 = icmp ult i32 %28, 53
  br i1 %cmp47, label %if.then.48, label %if.end.56

if.then.48:                                       ; preds = %land.lhs.true.43
  %29 = load i32, i32* %mode, align 4
  %30 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtuint51 = bitcast %union.rtunion_def* %arrayidx50 to i32*
  %31 = load i32, i32* %rtuint51, align 4
  %32 = load i32, i32* %offset, align 4
  %add = add i32 %31, %32
  %call52 = call %struct.rtx_def* @gen_rtx_REG(i32 %29, i32 %add)
  store %struct.rtx_def* %call52, %struct.rtx_def** %reg, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 0
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  store %struct.rtx_def* %33, %struct.rtx_def** %rtx55, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.48, %land.lhs.true.43, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @instantiate_virtual_regs(%union.tree_node* %fndecl, %struct.rtx_def* %insns) #0 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %insns.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  store i32 0, i32* @in_arg_offset, align 4
  store i32 0, i32* @var_offset, align 4
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 4096
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  %outgoing_args_size = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 11
  %2 = load i32, i32* %outgoing_args_size, align 4
  %add = add nsw i32 %2, 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ 0, %cond.false ]
  %add1 = add nsw i32 %cond, 0
  store i32 %add1, i32* @dynamic_offset, align 4
  store i32 0, i32* @out_arg_offset, align 4
  store i32 0, i32* @cfa_offset, align 4
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  call void @instantiate_decls(%union.tree_node* %3, i32 1)
  call void @init_recog()
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool2 = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load3 = load i32, i32* %9, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 33
  br i1 %cmp5, label %if.then, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load7 = load i32, i32* %11, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 34
  br i1 %cmp9, label %if.then, label %if.end.22

if.then:                                          ; preds = %lor.lhs.false.6, %lor.lhs.false, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx, %struct.rtx_def* %13, i32 1)
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 6
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %call13 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx12, %struct.rtx_def* null, i32 0)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load14 = load i32, i32* %16, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 34
  br i1 %cmp16, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 7
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %call21 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx20, %struct.rtx_def* null, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then.17, %if.then
  br label %if.end.22

if.end.22:                                        ; preds = %if.end, %lor.lhs.false.6
  br label %for.inc

for.inc:                                          ; preds = %if.end.22
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 2
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc.37, %for.end
  %20 = load i32, i32* %i, align 4
  %21 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 37
  %22 = load i32, i32* %x_max_parm_reg, align 4
  %cmp27 = icmp ult i32 %20, %22
  br i1 %cmp27, label %for.body.28, label %for.end.38

for.body.28:                                      ; preds = %for.cond.26
  %23 = load i32, i32* %i, align 4
  %idxprom = zext i32 %23 to i64
  %24 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 38
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc, align 8
  %arrayidx29 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %25, i64 %idxprom
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx29, align 8
  %tobool30 = icmp ne %struct.rtx_def* %26, null
  br i1 %tobool30, label %if.then.31, label %if.end.36

if.then.31:                                       ; preds = %for.body.28
  %27 = load i32, i32* %i, align 4
  %idxprom32 = zext i32 %27 to i64
  %28 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc33 = getelementptr inbounds %struct.function, %struct.function* %28, i32 0, i32 38
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc33, align 8
  %arrayidx34 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %29, i64 %idxprom32
  %call35 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %arrayidx34, %struct.rtx_def* null, i32 0)
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.31, %for.body.28
  br label %for.inc.37

for.inc.37:                                       ; preds = %if.end.36
  %30 = load i32, i32* %i, align 4
  %inc = add i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.26

for.end.38:                                       ; preds = %for.cond.26
  %31 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  call void @instantiate_decls(%union.tree_node* %31, i32 0)
  store i32 1, i32* @virtuals_instantiated, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @instantiate_decls(%union.tree_node* %fndecl, i32 %valid_only) #0 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %valid_only.addr = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  %size = alloca i64, align 8
  %size_rtl = alloca i64, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  store i32 %valid_only, i32* %valid_only.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 10
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %1, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %4)
  store i64 %call, i64* %size, align 8
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl2 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 17
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool3 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl4 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %rtl5 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl4, i32 0, i32 17
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %9, i8* null)
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl6 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %rtl7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 17
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ %11, %cond.false ]
  %12 = load i64, i64* %size, align 8
  %13 = load i32, i32* %valid_only.addr, align 4
  call void @instantiate_decl(%struct.rtx_def* %cond, i64 %12, i32 %13)
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl8 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %u2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 19
  %r = bitcast %union.anon.1* %u2 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load = load i32, i32* %16, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %17 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %17 to i64
  store i64 %conv, i64* %size_rtl, align 8
  %18 = load i64, i64* %size_rtl, align 8
  %19 = load i64, i64* %size, align 8
  %cmp = icmp sgt i64 %18, %19
  br i1 %cmp, label %cond.true.10, label %cond.false.11

cond.true.10:                                     ; preds = %cond.end
  %20 = load i64, i64* %size_rtl, align 8
  br label %cond.end.12

cond.false.11:                                    ; preds = %cond.end
  %21 = load i64, i64* %size, align 8
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.false.11, %cond.true.10
  %cond13 = phi i64 [ %20, %cond.true.10 ], [ %21, %cond.false.11 ]
  store i64 %cond13, i64* %size, align 8
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl14 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %u215 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl14, i32 0, i32 19
  %r16 = bitcast %union.anon.1* %u215 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %r16, align 8
  %24 = load i64, i64* %size, align 8
  %25 = load i32, i32* %valid_only.addr, align 4
  call void @instantiate_decl(%struct.rtx_def* %23, i64 %24, i32 %25)
  br label %for.inc

for.inc:                                          ; preds = %cond.end.12
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common17 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 0
  %27 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %27, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl18 = bitcast %union.tree_node* %28 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl18, i32 0, i32 12
  %29 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %30 = load i32, i32* %valid_only.addr, align 4
  call void @instantiate_decls_1(%union.tree_node* %29, i32 %30)
  ret void
}

declare void @init_recog() #2

; Function Attrs: nounwind uwtable
define internal i32 @instantiate_virtual_regs_1(%struct.rtx_def** %loc, %struct.rtx_def* %object, i32 %extra_insns) #0 {
entry:
  %retval = alloca i32, align 4
  %loc.addr = alloca %struct.rtx_def**, align 8
  %object.addr = alloca %struct.rtx_def*, align 8
  %extra_insns.addr = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %new = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %old = alloca %struct.rtx_def*, align 8
  %new_offset = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %loc, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %object, %struct.rtx_def** %object.addr, align 8
  store i32 %extra_insns, i32* %extra_insns.addr, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %new, align 8
  store i64 0, i64* %offset, align 8
  br label %restart

restart:                                          ; preds = %if.end.486, %sw.bb.449, %if.end.293, %if.then.150, %if.else.132, %if.end.36, %entry
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %cmp = icmp eq %struct.rtx_def* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %restart
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %restart
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %5 = load i32, i32* %code, align 4
  switch i32 %5, label %sw.default [
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 58, label %sw.bb
    i32 68, label %sw.bb
    i32 36, label %sw.bb
    i32 59, label %sw.bb
    i32 69, label %sw.bb
    i32 40, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 51, label %sw.bb
    i32 47, label %sw.bb.1
    i32 75, label %sw.bb.44
    i32 3, label %sw.bb.227
    i32 50, label %sw.bb.227
    i32 74, label %sw.bb.227
    i32 76, label %sw.bb.227
    i32 78, label %sw.bb.227
    i32 79, label %sw.bb.227
    i32 81, label %sw.bb.227
    i32 80, label %sw.bb.227
    i32 82, label %sw.bb.227
    i32 83, label %sw.bb.227
    i32 84, label %sw.bb.227
    i32 85, label %sw.bb.227
    i32 91, label %sw.bb.227
    i32 88, label %sw.bb.227
    i32 89, label %sw.bb.227
    i32 90, label %sw.bb.227
    i32 87, label %sw.bb.227
    i32 102, label %sw.bb.227
    i32 103, label %sw.bb.227
    i32 104, label %sw.bb.227
    i32 105, label %sw.bb.227
    i32 108, label %sw.bb.227
    i32 109, label %sw.bb.227
    i32 106, label %sw.bb.227
    i32 107, label %sw.bb.227
    i32 110, label %sw.bb.227
    i32 111, label %sw.bb.227
    i32 66, label %sw.bb.297
    i32 46, label %sw.bb.449
    i32 63, label %sw.bb.449
    i32 64, label %sw.bb.449
    i32 77, label %sw.bb.449
    i32 86, label %sw.bb.449
    i32 96, label %sw.bb.449
    i32 97, label %sw.bb.449
    i32 98, label %sw.bb.449
    i32 99, label %sw.bb.449
    i32 120, label %sw.bb.449
    i32 121, label %sw.bb.449
    i32 122, label %sw.bb.449
    i32 123, label %sw.bb.449
    i32 124, label %sw.bb.449
    i32 125, label %sw.bb.449
    i32 126, label %sw.bb.449
    i32 128, label %sw.bb.449
    i32 127, label %sw.bb.449
    i32 129, label %sw.bb.449
    i32 130, label %sw.bb.449
    i32 131, label %sw.bb.449
    i32 48, label %sw.bb.453
    i32 49, label %sw.bb.453
    i32 61, label %sw.bb.497
    i32 70, label %sw.bb.520
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  store i32 1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %7, i64* %offset)
  store %struct.rtx_def* %call, %struct.rtx_def** %new, align 8
  %cmp2 = icmp ne %struct.rtx_def* %call, null
  br i1 %cmp2, label %if.then.3, label %if.end.36

if.then.3:                                        ; preds = %sw.bb.1
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 1
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %src, align 8
  %10 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 0, %10
  store i64 %sub, i64* %offset, align 8
  %call7 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %src, %struct.rtx_def* null, i32 0)
  %11 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load8 = load i32, i32* %12, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp ne i32 %bf.clear9, 61
  br i1 %cmp10, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %if.then.3
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load11 = load i32, i32* %14, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp ne i32 %bf.clear12, 75
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 3846, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.instantiate_virtual_regs_1, i32 0, i32 0)) #6
  unreachable

if.end.15:                                        ; preds = %land.lhs.true, %if.then.3
  call void @start_sequence()
  %15 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load16 = load i32, i32* %16, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp ne i32 %bf.clear17, 61
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.end.15
  %17 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call20 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %17, %struct.rtx_def* null)
  store %struct.rtx_def* %call20, %struct.rtx_def** %temp, align 8
  br label %if.end.21

if.else:                                          ; preds = %if.end.15
  %18 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %temp, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.19
  %19 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %20 = load i64, i64* %offset, align 8
  %call22 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %19, i64 %20)
  %call23 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call22, %struct.rtx_def* null)
  store %struct.rtx_def* %call23, %struct.rtx_def** %temp, align 8
  %call24 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call24, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call25 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %21, %struct.rtx_def* %22)
  %23 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 0
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  store %struct.rtx_def* %23, %struct.rtx_def** %rtx28, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 1
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call32 = call i32 @validate_change(%struct.rtx_def* %25, %struct.rtx_def** %rtx31, %struct.rtx_def* %27, i32 0)
  %tobool = icmp ne i32 %call32, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then.34

lor.lhs.false:                                    ; preds = %if.end.21
  %28 = load i32, i32* %extra_insns.addr, align 4
  %tobool33 = icmp ne i32 %28, 0
  br i1 %tobool33, label %if.end.35, label %if.then.34

if.then.34:                                       ; preds = %lor.lhs.false, %if.end.21
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 3862, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.instantiate_virtual_regs_1, i32 0, i32 0)) #6
  unreachable

if.end.35:                                        ; preds = %lor.lhs.false
  store i32 1, i32* %retval
  br label %return

if.end.36:                                        ; preds = %sw.bb.1
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %31 = load i32, i32* %extra_insns.addr, align 4
  %call40 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx39, %struct.rtx_def* %30, i32 %31)
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 1
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  store %struct.rtx_def** %rtx43, %struct.rtx_def*** %loc.addr, align 8
  br label %restart

sw.bb.44:                                         ; preds = %if.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 1
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load48 = load i32, i32* %35, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 67
  br i1 %cmp50, label %if.then.100, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %sw.bb.44
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 1
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx54, align 8
  %38 = bitcast %struct.rtx_def* %37 to i32*
  %bf.load55 = load i32, i32* %38, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 68
  br i1 %cmp57, label %if.then.100, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %lor.lhs.false.51
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 1
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx61, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load62 = load i32, i32* %41, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 54
  br i1 %cmp64, label %if.then.100, label %lor.lhs.false.65

lor.lhs.false.65:                                 ; preds = %lor.lhs.false.58
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 1
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load69 = load i32, i32* %44, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 55
  br i1 %cmp71, label %if.then.100, label %lor.lhs.false.72

lor.lhs.false.72:                                 ; preds = %lor.lhs.false.65
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 1
  %rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx75, align 8
  %47 = bitcast %struct.rtx_def* %46 to i32*
  %bf.load76 = load i32, i32* %47, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %cmp78 = icmp eq i32 %bf.clear77, 58
  br i1 %cmp78, label %if.then.100, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %lor.lhs.false.72
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i32 0, i64 1
  %rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx82, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load83 = load i32, i32* %50, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 134
  br i1 %cmp85, label %if.then.100, label %lor.lhs.false.86

lor.lhs.false.86:                                 ; preds = %lor.lhs.false.79
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i32 0, i64 1
  %rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx89, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load90 = load i32, i32* %53, align 8
  %bf.clear91 = and i32 %bf.load90, 65535
  %cmp92 = icmp eq i32 %bf.clear91, 56
  br i1 %cmp92, label %if.then.100, label %lor.lhs.false.93

lor.lhs.false.93:                                 ; preds = %lor.lhs.false.86
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 1
  %rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx96, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load97 = load i32, i32* %56, align 8
  %bf.clear98 = and i32 %bf.load97, 65535
  %cmp99 = icmp eq i32 %bf.clear98, 140
  br i1 %cmp99, label %if.then.100, label %if.end.226

if.then.100:                                      ; preds = %lor.lhs.false.93, %lor.lhs.false.86, %lor.lhs.false.79, %lor.lhs.false.72, %lor.lhs.false.65, %lor.lhs.false.58, %lor.lhs.false.51, %sw.bb.44
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtx103, align 8
  %59 = bitcast %struct.rtx_def* %58 to i32*
  %bf.load104 = load i32, i32* %59, align 8
  %bf.clear105 = and i32 %bf.load104, 65535
  %cmp106 = icmp eq i32 %bf.clear105, 75
  br i1 %cmp106, label %if.then.107, label %if.else.137

if.then.107:                                      ; preds = %if.then.100
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 0
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx110, align 8
  %fld111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i32 0, i64 0
  %rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx113, align 8
  %call114 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %62, i64* %offset)
  store %struct.rtx_def* %call114, %struct.rtx_def** %new, align 8
  %tobool115 = icmp ne %struct.rtx_def* %call114, null
  br i1 %tobool115, label %if.then.116, label %if.else.132

if.then.116:                                      ; preds = %if.then.107
  %63 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i32 0, i64 0
  %rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtx119, align 8
  %fld120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i32 0, i64 1
  %rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %66 = load i32, i32* %extra_insns.addr, align 4
  %call123 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx122, %struct.rtx_def* %65, i32 %66)
  %67 = load i32, i32* @target_flags, align 4
  %and = and i32 %67, 33554432
  %tobool124 = icmp ne i32 %and, 0
  %cond = select i1 %tobool124, i32 5, i32 4
  %68 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i32 0, i64 0
  %rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rtx127, align 8
  %fld128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i32 0, i64 1
  %rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtx130, align 8
  %call131 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond, %struct.rtx_def* %68, %struct.rtx_def* %71)
  store %struct.rtx_def* %call131, %struct.rtx_def** %new, align 8
  br label %if.end.136

if.else.132:                                      ; preds = %if.then.107
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i32 0, i64 0
  %rtx135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtx_def**
  store %struct.rtx_def** %rtx135, %struct.rtx_def*** %loc.addr, align 8
  br label %restart

if.end.136:                                       ; preds = %if.then.116
  br label %if.end.156

if.else.137:                                      ; preds = %if.then.100
  %73 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i32 0, i64 0
  %rtx140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtx140, align 8
  %call141 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %74, i64* %offset)
  store %struct.rtx_def* %call141, %struct.rtx_def** %new, align 8
  %cmp142 = icmp eq %struct.rtx_def* %call141, null
  br i1 %cmp142, label %if.then.143, label %if.end.155

if.then.143:                                      ; preds = %if.else.137
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i32 0, i64 0
  %rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx146, align 8
  %77 = bitcast %struct.rtx_def* %76 to i32*
  %bf.load147 = load i32, i32* %77, align 8
  %bf.clear148 = and i32 %bf.load147, 65535
  %cmp149 = icmp ne i32 %bf.clear148, 61
  br i1 %cmp149, label %if.then.150, label %if.end.154

if.then.150:                                      ; preds = %if.then.143
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1
  %arrayidx152 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld151, i32 0, i64 0
  %rtx153 = bitcast %union.rtunion_def* %arrayidx152 to %struct.rtx_def**
  store %struct.rtx_def** %rtx153, %struct.rtx_def*** %loc.addr, align 8
  br label %restart

if.end.154:                                       ; preds = %if.then.143
  store i32 1, i32* %retval
  br label %return

if.end.155:                                       ; preds = %if.else.137
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.155, %if.end.136
  %79 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i32 0, i64 1
  %rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rtx159, align 8
  %81 = load i64, i64* %offset, align 8
  %call160 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %80, i64 %81)
  store %struct.rtx_def* %call160, %struct.rtx_def** %new_offset, align 8
  %82 = load %struct.rtx_def*, %struct.rtx_def** %new_offset, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp161 = icmp eq %struct.rtx_def* %82, %83
  br i1 %cmp161, label %land.lhs.true.162, label %if.end.166

land.lhs.true.162:                                ; preds = %if.end.156
  %84 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %85 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %86 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call163 = call i32 @validate_change(%struct.rtx_def* %84, %struct.rtx_def** %85, %struct.rtx_def* %86, i32 0)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %land.lhs.true.162
  store i32 1, i32* %retval
  br label %return

if.end.166:                                       ; preds = %land.lhs.true.162, %if.end.156
  %87 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i32 0, i64 0
  %rtx169 = bitcast %union.rtunion_def* %arrayidx168 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx169, align 8
  store %struct.rtx_def* %88, %struct.rtx_def** %old, align 8
  %89 = load i64, i64* %offset, align 8
  %cmp170 = icmp eq i64 %89, 0
  br i1 %cmp170, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.166
  %90 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %91 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i32 0, i64 0
  %rtx173 = bitcast %union.rtunion_def* %arrayidx172 to %struct.rtx_def**
  %92 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call174 = call i32 @validate_change(%struct.rtx_def* %90, %struct.rtx_def** %rtx173, %struct.rtx_def* %92, i32 0)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end.225, label %if.then.184

cond.false:                                       ; preds = %if.end.166
  %93 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %94 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1
  %arrayidx177 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld176, i32 0, i64 0
  %rtx178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.rtx_def**
  store %struct.rtx_def* %93, %struct.rtx_def** %rtx178, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx180 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld179, i32 0, i64 1
  %rtx181 = bitcast %union.rtunion_def* %arrayidx180 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %new_offset, align 8
  %call182 = call i32 @validate_change(%struct.rtx_def* %95, %struct.rtx_def** %rtx181, %struct.rtx_def* %97, i32 0)
  %tobool183 = icmp ne i32 %call182, 0
  %lnot = xor i1 %tobool183, true
  br i1 %lnot, label %if.then.184, label %if.end.225

if.then.184:                                      ; preds = %cond.false, %cond.true
  %98 = load i32, i32* %extra_insns.addr, align 4
  %tobool185 = icmp ne i32 %98, 0
  br i1 %tobool185, label %if.end.190, label %if.then.186

if.then.186:                                      ; preds = %if.then.184
  %99 = load %struct.rtx_def*, %struct.rtx_def** %old, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld187 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1
  %arrayidx188 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld187, i32 0, i64 0
  %rtx189 = bitcast %union.rtunion_def* %arrayidx188 to %struct.rtx_def**
  store %struct.rtx_def* %99, %struct.rtx_def** %rtx189, align 8
  store i32 0, i32* %retval
  br label %return

if.end.190:                                       ; preds = %if.then.184
  %101 = load i32, i32* @target_flags, align 4
  %and191 = and i32 %101, 33554432
  %tobool192 = icmp ne i32 %and191, 0
  %cond193 = select i1 %tobool192, i32 5, i32 4
  %call194 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond193)
  store %struct.rtx_def* %call194, %struct.rtx_def** %temp, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i32 0, i64 0
  %rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**
  store %struct.rtx_def* %102, %struct.rtx_def** %rtx197, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %105 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld198 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx199 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld198, i32 0, i64 1
  %rtx200 = bitcast %union.rtunion_def* %arrayidx199 to %struct.rtx_def**
  %106 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call201 = call i32 @validate_change(%struct.rtx_def* %104, %struct.rtx_def** %rtx200, %struct.rtx_def* %106, i32 0)
  %tobool202 = icmp ne i32 %call201, 0
  br i1 %tobool202, label %if.then.203, label %if.else.206

if.then.203:                                      ; preds = %if.end.190
  %107 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %108 = load %struct.rtx_def*, %struct.rtx_def** %new_offset, align 8
  %call204 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %107, %struct.rtx_def* %108)
  %109 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call205 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call204, %struct.rtx_def* %109)
  br label %if.end.224

if.else.206:                                      ; preds = %if.end.190
  %110 = load %struct.rtx_def*, %struct.rtx_def** %old, align 8
  %111 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i32 0, i64 0
  %rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**
  store %struct.rtx_def* %110, %struct.rtx_def** %rtx209, align 8
  %112 = load i32, i32* @target_flags, align 4
  %and210 = and i32 %112, 33554432
  %tobool211 = icmp ne i32 %and210, 0
  %cond212 = select i1 %tobool211, i32 5, i32 4
  %113 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %114 = load %struct.rtx_def*, %struct.rtx_def** %new_offset, align 8
  %call213 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond212, %struct.rtx_def* %113, %struct.rtx_def* %114)
  store %struct.rtx_def* %call213, %struct.rtx_def** %new, align 8
  call void @start_sequence()
  %115 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %call214 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %115, %struct.rtx_def* null)
  store %struct.rtx_def* %call214, %struct.rtx_def** %temp, align 8
  %call215 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call215, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %116 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %117 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call216 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %116, %struct.rtx_def* %117)
  %118 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %119 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %120 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call217 = call i32 @validate_change(%struct.rtx_def* %118, %struct.rtx_def** %119, %struct.rtx_def* %120, i32 0)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end.223, label %land.lhs.true.219

land.lhs.true.219:                                ; preds = %if.else.206
  %121 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %122 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %123 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call220 = call i32 @validate_replace_rtx(%struct.rtx_def* %121, %struct.rtx_def* %122, %struct.rtx_def* %123)
  %tobool221 = icmp ne i32 %call220, 0
  br i1 %tobool221, label %if.end.223, label %if.then.222

if.then.222:                                      ; preds = %land.lhs.true.219
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 3972, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.instantiate_virtual_regs_1, i32 0, i32 0)) #6
  unreachable

if.end.223:                                       ; preds = %land.lhs.true.219, %if.else.206
  br label %if.end.224

if.end.224:                                       ; preds = %if.end.223, %if.then.203
  br label %if.end.225

if.end.225:                                       ; preds = %if.end.224, %cond.false, %cond.true
  store i32 1, i32* %retval
  br label %return

if.end.226:                                       ; preds = %lor.lhs.false.93
  br label %sw.bb.227

sw.bb.227:                                        ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end.226
  %124 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i32 0, i64 1
  %rtx230 = bitcast %union.rtunion_def* %arrayidx229 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rtx230, align 8
  %tobool231 = icmp ne %struct.rtx_def* %125, null
  br i1 %tobool231, label %land.lhs.true.232, label %if.end.293

land.lhs.true.232:                                ; preds = %sw.bb.227
  %126 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld233 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1
  %arrayidx234 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld233, i32 0, i64 1
  %rtx235 = bitcast %union.rtunion_def* %arrayidx234 to %struct.rtx_def**
  %127 = load %struct.rtx_def*, %struct.rtx_def** %rtx235, align 8
  %128 = bitcast %struct.rtx_def* %127 to i32*
  %bf.load236 = load i32, i32* %128, align 8
  %bf.clear237 = and i32 %bf.load236, 65535
  %cmp238 = icmp eq i32 %bf.clear237, 67
  br i1 %cmp238, label %if.end.293, label %lor.lhs.false.239

lor.lhs.false.239:                                ; preds = %land.lhs.true.232
  %129 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1
  %arrayidx241 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld240, i32 0, i64 1
  %rtx242 = bitcast %union.rtunion_def* %arrayidx241 to %struct.rtx_def**
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rtx242, align 8
  %131 = bitcast %struct.rtx_def* %130 to i32*
  %bf.load243 = load i32, i32* %131, align 8
  %bf.clear244 = and i32 %bf.load243, 65535
  %cmp245 = icmp eq i32 %bf.clear244, 68
  br i1 %cmp245, label %if.end.293, label %lor.lhs.false.246

lor.lhs.false.246:                                ; preds = %lor.lhs.false.239
  %132 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld247 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %132, i32 0, i32 1
  %arrayidx248 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld247, i32 0, i64 1
  %rtx249 = bitcast %union.rtunion_def* %arrayidx248 to %struct.rtx_def**
  %133 = load %struct.rtx_def*, %struct.rtx_def** %rtx249, align 8
  %134 = bitcast %struct.rtx_def* %133 to i32*
  %bf.load250 = load i32, i32* %134, align 8
  %bf.clear251 = and i32 %bf.load250, 65535
  %cmp252 = icmp eq i32 %bf.clear251, 54
  br i1 %cmp252, label %if.end.293, label %lor.lhs.false.253

lor.lhs.false.253:                                ; preds = %lor.lhs.false.246
  %135 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld254 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %135, i32 0, i32 1
  %arrayidx255 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld254, i32 0, i64 1
  %rtx256 = bitcast %union.rtunion_def* %arrayidx255 to %struct.rtx_def**
  %136 = load %struct.rtx_def*, %struct.rtx_def** %rtx256, align 8
  %137 = bitcast %struct.rtx_def* %136 to i32*
  %bf.load257 = load i32, i32* %137, align 8
  %bf.clear258 = and i32 %bf.load257, 65535
  %cmp259 = icmp eq i32 %bf.clear258, 55
  br i1 %cmp259, label %if.end.293, label %lor.lhs.false.260

lor.lhs.false.260:                                ; preds = %lor.lhs.false.253
  %138 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld261 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1
  %arrayidx262 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld261, i32 0, i64 1
  %rtx263 = bitcast %union.rtunion_def* %arrayidx262 to %struct.rtx_def**
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rtx263, align 8
  %140 = bitcast %struct.rtx_def* %139 to i32*
  %bf.load264 = load i32, i32* %140, align 8
  %bf.clear265 = and i32 %bf.load264, 65535
  %cmp266 = icmp eq i32 %bf.clear265, 58
  br i1 %cmp266, label %if.end.293, label %lor.lhs.false.267

lor.lhs.false.267:                                ; preds = %lor.lhs.false.260
  %141 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld268 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1
  %arrayidx269 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld268, i32 0, i64 1
  %rtx270 = bitcast %union.rtunion_def* %arrayidx269 to %struct.rtx_def**
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rtx270, align 8
  %143 = bitcast %struct.rtx_def* %142 to i32*
  %bf.load271 = load i32, i32* %143, align 8
  %bf.clear272 = and i32 %bf.load271, 65535
  %cmp273 = icmp eq i32 %bf.clear272, 134
  br i1 %cmp273, label %if.end.293, label %lor.lhs.false.274

lor.lhs.false.274:                                ; preds = %lor.lhs.false.267
  %144 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld275 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1
  %arrayidx276 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld275, i32 0, i64 1
  %rtx277 = bitcast %union.rtunion_def* %arrayidx276 to %struct.rtx_def**
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rtx277, align 8
  %146 = bitcast %struct.rtx_def* %145 to i32*
  %bf.load278 = load i32, i32* %146, align 8
  %bf.clear279 = and i32 %bf.load278, 65535
  %cmp280 = icmp eq i32 %bf.clear279, 56
  br i1 %cmp280, label %if.end.293, label %lor.lhs.false.281

lor.lhs.false.281:                                ; preds = %lor.lhs.false.274
  %147 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld282 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1
  %arrayidx283 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld282, i32 0, i64 1
  %rtx284 = bitcast %union.rtunion_def* %arrayidx283 to %struct.rtx_def**
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rtx284, align 8
  %149 = bitcast %struct.rtx_def* %148 to i32*
  %bf.load285 = load i32, i32* %149, align 8
  %bf.clear286 = and i32 %bf.load285, 65535
  %cmp287 = icmp eq i32 %bf.clear286, 140
  br i1 %cmp287, label %if.end.293, label %if.then.288

if.then.288:                                      ; preds = %lor.lhs.false.281
  %150 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld289 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1
  %arrayidx290 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld289, i32 0, i64 1
  %rtx291 = bitcast %union.rtunion_def* %arrayidx290 to %struct.rtx_def**
  %151 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %152 = load i32, i32* %extra_insns.addr, align 4
  %call292 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx291, %struct.rtx_def* %151, i32 %152)
  br label %if.end.293

if.end.293:                                       ; preds = %if.then.288, %lor.lhs.false.281, %lor.lhs.false.274, %lor.lhs.false.267, %lor.lhs.false.260, %lor.lhs.false.253, %lor.lhs.false.246, %lor.lhs.false.239, %land.lhs.true.232, %sw.bb.227
  %153 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld294 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %153, i32 0, i32 1
  %arrayidx295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld294, i32 0, i64 0
  %rtx296 = bitcast %union.rtunion_def* %arrayidx295 to %struct.rtx_def**
  store %struct.rtx_def** %rtx296, %struct.rtx_def*** %loc.addr, align 8
  br label %restart

sw.bb.297:                                        ; preds = %if.end
  %154 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld298 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx299 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld298, i32 0, i64 0
  %rtx300 = bitcast %union.rtunion_def* %arrayidx299 to %struct.rtx_def**
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtx300, align 8
  store %struct.rtx_def* %155, %struct.rtx_def** %temp, align 8
  %156 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %157 = bitcast %struct.rtx_def* %156 to i32*
  %bf.load301 = load i32, i32* %157, align 8
  %bf.clear302 = and i32 %bf.load301, 65535
  %cmp303 = icmp eq i32 %bf.clear302, 67
  br i1 %cmp303, label %if.then.326, label %lor.lhs.false.304

lor.lhs.false.304:                                ; preds = %sw.bb.297
  %158 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %159 = bitcast %struct.rtx_def* %158 to i32*
  %bf.load305 = load i32, i32* %159, align 8
  %bf.clear306 = and i32 %bf.load305, 65535
  %cmp307 = icmp eq i32 %bf.clear306, 68
  br i1 %cmp307, label %if.then.326, label %lor.lhs.false.308

lor.lhs.false.308:                                ; preds = %lor.lhs.false.304
  %160 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load309 = load i32, i32* %161, align 8
  %bf.clear310 = and i32 %bf.load309, 65535
  %cmp311 = icmp eq i32 %bf.clear310, 54
  br i1 %cmp311, label %if.then.326, label %lor.lhs.false.312

lor.lhs.false.312:                                ; preds = %lor.lhs.false.308
  %162 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %163 = bitcast %struct.rtx_def* %162 to i32*
  %bf.load313 = load i32, i32* %163, align 8
  %bf.clear314 = and i32 %bf.load313, 65535
  %cmp315 = icmp eq i32 %bf.clear314, 58
  br i1 %cmp315, label %if.then.326, label %lor.lhs.false.316

lor.lhs.false.316:                                ; preds = %lor.lhs.false.312
  %164 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %165 = bitcast %struct.rtx_def* %164 to i32*
  %bf.load317 = load i32, i32* %165, align 8
  %bf.clear318 = and i32 %bf.load317, 65535
  %cmp319 = icmp eq i32 %bf.clear318, 55
  br i1 %cmp319, label %if.then.326, label %lor.lhs.false.320

lor.lhs.false.320:                                ; preds = %lor.lhs.false.316
  %166 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp321 = icmp eq %struct.rtx_def* %166, %167
  br i1 %cmp321, label %if.then.326, label %lor.lhs.false.322

lor.lhs.false.322:                                ; preds = %lor.lhs.false.320
  %168 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %169 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %cmp323 = icmp eq %struct.rtx_def* %168, %169
  br i1 %cmp323, label %if.then.326, label %lor.lhs.false.324

lor.lhs.false.324:                                ; preds = %lor.lhs.false.322
  %170 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %171 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp325 = icmp eq %struct.rtx_def* %170, %171
  br i1 %cmp325, label %if.then.326, label %if.end.327

if.then.326:                                      ; preds = %lor.lhs.false.324, %lor.lhs.false.322, %lor.lhs.false.320, %lor.lhs.false.316, %lor.lhs.false.312, %lor.lhs.false.308, %lor.lhs.false.304, %sw.bb.297
  store i32 1, i32* %retval
  br label %return

if.end.327:                                       ; preds = %lor.lhs.false.324
  %172 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %173 = bitcast %struct.rtx_def* %172 to i32*
  %bf.load328 = load i32, i32* %173, align 8
  %bf.clear329 = and i32 %bf.load328, 65535
  %cmp330 = icmp eq i32 %bf.clear329, 75
  br i1 %cmp330, label %land.lhs.true.331, label %if.end.382

land.lhs.true.331:                                ; preds = %if.end.327
  %174 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld332 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1
  %arrayidx333 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld332, i32 0, i64 1
  %rtx334 = bitcast %union.rtunion_def* %arrayidx333 to %struct.rtx_def**
  %175 = load %struct.rtx_def*, %struct.rtx_def** %rtx334, align 8
  %176 = bitcast %struct.rtx_def* %175 to i32*
  %bf.load335 = load i32, i32* %176, align 8
  %bf.clear336 = and i32 %bf.load335, 65535
  %cmp337 = icmp eq i32 %bf.clear336, 67
  br i1 %cmp337, label %land.lhs.true.366, label %lor.lhs.false.338

lor.lhs.false.338:                                ; preds = %land.lhs.true.331
  %177 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld339 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1
  %arrayidx340 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld339, i32 0, i64 1
  %rtx341 = bitcast %union.rtunion_def* %arrayidx340 to %struct.rtx_def**
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rtx341, align 8
  %179 = bitcast %struct.rtx_def* %178 to i32*
  %bf.load342 = load i32, i32* %179, align 8
  %bf.clear343 = and i32 %bf.load342, 65535
  %cmp344 = icmp eq i32 %bf.clear343, 68
  br i1 %cmp344, label %land.lhs.true.366, label %lor.lhs.false.345

lor.lhs.false.345:                                ; preds = %lor.lhs.false.338
  %180 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %180, i32 0, i32 1
  %arrayidx347 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld346, i32 0, i64 1
  %rtx348 = bitcast %union.rtunion_def* %arrayidx347 to %struct.rtx_def**
  %181 = load %struct.rtx_def*, %struct.rtx_def** %rtx348, align 8
  %182 = bitcast %struct.rtx_def* %181 to i32*
  %bf.load349 = load i32, i32* %182, align 8
  %bf.clear350 = and i32 %bf.load349, 65535
  %cmp351 = icmp eq i32 %bf.clear350, 54
  br i1 %cmp351, label %land.lhs.true.366, label %lor.lhs.false.352

lor.lhs.false.352:                                ; preds = %lor.lhs.false.345
  %183 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld353 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld353, i32 0, i64 1
  %rtx355 = bitcast %union.rtunion_def* %arrayidx354 to %struct.rtx_def**
  %184 = load %struct.rtx_def*, %struct.rtx_def** %rtx355, align 8
  %185 = bitcast %struct.rtx_def* %184 to i32*
  %bf.load356 = load i32, i32* %185, align 8
  %bf.clear357 = and i32 %bf.load356, 65535
  %cmp358 = icmp eq i32 %bf.clear357, 58
  br i1 %cmp358, label %land.lhs.true.366, label %lor.lhs.false.359

lor.lhs.false.359:                                ; preds = %lor.lhs.false.352
  %186 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld360 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %186, i32 0, i32 1
  %arrayidx361 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld360, i32 0, i64 1
  %rtx362 = bitcast %union.rtunion_def* %arrayidx361 to %struct.rtx_def**
  %187 = load %struct.rtx_def*, %struct.rtx_def** %rtx362, align 8
  %188 = bitcast %struct.rtx_def* %187 to i32*
  %bf.load363 = load i32, i32* %188, align 8
  %bf.clear364 = and i32 %bf.load363, 65535
  %cmp365 = icmp eq i32 %bf.clear364, 55
  br i1 %cmp365, label %land.lhs.true.366, label %if.end.382

land.lhs.true.366:                                ; preds = %lor.lhs.false.359, %lor.lhs.false.352, %lor.lhs.false.345, %lor.lhs.false.338, %land.lhs.true.331
  %189 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld367 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %189, i32 0, i32 1
  %arrayidx368 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld367, i32 0, i64 0
  %rtx369 = bitcast %union.rtunion_def* %arrayidx368 to %struct.rtx_def**
  %190 = load %struct.rtx_def*, %struct.rtx_def** %rtx369, align 8
  %191 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  %cmp370 = icmp eq %struct.rtx_def* %190, %191
  br i1 %cmp370, label %if.then.381, label %lor.lhs.false.371

lor.lhs.false.371:                                ; preds = %land.lhs.true.366
  %192 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld372 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %192, i32 0, i32 1
  %arrayidx373 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld372, i32 0, i64 0
  %rtx374 = bitcast %union.rtunion_def* %arrayidx373 to %struct.rtx_def**
  %193 = load %struct.rtx_def*, %struct.rtx_def** %rtx374, align 8
  %194 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %cmp375 = icmp eq %struct.rtx_def* %193, %194
  br i1 %cmp375, label %if.then.381, label %lor.lhs.false.376

lor.lhs.false.376:                                ; preds = %lor.lhs.false.371
  %195 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld377 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %195, i32 0, i32 1
  %arrayidx378 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld377, i32 0, i64 0
  %rtx379 = bitcast %union.rtunion_def* %arrayidx378 to %struct.rtx_def**
  %196 = load %struct.rtx_def*, %struct.rtx_def** %rtx379, align 8
  %197 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  %cmp380 = icmp eq %struct.rtx_def* %196, %197
  br i1 %cmp380, label %if.then.381, label %if.end.382

if.then.381:                                      ; preds = %lor.lhs.false.376, %lor.lhs.false.371, %land.lhs.true.366
  store i32 1, i32* %retval
  br label %return

if.end.382:                                       ; preds = %lor.lhs.false.376, %lor.lhs.false.359, %if.end.327
  %198 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %199 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %cmp383 = icmp eq %struct.rtx_def* %198, %199
  br i1 %cmp383, label %if.then.435, label %lor.lhs.false.384

lor.lhs.false.384:                                ; preds = %if.end.382
  %200 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %201 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %cmp385 = icmp eq %struct.rtx_def* %200, %201
  br i1 %cmp385, label %if.then.435, label %lor.lhs.false.386

lor.lhs.false.386:                                ; preds = %lor.lhs.false.384
  %202 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %203 = bitcast %struct.rtx_def* %202 to i32*
  %bf.load387 = load i32, i32* %203, align 8
  %bf.clear388 = and i32 %bf.load387, 65535
  %cmp389 = icmp eq i32 %bf.clear388, 75
  br i1 %cmp389, label %land.lhs.true.390, label %if.end.448

land.lhs.true.390:                                ; preds = %lor.lhs.false.386
  %204 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld391 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1
  %arrayidx392 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld391, i32 0, i64 1
  %rtx393 = bitcast %union.rtunion_def* %arrayidx392 to %struct.rtx_def**
  %205 = load %struct.rtx_def*, %struct.rtx_def** %rtx393, align 8
  %206 = bitcast %struct.rtx_def* %205 to i32*
  %bf.load394 = load i32, i32* %206, align 8
  %bf.clear395 = and i32 %bf.load394, 65535
  %cmp396 = icmp eq i32 %bf.clear395, 67
  br i1 %cmp396, label %land.lhs.true.425, label %lor.lhs.false.397

lor.lhs.false.397:                                ; preds = %land.lhs.true.390
  %207 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld398 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %207, i32 0, i32 1
  %arrayidx399 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld398, i32 0, i64 1
  %rtx400 = bitcast %union.rtunion_def* %arrayidx399 to %struct.rtx_def**
  %208 = load %struct.rtx_def*, %struct.rtx_def** %rtx400, align 8
  %209 = bitcast %struct.rtx_def* %208 to i32*
  %bf.load401 = load i32, i32* %209, align 8
  %bf.clear402 = and i32 %bf.load401, 65535
  %cmp403 = icmp eq i32 %bf.clear402, 68
  br i1 %cmp403, label %land.lhs.true.425, label %lor.lhs.false.404

lor.lhs.false.404:                                ; preds = %lor.lhs.false.397
  %210 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld405 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %210, i32 0, i32 1
  %arrayidx406 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld405, i32 0, i64 1
  %rtx407 = bitcast %union.rtunion_def* %arrayidx406 to %struct.rtx_def**
  %211 = load %struct.rtx_def*, %struct.rtx_def** %rtx407, align 8
  %212 = bitcast %struct.rtx_def* %211 to i32*
  %bf.load408 = load i32, i32* %212, align 8
  %bf.clear409 = and i32 %bf.load408, 65535
  %cmp410 = icmp eq i32 %bf.clear409, 54
  br i1 %cmp410, label %land.lhs.true.425, label %lor.lhs.false.411

lor.lhs.false.411:                                ; preds = %lor.lhs.false.404
  %213 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld412 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %213, i32 0, i32 1
  %arrayidx413 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld412, i32 0, i64 1
  %rtx414 = bitcast %union.rtunion_def* %arrayidx413 to %struct.rtx_def**
  %214 = load %struct.rtx_def*, %struct.rtx_def** %rtx414, align 8
  %215 = bitcast %struct.rtx_def* %214 to i32*
  %bf.load415 = load i32, i32* %215, align 8
  %bf.clear416 = and i32 %bf.load415, 65535
  %cmp417 = icmp eq i32 %bf.clear416, 58
  br i1 %cmp417, label %land.lhs.true.425, label %lor.lhs.false.418

lor.lhs.false.418:                                ; preds = %lor.lhs.false.411
  %216 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld419 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %216, i32 0, i32 1
  %arrayidx420 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld419, i32 0, i64 1
  %rtx421 = bitcast %union.rtunion_def* %arrayidx420 to %struct.rtx_def**
  %217 = load %struct.rtx_def*, %struct.rtx_def** %rtx421, align 8
  %218 = bitcast %struct.rtx_def* %217 to i32*
  %bf.load422 = load i32, i32* %218, align 8
  %bf.clear423 = and i32 %bf.load422, 65535
  %cmp424 = icmp eq i32 %bf.clear423, 55
  br i1 %cmp424, label %land.lhs.true.425, label %if.end.448

land.lhs.true.425:                                ; preds = %lor.lhs.false.418, %lor.lhs.false.411, %lor.lhs.false.404, %lor.lhs.false.397, %land.lhs.true.390
  %219 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld426 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %219, i32 0, i32 1
  %arrayidx427 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld426, i32 0, i64 0
  %rtx428 = bitcast %union.rtunion_def* %arrayidx427 to %struct.rtx_def**
  %220 = load %struct.rtx_def*, %struct.rtx_def** %rtx428, align 8
  %221 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %cmp429 = icmp eq %struct.rtx_def* %220, %221
  br i1 %cmp429, label %if.then.435, label %lor.lhs.false.430

lor.lhs.false.430:                                ; preds = %land.lhs.true.425
  %222 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %fld431 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1
  %arrayidx432 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld431, i32 0, i64 0
  %rtx433 = bitcast %union.rtunion_def* %arrayidx432 to %struct.rtx_def**
  %223 = load %struct.rtx_def*, %struct.rtx_def** %rtx433, align 8
  %224 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %cmp434 = icmp eq %struct.rtx_def* %223, %224
  br i1 %cmp434, label %if.then.435, label %if.end.448

if.then.435:                                      ; preds = %lor.lhs.false.430, %land.lhs.true.425, %lor.lhs.false.384, %if.end.382
  %225 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld436 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %225, i32 0, i32 1
  %arrayidx437 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld436, i32 0, i64 0
  %rtx438 = bitcast %union.rtunion_def* %arrayidx437 to %struct.rtx_def**
  %226 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %tobool439 = icmp ne %struct.rtx_def* %226, null
  br i1 %tobool439, label %cond.true.440, label %cond.false.441

cond.true.440:                                    ; preds = %if.then.435
  %227 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  br label %cond.end

cond.false.441:                                   ; preds = %if.then.435
  %228 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false.441, %cond.true.440
  %cond442 = phi %struct.rtx_def* [ %227, %cond.true.440 ], [ %228, %cond.false.441 ]
  %call443 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx438, %struct.rtx_def* %cond442, i32 0)
  %tobool444 = icmp ne i32 %call443, 0
  br i1 %tobool444, label %if.then.445, label %if.end.446

if.then.445:                                      ; preds = %cond.end
  store i32 1, i32* %retval
  br label %return

if.end.446:                                       ; preds = %cond.end
  %229 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %call447 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %229)
  store %struct.rtx_def* %call447, %struct.rtx_def** %x, align 8
  %230 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %call447, %struct.rtx_def** %230, align 8
  br label %if.end.448

if.end.448:                                       ; preds = %if.end.446, %lor.lhs.false.430, %lor.lhs.false.418, %lor.lhs.false.386
  br label %sw.bb.449

sw.bb.449:                                        ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end.448
  %231 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld450 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %231, i32 0, i32 1
  %arrayidx451 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld450, i32 0, i64 0
  %rtx452 = bitcast %union.rtunion_def* %arrayidx451 to %struct.rtx_def**
  store %struct.rtx_def** %rtx452, %struct.rtx_def*** %loc.addr, align 8
  br label %restart

sw.bb.453:                                        ; preds = %if.end, %if.end
  %232 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld454 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1
  %arrayidx455 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld454, i32 0, i64 0
  %rtx456 = bitcast %union.rtunion_def* %arrayidx455 to %struct.rtx_def**
  %233 = load %struct.rtx_def*, %struct.rtx_def** %rtx456, align 8
  %234 = bitcast %struct.rtx_def* %233 to i32*
  %bf.load457 = load i32, i32* %234, align 8
  %bf.clear458 = and i32 %bf.load457, 65535
  %cmp459 = icmp eq i32 %bf.clear458, 66
  br i1 %cmp459, label %land.lhs.true.460, label %lor.lhs.false.472

land.lhs.true.460:                                ; preds = %sw.bb.453
  %235 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld461 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %235, i32 0, i32 1
  %arrayidx462 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld461, i32 0, i64 0
  %rtx463 = bitcast %union.rtunion_def* %arrayidx462 to %struct.rtx_def**
  %236 = load %struct.rtx_def*, %struct.rtx_def** %rtx463, align 8
  %fld464 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1
  %arrayidx465 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld464, i32 0, i64 0
  %rtx466 = bitcast %union.rtunion_def* %arrayidx465 to %struct.rtx_def**
  %237 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld467 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %237, i32 0, i32 1
  %arrayidx468 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld467, i32 0, i64 0
  %rtx469 = bitcast %union.rtunion_def* %arrayidx468 to %struct.rtx_def**
  %238 = load %struct.rtx_def*, %struct.rtx_def** %rtx469, align 8
  %call470 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx466, %struct.rtx_def* %238, i32 0)
  %tobool471 = icmp ne i32 %call470, 0
  br i1 %tobool471, label %if.then.485, label %lor.lhs.false.472

lor.lhs.false.472:                                ; preds = %land.lhs.true.460, %sw.bb.453
  %239 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld473 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %239, i32 0, i32 1
  %arrayidx474 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld473, i32 0, i64 0
  %rtx475 = bitcast %union.rtunion_def* %arrayidx474 to %struct.rtx_def**
  %240 = load %struct.rtx_def*, %struct.rtx_def** %rtx475, align 8
  %241 = bitcast %struct.rtx_def* %240 to i32*
  %bf.load476 = load i32, i32* %241, align 8
  %bf.clear477 = and i32 %bf.load476, 65535
  %cmp478 = icmp eq i32 %bf.clear477, 61
  br i1 %cmp478, label %land.lhs.true.479, label %if.end.486

land.lhs.true.479:                                ; preds = %lor.lhs.false.472
  %242 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld480 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %242, i32 0, i32 1
  %arrayidx481 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld480, i32 0, i64 0
  %rtx482 = bitcast %union.rtunion_def* %arrayidx481 to %struct.rtx_def**
  %243 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call483 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx482, %struct.rtx_def* %243, i32 0)
  %tobool484 = icmp ne i32 %call483, 0
  br i1 %tobool484, label %if.then.485, label %if.end.486

if.then.485:                                      ; preds = %land.lhs.true.479, %land.lhs.true.460
  store i32 1, i32* %retval
  br label %return

if.end.486:                                       ; preds = %land.lhs.true.479, %lor.lhs.false.472
  %244 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld487 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1
  %arrayidx488 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld487, i32 0, i64 0
  %rtx489 = bitcast %union.rtunion_def* %arrayidx488 to %struct.rtx_def**
  %245 = load %struct.rtx_def*, %struct.rtx_def** %rtx489, align 8
  %call490 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %245)
  %246 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld491 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %246, i32 0, i32 1
  %arrayidx492 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld491, i32 0, i64 0
  %rtx493 = bitcast %union.rtunion_def* %arrayidx492 to %struct.rtx_def**
  store %struct.rtx_def* %call490, %struct.rtx_def** %rtx493, align 8
  %247 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld494 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %247, i32 0, i32 1
  %arrayidx495 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld494, i32 0, i64 0
  %rtx496 = bitcast %union.rtunion_def* %arrayidx495 to %struct.rtx_def**
  store %struct.rtx_def** %rtx496, %struct.rtx_def*** %loc.addr, align 8
  br label %restart

sw.bb.497:                                        ; preds = %if.end
  %248 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %call498 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %248, i64* %offset)
  store %struct.rtx_def* %call498, %struct.rtx_def** %new, align 8
  %cmp499 = icmp ne %struct.rtx_def* %call498, null
  br i1 %cmp499, label %if.then.500, label %if.end.519

if.then.500:                                      ; preds = %sw.bb.497
  %249 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %250 = load i64, i64* %offset, align 8
  %call501 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %249, i64 %250)
  store %struct.rtx_def* %call501, %struct.rtx_def** %temp, align 8
  %251 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %252 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %253 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call502 = call i32 @validate_change(%struct.rtx_def* %251, %struct.rtx_def** %252, %struct.rtx_def* %253, i32 0)
  %tobool503 = icmp ne i32 %call502, 0
  br i1 %tobool503, label %if.end.518, label %if.then.504

if.then.504:                                      ; preds = %if.then.500
  %254 = load i32, i32* %extra_insns.addr, align 4
  %tobool505 = icmp ne i32 %254, 0
  br i1 %tobool505, label %if.end.507, label %if.then.506

if.then.506:                                      ; preds = %if.then.504
  store i32 0, i32* %retval
  br label %return

if.end.507:                                       ; preds = %if.then.504
  call void @start_sequence()
  %255 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call508 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %255, %struct.rtx_def* null)
  store %struct.rtx_def* %call508, %struct.rtx_def** %temp, align 8
  %call509 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call509, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %256 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %257 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call510 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %256, %struct.rtx_def* %257)
  %258 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %259 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %260 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call511 = call i32 @validate_change(%struct.rtx_def* %258, %struct.rtx_def** %259, %struct.rtx_def* %260, i32 0)
  %tobool512 = icmp ne i32 %call511, 0
  br i1 %tobool512, label %if.end.517, label %land.lhs.true.513

land.lhs.true.513:                                ; preds = %if.end.507
  %261 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %262 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %263 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %call514 = call i32 @validate_replace_rtx(%struct.rtx_def* %261, %struct.rtx_def* %262, %struct.rtx_def* %263)
  %tobool515 = icmp ne i32 %call514, 0
  br i1 %tobool515, label %if.end.517, label %if.then.516

if.then.516:                                      ; preds = %land.lhs.true.513
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 4126, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @__FUNCTION__.instantiate_virtual_regs_1, i32 0, i32 0)) #6
  unreachable

if.end.517:                                       ; preds = %land.lhs.true.513, %if.end.507
  br label %if.end.518

if.end.518:                                       ; preds = %if.end.517, %if.then.500
  br label %if.end.519

if.end.519:                                       ; preds = %if.end.518, %sw.bb.497
  store i32 1, i32* %retval
  br label %return

sw.bb.520:                                        ; preds = %if.end
  %264 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld521 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %264, i32 0, i32 1
  %arrayidx522 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld521, i32 0, i64 0
  %rtx523 = bitcast %union.rtunion_def* %arrayidx522 to %struct.rtx_def**
  %265 = load %struct.rtx_def*, %struct.rtx_def** %rtx523, align 8
  %266 = bitcast %struct.rtx_def* %265 to i32*
  %bf.load524 = load i32, i32* %266, align 8
  %bf.clear525 = and i32 %bf.load524, 65535
  %cmp526 = icmp eq i32 %bf.clear525, 61
  br i1 %cmp526, label %if.then.527, label %if.else.528

if.then.527:                                      ; preds = %sw.bb.520
  store i32 1, i32* %retval
  br label %return

if.else.528:                                      ; preds = %sw.bb.520
  %267 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld529 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %267, i32 0, i32 1
  %arrayidx530 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld529, i32 0, i64 0
  %rtx531 = bitcast %union.rtunion_def* %arrayidx530 to %struct.rtx_def**
  %268 = load %struct.rtx_def*, %struct.rtx_def** %rtx531, align 8
  %269 = bitcast %struct.rtx_def* %268 to i32*
  %bf.load532 = load i32, i32* %269, align 8
  %bf.clear533 = and i32 %bf.load532, 65535
  %cmp534 = icmp eq i32 %bf.clear533, 66
  br i1 %cmp534, label %if.then.535, label %if.end.543

if.then.535:                                      ; preds = %if.else.528
  %270 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld536 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %270, i32 0, i32 1
  %arrayidx537 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld536, i32 0, i64 0
  %rtx538 = bitcast %union.rtunion_def* %arrayidx537 to %struct.rtx_def**
  %271 = load %struct.rtx_def*, %struct.rtx_def** %rtx538, align 8
  %fld539 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %271, i32 0, i32 1
  %arrayidx540 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld539, i32 0, i64 0
  %rtx541 = bitcast %union.rtunion_def* %arrayidx540 to %struct.rtx_def**
  %call542 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx541, %struct.rtx_def* null, i32 0)
  store i32 1, i32* %retval
  br label %return

if.end.543:                                       ; preds = %if.else.528
  br label %if.end.544

if.end.544:                                       ; preds = %if.end.543
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.544
  %272 = load i32, i32* %code, align 4
  %idxprom = sext i32 %272 to i64
  %arrayidx545 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %273 = load i8*, i8** %arrayidx545, align 8
  store i8* %273, i8** %fmt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.586, %sw.epilog
  %274 = load i32, i32* %i, align 4
  %275 = load i32, i32* %code, align 4
  %idxprom546 = sext i32 %275 to i64
  %arrayidx547 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom546
  %276 = load i8, i8* %arrayidx547, align 1
  %conv = zext i8 %276 to i32
  %cmp548 = icmp slt i32 %274, %conv
  br i1 %cmp548, label %for.body, label %for.end.588

for.body:                                         ; preds = %for.cond
  %277 = load i8*, i8** %fmt, align 8
  %278 = load i8, i8* %277, align 1
  %conv550 = sext i8 %278 to i32
  %cmp551 = icmp eq i32 %conv550, 101
  br i1 %cmp551, label %if.then.553, label %if.else.562

if.then.553:                                      ; preds = %for.body
  %279 = load i32, i32* %i, align 4
  %idxprom554 = sext i32 %279 to i64
  %280 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld555 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %280, i32 0, i32 1
  %arrayidx556 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld555, i32 0, i64 %idxprom554
  %rtx557 = bitcast %union.rtunion_def* %arrayidx556 to %struct.rtx_def**
  %281 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %282 = load i32, i32* %extra_insns.addr, align 4
  %call558 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %rtx557, %struct.rtx_def* %281, i32 %282)
  %tobool559 = icmp ne i32 %call558, 0
  br i1 %tobool559, label %if.end.561, label %if.then.560

if.then.560:                                      ; preds = %if.then.553
  store i32 0, i32* %retval
  br label %return

if.end.561:                                       ; preds = %if.then.553
  br label %if.end.585

if.else.562:                                      ; preds = %for.body
  %283 = load i8*, i8** %fmt, align 8
  %284 = load i8, i8* %283, align 1
  %conv563 = sext i8 %284 to i32
  %cmp564 = icmp eq i32 %conv563, 69
  br i1 %cmp564, label %if.then.566, label %if.end.584

if.then.566:                                      ; preds = %if.else.562
  store i32 0, i32* %j, align 4
  br label %for.cond.567

for.cond.567:                                     ; preds = %for.inc, %if.then.566
  %285 = load i32, i32* %j, align 4
  %286 = load i32, i32* %i, align 4
  %idxprom568 = sext i32 %286 to i64
  %287 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld569 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %287, i32 0, i32 1
  %arrayidx570 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld569, i32 0, i64 %idxprom568
  %rtvec = bitcast %union.rtunion_def* %arrayidx570 to %struct.rtvec_def**
  %288 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %288, i32 0, i32 0
  %289 = load i32, i32* %num_elem, align 4
  %cmp571 = icmp slt i32 %285, %289
  br i1 %cmp571, label %for.body.573, label %for.end

for.body.573:                                     ; preds = %for.cond.567
  %290 = load i32, i32* %j, align 4
  %idxprom574 = sext i32 %290 to i64
  %291 = load i32, i32* %i, align 4
  %idxprom575 = sext i32 %291 to i64
  %292 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld576 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %292, i32 0, i32 1
  %arrayidx577 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld576, i32 0, i64 %idxprom575
  %rtvec578 = bitcast %union.rtunion_def* %arrayidx577 to %struct.rtvec_def**
  %293 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec578, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %293, i32 0, i32 1
  %arrayidx579 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom574
  %294 = load %struct.rtx_def*, %struct.rtx_def** %object.addr, align 8
  %295 = load i32, i32* %extra_insns.addr, align 4
  %call580 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %arrayidx579, %struct.rtx_def* %294, i32 %295)
  %tobool581 = icmp ne i32 %call580, 0
  br i1 %tobool581, label %if.end.583, label %if.then.582

if.then.582:                                      ; preds = %for.body.573
  store i32 0, i32* %retval
  br label %return

if.end.583:                                       ; preds = %for.body.573
  br label %for.inc

for.inc:                                          ; preds = %if.end.583
  %296 = load i32, i32* %j, align 4
  %inc = add nsw i32 %296, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.567

for.end:                                          ; preds = %for.cond.567
  br label %if.end.584

if.end.584:                                       ; preds = %for.end, %if.else.562
  br label %if.end.585

if.end.585:                                       ; preds = %if.end.584, %if.end.561
  br label %for.inc.586

for.inc.586:                                      ; preds = %if.end.585
  %297 = load i32, i32* %i, align 4
  %inc587 = add nsw i32 %297, 1
  store i32 %inc587, i32* %i, align 4
  %298 = load i8*, i8** %fmt, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %298, i32 1
  store i8* %incdec.ptr, i8** %fmt, align 8
  br label %for.cond

for.end.588:                                      ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.588, %if.then.582, %if.then.560, %if.then.535, %if.then.527, %if.end.519, %if.then.506, %if.then.485, %if.then.445, %if.then.381, %if.then.326, %if.end.225, %if.then.186, %if.then.165, %if.end.154, %if.end.35, %sw.bb, %if.then
  %299 = load i32, i32* %retval
  ret i32 %299
}

; Function Attrs: nounwind uwtable
define i32 @max_parm_reg_num() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 37
  %1 = load i32, i32* %x_max_parm_reg, align 4
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_first_nonparm_insn() #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_last_parm_insn = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 36
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x_last_parm_insn, align 8
  %tobool = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %x_last_parm_insn1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 36
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x_last_parm_insn1, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %5
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_first_block_beg() #0 {
entry:
  %searcher = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %call = call %struct.rtx_def* @get_first_nonparm_insn()
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %searcher, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %searcher, align 8
  %tobool = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %searcher, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %searcher, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32, i32* %rtint, align 4
  %cmp1 = icmp eq i32 %5, -98
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %searcher, align 8
  ret %struct.rtx_def* %6

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %searcher, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %searcher, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 4250, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.get_first_block_beg, i32 0, i32 0)) #6
  unreachable
}

; Function Attrs: nounwind uwtable
define i32 @aggregate_value_p(%union.tree_node* %exp) #0 {
entry:
  %retval = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %regno = alloca i32, align 4
  %nregs = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @tree_code_type, i32 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 116
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %2, %cond.true ], [ %4, %cond.false ]
  store %union.tree_node* %cond, %union.tree_node** %type, align 8
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %code5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2
  %bf.load6 = load i32, i32* %code5, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  %cmp8 = icmp eq i32 %bf.clear7, 5
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call i32 @ix86_return_in_memory(%union.tree_node* %6)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common12 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load13 = load i32, i32* %addressable_flag, align 8
  %bf.lshr = lshr i32 %bf.load13, 10
  %bf.clear14 = and i32 %bf.lshr, 1
  %tobool15 = icmp ne i32 %bf.clear14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.11
  store i32 1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.11
  %8 = load i32, i32* @flag_pcc_struct_return, align 4
  %tobool18 = icmp ne i32 %8, 0
  br i1 %tobool18, label %land.lhs.true, label %if.end.53

land.lhs.true:                                    ; preds = %if.end.17
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common19 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %code20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2
  %bf.load21 = load i32, i32* %code20, align 8
  %bf.clear22 = and i32 %bf.load21, 255
  %cmp23 = icmp eq i32 %bf.clear22, 18
  br i1 %cmp23, label %if.then.52, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common25 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %code26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2
  %bf.load27 = load i32, i32* %code26, align 8
  %bf.clear28 = and i32 %bf.load27, 255
  %cmp29 = icmp eq i32 %bf.clear28, 20
  br i1 %cmp29, label %if.then.52, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common32 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %code33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2
  %bf.load34 = load i32, i32* %code33, align 8
  %bf.clear35 = and i32 %bf.load34, 255
  %cmp36 = icmp eq i32 %bf.clear35, 21
  br i1 %cmp36, label %if.then.52, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %lor.lhs.false.31
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common39 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %code40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2
  %bf.load41 = load i32, i32* %code40, align 8
  %bf.clear42 = and i32 %bf.load41, 255
  %cmp43 = icmp eq i32 %bf.clear42, 22
  br i1 %cmp43, label %if.then.52, label %lor.lhs.false.45

lor.lhs.false.45:                                 ; preds = %lor.lhs.false.38
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common46 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %code47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2
  %bf.load48 = load i32, i32* %code47, align 8
  %bf.clear49 = and i32 %bf.load48, 255
  %cmp50 = icmp eq i32 %bf.clear49, 19
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %lor.lhs.false.45, %lor.lhs.false.38, %lor.lhs.false.31, %lor.lhs.false, %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end.53:                                        ; preds = %lor.lhs.false.45, %if.end.17
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call54 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %14, %union.tree_node* null, i32 0)
  store %struct.rtx_def* %call54, %struct.rtx_def** %reg, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load55 = load i32, i32* %16, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp ne i32 %bf.clear56, 61
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.53
  store i32 0, i32* %retval
  br label %return

if.end.60:                                        ; preds = %if.end.53
  %17 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx61 to i32*
  %18 = load i32, i32* %rtuint, align 4
  store i32 %18, i32* %regno, align 4
  %19 = load i32, i32* %regno, align 4
  %cmp62 = icmp sge i32 %19, 8
  br i1 %cmp62, label %land.lhs.true.64, label %lor.lhs.false.67

land.lhs.true.64:                                 ; preds = %if.end.60
  %20 = load i32, i32* %regno, align 4
  %cmp65 = icmp sle i32 %20, 15
  br i1 %cmp65, label %cond.true.85, label %lor.lhs.false.67

lor.lhs.false.67:                                 ; preds = %land.lhs.true.64, %if.end.60
  %21 = load i32, i32* %regno, align 4
  %cmp68 = icmp sge i32 %21, 21
  br i1 %cmp68, label %land.lhs.true.70, label %lor.lhs.false.73

land.lhs.true.70:                                 ; preds = %lor.lhs.false.67
  %22 = load i32, i32* %regno, align 4
  %cmp71 = icmp sle i32 %22, 28
  br i1 %cmp71, label %cond.true.85, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %land.lhs.true.70, %lor.lhs.false.67
  %23 = load i32, i32* %regno, align 4
  %cmp74 = icmp sge i32 %23, 45
  br i1 %cmp74, label %land.lhs.true.76, label %lor.lhs.false.79

land.lhs.true.76:                                 ; preds = %lor.lhs.false.73
  %24 = load i32, i32* %regno, align 4
  %cmp77 = icmp sle i32 %24, 52
  br i1 %cmp77, label %cond.true.85, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %land.lhs.true.76, %lor.lhs.false.73
  %25 = load i32, i32* %regno, align 4
  %cmp80 = icmp sge i32 %25, 29
  br i1 %cmp80, label %land.lhs.true.82, label %cond.false.104

land.lhs.true.82:                                 ; preds = %lor.lhs.false.79
  %26 = load i32, i32* %regno, align 4
  %cmp83 = icmp sle i32 %26, 36
  br i1 %cmp83, label %cond.true.85, label %cond.false.104

cond.true.85:                                     ; preds = %land.lhs.true.82, %land.lhs.true.76, %land.lhs.true.70, %land.lhs.true.64
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type86 = bitcast %union.tree_node* %27 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type86, i32 0, i32 6
  %bf.load87 = load i32, i32* %mode, align 4
  %bf.lshr88 = lshr i32 %bf.load87, 9
  %bf.clear89 = and i32 %bf.lshr88, 127
  %idxprom90 = sext i32 %bf.clear89 to i64
  %arrayidx91 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom90
  %28 = load i32, i32* %arrayidx91, align 4
  %cmp92 = icmp eq i32 %28, 5
  br i1 %cmp92, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true.85
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type94 = bitcast %union.tree_node* %29 to %struct.tree_type*
  %mode95 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type94, i32 0, i32 6
  %bf.load96 = load i32, i32* %mode95, align 4
  %bf.lshr97 = lshr i32 %bf.load96, 9
  %bf.clear98 = and i32 %bf.lshr97, 127
  %idxprom99 = sext i32 %bf.clear98 to i64
  %arrayidx100 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom99
  %30 = load i32, i32* %arrayidx100, align 4
  %cmp101 = icmp eq i32 %30, 6
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true.85
  %31 = phi i1 [ true, %cond.true.85 ], [ %cmp101, %lor.rhs ]
  %cond103 = select i1 %31, i32 2, i32 1
  br label %cond.end.146

cond.false.104:                                   ; preds = %land.lhs.true.82, %lor.lhs.false.79
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type105 = bitcast %union.tree_node* %32 to %struct.tree_type*
  %mode106 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type105, i32 0, i32 6
  %bf.load107 = load i32, i32* %mode106, align 4
  %bf.lshr108 = lshr i32 %bf.load107, 9
  %bf.clear109 = and i32 %bf.lshr108, 127
  %cmp110 = icmp eq i32 %bf.clear109, 18
  br i1 %cmp110, label %cond.true.112, label %cond.false.115

cond.true.112:                                    ; preds = %cond.false.104
  %33 = load i32, i32* @target_flags, align 4
  %and = and i32 %33, 33554432
  %tobool113 = icmp ne i32 %and, 0
  %cond114 = select i1 %tobool113, i32 2, i32 3
  br label %cond.end.144

cond.false.115:                                   ; preds = %cond.false.104
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type116 = bitcast %union.tree_node* %34 to %struct.tree_type*
  %mode117 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type116, i32 0, i32 6
  %bf.load118 = load i32, i32* %mode117, align 4
  %bf.lshr119 = lshr i32 %bf.load118, 9
  %bf.clear120 = and i32 %bf.lshr119, 127
  %cmp121 = icmp eq i32 %bf.clear120, 24
  br i1 %cmp121, label %cond.true.123, label %cond.false.127

cond.true.123:                                    ; preds = %cond.false.115
  %35 = load i32, i32* @target_flags, align 4
  %and124 = and i32 %35, 33554432
  %tobool125 = icmp ne i32 %and124, 0
  %cond126 = select i1 %tobool125, i32 4, i32 6
  br label %cond.end.142

cond.false.127:                                   ; preds = %cond.false.115
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8
  %type128 = bitcast %union.tree_node* %36 to %struct.tree_type*
  %mode129 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type128, i32 0, i32 6
  %bf.load130 = load i32, i32* %mode129, align 4
  %bf.lshr131 = lshr i32 %bf.load130, 9
  %bf.clear132 = and i32 %bf.lshr131, 127
  %idxprom133 = sext i32 %bf.clear132 to i64
  %arrayidx134 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom133
  %37 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %37 to i32
  %38 = load i32, i32* @target_flags, align 4
  %and136 = and i32 %38, 33554432
  %tobool137 = icmp ne i32 %and136, 0
  %cond138 = select i1 %tobool137, i32 8, i32 4
  %add = add nsw i32 %conv135, %cond138
  %sub = sub nsw i32 %add, 1
  %39 = load i32, i32* @target_flags, align 4
  %and139 = and i32 %39, 33554432
  %tobool140 = icmp ne i32 %and139, 0
  %cond141 = select i1 %tobool140, i32 8, i32 4
  %div = sdiv i32 %sub, %cond141
  br label %cond.end.142

cond.end.142:                                     ; preds = %cond.false.127, %cond.true.123
  %cond143 = phi i32 [ %cond126, %cond.true.123 ], [ %div, %cond.false.127 ]
  br label %cond.end.144

cond.end.144:                                     ; preds = %cond.end.142, %cond.true.112
  %cond145 = phi i32 [ %cond114, %cond.true.112 ], [ %cond143, %cond.end.142 ]
  br label %cond.end.146

cond.end.146:                                     ; preds = %cond.end.144, %lor.end
  %cond147 = phi i32 [ %cond103, %lor.end ], [ %cond145, %cond.end.144 ]
  store i32 %cond147, i32* %nregs, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.146
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %nregs, align 4
  %cmp148 = icmp slt i32 %40, %41
  br i1 %cmp148, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %42 = load i32, i32* %regno, align 4
  %43 = load i32, i32* %i, align 4
  %add150 = add nsw i32 %42, %43
  %idxprom151 = sext i32 %add150 to i64
  %arrayidx152 = getelementptr inbounds [53 x i8], [53 x i8]* @call_used_regs, i32 0, i64 %idxprom151
  %44 = load i8, i8* %arrayidx152, align 1
  %tobool153 = icmp ne i8 %44, 0
  br i1 %tobool153, label %if.end.155, label %if.then.154

if.then.154:                                      ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end.155:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.155
  %45 = load i32, i32* %i, align 4
  %inc = add nsw i32 %45, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.154, %if.then.59, %if.then.52, %if.then.16, %if.then.10, %if.then
  %46 = load i32, i32* %retval
  ret i32 %46
}

declare i32 @ix86_return_in_memory(%union.tree_node*) #2

declare %struct.rtx_def* @hard_function_value(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: nounwind uwtable
define void @assign_parms(%union.tree_node* %fndecl) #0 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %parm = alloca %union.tree_node*, align 8
  %entry_parm = alloca %struct.rtx_def*, align 8
  %stack_parm = alloca %struct.rtx_def*, align 8
  %args_so_far = alloca %struct.ix86_args, align 4
  %promoted_mode = alloca i32, align 4
  %passed_mode = alloca i32, align 4
  %nominal_mode = alloca i32, align 4
  %promoted_nominal_mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %stack_args_size = alloca %struct.args_size, align 8
  %fntype = alloca %union.tree_node*, align 8
  %fnargs = alloca %union.tree_node*, align 8
  %internal_arg_pointer = alloca %struct.rtx_def*, align 8
  %function_result_decl = alloca %union.tree_node*, align 8
  %varargs_setup = alloca i32, align 4
  %conversion_insns = alloca %struct.rtx_def*, align 8
  %alignment_pad = alloca %struct.args_size, align 8
  %hide_last_arg = alloca i32, align 4
  %stdarg = alloca i32, align 4
  %type37 = alloca %union.tree_node*, align 8
  %stack_offset = alloca %struct.args_size, align 8
  %arg_size = alloca %struct.args_size, align 8
  %passed_pointer = alloca i32, align 4
  %did_conversion = alloca i32, align 4
  %passed_type = alloca %union.tree_node*, align 8
  %nominal_type = alloca %union.tree_node*, align 8
  %pretend_named = alloca i32, align 4
  %last_named = alloca i32, align 4
  %named_arg = alloca i32, align 4
  %tem = alloca %union.tree_node*, align 8
  %offset_rtx = alloca %struct.rtx_def*, align 8
  %nregs = alloca i32, align 4
  %inc = alloca %union.tree_node*, align 8
  %thisparm_boundary = alloca i32, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %size_stored = alloca i32, align 4
  %parmreg = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %regnoi = alloca i32, align 4
  %regnor = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %save_tree_used = alloca i32, align 4
  %tempreg = alloca %struct.rtx_def*, align 8
  %tempreg819 = alloca %struct.rtx_def*, align 8
  %unsigned_p = alloca i32, align 4
  %new = alloca %struct.rtx_def**, align 8
  %old_max_parm_reg = alloca i32, align 4
  %submode = alloca i32, align 4
  %linsn = alloca %struct.rtx_def*, align 8
  %sinsn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %tempreg1192 = alloca %struct.rtx_def*, align 8
  %result1250 = alloca %union.tree_node*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %x1264 = alloca %struct.rtx_def*, align 8
  %decl_result = alloca %union.tree_node*, align 8
  %decl_rtl = alloca %struct.rtx_def*, align 8
  %real_decl_rtl = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %entry_parm, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8
  store %union.tree_node* %1, %union.tree_node** %fntype, align 8
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl = bitcast %union.tree_node* %2 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 10
  %3 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %3, %union.tree_node** %fnargs, align 8
  store %union.tree_node* null, %union.tree_node** %function_result_decl, align 8
  store i32 0, i32* %varargs_setup, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %conversion_insns, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %varargs = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 56
  %5 = bitcast i24* %varargs to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %fnargs, align 8
  %tobool1 = icmp ne %union.tree_node* %6, null
  br i1 %tobool1, label %land.lhs.true.2, label %land.end

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %fnargs, align 8
  %call = call %union.tree_node* @tree_last(%union.tree_node* %7)
  store %union.tree_node* %call, %union.tree_node** %parm, align 8
  %cmp = icmp ne %union.tree_node* %call, null
  br i1 %cmp, label %land.lhs.true.3, label %land.end

land.lhs.true.3:                                  ; preds = %land.lhs.true.2
  %8 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl4 = bitcast %union.tree_node* %8 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl4, i32 0, i32 8
  %9 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool5 = icmp ne %union.tree_node* %9, null
  br i1 %tobool5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.3
  %10 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl6 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %name7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 8
  %11 = load %union.tree_node*, %union.tree_node** %name7, align 8
  %identifier = bitcast %union.tree_node* %11 to %struct.tree_identifier*
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1
  %12 = load i8*, i8** %str, align 8
  %call8 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i32 0, i32 0)) #7
  %tobool9 = icmp ne i32 %call8, 0
  %lnot = xor i1 %tobool9, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.3, %land.lhs.true.2, %land.lhs.true, %entry
  %13 = phi i1 [ false, %land.lhs.true.3 ], [ false, %land.lhs.true.2 ], [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  store i32 %land.ext, i32* %hide_last_arg, align 4
  %14 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %type10 = bitcast %union.tree_node* %14 to %struct.tree_type*
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 1
  %15 = load %union.tree_node*, %union.tree_node** %values, align 8
  %cmp11 = icmp ne %union.tree_node* %15, null
  br i1 %cmp11, label %land.rhs.12, label %land.end.17

land.rhs.12:                                      ; preds = %land.end
  %16 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %type13 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %values14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 1
  %17 = load %union.tree_node*, %union.tree_node** %values14, align 8
  %call15 = call %union.tree_node* @tree_last(%union.tree_node* %17)
  %list = bitcast %union.tree_node* %call15 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %18 = load %union.tree_node*, %union.tree_node** %value, align 8
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 27), align 8
  %cmp16 = icmp ne %union.tree_node* %18, %19
  br label %land.end.17

land.end.17:                                      ; preds = %land.rhs.12, %land.end
  %20 = phi i1 [ false, %land.end ], [ %cmp16, %land.rhs.12 ]
  %land.ext18 = zext i1 %20 to i32
  store i32 %land.ext18, i32* %stdarg, align 4
  %21 = load i32, i32* %stdarg, align 4
  %22 = load %struct.function*, %struct.function** @cfun, align 8
  %stdarg19 = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 56
  %23 = bitcast i24* %stdarg19 to i32*
  %bf.load20 = load i32, i32* %23, align 8
  %bf.value = and i32 %21, 1
  %bf.shl = shl i32 %bf.value, 17
  %bf.clear21 = and i32 %bf.load20, -131073
  %bf.set = or i32 %bf.clear21, %bf.shl
  store i32 %bf.set, i32* %23, align 8
  %24 = load i8, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @fixed_regs, i32 0, i64 16), align 1
  %conv = sext i8 %24 to i32
  %tobool22 = icmp ne i32 %conv, 0
  br i1 %tobool22, label %if.else, label %if.then

if.then:                                          ; preds = %land.end.17
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %call23 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %25)
  store %struct.rtx_def* %call23, %struct.rtx_def** %internal_arg_pointer, align 8
  br label %if.end

if.else:                                          ; preds = %land.end.17
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  store %struct.rtx_def* %26, %struct.rtx_def** %internal_arg_pointer, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %27 = load %struct.rtx_def*, %struct.rtx_def** %internal_arg_pointer, align 8
  %28 = load %struct.function*, %struct.function** @cfun, align 8
  %internal_arg_pointer24 = getelementptr inbounds %struct.function, %struct.function* %28, i32 0, i32 15
  store %struct.rtx_def* %27, %struct.rtx_def** %internal_arg_pointer24, align 8
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0
  store i64 0, i64* %constant, align 8
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 1
  store %union.tree_node* null, %union.tree_node** %var, align 8
  %29 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl25 = bitcast %union.tree_node* %29 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl25, i32 0, i32 11
  %30 = load %union.tree_node*, %union.tree_node** %result, align 8
  %call26 = call i32 @aggregate_value_p(%union.tree_node* %30)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %land.lhs.true.28, label %if.end.44

land.lhs.true.28:                                 ; preds = %if.end
  %31 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 56
  %32 = bitcast i24* %returns_pcc_struct to i32*
  %bf.load29 = load i32, i32* %32, align 8
  %bf.lshr30 = lshr i32 %bf.load29, 1
  %bf.clear31 = and i32 %bf.lshr30, 1
  %tobool32 = icmp ne i32 %bf.clear31, 0
  br i1 %tobool32, label %if.end.44, label %land.lhs.true.33

land.lhs.true.33:                                 ; preds = %land.lhs.true.28
  %33 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_incoming_rtx, align 8
  %cmp34 = icmp eq %struct.rtx_def* %33, null
  br i1 %cmp34, label %if.then.36, label %if.end.44

if.then.36:                                       ; preds = %land.lhs.true.33
  %34 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  %common38 = bitcast %union.tree_node* %34 to %struct.tree_common*
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 1
  %35 = load %union.tree_node*, %union.tree_node** %type39, align 8
  %call40 = call %union.tree_node* @build_pointer_type(%union.tree_node* %35)
  store %union.tree_node* %call40, %union.tree_node** %type37, align 8
  %36 = load %union.tree_node*, %union.tree_node** %type37, align 8
  %call41 = call %union.tree_node* @build_decl(i32 35, %union.tree_node* null, %union.tree_node* %36)
  store %union.tree_node* %call41, %union.tree_node** %function_result_decl, align 8
  %37 = load %union.tree_node*, %union.tree_node** %type37, align 8
  %38 = load %union.tree_node*, %union.tree_node** %function_result_decl, align 8
  %decl42 = bitcast %union.tree_node* %38 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl42, i32 0, i32 12
  store %union.tree_node* %37, %union.tree_node** %initial, align 8
  %39 = load %union.tree_node*, %union.tree_node** %fnargs, align 8
  %40 = load %union.tree_node*, %union.tree_node** %function_result_decl, align 8
  %common43 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 0
  store %union.tree_node* %39, %union.tree_node** %chain, align 8
  %41 = load %union.tree_node*, %union.tree_node** %function_result_decl, align 8
  store %union.tree_node* %41, %union.tree_node** %fnargs, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.36, %land.lhs.true.33, %land.lhs.true.28, %if.end
  %42 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg = getelementptr inbounds %struct.function, %struct.function* %42, i32 0, i32 37
  store i32 58, i32* %x_max_parm_reg, align 4
  %43 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg45 = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 37
  %44 = load i32, i32* %x_max_parm_reg45, align 4
  %conv46 = zext i32 %44 to i64
  %call47 = call noalias i8* @xcalloc(i64 %conv46, i64 8)
  %45 = bitcast i8* %call47 to %struct.rtx_def**
  %46 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 38
  store %struct.rtx_def** %45, %struct.rtx_def*** %x_parm_reg_stack_loc, align 8
  %47 = load %union.tree_node*, %union.tree_node** %fntype, align 8
  call void @init_cumulative_args(%struct.ix86_args* %args_so_far, %union.tree_node* %47, %struct.rtx_def* null)
  %48 = load %struct.function*, %struct.function** @cfun, align 8
  %pretend_args_size = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 10
  store i32 0, i32* %pretend_args_size, align 4
  %49 = load %union.tree_node*, %union.tree_node** %fnargs, align 8
  store %union.tree_node* %49, %union.tree_node** %parm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.1368, %if.end.44
  %50 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %tobool48 = icmp ne %union.tree_node* %50, null
  br i1 %tobool48, label %for.body, label %for.end.1371

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %passed_pointer, align 4
  store i32 0, i32* %did_conversion, align 4
  %51 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl49 = bitcast %union.tree_node* %51 to %struct.tree_decl*
  %initial50 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl49, i32 0, i32 12
  %52 = load %union.tree_node*, %union.tree_node** %initial50, align 8
  store %union.tree_node* %52, %union.tree_node** %passed_type, align 8
  %53 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common51 = bitcast %union.tree_node* %53 to %struct.tree_common*
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 1
  %54 = load %union.tree_node*, %union.tree_node** %type52, align 8
  store %union.tree_node* %54, %union.tree_node** %nominal_type, align 8
  store i32 0, i32* %last_named, align 4
  %55 = load i32, i32* %stdarg, align 4
  %tobool53 = icmp ne i32 %55, 0
  br i1 %tobool53, label %if.then.59, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %56 = load %struct.function*, %struct.function** @cfun, align 8
  %varargs54 = getelementptr inbounds %struct.function, %struct.function* %56, i32 0, i32 56
  %57 = bitcast i24* %varargs54 to i32*
  %bf.load55 = load i32, i32* %57, align 8
  %bf.lshr56 = lshr i32 %bf.load55, 16
  %bf.clear57 = and i32 %bf.lshr56, 1
  %tobool58 = icmp ne i32 %bf.clear57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.76

if.then.59:                                       ; preds = %lor.lhs.false, %for.body
  %58 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common60 = bitcast %union.tree_node* %58 to %struct.tree_common*
  %chain61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 0
  %59 = load %union.tree_node*, %union.tree_node** %chain61, align 8
  store %union.tree_node* %59, %union.tree_node** %tem, align 8
  br label %for.cond.62

for.cond.62:                                      ; preds = %for.inc, %if.then.59
  %60 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %tobool63 = icmp ne %union.tree_node* %60, null
  br i1 %tobool63, label %for.body.64, label %for.end

for.body.64:                                      ; preds = %for.cond.62
  %61 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %decl65 = bitcast %union.tree_node* %61 to %struct.tree_decl*
  %name66 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl65, i32 0, i32 8
  %62 = load %union.tree_node*, %union.tree_node** %name66, align 8
  %tobool67 = icmp ne %union.tree_node* %62, null
  br i1 %tobool67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %for.body.64
  br label %for.end

if.end.69:                                        ; preds = %for.body.64
  br label %for.inc

for.inc:                                          ; preds = %if.end.69
  %63 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common70 = bitcast %union.tree_node* %63 to %struct.tree_common*
  %chain71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 0
  %64 = load %union.tree_node*, %union.tree_node** %chain71, align 8
  store %union.tree_node* %64, %union.tree_node** %tem, align 8
  br label %for.cond.62

for.end:                                          ; preds = %if.then.68, %for.cond.62
  %65 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %cmp72 = icmp eq %union.tree_node* %65, null
  br i1 %cmp72, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %for.end
  store i32 1, i32* %last_named, align 4
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.74, %for.end
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %lor.lhs.false
  %66 = load i32, i32* %last_named, align 4
  %tobool77 = icmp ne i32 %66, 0
  %lnot78 = xor i1 %tobool77, true
  %lnot.ext = zext i1 %lnot78 to i32
  store i32 %lnot.ext, i32* %named_arg, align 4
  %67 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common79 = bitcast %union.tree_node* %67 to %struct.tree_common*
  %type80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 1
  %68 = load %union.tree_node*, %union.tree_node** %type80, align 8
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*], [51 x %union.tree_node*]* @global_trees, i32 0, i64 0), align 8
  %cmp81 = icmp eq %union.tree_node* %68, %69
  br i1 %cmp81, label %if.then.92, label %lor.lhs.false.83

lor.lhs.false.83:                                 ; preds = %if.end.76
  %70 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common84 = bitcast %union.tree_node* %70 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2
  %bf.load85 = load i32, i32* %code, align 8
  %bf.clear86 = and i32 %bf.load85, 255
  %cmp87 = icmp ne i32 %bf.clear86, 35
  br i1 %cmp87, label %if.then.92, label %lor.lhs.false.89

lor.lhs.false.89:                                 ; preds = %lor.lhs.false.83
  %71 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %cmp90 = icmp eq %union.tree_node* %71, null
  br i1 %cmp90, label %if.then.92, label %if.end.107

if.then.92:                                       ; preds = %lor.lhs.false.89, %lor.lhs.false.83, %if.end.76
  %72 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call93 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %72)
  %73 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl94 = bitcast %union.tree_node* %73 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl94, i32 0, i32 17
  store %struct.rtx_def* %call93, %struct.rtx_def** %rtl, align 8
  %74 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl95 = bitcast %union.tree_node* %74 to %struct.tree_decl*
  %rtl96 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl95, i32 0, i32 17
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rtl96, align 8
  %tobool97 = icmp ne %struct.rtx_def* %75, null
  br i1 %tobool97, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.92
  %76 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl98 = bitcast %union.tree_node* %76 to %struct.tree_decl*
  %rtl99 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl98, i32 0, i32 17
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtl99, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.92
  %78 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %78, i8* null)
  %79 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl100 = bitcast %union.tree_node* %79 to %struct.tree_decl*
  %rtl101 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl100, i32 0, i32 17
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rtl101, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %77, %cond.true ], [ %80, %cond.false ]
  %81 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl102 = bitcast %union.tree_node* %81 to %struct.tree_decl*
  %u2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl102, i32 0, i32 19
  %r = bitcast %union.anon.1* %u2 to %struct.rtx_def**
  store %struct.rtx_def* %cond, %struct.rtx_def** %r, align 8
  %82 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common103 = bitcast %union.tree_node* %82 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2
  %bf.load104 = load i32, i32* %used_flag, align 8
  %bf.clear105 = and i32 %bf.load104, -65537
  %bf.set106 = or i32 %bf.clear105, 65536
  store i32 %bf.set106, i32* %used_flag, align 8
  br label %for.inc.1368

if.end.107:                                       ; preds = %lor.lhs.false.89
  %83 = load i32, i32* %hide_last_arg, align 4
  %tobool108 = icmp ne i32 %83, 0
  br i1 %tobool108, label %land.lhs.true.109, label %if.end.112

land.lhs.true.109:                                ; preds = %if.end.107
  %84 = load i32, i32* %last_named, align 4
  %tobool110 = icmp ne i32 %84, 0
  br i1 %tobool110, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %land.lhs.true.109
  %85 = load %struct.function*, %struct.function** @cfun, align 8
  %args_info = getelementptr inbounds %struct.function, %struct.function* %85, i32 0, i32 13
  %86 = bitcast %struct.ix86_args* %args_info to i8*
  %87 = bitcast %struct.ix86_args* %args_so_far to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 28, i32 4, i1 false)
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.111, %land.lhs.true.109, %if.end.107
  %88 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %type113 = bitcast %union.tree_node* %88 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type113, i32 0, i32 6
  %bf.load114 = load i32, i32* %mode, align 4
  %bf.lshr115 = lshr i32 %bf.load114, 9
  %bf.clear116 = and i32 %bf.lshr115, 127
  store i32 %bf.clear116, i32* %passed_mode, align 4
  %89 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8
  %type117 = bitcast %union.tree_node* %89 to %struct.tree_type*
  %mode118 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type117, i32 0, i32 6
  %bf.load119 = load i32, i32* %mode118, align 4
  %bf.lshr120 = lshr i32 %bf.load119, 9
  %bf.clear121 = and i32 %bf.lshr120, 127
  store i32 %bf.clear121, i32* %nominal_mode, align 4
  %90 = load i32, i32* %nominal_mode, align 4
  %cmp122 = icmp eq i32 %90, 0
  br i1 %cmp122, label %if.then.124, label %if.end.141

if.then.124:                                      ; preds = %if.end.112
  %91 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %92 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl125 = bitcast %union.tree_node* %92 to %struct.tree_decl*
  %rtl126 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl125, i32 0, i32 17
  store %struct.rtx_def* %91, %struct.rtx_def** %rtl126, align 8
  %93 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl127 = bitcast %union.tree_node* %93 to %struct.tree_decl*
  %rtl128 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl127, i32 0, i32 17
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rtl128, align 8
  %tobool129 = icmp ne %struct.rtx_def* %94, null
  br i1 %tobool129, label %cond.true.130, label %cond.false.133

cond.true.130:                                    ; preds = %if.then.124
  %95 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl131 = bitcast %union.tree_node* %95 to %struct.tree_decl*
  %rtl132 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl131, i32 0, i32 17
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtl132, align 8
  br label %cond.end.136

cond.false.133:                                   ; preds = %if.then.124
  %97 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %97, i8* null)
  %98 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl134 = bitcast %union.tree_node* %98 to %struct.tree_decl*
  %rtl135 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl134, i32 0, i32 17
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtl135, align 8
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.133, %cond.true.130
  %cond137 = phi %struct.rtx_def* [ %96, %cond.true.130 ], [ %99, %cond.false.133 ]
  %100 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl138 = bitcast %union.tree_node* %100 to %struct.tree_decl*
  %u2139 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl138, i32 0, i32 19
  %r140 = bitcast %union.anon.1* %u2139 to %struct.rtx_def**
  store %struct.rtx_def* %cond137, %struct.rtx_def** %r140, align 8
  br label %for.inc.1368

if.end.141:                                       ; preds = %if.end.112
  %101 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl142 = bitcast %union.tree_node* %101 to %struct.tree_decl*
  %transparent_union = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl142, i32 0, i32 5
  %102 = bitcast i48* %transparent_union to i64*
  %bf.load143 = load i64, i64* %102, align 8
  %bf.lshr144 = lshr i64 %bf.load143, 19
  %bf.clear145 = and i64 %bf.lshr144, 1
  %bf.cast = trunc i64 %bf.clear145 to i32
  %tobool146 = icmp ne i32 %bf.cast, 0
  br i1 %tobool146, label %if.then.160, label %lor.lhs.false.147

lor.lhs.false.147:                                ; preds = %if.end.141
  %103 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %common148 = bitcast %union.tree_node* %103 to %struct.tree_common*
  %code149 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common148, i32 0, i32 2
  %bf.load150 = load i32, i32* %code149, align 8
  %bf.clear151 = and i32 %bf.load150, 255
  %cmp152 = icmp eq i32 %bf.clear151, 21
  br i1 %cmp152, label %land.lhs.true.154, label %if.end.165

land.lhs.true.154:                                ; preds = %lor.lhs.false.147
  %104 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %type155 = bitcast %union.tree_node* %104 to %struct.tree_type*
  %transparent_union_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type155, i32 0, i32 6
  %bf.load156 = load i32, i32* %transparent_union_flag, align 4
  %bf.lshr157 = lshr i32 %bf.load156, 19
  %bf.clear158 = and i32 %bf.lshr157, 1
  %tobool159 = icmp ne i32 %bf.clear158, 0
  br i1 %tobool159, label %if.then.160, label %if.end.165

if.then.160:                                      ; preds = %land.lhs.true.154, %if.end.141
  %105 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %type161 = bitcast %union.tree_node* %105 to %struct.tree_type*
  %values162 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type161, i32 0, i32 1
  %106 = load %union.tree_node*, %union.tree_node** %values162, align 8
  %common163 = bitcast %union.tree_node* %106 to %struct.tree_common*
  %type164 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common163, i32 0, i32 1
  %107 = load %union.tree_node*, %union.tree_node** %type164, align 8
  store %union.tree_node* %107, %union.tree_node** %passed_type, align 8
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.160, %land.lhs.true.154, %lor.lhs.false.147
  %108 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %type166 = bitcast %union.tree_node* %108 to %struct.tree_type*
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type166, i32 0, i32 2
  %109 = load %union.tree_node*, %union.tree_node** %size, align 8
  %common167 = bitcast %union.tree_node* %109 to %struct.tree_common*
  %code168 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common167, i32 0, i32 2
  %bf.load169 = load i32, i32* %code168, align 8
  %bf.clear170 = and i32 %bf.load169, 255
  %cmp171 = icmp ne i32 %bf.clear170, 25
  br i1 %cmp171, label %land.lhs.true.173, label %lor.lhs.false.178

land.lhs.true.173:                                ; preds = %if.end.165
  %110 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %type174 = bitcast %union.tree_node* %110 to %struct.tree_type*
  %size175 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type174, i32 0, i32 2
  %111 = load %union.tree_node*, %union.tree_node** %size175, align 8
  %call176 = call i32 @contains_placeholder_p(%union.tree_node* %111)
  %tobool177 = icmp ne i32 %call176, 0
  br i1 %tobool177, label %if.then.184, label %lor.lhs.false.178

lor.lhs.false.178:                                ; preds = %land.lhs.true.173, %if.end.165
  %112 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %common179 = bitcast %union.tree_node* %112 to %struct.tree_common*
  %addressable_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common179, i32 0, i32 2
  %bf.load180 = load i32, i32* %addressable_flag, align 8
  %bf.lshr181 = lshr i32 %bf.load180, 10
  %bf.clear182 = and i32 %bf.lshr181, 1
  %tobool183 = icmp ne i32 %bf.clear182, 0
  br i1 %tobool183, label %if.then.184, label %if.end.188

if.then.184:                                      ; preds = %lor.lhs.false.178, %land.lhs.true.173
  %113 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %call185 = call %union.tree_node* @build_pointer_type(%union.tree_node* %113)
  store %union.tree_node* %call185, %union.tree_node** %nominal_type, align 8
  store %union.tree_node* %call185, %union.tree_node** %passed_type, align 8
  store i32 1, i32* %passed_pointer, align 4
  %114 = load i32, i32* @target_flags, align 4
  %and = and i32 %114, 33554432
  %tobool186 = icmp ne i32 %and, 0
  %cond187 = select i1 %tobool186, i32 5, i32 4
  store i32 %cond187, i32* %nominal_mode, align 4
  store i32 %cond187, i32* %passed_mode, align 4
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.184, %lor.lhs.false.178
  %115 = load i32, i32* %passed_mode, align 4
  store i32 %115, i32* %promoted_mode, align 4
  %116 = load i32, i32* %promoted_mode, align 4
  %117 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %118 = load i32, i32* %named_arg, align 4
  %call189 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %116, %union.tree_node* %117, i32 %118)
  store %struct.rtx_def* %call189, %struct.rtx_def** %entry_parm, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %cmp190 = icmp eq %struct.rtx_def* %119, null
  br i1 %cmp190, label %if.then.192, label %if.end.193

if.then.192:                                      ; preds = %if.end.188
  %120 = load i32, i32* %passed_mode, align 4
  store i32 %120, i32* %promoted_mode, align 4
  br label %if.end.193

if.end.193:                                       ; preds = %if.then.192, %if.end.188
  %121 = load i32, i32* %last_named, align 4
  %tobool194 = icmp ne i32 %121, 0
  br i1 %tobool194, label %land.lhs.true.195, label %if.end.199

land.lhs.true.195:                                ; preds = %if.end.193
  %122 = load i32, i32* %varargs_setup, align 4
  %tobool196 = icmp ne i32 %122, 0
  br i1 %tobool196, label %if.end.199, label %if.then.197

if.then.197:                                      ; preds = %land.lhs.true.195
  %123 = load i32, i32* %promoted_mode, align 4
  %124 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %125 = load %struct.function*, %struct.function** @cfun, align 8
  %pretend_args_size198 = getelementptr inbounds %struct.function, %struct.function* %125, i32 0, i32 10
  call void @ix86_setup_incoming_varargs(%struct.ix86_args* %args_so_far, i32 %123, %union.tree_node* %124, i32* %pretend_args_size198, i32 0)
  store i32 1, i32* %varargs_setup, align 4
  br label %if.end.199

if.end.199:                                       ; preds = %if.then.197, %land.lhs.true.195, %if.end.193
  %126 = load i32, i32* %named_arg, align 4
  %tobool200 = icmp ne i32 %126, 0
  br i1 %tobool200, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.199
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.199
  %127 = phi i1 [ true, %if.end.199 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %127 to i32
  store i32 %lor.ext, i32* %pretend_named, align 4
  %128 = load i32, i32* %promoted_mode, align 4
  %129 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %130 = load i32, i32* %promoted_mode, align 4
  %131 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %132 = load i32, i32* %pretend_named, align 4
  %call201 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %130, %union.tree_node* %131, i32 %132)
  %cmp202 = icmp ne %struct.rtx_def* %call201, null
  %conv203 = zext i1 %cmp202 to i32
  %133 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  call void @locate_and_pad_parm(i32 %128, %union.tree_node* %129, i32 %conv203, %union.tree_node* %133, %struct.args_size* %stack_args_size, %struct.args_size* %stack_offset, %struct.args_size* %arg_size, %struct.args_size* %alignment_pad)
  %var204 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_offset, i32 0, i32 1
  %134 = load %union.tree_node*, %union.tree_node** %var204, align 8
  %cmp205 = icmp eq %union.tree_node* %134, null
  br i1 %cmp205, label %cond.true.207, label %cond.false.210

cond.true.207:                                    ; preds = %lor.end
  %constant208 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_offset, i32 0, i32 0
  %135 = load i64, i64* %constant208, align 8
  %call209 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %135)
  br label %cond.end.226

cond.false.210:                                   ; preds = %lor.end
  %var211 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_offset, i32 0, i32 1
  %136 = load %union.tree_node*, %union.tree_node** %var211, align 8
  %cmp212 = icmp eq %union.tree_node* %136, null
  br i1 %cmp212, label %cond.true.214, label %cond.false.217

cond.true.214:                                    ; preds = %cond.false.210
  %constant215 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_offset, i32 0, i32 0
  %137 = load i64, i64* %constant215, align 8
  %call216 = call %union.tree_node* @size_int_wide(i64 %137, i32 1)
  br label %cond.end.223

cond.false.217:                                   ; preds = %cond.false.210
  %138 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %var218 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_offset, i32 0, i32 1
  %139 = load %union.tree_node*, %union.tree_node** %var218, align 8
  %call219 = call %union.tree_node* @convert(%union.tree_node* %138, %union.tree_node* %139)
  %constant220 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_offset, i32 0, i32 0
  %140 = load i64, i64* %constant220, align 8
  %call221 = call %union.tree_node* @size_int_wide(i64 %140, i32 1)
  %call222 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call219, %union.tree_node* %call221)
  br label %cond.end.223

cond.end.223:                                     ; preds = %cond.false.217, %cond.true.214
  %cond224 = phi %union.tree_node* [ %call216, %cond.true.214 ], [ %call222, %cond.false.217 ]
  %call225 = call %struct.rtx_def* @expand_expr(%union.tree_node* %cond224, %struct.rtx_def* null, i32 0, i32 0)
  br label %cond.end.226

cond.end.226:                                     ; preds = %cond.end.223, %cond.true.207
  %cond227 = phi %struct.rtx_def* [ %call209, %cond.true.207 ], [ %call225, %cond.end.223 ]
  store %struct.rtx_def* %cond227, %struct.rtx_def** %offset_rtx, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %142 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %cmp228 = icmp eq %struct.rtx_def* %141, %142
  br i1 %cmp228, label %if.then.230, label %if.else.232

if.then.230:                                      ; preds = %cond.end.226
  %143 = load i32, i32* %promoted_mode, align 4
  %144 = load %struct.rtx_def*, %struct.rtx_def** %internal_arg_pointer, align 8
  %call231 = call %struct.rtx_def* @gen_rtx_MEM(i32 %143, %struct.rtx_def* %144)
  store %struct.rtx_def* %call231, %struct.rtx_def** %stack_parm, align 8
  br label %if.end.238

if.else.232:                                      ; preds = %cond.end.226
  %145 = load i32, i32* %promoted_mode, align 4
  %146 = load i32, i32* @target_flags, align 4
  %and233 = and i32 %146, 33554432
  %tobool234 = icmp ne i32 %and233, 0
  %cond235 = select i1 %tobool234, i32 5, i32 4
  %147 = load %struct.rtx_def*, %struct.rtx_def** %internal_arg_pointer, align 8
  %148 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8
  %call236 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %cond235, %struct.rtx_def* %147, %struct.rtx_def* %148)
  %call237 = call %struct.rtx_def* @gen_rtx_MEM(i32 %145, %struct.rtx_def* %call236)
  store %struct.rtx_def* %call237, %struct.rtx_def** %stack_parm, align 8
  br label %if.end.238

if.end.238:                                       ; preds = %if.else.232, %if.then.230
  %149 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %150 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @set_mem_attributes(%struct.rtx_def* %149, %union.tree_node* %150, i32 1)
  %151 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %cmp239 = icmp ne %union.tree_node* %151, null
  br i1 %cmp239, label %land.lhs.true.241, label %if.end.285

land.lhs.true.241:                                ; preds = %if.end.238
  %152 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %type242 = bitcast %union.tree_node* %152 to %struct.tree_type*
  %size243 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type242, i32 0, i32 2
  %153 = load %union.tree_node*, %union.tree_node** %size243, align 8
  %common244 = bitcast %union.tree_node* %153 to %struct.tree_common*
  %code245 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common244, i32 0, i32 2
  %bf.load246 = load i32, i32* %code245, align 8
  %bf.clear247 = and i32 %bf.load246, 255
  %cmp248 = icmp ne i32 %bf.clear247, 25
  br i1 %cmp248, label %if.then.284, label %lor.lhs.false.250

lor.lhs.false.250:                                ; preds = %land.lhs.true.241
  %154 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %common251 = bitcast %union.tree_node* %154 to %struct.tree_common*
  %addressable_flag252 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common251, i32 0, i32 2
  %bf.load253 = load i32, i32* %addressable_flag252, align 8
  %bf.lshr254 = lshr i32 %bf.load253, 10
  %bf.clear255 = and i32 %bf.lshr254, 1
  %tobool256 = icmp ne i32 %bf.clear255, 0
  br i1 %tobool256, label %if.then.284, label %lor.lhs.false.257

lor.lhs.false.257:                                ; preds = %lor.lhs.false.250
  %155 = load i32, i32* %promoted_mode, align 4
  %cmp258 = icmp eq i32 %155, 6
  br i1 %cmp258, label %if.then.284, label %lor.lhs.false.260

lor.lhs.false.260:                                ; preds = %lor.lhs.false.257
  %156 = load i32, i32* %promoted_mode, align 4
  %cmp261 = icmp eq i32 %156, 51
  br i1 %cmp261, label %land.lhs.true.263, label %if.end.285

land.lhs.true.263:                                ; preds = %lor.lhs.false.260
  %157 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %cmp264 = icmp ne %union.tree_node* %157, null
  br i1 %cmp264, label %land.lhs.true.266, label %land.lhs.true.283

land.lhs.true.266:                                ; preds = %land.lhs.true.263
  %158 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %type267 = bitcast %union.tree_node* %158 to %struct.tree_type*
  %size268 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type267, i32 0, i32 2
  %159 = load %union.tree_node*, %union.tree_node** %size268, align 8
  %common269 = bitcast %union.tree_node* %159 to %struct.tree_common*
  %code270 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common269, i32 0, i32 2
  %bf.load271 = load i32, i32* %code270, align 8
  %bf.clear272 = and i32 %bf.load271, 255
  %cmp273 = icmp eq i32 %bf.clear272, 25
  br i1 %cmp273, label %land.lhs.true.275, label %land.lhs.true.283

land.lhs.true.275:                                ; preds = %land.lhs.true.266
  %160 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %call276 = call i64 @int_size_in_bytes(%union.tree_node* %160)
  %161 = load i32, i32* @target_flags, align 4
  %and277 = and i32 %161, 33554432
  %tobool278 = icmp ne i32 %and277, 0
  %cond279 = select i1 %tobool278, i32 64, i32 32
  %div = sdiv i32 %cond279, 8
  %conv280 = sext i32 %div to i64
  %rem = srem i64 %call276, %conv280
  %cmp281 = icmp eq i64 0, %rem
  br i1 %cmp281, label %if.end.285, label %land.lhs.true.283

land.lhs.true.283:                                ; preds = %land.lhs.true.275, %land.lhs.true.266, %land.lhs.true.263
  br i1 false, label %if.then.284, label %if.end.285

if.then.284:                                      ; preds = %land.lhs.true.283, %lor.lhs.false.257, %lor.lhs.false.250, %land.lhs.true.241
  store %struct.rtx_def* null, %struct.rtx_def** %entry_parm, align 8
  br label %if.end.285

if.end.285:                                       ; preds = %if.then.284, %land.lhs.true.283, %land.lhs.true.275, %lor.lhs.false.260, %if.end.238
  %162 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %tobool286 = icmp ne %struct.rtx_def* %162, null
  br i1 %tobool286, label %if.then.287, label %if.end.327

if.then.287:                                      ; preds = %if.end.285
  store i32 0, i32* %nregs, align 4
  %163 = load i32, i32* %nregs, align 4
  %cmp288 = icmp sgt i32 %163, 0
  br i1 %cmp288, label %if.then.290, label %if.end.326

if.then.290:                                      ; preds = %if.then.287
  %164 = load i32, i32* %nregs, align 4
  %165 = load i32, i32* @target_flags, align 4
  %and291 = and i32 %165, 33554432
  %tobool292 = icmp ne i32 %and291, 0
  %cond293 = select i1 %tobool292, i32 8, i32 4
  %mul = mul nsw i32 %164, %cond293
  %166 = load i32, i32* @target_flags, align 4
  %and294 = and i32 %166, 33554432
  %tobool295 = icmp ne i32 %and294, 0
  %cond296 = select i1 %tobool295, i32 64, i32 32
  %div297 = sdiv i32 %cond296, 8
  %add = add nsw i32 %mul, %div297
  %sub = sub nsw i32 %add, 1
  %167 = load i32, i32* @target_flags, align 4
  %and298 = and i32 %167, 33554432
  %tobool299 = icmp ne i32 %and298, 0
  %cond300 = select i1 %tobool299, i32 64, i32 32
  %div301 = sdiv i32 %cond300, 8
  %div302 = sdiv i32 %sub, %div301
  %168 = load i32, i32* @target_flags, align 4
  %and303 = and i32 %168, 33554432
  %tobool304 = icmp ne i32 %and303, 0
  %cond305 = select i1 %tobool304, i32 64, i32 32
  %div306 = sdiv i32 %cond305, 8
  %mul307 = mul nsw i32 %div302, %div306
  %169 = load %struct.function*, %struct.function** @cfun, align 8
  %pretend_args_size308 = getelementptr inbounds %struct.function, %struct.function* %169, i32 0, i32 10
  store i32 %mul307, i32* %pretend_args_size308, align 4
  %170 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %171 = bitcast %struct.rtx_def* %170 to i32*
  %bf.load309 = load i32, i32* %171, align 8
  %bf.clear310 = and i32 %bf.load309, 65535
  %cmp311 = icmp eq i32 %bf.clear310, 39
  br i1 %cmp311, label %if.then.313, label %if.else.319

if.then.313:                                      ; preds = %if.then.290
  %172 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %call314 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %172)
  %173 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %174 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common315 = bitcast %union.tree_node* %174 to %struct.tree_common*
  %type316 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common315, i32 0, i32 1
  %175 = load %union.tree_node*, %union.tree_node** %type316, align 8
  %call317 = call i64 @int_size_in_bytes(%union.tree_node* %175)
  %conv318 = trunc i64 %call317 to i32
  call void @emit_group_store(%struct.rtx_def* %call314, %struct.rtx_def* %173, i32 %conv318)
  br label %if.end.325

if.else.319:                                      ; preds = %if.then.290
  %176 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %177 = load i32, i32* %rtuint, align 4
  %178 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %call320 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %178)
  %179 = load i32, i32* %nregs, align 4
  %180 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common321 = bitcast %union.tree_node* %180 to %struct.tree_common*
  %type322 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common321, i32 0, i32 1
  %181 = load %union.tree_node*, %union.tree_node** %type322, align 8
  %call323 = call i64 @int_size_in_bytes(%union.tree_node* %181)
  %conv324 = trunc i64 %call323 to i32
  call void @move_block_from_reg(i32 %177, %struct.rtx_def* %call320, i32 %179, i32 %conv324)
  br label %if.end.325

if.end.325:                                       ; preds = %if.else.319, %if.then.313
  %182 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  store %struct.rtx_def* %182, %struct.rtx_def** %entry_parm, align 8
  br label %if.end.326

if.end.326:                                       ; preds = %if.end.325, %if.then.287
  br label %if.end.327

if.end.327:                                       ; preds = %if.end.326, %if.end.285
  %183 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %cmp328 = icmp eq %struct.rtx_def* %183, null
  br i1 %cmp328, label %if.then.330, label %if.end.331

if.then.330:                                      ; preds = %if.end.327
  %184 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  store %struct.rtx_def* %184, %struct.rtx_def** %entry_parm, align 8
  br label %if.end.331

if.end.331:                                       ; preds = %if.then.330, %if.end.327
  %185 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %186 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl332 = bitcast %union.tree_node* %186 to %struct.tree_decl*
  %u2333 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl332, i32 0, i32 19
  %r334 = bitcast %union.anon.1* %u2333 to %struct.rtx_def**
  store %struct.rtx_def* %185, %struct.rtx_def** %r334, align 8
  %187 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %188 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %cmp335 = icmp eq %struct.rtx_def* %187, %188
  br i1 %cmp335, label %if.then.350, label %lor.lhs.false.337

lor.lhs.false.337:                                ; preds = %if.end.331
  %189 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %190 = bitcast %struct.rtx_def* %189 to i32*
  %bf.load338 = load i32, i32* %190, align 8
  %bf.clear339 = and i32 %bf.load338, 65535
  %cmp340 = icmp eq i32 %bf.clear339, 39
  br i1 %cmp340, label %land.lhs.true.342, label %if.else.379

land.lhs.true.342:                                ; preds = %lor.lhs.false.337
  %191 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld343 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %191, i32 0, i32 1
  %arrayidx344 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld343, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx344 to %struct.rtvec_def**
  %192 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %192, i32 0, i32 1
  %arrayidx345 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %193 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx345, align 8
  %fld346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %193, i32 0, i32 1
  %arrayidx347 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld346, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx347 to %struct.rtx_def**
  %194 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %cmp348 = icmp eq %struct.rtx_def* %194, null
  br i1 %cmp348, label %if.then.350, label %if.else.379

if.then.350:                                      ; preds = %land.lhs.true.342, %if.end.331
  %constant351 = getelementptr inbounds %struct.args_size, %struct.args_size* %arg_size, i32 0, i32 0
  %195 = load i64, i64* %constant351, align 8
  %constant352 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0
  %196 = load i64, i64* %constant352, align 8
  %add353 = add nsw i64 %196, %195
  store i64 %add353, i64* %constant352, align 8
  %var354 = getelementptr inbounds %struct.args_size, %struct.args_size* %arg_size, i32 0, i32 1
  %197 = load %union.tree_node*, %union.tree_node** %var354, align 8
  %tobool355 = icmp ne %union.tree_node* %197, null
  br i1 %tobool355, label %if.then.356, label %if.end.378

if.then.356:                                      ; preds = %if.then.350
  br label %do.body

do.body:                                          ; preds = %if.then.356
  %var357 = getelementptr inbounds %struct.args_size, %struct.args_size* %arg_size, i32 0, i32 1
  %198 = load %union.tree_node*, %union.tree_node** %var357, align 8
  store %union.tree_node* %198, %union.tree_node** %inc, align 8
  %199 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call358 = call i32 @host_integerp(%union.tree_node* %199, i32 0)
  %tobool359 = icmp ne i32 %call358, 0
  br i1 %tobool359, label %if.then.360, label %if.else.364

if.then.360:                                      ; preds = %do.body
  %200 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call361 = call i64 @tree_low_cst(%union.tree_node* %200, i32 0)
  %constant362 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0
  %201 = load i64, i64* %constant362, align 8
  %add363 = add nsw i64 %201, %call361
  store i64 %add363, i64* %constant362, align 8
  br label %if.end.377

if.else.364:                                      ; preds = %do.body
  %var365 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 1
  %202 = load %union.tree_node*, %union.tree_node** %var365, align 8
  %cmp366 = icmp eq %union.tree_node* %202, null
  br i1 %cmp366, label %if.then.368, label %if.else.371

if.then.368:                                      ; preds = %if.else.364
  %203 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %204 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call369 = call %union.tree_node* @convert(%union.tree_node* %203, %union.tree_node* %204)
  %var370 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 1
  store %union.tree_node* %call369, %union.tree_node** %var370, align 8
  br label %if.end.376

if.else.371:                                      ; preds = %if.else.364
  %var372 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 1
  %205 = load %union.tree_node*, %union.tree_node** %var372, align 8
  %206 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %207 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call373 = call %union.tree_node* @convert(%union.tree_node* %206, %union.tree_node* %207)
  %call374 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %205, %union.tree_node* %call373)
  %var375 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 1
  store %union.tree_node* %call374, %union.tree_node** %var375, align 8
  br label %if.end.376

if.end.376:                                       ; preds = %if.else.371, %if.then.368
  br label %if.end.377

if.end.377:                                       ; preds = %if.end.376, %if.then.360
  br label %do.end

do.end:                                           ; preds = %if.end.377
  br label %if.end.378

if.end.378:                                       ; preds = %do.end, %if.then.350
  br label %if.end.380

if.else.379:                                      ; preds = %land.lhs.true.342, %lor.lhs.false.337
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8
  br label %if.end.380

if.end.380:                                       ; preds = %if.else.379, %if.end.378
  %208 = load i32, i32* %promoted_mode, align 4
  %209 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %210 = load i32, i32* %named_arg, align 4
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %208, %union.tree_node* %209, i32 %210)
  %211 = load i32, i32* %promoted_mode, align 4
  %212 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %call381 = call i32 @ix86_function_arg_boundary(i32 %211, %union.tree_node* %212)
  store i32 %call381, i32* %thisparm_boundary, align 4
  %213 = load i32, i32* %nominal_mode, align 4
  %call382 = call i32 @get_mode_alignment(i32 %213)
  %214 = load i32, i32* %thisparm_boundary, align 4
  %cmp383 = icmp ugt i32 %call382, %214
  br i1 %cmp383, label %if.then.385, label %if.end.386

if.then.385:                                      ; preds = %if.end.380
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8
  br label %if.end.386

if.end.386:                                       ; preds = %if.then.385, %if.end.380
  %215 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %cmp387 = icmp ne %struct.rtx_def* %215, null
  br i1 %cmp387, label %land.lhs.true.389, label %if.end.396

land.lhs.true.389:                                ; preds = %if.end.386
  %216 = load i32, i32* %nominal_mode, align 4
  %cmp390 = icmp ne i32 %216, 51
  br i1 %cmp390, label %land.lhs.true.392, label %if.end.396

land.lhs.true.392:                                ; preds = %land.lhs.true.389
  %217 = load i32, i32* %nominal_mode, align 4
  %218 = load i32, i32* %passed_mode, align 4
  %cmp393 = icmp ne i32 %217, %218
  br i1 %cmp393, label %if.then.395, label %if.end.396

if.then.395:                                      ; preds = %land.lhs.true.392
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8
  br label %if.end.396

if.end.396:                                       ; preds = %if.then.395, %land.lhs.true.392, %land.lhs.true.389, %if.end.386
  %219 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %220 = bitcast %struct.rtx_def* %219 to i32*
  %bf.load397 = load i32, i32* %220, align 8
  %bf.clear398 = and i32 %bf.load397, 65535
  %cmp399 = icmp eq i32 %bf.clear398, 39
  br i1 %cmp399, label %land.lhs.true.401, label %if.end.485

land.lhs.true.401:                                ; preds = %if.end.396
  %221 = load i32, i32* %nominal_mode, align 4
  %cmp402 = icmp ne i32 %221, 51
  br i1 %cmp402, label %land.lhs.true.404, label %if.end.485

land.lhs.true.404:                                ; preds = %land.lhs.true.401
  %222 = load i32, i32* %passed_mode, align 4
  %cmp405 = icmp ne i32 %222, 51
  br i1 %cmp405, label %if.then.407, label %if.end.485

if.then.407:                                      ; preds = %land.lhs.true.404
  %223 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld408 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %223, i32 0, i32 1
  %arrayidx409 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld408, i32 0, i64 0
  %rtvec410 = bitcast %union.rtunion_def* %arrayidx409 to %struct.rtvec_def**
  %224 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec410, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %224, i32 0, i32 0
  %225 = load i32, i32* %num_elem, align 4
  store i32 %225, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.411

for.cond.411:                                     ; preds = %for.inc.482, %if.then.407
  %226 = load i32, i32* %i, align 4
  %227 = load i32, i32* %len, align 4
  %cmp412 = icmp slt i32 %226, %227
  br i1 %cmp412, label %for.body.414, label %for.end.484

for.body.414:                                     ; preds = %for.cond.411
  %228 = load i32, i32* %i, align 4
  %idxprom = sext i32 %228 to i64
  %229 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld415 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1
  %arrayidx416 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld415, i32 0, i64 0
  %rtvec417 = bitcast %union.rtunion_def* %arrayidx416 to %struct.rtvec_def**
  %230 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec417, align 8
  %elem418 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %230, i32 0, i32 1
  %arrayidx419 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem418, i32 0, i64 %idxprom
  %231 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx419, align 8
  %fld420 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %231, i32 0, i32 1
  %arrayidx421 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld420, i32 0, i64 0
  %rtx422 = bitcast %union.rtunion_def* %arrayidx421 to %struct.rtx_def**
  %232 = load %struct.rtx_def*, %struct.rtx_def** %rtx422, align 8
  %cmp423 = icmp ne %struct.rtx_def* %232, null
  br i1 %cmp423, label %land.lhs.true.425, label %if.end.481

land.lhs.true.425:                                ; preds = %for.body.414
  %233 = load i32, i32* %i, align 4
  %idxprom426 = sext i32 %233 to i64
  %234 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld427 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %234, i32 0, i32 1
  %arrayidx428 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld427, i32 0, i64 0
  %rtvec429 = bitcast %union.rtunion_def* %arrayidx428 to %struct.rtvec_def**
  %235 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec429, align 8
  %elem430 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %235, i32 0, i32 1
  %arrayidx431 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem430, i32 0, i64 %idxprom426
  %236 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx431, align 8
  %fld432 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1
  %arrayidx433 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld432, i32 0, i64 0
  %rtx434 = bitcast %union.rtunion_def* %arrayidx433 to %struct.rtx_def**
  %237 = load %struct.rtx_def*, %struct.rtx_def** %rtx434, align 8
  %238 = bitcast %struct.rtx_def* %237 to i32*
  %bf.load435 = load i32, i32* %238, align 8
  %bf.clear436 = and i32 %bf.load435, 65535
  %cmp437 = icmp eq i32 %bf.clear436, 61
  br i1 %cmp437, label %land.lhs.true.439, label %if.end.481

land.lhs.true.439:                                ; preds = %land.lhs.true.425
  %239 = load i32, i32* %i, align 4
  %idxprom440 = sext i32 %239 to i64
  %240 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld441 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %240, i32 0, i32 1
  %arrayidx442 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld441, i32 0, i64 0
  %rtvec443 = bitcast %union.rtunion_def* %arrayidx442 to %struct.rtvec_def**
  %241 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec443, align 8
  %elem444 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %241, i32 0, i32 1
  %arrayidx445 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem444, i32 0, i64 %idxprom440
  %242 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx445, align 8
  %fld446 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %242, i32 0, i32 1
  %arrayidx447 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld446, i32 0, i64 0
  %rtx448 = bitcast %union.rtunion_def* %arrayidx447 to %struct.rtx_def**
  %243 = load %struct.rtx_def*, %struct.rtx_def** %rtx448, align 8
  %244 = bitcast %struct.rtx_def* %243 to i32*
  %bf.load449 = load i32, i32* %244, align 8
  %bf.lshr450 = lshr i32 %bf.load449, 16
  %bf.clear451 = and i32 %bf.lshr450, 255
  %245 = load i32, i32* %passed_mode, align 4
  %cmp452 = icmp eq i32 %bf.clear451, %245
  br i1 %cmp452, label %land.lhs.true.454, label %if.end.481

land.lhs.true.454:                                ; preds = %land.lhs.true.439
  %246 = load i32, i32* %i, align 4
  %idxprom455 = sext i32 %246 to i64
  %247 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld456 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %247, i32 0, i32 1
  %arrayidx457 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld456, i32 0, i64 0
  %rtvec458 = bitcast %union.rtunion_def* %arrayidx457 to %struct.rtvec_def**
  %248 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec458, align 8
  %elem459 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %248, i32 0, i32 1
  %arrayidx460 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem459, i32 0, i64 %idxprom455
  %249 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx460, align 8
  %fld461 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %249, i32 0, i32 1
  %arrayidx462 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld461, i32 0, i64 1
  %rtx463 = bitcast %union.rtunion_def* %arrayidx462 to %struct.rtx_def**
  %250 = load %struct.rtx_def*, %struct.rtx_def** %rtx463, align 8
  %fld464 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %250, i32 0, i32 1
  %arrayidx465 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld464, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx465 to i64*
  %251 = load i64, i64* %rtwint, align 8
  %cmp466 = icmp eq i64 %251, 0
  br i1 %cmp466, label %if.then.468, label %if.end.481

if.then.468:                                      ; preds = %land.lhs.true.454
  %252 = load i32, i32* %i, align 4
  %idxprom469 = sext i32 %252 to i64
  %253 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld470 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %253, i32 0, i32 1
  %arrayidx471 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld470, i32 0, i64 0
  %rtvec472 = bitcast %union.rtunion_def* %arrayidx471 to %struct.rtvec_def**
  %254 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec472, align 8
  %elem473 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %254, i32 0, i32 1
  %arrayidx474 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem473, i32 0, i64 %idxprom469
  %255 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx474, align 8
  %fld475 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %255, i32 0, i32 1
  %arrayidx476 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld475, i32 0, i64 0
  %rtx477 = bitcast %union.rtunion_def* %arrayidx476 to %struct.rtx_def**
  %256 = load %struct.rtx_def*, %struct.rtx_def** %rtx477, align 8
  store %struct.rtx_def* %256, %struct.rtx_def** %entry_parm, align 8
  %257 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %258 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl478 = bitcast %union.tree_node* %258 to %struct.tree_decl*
  %u2479 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl478, i32 0, i32 19
  %r480 = bitcast %union.anon.1* %u2479 to %struct.rtx_def**
  store %struct.rtx_def* %257, %struct.rtx_def** %r480, align 8
  br label %for.end.484

if.end.481:                                       ; preds = %land.lhs.true.454, %land.lhs.true.439, %land.lhs.true.425, %for.body.414
  br label %for.inc.482

for.inc.482:                                      ; preds = %if.end.481
  %259 = load i32, i32* %i, align 4
  %inc483 = add nsw i32 %259, 1
  store i32 %inc483, i32* %i, align 4
  br label %for.cond.411

for.end.484:                                      ; preds = %if.then.468, %for.cond.411
  br label %if.end.485

if.end.485:                                       ; preds = %for.end.484, %land.lhs.true.404, %land.lhs.true.401, %if.end.396
  %260 = load i32, i32* %nominal_mode, align 4
  %cmp486 = icmp eq i32 %260, 51
  br i1 %cmp486, label %if.then.493, label %lor.lhs.false.488

lor.lhs.false.488:                                ; preds = %if.end.485
  %261 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %262 = bitcast %struct.rtx_def* %261 to i32*
  %bf.load489 = load i32, i32* %262, align 8
  %bf.clear490 = and i32 %bf.load489, 65535
  %cmp491 = icmp eq i32 %bf.clear490, 39
  br i1 %cmp491, label %if.then.493, label %if.else.568

if.then.493:                                      ; preds = %lor.lhs.false.488, %if.end.485
  %263 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %264 = bitcast %struct.rtx_def* %263 to i32*
  %bf.load494 = load i32, i32* %264, align 8
  %bf.clear495 = and i32 %bf.load494, 65535
  %cmp496 = icmp eq i32 %bf.clear495, 61
  br i1 %cmp496, label %if.then.503, label %lor.lhs.false.498

lor.lhs.false.498:                                ; preds = %if.then.493
  %265 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %266 = bitcast %struct.rtx_def* %265 to i32*
  %bf.load499 = load i32, i32* %266, align 8
  %bf.clear500 = and i32 %bf.load499, 65535
  %cmp501 = icmp eq i32 %bf.clear500, 39
  br i1 %cmp501, label %if.then.503, label %if.end.565

if.then.503:                                      ; preds = %lor.lhs.false.498, %if.then.493
  %267 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common504 = bitcast %union.tree_node* %267 to %struct.tree_common*
  %type505 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common504, i32 0, i32 1
  %268 = load %union.tree_node*, %union.tree_node** %type505, align 8
  %call506 = call i64 @int_size_in_bytes(%union.tree_node* %268)
  %269 = load i32, i32* @target_flags, align 4
  %and507 = and i32 %269, 33554432
  %tobool508 = icmp ne i32 %and507, 0
  %cond509 = select i1 %tobool508, i32 8, i32 4
  %conv510 = sext i32 %cond509 to i64
  %add511 = add nsw i64 %call506, %conv510
  %sub512 = sub nsw i64 %add511, 1
  %270 = load i32, i32* @target_flags, align 4
  %and513 = and i32 %270, 33554432
  %tobool514 = icmp ne i32 %and513, 0
  %cond515 = select i1 %tobool514, i32 8, i32 4
  %sub516 = sub nsw i32 %cond515, 1
  %neg = xor i32 %sub516, -1
  %conv517 = sext i32 %neg to i64
  %and518 = and i64 %sub512, %conv517
  %conv519 = trunc i64 %and518 to i32
  store i32 %conv519, i32* %size_stored, align 4
  %271 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %cmp520 = icmp eq %struct.rtx_def* %271, null
  br i1 %cmp520, label %if.then.522, label %if.else.528

if.then.522:                                      ; preds = %if.then.503
  %272 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %273 = bitcast %struct.rtx_def* %272 to i32*
  %bf.load523 = load i32, i32* %273, align 8
  %bf.lshr524 = lshr i32 %bf.load523, 16
  %bf.clear525 = and i32 %bf.lshr524, 255
  %274 = load i32, i32* %size_stored, align 4
  %conv526 = sext i32 %274 to i64
  %call527 = call %struct.rtx_def* @assign_stack_local(i32 %bf.clear525, i64 %conv526, i32 0)
  store %struct.rtx_def* %call527, %struct.rtx_def** %stack_parm, align 8
  %275 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %276 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @set_mem_attributes(%struct.rtx_def* %275, %union.tree_node* %276, i32 1)
  br label %if.end.540

if.else.528:                                      ; preds = %if.then.503
  %277 = load i32, i32* @target_flags, align 4
  %and529 = and i32 %277, 33554432
  %tobool530 = icmp ne i32 %and529, 0
  %cond531 = select i1 %tobool530, i32 64, i32 32
  %278 = load i32, i32* @target_flags, align 4
  %and532 = and i32 %278, 33554432
  %tobool533 = icmp ne i32 %and532, 0
  %cond534 = select i1 %tobool533, i32 64, i32 32
  %rem535 = srem i32 %cond531, %cond534
  %cmp536 = icmp ne i32 %rem535, 0
  br i1 %cmp536, label %if.then.538, label %if.end.539

if.then.538:                                      ; preds = %if.else.528
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 4729, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__FUNCTION__.assign_parms, i32 0, i32 0)) #6
  unreachable

if.end.539:                                       ; preds = %if.else.528
  br label %if.end.540

if.end.540:                                       ; preds = %if.end.539, %if.then.522
  %279 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %280 = bitcast %struct.rtx_def* %279 to i32*
  %bf.load541 = load i32, i32* %280, align 8
  %bf.clear542 = and i32 %bf.load541, 65535
  %cmp543 = icmp eq i32 %bf.clear542, 39
  br i1 %cmp543, label %if.then.545, label %if.else.551

if.then.545:                                      ; preds = %if.end.540
  %281 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %call546 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %281)
  %282 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %283 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common547 = bitcast %union.tree_node* %283 to %struct.tree_common*
  %type548 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common547, i32 0, i32 1
  %284 = load %union.tree_node*, %union.tree_node** %type548, align 8
  %call549 = call i64 @int_size_in_bytes(%union.tree_node* %284)
  %conv550 = trunc i64 %call549 to i32
  call void @emit_group_store(%struct.rtx_def* %call546, %struct.rtx_def* %282, i32 %conv550)
  br label %if.end.564

if.else.551:                                      ; preds = %if.end.540
  %285 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %fld552 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %285, i32 0, i32 1
  %arrayidx553 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld552, i32 0, i64 0
  %rtuint554 = bitcast %union.rtunion_def* %arrayidx553 to i32*
  %286 = load i32, i32* %rtuint554, align 4
  %287 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %call555 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %287)
  %288 = load i32, i32* %size_stored, align 4
  %289 = load i32, i32* @target_flags, align 4
  %and556 = and i32 %289, 33554432
  %tobool557 = icmp ne i32 %and556, 0
  %cond558 = select i1 %tobool557, i32 8, i32 4
  %div559 = sdiv i32 %288, %cond558
  %290 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common560 = bitcast %union.tree_node* %290 to %struct.tree_common*
  %type561 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common560, i32 0, i32 1
  %291 = load %union.tree_node*, %union.tree_node** %type561, align 8
  %call562 = call i64 @int_size_in_bytes(%union.tree_node* %291)
  %conv563 = trunc i64 %call562 to i32
  call void @move_block_from_reg(i32 %286, %struct.rtx_def* %call555, i32 %div559, i32 %conv563)
  br label %if.end.564

if.end.564:                                       ; preds = %if.else.551, %if.then.545
  br label %if.end.565

if.end.565:                                       ; preds = %if.end.564, %lor.lhs.false.498
  %292 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %293 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl566 = bitcast %union.tree_node* %293 to %struct.tree_decl*
  %rtl567 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl566, i32 0, i32 17
  store %struct.rtx_def* %292, %struct.rtx_def** %rtl567, align 8
  br label %if.end.1246

if.else.568:                                      ; preds = %lor.lhs.false.488
  %294 = load i32, i32* @optimize, align 4
  %tobool569 = icmp ne i32 %294, 0
  br i1 %tobool569, label %lor.lhs.false.577, label %land.lhs.true.570

land.lhs.true.570:                                ; preds = %if.else.568
  %295 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl571 = bitcast %union.tree_node* %295 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl571, i32 0, i32 5
  %296 = bitcast i48* %regdecl_flag to i64*
  %bf.load572 = load i64, i64* %296, align 8
  %bf.lshr573 = lshr i64 %bf.load572, 10
  %bf.clear574 = and i64 %bf.lshr573, 1
  %bf.cast575 = trunc i64 %bf.clear574 to i32
  %tobool576 = icmp ne i32 %bf.cast575, 0
  br i1 %tobool576, label %lor.lhs.false.577, label %lor.lhs.false.594

lor.lhs.false.577:                                ; preds = %land.lhs.true.570, %if.else.568
  %297 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common578 = bitcast %union.tree_node* %297 to %struct.tree_common*
  %side_effects_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common578, i32 0, i32 2
  %bf.load579 = load i32, i32* %side_effects_flag, align 8
  %bf.lshr580 = lshr i32 %bf.load579, 8
  %bf.clear581 = and i32 %bf.lshr580, 1
  %tobool582 = icmp ne i32 %bf.clear581, 0
  br i1 %tobool582, label %lor.lhs.false.594, label %lor.lhs.false.583

lor.lhs.false.583:                                ; preds = %lor.lhs.false.577
  %298 = load i32, i32* @flag_float_store, align 4
  %tobool584 = icmp ne i32 %298, 0
  br i1 %tobool584, label %land.lhs.true.585, label %if.then.599

land.lhs.true.585:                                ; preds = %lor.lhs.false.583
  %299 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common586 = bitcast %union.tree_node* %299 to %struct.tree_common*
  %type587 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common586, i32 0, i32 1
  %300 = load %union.tree_node*, %union.tree_node** %type587, align 8
  %common588 = bitcast %union.tree_node* %300 to %struct.tree_common*
  %code589 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common588, i32 0, i32 2
  %bf.load590 = load i32, i32* %code589, align 8
  %bf.clear591 = and i32 %bf.load590, 255
  %cmp592 = icmp eq i32 %bf.clear591, 7
  br i1 %cmp592, label %lor.lhs.false.594, label %if.then.599

lor.lhs.false.594:                                ; preds = %land.lhs.true.585, %lor.lhs.false.577, %land.lhs.true.570
  %301 = load i32, i32* %passed_pointer, align 4
  %tobool595 = icmp ne i32 %301, 0
  br i1 %tobool595, label %if.then.599, label %lor.lhs.false.596

lor.lhs.false.596:                                ; preds = %lor.lhs.false.594
  %302 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %303 = load %union.tree_node*, %union.tree_node** %function_result_decl, align 8
  %cmp597 = icmp eq %union.tree_node* %302, %303
  br i1 %cmp597, label %if.then.599, label %if.else.1188

if.then.599:                                      ; preds = %lor.lhs.false.596, %lor.lhs.false.594, %land.lhs.true.585, %lor.lhs.false.583
  store i32 0, i32* %regnoi, align 4
  store i32 0, i32* %regnor, align 4
  %304 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common600 = bitcast %union.tree_node* %304 to %struct.tree_common*
  %type601 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common600, i32 0, i32 1
  %305 = load %union.tree_node*, %union.tree_node** %type601, align 8
  %common602 = bitcast %union.tree_node* %305 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common602, i32 0, i32 2
  %bf.load603 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr604 = lshr i32 %bf.load603, 13
  %bf.clear605 = and i32 %bf.lshr604, 1
  store i32 %bf.clear605, i32* %unsignedp, align 4
  %306 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common606 = bitcast %union.tree_node* %306 to %struct.tree_common*
  %type607 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common606, i32 0, i32 1
  %307 = load %union.tree_node*, %union.tree_node** %type607, align 8
  %308 = load i32, i32* %nominal_mode, align 4
  %call608 = call i32 @promote_mode(%union.tree_node* %307, i32 %308, i32* %unsignedp, i32 0)
  store i32 %call608, i32* %promoted_nominal_mode, align 4
  %309 = load i32, i32* %promoted_nominal_mode, align 4
  %call609 = call %struct.rtx_def* @gen_reg_rtx(i32 %309)
  store %struct.rtx_def* %call609, %struct.rtx_def** %parmreg, align 8
  %310 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  call void @mark_user_reg(%struct.rtx_def* %310)
  %311 = load i32, i32* %passed_pointer, align 4
  %tobool610 = icmp ne i32 %311, 0
  br i1 %tobool610, label %if.then.611, label %if.else.622

if.then.611:                                      ; preds = %if.then.599
  %312 = load %union.tree_node*, %union.tree_node** %passed_type, align 8
  %common612 = bitcast %union.tree_node* %312 to %struct.tree_common*
  %type613 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common612, i32 0, i32 1
  %313 = load %union.tree_node*, %union.tree_node** %type613, align 8
  %type614 = bitcast %union.tree_node* %313 to %struct.tree_type*
  %mode615 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type614, i32 0, i32 6
  %bf.load616 = load i32, i32* %mode615, align 4
  %bf.lshr617 = lshr i32 %bf.load616, 9
  %bf.clear618 = and i32 %bf.lshr617, 127
  %314 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %call619 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear618, %struct.rtx_def* %314)
  store %struct.rtx_def* %call619, %struct.rtx_def** %x, align 8
  %315 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %316 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @set_mem_attributes(%struct.rtx_def* %315, %union.tree_node* %316, i32 1)
  %317 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %318 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl620 = bitcast %union.tree_node* %318 to %struct.tree_decl*
  %rtl621 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl620, i32 0, i32 17
  store %struct.rtx_def* %317, %struct.rtx_def** %rtl621, align 8
  br label %if.end.636

if.else.622:                                      ; preds = %if.then.599
  %319 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %320 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl623 = bitcast %union.tree_node* %320 to %struct.tree_decl*
  %rtl624 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl623, i32 0, i32 17
  store %struct.rtx_def* %319, %struct.rtx_def** %rtl624, align 8
  %321 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl625 = bitcast %union.tree_node* %321 to %struct.tree_decl*
  %rtl626 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl625, i32 0, i32 17
  %322 = load %struct.rtx_def*, %struct.rtx_def** %rtl626, align 8
  %tobool627 = icmp ne %struct.rtx_def* %322, null
  br i1 %tobool627, label %cond.true.628, label %cond.false.631

cond.true.628:                                    ; preds = %if.else.622
  %323 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl629 = bitcast %union.tree_node* %323 to %struct.tree_decl*
  %rtl630 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl629, i32 0, i32 17
  %324 = load %struct.rtx_def*, %struct.rtx_def** %rtl630, align 8
  br label %cond.end.634

cond.false.631:                                   ; preds = %if.else.622
  %325 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %325, i8* null)
  %326 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl632 = bitcast %union.tree_node* %326 to %struct.tree_decl*
  %rtl633 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl632, i32 0, i32 17
  %327 = load %struct.rtx_def*, %struct.rtx_def** %rtl633, align 8
  br label %cond.end.634

cond.end.634:                                     ; preds = %cond.false.631, %cond.true.628
  %cond635 = phi %struct.rtx_def* [ %324, %cond.true.628 ], [ %327, %cond.false.631 ]
  %328 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @maybe_set_unchanging(%struct.rtx_def* %cond635, %union.tree_node* %328)
  br label %if.end.636

if.end.636:                                       ; preds = %cond.end.634, %if.then.611
  %329 = load i32, i32* %nominal_mode, align 4
  %330 = load i32, i32* %passed_mode, align 4
  %cmp637 = icmp ne i32 %329, %330
  br i1 %cmp637, label %if.then.642, label %lor.lhs.false.639

lor.lhs.false.639:                                ; preds = %if.end.636
  %331 = load i32, i32* %promoted_nominal_mode, align 4
  %332 = load i32, i32* %promoted_mode, align 4
  %cmp640 = icmp ne i32 %331, %332
  br i1 %cmp640, label %if.then.642, label %if.else.723

if.then.642:                                      ; preds = %lor.lhs.false.639, %if.end.636
  %333 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %334 = bitcast %struct.rtx_def* %333 to i32*
  %bf.load643 = load i32, i32* %334, align 8
  %bf.lshr644 = lshr i32 %bf.load643, 16
  %bf.clear645 = and i32 %bf.lshr644, 255
  %call646 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear645)
  store %struct.rtx_def* %call646, %struct.rtx_def** %tempreg, align 8
  %335 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %336 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %call647 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %336)
  %call648 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %335, %struct.rtx_def* %call647)
  %337 = load %struct.rtx_def*, %struct.rtx_def** %conversion_insns, align 8
  call void @push_to_sequence(%struct.rtx_def* %337)
  %338 = load i32, i32* %nominal_mode, align 4
  %339 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %340 = load i32, i32* %unsignedp, align 4
  %call649 = call %struct.rtx_def* @convert_to_mode(i32 %338, %struct.rtx_def* %339, i32 %340)
  store %struct.rtx_def* %call649, %struct.rtx_def** %tempreg, align 8
  %341 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %342 = bitcast %struct.rtx_def* %341 to i32*
  %bf.load650 = load i32, i32* %342, align 8
  %bf.clear651 = and i32 %bf.load650, 65535
  %cmp652 = icmp eq i32 %bf.clear651, 63
  br i1 %cmp652, label %land.lhs.true.654, label %if.end.707

land.lhs.true.654:                                ; preds = %if.then.642
  %343 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %344 = bitcast %struct.rtx_def* %343 to i32*
  %bf.load655 = load i32, i32* %344, align 8
  %bf.lshr656 = lshr i32 %bf.load655, 16
  %bf.clear657 = and i32 %bf.lshr656, 255
  %345 = load i32, i32* %nominal_mode, align 4
  %cmp658 = icmp eq i32 %bf.clear657, %345
  br i1 %cmp658, label %land.lhs.true.660, label %if.end.707

land.lhs.true.660:                                ; preds = %land.lhs.true.654
  %346 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %fld661 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %346, i32 0, i32 1
  %arrayidx662 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld661, i32 0, i64 0
  %rtx663 = bitcast %union.rtunion_def* %arrayidx662 to %struct.rtx_def**
  %347 = load %struct.rtx_def*, %struct.rtx_def** %rtx663, align 8
  %348 = bitcast %struct.rtx_def* %347 to i32*
  %bf.load664 = load i32, i32* %348, align 8
  %bf.clear665 = and i32 %bf.load664, 65535
  %cmp666 = icmp eq i32 %bf.clear665, 61
  br i1 %cmp666, label %land.lhs.true.668, label %if.end.707

land.lhs.true.668:                                ; preds = %land.lhs.true.660
  %349 = load i32, i32* %nominal_mode, align 4
  %350 = load i32, i32* %passed_mode, align 4
  %cmp669 = icmp eq i32 %349, %350
  br i1 %cmp669, label %land.lhs.true.671, label %if.end.707

land.lhs.true.671:                                ; preds = %land.lhs.true.668
  %351 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %fld672 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %351, i32 0, i32 1
  %arrayidx673 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld672, i32 0, i64 0
  %rtx674 = bitcast %union.rtunion_def* %arrayidx673 to %struct.rtx_def**
  %352 = load %struct.rtx_def*, %struct.rtx_def** %rtx674, align 8
  %353 = bitcast %struct.rtx_def* %352 to i32*
  %bf.load675 = load i32, i32* %353, align 8
  %bf.lshr676 = lshr i32 %bf.load675, 16
  %bf.clear677 = and i32 %bf.lshr676, 255
  %354 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %355 = bitcast %struct.rtx_def* %354 to i32*
  %bf.load678 = load i32, i32* %355, align 8
  %bf.lshr679 = lshr i32 %bf.load678, 16
  %bf.clear680 = and i32 %bf.lshr679, 255
  %cmp681 = icmp eq i32 %bf.clear677, %bf.clear680
  br i1 %cmp681, label %land.lhs.true.683, label %if.end.707

land.lhs.true.683:                                ; preds = %land.lhs.true.671
  %356 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %357 = bitcast %struct.rtx_def* %356 to i32*
  %bf.load684 = load i32, i32* %357, align 8
  %bf.lshr685 = lshr i32 %bf.load684, 16
  %bf.clear686 = and i32 %bf.lshr685, 255
  %idxprom687 = sext i32 %bf.clear686 to i64
  %arrayidx688 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom687
  %358 = load i8, i8* %arrayidx688, align 1
  %conv689 = zext i8 %358 to i32
  %359 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %360 = bitcast %struct.rtx_def* %359 to i32*
  %bf.load690 = load i32, i32* %360, align 8
  %bf.lshr691 = lshr i32 %bf.load690, 16
  %bf.clear692 = and i32 %bf.lshr691, 255
  %idxprom693 = sext i32 %bf.clear692 to i64
  %arrayidx694 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom693
  %361 = load i8, i8* %arrayidx694, align 1
  %conv695 = zext i8 %361 to i32
  %cmp696 = icmp slt i32 %conv689, %conv695
  br i1 %cmp696, label %if.then.698, label %if.end.707

if.then.698:                                      ; preds = %land.lhs.true.683
  %362 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %363 = bitcast %struct.rtx_def* %362 to i32*
  %bf.load699 = load i32, i32* %363, align 8
  %bf.clear700 = and i32 %bf.load699, -268435457
  %bf.set701 = or i32 %bf.clear700, 268435456
  store i32 %bf.set701, i32* %363, align 8
  %364 = load i32, i32* %unsignedp, align 4
  %365 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %366 = bitcast %struct.rtx_def* %365 to i32*
  %bf.load702 = load i32, i32* %366, align 8
  %bf.value703 = and i32 %364, 1
  %bf.shl704 = shl i32 %bf.value703, 26
  %bf.clear705 = and i32 %bf.load702, -67108865
  %bf.set706 = or i32 %bf.clear705, %bf.shl704
  store i32 %bf.set706, i32* %366, align 8
  br label %if.end.707

if.end.707:                                       ; preds = %if.then.698, %land.lhs.true.683, %land.lhs.true.671, %land.lhs.true.668, %land.lhs.true.660, %land.lhs.true.654, %if.then.642
  %367 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common708 = bitcast %union.tree_node* %367 to %struct.tree_common*
  %used_flag709 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common708, i32 0, i32 2
  %bf.load710 = load i32, i32* %used_flag709, align 8
  %bf.lshr711 = lshr i32 %bf.load710, 16
  %bf.clear712 = and i32 %bf.lshr711, 1
  store i32 %bf.clear712, i32* %save_tree_used, align 4
  %368 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %369 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8
  %370 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8
  %call713 = call %union.tree_node* @make_tree(%union.tree_node* %369, %struct.rtx_def* %370)
  %call714 = call %struct.rtx_def* @expand_assignment(%union.tree_node* %368, %union.tree_node* %call713, i32 0, i32 0)
  %371 = load i32, i32* %save_tree_used, align 4
  %372 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common715 = bitcast %union.tree_node* %372 to %struct.tree_common*
  %used_flag716 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common715, i32 0, i32 2
  %bf.load717 = load i32, i32* %used_flag716, align 8
  %bf.value718 = and i32 %371, 1
  %bf.shl719 = shl i32 %bf.value718, 16
  %bf.clear720 = and i32 %bf.load717, -65537
  %bf.set721 = or i32 %bf.clear720, %bf.shl719
  store i32 %bf.set721, i32* %used_flag716, align 8
  %call722 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call722, %struct.rtx_def** %conversion_insns, align 8
  store i32 1, i32* %did_conversion, align 4
  call void @end_sequence()
  br label %if.end.726

if.else.723:                                      ; preds = %lor.lhs.false.639
  %373 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %374 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %call724 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %374)
  %call725 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %373, %struct.rtx_def* %call724)
  br label %if.end.726

if.end.726:                                       ; preds = %if.else.723, %if.end.707
  %375 = load i32, i32* %passed_pointer, align 4
  %tobool727 = icmp ne i32 %375, 0
  br i1 %tobool727, label %land.lhs.true.728, label %if.end.889

land.lhs.true.728:                                ; preds = %if.end.726
  %376 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common729 = bitcast %union.tree_node* %376 to %struct.tree_common*
  %type730 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common729, i32 0, i32 1
  %377 = load %union.tree_node*, %union.tree_node** %type730, align 8
  %type731 = bitcast %union.tree_node* %377 to %struct.tree_type*
  %mode732 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type731, i32 0, i32 6
  %bf.load733 = load i32, i32* %mode732, align 4
  %bf.lshr734 = lshr i32 %bf.load733, 9
  %bf.clear735 = and i32 %bf.lshr734, 127
  %cmp736 = icmp ne i32 %bf.clear735, 51
  br i1 %cmp736, label %land.lhs.true.738, label %if.end.889

land.lhs.true.738:                                ; preds = %land.lhs.true.728
  %378 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common739 = bitcast %union.tree_node* %378 to %struct.tree_common*
  %type740 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common739, i32 0, i32 1
  %379 = load %union.tree_node*, %union.tree_node** %type740, align 8
  %type741 = bitcast %union.tree_node* %379 to %struct.tree_type*
  %mode742 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type741, i32 0, i32 6
  %bf.load743 = load i32, i32* %mode742, align 4
  %bf.lshr744 = lshr i32 %bf.load743, 9
  %bf.clear745 = and i32 %bf.lshr744, 127
  %380 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl746 = bitcast %union.tree_node* %380 to %struct.tree_decl*
  %rtl747 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl746, i32 0, i32 17
  %381 = load %struct.rtx_def*, %struct.rtx_def** %rtl747, align 8
  %tobool748 = icmp ne %struct.rtx_def* %381, null
  br i1 %tobool748, label %cond.true.749, label %cond.false.752

cond.true.749:                                    ; preds = %land.lhs.true.738
  %382 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl750 = bitcast %union.tree_node* %382 to %struct.tree_decl*
  %rtl751 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl750, i32 0, i32 17
  %383 = load %struct.rtx_def*, %struct.rtx_def** %rtl751, align 8
  br label %cond.end.755

cond.false.752:                                   ; preds = %land.lhs.true.738
  %384 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %384, i8* null)
  %385 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl753 = bitcast %union.tree_node* %385 to %struct.tree_decl*
  %rtl754 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl753, i32 0, i32 17
  %386 = load %struct.rtx_def*, %struct.rtx_def** %rtl754, align 8
  br label %cond.end.755

cond.end.755:                                     ; preds = %cond.false.752, %cond.true.749
  %cond756 = phi %struct.rtx_def* [ %383, %cond.true.749 ], [ %386, %cond.false.752 ]
  %387 = bitcast %struct.rtx_def* %cond756 to i32*
  %bf.load757 = load i32, i32* %387, align 8
  %bf.lshr758 = lshr i32 %bf.load757, 16
  %bf.clear759 = and i32 %bf.lshr758, 255
  %cmp760 = icmp ne i32 %bf.clear745, %bf.clear759
  br i1 %cmp760, label %if.then.790, label %lor.lhs.false.762

lor.lhs.false.762:                                ; preds = %cond.end.755
  %388 = load i32, i32* @optimize, align 4
  %tobool763 = icmp ne i32 %388, 0
  br i1 %tobool763, label %lor.lhs.false.772, label %land.lhs.true.764

land.lhs.true.764:                                ; preds = %lor.lhs.false.762
  %389 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl765 = bitcast %union.tree_node* %389 to %struct.tree_decl*
  %regdecl_flag766 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl765, i32 0, i32 5
  %390 = bitcast i48* %regdecl_flag766 to i64*
  %bf.load767 = load i64, i64* %390, align 8
  %bf.lshr768 = lshr i64 %bf.load767, 10
  %bf.clear769 = and i64 %bf.lshr768, 1
  %bf.cast770 = trunc i64 %bf.clear769 to i32
  %tobool771 = icmp ne i32 %bf.cast770, 0
  br i1 %tobool771, label %lor.lhs.false.772, label %if.end.889

lor.lhs.false.772:                                ; preds = %land.lhs.true.764, %lor.lhs.false.762
  %391 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common773 = bitcast %union.tree_node* %391 to %struct.tree_common*
  %side_effects_flag774 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common773, i32 0, i32 2
  %bf.load775 = load i32, i32* %side_effects_flag774, align 8
  %bf.lshr776 = lshr i32 %bf.load775, 8
  %bf.clear777 = and i32 %bf.lshr776, 1
  %tobool778 = icmp ne i32 %bf.clear777, 0
  br i1 %tobool778, label %if.end.889, label %lor.lhs.false.779

lor.lhs.false.779:                                ; preds = %lor.lhs.false.772
  %392 = load i32, i32* @flag_float_store, align 4
  %tobool780 = icmp ne i32 %392, 0
  br i1 %tobool780, label %land.lhs.true.781, label %if.then.790

land.lhs.true.781:                                ; preds = %lor.lhs.false.779
  %393 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common782 = bitcast %union.tree_node* %393 to %struct.tree_common*
  %type783 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common782, i32 0, i32 1
  %394 = load %union.tree_node*, %union.tree_node** %type783, align 8
  %common784 = bitcast %union.tree_node* %394 to %struct.tree_common*
  %code785 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common784, i32 0, i32 2
  %bf.load786 = load i32, i32* %code785, align 8
  %bf.clear787 = and i32 %bf.load786, 255
  %cmp788 = icmp eq i32 %bf.clear787, 7
  br i1 %cmp788, label %if.end.889, label %if.then.790

if.then.790:                                      ; preds = %land.lhs.true.781, %lor.lhs.false.779, %cond.end.755
  %395 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common791 = bitcast %union.tree_node* %395 to %struct.tree_common*
  %type792 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common791, i32 0, i32 1
  %396 = load %union.tree_node*, %union.tree_node** %type792, align 8
  %type793 = bitcast %union.tree_node* %396 to %struct.tree_type*
  %mode794 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type793, i32 0, i32 6
  %bf.load795 = load i32, i32* %mode794, align 4
  %bf.lshr796 = lshr i32 %bf.load795, 9
  %bf.clear797 = and i32 %bf.lshr796, 127
  %call798 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear797)
  store %struct.rtx_def* %call798, %struct.rtx_def** %parmreg, align 8
  %397 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  call void @mark_user_reg(%struct.rtx_def* %397)
  %398 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %399 = bitcast %struct.rtx_def* %398 to i32*
  %bf.load799 = load i32, i32* %399, align 8
  %bf.lshr800 = lshr i32 %bf.load799, 16
  %bf.clear801 = and i32 %bf.lshr800, 255
  %400 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl802 = bitcast %union.tree_node* %400 to %struct.tree_decl*
  %rtl803 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl802, i32 0, i32 17
  %401 = load %struct.rtx_def*, %struct.rtx_def** %rtl803, align 8
  %tobool804 = icmp ne %struct.rtx_def* %401, null
  br i1 %tobool804, label %cond.true.805, label %cond.false.808

cond.true.805:                                    ; preds = %if.then.790
  %402 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl806 = bitcast %union.tree_node* %402 to %struct.tree_decl*
  %rtl807 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl806, i32 0, i32 17
  %403 = load %struct.rtx_def*, %struct.rtx_def** %rtl807, align 8
  br label %cond.end.811

cond.false.808:                                   ; preds = %if.then.790
  %404 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %404, i8* null)
  %405 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl809 = bitcast %union.tree_node* %405 to %struct.tree_decl*
  %rtl810 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl809, i32 0, i32 17
  %406 = load %struct.rtx_def*, %struct.rtx_def** %rtl810, align 8
  br label %cond.end.811

cond.end.811:                                     ; preds = %cond.false.808, %cond.true.805
  %cond812 = phi %struct.rtx_def* [ %403, %cond.true.805 ], [ %406, %cond.false.808 ]
  %407 = bitcast %struct.rtx_def* %cond812 to i32*
  %bf.load813 = load i32, i32* %407, align 8
  %bf.lshr814 = lshr i32 %bf.load813, 16
  %bf.clear815 = and i32 %bf.lshr814, 255
  %cmp816 = icmp ne i32 %bf.clear801, %bf.clear815
  br i1 %cmp816, label %if.then.818, label %if.else.873

if.then.818:                                      ; preds = %cond.end.811
  %408 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl820 = bitcast %union.tree_node* %408 to %struct.tree_decl*
  %rtl821 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl820, i32 0, i32 17
  %409 = load %struct.rtx_def*, %struct.rtx_def** %rtl821, align 8
  %tobool822 = icmp ne %struct.rtx_def* %409, null
  br i1 %tobool822, label %cond.true.823, label %cond.false.826

cond.true.823:                                    ; preds = %if.then.818
  %410 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl824 = bitcast %union.tree_node* %410 to %struct.tree_decl*
  %rtl825 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl824, i32 0, i32 17
  %411 = load %struct.rtx_def*, %struct.rtx_def** %rtl825, align 8
  br label %cond.end.829

cond.false.826:                                   ; preds = %if.then.818
  %412 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %412, i8* null)
  %413 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl827 = bitcast %union.tree_node* %413 to %struct.tree_decl*
  %rtl828 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl827, i32 0, i32 17
  %414 = load %struct.rtx_def*, %struct.rtx_def** %rtl828, align 8
  br label %cond.end.829

cond.end.829:                                     ; preds = %cond.false.826, %cond.true.823
  %cond830 = phi %struct.rtx_def* [ %411, %cond.true.823 ], [ %414, %cond.false.826 ]
  %415 = bitcast %struct.rtx_def* %cond830 to i32*
  %bf.load831 = load i32, i32* %415, align 8
  %bf.lshr832 = lshr i32 %bf.load831, 16
  %bf.clear833 = and i32 %bf.lshr832, 255
  %call834 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear833)
  store %struct.rtx_def* %call834, %struct.rtx_def** %tempreg819, align 8
  %416 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common835 = bitcast %union.tree_node* %416 to %struct.tree_common*
  %type836 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common835, i32 0, i32 1
  %417 = load %union.tree_node*, %union.tree_node** %type836, align 8
  %common837 = bitcast %union.tree_node* %417 to %struct.tree_common*
  %unsigned_flag838 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common837, i32 0, i32 2
  %bf.load839 = load i32, i32* %unsigned_flag838, align 8
  %bf.lshr840 = lshr i32 %bf.load839, 13
  %bf.clear841 = and i32 %bf.lshr840, 1
  store i32 %bf.clear841, i32* %unsigned_p, align 4
  %418 = load %struct.rtx_def*, %struct.rtx_def** %conversion_insns, align 8
  call void @push_to_sequence(%struct.rtx_def* %418)
  %419 = load %struct.rtx_def*, %struct.rtx_def** %tempreg819, align 8
  %420 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl842 = bitcast %union.tree_node* %420 to %struct.tree_decl*
  %rtl843 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl842, i32 0, i32 17
  %421 = load %struct.rtx_def*, %struct.rtx_def** %rtl843, align 8
  %tobool844 = icmp ne %struct.rtx_def* %421, null
  br i1 %tobool844, label %cond.true.845, label %cond.false.848

cond.true.845:                                    ; preds = %cond.end.829
  %422 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl846 = bitcast %union.tree_node* %422 to %struct.tree_decl*
  %rtl847 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl846, i32 0, i32 17
  %423 = load %struct.rtx_def*, %struct.rtx_def** %rtl847, align 8
  br label %cond.end.851

cond.false.848:                                   ; preds = %cond.end.829
  %424 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %424, i8* null)
  %425 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl849 = bitcast %union.tree_node* %425 to %struct.tree_decl*
  %rtl850 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl849, i32 0, i32 17
  %426 = load %struct.rtx_def*, %struct.rtx_def** %rtl850, align 8
  br label %cond.end.851

cond.end.851:                                     ; preds = %cond.false.848, %cond.true.845
  %cond852 = phi %struct.rtx_def* [ %423, %cond.true.845 ], [ %426, %cond.false.848 ]
  %call853 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %419, %struct.rtx_def* %cond852)
  %427 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %428 = bitcast %struct.rtx_def* %427 to i32*
  %bf.load854 = load i32, i32* %428, align 8
  %bf.lshr855 = lshr i32 %bf.load854, 16
  %bf.clear856 = and i32 %bf.lshr855, 255
  %429 = load %struct.rtx_def*, %struct.rtx_def** %tempreg819, align 8
  %430 = load i32, i32* %unsigned_p, align 4
  %call857 = call %struct.rtx_def* @convert_to_mode(i32 %bf.clear856, %struct.rtx_def* %429, i32 %430)
  %431 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl858 = bitcast %union.tree_node* %431 to %struct.tree_decl*
  %rtl859 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl858, i32 0, i32 17
  store %struct.rtx_def* %call857, %struct.rtx_def** %rtl859, align 8
  %432 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %433 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl860 = bitcast %union.tree_node* %433 to %struct.tree_decl*
  %rtl861 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl860, i32 0, i32 17
  %434 = load %struct.rtx_def*, %struct.rtx_def** %rtl861, align 8
  %tobool862 = icmp ne %struct.rtx_def* %434, null
  br i1 %tobool862, label %cond.true.863, label %cond.false.866

cond.true.863:                                    ; preds = %cond.end.851
  %435 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl864 = bitcast %union.tree_node* %435 to %struct.tree_decl*
  %rtl865 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl864, i32 0, i32 17
  %436 = load %struct.rtx_def*, %struct.rtx_def** %rtl865, align 8
  br label %cond.end.869

cond.false.866:                                   ; preds = %cond.end.851
  %437 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %437, i8* null)
  %438 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl867 = bitcast %union.tree_node* %438 to %struct.tree_decl*
  %rtl868 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl867, i32 0, i32 17
  %439 = load %struct.rtx_def*, %struct.rtx_def** %rtl868, align 8
  br label %cond.end.869

cond.end.869:                                     ; preds = %cond.false.866, %cond.true.863
  %cond870 = phi %struct.rtx_def* [ %436, %cond.true.863 ], [ %439, %cond.false.866 ]
  %call871 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %432, %struct.rtx_def* %cond870)
  %call872 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call872, %struct.rtx_def** %conversion_insns, align 8
  store i32 1, i32* %did_conversion, align 4
  call void @end_sequence()
  br label %if.end.886

if.else.873:                                      ; preds = %cond.end.811
  %440 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %441 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl874 = bitcast %union.tree_node* %441 to %struct.tree_decl*
  %rtl875 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl874, i32 0, i32 17
  %442 = load %struct.rtx_def*, %struct.rtx_def** %rtl875, align 8
  %tobool876 = icmp ne %struct.rtx_def* %442, null
  br i1 %tobool876, label %cond.true.877, label %cond.false.880

cond.true.877:                                    ; preds = %if.else.873
  %443 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl878 = bitcast %union.tree_node* %443 to %struct.tree_decl*
  %rtl879 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl878, i32 0, i32 17
  %444 = load %struct.rtx_def*, %struct.rtx_def** %rtl879, align 8
  br label %cond.end.883

cond.false.880:                                   ; preds = %if.else.873
  %445 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %445, i8* null)
  %446 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl881 = bitcast %union.tree_node* %446 to %struct.tree_decl*
  %rtl882 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl881, i32 0, i32 17
  %447 = load %struct.rtx_def*, %struct.rtx_def** %rtl882, align 8
  br label %cond.end.883

cond.end.883:                                     ; preds = %cond.false.880, %cond.true.877
  %cond884 = phi %struct.rtx_def* [ %444, %cond.true.877 ], [ %447, %cond.false.880 ]
  %call885 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %440, %struct.rtx_def* %cond884)
  br label %if.end.886

if.end.886:                                       ; preds = %cond.end.883, %cond.end.869
  %448 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %449 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl887 = bitcast %union.tree_node* %449 to %struct.tree_decl*
  %rtl888 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl887, i32 0, i32 17
  store %struct.rtx_def* %448, %struct.rtx_def** %rtl888, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8
  br label %if.end.889

if.end.889:                                       ; preds = %if.end.886, %land.lhs.true.781, %lor.lhs.false.772, %land.lhs.true.764, %land.lhs.true.728, %if.end.726
  %450 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %451 = bitcast %struct.rtx_def* %450 to i32*
  %bf.load890 = load i32, i32* %451, align 8
  %bf.clear891 = and i32 %bf.load890, 65535
  %cmp892 = icmp eq i32 %bf.clear891, 65
  br i1 %cmp892, label %if.then.894, label %if.else.925

if.then.894:                                      ; preds = %if.end.889
  %452 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %fld895 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %452, i32 0, i32 1
  %arrayidx896 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld895, i32 0, i64 0
  %rtx897 = bitcast %union.rtunion_def* %arrayidx896 to %struct.rtx_def**
  %453 = load %struct.rtx_def*, %struct.rtx_def** %rtx897, align 8
  %fld898 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %453, i32 0, i32 1
  %arrayidx899 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld898, i32 0, i64 0
  %rtuint900 = bitcast %union.rtunion_def* %arrayidx899 to i32*
  %454 = load i32, i32* %rtuint900, align 4
  %455 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %fld901 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %455, i32 0, i32 1
  %arrayidx902 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld901, i32 0, i64 1
  %rtx903 = bitcast %union.rtunion_def* %arrayidx902 to %struct.rtx_def**
  %456 = load %struct.rtx_def*, %struct.rtx_def** %rtx903, align 8
  %fld904 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %456, i32 0, i32 1
  %arrayidx905 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld904, i32 0, i64 0
  %rtuint906 = bitcast %union.rtunion_def* %arrayidx905 to i32*
  %457 = load i32, i32* %rtuint906, align 4
  %cmp907 = icmp ugt i32 %454, %457
  br i1 %cmp907, label %cond.true.909, label %cond.false.916

cond.true.909:                                    ; preds = %if.then.894
  %458 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %fld910 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %458, i32 0, i32 1
  %arrayidx911 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld910, i32 0, i64 0
  %rtx912 = bitcast %union.rtunion_def* %arrayidx911 to %struct.rtx_def**
  %459 = load %struct.rtx_def*, %struct.rtx_def** %rtx912, align 8
  %fld913 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %459, i32 0, i32 1
  %arrayidx914 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld913, i32 0, i64 0
  %rtuint915 = bitcast %union.rtunion_def* %arrayidx914 to i32*
  %460 = load i32, i32* %rtuint915, align 4
  br label %cond.end.923

cond.false.916:                                   ; preds = %if.then.894
  %461 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %fld917 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %461, i32 0, i32 1
  %arrayidx918 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld917, i32 0, i64 1
  %rtx919 = bitcast %union.rtunion_def* %arrayidx918 to %struct.rtx_def**
  %462 = load %struct.rtx_def*, %struct.rtx_def** %rtx919, align 8
  %fld920 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %462, i32 0, i32 1
  %arrayidx921 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld920, i32 0, i64 0
  %rtuint922 = bitcast %union.rtunion_def* %arrayidx921 to i32*
  %463 = load i32, i32* %rtuint922, align 4
  br label %cond.end.923

cond.end.923:                                     ; preds = %cond.false.916, %cond.true.909
  %cond924 = phi i32 [ %460, %cond.true.909 ], [ %463, %cond.false.916 ]
  store i32 %cond924, i32* %regno, align 4
  br label %if.end.929

if.else.925:                                      ; preds = %if.end.889
  %464 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %fld926 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %464, i32 0, i32 1
  %arrayidx927 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld926, i32 0, i64 0
  %rtuint928 = bitcast %union.rtunion_def* %arrayidx927 to i32*
  %465 = load i32, i32* %rtuint928, align 4
  store i32 %465, i32* %regno, align 4
  br label %if.end.929

if.end.929:                                       ; preds = %if.else.925, %cond.end.923
  %466 = load i32, i32* %regno, align 4
  %467 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg930 = getelementptr inbounds %struct.function, %struct.function* %467, i32 0, i32 37
  %468 = load i32, i32* %x_max_parm_reg930, align 4
  %cmp931 = icmp uge i32 %466, %468
  br i1 %cmp931, label %if.then.933, label %if.end.947

if.then.933:                                      ; preds = %if.end.929
  %469 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg934 = getelementptr inbounds %struct.function, %struct.function* %469, i32 0, i32 37
  %470 = load i32, i32* %x_max_parm_reg934, align 4
  store i32 %470, i32* %old_max_parm_reg, align 4
  %471 = load i32, i32* %regno, align 4
  %add935 = add i32 %471, 1
  %472 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg936 = getelementptr inbounds %struct.function, %struct.function* %472, i32 0, i32 37
  store i32 %add935, i32* %x_max_parm_reg936, align 4
  %473 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc937 = getelementptr inbounds %struct.function, %struct.function* %473, i32 0, i32 38
  %474 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc937, align 8
  %475 = bitcast %struct.rtx_def** %474 to i8*
  %476 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg938 = getelementptr inbounds %struct.function, %struct.function* %476, i32 0, i32 37
  %477 = load i32, i32* %x_max_parm_reg938, align 4
  %conv939 = zext i32 %477 to i64
  %mul940 = mul i64 %conv939, 8
  %call941 = call i8* @xrealloc(i8* %475, i64 %mul940)
  %478 = bitcast i8* %call941 to %struct.rtx_def**
  store %struct.rtx_def** %478, %struct.rtx_def*** %new, align 8
  %479 = load %struct.rtx_def**, %struct.rtx_def*** %new, align 8
  %480 = load i32, i32* %old_max_parm_reg, align 4
  %idx.ext = sext i32 %480 to i64
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %479, i64 %idx.ext
  %481 = bitcast %struct.rtx_def** %add.ptr to i8*
  %482 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg942 = getelementptr inbounds %struct.function, %struct.function* %482, i32 0, i32 37
  %483 = load i32, i32* %x_max_parm_reg942, align 4
  %484 = load i32, i32* %old_max_parm_reg, align 4
  %sub943 = sub i32 %483, %484
  %conv944 = zext i32 %sub943 to i64
  %mul945 = mul i64 %conv944, 8
  call void @llvm.memset.p0i8.i64(i8* %481, i8 0, i64 %mul945, i32 1, i1 false)
  %485 = load %struct.rtx_def**, %struct.rtx_def*** %new, align 8
  %486 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc946 = getelementptr inbounds %struct.function, %struct.function* %486, i32 0, i32 38
  store %struct.rtx_def** %485, %struct.rtx_def*** %x_parm_reg_stack_loc946, align 8
  br label %if.end.947

if.end.947:                                       ; preds = %if.then.933, %if.end.929
  %487 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %488 = bitcast %struct.rtx_def* %487 to i32*
  %bf.load948 = load i32, i32* %488, align 8
  %bf.clear949 = and i32 %bf.load948, 65535
  %cmp950 = icmp eq i32 %bf.clear949, 65
  br i1 %cmp950, label %if.then.952, label %if.else.986

if.then.952:                                      ; preds = %if.end.947
  %489 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %fld953 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %489, i32 0, i32 1
  %arrayidx954 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld953, i32 0, i64 0
  %rtx955 = bitcast %union.rtunion_def* %arrayidx954 to %struct.rtx_def**
  %490 = load %struct.rtx_def*, %struct.rtx_def** %rtx955, align 8
  %491 = bitcast %struct.rtx_def* %490 to i32*
  %bf.load956 = load i32, i32* %491, align 8
  %bf.lshr957 = lshr i32 %bf.load956, 16
  %bf.clear958 = and i32 %bf.lshr957, 255
  store i32 %bf.clear958, i32* %submode, align 4
  %492 = load i32, i32* %submode, align 4
  %493 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %call959 = call %struct.rtx_def* @gen_realpart(i32 %492, %struct.rtx_def* %493)
  %fld960 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call959, i32 0, i32 1
  %arrayidx961 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld960, i32 0, i64 0
  %rtuint962 = bitcast %union.rtunion_def* %arrayidx961 to i32*
  %494 = load i32, i32* %rtuint962, align 4
  store i32 %494, i32* %regnor, align 4
  %495 = load i32, i32* %submode, align 4
  %496 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %call963 = call %struct.rtx_def* @gen_imagpart(i32 %495, %struct.rtx_def* %496)
  %fld964 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call963, i32 0, i32 1
  %arrayidx965 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld964, i32 0, i64 0
  %rtuint966 = bitcast %union.rtunion_def* %arrayidx965 to i32*
  %497 = load i32, i32* %rtuint966, align 4
  store i32 %497, i32* %regnoi, align 4
  %498 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %cmp967 = icmp ne %struct.rtx_def* %498, null
  br i1 %cmp967, label %if.then.969, label %if.else.978

if.then.969:                                      ; preds = %if.then.952
  %499 = load i32, i32* %submode, align 4
  %500 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %call970 = call %struct.rtx_def* @gen_realpart(i32 %499, %struct.rtx_def* %500)
  %501 = load i32, i32* %regnor, align 4
  %idxprom971 = zext i32 %501 to i64
  %502 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc972 = getelementptr inbounds %struct.function, %struct.function* %502, i32 0, i32 38
  %503 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc972, align 8
  %arrayidx973 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %503, i64 %idxprom971
  store %struct.rtx_def* %call970, %struct.rtx_def** %arrayidx973, align 8
  %504 = load i32, i32* %submode, align 4
  %505 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %call974 = call %struct.rtx_def* @gen_imagpart(i32 %504, %struct.rtx_def* %505)
  %506 = load i32, i32* %regnoi, align 4
  %idxprom975 = zext i32 %506 to i64
  %507 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc976 = getelementptr inbounds %struct.function, %struct.function* %507, i32 0, i32 38
  %508 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc976, align 8
  %arrayidx977 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %508, i64 %idxprom975
  store %struct.rtx_def* %call974, %struct.rtx_def** %arrayidx977, align 8
  br label %if.end.985

if.else.978:                                      ; preds = %if.then.952
  %509 = load i32, i32* %regnor, align 4
  %idxprom979 = zext i32 %509 to i64
  %510 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc980 = getelementptr inbounds %struct.function, %struct.function* %510, i32 0, i32 38
  %511 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc980, align 8
  %arrayidx981 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %511, i64 %idxprom979
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx981, align 8
  %512 = load i32, i32* %regnoi, align 4
  %idxprom982 = zext i32 %512 to i64
  %513 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc983 = getelementptr inbounds %struct.function, %struct.function* %513, i32 0, i32 38
  %514 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc983, align 8
  %arrayidx984 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %514, i64 %idxprom982
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx984, align 8
  br label %if.end.985

if.end.985:                                       ; preds = %if.else.978, %if.then.969
  br label %if.end.993

if.else.986:                                      ; preds = %if.end.947
  %515 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %516 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %fld987 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %516, i32 0, i32 1
  %arrayidx988 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld987, i32 0, i64 0
  %rtuint989 = bitcast %union.rtunion_def* %arrayidx988 to i32*
  %517 = load i32, i32* %rtuint989, align 4
  %idxprom990 = zext i32 %517 to i64
  %518 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc991 = getelementptr inbounds %struct.function, %struct.function* %518, i32 0, i32 38
  %519 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc991, align 8
  %arrayidx992 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %519, i64 %idxprom990
  store %struct.rtx_def* %515, %struct.rtx_def** %arrayidx992, align 8
  br label %if.end.993

if.end.993:                                       ; preds = %if.else.986, %if.end.985
  %520 = load i32, i32* %nominal_mode, align 4
  %521 = load i32, i32* %passed_mode, align 4
  %cmp994 = icmp eq i32 %520, %521
  br i1 %cmp994, label %land.lhs.true.996, label %if.end.1154

land.lhs.true.996:                                ; preds = %if.end.993
  %522 = load i32, i32* %did_conversion, align 4
  %tobool997 = icmp ne i32 %522, 0
  br i1 %tobool997, label %if.end.1154, label %land.lhs.true.998

land.lhs.true.998:                                ; preds = %land.lhs.true.996
  %523 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %cmp999 = icmp ne %struct.rtx_def* %523, null
  br i1 %cmp999, label %land.lhs.true.1001, label %if.end.1154

land.lhs.true.1001:                               ; preds = %land.lhs.true.998
  %524 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %525 = bitcast %struct.rtx_def* %524 to i32*
  %bf.load1002 = load i32, i32* %525, align 8
  %bf.clear1003 = and i32 %bf.load1002, 65535
  %cmp1004 = icmp eq i32 %bf.clear1003, 66
  br i1 %cmp1004, label %land.lhs.true.1006, label %if.end.1154

land.lhs.true.1006:                               ; preds = %land.lhs.true.1001
  %var1007 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_offset, i32 0, i32 1
  %526 = load %union.tree_node*, %union.tree_node** %var1007, align 8
  %cmp1008 = icmp eq %union.tree_node* %526, null
  br i1 %cmp1008, label %land.lhs.true.1010, label %if.end.1154

land.lhs.true.1010:                               ; preds = %land.lhs.true.1006
  %527 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %528 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %fld1011 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %528, i32 0, i32 1
  %arrayidx1012 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1011, i32 0, i64 0
  %rtx1013 = bitcast %union.rtunion_def* %arrayidx1012 to %struct.rtx_def**
  %529 = load %struct.rtx_def*, %struct.rtx_def** %rtx1013, align 8
  %call1014 = call i32 @reg_mentioned_p(%struct.rtx_def* %527, %struct.rtx_def* %529)
  %tobool1015 = icmp ne i32 %call1014, 0
  br i1 %tobool1015, label %if.then.1016, label %if.end.1154

if.then.1016:                                     ; preds = %land.lhs.true.1010
  %call1017 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call1017, %struct.rtx_def** %linsn, align 8
  %530 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %531 = bitcast %struct.rtx_def* %530 to i32*
  %bf.load1018 = load i32, i32* %531, align 8
  %bf.clear1019 = and i32 %bf.load1018, 65535
  %cmp1020 = icmp eq i32 %bf.clear1019, 65
  br i1 %cmp1020, label %if.then.1022, label %if.else.1106

if.then.1022:                                     ; preds = %if.then.1016
  %532 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8
  store %struct.rtx_def* %532, %struct.rtx_def** %sinsn, align 8
  br label %for.cond.1023

for.cond.1023:                                    ; preds = %for.inc.1103, %if.then.1022
  %533 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %cmp1024 = icmp ne %struct.rtx_def* %533, null
  br i1 %cmp1024, label %for.body.1026, label %for.end.1105

for.body.1026:                                    ; preds = %for.cond.1023
  %534 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %535 = bitcast %struct.rtx_def* %534 to i32*
  %bf.load1027 = load i32, i32* %535, align 8
  %bf.clear1028 = and i32 %bf.load1027, 65535
  %idxprom1029 = sext i32 %bf.clear1028 to i64
  %arrayidx1030 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom1029
  %536 = load i8, i8* %arrayidx1030, align 1
  %conv1031 = sext i8 %536 to i32
  %cmp1032 = icmp eq i32 %conv1031, 105
  br i1 %cmp1032, label %cond.true.1034, label %cond.false.1053

cond.true.1034:                                   ; preds = %for.body.1026
  %537 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %fld1035 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %537, i32 0, i32 1
  %arrayidx1036 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1035, i32 0, i64 3
  %rtx1037 = bitcast %union.rtunion_def* %arrayidx1036 to %struct.rtx_def**
  %538 = load %struct.rtx_def*, %struct.rtx_def** %rtx1037, align 8
  %539 = bitcast %struct.rtx_def* %538 to i32*
  %bf.load1038 = load i32, i32* %539, align 8
  %bf.clear1039 = and i32 %bf.load1038, 65535
  %cmp1040 = icmp eq i32 %bf.clear1039, 47
  br i1 %cmp1040, label %cond.true.1042, label %cond.false.1046

cond.true.1042:                                   ; preds = %cond.true.1034
  %540 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %fld1043 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %540, i32 0, i32 1
  %arrayidx1044 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1043, i32 0, i64 3
  %rtx1045 = bitcast %union.rtunion_def* %arrayidx1044 to %struct.rtx_def**
  %541 = load %struct.rtx_def*, %struct.rtx_def** %rtx1045, align 8
  br label %cond.end.1051

cond.false.1046:                                  ; preds = %cond.true.1034
  %542 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %543 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %fld1047 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %543, i32 0, i32 1
  %arrayidx1048 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1047, i32 0, i64 3
  %rtx1049 = bitcast %union.rtunion_def* %arrayidx1048 to %struct.rtx_def**
  %544 = load %struct.rtx_def*, %struct.rtx_def** %rtx1049, align 8
  %call1050 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %542, %struct.rtx_def* %544)
  br label %cond.end.1051

cond.end.1051:                                    ; preds = %cond.false.1046, %cond.true.1042
  %cond1052 = phi %struct.rtx_def* [ %541, %cond.true.1042 ], [ %call1050, %cond.false.1046 ]
  br label %cond.end.1054

cond.false.1053:                                  ; preds = %for.body.1026
  br label %cond.end.1054

cond.end.1054:                                    ; preds = %cond.false.1053, %cond.end.1051
  %cond1055 = phi %struct.rtx_def* [ %cond1052, %cond.end.1051 ], [ null, %cond.false.1053 ]
  store %struct.rtx_def* %cond1055, %struct.rtx_def** %set, align 8
  %545 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %cmp1056 = icmp ne %struct.rtx_def* %545, null
  br i1 %cmp1056, label %land.lhs.true.1058, label %if.else.1077

land.lhs.true.1058:                               ; preds = %cond.end.1054
  %546 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1059 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %546, i32 0, i32 1
  %arrayidx1060 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1059, i32 0, i64 0
  %rtx1061 = bitcast %union.rtunion_def* %arrayidx1060 to %struct.rtx_def**
  %547 = load %struct.rtx_def*, %struct.rtx_def** %rtx1061, align 8
  %548 = load i32, i32* %regnoi, align 4
  %idxprom1062 = zext i32 %548 to i64
  %549 = load %struct.function*, %struct.function** @cfun, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %549, i32 0, i32 3
  %550 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status, %struct.emit_status* %550, i32 0, i32 12
  %551 = load %struct.rtx_def**, %struct.rtx_def*** %x_regno_reg_rtx, align 8
  %arrayidx1063 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %551, i64 %idxprom1062
  %552 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1063, align 8
  %cmp1064 = icmp eq %struct.rtx_def* %547, %552
  br i1 %cmp1064, label %if.then.1066, label %if.else.1077

if.then.1066:                                     ; preds = %land.lhs.true.1058
  %553 = load i32, i32* %regnoi, align 4
  %idxprom1067 = zext i32 %553 to i64
  %554 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc1068 = getelementptr inbounds %struct.function, %struct.function* %554, i32 0, i32 38
  %555 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc1068, align 8
  %arrayidx1069 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %555, i64 %idxprom1067
  %556 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1069, align 8
  %557 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %fld1070 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %557, i32 0, i32 1
  %arrayidx1071 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1070, i32 0, i64 6
  %rtx1072 = bitcast %union.rtunion_def* %arrayidx1071 to %struct.rtx_def**
  %558 = load %struct.rtx_def*, %struct.rtx_def** %rtx1072, align 8
  %call1073 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 3, %struct.rtx_def* %556, %struct.rtx_def* %558)
  %559 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %fld1074 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %559, i32 0, i32 1
  %arrayidx1075 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1074, i32 0, i64 6
  %rtx1076 = bitcast %union.rtunion_def* %arrayidx1075 to %struct.rtx_def**
  store %struct.rtx_def* %call1073, %struct.rtx_def** %rtx1076, align 8
  br label %if.end.1102

if.else.1077:                                     ; preds = %land.lhs.true.1058, %cond.end.1054
  %560 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %cmp1078 = icmp ne %struct.rtx_def* %560, null
  br i1 %cmp1078, label %land.lhs.true.1080, label %if.end.1101

land.lhs.true.1080:                               ; preds = %if.else.1077
  %561 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1081 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %561, i32 0, i32 1
  %arrayidx1082 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1081, i32 0, i64 0
  %rtx1083 = bitcast %union.rtunion_def* %arrayidx1082 to %struct.rtx_def**
  %562 = load %struct.rtx_def*, %struct.rtx_def** %rtx1083, align 8
  %563 = load i32, i32* %regnor, align 4
  %idxprom1084 = zext i32 %563 to i64
  %564 = load %struct.function*, %struct.function** @cfun, align 8
  %emit1085 = getelementptr inbounds %struct.function, %struct.function* %564, i32 0, i32 3
  %565 = load %struct.emit_status*, %struct.emit_status** %emit1085, align 8
  %x_regno_reg_rtx1086 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %565, i32 0, i32 12
  %566 = load %struct.rtx_def**, %struct.rtx_def*** %x_regno_reg_rtx1086, align 8
  %arrayidx1087 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %566, i64 %idxprom1084
  %567 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1087, align 8
  %cmp1088 = icmp eq %struct.rtx_def* %562, %567
  br i1 %cmp1088, label %if.then.1090, label %if.end.1101

if.then.1090:                                     ; preds = %land.lhs.true.1080
  %568 = load i32, i32* %regnor, align 4
  %idxprom1091 = zext i32 %568 to i64
  %569 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_reg_stack_loc1092 = getelementptr inbounds %struct.function, %struct.function* %569, i32 0, i32 38
  %570 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc1092, align 8
  %arrayidx1093 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %570, i64 %idxprom1091
  %571 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1093, align 8
  %572 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %fld1094 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %572, i32 0, i32 1
  %arrayidx1095 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1094, i32 0, i64 6
  %rtx1096 = bitcast %union.rtunion_def* %arrayidx1095 to %struct.rtx_def**
  %573 = load %struct.rtx_def*, %struct.rtx_def** %rtx1096, align 8
  %call1097 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 3, %struct.rtx_def* %571, %struct.rtx_def* %573)
  %574 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %fld1098 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %574, i32 0, i32 1
  %arrayidx1099 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1098, i32 0, i64 6
  %rtx1100 = bitcast %union.rtunion_def* %arrayidx1099 to %struct.rtx_def**
  store %struct.rtx_def* %call1097, %struct.rtx_def** %rtx1100, align 8
  br label %if.end.1101

if.end.1101:                                      ; preds = %if.then.1090, %land.lhs.true.1080, %if.else.1077
  br label %if.end.1102

if.end.1102:                                      ; preds = %if.end.1101, %if.then.1066
  br label %for.inc.1103

for.inc.1103:                                     ; preds = %if.end.1102
  %575 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8
  %call1104 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %575)
  store %struct.rtx_def* %call1104, %struct.rtx_def** %sinsn, align 8
  br label %for.cond.1023

for.end.1105:                                     ; preds = %for.cond.1023
  br label %if.end.1153

if.else.1106:                                     ; preds = %if.then.1016
  %576 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8
  %577 = bitcast %struct.rtx_def* %576 to i32*
  %bf.load1107 = load i32, i32* %577, align 8
  %bf.clear1108 = and i32 %bf.load1107, 65535
  %idxprom1109 = sext i32 %bf.clear1108 to i64
  %arrayidx1110 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom1109
  %578 = load i8, i8* %arrayidx1110, align 1
  %conv1111 = sext i8 %578 to i32
  %cmp1112 = icmp eq i32 %conv1111, 105
  br i1 %cmp1112, label %cond.true.1114, label %cond.false.1133

cond.true.1114:                                   ; preds = %if.else.1106
  %579 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8
  %fld1115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %579, i32 0, i32 1
  %arrayidx1116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1115, i32 0, i64 3
  %rtx1117 = bitcast %union.rtunion_def* %arrayidx1116 to %struct.rtx_def**
  %580 = load %struct.rtx_def*, %struct.rtx_def** %rtx1117, align 8
  %581 = bitcast %struct.rtx_def* %580 to i32*
  %bf.load1118 = load i32, i32* %581, align 8
  %bf.clear1119 = and i32 %bf.load1118, 65535
  %cmp1120 = icmp eq i32 %bf.clear1119, 47
  br i1 %cmp1120, label %cond.true.1122, label %cond.false.1126

cond.true.1122:                                   ; preds = %cond.true.1114
  %582 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8
  %fld1123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %582, i32 0, i32 1
  %arrayidx1124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1123, i32 0, i64 3
  %rtx1125 = bitcast %union.rtunion_def* %arrayidx1124 to %struct.rtx_def**
  %583 = load %struct.rtx_def*, %struct.rtx_def** %rtx1125, align 8
  br label %cond.end.1131

cond.false.1126:                                  ; preds = %cond.true.1114
  %584 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8
  %585 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8
  %fld1127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %585, i32 0, i32 1
  %arrayidx1128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1127, i32 0, i64 3
  %rtx1129 = bitcast %union.rtunion_def* %arrayidx1128 to %struct.rtx_def**
  %586 = load %struct.rtx_def*, %struct.rtx_def** %rtx1129, align 8
  %call1130 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %584, %struct.rtx_def* %586)
  br label %cond.end.1131

cond.end.1131:                                    ; preds = %cond.false.1126, %cond.true.1122
  %cond1132 = phi %struct.rtx_def* [ %583, %cond.true.1122 ], [ %call1130, %cond.false.1126 ]
  br label %cond.end.1134

cond.false.1133:                                  ; preds = %if.else.1106
  br label %cond.end.1134

cond.end.1134:                                    ; preds = %cond.false.1133, %cond.end.1131
  %cond1135 = phi %struct.rtx_def* [ %cond1132, %cond.end.1131 ], [ null, %cond.false.1133 ]
  store %struct.rtx_def* %cond1135, %struct.rtx_def** %set, align 8
  %cmp1136 = icmp ne %struct.rtx_def* %cond1135, null
  br i1 %cmp1136, label %land.lhs.true.1138, label %if.end.1152

land.lhs.true.1138:                               ; preds = %cond.end.1134
  %587 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld1139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %587, i32 0, i32 1
  %arrayidx1140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1139, i32 0, i64 0
  %rtx1141 = bitcast %union.rtunion_def* %arrayidx1140 to %struct.rtx_def**
  %588 = load %struct.rtx_def*, %struct.rtx_def** %rtx1141, align 8
  %589 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %cmp1142 = icmp eq %struct.rtx_def* %588, %589
  br i1 %cmp1142, label %if.then.1144, label %if.end.1152

if.then.1144:                                     ; preds = %land.lhs.true.1138
  %590 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %591 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8
  %fld1145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %591, i32 0, i32 1
  %arrayidx1146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1145, i32 0, i64 6
  %rtx1147 = bitcast %union.rtunion_def* %arrayidx1146 to %struct.rtx_def**
  %592 = load %struct.rtx_def*, %struct.rtx_def** %rtx1147, align 8
  %call1148 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 3, %struct.rtx_def* %590, %struct.rtx_def* %592)
  %593 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8
  %fld1149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %593, i32 0, i32 1
  %arrayidx1150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1149, i32 0, i64 6
  %rtx1151 = bitcast %union.rtunion_def* %arrayidx1150 to %struct.rtx_def**
  store %struct.rtx_def* %call1148, %struct.rtx_def** %rtx1151, align 8
  br label %if.end.1152

if.end.1152:                                      ; preds = %if.then.1144, %land.lhs.true.1138, %cond.end.1134
  br label %if.end.1153

if.end.1153:                                      ; preds = %if.end.1152, %for.end.1105
  br label %if.end.1154

if.end.1154:                                      ; preds = %if.end.1153, %land.lhs.true.1010, %land.lhs.true.1006, %land.lhs.true.1001, %land.lhs.true.998, %land.lhs.true.996, %if.end.993
  %594 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common1155 = bitcast %union.tree_node* %594 to %struct.tree_common*
  %type1156 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1155, i32 0, i32 1
  %595 = load %union.tree_node*, %union.tree_node** %type1156, align 8
  %common1157 = bitcast %union.tree_node* %595 to %struct.tree_common*
  %code1158 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1157, i32 0, i32 2
  %bf.load1159 = load i32, i32* %code1158, align 8
  %bf.clear1160 = and i32 %bf.load1159, 255
  %cmp1161 = icmp eq i32 %bf.clear1160, 13
  br i1 %cmp1161, label %if.then.1172, label %lor.lhs.false.1163

lor.lhs.false.1163:                               ; preds = %if.end.1154
  %596 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common1164 = bitcast %union.tree_node* %596 to %struct.tree_common*
  %type1165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1164, i32 0, i32 1
  %597 = load %union.tree_node*, %union.tree_node** %type1165, align 8
  %common1166 = bitcast %union.tree_node* %597 to %struct.tree_common*
  %code1167 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1166, i32 0, i32 2
  %bf.load1168 = load i32, i32* %code1167, align 8
  %bf.clear1169 = and i32 %bf.load1168, 255
  %cmp1170 = icmp eq i32 %bf.clear1169, 15
  br i1 %cmp1170, label %if.then.1172, label %if.end.1178

if.then.1172:                                     ; preds = %lor.lhs.false.1163, %if.end.1154
  %598 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8
  %599 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common1173 = bitcast %union.tree_node* %599 to %struct.tree_common*
  %type1174 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1173, i32 0, i32 1
  %600 = load %union.tree_node*, %union.tree_node** %type1174, align 8
  %common1175 = bitcast %union.tree_node* %600 to %struct.tree_common*
  %type1176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1175, i32 0, i32 1
  %601 = load %union.tree_node*, %union.tree_node** %type1176, align 8
  %type1177 = bitcast %union.tree_node* %601 to %struct.tree_type*
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1177, i32 0, i32 7
  %602 = load i32, i32* %align, align 4
  call void @mark_reg_pointer(%struct.rtx_def* %598, i32 %602)
  br label %if.end.1178

if.end.1178:                                      ; preds = %if.then.1172, %lor.lhs.false.1163
  %603 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common1179 = bitcast %union.tree_node* %603 to %struct.tree_common*
  %addressable_flag1180 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1179, i32 0, i32 2
  %bf.load1181 = load i32, i32* %addressable_flag1180, align 8
  %bf.lshr1182 = lshr i32 %bf.load1181, 10
  %bf.clear1183 = and i32 %bf.lshr1182, 1
  %tobool1184 = icmp ne i32 %bf.clear1183, 0
  br i1 %tobool1184, label %if.then.1185, label %if.end.1187

if.then.1185:                                     ; preds = %if.end.1178
  %604 = load %struct.rtx_def*, %struct.rtx_def** %conversion_insns, align 8
  call void @push_to_sequence(%struct.rtx_def* %604)
  %605 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @put_var_into_stack(%union.tree_node* %605)
  %call1186 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call1186, %struct.rtx_def** %conversion_insns, align 8
  call void @end_sequence()
  br label %if.end.1187

if.end.1187:                                      ; preds = %if.then.1185, %if.end.1178
  br label %if.end.1245

if.else.1188:                                     ; preds = %lor.lhs.false.596
  %606 = load i32, i32* %promoted_mode, align 4
  %607 = load i32, i32* %nominal_mode, align 4
  %cmp1189 = icmp ne i32 %606, %607
  br i1 %cmp1189, label %if.then.1191, label %if.end.1212

if.then.1191:                                     ; preds = %if.else.1188
  %608 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %609 = bitcast %struct.rtx_def* %608 to i32*
  %bf.load1193 = load i32, i32* %609, align 8
  %bf.lshr1194 = lshr i32 %bf.load1193, 16
  %bf.clear1195 = and i32 %bf.lshr1194, 255
  %call1196 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear1195)
  store %struct.rtx_def* %call1196, %struct.rtx_def** %tempreg1192, align 8
  %610 = load %struct.rtx_def*, %struct.rtx_def** %tempreg1192, align 8
  %611 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %call1197 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %611)
  %call1198 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %610, %struct.rtx_def* %call1197)
  %612 = load %struct.rtx_def*, %struct.rtx_def** %conversion_insns, align 8
  call void @push_to_sequence(%struct.rtx_def* %612)
  %613 = load i32, i32* %nominal_mode, align 4
  %614 = load %struct.rtx_def*, %struct.rtx_def** %tempreg1192, align 8
  %615 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common1199 = bitcast %union.tree_node* %615 to %struct.tree_common*
  %type1200 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1199, i32 0, i32 1
  %616 = load %union.tree_node*, %union.tree_node** %type1200, align 8
  %common1201 = bitcast %union.tree_node* %616 to %struct.tree_common*
  %unsigned_flag1202 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1201, i32 0, i32 2
  %bf.load1203 = load i32, i32* %unsigned_flag1202, align 8
  %bf.lshr1204 = lshr i32 %bf.load1203, 13
  %bf.clear1205 = and i32 %bf.lshr1204, 1
  %call1206 = call %struct.rtx_def* @convert_to_mode(i32 %613, %struct.rtx_def* %614, i32 %bf.clear1205)
  store %struct.rtx_def* %call1206, %struct.rtx_def** %entry_parm, align 8
  %617 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %tobool1207 = icmp ne %struct.rtx_def* %617, null
  br i1 %tobool1207, label %if.then.1208, label %if.end.1210

if.then.1208:                                     ; preds = %if.then.1191
  %618 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %619 = load i32, i32* %nominal_mode, align 4
  %call1209 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %618, i32 %619, i64 0, i32 1, i32 1)
  store %struct.rtx_def* %call1209, %struct.rtx_def** %stack_parm, align 8
  br label %if.end.1210

if.end.1210:                                      ; preds = %if.then.1208, %if.then.1191
  %call1211 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call1211, %struct.rtx_def** %conversion_insns, align 8
  store i32 1, i32* %did_conversion, align 4
  call void @end_sequence()
  br label %if.end.1212

if.end.1212:                                      ; preds = %if.end.1210, %if.else.1188
  %620 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %621 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %cmp1213 = icmp ne %struct.rtx_def* %620, %621
  br i1 %cmp1213, label %if.then.1215, label %if.end.1242

if.then.1215:                                     ; preds = %if.end.1212
  %622 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %cmp1216 = icmp eq %struct.rtx_def* %622, null
  br i1 %cmp1216, label %if.then.1218, label %if.end.1229

if.then.1218:                                     ; preds = %if.then.1215
  %623 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %624 = bitcast %struct.rtx_def* %623 to i32*
  %bf.load1219 = load i32, i32* %624, align 8
  %bf.lshr1220 = lshr i32 %bf.load1219, 16
  %bf.clear1221 = and i32 %bf.lshr1220, 255
  %625 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %626 = bitcast %struct.rtx_def* %625 to i32*
  %bf.load1222 = load i32, i32* %626, align 8
  %bf.lshr1223 = lshr i32 %bf.load1222, 16
  %bf.clear1224 = and i32 %bf.lshr1223, 255
  %idxprom1225 = sext i32 %bf.clear1224 to i64
  %arrayidx1226 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom1225
  %627 = load i8, i8* %arrayidx1226, align 1
  %conv1227 = zext i8 %627 to i64
  %call1228 = call %struct.rtx_def* @assign_stack_local(i32 %bf.clear1221, i64 %conv1227, i32 0)
  store %struct.rtx_def* %call1228, %struct.rtx_def** %stack_parm, align 8
  %628 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %629 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @set_mem_attributes(%struct.rtx_def* %628, %union.tree_node* %629, i32 1)
  br label %if.end.1229

if.end.1229:                                      ; preds = %if.then.1218, %if.then.1215
  %630 = load i32, i32* %promoted_mode, align 4
  %631 = load i32, i32* %nominal_mode, align 4
  %cmp1230 = icmp ne i32 %630, %631
  br i1 %cmp1230, label %if.then.1232, label %if.else.1237

if.then.1232:                                     ; preds = %if.end.1229
  %632 = load %struct.rtx_def*, %struct.rtx_def** %conversion_insns, align 8
  call void @push_to_sequence(%struct.rtx_def* %632)
  %633 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %call1233 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %633)
  %634 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %call1234 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %634)
  %call1235 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call1233, %struct.rtx_def* %call1234)
  %call1236 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call1236, %struct.rtx_def** %conversion_insns, align 8
  call void @end_sequence()
  br label %if.end.1241

if.else.1237:                                     ; preds = %if.end.1229
  %635 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %call1238 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %635)
  %636 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8
  %call1239 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %636)
  %call1240 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call1238, %struct.rtx_def* %call1239)
  br label %if.end.1241

if.end.1241:                                      ; preds = %if.else.1237, %if.then.1232
  br label %if.end.1242

if.end.1242:                                      ; preds = %if.end.1241, %if.end.1212
  %637 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8
  %638 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1243 = bitcast %union.tree_node* %638 to %struct.tree_decl*
  %rtl1244 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1243, i32 0, i32 17
  store %struct.rtx_def* %637, %struct.rtx_def** %rtl1244, align 8
  br label %if.end.1245

if.end.1245:                                      ; preds = %if.end.1242, %if.end.1187
  br label %if.end.1246

if.end.1246:                                      ; preds = %if.end.1245, %if.end.565
  %639 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %640 = load %union.tree_node*, %union.tree_node** %function_result_decl, align 8
  %cmp1247 = icmp eq %union.tree_node* %639, %640
  br i1 %cmp1247, label %if.then.1249, label %if.end.1273

if.then.1249:                                     ; preds = %if.end.1246
  %641 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1251 = bitcast %union.tree_node* %641 to %struct.tree_decl*
  %result1252 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1251, i32 0, i32 11
  %642 = load %union.tree_node*, %union.tree_node** %result1252, align 8
  store %union.tree_node* %642, %union.tree_node** %result1250, align 8
  %643 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1253 = bitcast %union.tree_node* %643 to %struct.tree_decl*
  %rtl1254 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1253, i32 0, i32 17
  %644 = load %struct.rtx_def*, %struct.rtx_def** %rtl1254, align 8
  %tobool1255 = icmp ne %struct.rtx_def* %644, null
  br i1 %tobool1255, label %cond.true.1256, label %cond.false.1259

cond.true.1256:                                   ; preds = %if.then.1249
  %645 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1257 = bitcast %union.tree_node* %645 to %struct.tree_decl*
  %rtl1258 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1257, i32 0, i32 17
  %646 = load %struct.rtx_def*, %struct.rtx_def** %rtl1258, align 8
  br label %cond.end.1262

cond.false.1259:                                  ; preds = %if.then.1249
  %647 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %647, i8* null)
  %648 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1260 = bitcast %union.tree_node* %648 to %struct.tree_decl*
  %rtl1261 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1260, i32 0, i32 17
  %649 = load %struct.rtx_def*, %struct.rtx_def** %rtl1261, align 8
  br label %cond.end.1262

cond.end.1262:                                    ; preds = %cond.false.1259, %cond.true.1256
  %cond1263 = phi %struct.rtx_def* [ %646, %cond.true.1256 ], [ %649, %cond.false.1259 ]
  store %struct.rtx_def* %cond1263, %struct.rtx_def** %addr, align 8
  %650 = load %union.tree_node*, %union.tree_node** %result1250, align 8
  %decl1265 = bitcast %union.tree_node* %650 to %struct.tree_decl*
  %mode1266 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1265, i32 0, i32 5
  %651 = bitcast i48* %mode1266 to i64*
  %bf.load1267 = load i64, i64* %651, align 8
  %bf.clear1268 = and i64 %bf.load1267, 255
  %bf.cast1269 = trunc i64 %bf.clear1268 to i32
  %652 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call1270 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast1269, %struct.rtx_def* %652)
  store %struct.rtx_def* %call1270, %struct.rtx_def** %x1264, align 8
  %653 = load %struct.rtx_def*, %struct.rtx_def** %x1264, align 8
  %654 = load %union.tree_node*, %union.tree_node** %result1250, align 8
  call void @set_mem_attributes(%struct.rtx_def* %653, %union.tree_node* %654, i32 1)
  %655 = load %struct.rtx_def*, %struct.rtx_def** %x1264, align 8
  %656 = load %union.tree_node*, %union.tree_node** %result1250, align 8
  %decl1271 = bitcast %union.tree_node* %656 to %struct.tree_decl*
  %rtl1272 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1271, i32 0, i32 17
  store %struct.rtx_def* %655, %struct.rtx_def** %rtl1272, align 8
  br label %if.end.1273

if.end.1273:                                      ; preds = %cond.end.1262, %if.end.1246
  %657 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1274 = bitcast %union.tree_node* %657 to %struct.tree_decl*
  %rtl1275 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1274, i32 0, i32 17
  %658 = load %struct.rtx_def*, %struct.rtx_def** %rtl1275, align 8
  %tobool1276 = icmp ne %struct.rtx_def* %658, null
  br i1 %tobool1276, label %cond.true.1277, label %cond.false.1280

cond.true.1277:                                   ; preds = %if.end.1273
  %659 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1278 = bitcast %union.tree_node* %659 to %struct.tree_decl*
  %rtl1279 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1278, i32 0, i32 17
  %660 = load %struct.rtx_def*, %struct.rtx_def** %rtl1279, align 8
  br label %cond.end.1283

cond.false.1280:                                  ; preds = %if.end.1273
  %661 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %661, i8* null)
  %662 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1281 = bitcast %union.tree_node* %662 to %struct.tree_decl*
  %rtl1282 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1281, i32 0, i32 17
  %663 = load %struct.rtx_def*, %struct.rtx_def** %rtl1282, align 8
  br label %cond.end.1283

cond.end.1283:                                    ; preds = %cond.false.1280, %cond.true.1277
  %cond1284 = phi %struct.rtx_def* [ %660, %cond.true.1277 ], [ %663, %cond.false.1280 ]
  %664 = bitcast %struct.rtx_def* %cond1284 to i32*
  %bf.load1285 = load i32, i32* %664, align 8
  %bf.clear1286 = and i32 %bf.load1285, 65535
  %cmp1287 = icmp eq i32 %bf.clear1286, 61
  br i1 %cmp1287, label %if.then.1289, label %if.else.1307

if.then.1289:                                     ; preds = %cond.end.1283
  %665 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %666 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1290 = bitcast %union.tree_node* %666 to %struct.tree_decl*
  %rtl1291 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1290, i32 0, i32 17
  %667 = load %struct.rtx_def*, %struct.rtx_def** %rtl1291, align 8
  %tobool1292 = icmp ne %struct.rtx_def* %667, null
  br i1 %tobool1292, label %cond.true.1293, label %cond.false.1296

cond.true.1293:                                   ; preds = %if.then.1289
  %668 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1294 = bitcast %union.tree_node* %668 to %struct.tree_decl*
  %rtl1295 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1294, i32 0, i32 17
  %669 = load %struct.rtx_def*, %struct.rtx_def** %rtl1295, align 8
  br label %cond.end.1299

cond.false.1296:                                  ; preds = %if.then.1289
  %670 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %670, i8* null)
  %671 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1297 = bitcast %union.tree_node* %671 to %struct.tree_decl*
  %rtl1298 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1297, i32 0, i32 17
  %672 = load %struct.rtx_def*, %struct.rtx_def** %rtl1298, align 8
  br label %cond.end.1299

cond.end.1299:                                    ; preds = %cond.false.1296, %cond.true.1293
  %cond1300 = phi %struct.rtx_def* [ %669, %cond.true.1293 ], [ %672, %cond.false.1296 ]
  %fld1301 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond1300, i32 0, i32 1
  %arrayidx1302 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1301, i32 0, i64 0
  %rtuint1303 = bitcast %union.rtunion_def* %arrayidx1302 to i32*
  %673 = load i32, i32* %rtuint1303, align 4
  %idxprom1304 = zext i32 %673 to i64
  %674 = load %struct.function*, %struct.function** @cfun, align 8
  %emit1305 = getelementptr inbounds %struct.function, %struct.function* %674, i32 0, i32 3
  %675 = load %struct.emit_status*, %struct.emit_status** %emit1305, align 8
  %regno_decl = getelementptr inbounds %struct.emit_status, %struct.emit_status* %675, i32 0, i32 11
  %676 = load %union.tree_node**, %union.tree_node*** %regno_decl, align 8
  %arrayidx1306 = getelementptr inbounds %union.tree_node*, %union.tree_node** %676, i64 %idxprom1304
  store %union.tree_node* %665, %union.tree_node** %arrayidx1306, align 8
  br label %if.end.1367

if.else.1307:                                     ; preds = %cond.end.1283
  %677 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1308 = bitcast %union.tree_node* %677 to %struct.tree_decl*
  %rtl1309 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1308, i32 0, i32 17
  %678 = load %struct.rtx_def*, %struct.rtx_def** %rtl1309, align 8
  %tobool1310 = icmp ne %struct.rtx_def* %678, null
  br i1 %tobool1310, label %cond.true.1311, label %cond.false.1314

cond.true.1311:                                   ; preds = %if.else.1307
  %679 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1312 = bitcast %union.tree_node* %679 to %struct.tree_decl*
  %rtl1313 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1312, i32 0, i32 17
  %680 = load %struct.rtx_def*, %struct.rtx_def** %rtl1313, align 8
  br label %cond.end.1317

cond.false.1314:                                  ; preds = %if.else.1307
  %681 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %681, i8* null)
  %682 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1315 = bitcast %union.tree_node* %682 to %struct.tree_decl*
  %rtl1316 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1315, i32 0, i32 17
  %683 = load %struct.rtx_def*, %struct.rtx_def** %rtl1316, align 8
  br label %cond.end.1317

cond.end.1317:                                    ; preds = %cond.false.1314, %cond.true.1311
  %cond1318 = phi %struct.rtx_def* [ %680, %cond.true.1311 ], [ %683, %cond.false.1314 ]
  %684 = bitcast %struct.rtx_def* %cond1318 to i32*
  %bf.load1319 = load i32, i32* %684, align 8
  %bf.clear1320 = and i32 %bf.load1319, 65535
  %cmp1321 = icmp eq i32 %bf.clear1320, 65
  br i1 %cmp1321, label %if.then.1323, label %if.end.1366

if.then.1323:                                     ; preds = %cond.end.1317
  %685 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %686 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1324 = bitcast %union.tree_node* %686 to %struct.tree_decl*
  %rtl1325 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1324, i32 0, i32 17
  %687 = load %struct.rtx_def*, %struct.rtx_def** %rtl1325, align 8
  %tobool1326 = icmp ne %struct.rtx_def* %687, null
  br i1 %tobool1326, label %cond.true.1327, label %cond.false.1330

cond.true.1327:                                   ; preds = %if.then.1323
  %688 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1328 = bitcast %union.tree_node* %688 to %struct.tree_decl*
  %rtl1329 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1328, i32 0, i32 17
  %689 = load %struct.rtx_def*, %struct.rtx_def** %rtl1329, align 8
  br label %cond.end.1333

cond.false.1330:                                  ; preds = %if.then.1323
  %690 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %690, i8* null)
  %691 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1331 = bitcast %union.tree_node* %691 to %struct.tree_decl*
  %rtl1332 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1331, i32 0, i32 17
  %692 = load %struct.rtx_def*, %struct.rtx_def** %rtl1332, align 8
  br label %cond.end.1333

cond.end.1333:                                    ; preds = %cond.false.1330, %cond.true.1327
  %cond1334 = phi %struct.rtx_def* [ %689, %cond.true.1327 ], [ %692, %cond.false.1330 ]
  %fld1335 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond1334, i32 0, i32 1
  %arrayidx1336 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1335, i32 0, i64 0
  %rtx1337 = bitcast %union.rtunion_def* %arrayidx1336 to %struct.rtx_def**
  %693 = load %struct.rtx_def*, %struct.rtx_def** %rtx1337, align 8
  %fld1338 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %693, i32 0, i32 1
  %arrayidx1339 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1338, i32 0, i64 0
  %rtuint1340 = bitcast %union.rtunion_def* %arrayidx1339 to i32*
  %694 = load i32, i32* %rtuint1340, align 4
  %idxprom1341 = zext i32 %694 to i64
  %695 = load %struct.function*, %struct.function** @cfun, align 8
  %emit1342 = getelementptr inbounds %struct.function, %struct.function* %695, i32 0, i32 3
  %696 = load %struct.emit_status*, %struct.emit_status** %emit1342, align 8
  %regno_decl1343 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %696, i32 0, i32 11
  %697 = load %union.tree_node**, %union.tree_node*** %regno_decl1343, align 8
  %arrayidx1344 = getelementptr inbounds %union.tree_node*, %union.tree_node** %697, i64 %idxprom1341
  store %union.tree_node* %685, %union.tree_node** %arrayidx1344, align 8
  %698 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %699 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1345 = bitcast %union.tree_node* %699 to %struct.tree_decl*
  %rtl1346 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1345, i32 0, i32 17
  %700 = load %struct.rtx_def*, %struct.rtx_def** %rtl1346, align 8
  %tobool1347 = icmp ne %struct.rtx_def* %700, null
  br i1 %tobool1347, label %cond.true.1348, label %cond.false.1351

cond.true.1348:                                   ; preds = %cond.end.1333
  %701 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1349 = bitcast %union.tree_node* %701 to %struct.tree_decl*
  %rtl1350 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1349, i32 0, i32 17
  %702 = load %struct.rtx_def*, %struct.rtx_def** %rtl1350, align 8
  br label %cond.end.1354

cond.false.1351:                                  ; preds = %cond.end.1333
  %703 = load %union.tree_node*, %union.tree_node** %parm, align 8
  call void @make_decl_rtl(%union.tree_node* %703, i8* null)
  %704 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %decl1352 = bitcast %union.tree_node* %704 to %struct.tree_decl*
  %rtl1353 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1352, i32 0, i32 17
  %705 = load %struct.rtx_def*, %struct.rtx_def** %rtl1353, align 8
  br label %cond.end.1354

cond.end.1354:                                    ; preds = %cond.false.1351, %cond.true.1348
  %cond1355 = phi %struct.rtx_def* [ %702, %cond.true.1348 ], [ %705, %cond.false.1351 ]
  %fld1356 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond1355, i32 0, i32 1
  %arrayidx1357 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1356, i32 0, i64 1
  %rtx1358 = bitcast %union.rtunion_def* %arrayidx1357 to %struct.rtx_def**
  %706 = load %struct.rtx_def*, %struct.rtx_def** %rtx1358, align 8
  %fld1359 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %706, i32 0, i32 1
  %arrayidx1360 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1359, i32 0, i64 0
  %rtuint1361 = bitcast %union.rtunion_def* %arrayidx1360 to i32*
  %707 = load i32, i32* %rtuint1361, align 4
  %idxprom1362 = zext i32 %707 to i64
  %708 = load %struct.function*, %struct.function** @cfun, align 8
  %emit1363 = getelementptr inbounds %struct.function, %struct.function* %708, i32 0, i32 3
  %709 = load %struct.emit_status*, %struct.emit_status** %emit1363, align 8
  %regno_decl1364 = getelementptr inbounds %struct.emit_status, %struct.emit_status* %709, i32 0, i32 11
  %710 = load %union.tree_node**, %union.tree_node*** %regno_decl1364, align 8
  %arrayidx1365 = getelementptr inbounds %union.tree_node*, %union.tree_node** %710, i64 %idxprom1362
  store %union.tree_node* %698, %union.tree_node** %arrayidx1365, align 8
  br label %if.end.1366

if.end.1366:                                      ; preds = %cond.end.1354, %cond.end.1317
  br label %if.end.1367

if.end.1367:                                      ; preds = %if.end.1366, %cond.end.1299
  br label %for.inc.1368

for.inc.1368:                                     ; preds = %if.end.1367, %cond.end.136, %cond.end
  %711 = load %union.tree_node*, %union.tree_node** %parm, align 8
  %common1369 = bitcast %union.tree_node* %711 to %struct.tree_common*
  %chain1370 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1369, i32 0, i32 0
  %712 = load %union.tree_node*, %union.tree_node** %chain1370, align 8
  store %union.tree_node* %712, %union.tree_node** %parm, align 8
  br label %for.cond

for.end.1371:                                     ; preds = %for.cond
  %713 = load %struct.rtx_def*, %struct.rtx_def** %conversion_insns, align 8
  %call1372 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %713)
  %call1373 = call %struct.rtx_def* @get_last_insn()
  %714 = load %struct.function*, %struct.function** @cfun, align 8
  %x_last_parm_insn = getelementptr inbounds %struct.function, %struct.function* %714, i32 0, i32 36
  store %struct.rtx_def* %call1373, %struct.rtx_def** %x_last_parm_insn, align 8
  %constant1374 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0
  %715 = load i64, i64* %constant1374, align 8
  %conv1375 = trunc i64 %715 to i32
  %716 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size = getelementptr inbounds %struct.function, %struct.function* %716, i32 0, i32 9
  store i32 %conv1375, i32* %args_size, align 4
  %717 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size1376 = getelementptr inbounds %struct.function, %struct.function* %717, i32 0, i32 9
  %718 = load i32, i32* %args_size1376, align 4
  %cmp1377 = icmp sgt i32 %718, 0
  br i1 %cmp1377, label %cond.true.1379, label %cond.false.1381

cond.true.1379:                                   ; preds = %for.end.1371
  %719 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size1380 = getelementptr inbounds %struct.function, %struct.function* %719, i32 0, i32 9
  %720 = load i32, i32* %args_size1380, align 4
  br label %cond.end.1382

cond.false.1381:                                  ; preds = %for.end.1371
  br label %cond.end.1382

cond.end.1382:                                    ; preds = %cond.false.1381, %cond.true.1379
  %cond1383 = phi i32 [ %720, %cond.true.1379 ], [ 0, %cond.false.1381 ]
  %721 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size1384 = getelementptr inbounds %struct.function, %struct.function* %721, i32 0, i32 9
  store i32 %cond1383, i32* %args_size1384, align 4
  %722 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size1385 = getelementptr inbounds %struct.function, %struct.function* %722, i32 0, i32 9
  %723 = load i32, i32* %args_size1385, align 4
  %724 = load i32, i32* @target_flags, align 4
  %and1386 = and i32 %724, 33554432
  %tobool1387 = icmp ne i32 %and1386, 0
  %cond1388 = select i1 %tobool1387, i32 64, i32 32
  %div1389 = sdiv i32 %cond1388, 8
  %add1390 = add nsw i32 %723, %div1389
  %sub1391 = sub nsw i32 %add1390, 1
  %725 = load i32, i32* @target_flags, align 4
  %and1392 = and i32 %725, 33554432
  %tobool1393 = icmp ne i32 %and1392, 0
  %cond1394 = select i1 %tobool1393, i32 64, i32 32
  %div1395 = sdiv i32 %cond1394, 8
  %div1396 = sdiv i32 %sub1391, %div1395
  %726 = load i32, i32* @target_flags, align 4
  %and1397 = and i32 %726, 33554432
  %tobool1398 = icmp ne i32 %and1397, 0
  %cond1399 = select i1 %tobool1398, i32 64, i32 32
  %div1400 = sdiv i32 %cond1399, 8
  %mul1401 = mul nsw i32 %div1396, %div1400
  %727 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size1402 = getelementptr inbounds %struct.function, %struct.function* %727, i32 0, i32 9
  store i32 %mul1401, i32* %args_size1402, align 4
  %var1403 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 1
  %728 = load %union.tree_node*, %union.tree_node** %var1403, align 8
  %cmp1404 = icmp eq %union.tree_node* %728, null
  br i1 %cmp1404, label %cond.true.1406, label %cond.false.1409

cond.true.1406:                                   ; preds = %cond.end.1382
  %constant1407 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0
  %729 = load i64, i64* %constant1407, align 8
  %call1408 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %729)
  br label %cond.end.1425

cond.false.1409:                                  ; preds = %cond.end.1382
  %var1410 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 1
  %730 = load %union.tree_node*, %union.tree_node** %var1410, align 8
  %cmp1411 = icmp eq %union.tree_node* %730, null
  br i1 %cmp1411, label %cond.true.1413, label %cond.false.1416

cond.true.1413:                                   ; preds = %cond.false.1409
  %constant1414 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0
  %731 = load i64, i64* %constant1414, align 8
  %call1415 = call %union.tree_node* @size_int_wide(i64 %731, i32 1)
  br label %cond.end.1422

cond.false.1416:                                  ; preds = %cond.false.1409
  %732 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %var1417 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 1
  %733 = load %union.tree_node*, %union.tree_node** %var1417, align 8
  %call1418 = call %union.tree_node* @convert(%union.tree_node* %732, %union.tree_node* %733)
  %constant1419 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0
  %734 = load i64, i64* %constant1419, align 8
  %call1420 = call %union.tree_node* @size_int_wide(i64 %734, i32 1)
  %call1421 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call1418, %union.tree_node* %call1420)
  br label %cond.end.1422

cond.end.1422:                                    ; preds = %cond.false.1416, %cond.true.1413
  %cond1423 = phi %union.tree_node* [ %call1415, %cond.true.1413 ], [ %call1421, %cond.false.1416 ]
  %call1424 = call %struct.rtx_def* @expand_expr(%union.tree_node* %cond1423, %struct.rtx_def* null, i32 0, i32 0)
  br label %cond.end.1425

cond.end.1425:                                    ; preds = %cond.end.1422, %cond.true.1406
  %cond1426 = phi %struct.rtx_def* [ %call1408, %cond.true.1406 ], [ %call1424, %cond.end.1422 ]
  %735 = load %struct.function*, %struct.function** @cfun, align 8
  %arg_offset_rtx = getelementptr inbounds %struct.function, %struct.function* %735, i32 0, i32 12
  store %struct.rtx_def* %cond1426, %struct.rtx_def** %arg_offset_rtx, align 8
  %736 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %737 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %common1427 = bitcast %union.tree_node* %737 to %struct.tree_common*
  %type1428 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1427, i32 0, i32 1
  %738 = load %union.tree_node*, %union.tree_node** %type1428, align 8
  %739 = load %struct.function*, %struct.function** @cfun, align 8
  %args_size1429 = getelementptr inbounds %struct.function, %struct.function* %739, i32 0, i32 9
  %740 = load i32, i32* %args_size1429, align 4
  %call1430 = call i32 @ix86_return_pops_args(%union.tree_node* %736, %union.tree_node* %738, i32 %740)
  %741 = load %struct.function*, %struct.function** @cfun, align 8
  %pops_args = getelementptr inbounds %struct.function, %struct.function* %741, i32 0, i32 8
  store i32 %call1430, i32* %pops_args, align 4
  %742 = load i32, i32* %hide_last_arg, align 4
  %tobool1431 = icmp ne i32 %742, 0
  br i1 %tobool1431, label %if.end.1434, label %if.then.1432

if.then.1432:                                     ; preds = %cond.end.1425
  %743 = load %struct.function*, %struct.function** @cfun, align 8
  %args_info1433 = getelementptr inbounds %struct.function, %struct.function* %743, i32 0, i32 13
  %744 = bitcast %struct.ix86_args* %args_info1433 to i8*
  %745 = bitcast %struct.ix86_args* %args_so_far to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %744, i8* %745, i64 28, i32 4, i1 false)
  br label %if.end.1434

if.end.1434:                                      ; preds = %if.then.1432, %cond.end.1425
  %746 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1435 = bitcast %union.tree_node* %746 to %struct.tree_decl*
  %result1436 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1435, i32 0, i32 11
  %747 = load %union.tree_node*, %union.tree_node** %result1436, align 8
  %decl1437 = bitcast %union.tree_node* %747 to %struct.tree_decl*
  %rtl1438 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1437, i32 0, i32 17
  %748 = load %struct.rtx_def*, %struct.rtx_def** %rtl1438, align 8
  %cmp1439 = icmp ne %struct.rtx_def* %748, null
  br i1 %cmp1439, label %cond.true.1441, label %cond.false.1461

cond.true.1441:                                   ; preds = %if.end.1434
  %749 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1442 = bitcast %union.tree_node* %749 to %struct.tree_decl*
  %result1443 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1442, i32 0, i32 11
  %750 = load %union.tree_node*, %union.tree_node** %result1443, align 8
  %decl1444 = bitcast %union.tree_node* %750 to %struct.tree_decl*
  %rtl1445 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1444, i32 0, i32 17
  %751 = load %struct.rtx_def*, %struct.rtx_def** %rtl1445, align 8
  %tobool1446 = icmp ne %struct.rtx_def* %751, null
  br i1 %tobool1446, label %cond.true.1447, label %cond.false.1452

cond.true.1447:                                   ; preds = %cond.true.1441
  %752 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1448 = bitcast %union.tree_node* %752 to %struct.tree_decl*
  %result1449 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1448, i32 0, i32 11
  %753 = load %union.tree_node*, %union.tree_node** %result1449, align 8
  %decl1450 = bitcast %union.tree_node* %753 to %struct.tree_decl*
  %rtl1451 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1450, i32 0, i32 17
  %754 = load %struct.rtx_def*, %struct.rtx_def** %rtl1451, align 8
  br label %cond.end.1459

cond.false.1452:                                  ; preds = %cond.true.1441
  %755 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1453 = bitcast %union.tree_node* %755 to %struct.tree_decl*
  %result1454 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1453, i32 0, i32 11
  %756 = load %union.tree_node*, %union.tree_node** %result1454, align 8
  call void @make_decl_rtl(%union.tree_node* %756, i8* null)
  %757 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1455 = bitcast %union.tree_node* %757 to %struct.tree_decl*
  %result1456 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1455, i32 0, i32 11
  %758 = load %union.tree_node*, %union.tree_node** %result1456, align 8
  %decl1457 = bitcast %union.tree_node* %758 to %struct.tree_decl*
  %rtl1458 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1457, i32 0, i32 17
  %759 = load %struct.rtx_def*, %struct.rtx_def** %rtl1458, align 8
  br label %cond.end.1459

cond.end.1459:                                    ; preds = %cond.false.1452, %cond.true.1447
  %cond1460 = phi %struct.rtx_def* [ %754, %cond.true.1447 ], [ %759, %cond.false.1452 ]
  br label %cond.end.1462

cond.false.1461:                                  ; preds = %if.end.1434
  br label %cond.end.1462

cond.end.1462:                                    ; preds = %cond.false.1461, %cond.end.1459
  %cond1463 = phi %struct.rtx_def* [ %cond1460, %cond.end.1459 ], [ null, %cond.false.1461 ]
  %760 = load %struct.function*, %struct.function** @cfun, align 8
  %return_rtx = getelementptr inbounds %struct.function, %struct.function* %760, i32 0, i32 14
  store %struct.rtx_def* %cond1463, %struct.rtx_def** %return_rtx, align 8
  %761 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1464 = bitcast %union.tree_node* %761 to %struct.tree_decl*
  %result1465 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1464, i32 0, i32 11
  %762 = load %union.tree_node*, %union.tree_node** %result1465, align 8
  %decl1466 = bitcast %union.tree_node* %762 to %struct.tree_decl*
  %rtl1467 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1466, i32 0, i32 17
  %763 = load %struct.rtx_def*, %struct.rtx_def** %rtl1467, align 8
  %cmp1468 = icmp ne %struct.rtx_def* %763, null
  br i1 %cmp1468, label %if.then.1470, label %if.end.1511

if.then.1470:                                     ; preds = %cond.end.1462
  %764 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8
  %decl1471 = bitcast %union.tree_node* %764 to %struct.tree_decl*
  %result1472 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1471, i32 0, i32 11
  %765 = load %union.tree_node*, %union.tree_node** %result1472, align 8
  store %union.tree_node* %765, %union.tree_node** %decl_result, align 8
  %766 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl1473 = bitcast %union.tree_node* %766 to %struct.tree_decl*
  %rtl1474 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1473, i32 0, i32 17
  %767 = load %struct.rtx_def*, %struct.rtx_def** %rtl1474, align 8
  %tobool1475 = icmp ne %struct.rtx_def* %767, null
  br i1 %tobool1475, label %cond.true.1476, label %cond.false.1479

cond.true.1476:                                   ; preds = %if.then.1470
  %768 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl1477 = bitcast %union.tree_node* %768 to %struct.tree_decl*
  %rtl1478 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1477, i32 0, i32 17
  %769 = load %struct.rtx_def*, %struct.rtx_def** %rtl1478, align 8
  br label %cond.end.1482

cond.false.1479:                                  ; preds = %if.then.1470
  %770 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  call void @make_decl_rtl(%union.tree_node* %770, i8* null)
  %771 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl1480 = bitcast %union.tree_node* %771 to %struct.tree_decl*
  %rtl1481 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1480, i32 0, i32 17
  %772 = load %struct.rtx_def*, %struct.rtx_def** %rtl1481, align 8
  br label %cond.end.1482

cond.end.1482:                                    ; preds = %cond.false.1479, %cond.true.1476
  %cond1483 = phi %struct.rtx_def* [ %769, %cond.true.1476 ], [ %772, %cond.false.1479 ]
  store %struct.rtx_def* %cond1483, %struct.rtx_def** %decl_rtl, align 8
  %773 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %774 = bitcast %struct.rtx_def* %773 to i32*
  %bf.load1484 = load i32, i32* %774, align 8
  %bf.clear1485 = and i32 %bf.load1484, 65535
  %cmp1486 = icmp eq i32 %bf.clear1485, 61
  br i1 %cmp1486, label %cond.true.1488, label %cond.false.1494

cond.true.1488:                                   ; preds = %cond.end.1482
  %775 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %fld1489 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %775, i32 0, i32 1
  %arrayidx1490 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1489, i32 0, i64 0
  %rtuint1491 = bitcast %union.rtunion_def* %arrayidx1490 to i32*
  %776 = load i32, i32* %rtuint1491, align 4
  %cmp1492 = icmp uge i32 %776, 53
  br i1 %cmp1492, label %if.then.1502, label %if.end.1510

cond.false.1494:                                  ; preds = %cond.end.1482
  %777 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl1495 = bitcast %union.tree_node* %777 to %struct.tree_decl*
  %regdecl_flag1496 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1495, i32 0, i32 5
  %778 = bitcast i48* %regdecl_flag1496 to i64*
  %bf.load1497 = load i64, i64* %778, align 8
  %bf.lshr1498 = lshr i64 %bf.load1497, 10
  %bf.clear1499 = and i64 %bf.lshr1498, 1
  %bf.cast1500 = trunc i64 %bf.clear1499 to i32
  %tobool1501 = icmp ne i32 %bf.cast1500, 0
  br i1 %tobool1501, label %if.then.1502, label %if.end.1510

if.then.1502:                                     ; preds = %cond.false.1494, %cond.true.1488
  %779 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %common1503 = bitcast %union.tree_node* %779 to %struct.tree_common*
  %type1504 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1503, i32 0, i32 1
  %780 = load %union.tree_node*, %union.tree_node** %type1504, align 8
  %call1505 = call %struct.rtx_def* @ix86_function_value(%union.tree_node* %780)
  store %struct.rtx_def* %call1505, %struct.rtx_def** %real_decl_rtl, align 8
  %781 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %782 = bitcast %struct.rtx_def* %781 to i32*
  %bf.load1506 = load i32, i32* %782, align 8
  %bf.clear1507 = and i32 %bf.load1506, -1073741825
  %bf.set1508 = or i32 %bf.clear1507, 1073741824
  store i32 %bf.set1508, i32* %782, align 8
  %783 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %784 = load %struct.function*, %struct.function** @cfun, align 8
  %return_rtx1509 = getelementptr inbounds %struct.function, %struct.function* %784, i32 0, i32 14
  store %struct.rtx_def* %783, %struct.rtx_def** %return_rtx1509, align 8
  br label %if.end.1510

if.end.1510:                                      ; preds = %if.then.1502, %cond.false.1494, %cond.true.1488
  br label %if.end.1511

if.end.1511:                                      ; preds = %if.end.1510, %cond.end.1462
  ret void
}

declare %union.tree_node* @tree_last(%union.tree_node*) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

declare %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare %union.tree_node* @build_decl(i32, %union.tree_node*, %union.tree_node*) #2

declare noalias i8* @xcalloc(i64, i64) #2

declare void @init_cumulative_args(%struct.ix86_args*, %union.tree_node*, %struct.rtx_def*) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

declare i32 @contains_placeholder_p(%union.tree_node*) #2

declare %struct.rtx_def* @function_arg(%struct.ix86_args*, i32, %union.tree_node*, i32) #2

declare void @ix86_setup_incoming_varargs(%struct.ix86_args*, i32, %union.tree_node*, i32*, i32) #2

; Function Attrs: nounwind uwtable
define void @locate_and_pad_parm(i32 %passed_mode, %union.tree_node* %type, i32 %in_regs, %union.tree_node* %fndecl, %struct.args_size* %initial_offset_ptr, %struct.args_size* %offset_ptr, %struct.args_size* %arg_size_ptr, %struct.args_size* %alignment_pad) #0 {
entry:
  %passed_mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %in_regs.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %initial_offset_ptr.addr = alloca %struct.args_size*, align 8
  %offset_ptr.addr = alloca %struct.args_size*, align 8
  %arg_size_ptr.addr = alloca %struct.args_size*, align 8
  %alignment_pad.addr = alloca %struct.args_size*, align 8
  %sizetree = alloca %union.tree_node*, align 8
  %where_pad = alloca i32, align 4
  %boundary = alloca i32, align 4
  %reg_parm_stack_space = alloca i32, align 4
  %inc = alloca %union.tree_node*, align 8
  store i32 %passed_mode, i32* %passed_mode.addr, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  store i32 %in_regs, i32* %in_regs.addr, align 4
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  store %struct.args_size* %initial_offset_ptr, %struct.args_size** %initial_offset_ptr.addr, align 8
  store %struct.args_size* %offset_ptr, %struct.args_size** %offset_ptr.addr, align 8
  store %struct.args_size* %arg_size_ptr, %struct.args_size** %arg_size_ptr.addr, align 8
  store %struct.args_size* %alignment_pad, %struct.args_size** %alignment_pad.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %tobool = icmp ne %union.tree_node* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call = call %union.tree_node* @size_in_bytes(%union.tree_node* %1)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %passed_mode.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i64
  %call1 = call %union.tree_node* @size_int_wide(i64 %conv, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call, %cond.true ], [ %call1, %cond.false ]
  store %union.tree_node* %cond, %union.tree_node** %sizetree, align 8
  store i32 1, i32* %where_pad, align 4
  %4 = load i32, i32* %passed_mode.addr, align 4
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8
  %call2 = call i32 @ix86_function_arg_boundary(i32 %4, %union.tree_node* %5)
  store i32 %call2, i32* %boundary, align 4
  %6 = load i32, i32* %in_regs.addr, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %if.end.35, label %if.then

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %reg_parm_stack_space, align 4
  store i32 0, i32* %reg_parm_stack_space, align 4
  %7 = load i32, i32* %reg_parm_stack_space, align 4
  %cmp = icmp sgt i32 %7, 0
  br i1 %cmp, label %if.then.5, label %if.end.34

if.then.5:                                        ; preds = %if.then
  %8 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %8, i32 0, i32 1
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8
  %tobool6 = icmp ne %union.tree_node* %9, null
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.5
  %10 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %var8 = getelementptr inbounds %struct.args_size, %struct.args_size* %10, i32 0, i32 1
  %11 = load %union.tree_node*, %union.tree_node** %var8, align 8
  %cmp9 = icmp eq %union.tree_node* %11, null
  br i1 %cmp9, label %cond.true.11, label %cond.false.13

cond.true.11:                                     ; preds = %if.then.7
  %12 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %12, i32 0, i32 0
  %13 = load i64, i64* %constant, align 8
  %call12 = call %union.tree_node* @size_int_wide(i64 %13, i32 1)
  br label %cond.end.19

cond.false.13:                                    ; preds = %if.then.7
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %15 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %var14 = getelementptr inbounds %struct.args_size, %struct.args_size* %15, i32 0, i32 1
  %16 = load %union.tree_node*, %union.tree_node** %var14, align 8
  %call15 = call %union.tree_node* @convert(%union.tree_node* %14, %union.tree_node* %16)
  %17 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %constant16 = getelementptr inbounds %struct.args_size, %struct.args_size* %17, i32 0, i32 0
  %18 = load i64, i64* %constant16, align 8
  %call17 = call %union.tree_node* @size_int_wide(i64 %18, i32 1)
  %call18 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call15, %union.tree_node* %call17)
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.13, %cond.true.11
  %cond20 = phi %union.tree_node* [ %call12, %cond.true.11 ], [ %call18, %cond.false.13 ]
  %19 = load i32, i32* %reg_parm_stack_space, align 4
  %conv21 = sext i32 %19 to i64
  %call22 = call %union.tree_node* @size_int_wide(i64 %conv21, i32 1)
  %call23 = call %union.tree_node* @size_binop(i32 79, %union.tree_node* %cond20, %union.tree_node* %call22)
  %20 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %var24 = getelementptr inbounds %struct.args_size, %struct.args_size* %20, i32 0, i32 1
  store %union.tree_node* %call23, %union.tree_node** %var24, align 8
  %21 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %constant25 = getelementptr inbounds %struct.args_size, %struct.args_size* %21, i32 0, i32 0
  store i64 0, i64* %constant25, align 8
  br label %if.end.33

if.else:                                          ; preds = %if.then.5
  %22 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %constant26 = getelementptr inbounds %struct.args_size, %struct.args_size* %22, i32 0, i32 0
  %23 = load i64, i64* %constant26, align 8
  %24 = load i32, i32* %reg_parm_stack_space, align 4
  %conv27 = sext i32 %24 to i64
  %cmp28 = icmp slt i64 %23, %conv27
  br i1 %cmp28, label %if.then.30, label %if.end

if.then.30:                                       ; preds = %if.else
  %25 = load i32, i32* %reg_parm_stack_space, align 4
  %conv31 = sext i32 %25 to i64
  %26 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %constant32 = getelementptr inbounds %struct.args_size, %struct.args_size* %26, i32 0, i32 0
  store i64 %conv31, i64* %constant32, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.30, %if.else
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %cond.end.19
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %cond.end
  %27 = load %struct.args_size*, %struct.args_size** %arg_size_ptr.addr, align 8
  %var36 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 1
  store %union.tree_node* null, %union.tree_node** %var36, align 8
  %28 = load %struct.args_size*, %struct.args_size** %arg_size_ptr.addr, align 8
  %constant37 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 0
  store i64 0, i64* %constant37, align 8
  %29 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8
  %var38 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 1
  store %union.tree_node* null, %union.tree_node** %var38, align 8
  %30 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8
  %constant39 = getelementptr inbounds %struct.args_size, %struct.args_size* %30, i32 0, i32 0
  store i64 0, i64* %constant39, align 8
  %31 = load i32, i32* %in_regs.addr, align 4
  %tobool40 = icmp ne i32 %31, 0
  br i1 %tobool40, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %if.end.35
  %32 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %33 = load i32, i32* %boundary, align 4
  %34 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8
  call void @pad_to_arg_alignment(%struct.args_size* %32, i32 %33, %struct.args_size* %34)
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.41, %if.end.35
  %35 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %36 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8
  %37 = bitcast %struct.args_size* %35 to i8*
  %38 = bitcast %struct.args_size* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 16, i32 8, i1 false)
  %39 = load i32, i32* %passed_mode.addr, align 4
  %cmp43 = icmp ne i32 %39, 51
  br i1 %cmp43, label %if.then.45, label %if.end.59

if.then.45:                                       ; preds = %if.end.42
  %40 = load i32, i32* @target_flags, align 4
  %and = and i32 %40, 33554432
  %tobool46 = icmp ne i32 %and, 0
  br i1 %tobool46, label %cond.true.47, label %cond.false.50

cond.true.47:                                     ; preds = %if.then.45
  %41 = load %union.tree_node*, %union.tree_node** %sizetree, align 8
  %int_cst = bitcast %union.tree_node* %41 to %struct.tree_int_cst*
  %int_cst48 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst48, i32 0, i32 0
  %42 = load i64, i64* %low, align 8
  %add = add i64 %42, 7
  %and49 = and i64 %add, -8
  br label %cond.end.56

cond.false.50:                                    ; preds = %if.then.45
  %43 = load %union.tree_node*, %union.tree_node** %sizetree, align 8
  %int_cst51 = bitcast %union.tree_node* %43 to %struct.tree_int_cst*
  %int_cst52 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst51, i32 0, i32 2
  %low53 = getelementptr inbounds %struct.anon, %struct.anon* %int_cst52, i32 0, i32 0
  %44 = load i64, i64* %low53, align 8
  %add54 = add i64 %44, 1
  %and55 = and i64 %add54, -2
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.false.50, %cond.true.47
  %cond57 = phi i64 [ %and49, %cond.true.47 ], [ %and55, %cond.false.50 ]
  %call58 = call %union.tree_node* @size_int_wide(i64 %cond57, i32 0)
  store %union.tree_node* %call58, %union.tree_node** %sizetree, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %cond.end.56, %if.end.42
  %45 = load i32, i32* %where_pad, align 4
  %cmp60 = icmp eq i32 %45, 2
  br i1 %cmp60, label %land.lhs.true, label %if.end.67

land.lhs.true:                                    ; preds = %if.end.59
  %46 = load i32, i32* %in_regs.addr, align 4
  %tobool62 = icmp ne i32 %46, 0
  br i1 %tobool62, label %land.lhs.true.63, label %if.then.66

land.lhs.true.63:                                 ; preds = %land.lhs.true
  %47 = load i32, i32* %passed_mode.addr, align 4
  %cmp64 = icmp eq i32 %47, 51
  br i1 %cmp64, label %if.end.67, label %if.then.66

if.then.66:                                       ; preds = %land.lhs.true.63, %land.lhs.true
  %48 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %49 = load i32, i32* %passed_mode.addr, align 4
  %50 = load %union.tree_node*, %union.tree_node** %sizetree, align 8
  call void @pad_below(%struct.args_size* %48, i32 %49, %union.tree_node* %50)
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.66, %land.lhs.true.63, %if.end.59
  %51 = load i32, i32* %where_pad, align 4
  %cmp68 = icmp ne i32 %51, 0
  br i1 %cmp68, label %land.lhs.true.70, label %if.end.84

land.lhs.true.70:                                 ; preds = %if.end.67
  %52 = load %union.tree_node*, %union.tree_node** %sizetree, align 8
  %call71 = call i32 @host_integerp(%union.tree_node* %52, i32 1)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %lor.lhs.false, label %if.then.79

lor.lhs.false:                                    ; preds = %land.lhs.true.70
  %53 = load %union.tree_node*, %union.tree_node** %sizetree, align 8
  %call73 = call i64 @tree_low_cst(%union.tree_node* %53, i32 1)
  %mul = mul nsw i64 %call73, 8
  %54 = load i32, i32* @target_flags, align 4
  %and74 = and i32 %54, 33554432
  %tobool75 = icmp ne i32 %and74, 0
  %cond76 = select i1 %tobool75, i32 64, i32 32
  %conv77 = sext i32 %cond76 to i64
  %rem = srem i64 %mul, %conv77
  %tobool78 = icmp ne i64 %rem, 0
  br i1 %tobool78, label %if.then.79, label %if.end.84

if.then.79:                                       ; preds = %lor.lhs.false, %land.lhs.true.70
  %55 = load %union.tree_node*, %union.tree_node** %sizetree, align 8
  %56 = load i32, i32* @target_flags, align 4
  %and80 = and i32 %56, 33554432
  %tobool81 = icmp ne i32 %and80, 0
  %cond82 = select i1 %tobool81, i32 64, i32 32
  %div = sdiv i32 %cond82, 8
  %call83 = call %union.tree_node* @round_up(%union.tree_node* %55, i32 %div)
  store %union.tree_node* %call83, %union.tree_node** %sizetree, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.79, %lor.lhs.false, %if.end.67
  br label %do.body

do.body:                                          ; preds = %if.end.84
  %57 = load %union.tree_node*, %union.tree_node** %sizetree, align 8
  store %union.tree_node* %57, %union.tree_node** %inc, align 8
  %58 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call85 = call i32 @host_integerp(%union.tree_node* %58, i32 0)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.then.87, label %if.else.91

if.then.87:                                       ; preds = %do.body
  %59 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call88 = call i64 @tree_low_cst(%union.tree_node* %59, i32 0)
  %60 = load %struct.args_size*, %struct.args_size** %arg_size_ptr.addr, align 8
  %constant89 = getelementptr inbounds %struct.args_size, %struct.args_size* %60, i32 0, i32 0
  %61 = load i64, i64* %constant89, align 8
  %add90 = add nsw i64 %61, %call88
  store i64 %add90, i64* %constant89, align 8
  br label %if.end.104

if.else.91:                                       ; preds = %do.body
  %62 = load %struct.args_size*, %struct.args_size** %arg_size_ptr.addr, align 8
  %var92 = getelementptr inbounds %struct.args_size, %struct.args_size* %62, i32 0, i32 1
  %63 = load %union.tree_node*, %union.tree_node** %var92, align 8
  %cmp93 = icmp eq %union.tree_node* %63, null
  br i1 %cmp93, label %if.then.95, label %if.else.98

if.then.95:                                       ; preds = %if.else.91
  %64 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %65 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call96 = call %union.tree_node* @convert(%union.tree_node* %64, %union.tree_node* %65)
  %66 = load %struct.args_size*, %struct.args_size** %arg_size_ptr.addr, align 8
  %var97 = getelementptr inbounds %struct.args_size, %struct.args_size* %66, i32 0, i32 1
  store %union.tree_node* %call96, %union.tree_node** %var97, align 8
  br label %if.end.103

if.else.98:                                       ; preds = %if.else.91
  %67 = load %struct.args_size*, %struct.args_size** %arg_size_ptr.addr, align 8
  %var99 = getelementptr inbounds %struct.args_size, %struct.args_size* %67, i32 0, i32 1
  %68 = load %union.tree_node*, %union.tree_node** %var99, align 8
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %70 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call100 = call %union.tree_node* @convert(%union.tree_node* %69, %union.tree_node* %70)
  %call101 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %68, %union.tree_node* %call100)
  %71 = load %struct.args_size*, %struct.args_size** %arg_size_ptr.addr, align 8
  %var102 = getelementptr inbounds %struct.args_size, %struct.args_size* %71, i32 0, i32 1
  store %union.tree_node* %call101, %union.tree_node** %var102, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.98, %if.then.95
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %if.then.87
  br label %do.end

do.end:                                           ; preds = %if.end.104
  ret void
}

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #2

declare %union.tree_node* @size_int_wide(i64, i32) #2

declare %union.tree_node* @size_binop(i32, %union.tree_node*, %union.tree_node*) #2

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #2

declare void @emit_group_store(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare %struct.rtx_def* @validize_mem(%struct.rtx_def*) #2

declare void @move_block_from_reg(i32, %struct.rtx_def*, i32, i32) #2

declare void @function_arg_advance(%struct.ix86_args*, i32, %union.tree_node*, i32) #2

declare i32 @ix86_function_arg_boundary(i32, %union.tree_node*) #2

declare void @mark_user_reg(%struct.rtx_def*) #2

declare void @maybe_set_unchanging(%struct.rtx_def*, %union.tree_node*) #2

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @push_to_sequence(%struct.rtx_def*) #2

declare %struct.rtx_def* @convert_to_mode(i32, %struct.rtx_def*, i32) #2

declare %struct.rtx_def* @expand_assignment(%union.tree_node*, %union.tree_node*, i32, i32) #2

declare %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #2

declare void @end_sequence() #2

declare i8* @xrealloc(i8*, i64) #2

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #5

declare %struct.rtx_def* @gen_realpart(i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_imagpart(i32, %struct.rtx_def*) #2

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @get_last_insn() #2

declare %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #2

declare void @mark_reg_pointer(%struct.rtx_def*, i32) #2

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #2

declare %struct.rtx_def* @emit_insns(%struct.rtx_def*) #2

declare i32 @ix86_return_pops_args(%union.tree_node*, %union.tree_node*, i32) #2

declare %struct.rtx_def* @ix86_function_value(%union.tree_node*) #2

declare %union.tree_node* @size_in_bytes(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define internal void @pad_to_arg_alignment(%struct.args_size* %offset_ptr, i32 %boundary, %struct.args_size* %alignment_pad) #0 {
entry:
  %offset_ptr.addr = alloca %struct.args_size*, align 8
  %boundary.addr = alloca i32, align 4
  %alignment_pad.addr = alloca %struct.args_size*, align 8
  %save_var = alloca %union.tree_node*, align 8
  %save_constant = alloca i64, align 8
  %boundary_in_bytes = alloca i32, align 4
  store %struct.args_size* %offset_ptr, %struct.args_size** %offset_ptr.addr, align 8
  store i32 %boundary, i32* %boundary.addr, align 4
  store %struct.args_size* %alignment_pad, %struct.args_size** %alignment_pad.addr, align 8
  store %union.tree_node* null, %union.tree_node** %save_var, align 8
  store i64 0, i64* %save_constant, align 8
  %0 = load i32, i32* %boundary.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %boundary_in_bytes, align 4
  %1 = load i32, i32* %boundary.addr, align 4
  %2 = load i32, i32* @target_flags, align 4
  %and = and i32 %2, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %cmp = icmp sgt i32 %1, %cond
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %boundary.addr, align 4
  %4 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %4, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  %cond3 = select i1 %tobool2, i32 64, i32 32
  %cmp4 = icmp sgt i32 %3, %cond3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %5, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8
  store %union.tree_node* %6, %union.tree_node** %save_var, align 8
  %7 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %7, i32 0, i32 0
  %8 = load i64, i64* %constant, align 8
  store i64 %8, i64* %save_constant, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8
  %var5 = getelementptr inbounds %struct.args_size, %struct.args_size* %9, i32 0, i32 1
  store %union.tree_node* null, %union.tree_node** %var5, align 8
  %10 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8
  %constant6 = getelementptr inbounds %struct.args_size, %struct.args_size* %10, i32 0, i32 0
  store i64 0, i64* %constant6, align 8
  %11 = load i32, i32* %boundary.addr, align 4
  %cmp7 = icmp sgt i32 %11, 8
  br i1 %cmp7, label %if.then.8, label %if.end.61

if.then.8:                                        ; preds = %if.end
  %12 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var9 = getelementptr inbounds %struct.args_size, %struct.args_size* %12, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %var9, align 8
  %tobool10 = icmp ne %union.tree_node* %13, null
  br i1 %tobool10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %if.then.8
  %14 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var12 = getelementptr inbounds %struct.args_size, %struct.args_size* %14, i32 0, i32 1
  %15 = load %union.tree_node*, %union.tree_node** %var12, align 8
  %cmp13 = icmp eq %union.tree_node* %15, null
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.11
  %16 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant14 = getelementptr inbounds %struct.args_size, %struct.args_size* %16, i32 0, i32 0
  %17 = load i64, i64* %constant14, align 8
  %call = call %union.tree_node* @size_int_wide(i64 %17, i32 1)
  br label %cond.end

cond.false:                                       ; preds = %if.then.11
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %19 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var15 = getelementptr inbounds %struct.args_size, %struct.args_size* %19, i32 0, i32 1
  %20 = load %union.tree_node*, %union.tree_node** %var15, align 8
  %call16 = call %union.tree_node* @convert(%union.tree_node* %18, %union.tree_node* %20)
  %21 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant17 = getelementptr inbounds %struct.args_size, %struct.args_size* %21, i32 0, i32 0
  %22 = load i64, i64* %constant17, align 8
  %call18 = call %union.tree_node* @size_int_wide(i64 %22, i32 1)
  %call19 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call16, %union.tree_node* %call18)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond20 = phi %union.tree_node* [ %call, %cond.true ], [ %call19, %cond.false ]
  %23 = load i32, i32* %boundary.addr, align 4
  %div21 = sdiv i32 %23, 8
  %call22 = call %union.tree_node* @round_up(%union.tree_node* %cond20, i32 %div21)
  %24 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var23 = getelementptr inbounds %struct.args_size, %struct.args_size* %24, i32 0, i32 1
  store %union.tree_node* %call22, %union.tree_node** %var23, align 8
  %25 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant24 = getelementptr inbounds %struct.args_size, %struct.args_size* %25, i32 0, i32 0
  store i64 0, i64* %constant24, align 8
  %26 = load i32, i32* %boundary.addr, align 4
  %27 = load i32, i32* @target_flags, align 4
  %and25 = and i32 %27, 33554432
  %tobool26 = icmp ne i32 %and25, 0
  %cond27 = select i1 %tobool26, i32 64, i32 32
  %cmp28 = icmp sgt i32 %26, %cond27
  br i1 %cmp28, label %land.lhs.true.29, label %if.end.38

land.lhs.true.29:                                 ; preds = %cond.end
  %28 = load i32, i32* %boundary.addr, align 4
  %29 = load i32, i32* @target_flags, align 4
  %and30 = and i32 %29, 33554432
  %tobool31 = icmp ne i32 %and30, 0
  %cond32 = select i1 %tobool31, i32 64, i32 32
  %cmp33 = icmp sgt i32 %28, %cond32
  br i1 %cmp33, label %if.then.34, label %if.end.38

if.then.34:                                       ; preds = %land.lhs.true.29
  %30 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var35 = getelementptr inbounds %struct.args_size, %struct.args_size* %30, i32 0, i32 1
  %31 = load %union.tree_node*, %union.tree_node** %var35, align 8
  %32 = load %union.tree_node*, %union.tree_node** %save_var, align 8
  %call36 = call %union.tree_node* @size_binop(i32 60, %union.tree_node* %31, %union.tree_node* %32)
  %33 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8
  %var37 = getelementptr inbounds %struct.args_size, %struct.args_size* %33, i32 0, i32 1
  store %union.tree_node* %call36, %union.tree_node** %var37, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.34, %land.lhs.true.29, %cond.end
  br label %if.end.60

if.else:                                          ; preds = %if.then.8
  %34 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant39 = getelementptr inbounds %struct.args_size, %struct.args_size* %34, i32 0, i32 0
  %35 = load i64, i64* %constant39, align 8
  %36 = load i32, i32* %boundary_in_bytes, align 4
  %conv = sext i32 %36 to i64
  %add = add nsw i64 %35, %conv
  %sub = sub nsw i64 %add, 1
  %37 = load i32, i32* %boundary_in_bytes, align 4
  %sub40 = sub nsw i32 %37, 1
  %neg = xor i32 %sub40, -1
  %conv41 = sext i32 %neg to i64
  %and42 = and i64 %sub, %conv41
  %38 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant43 = getelementptr inbounds %struct.args_size, %struct.args_size* %38, i32 0, i32 0
  store i64 %and42, i64* %constant43, align 8
  %39 = load i32, i32* %boundary.addr, align 4
  %40 = load i32, i32* @target_flags, align 4
  %and44 = and i32 %40, 33554432
  %tobool45 = icmp ne i32 %and44, 0
  %cond46 = select i1 %tobool45, i32 64, i32 32
  %cmp47 = icmp sgt i32 %39, %cond46
  br i1 %cmp47, label %land.lhs.true.49, label %if.end.59

land.lhs.true.49:                                 ; preds = %if.else
  %41 = load i32, i32* %boundary.addr, align 4
  %42 = load i32, i32* @target_flags, align 4
  %and50 = and i32 %42, 33554432
  %tobool51 = icmp ne i32 %and50, 0
  %cond52 = select i1 %tobool51, i32 64, i32 32
  %cmp53 = icmp sgt i32 %41, %cond52
  br i1 %cmp53, label %if.then.55, label %if.end.59

if.then.55:                                       ; preds = %land.lhs.true.49
  %43 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant56 = getelementptr inbounds %struct.args_size, %struct.args_size* %43, i32 0, i32 0
  %44 = load i64, i64* %constant56, align 8
  %45 = load i64, i64* %save_constant, align 8
  %sub57 = sub nsw i64 %44, %45
  %46 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8
  %constant58 = getelementptr inbounds %struct.args_size, %struct.args_size* %46, i32 0, i32 0
  store i64 %sub57, i64* %constant58, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.55, %land.lhs.true.49, %if.else
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.end.38
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @pad_below(%struct.args_size* %offset_ptr, i32 %passed_mode, %union.tree_node* %sizetree) #0 {
entry:
  %offset_ptr.addr = alloca %struct.args_size*, align 8
  %passed_mode.addr = alloca i32, align 4
  %sizetree.addr = alloca %union.tree_node*, align 8
  %s2 = alloca %union.tree_node*, align 8
  %inc = alloca %union.tree_node*, align 8
  %dec = alloca %union.tree_node*, align 8
  store %struct.args_size* %offset_ptr, %struct.args_size** %offset_ptr.addr, align 8
  store i32 %passed_mode, i32* %passed_mode.addr, align 4
  store %union.tree_node* %sizetree, %union.tree_node** %sizetree.addr, align 8
  %0 = load i32, i32* %passed_mode.addr, align 4
  %cmp = icmp ne i32 %0, 51
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %passed_mode.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %2 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %2 to i32
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %rem = srem i32 %conv, %cond
  %tobool1 = icmp ne i32 %rem, 0
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %4 = load i32, i32* %passed_mode.addr, align 4
  %idxprom3 = sext i32 %4 to i64
  %arrayidx4 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom3
  %5 = load i16, i16* %arrayidx4, align 2
  %conv5 = zext i16 %5 to i32
  %6 = load i32, i32* @target_flags, align 4
  %and6 = and i32 %6, 33554432
  %tobool7 = icmp ne i32 %and6, 0
  %cond8 = select i1 %tobool7, i32 64, i32 32
  %add = add nsw i32 %conv5, %cond8
  %sub = sub nsw i32 %add, 1
  %7 = load i32, i32* @target_flags, align 4
  %and9 = and i32 %7, 33554432
  %tobool10 = icmp ne i32 %and9, 0
  %cond11 = select i1 %tobool10, i32 64, i32 32
  %div = sdiv i32 %sub, %cond11
  %8 = load i32, i32* @target_flags, align 4
  %and12 = and i32 %8, 33554432
  %tobool13 = icmp ne i32 %and12, 0
  %cond14 = select i1 %tobool13, i32 64, i32 32
  %mul = mul nsw i32 %div, %cond14
  %div15 = sdiv i32 %mul, 8
  %9 = load i32, i32* %passed_mode.addr, align 4
  %idxprom16 = sext i32 %9 to i64
  %arrayidx17 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom16
  %10 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %10 to i32
  %sub19 = sub nsw i32 %div15, %conv18
  %conv20 = sext i32 %sub19 to i64
  %11 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %11, i32 0, i32 0
  %12 = load i64, i64* %constant, align 8
  %add21 = add nsw i64 %12, %conv20
  store i64 %add21, i64* %constant, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  br label %if.end.81

if.else:                                          ; preds = %entry
  %13 = load %union.tree_node*, %union.tree_node** %sizetree.addr, align 8
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp22 = icmp ne i32 %bf.clear, 25
  br i1 %cmp22, label %if.then.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %14 = load %union.tree_node*, %union.tree_node** %sizetree.addr, align 8
  %int_cst = bitcast %union.tree_node* %14 to %struct.tree_int_cst*
  %int_cst24 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 2
  %low = getelementptr inbounds %struct.anon, %struct.anon* %int_cst24, i32 0, i32 0
  %15 = load i64, i64* %low, align 8
  %mul25 = mul i64 %15, 8
  %16 = load i32, i32* @target_flags, align 4
  %and26 = and i32 %16, 33554432
  %tobool27 = icmp ne i32 %and26, 0
  %cond28 = select i1 %tobool27, i32 64, i32 32
  %conv29 = sext i32 %cond28 to i64
  %rem30 = urem i64 %mul25, %conv29
  %tobool31 = icmp ne i64 %rem30, 0
  br i1 %tobool31, label %if.then.32, label %if.end.80

if.then.32:                                       ; preds = %lor.lhs.false, %if.else
  %17 = load %union.tree_node*, %union.tree_node** %sizetree.addr, align 8
  %18 = load i32, i32* @target_flags, align 4
  %and33 = and i32 %18, 33554432
  %tobool34 = icmp ne i32 %and33, 0
  %cond35 = select i1 %tobool34, i32 64, i32 32
  %div36 = sdiv i32 %cond35, 8
  %call = call %union.tree_node* @round_up(%union.tree_node* %17, i32 %div36)
  store %union.tree_node* %call, %union.tree_node** %s2, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.32
  %19 = load %union.tree_node*, %union.tree_node** %s2, align 8
  store %union.tree_node* %19, %union.tree_node** %inc, align 8
  %20 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call37 = call i32 @host_integerp(%union.tree_node* %20, i32 0)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then.39, label %if.else.43

if.then.39:                                       ; preds = %do.body
  %21 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call40 = call i64 @tree_low_cst(%union.tree_node* %21, i32 0)
  %22 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant41 = getelementptr inbounds %struct.args_size, %struct.args_size* %22, i32 0, i32 0
  %23 = load i64, i64* %constant41, align 8
  %add42 = add nsw i64 %23, %call40
  store i64 %add42, i64* %constant41, align 8
  br label %if.end.55

if.else.43:                                       ; preds = %do.body
  %24 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %24, i32 0, i32 1
  %25 = load %union.tree_node*, %union.tree_node** %var, align 8
  %cmp44 = icmp eq %union.tree_node* %25, null
  br i1 %cmp44, label %if.then.46, label %if.else.49

if.then.46:                                       ; preds = %if.else.43
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %27 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call47 = call %union.tree_node* @convert(%union.tree_node* %26, %union.tree_node* %27)
  %28 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var48 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1
  store %union.tree_node* %call47, %union.tree_node** %var48, align 8
  br label %if.end.54

if.else.49:                                       ; preds = %if.else.43
  %29 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var50 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 1
  %30 = load %union.tree_node*, %union.tree_node** %var50, align 8
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %32 = load %union.tree_node*, %union.tree_node** %inc, align 8
  %call51 = call %union.tree_node* @convert(%union.tree_node* %31, %union.tree_node* %32)
  %call52 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %30, %union.tree_node* %call51)
  %33 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var53 = getelementptr inbounds %struct.args_size, %struct.args_size* %33, i32 0, i32 1
  store %union.tree_node* %call52, %union.tree_node** %var53, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.49, %if.then.46
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then.39
  br label %do.end

do.end:                                           ; preds = %if.end.55
  br label %do.body.56

do.body.56:                                       ; preds = %do.end
  %34 = load %union.tree_node*, %union.tree_node** %sizetree.addr, align 8
  store %union.tree_node* %34, %union.tree_node** %dec, align 8
  %35 = load %union.tree_node*, %union.tree_node** %dec, align 8
  %call57 = call i32 @host_integerp(%union.tree_node* %35, i32 0)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.then.59, label %if.else.63

if.then.59:                                       ; preds = %do.body.56
  %36 = load %union.tree_node*, %union.tree_node** %dec, align 8
  %call60 = call i64 @tree_low_cst(%union.tree_node* %36, i32 0)
  %37 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %constant61 = getelementptr inbounds %struct.args_size, %struct.args_size* %37, i32 0, i32 0
  %38 = load i64, i64* %constant61, align 8
  %sub62 = sub nsw i64 %38, %call60
  store i64 %sub62, i64* %constant61, align 8
  br label %if.end.78

if.else.63:                                       ; preds = %do.body.56
  %39 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var64 = getelementptr inbounds %struct.args_size, %struct.args_size* %39, i32 0, i32 1
  %40 = load %union.tree_node*, %union.tree_node** %var64, align 8
  %cmp65 = icmp eq %union.tree_node* %40, null
  br i1 %cmp65, label %if.then.67, label %if.else.72

if.then.67:                                       ; preds = %if.else.63
  %call68 = call %union.tree_node* @size_int_wide(i64 0, i32 1)
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %42 = load %union.tree_node*, %union.tree_node** %dec, align 8
  %call69 = call %union.tree_node* @convert(%union.tree_node* %41, %union.tree_node* %42)
  %call70 = call %union.tree_node* @size_binop(i32 60, %union.tree_node* %call68, %union.tree_node* %call69)
  %43 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var71 = getelementptr inbounds %struct.args_size, %struct.args_size* %43, i32 0, i32 1
  store %union.tree_node* %call70, %union.tree_node** %var71, align 8
  br label %if.end.77

if.else.72:                                       ; preds = %if.else.63
  %44 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var73 = getelementptr inbounds %struct.args_size, %struct.args_size* %44, i32 0, i32 1
  %45 = load %union.tree_node*, %union.tree_node** %var73, align 8
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*], [6 x %union.tree_node*]* @sizetype_tab, i32 0, i64 1), align 8
  %47 = load %union.tree_node*, %union.tree_node** %dec, align 8
  %call74 = call %union.tree_node* @convert(%union.tree_node* %46, %union.tree_node* %47)
  %call75 = call %union.tree_node* @size_binop(i32 60, %union.tree_node* %45, %union.tree_node* %call74)
  %48 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8
  %var76 = getelementptr inbounds %struct.args_size, %struct.args_size* %48, i32 0, i32 1
  store %union.tree_node* %call75, %union.tree_node** %var76, align 8
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.72, %if.then.67
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.then.59
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  br label %if.end.80

if.end.80:                                        ; preds = %do.end.79, %lor.lhs.false
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %if.end
  ret void
}

declare %union.tree_node* @round_up(%union.tree_node*, i32) #2

; Function Attrs: nounwind uwtable
define void @uninitialized_vars_warning(%union.tree_node* %block) #0 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %sub = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8
  store %union.tree_node* %1, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* @warn_uninitialized, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common5 = bitcast %union.tree_node* %6 to %struct.tree_common*
  %code6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2
  %bf.load7 = load i32, i32* %code6, align 8
  %bf.clear8 = and i32 %bf.load7, 255
  %cmp9 = icmp eq i32 %bf.clear8, 18
  br i1 %cmp9, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.3
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common10 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1
  %8 = load %union.tree_node*, %union.tree_node** %type11, align 8
  %common12 = bitcast %union.tree_node* %8 to %struct.tree_common*
  %code13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2
  %bf.load14 = load i32, i32* %code13, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %cmp16 = icmp eq i32 %bf.clear15, 20
  br i1 %cmp16, label %if.end, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common18 = bitcast %union.tree_node* %9 to %struct.tree_common*
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 1
  %10 = load %union.tree_node*, %union.tree_node** %type19, align 8
  %common20 = bitcast %union.tree_node* %10 to %struct.tree_common*
  %code21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2
  %bf.load22 = load i32, i32* %code21, align 8
  %bf.clear23 = and i32 %bf.load22, 255
  %cmp24 = icmp eq i32 %bf.clear23, 21
  br i1 %cmp24, label %if.end, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.17
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common26 = bitcast %union.tree_node* %11 to %struct.tree_common*
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 1
  %12 = load %union.tree_node*, %union.tree_node** %type27, align 8
  %common28 = bitcast %union.tree_node* %12 to %struct.tree_common*
  %code29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2
  %bf.load30 = load i32, i32* %code29, align 8
  %bf.clear31 = and i32 %bf.load30, 255
  %cmp32 = icmp eq i32 %bf.clear31, 22
  br i1 %cmp32, label %if.end, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.25
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common34 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %type35, align 8
  %common36 = bitcast %union.tree_node* %14 to %struct.tree_common*
  %code37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2
  %bf.load38 = load i32, i32* %code37, align 8
  %bf.clear39 = and i32 %bf.load38, 255
  %cmp40 = icmp eq i32 %bf.clear39, 19
  br i1 %cmp40, label %if.end, label %land.lhs.true.41

land.lhs.true.41:                                 ; preds = %lor.lhs.false.33
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl42 = bitcast %union.tree_node* %15 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl42, i32 0, i32 17
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool43 = icmp ne %struct.rtx_def* %16, null
  br i1 %tobool43, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.41
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl44 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %rtl45 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl44, i32 0, i32 17
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl45, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.41
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %19, i8* null)
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl46 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %rtl47 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl46, i32 0, i32 17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl47, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %18, %cond.true ], [ %21, %cond.false ]
  %cmp48 = icmp ne %struct.rtx_def* %cond, null
  br i1 %cmp48, label %land.lhs.true.49, label %if.end

land.lhs.true.49:                                 ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl50 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %rtl51 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl50, i32 0, i32 17
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl51, align 8
  %tobool52 = icmp ne %struct.rtx_def* %23, null
  br i1 %tobool52, label %cond.true.53, label %cond.false.56

cond.true.53:                                     ; preds = %land.lhs.true.49
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl54 = bitcast %union.tree_node* %24 to %struct.tree_decl*
  %rtl55 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl54, i32 0, i32 17
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtl55, align 8
  br label %cond.end.59

cond.false.56:                                    ; preds = %land.lhs.true.49
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %26, i8* null)
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl57 = bitcast %union.tree_node* %27 to %struct.tree_decl*
  %rtl58 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl57, i32 0, i32 17
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtl58, align 8
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.56, %cond.true.53
  %cond60 = phi %struct.rtx_def* [ %25, %cond.true.53 ], [ %28, %cond.false.56 ]
  %29 = bitcast %struct.rtx_def* %cond60 to i32*
  %bf.load61 = load i32, i32* %29, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  %cmp63 = icmp eq i32 %bf.clear62, 61
  br i1 %cmp63, label %land.lhs.true.64, label %if.end

land.lhs.true.64:                                 ; preds = %cond.end.59
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl65 = bitcast %union.tree_node* %30 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl65, i32 0, i32 12
  %31 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %cmp66 = icmp eq %union.tree_node* %31, null
  br i1 %cmp66, label %land.lhs.true.67, label %if.end

land.lhs.true.67:                                 ; preds = %land.lhs.true.64
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl68 = bitcast %union.tree_node* %32 to %struct.tree_decl*
  %rtl69 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl68, i32 0, i32 17
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtl69, align 8
  %tobool70 = icmp ne %struct.rtx_def* %33, null
  br i1 %tobool70, label %cond.true.71, label %cond.false.74

cond.true.71:                                     ; preds = %land.lhs.true.67
  %34 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl72 = bitcast %union.tree_node* %34 to %struct.tree_decl*
  %rtl73 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl72, i32 0, i32 17
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtl73, align 8
  br label %cond.end.77

cond.false.74:                                    ; preds = %land.lhs.true.67
  %36 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %36, i8* null)
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl75 = bitcast %union.tree_node* %37 to %struct.tree_decl*
  %rtl76 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl75, i32 0, i32 17
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl76, align 8
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.74, %cond.true.71
  %cond78 = phi %struct.rtx_def* [ %35, %cond.true.71 ], [ %38, %cond.false.74 ]
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond78, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %39 = load i32, i32* %rtuint, align 4
  %call = call i32 @regno_uninitialized(i32 %39)
  %tobool79 = icmp ne i32 %call, 0
  br i1 %tobool79, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.77
  %40 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void (%union.tree_node*, i8*, ...) @warning_with_decl(%union.tree_node* %40, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.77, %land.lhs.true.64, %cond.end.59, %cond.end, %lor.lhs.false.33, %lor.lhs.false.25, %lor.lhs.false.17, %lor.lhs.false, %land.lhs.true.3, %land.lhs.true, %for.body
  %41 = load i32, i32* @extra_warnings, align 4
  %tobool80 = icmp ne i32 %41, 0
  br i1 %tobool80, label %land.lhs.true.81, label %if.end.133

land.lhs.true.81:                                 ; preds = %if.end
  %42 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common82 = bitcast %union.tree_node* %42 to %struct.tree_common*
  %code83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2
  %bf.load84 = load i32, i32* %code83, align 8
  %bf.clear85 = and i32 %bf.load84, 255
  %cmp86 = icmp eq i32 %bf.clear85, 34
  br i1 %cmp86, label %land.lhs.true.87, label %if.end.133

land.lhs.true.87:                                 ; preds = %land.lhs.true.81
  %43 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl88 = bitcast %union.tree_node* %43 to %struct.tree_decl*
  %rtl89 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl88, i32 0, i32 17
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtl89, align 8
  %tobool90 = icmp ne %struct.rtx_def* %44, null
  br i1 %tobool90, label %cond.true.91, label %cond.false.94

cond.true.91:                                     ; preds = %land.lhs.true.87
  %45 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl92 = bitcast %union.tree_node* %45 to %struct.tree_decl*
  %rtl93 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl92, i32 0, i32 17
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtl93, align 8
  br label %cond.end.97

cond.false.94:                                    ; preds = %land.lhs.true.87
  %47 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %47, i8* null)
  %48 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl95 = bitcast %union.tree_node* %48 to %struct.tree_decl*
  %rtl96 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl95, i32 0, i32 17
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtl96, align 8
  br label %cond.end.97

cond.end.97:                                      ; preds = %cond.false.94, %cond.true.91
  %cond98 = phi %struct.rtx_def* [ %46, %cond.true.91 ], [ %49, %cond.false.94 ]
  %cmp99 = icmp ne %struct.rtx_def* %cond98, null
  br i1 %cmp99, label %land.lhs.true.100, label %if.end.133

land.lhs.true.100:                                ; preds = %cond.end.97
  %50 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl101 = bitcast %union.tree_node* %50 to %struct.tree_decl*
  %rtl102 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl101, i32 0, i32 17
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtl102, align 8
  %tobool103 = icmp ne %struct.rtx_def* %51, null
  br i1 %tobool103, label %cond.true.104, label %cond.false.107

cond.true.104:                                    ; preds = %land.lhs.true.100
  %52 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl105 = bitcast %union.tree_node* %52 to %struct.tree_decl*
  %rtl106 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl105, i32 0, i32 17
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl106, align 8
  br label %cond.end.110

cond.false.107:                                   ; preds = %land.lhs.true.100
  %54 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %54, i8* null)
  %55 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl108 = bitcast %union.tree_node* %55 to %struct.tree_decl*
  %rtl109 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl108, i32 0, i32 17
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtl109, align 8
  br label %cond.end.110

cond.end.110:                                     ; preds = %cond.false.107, %cond.true.104
  %cond111 = phi %struct.rtx_def* [ %53, %cond.true.104 ], [ %56, %cond.false.107 ]
  %57 = bitcast %struct.rtx_def* %cond111 to i32*
  %bf.load112 = load i32, i32* %57, align 8
  %bf.clear113 = and i32 %bf.load112, 65535
  %cmp114 = icmp eq i32 %bf.clear113, 61
  br i1 %cmp114, label %land.lhs.true.115, label %if.end.133

land.lhs.true.115:                                ; preds = %cond.end.110
  %58 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl116 = bitcast %union.tree_node* %58 to %struct.tree_decl*
  %rtl117 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl116, i32 0, i32 17
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtl117, align 8
  %tobool118 = icmp ne %struct.rtx_def* %59, null
  br i1 %tobool118, label %cond.true.119, label %cond.false.122

cond.true.119:                                    ; preds = %land.lhs.true.115
  %60 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl120 = bitcast %union.tree_node* %60 to %struct.tree_decl*
  %rtl121 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl120, i32 0, i32 17
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtl121, align 8
  br label %cond.end.125

cond.false.122:                                   ; preds = %land.lhs.true.115
  %62 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %62, i8* null)
  %63 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl123 = bitcast %union.tree_node* %63 to %struct.tree_decl*
  %rtl124 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl123, i32 0, i32 17
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtl124, align 8
  br label %cond.end.125

cond.end.125:                                     ; preds = %cond.false.122, %cond.true.119
  %cond126 = phi %struct.rtx_def* [ %61, %cond.true.119 ], [ %64, %cond.false.122 ]
  %fld127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond126, i32 0, i32 1
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i32 0, i64 0
  %rtuint129 = bitcast %union.rtunion_def* %arrayidx128 to i32*
  %65 = load i32, i32* %rtuint129, align 4
  %call130 = call i32 @regno_clobbered_at_setjmp(i32 %65)
  %tobool131 = icmp ne i32 %call130, 0
  br i1 %tobool131, label %if.then.132, label %if.end.133

if.then.132:                                      ; preds = %cond.end.125
  %66 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void (%union.tree_node*, i8*, ...) @warning_with_decl(%union.tree_node* %66, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.132, %cond.end.125, %cond.end.110, %cond.end.97, %land.lhs.true.81, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.133
  %67 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common134 = bitcast %union.tree_node* %67 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 0
  %68 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %68, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %69 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block135 = bitcast %union.tree_node* %69 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block135, i32 0, i32 3
  %70 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  store %union.tree_node* %70, %union.tree_node** %sub, align 8
  br label %for.cond.136

for.cond.136:                                     ; preds = %for.inc.139, %for.end
  %71 = load %union.tree_node*, %union.tree_node** %sub, align 8
  %tobool137 = icmp ne %union.tree_node* %71, null
  br i1 %tobool137, label %for.body.138, label %for.end.142

for.body.138:                                     ; preds = %for.cond.136
  %72 = load %union.tree_node*, %union.tree_node** %sub, align 8
  call void @uninitialized_vars_warning(%union.tree_node* %72)
  br label %for.inc.139

for.inc.139:                                      ; preds = %for.body.138
  %73 = load %union.tree_node*, %union.tree_node** %sub, align 8
  %common140 = bitcast %union.tree_node* %73 to %struct.tree_common*
  %chain141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 0
  %74 = load %union.tree_node*, %union.tree_node** %chain141, align 8
  store %union.tree_node* %74, %union.tree_node** %sub, align 8
  br label %for.cond.136

for.end.142:                                      ; preds = %for.cond.136
  ret void
}

declare i32 @regno_uninitialized(i32) #2

declare void @warning_with_decl(%union.tree_node*, i8*, ...) #2

declare i32 @regno_clobbered_at_setjmp(i32) #2

; Function Attrs: nounwind uwtable
define void @setjmp_args_warning() #0 {
entry:
  %decl = alloca %union.tree_node*, align 8
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 10
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %1, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl2 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 17
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool3 = icmp ne %struct.rtx_def* %4, null
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl4 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %rtl5 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl4, i32 0, i32 17
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %7, i8* null)
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl6 = bitcast %union.tree_node* %8 to %struct.tree_decl*
  %rtl7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 17
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %6, %cond.true ], [ %9, %cond.false ]
  %cmp = icmp ne %struct.rtx_def* %cond, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl8 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %rtl9 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 17
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8
  %tobool10 = icmp ne %struct.rtx_def* %11, null
  br i1 %tobool10, label %cond.true.11, label %cond.false.14

cond.true.11:                                     ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl12 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %rtl13 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl12, i32 0, i32 17
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl13, align 8
  br label %cond.end.17

cond.false.14:                                    ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %14, i8* null)
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl15 = bitcast %union.tree_node* %15 to %struct.tree_decl*
  %rtl16 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl15, i32 0, i32 17
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl16, align 8
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.false.14, %cond.true.11
  %cond18 = phi %struct.rtx_def* [ %13, %cond.true.11 ], [ %16, %cond.false.14 ]
  %17 = bitcast %struct.rtx_def* %cond18 to i32*
  %bf.load = load i32, i32* %17, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp19 = icmp eq i32 %bf.clear, 61
  br i1 %cmp19, label %land.lhs.true.20, label %if.end

land.lhs.true.20:                                 ; preds = %cond.end.17
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl21 = bitcast %union.tree_node* %18 to %struct.tree_decl*
  %rtl22 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl21, i32 0, i32 17
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl22, align 8
  %tobool23 = icmp ne %struct.rtx_def* %19, null
  br i1 %tobool23, label %cond.true.24, label %cond.false.27

cond.true.24:                                     ; preds = %land.lhs.true.20
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl25 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %rtl26 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl25, i32 0, i32 17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl26, align 8
  br label %cond.end.30

cond.false.27:                                    ; preds = %land.lhs.true.20
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %22, i8* null)
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl28 = bitcast %union.tree_node* %23 to %struct.tree_decl*
  %rtl29 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl28, i32 0, i32 17
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl29, align 8
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.27, %cond.true.24
  %cond31 = phi %struct.rtx_def* [ %21, %cond.true.24 ], [ %24, %cond.false.27 ]
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond31, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %25 = load i32, i32* %rtuint, align 4
  %call = call i32 @regno_clobbered_at_setjmp(i32 %25)
  %tobool32 = icmp ne i32 %call, 0
  br i1 %tobool32, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.30
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void (%union.tree_node*, i8*, ...) @warning_with_decl(%union.tree_node* %26, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.30, %cond.end.17, %cond.end
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %28 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %28, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @setjmp_protect(%union.tree_node* %block) #0 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %sub = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8
  store %union.tree_node* %1, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load4 = load i32, i32* %code3, align 8
  %bf.clear5 = and i32 %bf.load4, 255
  %cmp6 = icmp eq i32 %bf.clear5, 35
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %for.body
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl7 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 17
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool8 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl9 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %rtl10 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl9, i32 0, i32 17
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %9, i8* null)
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl11 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %rtl12 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl11, i32 0, i32 17
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl12, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ %11, %cond.false ]
  %cmp13 = icmp ne %struct.rtx_def* %cond, null
  br i1 %cmp13, label %land.lhs.true.14, label %if.end

land.lhs.true.14:                                 ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl15 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %rtl16 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl15, i32 0, i32 17
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl16, align 8
  %tobool17 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool17, label %cond.true.18, label %cond.false.21

cond.true.18:                                     ; preds = %land.lhs.true.14
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl19 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %rtl20 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl19, i32 0, i32 17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl20, align 8
  br label %cond.end.24

cond.false.21:                                    ; preds = %land.lhs.true.14
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %16, i8* null)
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl22 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %rtl23 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl22, i32 0, i32 17
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl23, align 8
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.21, %cond.true.18
  %cond25 = phi %struct.rtx_def* [ %15, %cond.true.18 ], [ %18, %cond.false.21 ]
  %19 = bitcast %struct.rtx_def* %cond25 to i32*
  %bf.load26 = load i32, i32* %19, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 61
  br i1 %cmp28, label %land.lhs.true.59, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %cond.end.24
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl30 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %rtl31 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl30, i32 0, i32 17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl31, align 8
  %tobool32 = icmp ne %struct.rtx_def* %21, null
  br i1 %tobool32, label %cond.true.33, label %cond.false.36

cond.true.33:                                     ; preds = %lor.lhs.false.29
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl34 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %rtl35 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl34, i32 0, i32 17
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl35, align 8
  br label %cond.end.39

cond.false.36:                                    ; preds = %lor.lhs.false.29
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %24, i8* null)
  %25 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl37 = bitcast %union.tree_node* %25 to %struct.tree_decl*
  %rtl38 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl37, i32 0, i32 17
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl38, align 8
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.36, %cond.true.33
  %cond40 = phi %struct.rtx_def* [ %23, %cond.true.33 ], [ %26, %cond.false.36 ]
  %27 = bitcast %struct.rtx_def* %cond40 to i32*
  %bf.load41 = load i32, i32* %27, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 66
  br i1 %cmp43, label %land.lhs.true.44, label %if.end

land.lhs.true.44:                                 ; preds = %cond.end.39
  %28 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl45 = bitcast %union.tree_node* %28 to %struct.tree_decl*
  %rtl46 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl45, i32 0, i32 17
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl46, align 8
  %tobool47 = icmp ne %struct.rtx_def* %29, null
  br i1 %tobool47, label %cond.true.48, label %cond.false.51

cond.true.48:                                     ; preds = %land.lhs.true.44
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl49 = bitcast %union.tree_node* %30 to %struct.tree_decl*
  %rtl50 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl49, i32 0, i32 17
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl50, align 8
  br label %cond.end.54

cond.false.51:                                    ; preds = %land.lhs.true.44
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %32, i8* null)
  %33 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl52 = bitcast %union.tree_node* %33 to %struct.tree_decl*
  %rtl53 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl52, i32 0, i32 17
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtl53, align 8
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.false.51, %cond.true.48
  %cond55 = phi %struct.rtx_def* [ %31, %cond.true.48 ], [ %34, %cond.false.51 ]
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond55, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load56 = load i32, i32* %36, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 70
  br i1 %cmp58, label %land.lhs.true.59, label %if.end

land.lhs.true.59:                                 ; preds = %cond.end.54, %cond.end.24
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl60 = bitcast %union.tree_node* %37 to %struct.tree_decl*
  %abstract_origin = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl60, i32 0, i32 13
  %38 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8
  %cmp61 = icmp ne %union.tree_node* %38, null
  br i1 %cmp61, label %land.lhs.true.62, label %land.lhs.true.66

land.lhs.true.62:                                 ; preds = %land.lhs.true.59
  %39 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl63 = bitcast %union.tree_node* %39 to %struct.tree_decl*
  %abstract_origin64 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl63, i32 0, i32 13
  %40 = load %union.tree_node*, %union.tree_node** %abstract_origin64, align 8
  %41 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %cmp65 = icmp ne %union.tree_node* %40, %41
  br i1 %cmp65, label %if.end, label %land.lhs.true.66

land.lhs.true.66:                                 ; preds = %land.lhs.true.62, %land.lhs.true.59
  %42 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl67 = bitcast %union.tree_node* %42 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl67, i32 0, i32 5
  %43 = bitcast i48* %regdecl_flag to i64*
  %bf.load68 = load i64, i64* %43, align 8
  %bf.lshr = lshr i64 %bf.load68, 10
  %bf.clear69 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear69 to i32
  %tobool70 = icmp ne i32 %bf.cast, 0
  br i1 %tobool70, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.66
  %44 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @put_var_into_stack(%union.tree_node* %44)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.66, %land.lhs.true.62, %cond.end.54, %cond.end.39, %cond.end, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %45 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common71 = bitcast %union.tree_node* %45 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common71, i32 0, i32 0
  %46 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %46, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %47 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block72 = bitcast %union.tree_node* %47 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block72, i32 0, i32 3
  %48 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  store %union.tree_node* %48, %union.tree_node** %sub, align 8
  br label %for.cond.73

for.cond.73:                                      ; preds = %for.inc.76, %for.end
  %49 = load %union.tree_node*, %union.tree_node** %sub, align 8
  %tobool74 = icmp ne %union.tree_node* %49, null
  br i1 %tobool74, label %for.body.75, label %for.end.79

for.body.75:                                      ; preds = %for.cond.73
  %50 = load %union.tree_node*, %union.tree_node** %sub, align 8
  call void @setjmp_protect(%union.tree_node* %50)
  br label %for.inc.76

for.inc.76:                                       ; preds = %for.body.75
  %51 = load %union.tree_node*, %union.tree_node** %sub, align 8
  %common77 = bitcast %union.tree_node* %51 to %struct.tree_common*
  %chain78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 0
  %52 = load %union.tree_node*, %union.tree_node** %chain78, align 8
  store %union.tree_node* %52, %union.tree_node** %sub, align 8
  br label %for.cond.73

for.end.79:                                       ; preds = %for.cond.73
  ret void
}

; Function Attrs: nounwind uwtable
define void @setjmp_protect_args() #0 {
entry:
  %decl = alloca %union.tree_node*, align 8
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl1 = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 10
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %1, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %code3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2
  %bf.load4 = load i32, i32* %code3, align 8
  %bf.clear5 = and i32 %bf.load4, 255
  %cmp6 = icmp eq i32 %bf.clear5, 35
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %for.body
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl7 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl7, i32 0, i32 17
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool8 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl9 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %rtl10 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl9, i32 0, i32 17
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %9, i8* null)
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl11 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %rtl12 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl11, i32 0, i32 17
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl12, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ %11, %cond.false ]
  %cmp13 = icmp ne %struct.rtx_def* %cond, null
  br i1 %cmp13, label %land.lhs.true.14, label %if.end

land.lhs.true.14:                                 ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl15 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %rtl16 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl15, i32 0, i32 17
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl16, align 8
  %tobool17 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool17, label %cond.true.18, label %cond.false.21

cond.true.18:                                     ; preds = %land.lhs.true.14
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl19 = bitcast %union.tree_node* %14 to %struct.tree_decl*
  %rtl20 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl19, i32 0, i32 17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl20, align 8
  br label %cond.end.24

cond.false.21:                                    ; preds = %land.lhs.true.14
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %16, i8* null)
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl22 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %rtl23 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl22, i32 0, i32 17
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl23, align 8
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.21, %cond.true.18
  %cond25 = phi %struct.rtx_def* [ %15, %cond.true.18 ], [ %18, %cond.false.21 ]
  %19 = bitcast %struct.rtx_def* %cond25 to i32*
  %bf.load26 = load i32, i32* %19, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 61
  br i1 %cmp28, label %land.lhs.true.59, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %cond.end.24
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl30 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %rtl31 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl30, i32 0, i32 17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl31, align 8
  %tobool32 = icmp ne %struct.rtx_def* %21, null
  br i1 %tobool32, label %cond.true.33, label %cond.false.36

cond.true.33:                                     ; preds = %lor.lhs.false.29
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl34 = bitcast %union.tree_node* %22 to %struct.tree_decl*
  %rtl35 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl34, i32 0, i32 17
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl35, align 8
  br label %cond.end.39

cond.false.36:                                    ; preds = %lor.lhs.false.29
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %24, i8* null)
  %25 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl37 = bitcast %union.tree_node* %25 to %struct.tree_decl*
  %rtl38 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl37, i32 0, i32 17
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl38, align 8
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.36, %cond.true.33
  %cond40 = phi %struct.rtx_def* [ %23, %cond.true.33 ], [ %26, %cond.false.36 ]
  %27 = bitcast %struct.rtx_def* %cond40 to i32*
  %bf.load41 = load i32, i32* %27, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 66
  br i1 %cmp43, label %land.lhs.true.44, label %if.end

land.lhs.true.44:                                 ; preds = %cond.end.39
  %28 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl45 = bitcast %union.tree_node* %28 to %struct.tree_decl*
  %rtl46 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl45, i32 0, i32 17
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl46, align 8
  %tobool47 = icmp ne %struct.rtx_def* %29, null
  br i1 %tobool47, label %cond.true.48, label %cond.false.51

cond.true.48:                                     ; preds = %land.lhs.true.44
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl49 = bitcast %union.tree_node* %30 to %struct.tree_decl*
  %rtl50 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl49, i32 0, i32 17
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl50, align 8
  br label %cond.end.54

cond.false.51:                                    ; preds = %land.lhs.true.44
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @make_decl_rtl(%union.tree_node* %32, i8* null)
  %33 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl52 = bitcast %union.tree_node* %33 to %struct.tree_decl*
  %rtl53 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl52, i32 0, i32 17
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtl53, align 8
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.false.51, %cond.true.48
  %cond55 = phi %struct.rtx_def* [ %31, %cond.true.48 ], [ %34, %cond.false.51 ]
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond55, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load56 = load i32, i32* %36, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 70
  br i1 %cmp58, label %land.lhs.true.59, label %if.end

land.lhs.true.59:                                 ; preds = %cond.end.54, %cond.end.24
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %decl60 = bitcast %union.tree_node* %37 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl60, i32 0, i32 5
  %38 = bitcast i48* %regdecl_flag to i64*
  %bf.load61 = load i64, i64* %38, align 8
  %bf.lshr = lshr i64 %bf.load61, 10
  %bf.clear62 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear62 to i32
  %tobool63 = icmp ne i32 %bf.cast, 0
  br i1 %tobool63, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.59
  %39 = load %union.tree_node*, %union.tree_node** %decl, align 8
  call void @put_var_into_stack(%union.tree_node* %39)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.59, %cond.end.54, %cond.end.39, %cond.end, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %40 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common64 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 0
  %41 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %41, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @lookup_static_chain(%union.tree_node* %decl) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %context = alloca %union.tree_node*, align 8
  %link = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %0)
  store %union.tree_node* %call, %union.tree_node** %context, align 8
  %1 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp = icmp eq %union.tree_node* %1, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp1 = icmp eq i32 %bf.clear, 30
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8
  %decl2 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 5
  %4 = bitcast i48* %regdecl_flag to i64*
  %bf.load3 = load i64, i64* %4, align 8
  %bf.lshr = lshr i64 %bf.load3, 10
  %bf.clear4 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear4 to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %context, align 8
  %6 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp5 = icmp eq %union.tree_node* %5, %6
  br i1 %cmp5, label %if.then.8, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %context, align 8
  %8 = load %union.tree_node*, %union.tree_node** @inline_function_decl, align 8
  %cmp7 = icmp eq %union.tree_node* %7, %8
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %lor.lhs.false.6, %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %retval
  br label %return

if.end.9:                                         ; preds = %lor.lhs.false.6
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %x_context_display = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 33
  %11 = load %union.tree_node*, %union.tree_node** %x_context_display, align 8
  store %union.tree_node* %11, %union.tree_node** %link, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.9
  %12 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool10 = icmp ne %union.tree_node* %12, null
  br i1 %tobool10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list = bitcast %union.tree_node* %13 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %14 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %15 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp11 = icmp eq %union.tree_node* %14, %15
  br i1 %cmp11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %for.body
  %16 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list13 = bitcast %union.tree_node* %16 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list13, i32 0, i32 2
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8
  %exp = bitcast %union.tree_node* %17 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %18 = bitcast %union.tree_node** %arrayidx to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %18, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %retval
  br label %return

if.end.14:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %20 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common15 = bitcast %union.tree_node* %20 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 0
  %21 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %21, %union.tree_node** %link, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 5612, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.lookup_static_chain, i32 0, i32 0)) #6
  unreachable

return:                                           ; preds = %if.then.12, %if.then.8, %if.then
  %22 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %22
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %addr, %union.tree_node* %var) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %addr.addr = alloca %struct.rtx_def*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %basereg = alloca %struct.rtx_def*, align 8
  %displacement = alloca i64, align 8
  %context = alloca %union.tree_node*, align 8
  %fp = alloca %struct.function*, align 8
  %base = alloca %struct.rtx_def*, align 8
  %addr43 = alloca %struct.rtx_def*, align 8
  %link = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %0)
  store %union.tree_node* %call, %union.tree_node** %context, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %base, align 8
  %1 = load %union.tree_node*, %union.tree_node** %context, align 8
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp = icmp eq %union.tree_node* %1, %2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %context, align 8
  %4 = load %union.tree_node*, %union.tree_node** @inline_function_decl, align 8
  %cmp1 = icmp eq %union.tree_node* %3, %4
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %context, align 8
  %call2 = call %struct.function* @find_function_data(%union.tree_node* %6)
  store %struct.function* %call2, %struct.function** %fp, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp3 = icmp eq i32 %bf.clear, 70
  br i1 %cmp3, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load4 = load i32, i32* %11, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 66
  br i1 %cmp6, label %if.then.7, label %if.end.14

if.then.7:                                        ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 0
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %addr.addr, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.7, %land.lhs.true, %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load15 = load i32, i32* %16, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 61
  br i1 %cmp17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %if.end.14
  %17 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %basereg, align 8
  store i64 0, i64* %displacement, align 8
  br label %if.end.40

if.else:                                          ; preds = %if.end.14
  %18 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %19 = bitcast %struct.rtx_def* %18 to i32*
  %bf.load19 = load i32, i32* %19, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 75
  br i1 %cmp21, label %land.lhs.true.22, label %if.else.38

land.lhs.true.22:                                 ; preds = %if.else
  %20 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i32 0, i64 1
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx25, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load26 = load i32, i32* %22, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 54
  br i1 %cmp28, label %if.then.29, label %if.else.38

if.then.29:                                       ; preds = %land.lhs.true.22
  %23 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 0
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx32, align 8
  store %struct.rtx_def* %24, %struct.rtx_def** %basereg, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 1
  %rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx35, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx37 to i64*
  %27 = load i64, i64* %rtwint, align 8
  store i64 %27, i64* %displacement, align 8
  br label %if.end.39

if.else.38:                                       ; preds = %land.lhs.true.22, %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 5645, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.fix_lexical_addr, i32 0, i32 0)) #6
  unreachable

if.end.39:                                        ; preds = %if.then.29
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.then.18
  %28 = load %struct.rtx_def*, %struct.rtx_def** %basereg, align 8
  %29 = load %struct.function*, %struct.function** %fp, align 8
  %internal_arg_pointer = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 15
  %30 = load %struct.rtx_def*, %struct.rtx_def** %internal_arg_pointer, align 8
  %cmp41 = icmp eq %struct.rtx_def* %28, %30
  br i1 %cmp41, label %if.then.42, label %if.else.56

if.then.42:                                       ; preds = %if.end.40
  %31 = load %struct.function*, %struct.function** %fp, align 8
  %call44 = call %struct.rtx_def* @get_arg_pointer_save_area(%struct.function* %31)
  store %struct.rtx_def* %call44, %struct.rtx_def** %addr43, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %addr43, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 0
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx47, align 8
  %34 = load %union.tree_node*, %union.tree_node** %var.addr, align 8
  %call48 = call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %33, %union.tree_node* %34)
  store %struct.rtx_def* %call48, %struct.rtx_def** %addr43, align 8
  %35 = load i32, i32* @target_flags, align 4
  %and = and i32 %35, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %36 = load %struct.rtx_def*, %struct.rtx_def** %addr43, align 8
  %call49 = call %struct.rtx_def* @memory_address(i32 %cond, %struct.rtx_def* %36)
  store %struct.rtx_def* %call49, %struct.rtx_def** %addr43, align 8
  %37 = load i32, i32* @target_flags, align 4
  %and50 = and i32 %37, 33554432
  %tobool51 = icmp ne i32 %and50, 0
  %cond52 = select i1 %tobool51, i32 5, i32 4
  %38 = load %struct.rtx_def*, %struct.rtx_def** %addr43, align 8
  %call53 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond52, %struct.rtx_def* %38)
  store %struct.rtx_def* %call53, %struct.rtx_def** %base, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %call54 = call i64 @get_frame_alias_set()
  call void @set_mem_alias_set(%struct.rtx_def* %39, i64 %call54)
  %40 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %call55 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %40)
  store %struct.rtx_def* %call55, %struct.rtx_def** %base, align 8
  br label %if.end.66

if.else.56:                                       ; preds = %if.end.40
  %41 = load %struct.rtx_def*, %struct.rtx_def** %basereg, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %cmp57 = icmp eq %struct.rtx_def* %41, %42
  br i1 %cmp57, label %if.then.58, label %if.end.65

if.then.58:                                       ; preds = %if.else.56
  %43 = load %struct.function*, %struct.function** @cfun, align 8
  %x_context_display = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 33
  %44 = load %union.tree_node*, %union.tree_node** %x_context_display, align 8
  store %union.tree_node* %44, %union.tree_node** %link, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.58
  %45 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool59 = icmp ne %union.tree_node* %45, null
  br i1 %tobool59, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %46 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list = bitcast %union.tree_node* %46 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %47 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %48 = load %union.tree_node*, %union.tree_node** %context, align 8
  %cmp60 = icmp eq %union.tree_node* %47, %48
  br i1 %cmp60, label %if.then.61, label %if.end.64

if.then.61:                                       ; preds = %for.body
  %49 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list62 = bitcast %union.tree_node* %49 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list62, i32 0, i32 2
  %50 = load %union.tree_node*, %union.tree_node** %value, align 8
  %exp = bitcast %union.tree_node* %50 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx63 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %51 = bitcast %union.tree_node** %arrayidx63 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %51, align 8
  store %struct.rtx_def* %52, %struct.rtx_def** %base, align 8
  br label %for.end

if.end.64:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.64
  %53 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common = bitcast %union.tree_node* %53 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %54 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %54, %union.tree_node** %link, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.61, %for.cond
  br label %if.end.65

if.end.65:                                        ; preds = %for.end, %if.else.56
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.then.42
  %55 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %cmp67 = icmp eq %struct.rtx_def* %55, null
  br i1 %cmp67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.end.66
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 5691, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.fix_lexical_addr, i32 0, i32 0)) #6
  unreachable

if.end.69:                                        ; preds = %if.end.66
  %56 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %57 = load i64, i64* %displacement, align 8
  %call70 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %56, i64 %57)
  store %struct.rtx_def* %call70, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.69, %if.then
  %58 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %58
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_arg_pointer_save_area(%struct.function* %f) #0 {
entry:
  %f.addr = alloca %struct.function*, align 8
  %ret = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  %0 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_arg_pointer_save_area = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 30
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x_arg_pointer_save_area, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %ret, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %tobool = icmp ne %struct.rtx_def* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4
  %and = and i32 %3, 33554432
  %tobool1 = icmp ne i32 %and, 0
  %cond = select i1 %tobool1, i32 5, i32 4
  %4 = load i32, i32* @target_flags, align 4
  %and2 = and i32 %4, 33554432
  %tobool3 = icmp ne i32 %and2, 0
  %cond4 = select i1 %tobool3, i32 5, i32 4
  %idxprom = sext i32 %cond4 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i64
  %6 = load %struct.function*, %struct.function** %f.addr, align 8
  %call = call %struct.rtx_def* @assign_stack_local_1(i32 %cond, i64 %conv, i32 0, %struct.function* %6)
  store %struct.rtx_def* %call, %struct.rtx_def** %ret, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %8 = load %struct.function*, %struct.function** %f.addr, align 8
  %x_arg_pointer_save_area5 = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 30
  store %struct.rtx_def* %7, %struct.rtx_def** %x_arg_pointer_save_area5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.function*, %struct.function** %f.addr, align 8
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %cmp = icmp eq %struct.function* %9, %10
  br i1 %cmp, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %if.end
  %11 = load %struct.function*, %struct.function** %f.addr, align 8
  %arg_pointer_save_area_init = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 56
  %12 = bitcast i24* %arg_pointer_save_area_init to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.lshr = lshr i32 %bf.load, 23
  %bf.clear = and i32 %bf.lshr, 1
  %tobool7 = icmp ne i32 %bf.clear, 0
  br i1 %tobool7, label %if.end.14, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true
  call void @start_sequence()
  %13 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %call9 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %13)
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %call10 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call9, %struct.rtx_def* %14)
  %call11 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call11, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  call void @push_topmost_sequence()
  %15 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call12 = call %struct.rtx_def* @get_insns()
  %call13 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %15, %struct.rtx_def* %call12)
  call void @pop_topmost_sequence()
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.8, %land.lhs.true, %if.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  ret %struct.rtx_def* %16
}

declare %struct.rtx_def* @memory_address(i32, %struct.rtx_def*) #2

declare i64 @get_frame_alias_set() #2

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @trampoline_address(%union.tree_node* %function) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %function.addr = alloca %union.tree_node*, align 8
  %link = alloca %union.tree_node*, align 8
  %rtlexp = alloca %union.tree_node*, align 8
  %tramp = alloca %struct.rtx_def*, align 8
  %fp = alloca %struct.function*, align 8
  %fn_context = alloca %union.tree_node*, align 8
  store %union.tree_node* %function, %union.tree_node** %function.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_trampoline_list = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 34
  %1 = load %union.tree_node*, %union.tree_node** %x_trampoline_list, align 8
  store %union.tree_node* %1, %union.tree_node** %link, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list = bitcast %union.tree_node* %3 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %4 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  %5 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %cmp = icmp eq %union.tree_node* %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list1 = bitcast %union.tree_node* %6 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2
  %7 = load %union.tree_node*, %union.tree_node** %value, align 8
  %exp = bitcast %union.tree_node* %7 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %8 = bitcast %union.tree_node** %arrayidx to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call %struct.rtx_def* @adjust_trampoline_addr(%struct.rtx_def* %10)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %12 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %12, %union.tree_node** %link, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.function*, %struct.function** @outer_function_chain, align 8
  store %struct.function* %13, %struct.function** %fp, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.29, %for.end
  %14 = load %struct.function*, %struct.function** %fp, align 8
  %tobool4 = icmp ne %struct.function* %14, null
  br i1 %tobool4, label %for.body.5, label %for.end.30

for.body.5:                                       ; preds = %for.cond.3
  %15 = load %struct.function*, %struct.function** %fp, align 8
  %x_trampoline_list6 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 34
  %16 = load %union.tree_node*, %union.tree_node** %x_trampoline_list6, align 8
  store %union.tree_node* %16, %union.tree_node** %link, align 8
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc.25, %for.body.5
  %17 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool8 = icmp ne %union.tree_node* %17, null
  br i1 %tobool8, label %for.body.9, label %for.end.28

for.body.9:                                       ; preds = %for.cond.7
  %18 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list10 = bitcast %union.tree_node* %18 to %struct.tree_list*
  %purpose11 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list10, i32 0, i32 1
  %19 = load %union.tree_node*, %union.tree_node** %purpose11, align 8
  %20 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %cmp12 = icmp eq %union.tree_node* %19, %20
  br i1 %cmp12, label %if.then.13, label %if.end.24

if.then.13:                                       ; preds = %for.body.9
  %21 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list14 = bitcast %union.tree_node* %21 to %struct.tree_list*
  %value15 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list14, i32 0, i32 2
  %22 = load %union.tree_node*, %union.tree_node** %value15, align 8
  %exp16 = bitcast %union.tree_node* %22 to %struct.tree_exp*
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 2
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i32 0, i64 1
  %23 = bitcast %union.tree_node** %arrayidx18 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %26 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %call22 = call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %25, %union.tree_node* %26)
  store %struct.rtx_def* %call22, %struct.rtx_def** %tramp, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %tramp, align 8
  %call23 = call %struct.rtx_def* @adjust_trampoline_addr(%struct.rtx_def* %27)
  store %struct.rtx_def* %call23, %struct.rtx_def** %retval
  br label %return

if.end.24:                                        ; preds = %for.body.9
  br label %for.inc.25

for.inc.25:                                       ; preds = %if.end.24
  %28 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common26 = bitcast %union.tree_node* %28 to %struct.tree_common*
  %chain27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 0
  %29 = load %union.tree_node*, %union.tree_node** %chain27, align 8
  store %union.tree_node* %29, %union.tree_node** %link, align 8
  br label %for.cond.7

for.end.28:                                       ; preds = %for.cond.7
  br label %for.inc.29

for.inc.29:                                       ; preds = %for.end.28
  %30 = load %struct.function*, %struct.function** %fp, align 8
  %outer = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 7
  %31 = load %struct.function*, %struct.function** %outer, align 8
  store %struct.function* %31, %struct.function** %fp, align 8
  br label %for.cond.3

for.end.30:                                       ; preds = %for.cond.3
  store %struct.function* null, %struct.function** %fp, align 8
  %32 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %call31 = call %union.tree_node* @decl_function_context(%union.tree_node* %32)
  store %union.tree_node* %call31, %union.tree_node** %fn_context, align 8
  %33 = load %union.tree_node*, %union.tree_node** %fn_context, align 8
  %34 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %cmp32 = icmp ne %union.tree_node* %33, %34
  br i1 %cmp32, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %for.end.30
  %35 = load %union.tree_node*, %union.tree_node** %fn_context, align 8
  %36 = load %union.tree_node*, %union.tree_node** @inline_function_decl, align 8
  %cmp33 = icmp ne %union.tree_node* %35, %36
  br i1 %cmp33, label %if.then.34, label %if.end.36

if.then.34:                                       ; preds = %land.lhs.true
  %37 = load %union.tree_node*, %union.tree_node** %fn_context, align 8
  %call35 = call %struct.function* @find_function_data(%union.tree_node* %37)
  store %struct.function* %call35, %struct.function** %fp, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.34, %land.lhs.true, %for.end.30
  %38 = load i32, i32* @target_flags, align 4
  %and = and i32 %38, 33554432
  %tobool37 = icmp ne i32 %and, 0
  %cond = select i1 %tobool37, i32 23, i32 10
  %add = add nsw i32 %cond, 2
  %sub = sub nsw i32 %add, 1
  %conv = sext i32 %sub to i64
  %39 = load %struct.function*, %struct.function** %fp, align 8
  %tobool38 = icmp ne %struct.function* %39, null
  br i1 %tobool38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.36
  %40 = load %struct.function*, %struct.function** %fp, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.36
  %41 = load %struct.function*, %struct.function** @cfun, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond39 = phi %struct.function* [ %40, %cond.true ], [ %41, %cond.false ]
  %call40 = call %struct.rtx_def* @assign_stack_local_1(i32 51, i64 %conv, i32 0, %struct.function* %cond39)
  store %struct.rtx_def* %call40, %struct.rtx_def** %tramp, align 8
  %42 = load %struct.function*, %struct.function** %fp, align 8
  %cmp41 = icmp ne %struct.function* %42, null
  br i1 %cmp41, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %cond.end
  %call44 = call %union.tree_node* @make_node(i32 120)
  store %union.tree_node* %call44, %union.tree_node** %rtlexp, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %tramp, align 8
  %44 = load %union.tree_node*, %union.tree_node** %rtlexp, align 8
  %exp45 = bitcast %union.tree_node* %44 to %struct.tree_exp*
  %operands46 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp45, i32 0, i32 2
  %arrayidx47 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands46, i32 0, i64 1
  %45 = bitcast %union.tree_node** %arrayidx47 to %struct.rtx_def**
  store %struct.rtx_def* %43, %struct.rtx_def** %45, align 8
  %46 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %47 = load %union.tree_node*, %union.tree_node** %rtlexp, align 8
  %48 = load %struct.function*, %struct.function** %fp, align 8
  %x_trampoline_list48 = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 34
  %49 = load %union.tree_node*, %union.tree_node** %x_trampoline_list48, align 8
  %call49 = call %union.tree_node* @tree_cons(%union.tree_node* %46, %union.tree_node* %47, %union.tree_node* %49)
  %50 = load %struct.function*, %struct.function** %fp, align 8
  %x_trampoline_list50 = getelementptr inbounds %struct.function, %struct.function* %50, i32 0, i32 34
  store %union.tree_node* %call49, %union.tree_node** %x_trampoline_list50, align 8
  br label %if.end.58

if.else:                                          ; preds = %cond.end
  %call51 = call %union.tree_node* @make_node(i32 120)
  store %union.tree_node* %call51, %union.tree_node** %rtlexp, align 8
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tramp, align 8
  %52 = load %union.tree_node*, %union.tree_node** %rtlexp, align 8
  %exp52 = bitcast %union.tree_node* %52 to %struct.tree_exp*
  %operands53 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp52, i32 0, i32 2
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands53, i32 0, i64 1
  %53 = bitcast %union.tree_node** %arrayidx54 to %struct.rtx_def**
  store %struct.rtx_def* %51, %struct.rtx_def** %53, align 8
  %54 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %55 = load %union.tree_node*, %union.tree_node** %rtlexp, align 8
  %56 = load %struct.function*, %struct.function** @cfun, align 8
  %x_trampoline_list55 = getelementptr inbounds %struct.function, %struct.function* %56, i32 0, i32 34
  %57 = load %union.tree_node*, %union.tree_node** %x_trampoline_list55, align 8
  %call56 = call %union.tree_node* @tree_cons(%union.tree_node* %54, %union.tree_node* %55, %union.tree_node* %57)
  %58 = load %struct.function*, %struct.function** @cfun, align 8
  %x_trampoline_list57 = getelementptr inbounds %struct.function, %struct.function* %58, i32 0, i32 34
  store %union.tree_node* %call56, %union.tree_node** %x_trampoline_list57, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.else, %if.then.43
  %59 = load %struct.rtx_def*, %struct.rtx_def** %tramp, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx61, align 8
  %61 = load %union.tree_node*, %union.tree_node** %function.addr, align 8
  %call62 = call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %60, %union.tree_node* %61)
  store %struct.rtx_def* %call62, %struct.rtx_def** %tramp, align 8
  %62 = load %struct.rtx_def*, %struct.rtx_def** %tramp, align 8
  %call63 = call %struct.rtx_def* @adjust_trampoline_addr(%struct.rtx_def* %62)
  store %struct.rtx_def* %call63, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.58, %if.then.13, %if.then
  %63 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %63
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @adjust_trampoline_addr(%struct.rtx_def* %tramp) #0 {
entry:
  %tramp.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %tramp, %struct.rtx_def** %tramp.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %call = call %struct.rtx_def* @round_trampoline_addr(%struct.rtx_def* %0)
  store %struct.rtx_def* %call, %struct.rtx_def** %tramp.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  ret %struct.rtx_def* %1
}

declare %union.tree_node* @make_node(i32) #2

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define void @identify_blocks() #0 {
entry:
  %n_blocks = alloca i32, align 4
  %block_vector = alloca %union.tree_node**, align 8
  %last_block_vector = alloca %union.tree_node**, align 8
  %block_stack = alloca %union.tree_node**, align 8
  %block = alloca %union.tree_node*, align 8
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 12
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8
  store %union.tree_node* %1, %union.tree_node** %block, align 8
  %2 = load %union.tree_node*, %union.tree_node** %block, align 8
  %cmp = icmp eq %union.tree_node* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %block, align 8
  %call = call %union.tree_node** @get_block_vector(%union.tree_node* %3, i32* %n_blocks)
  store %union.tree_node** %call, %union.tree_node*** %block_vector, align 8
  %4 = load i32, i32* %n_blocks, align 4
  %conv = sext i32 %4 to i64
  %mul = mul i64 %conv, 8
  %call1 = call noalias i8* @xmalloc(i64 %mul)
  %5 = bitcast i8* %call1 to %union.tree_node**
  store %union.tree_node** %5, %union.tree_node*** %block_stack, align 8
  %call2 = call %struct.rtx_def* @get_insns()
  %6 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 1
  %7 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8
  %8 = load i32, i32* %n_blocks, align 4
  %idx.ext = sext i32 %8 to i64
  %add.ptr3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %7, i64 %idx.ext
  %9 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %call4 = call %union.tree_node** @identify_blocks_1(%struct.rtx_def* %call2, %union.tree_node** %add.ptr, %union.tree_node** %add.ptr3, %union.tree_node** %9)
  store %union.tree_node** %call4, %union.tree_node*** %last_block_vector, align 8
  %10 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8
  %11 = bitcast %union.tree_node** %10 to i8*
  call void @free(i8* %11) #5
  %12 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %13 = bitcast %union.tree_node** %12 to i8*
  call void @free(i8* %13) #5
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node** @get_block_vector(%union.tree_node* %block, i32* %n_blocks_p) #0 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %n_blocks_p.addr = alloca i32*, align 8
  %block_vector = alloca %union.tree_node**, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  store i32* %n_blocks_p, i32** %n_blocks_p.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %call = call i32 @all_blocks(%union.tree_node* %0, %union.tree_node** null)
  %1 = load i32*, i32** %n_blocks_p.addr, align 8
  store i32 %call, i32* %1, align 4
  %2 = load i32*, i32** %n_blocks_p.addr, align 8
  %3 = load i32, i32* %2, align 4
  %conv = sext i32 %3 to i64
  %mul = mul i64 %conv, 8
  %call1 = call noalias i8* @xmalloc(i64 %mul)
  %4 = bitcast i8* %call1 to %union.tree_node**
  store %union.tree_node** %4, %union.tree_node*** %block_vector, align 8
  %5 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %6 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8
  %call2 = call i32 @all_blocks(%union.tree_node* %5, %union.tree_node** %6)
  %7 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8
  ret %union.tree_node** %7
}

declare noalias i8* @xmalloc(i64) #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node** @identify_blocks_1(%struct.rtx_def* %insns, %union.tree_node** %block_vector, %union.tree_node** %end_block_vector, %union.tree_node** %orig_block_stack) #0 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %block_vector.addr = alloca %union.tree_node**, align 8
  %end_block_vector.addr = alloca %union.tree_node**, align 8
  %orig_block_stack.addr = alloca %union.tree_node**, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %block_stack = alloca %union.tree_node**, align 8
  %b = alloca %union.tree_node*, align 8
  %cp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  store %union.tree_node** %block_vector, %union.tree_node*** %block_vector.addr, align 8
  store %union.tree_node** %end_block_vector, %union.tree_node*** %end_block_vector.addr, align 8
  store %union.tree_node** %orig_block_stack, %union.tree_node*** %orig_block_stack.addr, align 8
  %0 = load %union.tree_node**, %union.tree_node*** %orig_block_stack.addr, align 8
  store %union.tree_node** %0, %union.tree_node*** %block_stack, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %if.then, label %if.else.22

if.then:                                          ; preds = %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %6 = load i32, i32* %rtint, align 4
  %cmp1 = icmp eq i32 %6, -98
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %7 = load %union.tree_node**, %union.tree_node*** %block_vector.addr, align 8
  %8 = load %union.tree_node**, %union.tree_node*** %end_block_vector.addr, align 8
  %cmp3 = icmp eq %union.tree_node** %7, %8
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then.2
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 5876, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.identify_blocks_1, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %if.then.2
  %9 = load %union.tree_node**, %union.tree_node*** %block_vector.addr, align 8
  %incdec.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %9, i32 1
  store %union.tree_node** %incdec.ptr, %union.tree_node*** %block_vector.addr, align 8
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8
  store %union.tree_node* %10, %union.tree_node** %b, align 8
  %11 = load %union.tree_node*, %union.tree_node** %b, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i32 0, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx6 to %union.tree_node**
  store %union.tree_node* %11, %union.tree_node** %rttree, align 8
  %13 = load %union.tree_node*, %union.tree_node** %b, align 8
  %14 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %incdec.ptr7 = getelementptr inbounds %union.tree_node*, %union.tree_node** %14, i32 1
  store %union.tree_node** %incdec.ptr7, %union.tree_node*** %block_stack, align 8
  store %union.tree_node* %13, %union.tree_node** %14, align 8
  br label %if.end.21

if.else:                                          ; preds = %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 4
  %rtint10 = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %16 = load i32, i32* %rtint10, align 4
  %cmp11 = icmp eq i32 %16, -97
  br i1 %cmp11, label %if.then.12, label %if.end.20

if.then.12:                                       ; preds = %if.else
  %17 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %18 = load %union.tree_node**, %union.tree_node*** %orig_block_stack.addr, align 8
  %cmp13 = icmp eq %union.tree_node** %17, %18
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.then.12
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 5887, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.identify_blocks_1, i32 0, i32 0)) #6
  unreachable

if.end.15:                                        ; preds = %if.then.12
  %19 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %incdec.ptr16 = getelementptr inbounds %union.tree_node*, %union.tree_node** %19, i32 -1
  store %union.tree_node** %incdec.ptr16, %union.tree_node*** %block_stack, align 8
  %20 = load %union.tree_node*, %union.tree_node** %incdec.ptr16, align 8
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 3
  %rttree19 = bitcast %union.rtunion_def* %arrayidx18 to %union.tree_node**
  store %union.tree_node* %20, %union.tree_node** %rttree19, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.15, %if.else
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.end
  br label %if.end.59

if.else.22:                                       ; preds = %for.body
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %23 = bitcast %struct.rtx_def* %22 to i32*
  %bf.load23 = load i32, i32* %23, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 34
  br i1 %cmp25, label %land.lhs.true, label %if.end.58

land.lhs.true:                                    ; preds = %if.else.22
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load28 = load i32, i32* %26, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 141
  br i1 %cmp30, label %if.then.31, label %if.end.58

if.then.31:                                       ; preds = %land.lhs.true
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 3
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtx34, align 8
  store %struct.rtx_def* %28, %struct.rtx_def** %cp, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %31 = load %union.tree_node**, %union.tree_node*** %block_vector.addr, align 8
  %32 = load %union.tree_node**, %union.tree_node*** %end_block_vector.addr, align 8
  %33 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %call = call %union.tree_node** @identify_blocks_1(%struct.rtx_def* %30, %union.tree_node** %31, %union.tree_node** %32, %union.tree_node** %33)
  store %union.tree_node** %call, %union.tree_node*** %block_vector.addr, align 8
  %34 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 1
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx40, align 8
  %tobool41 = icmp ne %struct.rtx_def* %35, null
  br i1 %tobool41, label %if.then.42, label %if.end.47

if.then.42:                                       ; preds = %if.then.31
  %36 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 1
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx45, align 8
  %38 = load %union.tree_node**, %union.tree_node*** %block_vector.addr, align 8
  %39 = load %union.tree_node**, %union.tree_node*** %end_block_vector.addr, align 8
  %40 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %call46 = call %union.tree_node** @identify_blocks_1(%struct.rtx_def* %37, %union.tree_node** %38, %union.tree_node** %39, %union.tree_node** %40)
  store %union.tree_node** %call46, %union.tree_node*** %block_vector.addr, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.42, %if.then.31
  %41 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 2
  %rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx50, align 8
  %tobool51 = icmp ne %struct.rtx_def* %42, null
  br i1 %tobool51, label %if.then.52, label %if.end.57

if.then.52:                                       ; preds = %if.end.47
  %43 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i32 0, i64 2
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx55, align 8
  %45 = load %union.tree_node**, %union.tree_node*** %block_vector.addr, align 8
  %46 = load %union.tree_node**, %union.tree_node*** %end_block_vector.addr, align 8
  %47 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %call56 = call %union.tree_node** @identify_blocks_1(%struct.rtx_def* %44, %union.tree_node** %45, %union.tree_node** %46, %union.tree_node** %47)
  store %union.tree_node** %call56, %union.tree_node*** %block_vector.addr, align 8
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.52, %if.end.47
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %land.lhs.true, %if.else.22
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %if.end.21
  br label %for.inc

for.inc:                                          ; preds = %if.end.59
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i32 0, i64 2
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx62, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %50 = load %union.tree_node**, %union.tree_node*** %block_stack, align 8
  %51 = load %union.tree_node**, %union.tree_node*** %orig_block_stack.addr, align 8
  %cmp63 = icmp ne %union.tree_node** %50, %51
  br i1 %cmp63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 5911, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__FUNCTION__.identify_blocks_1, i32 0, i32 0)) #6
  unreachable

if.end.65:                                        ; preds = %for.end
  %52 = load %union.tree_node**, %union.tree_node*** %block_vector.addr, align 8
  ret %union.tree_node** %52
}

; Function Attrs: nounwind uwtable
define void @reorder_blocks() #0 {
entry:
  %block = alloca %union.tree_node*, align 8
  %block_stack = alloca %struct.varray_head_tag*, align 8
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 12
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8
  store %union.tree_node* %1, %union.tree_node** %block, align 8
  %2 = load %union.tree_node*, %union.tree_node** %block, align 8
  %cmp = icmp eq %union.tree_node* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.end

if.end:                                           ; preds = %entry
  %call = call %struct.varray_head_tag* @varray_init(i64 10, i64 8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i32 0, i32 0))
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** %block_stack, align 8
  %3 = load %union.tree_node*, %union.tree_node** %block, align 8
  call void @reorder_blocks_0(%union.tree_node* %3)
  %4 = load %union.tree_node*, %union.tree_node** %block, align 8
  %block1 = bitcast %union.tree_node* %4 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3
  store %union.tree_node* null, %union.tree_node** %subblocks, align 8
  %5 = load %union.tree_node*, %union.tree_node** %block, align 8
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  store %union.tree_node* null, %union.tree_node** %chain, align 8
  %call2 = call %struct.rtx_def* @get_insns()
  %6 = load %union.tree_node*, %union.tree_node** %block, align 8
  call void @reorder_blocks_1(%struct.rtx_def* %call2, %union.tree_node* %6, %struct.varray_head_tag** %block_stack)
  %7 = load %union.tree_node*, %union.tree_node** %block, align 8
  %block3 = bitcast %union.tree_node* %7 to %struct.tree_block*
  %subblocks4 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block3, i32 0, i32 3
  %8 = load %union.tree_node*, %union.tree_node** %subblocks4, align 8
  %call5 = call %union.tree_node* @blocks_nreverse(%union.tree_node* %8)
  %9 = load %union.tree_node*, %union.tree_node** %block, align 8
  %block6 = bitcast %union.tree_node* %9 to %struct.tree_block*
  %subblocks7 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block6, i32 0, i32 3
  store %union.tree_node* %call5, %union.tree_node** %subblocks7, align 8
  %10 = load %union.tree_node*, %union.tree_node** %block, align 8
  call void @reorder_fix_fragments(%union.tree_node* %10)
  br label %do.body

do.body:                                          ; preds = %if.end
  %11 = load %struct.varray_head_tag*, %struct.varray_head_tag** %block_stack, align 8
  %tobool = icmp ne %struct.varray_head_tag* %11, null
  br i1 %tobool, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %do.body
  %12 = load %struct.varray_head_tag*, %struct.varray_head_tag** %block_stack, align 8
  %13 = bitcast %struct.varray_head_tag* %12 to i8*
  call void @free(i8* %13) #5
  store %struct.varray_head_tag* null, %struct.varray_head_tag** %block_stack, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %do.body
  br label %do.end

do.end:                                           ; preds = %if.then, %if.end.9
  ret void
}

declare %struct.varray_head_tag* @varray_init(i64, i64, i8*) #2

; Function Attrs: nounwind uwtable
define internal void @reorder_blocks_0(%union.tree_node* %block) #0 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %tobool = icmp ne %union.tree_node* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %asm_written_flag, align 8
  %bf.clear = and i32 %bf.load, -16385
  store i32 %bf.clear, i32* %asm_written_flag, align 8
  %2 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block1 = bitcast %union.tree_node* %2 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3
  %3 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  call void @reorder_blocks_0(%union.tree_node* %3)
  %4 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 0
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %5, %union.tree_node** %block.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @reorder_blocks_1(%struct.rtx_def* %insns, %union.tree_node* %current_block, %struct.varray_head_tag** %p_block_stack) #0 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %current_block.addr = alloca %union.tree_node*, align 8
  %p_block_stack.addr = alloca %struct.varray_head_tag**, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %block = alloca %union.tree_node*, align 8
  %new_block = alloca %union.tree_node*, align 8
  %origin = alloca %union.tree_node*, align 8
  %cp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  store %union.tree_node* %current_block, %union.tree_node** %current_block.addr, align 8
  store %struct.varray_head_tag** %p_block_stack, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  store %struct.rtx_def* %0, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %if.then, label %if.else.63

if.then:                                          ; preds = %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32, i32* %rtint, align 4
  %cmp1 = icmp eq i32 %5, -98
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i32 0, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx4 to %union.tree_node**
  %7 = load %union.tree_node*, %union.tree_node** %rttree, align 8
  store %union.tree_node* %7, %union.tree_node** %block, align 8
  %8 = load %union.tree_node*, %union.tree_node** %block, align 8
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load5 = load i32, i32* %asm_written_flag, align 8
  %bf.lshr = lshr i32 %bf.load5, 14
  %bf.clear6 = and i32 %bf.lshr, 1
  %tobool7 = icmp ne i32 %bf.clear6, 0
  br i1 %tobool7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then.2
  %9 = load %union.tree_node*, %union.tree_node** %block, align 8
  %call = call %union.tree_node* @copy_node(%union.tree_node* %9)
  store %union.tree_node* %call, %union.tree_node** %new_block, align 8
  %10 = load %union.tree_node*, %union.tree_node** %block, align 8
  %block9 = bitcast %union.tree_node* %10 to %struct.tree_block*
  %fragment_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block9, i32 0, i32 6
  %11 = load %union.tree_node*, %union.tree_node** %fragment_origin, align 8
  %tobool10 = icmp ne %union.tree_node* %11, null
  br i1 %tobool10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.8
  %12 = load %union.tree_node*, %union.tree_node** %block, align 8
  %block11 = bitcast %union.tree_node* %12 to %struct.tree_block*
  %fragment_origin12 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block11, i32 0, i32 6
  %13 = load %union.tree_node*, %union.tree_node** %fragment_origin12, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.8
  %14 = load %union.tree_node*, %union.tree_node** %block, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %13, %cond.true ], [ %14, %cond.false ]
  store %union.tree_node* %cond, %union.tree_node** %origin, align 8
  %15 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %16 = load %union.tree_node*, %union.tree_node** %new_block, align 8
  %block13 = bitcast %union.tree_node* %16 to %struct.tree_block*
  %fragment_origin14 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block13, i32 0, i32 6
  store %union.tree_node* %15, %union.tree_node** %fragment_origin14, align 8
  %17 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %block15 = bitcast %union.tree_node* %17 to %struct.tree_block*
  %fragment_chain = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block15, i32 0, i32 7
  %18 = load %union.tree_node*, %union.tree_node** %fragment_chain, align 8
  %19 = load %union.tree_node*, %union.tree_node** %new_block, align 8
  %block16 = bitcast %union.tree_node* %19 to %struct.tree_block*
  %fragment_chain17 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block16, i32 0, i32 7
  store %union.tree_node* %18, %union.tree_node** %fragment_chain17, align 8
  %20 = load %union.tree_node*, %union.tree_node** %new_block, align 8
  %21 = load %union.tree_node*, %union.tree_node** %origin, align 8
  %block18 = bitcast %union.tree_node* %21 to %struct.tree_block*
  %fragment_chain19 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block18, i32 0, i32 7
  store %union.tree_node* %20, %union.tree_node** %fragment_chain19, align 8
  %22 = load %union.tree_node*, %union.tree_node** %new_block, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 3
  %rttree22 = bitcast %union.rtunion_def* %arrayidx21 to %union.tree_node**
  store %union.tree_node* %22, %union.tree_node** %rttree22, align 8
  %24 = load %union.tree_node*, %union.tree_node** %new_block, align 8
  store %union.tree_node* %24, %union.tree_node** %block, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then.2
  %25 = load %union.tree_node*, %union.tree_node** %block, align 8
  %block23 = bitcast %union.tree_node* %25 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block23, i32 0, i32 3
  store %union.tree_node* null, %union.tree_node** %subblocks, align 8
  %26 = load %union.tree_node*, %union.tree_node** %block, align 8
  %common24 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %asm_written_flag25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2
  %bf.load26 = load i32, i32* %asm_written_flag25, align 8
  %bf.clear27 = and i32 %bf.load26, -16385
  %bf.set = or i32 %bf.clear27, 16384
  store i32 %bf.set, i32* %asm_written_flag25, align 8
  %27 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %28 = load %union.tree_node*, %union.tree_node** %block, align 8
  %block28 = bitcast %union.tree_node* %28 to %struct.tree_block*
  %supercontext = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block28, i32 0, i32 4
  store %union.tree_node* %27, %union.tree_node** %supercontext, align 8
  %29 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %block29 = bitcast %union.tree_node* %29 to %struct.tree_block*
  %subblocks30 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block29, i32 0, i32 3
  %30 = load %union.tree_node*, %union.tree_node** %subblocks30, align 8
  %31 = load %union.tree_node*, %union.tree_node** %block, align 8
  %common31 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 0
  store %union.tree_node* %30, %union.tree_node** %chain, align 8
  %32 = load %union.tree_node*, %union.tree_node** %block, align 8
  %33 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %block32 = bitcast %union.tree_node* %33 to %struct.tree_block*
  %subblocks33 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block32, i32 0, i32 3
  store %union.tree_node* %32, %union.tree_node** %subblocks33, align 8
  %34 = load %union.tree_node*, %union.tree_node** %block, align 8
  store %union.tree_node* %34, %union.tree_node** %current_block.addr, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %35 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %36 = load %struct.varray_head_tag*, %struct.varray_head_tag** %35, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %36, i32 0, i32 1
  %37 = load i64, i64* %elements_used, align 8
  %38 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %39 = load %struct.varray_head_tag*, %struct.varray_head_tag** %38, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %39, i32 0, i32 0
  %40 = load i64, i64* %num_elements, align 8
  %cmp34 = icmp uge i64 %37, %40
  br i1 %cmp34, label %if.then.35, label %if.end.38

if.then.35:                                       ; preds = %do.body
  %41 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %42 = load %struct.varray_head_tag*, %struct.varray_head_tag** %41, align 8
  %43 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %44 = load %struct.varray_head_tag*, %struct.varray_head_tag** %43, align 8
  %num_elements36 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %44, i32 0, i32 0
  %45 = load i64, i64* %num_elements36, align 8
  %mul = mul i64 2, %45
  %call37 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %42, i64 %mul)
  %46 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  store %struct.varray_head_tag* %call37, %struct.varray_head_tag** %46, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.35, %do.body
  %47 = load %union.tree_node*, %union.tree_node** %block, align 8
  %48 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %49 = load %struct.varray_head_tag*, %struct.varray_head_tag** %48, align 8
  %elements_used39 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %49, i32 0, i32 1
  %50 = load i64, i64* %elements_used39, align 8
  %inc = add i64 %50, 1
  store i64 %inc, i64* %elements_used39, align 8
  %51 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %52 = load %struct.varray_head_tag*, %struct.varray_head_tag** %51, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %52, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %50
  store %union.tree_node* %47, %union.tree_node** %arrayidx40, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.38
  br label %if.end.62

if.else:                                          ; preds = %if.then
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 4
  %rtint43 = bitcast %union.rtunion_def* %arrayidx42 to i32*
  %54 = load i32, i32* %rtint43, align 4
  %cmp44 = icmp eq i32 %54, -97
  br i1 %cmp44, label %if.then.45, label %if.end.61

if.then.45:                                       ; preds = %if.else
  %55 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %56 = load %struct.varray_head_tag*, %struct.varray_head_tag** %55, align 8
  %elements_used46 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %56, i32 0, i32 1
  %57 = load i64, i64* %elements_used46, align 8
  %sub = sub i64 %57, 1
  %58 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %59 = load %struct.varray_head_tag*, %struct.varray_head_tag** %58, align 8
  %data47 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %59, i32 0, i32 4
  %tree48 = bitcast %union.varray_data_tag* %data47 to [1 x %union.tree_node*]*
  %arrayidx49 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree48, i32 0, i64 %sub
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx49, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 3
  %rttree52 = bitcast %union.rtunion_def* %arrayidx51 to %union.tree_node**
  store %union.tree_node* %60, %union.tree_node** %rttree52, align 8
  %62 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  %63 = load %struct.varray_head_tag*, %struct.varray_head_tag** %62, align 8
  %elements_used53 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %63, i32 0, i32 1
  %64 = load i64, i64* %elements_used53, align 8
  %dec = add i64 %64, -1
  store i64 %dec, i64* %elements_used53, align 8
  %65 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %block54 = bitcast %union.tree_node* %65 to %struct.tree_block*
  %subblocks55 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block54, i32 0, i32 3
  %66 = load %union.tree_node*, %union.tree_node** %subblocks55, align 8
  %call56 = call %union.tree_node* @blocks_nreverse(%union.tree_node* %66)
  %67 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %block57 = bitcast %union.tree_node* %67 to %struct.tree_block*
  %subblocks58 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block57, i32 0, i32 3
  store %union.tree_node* %call56, %union.tree_node** %subblocks58, align 8
  %68 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %block59 = bitcast %union.tree_node* %68 to %struct.tree_block*
  %supercontext60 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block59, i32 0, i32 4
  %69 = load %union.tree_node*, %union.tree_node** %supercontext60, align 8
  store %union.tree_node* %69, %union.tree_node** %current_block.addr, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.45, %if.else
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %do.end
  br label %if.end.98

if.else.63:                                       ; preds = %for.body
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %71 = bitcast %struct.rtx_def* %70 to i32*
  %bf.load64 = load i32, i32* %71, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %cmp66 = icmp eq i32 %bf.clear65, 34
  br i1 %cmp66, label %land.lhs.true, label %if.end.97

land.lhs.true:                                    ; preds = %if.else.63
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load69 = load i32, i32* %74, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 141
  br i1 %cmp71, label %if.then.72, label %if.end.97

if.then.72:                                       ; preds = %land.lhs.true
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i32 0, i64 3
  %rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx75, align 8
  store %struct.rtx_def* %76, %struct.rtx_def** %cp, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i32 0, i64 0
  %rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtx78, align 8
  %79 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %80 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  call void @reorder_blocks_1(%struct.rtx_def* %78, %union.tree_node* %79, %struct.varray_head_tag** %80)
  %81 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 1
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtx81, align 8
  %tobool82 = icmp ne %struct.rtx_def* %82, null
  br i1 %tobool82, label %if.then.83, label %if.end.87

if.then.83:                                       ; preds = %if.then.72
  %83 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i32 0, i64 1
  %rtx86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtx_def**
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtx86, align 8
  %85 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %86 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  call void @reorder_blocks_1(%struct.rtx_def* %84, %union.tree_node* %85, %struct.varray_head_tag** %86)
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.83, %if.then.72
  %87 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 2
  %rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx90, align 8
  %tobool91 = icmp ne %struct.rtx_def* %88, null
  br i1 %tobool91, label %if.then.92, label %if.end.96

if.then.92:                                       ; preds = %if.end.87
  %89 = load %struct.rtx_def*, %struct.rtx_def** %cp, align 8
  %fld93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i32 0, i64 2
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rtx95, align 8
  %91 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8
  %92 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %p_block_stack.addr, align 8
  call void @reorder_blocks_1(%struct.rtx_def* %90, %union.tree_node* %91, %struct.varray_head_tag** %92)
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.92, %if.end.87
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %land.lhs.true, %if.else.63
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %if.end.62
  br label %for.inc

for.inc:                                          ; preds = %if.end.98
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i32 0, i64 2
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rtx101, align 8
  store %struct.rtx_def* %94, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @blocks_nreverse(%union.tree_node* %t) #0 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %prev = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  store %union.tree_node* null, %union.tree_node** %prev, align 8
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8
  store %union.tree_node* %0, %union.tree_node** %decl, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %tobool = icmp ne %union.tree_node* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %3, %union.tree_node** %next, align 8
  %4 = load %union.tree_node*, %union.tree_node** %prev, align 8
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  %common1 = bitcast %union.tree_node* %5 to %struct.tree_common*
  %chain2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 0
  store %union.tree_node* %4, %union.tree_node** %chain2, align 8
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8
  store %union.tree_node* %6, %union.tree_node** %prev, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %next, align 8
  store %union.tree_node* %7, %union.tree_node** %decl, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** %prev, align 8
  ret %union.tree_node* %8
}

; Function Attrs: nounwind uwtable
define internal void @reorder_fix_fragments(%union.tree_node* %block) #0 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %dup_origin = alloca %union.tree_node*, align 8
  %new_origin = alloca %union.tree_node*, align 8
  %pp = alloca %union.tree_node**, align 8
  %chain = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.44, %entry
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %tobool = icmp ne %union.tree_node* %0, null
  br i1 %tobool, label %while.body, label %while.end.48

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block1 = bitcast %union.tree_node* %1 to %struct.tree_block*
  %fragment_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 6
  %2 = load %union.tree_node*, %union.tree_node** %fragment_origin, align 8
  store %union.tree_node* %2, %union.tree_node** %dup_origin, align 8
  store %union.tree_node* null, %union.tree_node** %new_origin, align 8
  %3 = load %union.tree_node*, %union.tree_node** %dup_origin, align 8
  %tobool2 = icmp ne %union.tree_node* %3, null
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %4 = load %union.tree_node*, %union.tree_node** %dup_origin, align 8
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %asm_written_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 14
  %bf.clear = and i32 %bf.lshr, 1
  %tobool3 = icmp ne i32 %bf.clear, 0
  br i1 %tobool3, label %if.end, label %if.then.4

if.then.4:                                        ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %dup_origin, align 8
  %block5 = bitcast %union.tree_node* %5 to %struct.tree_block*
  %fragment_chain = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block5, i32 0, i32 7
  %6 = load %union.tree_node*, %union.tree_node** %fragment_chain, align 8
  store %union.tree_node* %6, %union.tree_node** %new_origin, align 8
  br label %while.cond.6

while.cond.6:                                     ; preds = %while.body.13, %if.then.4
  %7 = load %union.tree_node*, %union.tree_node** %new_origin, align 8
  %common7 = bitcast %union.tree_node* %7 to %struct.tree_common*
  %asm_written_flag8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2
  %bf.load9 = load i32, i32* %asm_written_flag8, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 14
  %bf.clear11 = and i32 %bf.lshr10, 1
  %tobool12 = icmp ne i32 %bf.clear11, 0
  %lnot = xor i1 %tobool12, true
  br i1 %lnot, label %while.body.13, label %while.end

while.body.13:                                    ; preds = %while.cond.6
  %8 = load %union.tree_node*, %union.tree_node** %new_origin, align 8
  %block14 = bitcast %union.tree_node* %8 to %struct.tree_block*
  %fragment_chain15 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block14, i32 0, i32 7
  %9 = load %union.tree_node*, %union.tree_node** %fragment_chain15, align 8
  store %union.tree_node* %9, %union.tree_node** %new_origin, align 8
  br label %while.cond.6

while.end:                                        ; preds = %while.cond.6
  %10 = load %union.tree_node*, %union.tree_node** %new_origin, align 8
  %block16 = bitcast %union.tree_node* %10 to %struct.tree_block*
  %fragment_origin17 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block16, i32 0, i32 6
  store %union.tree_node* null, %union.tree_node** %fragment_origin17, align 8
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  br label %if.end.21

if.else:                                          ; preds = %while.body
  %11 = load %union.tree_node*, %union.tree_node** %dup_origin, align 8
  %tobool18 = icmp ne %union.tree_node* %11, null
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.else
  %12 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  store %union.tree_node* %12, %union.tree_node** %new_origin, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.else
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %new_origin, align 8
  %tobool22 = icmp ne %union.tree_node* %13, null
  br i1 %tobool22, label %if.then.23, label %if.end.44

if.then.23:                                       ; preds = %if.end.21
  %14 = load %union.tree_node*, %union.tree_node** %new_origin, align 8
  %block24 = bitcast %union.tree_node* %14 to %struct.tree_block*
  %fragment_chain25 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block24, i32 0, i32 7
  store %union.tree_node** %fragment_chain25, %union.tree_node*** %pp, align 8
  %15 = load %union.tree_node**, %union.tree_node*** %pp, align 8
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8
  store %union.tree_node* %16, %union.tree_node** %chain, align 8
  br label %while.cond.26

while.cond.26:                                    ; preds = %if.end.40, %if.then.23
  %17 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %tobool27 = icmp ne %union.tree_node* %17, null
  br i1 %tobool27, label %while.body.28, label %while.end.43

while.body.28:                                    ; preds = %while.cond.26
  %18 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %common29 = bitcast %union.tree_node* %18 to %struct.tree_common*
  %asm_written_flag30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2
  %bf.load31 = load i32, i32* %asm_written_flag30, align 8
  %bf.lshr32 = lshr i32 %bf.load31, 14
  %bf.clear33 = and i32 %bf.lshr32, 1
  %tobool34 = icmp ne i32 %bf.clear33, 0
  br i1 %tobool34, label %if.then.35, label %if.end.40

if.then.35:                                       ; preds = %while.body.28
  %19 = load %union.tree_node*, %union.tree_node** %new_origin, align 8
  %20 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %block36 = bitcast %union.tree_node* %20 to %struct.tree_block*
  %fragment_origin37 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block36, i32 0, i32 6
  store %union.tree_node* %19, %union.tree_node** %fragment_origin37, align 8
  %21 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %22 = load %union.tree_node**, %union.tree_node*** %pp, align 8
  store %union.tree_node* %21, %union.tree_node** %22, align 8
  %23 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %block38 = bitcast %union.tree_node* %23 to %struct.tree_block*
  %fragment_chain39 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block38, i32 0, i32 7
  store %union.tree_node** %fragment_chain39, %union.tree_node*** %pp, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.35, %while.body.28
  %24 = load %union.tree_node*, %union.tree_node** %chain, align 8
  %block41 = bitcast %union.tree_node* %24 to %struct.tree_block*
  %fragment_chain42 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block41, i32 0, i32 7
  %25 = load %union.tree_node*, %union.tree_node** %fragment_chain42, align 8
  store %union.tree_node* %25, %union.tree_node** %chain, align 8
  br label %while.cond.26

while.end.43:                                     ; preds = %while.cond.26
  %26 = load %union.tree_node**, %union.tree_node*** %pp, align 8
  store %union.tree_node* null, %union.tree_node** %26, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %while.end.43, %if.end.21
  %27 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block45 = bitcast %union.tree_node* %27 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block45, i32 0, i32 3
  %28 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  call void @reorder_fix_fragments(%union.tree_node* %28)
  %29 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %common46 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %chain47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 0
  %30 = load %union.tree_node*, %union.tree_node** %chain47, align 8
  store %union.tree_node* %30, %union.tree_node** %block.addr, align 8
  br label %while.cond

while.end.48:                                     ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @number_blocks(%union.tree_node* %fn) #0 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n_blocks = alloca i32, align 4
  %block_vector = alloca %union.tree_node**, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8
  %decl = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %initial = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 12
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8
  %call = call %union.tree_node** @get_block_vector(%union.tree_node* %1, i32* %n_blocks)
  store %union.tree_node** %call, %union.tree_node*** %block_vector, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n_blocks, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* @next_block_index, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* @next_block_index, align 4
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 %idxprom
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8
  %block = bitcast %union.tree_node* %7 to %struct.tree_block*
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 1
  %bf.load = load i32, i32* %block_num, align 8
  %bf.value = and i32 %4, 1073741823
  %bf.shl = shl i32 %bf.value, 2
  %bf.clear = and i32 %bf.load, 3
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %block_num, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc1 = add nsw i32 %8, 1
  store i32 %inc1, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8
  %10 = bitcast %union.tree_node** %9 to i8*
  call void @free(i8* %10) #5
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @debug_find_var_in_block_tree(%union.tree_node* %var, %union.tree_node* %block) #0 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8
  store %union.tree_node* %1, %union.tree_node** %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8
  %cmp = icmp eq %union.tree_node* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  store %union.tree_node* %5, %union.tree_node** %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %7, %union.tree_node** %t, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block2 = bitcast %union.tree_node* %8 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 3
  %9 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  store %union.tree_node* %9, %union.tree_node** %t, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.9, %for.end
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool4 = icmp ne %union.tree_node* %10, null
  br i1 %tobool4, label %for.body.5, label %for.end.12

for.body.5:                                       ; preds = %for.cond.3
  %11 = load %union.tree_node*, %union.tree_node** %var.addr, align 8
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8
  %call = call %union.tree_node* @debug_find_var_in_block_tree(%union.tree_node* %11, %union.tree_node* %12)
  store %union.tree_node* %call, %union.tree_node** %ret, align 8
  %13 = load %union.tree_node*, %union.tree_node** %ret, align 8
  %tobool6 = icmp ne %union.tree_node* %13, null
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %for.body.5
  %14 = load %union.tree_node*, %union.tree_node** %ret, align 8
  store %union.tree_node* %14, %union.tree_node** %retval
  br label %return

if.end.8:                                         ; preds = %for.body.5
  br label %for.inc.9

for.inc.9:                                        ; preds = %if.end.8
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common10 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %chain11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 0
  %16 = load %union.tree_node*, %union.tree_node** %chain11, align 8
  store %union.tree_node* %16, %union.tree_node** %t, align 8
  br label %for.cond.3

for.end.12:                                       ; preds = %for.cond.3
  store %union.tree_node* null, %union.tree_node** %retval
  br label %return

return:                                           ; preds = %for.end.12, %if.then.7, %if.then
  %17 = load %union.tree_node*, %union.tree_node** %retval
  ret %union.tree_node* %17
}

; Function Attrs: nounwind uwtable
define internal void @prepare_function_start() #0 {
entry:
  %call = call i8* @ggc_alloc_cleared(i64 432)
  %0 = bitcast i8* %call to %struct.function*
  store %struct.function* %0, %struct.function** @cfun, align 8
  call void @init_stmt_for_function()
  call void @init_eh_for_function()
  %1 = load i32, i32* @optimize, align 4
  %tobool = icmp ne i32 %1, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* @cse_not_expected, align 4
  store i32 0, i32* @caller_save_needed, align 4
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %x_stack_slot_list = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 26
  store %struct.rtx_def* null, %struct.rtx_def** %x_stack_slot_list, align 8
  %3 = load %struct.function*, %struct.function** @cfun, align 8
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 56
  %4 = bitcast i24* %has_nonlocal_label to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, -257
  store i32 %bf.clear, i32* %4, align 8
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %has_nonlocal_goto = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 56
  %6 = bitcast i24* %has_nonlocal_goto to i32*
  %bf.load1 = load i32, i32* %6, align 8
  %bf.clear2 = and i32 %bf.load1, -513
  store i32 %bf.clear2, i32* %6, align 8
  %7 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 20
  store %struct.rtx_def* null, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  %8 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 22
  store %struct.rtx_def* null, %struct.rtx_def** %x_nonlocal_goto_stack_level, align 8
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 19
  store %union.tree_node* null, %union.tree_node** %x_nonlocal_labels, align 8
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_labels = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 21
  store %struct.rtx_def* null, %struct.rtx_def** %x_nonlocal_goto_handler_labels, align 8
  %11 = load %struct.function*, %struct.function** @cfun, align 8
  %x_function_call_count = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 18
  store i32 0, i32* %x_function_call_count, align 4
  %12 = load %struct.function*, %struct.function** @cfun, align 8
  %x_max_parm_reg = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 37
  store i32 58, i32* %x_max_parm_reg, align 4
  call void @init_emit()
  call void @init_expr()
  store i16* null, i16** @reg_renumber, align 8
  %13 = load %struct.function*, %struct.function** @cfun, align 8
  call void @init_varasm_status(%struct.function* %13)
  %14 = load %struct.function*, %struct.function** @cfun, align 8
  %inlinable = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 44
  store i32 0, i32* %inlinable, align 4
  %15 = load %struct.function*, %struct.function** @cfun, align 8
  %original_decl_initial = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 47
  store %union.tree_node* null, %union.tree_node** %original_decl_initial, align 8
  %16 = load %struct.function*, %struct.function** @cfun, align 8
  %original_arg_vector = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 46
  store i8* null, i8** %original_arg_vector, align 8
  %17 = load i32, i32* @target_flags, align 4
  %and = and i32 %17, 33554432
  %tobool3 = icmp ne i32 %and, 0
  %cond = select i1 %tobool3, i32 64, i32 32
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %stack_alignment_needed = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 52
  store i32 %cond, i32* %stack_alignment_needed, align 4
  %19 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %19, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 64, i32 32
  %20 = load %struct.function*, %struct.function** @cfun, align 8
  %preferred_stack_boundary = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 53
  store i32 %cond6, i32* %preferred_stack_boundary, align 4
  %21 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 56
  %22 = bitcast i24* %calls_setjmp to i32*
  %bf.load7 = load i32, i32* %22, align 8
  %bf.clear8 = and i32 %bf.load7, -17
  store i32 %bf.clear8, i32* %22, align 8
  %23 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_longjmp = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 56
  %24 = bitcast i24* %calls_longjmp to i32*
  %bf.load9 = load i32, i32* %24, align 8
  %bf.clear10 = and i32 %bf.load9, -33
  store i32 %bf.clear10, i32* %24, align 8
  %25 = load %struct.function*, %struct.function** @cfun, align 8
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 56
  %26 = bitcast i24* %calls_alloca to i32*
  %bf.load11 = load i32, i32* %26, align 8
  %bf.clear12 = and i32 %bf.load11, -65
  store i32 %bf.clear12, i32* %26, align 8
  %27 = load %struct.function*, %struct.function** @cfun, align 8
  %contains_functions = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 56
  %28 = bitcast i24* %contains_functions to i32*
  %bf.load13 = load i32, i32* %28, align 8
  %bf.clear14 = and i32 %bf.load13, -1025
  store i32 %bf.clear14, i32* %28, align 8
  store i32 0, i32* @current_function_is_leaf, align 4
  store i32 0, i32* @current_function_nothrow, align 4
  store i32 0, i32* @current_function_sp_is_unchanging, align 4
  store i32 0, i32* @current_function_uses_only_leaf_regs, align 4
  %29 = load %struct.function*, %struct.function** @cfun, align 8
  %has_computed_jump = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 56
  %30 = bitcast i24* %has_computed_jump to i32*
  %bf.load15 = load i32, i32* %30, align 8
  %bf.clear16 = and i32 %bf.load15, -2049
  store i32 %bf.clear16, i32* %30, align 8
  %31 = load %struct.function*, %struct.function** @cfun, align 8
  %is_thunk = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 56
  %32 = bitcast i24* %is_thunk to i32*
  %bf.load17 = load i32, i32* %32, align 8
  %bf.clear18 = and i32 %bf.load17, -4097
  store i32 %bf.clear18, i32* %32, align 8
  %33 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 56
  %34 = bitcast i24* %returns_pcc_struct to i32*
  %bf.load19 = load i32, i32* %34, align 8
  %bf.clear20 = and i32 %bf.load19, -3
  store i32 %bf.clear20, i32* %34, align 8
  %35 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 56
  %36 = bitcast i24* %returns_struct to i32*
  %bf.load21 = load i32, i32* %36, align 8
  %bf.clear22 = and i32 %bf.load21, -2
  store i32 %bf.clear22, i32* %36, align 8
  %37 = load %struct.function*, %struct.function** @cfun, align 8
  %epilogue_delay_list = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 55
  store %struct.rtx_def* null, %struct.rtx_def** %epilogue_delay_list, align 8
  %38 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_const_pool = getelementptr inbounds %struct.function, %struct.function* %38, i32 0, i32 56
  %39 = bitcast i24* %uses_const_pool to i32*
  %bf.load23 = load i32, i32* %39, align 8
  %bf.clear24 = and i32 %bf.load23, -1048577
  store i32 %bf.clear24, i32* %39, align 8
  %40 = load %struct.function*, %struct.function** @cfun, align 8
  %uses_pic_offset_table = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 56
  %41 = bitcast i24* %uses_pic_offset_table to i32*
  %bf.load25 = load i32, i32* %41, align 8
  %bf.clear26 = and i32 %bf.load25, -2097153
  store i32 %bf.clear26, i32* %41, align 8
  %42 = load %struct.function*, %struct.function** @cfun, align 8
  %cannot_inline = getelementptr inbounds %struct.function, %struct.function* %42, i32 0, i32 16
  store i8* null, i8** %cannot_inline, align 8
  %43 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_label = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 28
  store %struct.rtx_def* null, %struct.rtx_def** %x_tail_recursion_label, align 8
  %44 = load %struct.function*, %struct.function** @cfun, align 8
  %x_arg_pointer_save_area = getelementptr inbounds %struct.function, %struct.function* %44, i32 0, i32 30
  store %struct.rtx_def* null, %struct.rtx_def** %x_arg_pointer_save_area, align 8
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %x_frame_offset = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 32
  store i64 0, i64* %x_frame_offset, align 8
  %46 = load %struct.function*, %struct.function** @cfun, align 8
  %x_save_expr_regs = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 25
  store %struct.rtx_def* null, %struct.rtx_def** %x_save_expr_regs, align 8
  %47 = load %struct.function*, %struct.function** @cfun, align 8
  %x_rtl_expr_chain = getelementptr inbounds %struct.function, %struct.function* %47, i32 0, i32 27
  store %union.tree_node* null, %union.tree_node** %x_rtl_expr_chain, align 8
  call void @init_temp_slots()
  store i32 1, i32* @rtx_equal_function_value_matters, align 4
  store i32 0, i32* @virtuals_instantiated, align 4
  store i32 1, i32* @generating_concat_p, align 4
  store i32 0, i32* @frame_pointer_needed, align 4
  %48 = load %struct.function*, %struct.function** @cfun, align 8
  %varargs = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 56
  %49 = bitcast i24* %varargs to i32*
  %bf.load27 = load i32, i32* %49, align 8
  %bf.clear28 = and i32 %bf.load27, -65537
  store i32 %bf.clear28, i32* %49, align 8
  %50 = load %struct.function*, %struct.function** @cfun, align 8
  %stdarg = getelementptr inbounds %struct.function, %struct.function* %50, i32 0, i32 56
  %51 = bitcast i24* %stdarg to i32*
  %bf.load29 = load i32, i32* %51, align 8
  %bf.clear30 = and i32 %bf.load29, -131073
  store i32 %bf.clear30, i32* %51, align 8
  %52 = load %struct.function*, %struct.function** @cfun, align 8
  %x_trampoline_list = getelementptr inbounds %struct.function, %struct.function* %52, i32 0, i32 34
  store %union.tree_node* null, %union.tree_node** %x_trampoline_list, align 8
  call void @init_pending_stack_adjust()
  %53 = load %struct.function*, %struct.function** @cfun, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %53, i32 0, i32 2
  %54 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status, %struct.expr_status* %54, i32 0, i32 1
  store i32 0, i32* %x_inhibit_defer_pop, align 4
  %55 = load %struct.function*, %struct.function** @cfun, align 8
  %outgoing_args_size = getelementptr inbounds %struct.function, %struct.function* %55, i32 0, i32 11
  store i32 0, i32* %outgoing_args_size, align 4
  %56 = load void (%struct.function*)*, void (%struct.function*)** @init_lang_status, align 8
  %tobool31 = icmp ne void (%struct.function*)* %56, null
  br i1 %tobool31, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %57 = load void (%struct.function*)*, void (%struct.function*)** @init_lang_status, align 8
  %58 = load %struct.function*, %struct.function** @cfun, align 8
  call void %57(%struct.function* %58)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %59 = load void (%struct.function*)*, void (%struct.function*)** @init_machine_status, align 8
  %tobool32 = icmp ne void (%struct.function*)* %59, null
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end
  %60 = load void (%struct.function*)*, void (%struct.function*)** @init_machine_status, align 8
  %61 = load %struct.function*, %struct.function** @cfun, align 8
  call void %60(%struct.function* %61)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_function_start(%union.tree_node* %subr, i8* %filename, i32 %line) #0 {
entry:
  %subr.addr = alloca %union.tree_node*, align 8
  %filename.addr = alloca i8*, align 8
  %line.addr = alloca i32, align 4
  store %union.tree_node* %subr, %union.tree_node** %subr.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %line, i32* %line.addr, align 4
  call void @prepare_function_start()
  %0 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** @decl_printable_name, align 8
  %1 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %call = call i8* %0(%union.tree_node* %1, i32 2)
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %name = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 5
  store i8* %call, i8** %name, align 8
  %3 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %decl = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 6
  store %union.tree_node* %3, %union.tree_node** %decl, align 8
  %5 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %call1 = call %union.tree_node* @decl_function_context(%union.tree_node* %5)
  %cmp = icmp ne %union.tree_node* %call1, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl2 = bitcast %union.tree_node* %6 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 5
  %7 = bitcast i48* %regdecl_flag to i64*
  %bf.load = load i64, i64* %7, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  %9 = load %struct.function*, %struct.function** @cfun, align 8
  %needs_context = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 56
  %10 = bitcast i24* %needs_context to i32*
  %bf.load3 = load i32, i32* %10, align 8
  %bf.value = and i32 %land.ext, 1
  %bf.shl = shl i32 %bf.value, 3
  %bf.clear4 = and i32 %bf.load3, -9
  %bf.set = or i32 %bf.clear4, %bf.shl
  store i32 %bf.set, i32* %10, align 8
  %11 = load i32, i32* @immediate_size_expand, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* @immediate_size_expand, align 4
  %12 = load i32, i32* %line.addr, align 4
  %cmp5 = icmp sgt i32 %12, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  %13 = load i8*, i8** %filename.addr, align 8
  %14 = load i32, i32* %line.addr, align 4
  %call6 = call %struct.rtx_def* @emit_line_note(i8* %13, i32 %14)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %call7 = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  %15 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl8 = bitcast %union.tree_node* %15 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 11
  %16 = load %union.tree_node*, %union.tree_node** %result, align 8
  %call9 = call i32 @aggregate_value_p(%union.tree_node* %16)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.15

if.then.11:                                       ; preds = %if.end
  %17 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 56
  %18 = bitcast i24* %returns_struct to i32*
  %bf.load12 = load i32, i32* %18, align 8
  %bf.clear13 = and i32 %bf.load12, -2
  %bf.set14 = or i32 %bf.clear13, 1
  store i32 %bf.set14, i32* %18, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.11, %if.end
  %19 = load i32, i32* @warn_aggregate_return, align 4
  %tobool16 = icmp ne i32 %19, 0
  br i1 %tobool16, label %land.lhs.true, label %if.end.63

land.lhs.true:                                    ; preds = %if.end.15
  %20 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl17 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %result18 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl17, i32 0, i32 11
  %21 = load %union.tree_node*, %union.tree_node** %result18, align 8
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common19 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2
  %bf.load20 = load i32, i32* %code, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 18
  br i1 %cmp22, label %if.then.62, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl23 = bitcast %union.tree_node* %23 to %struct.tree_decl*
  %result24 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl23, i32 0, i32 11
  %24 = load %union.tree_node*, %union.tree_node** %result24, align 8
  %common25 = bitcast %union.tree_node* %24 to %struct.tree_common*
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 1
  %25 = load %union.tree_node*, %union.tree_node** %type26, align 8
  %common27 = bitcast %union.tree_node* %25 to %struct.tree_common*
  %code28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2
  %bf.load29 = load i32, i32* %code28, align 8
  %bf.clear30 = and i32 %bf.load29, 255
  %cmp31 = icmp eq i32 %bf.clear30, 20
  br i1 %cmp31, label %if.then.62, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %lor.lhs.false
  %26 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl33 = bitcast %union.tree_node* %26 to %struct.tree_decl*
  %result34 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl33, i32 0, i32 11
  %27 = load %union.tree_node*, %union.tree_node** %result34, align 8
  %common35 = bitcast %union.tree_node* %27 to %struct.tree_common*
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 1
  %28 = load %union.tree_node*, %union.tree_node** %type36, align 8
  %common37 = bitcast %union.tree_node* %28 to %struct.tree_common*
  %code38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2
  %bf.load39 = load i32, i32* %code38, align 8
  %bf.clear40 = and i32 %bf.load39, 255
  %cmp41 = icmp eq i32 %bf.clear40, 21
  br i1 %cmp41, label %if.then.62, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %lor.lhs.false.32
  %29 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl43 = bitcast %union.tree_node* %29 to %struct.tree_decl*
  %result44 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl43, i32 0, i32 11
  %30 = load %union.tree_node*, %union.tree_node** %result44, align 8
  %common45 = bitcast %union.tree_node* %30 to %struct.tree_common*
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 1
  %31 = load %union.tree_node*, %union.tree_node** %type46, align 8
  %common47 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %code48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2
  %bf.load49 = load i32, i32* %code48, align 8
  %bf.clear50 = and i32 %bf.load49, 255
  %cmp51 = icmp eq i32 %bf.clear50, 22
  br i1 %cmp51, label %if.then.62, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.42
  %32 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl53 = bitcast %union.tree_node* %32 to %struct.tree_decl*
  %result54 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl53, i32 0, i32 11
  %33 = load %union.tree_node*, %union.tree_node** %result54, align 8
  %common55 = bitcast %union.tree_node* %33 to %struct.tree_common*
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 1
  %34 = load %union.tree_node*, %union.tree_node** %type56, align 8
  %common57 = bitcast %union.tree_node* %34 to %struct.tree_common*
  %code58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2
  %bf.load59 = load i32, i32* %code58, align 8
  %bf.clear60 = and i32 %bf.load59, 255
  %cmp61 = icmp eq i32 %bf.clear60, 19
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %lor.lhs.false.52, %lor.lhs.false.42, %lor.lhs.false.32, %lor.lhs.false, %land.lhs.true
  call void (i8*, ...) @warning(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.62, %lor.lhs.false.52, %if.end.15
  %35 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl64 = bitcast %union.tree_node* %35 to %struct.tree_decl*
  %result65 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl64, i32 0, i32 11
  %36 = load %union.tree_node*, %union.tree_node** %result65, align 8
  %common66 = bitcast %union.tree_node* %36 to %struct.tree_common*
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 1
  %37 = load %union.tree_node*, %union.tree_node** %type67, align 8
  %common68 = bitcast %union.tree_node* %37 to %struct.tree_common*
  %code69 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 2
  %bf.load70 = load i32, i32* %code69, align 8
  %bf.clear71 = and i32 %bf.load70, 255
  %cmp72 = icmp eq i32 %bf.clear71, 13
  br i1 %cmp72, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.63
  %38 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl73 = bitcast %union.tree_node* %38 to %struct.tree_decl*
  %result74 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl73, i32 0, i32 11
  %39 = load %union.tree_node*, %union.tree_node** %result74, align 8
  %common75 = bitcast %union.tree_node* %39 to %struct.tree_common*
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 1
  %40 = load %union.tree_node*, %union.tree_node** %type76, align 8
  %common77 = bitcast %union.tree_node* %40 to %struct.tree_common*
  %code78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2
  %bf.load79 = load i32, i32* %code78, align 8
  %bf.clear80 = and i32 %bf.load79, 255
  %cmp81 = icmp eq i32 %bf.clear80, 15
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.63
  %41 = phi i1 [ true, %if.end.63 ], [ %cmp81, %lor.rhs ]
  %lor.ext = zext i1 %41 to i32
  %42 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_pointer = getelementptr inbounds %struct.function, %struct.function* %42, i32 0, i32 56
  %43 = bitcast i24* %returns_pointer to i32*
  %bf.load82 = load i32, i32* %43, align 8
  %bf.value83 = and i32 %lor.ext, 1
  %bf.shl84 = shl i32 %bf.value83, 2
  %bf.clear85 = and i32 %bf.load82, -5
  %bf.set86 = or i32 %bf.clear85, %bf.shl84
  store i32 %bf.set86, i32* %43, align 8
  ret void
}

declare %struct.rtx_def* @emit_line_note(i8*, i32) #2

declare %struct.rtx_def* @emit_note(i8*, i32) #2

declare void @warning(i8*, ...) #2

; Function Attrs: nounwind uwtable
define void @init_function_for_compilation() #0 {
entry:
  store i16* null, i16** @reg_renumber, align 8
  %0 = load %struct.varray_head_tag*, %struct.varray_head_tag** @prologue, align 8
  %call = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %0, i64 0)
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** @prologue, align 8
  %1 = load %struct.varray_head_tag*, %struct.varray_head_tag** @epilogue, align 8
  %call1 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %1, i64 0)
  store %struct.varray_head_tag* %call1, %struct.varray_head_tag** @epilogue, align 8
  %2 = load %struct.varray_head_tag*, %struct.varray_head_tag** @sibcall_epilogue, align 8
  %call2 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %2, i64 0)
  store %struct.varray_head_tag* %call2, %struct.varray_head_tag** @sibcall_epilogue, align 8
  ret void
}

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #2

; Function Attrs: nounwind uwtable
define void @mark_varargs() #0 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %varargs = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 56
  %1 = bitcast i24* %varargs to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, -65537
  %bf.set = or i32 %bf.clear, 65536
  store i32 %bf.set, i32* %1, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_main_function() #0 {
entry:
  %align = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %0 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %1 = load i32, i32* @target_flags, align 4
  %and = and i32 %1, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 64, i32 32
  %cmp = icmp sgt i32 %0, %cond
  br i1 %cmp, label %land.lhs.true, label %if.end.34

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @target_flags, align 4
  %and1 = and i32 %2, 33554432
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.end.34, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32, i32* @ix86_preferred_stack_boundary, align 4
  %div = sdiv i32 %3, 8
  store i32 %div, i32* %align, align 4
  call void @start_sequence()
  %4 = load i32, i32* @target_flags, align 4
  %and4 = and i32 %4, 33554432
  %tobool5 = icmp ne i32 %and4, 0
  %cond6 = select i1 %tobool5, i32 5, i32 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %6 = load i32, i32* %align, align 4
  %sub = sub nsw i32 0, %6
  %conv = sext i32 %sub to i64
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv)
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %call7 = call %struct.rtx_def* @expand_simple_binop(i32 %cond6, i32 83, %struct.rtx_def* %5, %struct.rtx_def* %call, %struct.rtx_def* %7, i32 1, i32 2)
  store %struct.rtx_def* %call7, %struct.rtx_def** %tmp, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp8 = icmp ne %struct.rtx_def* %8, %9
  br i1 %cmp8, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call11 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %11)
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  %12 = load i32, i32* @target_flags, align 4
  %and12 = and i32 %12, 33554432
  %tobool13 = icmp ne i32 %and12, 0
  %cond14 = select i1 %tobool13, i32 5, i32 4
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call15 = call %struct.rtx_def* @force_reg(i32 %cond14, %struct.rtx_def* %13)
  store %struct.rtx_def* %call15, %struct.rtx_def** %tmp, align 8
  %14 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call16 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %14, %struct.rtx_def* null, i32 128)
  %call17 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call17, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %call18 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call18, %struct.rtx_def** %tmp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %tobool19 = icmp ne %struct.rtx_def* %15, null
  br i1 %tobool19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load = load i32, i32* %17, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp20 = icmp eq i32 %bf.clear, 37
  br i1 %cmp20, label %land.lhs.true.22, label %if.end.26

land.lhs.true.22:                                 ; preds = %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %19 = load i32, i32* %rtint, align 4
  %cmp23 = icmp eq i32 %19, -87
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %land.lhs.true.22
  br label %for.end

if.end.26:                                        ; preds = %land.lhs.true.22, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %20 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %21, %struct.rtx_def** %tmp, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.25, %for.cond
  %22 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %tobool29 = icmp ne %struct.rtx_def* %22, null
  br i1 %tobool29, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %for.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8
  %call31 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %23, %struct.rtx_def* %24)
  br label %if.end.33

if.else:                                          ; preds = %for.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call32 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %25)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else, %if.then.30
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %land.lhs.true, %entry
  ret void
}

declare void @start_sequence() #2

declare %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare %struct.rtx_def* @gen_sequence() #2

declare %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_pending_sizes(%union.tree_node* %pending_sizes) #0 {
entry:
  %pending_sizes.addr = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  store %union.tree_node* %pending_sizes, %union.tree_node** %pending_sizes.addr, align 8
  %0 = load %union.tree_node*, %union.tree_node** %pending_sizes.addr, align 8
  store %union.tree_node* %0, %union.tree_node** %tem, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %tobool = icmp ne %union.tree_node* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %list = bitcast %union.tree_node* %2 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i32 0, i64 64), align 8
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %3, %struct.rtx_def* %4, i32 0, i32 0)
  call void @emit_queue()
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %6 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %6, %union.tree_node** %tem, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @emit_queue() #2

; Function Attrs: nounwind uwtable
define void @expand_function_start(%union.tree_node* %subr, i32 %parms_have_cleanups) #0 {
entry:
  %subr.addr = alloca %union.tree_node*, align 8
  %parms_have_cleanups.addr = alloca i32, align 4
  %tem = alloca %union.tree_node*, align 8
  %last_ptr = alloca %struct.rtx_def*, align 8
  %value_address = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %hard_reg = alloca %struct.rtx_def*, align 8
  %rtlexp = alloca %union.tree_node*, align 8
  %fun = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %subr, %union.tree_node** %subr.addr, align 8
  store i32 %parms_have_cleanups, i32* %parms_have_cleanups.addr, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %last_ptr, align 8
  call void @init_recog_no_volatile()
  %0 = load i32, i32* @flag_instrument_function_entry_exit, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %no_instrument_function_entry_exit = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 5
  %2 = bitcast i48* %no_instrument_function_entry_exit to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 25
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool1 = icmp ne i32 %bf.cast, 0
  %lnot = xor i1 %tobool1, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %instrument_entry_exit = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 56
  %5 = bitcast i24* %instrument_entry_exit to i32*
  %bf.load2 = load i32, i32* %5, align 8
  %bf.value = and i32 %land.ext, 1
  %bf.shl = shl i32 %bf.value, 13
  %bf.clear3 = and i32 %bf.load2, -8193
  %bf.set = or i32 %bf.clear3, %bf.shl
  store i32 %bf.set, i32* %5, align 8
  %6 = load i32, i32* @profile_flag, align 4
  %tobool4 = icmp ne i32 %6, 0
  br i1 %tobool4, label %land.rhs.5, label %land.end.14

land.rhs.5:                                       ; preds = %land.end
  %7 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl6 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %no_instrument_function_entry_exit7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 5
  %8 = bitcast i48* %no_instrument_function_entry_exit7 to i64*
  %bf.load8 = load i64, i64* %8, align 8
  %bf.lshr9 = lshr i64 %bf.load8, 25
  %bf.clear10 = and i64 %bf.lshr9, 1
  %bf.cast11 = trunc i64 %bf.clear10 to i32
  %tobool12 = icmp ne i32 %bf.cast11, 0
  %lnot13 = xor i1 %tobool12, true
  br label %land.end.14

land.end.14:                                      ; preds = %land.rhs.5, %land.end
  %9 = phi i1 [ false, %land.end ], [ %lnot13, %land.rhs.5 ]
  %land.ext15 = zext i1 %9 to i32
  %10 = load %struct.function*, %struct.function** @cfun, align 8
  %profile = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 56
  %11 = bitcast i24* %profile to i32*
  %bf.load16 = load i32, i32* %11, align 8
  %bf.value17 = and i32 %land.ext15, 1
  %bf.shl18 = shl i32 %bf.value17, 14
  %bf.clear19 = and i32 %bf.load16, -16385
  %bf.set20 = or i32 %bf.clear19, %bf.shl18
  store i32 %bf.set20, i32* %11, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** @stack_limit_rtx, align 8
  %cmp = icmp ne %struct.rtx_def* %12, null
  br i1 %cmp, label %land.rhs.21, label %land.end.29

land.rhs.21:                                      ; preds = %land.end.14
  %13 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl22 = bitcast %union.tree_node* %13 to %struct.tree_decl*
  %no_limit_stack = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl22, i32 0, i32 5
  %14 = bitcast i48* %no_limit_stack to i64*
  %bf.load23 = load i64, i64* %14, align 8
  %bf.lshr24 = lshr i64 %bf.load23, 28
  %bf.clear25 = and i64 %bf.lshr24, 1
  %bf.cast26 = trunc i64 %bf.clear25 to i32
  %tobool27 = icmp ne i32 %bf.cast26, 0
  %lnot28 = xor i1 %tobool27, true
  br label %land.end.29

land.end.29:                                      ; preds = %land.rhs.21, %land.end.14
  %15 = phi i1 [ false, %land.end.14 ], [ %lnot28, %land.rhs.21 ]
  %land.ext30 = zext i1 %15 to i32
  %16 = load %struct.function*, %struct.function** @cfun, align 8
  %limit_stack = getelementptr inbounds %struct.function, %struct.function* %16, i32 0, i32 56
  %17 = bitcast i24* %limit_stack to i32*
  %bf.load31 = load i32, i32* %17, align 8
  %bf.value32 = and i32 %land.ext30, 1
  %bf.shl33 = shl i32 %bf.value32, 15
  %bf.clear34 = and i32 %bf.load31, -32769
  %bf.set35 = or i32 %bf.clear34, %bf.shl33
  store i32 %bf.set35, i32* %17, align 8
  %18 = load %struct.function*, %struct.function** @cfun, align 8
  %needs_context = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 56
  %19 = bitcast i24* %needs_context to i32*
  %bf.load36 = load i32, i32* %19, align 8
  %bf.lshr37 = lshr i32 %bf.load36, 3
  %bf.clear38 = and i32 %bf.lshr37, 1
  %tobool39 = icmp ne i32 %bf.clear38, 0
  br i1 %tobool39, label %if.then, label %if.end.50

if.then:                                          ; preds = %land.end.29
  %20 = load i32, i32* @target_flags, align 4
  %and = and i32 %20, 33554432
  %tobool40 = icmp ne i32 %and, 0
  %cond = select i1 %tobool40, i32 5, i32 4
  %21 = load i32, i32* @target_flags, align 4
  %and41 = and i32 %21, 33554432
  %tobool42 = icmp ne i32 %and41, 0
  %cond43 = select i1 %tobool42, i32 5, i32 4
  %idxprom = sext i32 %cond43 to i64
  %arrayidx = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %22 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %22 to i64
  %call = call %struct.rtx_def* @assign_stack_local(i32 %cond, i64 %conv, i32 0)
  store %struct.rtx_def* %call, %struct.rtx_def** %last_ptr, align 8
  %23 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_incoming_rtx, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load44 = load i32, i32* %24, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp eq i32 %bf.clear45, 61
  br i1 %cmp46, label %if.then.48, label %if.end

if.then.48:                                       ; preds = %if.then
  %25 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_incoming_rtx, align 8
  %call49 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %25, %struct.rtx_def* %26)
  br label %if.end

if.end:                                           ; preds = %if.then.48, %if.then
  br label %if.end.50

if.end.50:                                        ; preds = %if.end, %land.end.29
  %27 = load i32, i32* %parms_have_cleanups.addr, align 4
  %tobool51 = icmp ne i32 %27, 0
  br i1 %tobool51, label %if.then.52, label %if.else

if.then.52:                                       ; preds = %if.end.50
  %call53 = call %struct.rtx_def* @gen_label_rtx()
  %28 = load %struct.function*, %struct.function** @cfun, align 8
  %x_cleanup_label = getelementptr inbounds %struct.function, %struct.function* %28, i32 0, i32 23
  store %struct.rtx_def* %call53, %struct.rtx_def** %x_cleanup_label, align 8
  br label %if.end.55

if.else:                                          ; preds = %if.end.50
  %29 = load %struct.function*, %struct.function** @cfun, align 8
  %x_cleanup_label54 = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 23
  store %struct.rtx_def* null, %struct.rtx_def** %x_cleanup_label54, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.else, %if.then.52
  %call56 = call %struct.rtx_def* @gen_label_rtx()
  %30 = load %struct.function*, %struct.function** @cfun, align 8
  %x_return_label = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 24
  store %struct.rtx_def* %call56, %struct.rtx_def** %x_return_label, align 8
  %31 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl57 = bitcast %union.tree_node* %31 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl57, i32 0, i32 11
  %32 = load %union.tree_node*, %union.tree_node** %result, align 8
  %call58 = call i32 @aggregate_value_p(%union.tree_node* %32)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.then.60, label %if.else.84

if.then.60:                                       ; preds = %if.end.55
  store %struct.rtx_def* null, %struct.rtx_def** %value_address, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_incoming_rtx, align 8
  %tobool61 = icmp ne %struct.rtx_def* %33, null
  br i1 %tobool61, label %if.then.62, label %if.end.68

if.then.62:                                       ; preds = %if.then.60
  %34 = load i32, i32* @target_flags, align 4
  %and63 = and i32 %34, 33554432
  %tobool64 = icmp ne i32 %and63, 0
  %cond65 = select i1 %tobool64, i32 5, i32 4
  %call66 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond65)
  store %struct.rtx_def* %call66, %struct.rtx_def** %value_address, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** @struct_value_incoming_rtx, align 8
  %call67 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %35, %struct.rtx_def* %36)
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.62, %if.then.60
  %37 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8
  %tobool69 = icmp ne %struct.rtx_def* %37, null
  br i1 %tobool69, label %if.then.70, label %if.end.83

if.then.70:                                       ; preds = %if.end.68
  %38 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl71 = bitcast %union.tree_node* %38 to %struct.tree_decl*
  %result72 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl71, i32 0, i32 11
  %39 = load %union.tree_node*, %union.tree_node** %result72, align 8
  %decl73 = bitcast %union.tree_node* %39 to %struct.tree_decl*
  %mode = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl73, i32 0, i32 5
  %40 = bitcast i48* %mode to i64*
  %bf.load74 = load i64, i64* %40, align 8
  %bf.clear75 = and i64 %bf.load74, 255
  %bf.cast76 = trunc i64 %bf.clear75 to i32
  %41 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8
  %call77 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast76, %struct.rtx_def* %41)
  store %struct.rtx_def* %call77, %struct.rtx_def** %x, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %43 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl78 = bitcast %union.tree_node* %43 to %struct.tree_decl*
  %result79 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl78, i32 0, i32 11
  %44 = load %union.tree_node*, %union.tree_node** %result79, align 8
  call void @set_mem_attributes(%struct.rtx_def* %42, %union.tree_node* %44, i32 1)
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %46 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl80 = bitcast %union.tree_node* %46 to %struct.tree_decl*
  %result81 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl80, i32 0, i32 11
  %47 = load %union.tree_node*, %union.tree_node** %result81, align 8
  %decl82 = bitcast %union.tree_node* %47 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl82, i32 0, i32 17
  store %struct.rtx_def* %45, %struct.rtx_def** %rtl, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.70, %if.end.68
  br label %if.end.129

if.else.84:                                       ; preds = %if.end.55
  %48 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl85 = bitcast %union.tree_node* %48 to %struct.tree_decl*
  %result86 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl85, i32 0, i32 11
  %49 = load %union.tree_node*, %union.tree_node** %result86, align 8
  %decl87 = bitcast %union.tree_node* %49 to %struct.tree_decl*
  %mode88 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl87, i32 0, i32 5
  %50 = bitcast i48* %mode88 to i64*
  %bf.load89 = load i64, i64* %50, align 8
  %bf.clear90 = and i64 %bf.load89, 255
  %bf.cast91 = trunc i64 %bf.clear90 to i32
  %cmp92 = icmp eq i32 %bf.cast91, 0
  br i1 %cmp92, label %if.then.94, label %if.else.99

if.then.94:                                       ; preds = %if.else.84
  %51 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl95 = bitcast %union.tree_node* %51 to %struct.tree_decl*
  %result96 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl95, i32 0, i32 11
  %52 = load %union.tree_node*, %union.tree_node** %result96, align 8
  %decl97 = bitcast %union.tree_node* %52 to %struct.tree_decl*
  %rtl98 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl97, i32 0, i32 17
  store %struct.rtx_def* null, %struct.rtx_def** %rtl98, align 8
  br label %if.end.128

if.else.99:                                       ; preds = %if.else.84
  %53 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl100 = bitcast %union.tree_node* %53 to %struct.tree_decl*
  %result101 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl100, i32 0, i32 11
  %54 = load %union.tree_node*, %union.tree_node** %result101, align 8
  %common = bitcast %union.tree_node* %54 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8
  %56 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %call102 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %55, %union.tree_node* %56, i32 1)
  store %struct.rtx_def* %call102, %struct.rtx_def** %hard_reg, align 8
  %57 = load %struct.rtx_def*, %struct.rtx_def** %hard_reg, align 8
  %58 = bitcast %struct.rtx_def* %57 to i32*
  %bf.load103 = load i32, i32* %58, align 8
  %bf.clear104 = and i32 %bf.load103, 65535
  %cmp105 = icmp eq i32 %bf.clear104, 61
  br i1 %cmp105, label %if.else.112, label %if.then.107

if.then.107:                                      ; preds = %if.else.99
  %59 = load %struct.rtx_def*, %struct.rtx_def** %hard_reg, align 8
  %60 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl108 = bitcast %union.tree_node* %60 to %struct.tree_decl*
  %result109 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl108, i32 0, i32 11
  %61 = load %union.tree_node*, %union.tree_node** %result109, align 8
  %decl110 = bitcast %union.tree_node* %61 to %struct.tree_decl*
  %rtl111 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl110, i32 0, i32 17
  store %struct.rtx_def* %59, %struct.rtx_def** %rtl111, align 8
  br label %if.end.127

if.else.112:                                      ; preds = %if.else.99
  %62 = load %struct.rtx_def*, %struct.rtx_def** %hard_reg, align 8
  %63 = bitcast %struct.rtx_def* %62 to i32*
  %bf.load113 = load i32, i32* %63, align 8
  %bf.lshr114 = lshr i32 %bf.load113, 16
  %bf.clear115 = and i32 %bf.lshr114, 255
  %call116 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear115)
  %64 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl117 = bitcast %union.tree_node* %64 to %struct.tree_decl*
  %result118 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl117, i32 0, i32 11
  %65 = load %union.tree_node*, %union.tree_node** %result118, align 8
  %decl119 = bitcast %union.tree_node* %65 to %struct.tree_decl*
  %rtl120 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl119, i32 0, i32 17
  store %struct.rtx_def* %call116, %struct.rtx_def** %rtl120, align 8
  %66 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  %decl121 = bitcast %union.tree_node* %66 to %struct.tree_decl*
  %result122 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl121, i32 0, i32 11
  %67 = load %union.tree_node*, %union.tree_node** %result122, align 8
  %decl123 = bitcast %union.tree_node* %67 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl123, i32 0, i32 5
  %68 = bitcast i48* %regdecl_flag to i64*
  %bf.load124 = load i64, i64* %68, align 8
  %bf.clear125 = and i64 %bf.load124, -1025
  %bf.set126 = or i64 %bf.clear125, 1024
  store i64 %bf.set126, i64* %68, align 8
  br label %if.end.127

if.end.127:                                       ; preds = %if.else.112, %if.then.107
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.then.94
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.end.83
  %69 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8
  call void @assign_parms(%union.tree_node* %69)
  %70 = load %struct.function*, %struct.function** @cfun, align 8
  %needs_context130 = getelementptr inbounds %struct.function, %struct.function* %70, i32 0, i32 56
  %71 = bitcast i24* %needs_context130 to i32*
  %bf.load131 = load i32, i32* %71, align 8
  %bf.lshr132 = lshr i32 %bf.load131, 3
  %bf.clear133 = and i32 %bf.lshr132, 1
  %tobool134 = icmp ne i32 %bf.clear133, 0
  br i1 %tobool134, label %if.then.135, label %if.end.143

if.then.135:                                      ; preds = %if.end.129
  %72 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_incoming_rtx, align 8
  %73 = bitcast %struct.rtx_def* %72 to i32*
  %bf.load136 = load i32, i32* %73, align 8
  %bf.clear137 = and i32 %bf.load136, 65535
  %cmp138 = icmp ne i32 %bf.clear137, 61
  br i1 %cmp138, label %if.then.140, label %if.end.142

if.then.140:                                      ; preds = %if.then.135
  %74 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_incoming_rtx, align 8
  %call141 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %74, %struct.rtx_def* %75)
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.140, %if.then.135
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %if.end.129
  %call144 = call %struct.rtx_def* @emit_note(i8* null, i32 -87)
  %call145 = call %struct.rtx_def* @get_last_insn()
  %76 = bitcast %struct.rtx_def* %call145 to i32*
  %bf.load146 = load i32, i32* %76, align 8
  %bf.clear147 = and i32 %bf.load146, 65535
  %cmp148 = icmp ne i32 %bf.clear147, 37
  br i1 %cmp148, label %if.then.150, label %if.end.152

if.then.150:                                      ; preds = %if.end.143
  %call151 = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  br label %if.end.152

if.end.152:                                       ; preds = %if.then.150, %if.end.143
  %call153 = call %struct.rtx_def* @get_last_insn()
  %77 = load %struct.function*, %struct.function** @cfun, align 8
  %x_parm_birth_insn = getelementptr inbounds %struct.function, %struct.function* %77, i32 0, i32 35
  store %struct.rtx_def* %call153, %struct.rtx_def** %x_parm_birth_insn, align 8
  %78 = load %struct.function*, %struct.function** @cfun, align 8
  %x_context_display = getelementptr inbounds %struct.function, %struct.function* %78, i32 0, i32 33
  store %union.tree_node* null, %union.tree_node** %x_context_display, align 8
  %79 = load %struct.function*, %struct.function** @cfun, align 8
  %needs_context154 = getelementptr inbounds %struct.function, %struct.function* %79, i32 0, i32 56
  %80 = bitcast i24* %needs_context154 to i32*
  %bf.load155 = load i32, i32* %80, align 8
  %bf.lshr156 = lshr i32 %bf.load155, 3
  %bf.clear157 = and i32 %bf.lshr156, 1
  %tobool158 = icmp ne i32 %bf.clear157, 0
  br i1 %tobool158, label %if.then.159, label %if.end.205

if.then.159:                                      ; preds = %if.end.152
  %81 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %call160 = call %union.tree_node* @decl_function_context(%union.tree_node* %81)
  store %union.tree_node* %call160, %union.tree_node** %tem, align 8
  %82 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %tobool161 = icmp ne %union.tree_node* %82, null
  br i1 %tobool161, label %if.then.162, label %if.end.171

if.then.162:                                      ; preds = %if.then.159
  %83 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_incoming_rtx, align 8
  %84 = bitcast %struct.rtx_def* %83 to i32*
  %bf.load163 = load i32, i32* %84, align 8
  %bf.clear164 = and i32 %bf.load163, 65535
  %cmp165 = icmp eq i32 %bf.clear164, 61
  br i1 %cmp165, label %if.then.167, label %if.end.169

if.then.167:                                      ; preds = %if.then.162
  %85 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_incoming_rtx, align 8
  %86 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %call168 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %85, %struct.rtx_def* %86)
  br label %if.end.169

if.end.169:                                       ; preds = %if.then.167, %if.then.162
  %87 = load %struct.rtx_def*, %struct.rtx_def** @static_chain_incoming_rtx, align 8
  %call170 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %87)
  store %struct.rtx_def* %call170, %struct.rtx_def** %last_ptr, align 8
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.169, %if.then.159
  br label %while.cond

while.cond:                                       ; preds = %if.end.204, %if.end.171
  %88 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %tobool172 = icmp ne %union.tree_node* %88, null
  br i1 %tobool172, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call173 = call %union.tree_node* @make_node(i32 120)
  store %union.tree_node* %call173, %union.tree_node** %rtlexp, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %90 = load %union.tree_node*, %union.tree_node** %rtlexp, align 8
  %exp = bitcast %union.tree_node* %90 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx174 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %91 = bitcast %union.tree_node** %arrayidx174 to %struct.rtx_def**
  store %struct.rtx_def* %89, %struct.rtx_def** %91, align 8
  %92 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %93 = load %union.tree_node*, %union.tree_node** %rtlexp, align 8
  %94 = load %struct.function*, %struct.function** @cfun, align 8
  %x_context_display175 = getelementptr inbounds %struct.function, %struct.function* %94, i32 0, i32 33
  %95 = load %union.tree_node*, %union.tree_node** %x_context_display175, align 8
  %call176 = call %union.tree_node* @tree_cons(%union.tree_node* %92, %union.tree_node* %93, %union.tree_node* %95)
  %96 = load %struct.function*, %struct.function** @cfun, align 8
  %x_context_display177 = getelementptr inbounds %struct.function, %struct.function* %96, i32 0, i32 33
  store %union.tree_node* %call176, %union.tree_node** %x_context_display177, align 8
  %97 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %call178 = call %union.tree_node* @decl_function_context(%union.tree_node* %97)
  store %union.tree_node* %call178, %union.tree_node** %tem, align 8
  %98 = load %union.tree_node*, %union.tree_node** %tem, align 8
  %cmp179 = icmp eq %union.tree_node* %98, null
  br i1 %cmp179, label %if.then.181, label %if.end.182

if.then.181:                                      ; preds = %while.body
  br label %while.end

if.end.182:                                       ; preds = %while.body
  %99 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %100 = load i32, i32* @target_flags, align 4
  %and183 = and i32 %100, 33554432
  %tobool184 = icmp ne i32 %and183, 0
  %cond185 = select i1 %tobool184, i32 5, i32 4
  %idxprom186 = sext i32 %cond185 to i64
  %arrayidx187 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom186
  %101 = load i8, i8* %arrayidx187, align 1
  %conv188 = zext i8 %101 to i64
  %sub = sub nsw i64 0, %conv188
  %call189 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %99, i64 %sub)
  store %struct.rtx_def* %call189, %struct.rtx_def** %last_ptr, align 8
  %102 = load i32, i32* @target_flags, align 4
  %and190 = and i32 %102, 33554432
  %tobool191 = icmp ne i32 %and190, 0
  %cond192 = select i1 %tobool191, i32 5, i32 4
  %103 = load i32, i32* @target_flags, align 4
  %and193 = and i32 %103, 33554432
  %tobool194 = icmp ne i32 %and193, 0
  %cond195 = select i1 %tobool194, i32 5, i32 4
  %104 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %call196 = call %struct.rtx_def* @memory_address(i32 %cond195, %struct.rtx_def* %104)
  %call197 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond192, %struct.rtx_def* %call196)
  store %struct.rtx_def* %call197, %struct.rtx_def** %last_ptr, align 8
  %105 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %call198 = call i64 @get_frame_alias_set()
  call void @set_mem_alias_set(%struct.rtx_def* %105, i64 %call198)
  %106 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %call199 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %106)
  store %struct.rtx_def* %call199, %struct.rtx_def** %last_ptr, align 8
  %107 = load i32, i32* @optimize, align 4
  %tobool200 = icmp ne i32 %107, 0
  br i1 %tobool200, label %if.end.204, label %if.then.201

if.then.201:                                      ; preds = %if.end.182
  %108 = load %struct.rtx_def*, %struct.rtx_def** %last_ptr, align 8
  %109 = load %struct.function*, %struct.function** @cfun, align 8
  %x_save_expr_regs = getelementptr inbounds %struct.function, %struct.function* %109, i32 0, i32 25
  %110 = load %struct.rtx_def*, %struct.rtx_def** %x_save_expr_regs, align 8
  %call202 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %108, %struct.rtx_def* %110)
  %111 = load %struct.function*, %struct.function** @cfun, align 8
  %x_save_expr_regs203 = getelementptr inbounds %struct.function, %struct.function* %111, i32 0, i32 25
  store %struct.rtx_def* %call202, %struct.rtx_def** %x_save_expr_regs203, align 8
  br label %if.end.204

if.end.204:                                       ; preds = %if.then.201, %if.end.182
  br label %while.cond

while.end:                                        ; preds = %if.then.181, %while.cond
  br label %if.end.205

if.end.205:                                       ; preds = %while.end, %if.end.152
  %112 = load %struct.function*, %struct.function** @cfun, align 8
  %instrument_entry_exit206 = getelementptr inbounds %struct.function, %struct.function* %112, i32 0, i32 56
  %113 = bitcast i24* %instrument_entry_exit206 to i32*
  %bf.load207 = load i32, i32* %113, align 8
  %bf.lshr208 = lshr i32 %bf.load207, 13
  %bf.clear209 = and i32 %bf.lshr208, 1
  %tobool210 = icmp ne i32 %bf.clear209, 0
  br i1 %tobool210, label %if.then.211, label %if.end.235

if.then.211:                                      ; preds = %if.end.205
  %114 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl212 = bitcast %union.tree_node* %114 to %struct.tree_decl*
  %rtl213 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl212, i32 0, i32 17
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rtl213, align 8
  %tobool214 = icmp ne %struct.rtx_def* %115, null
  br i1 %tobool214, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.211
  %116 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl215 = bitcast %union.tree_node* %116 to %struct.tree_decl*
  %rtl216 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl215, i32 0, i32 17
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rtl216, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.211
  %118 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  call void @make_decl_rtl(%union.tree_node* %118, i8* null)
  %119 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl217 = bitcast %union.tree_node* %119 to %struct.tree_decl*
  %rtl218 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl217, i32 0, i32 17
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rtl218, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond219 = phi %struct.rtx_def* [ %117, %cond.true ], [ %120, %cond.false ]
  store %struct.rtx_def* %cond219, %struct.rtx_def** %fun, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8
  %122 = bitcast %struct.rtx_def* %121 to i32*
  %bf.load220 = load i32, i32* %122, align 8
  %bf.clear221 = and i32 %bf.load220, 65535
  %cmp222 = icmp eq i32 %bf.clear221, 66
  br i1 %cmp222, label %if.then.224, label %if.else.226

if.then.224:                                      ; preds = %cond.end
  %123 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx225 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx225 to %struct.rtx_def**
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %124, %struct.rtx_def** %fun, align 8
  br label %if.end.227

if.else.226:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 6689, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__FUNCTION__.expand_function_start, i32 0, i32 0)) #6
  unreachable

if.end.227:                                       ; preds = %if.then.224
  %125 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 95), align 8
  %126 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8
  %127 = load i32, i32* @target_flags, align 4
  %and228 = and i32 %127, 33554432
  %tobool229 = icmp ne i32 %and228, 0
  %cond230 = select i1 %tobool229, i32 5, i32 4
  %128 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call231 = call %struct.rtx_def* @expand_builtin_return_addr(i32 53, i32 0, %struct.rtx_def* %128)
  %129 = load i32, i32* @target_flags, align 4
  %and232 = and i32 %129, 33554432
  %tobool233 = icmp ne i32 %and232, 0
  %cond234 = select i1 %tobool233, i32 5, i32 4
  call void (%struct.rtx_def*, i32, i32, i32, ...) @emit_library_call(%struct.rtx_def* %125, i32 0, i32 0, i32 2, %struct.rtx_def* %126, i32 %cond230, %struct.rtx_def* %call231, i32 %cond234)
  br label %if.end.235

if.end.235:                                       ; preds = %if.end.227, %if.end.205
  %130 = load %struct.function*, %struct.function** @cfun, align 8
  %profile236 = getelementptr inbounds %struct.function, %struct.function* %130, i32 0, i32 56
  %131 = bitcast i24* %profile236 to i32*
  %bf.load237 = load i32, i32* %131, align 8
  %bf.lshr238 = lshr i32 %bf.load237, 14
  %bf.clear239 = and i32 %bf.lshr238, 1
  %tobool240 = icmp ne i32 %bf.clear239, 0
  br i1 %tobool240, label %if.then.241, label %if.end.242

if.then.241:                                      ; preds = %if.end.235
  %132 = load i32, i32* @profile_label_no, align 4
  %inc = add nsw i32 %132, 1
  store i32 %inc, i32* @profile_label_no, align 4
  %133 = load %struct.function*, %struct.function** @cfun, align 8
  %profile_label_no = getelementptr inbounds %struct.function, %struct.function* %133, i32 0, i32 50
  store i32 %132, i32* %profile_label_no, align 4
  br label %if.end.242

if.end.242:                                       ; preds = %if.then.241, %if.end.235
  %call243 = call %struct.rtx_def* @emit_note(i8* null, i32 -99)
  %134 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_reentry = getelementptr inbounds %struct.function, %struct.function* %134, i32 0, i32 29
  store %struct.rtx_def* %call243, %struct.rtx_def** %x_tail_recursion_reentry, align 8
  %call244 = call %union.tree_node* @get_pending_sizes()
  %call245 = call %union.tree_node* @nreverse(%union.tree_node* %call244)
  call void @expand_pending_sizes(%union.tree_node* %call245)
  call void @force_next_line_note()
  ret void
}

declare void @init_recog_no_volatile() #2

declare %struct.rtx_def* @gen_label_rtx() #2

declare void @emit_library_call(%struct.rtx_def*, i32, i32, i32, ...) #2

declare %struct.rtx_def* @expand_builtin_return_addr(i32, i32, %struct.rtx_def*) #2

declare %union.tree_node* @nreverse(%union.tree_node*) #2

declare %union.tree_node* @get_pending_sizes() #2

declare void @force_next_line_note() #2

; Function Attrs: nounwind uwtable
define void @expand_dummy_function_end() #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %call = call i32 @in_sequence_p()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @end_sequence()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  call void @free_after_parsing(%struct.function* %0)
  %1 = load %struct.function*, %struct.function** @cfun, align 8
  call void @free_after_compilation(%struct.function* %1)
  store %struct.function* null, %struct.function** @cfun, align 8
  ret void
}

declare i32 @in_sequence_p() #2

; Function Attrs: nounwind uwtable
define void @diddle_return_value(void (%struct.rtx_def*, i8*)* %doit, i8* %arg) #0 {
entry:
  %doit.addr = alloca void (%struct.rtx_def*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %outgoing = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store void (%struct.rtx_def*, i8*)* %doit, void (%struct.rtx_def*, i8*)** %doit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %return_rtx = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 14
  %1 = load %struct.rtx_def*, %struct.rtx_def** %return_rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %outgoing, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %tobool = icmp ne %struct.rtx_def* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.22

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %5 = load void (%struct.rtx_def*, i8*)*, void (%struct.rtx_def*, i8*)** %doit.addr, align 8
  %6 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %7 = load i8*, i8** %arg.addr, align 8
  call void %5(%struct.rtx_def* %6, i8* %7)
  br label %if.end.22

if.else:                                          ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load2 = load i32, i32* %9, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 39
  br i1 %cmp4, label %if.then.5, label %if.end.21

if.then.5:                                        ; preds = %if.else
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.5
  %10 = load i32, i32* %i, align 4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %12 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %12, i32 0, i32 0
  %13 = load i32, i32* %num_elem, align 4
  %cmp6 = icmp slt i32 %10, %13
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %i, align 4
  %idxprom = sext i32 %14 to i64
  %15 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtvec9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec9, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx10, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %x, align 8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load13 = load i32, i32* %20, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 61
  br i1 %cmp15, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %for.body
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %22 = load i32, i32* %rtuint, align 4
  %cmp18 = icmp ult i32 %22, 53
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %land.lhs.true
  %23 = load void (%struct.rtx_def*, i8*)*, void (%struct.rtx_def*, i8*)** %doit.addr, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %25 = load i8*, i8** %arg.addr, align 8
  call void %23(%struct.rtx_def* %24, i8* %25)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.20
  %26 = load i32, i32* %i, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.21

if.end.21:                                        ; preds = %for.end, %if.else
  br label %if.end.22

if.end.22:                                        ; preds = %if.then, %if.end.21, %if.then.1
  ret void
}

; Function Attrs: nounwind uwtable
define void @clobber_return_register() #0 {
entry:
  %decl_result = alloca %union.tree_node*, align 8
  %decl_rtl = alloca %struct.rtx_def*, align 8
  call void @diddle_return_value(void (%struct.rtx_def*, i8*)* @do_clobber_return_reg, i8* null)
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl = bitcast %union.tree_node* %0 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 11
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8
  %decl1 = bitcast %union.tree_node* %1 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 17
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp = icmp ne %struct.rtx_def* %2, null
  br i1 %cmp, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl2 = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %result3 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl2, i32 0, i32 11
  %4 = load %union.tree_node*, %union.tree_node** %result3, align 8
  store %union.tree_node* %4, %union.tree_node** %decl_result, align 8
  %5 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl4 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %rtl5 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl4, i32 0, i32 17
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8
  %tobool = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl6 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %rtl7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 17
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  call void @make_decl_rtl(%union.tree_node* %9, i8* null)
  %10 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl8 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %rtl9 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 17
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ %11, %cond.false ]
  store %struct.rtx_def* %cond, %struct.rtx_def** %decl_rtl, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load = load i32, i32* %13, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp10 = icmp eq i32 %bf.clear, 61
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %15 = load i32, i32* %rtuint, align 4
  %cmp11 = icmp uge i32 %15, 53
  br i1 %cmp11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  call void @do_clobber_return_reg(%struct.rtx_def* %16, i8* null)
  br label %if.end

if.end:                                           ; preds = %if.then.12, %land.lhs.true, %cond.end
  br label %if.end.13

if.end.13:                                        ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @do_clobber_return_reg(%struct.rtx_def* %reg, i8* %arg) #0 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %arg.addr = alloca i8*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  ret void
}

; Function Attrs: nounwind uwtable
define void @use_return_register() #0 {
entry:
  call void @diddle_return_value(void (%struct.rtx_def*, i8*)* @do_use_return_reg, i8* null)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @do_use_return_reg(%struct.rtx_def* %reg, i8* %arg) #0 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %arg.addr = alloca i8*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8
  %call = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %0)
  %call1 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call)
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_function_end(i8* %filename, i32 %line, i32 %end_bindings) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %line.addr = alloca i32, align 4
  %end_bindings.addr = alloca i32, align 4
  %link = alloca %union.tree_node*, align 8
  %clobber_after = alloca %struct.rtx_def*, align 8
  %function = alloca %union.tree_node*, align 8
  %context = alloca %struct.rtx_def*, align 8
  %tramp = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %seq19 = alloca %struct.rtx_def*, align 8
  %decl51 = alloca %union.tree_node*, align 8
  %fun = alloca %struct.rtx_def*, align 8
  %decl_result = alloca %union.tree_node*, align 8
  %decl_rtl = alloca %struct.rtx_def*, align 8
  %real_decl_rtl = alloca %struct.rtx_def*, align 8
  %unsignedp = alloca i32, align 4
  %value_address = alloca %struct.rtx_def*, align 8
  %type262 = alloca %union.tree_node*, align 8
  %outgoing = alloca %struct.rtx_def*, align 8
  %seq275 = alloca %struct.rtx_def*, align 8
  %after = alloca %struct.rtx_def*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %line, i32* %line.addr, align 4
  store i32 %end_bindings, i32* %end_bindings.addr, align 4
  call void @finish_expr_for_function()
  %0 = load %struct.function*, %struct.function** @cfun, align 8
  %x_arg_pointer_save_area = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 30
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x_arg_pointer_save_area, align 8
  %tobool = icmp ne %struct.rtx_def* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8
  %arg_pointer_save_area_init = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 56
  %3 = bitcast i24* %arg_pointer_save_area_init to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load, 23
  %bf.clear = and i32 %bf.lshr, 1
  %tobool1 = icmp ne i32 %bf.clear, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.function*, %struct.function** @cfun, align 8
  %call = call %struct.rtx_def* @get_arg_pointer_save_area(%struct.function* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %x_trampoline_list = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 34
  %6 = load %union.tree_node*, %union.tree_node** %x_trampoline_list, align 8
  store %union.tree_node* %6, %union.tree_node** %link, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %link, align 8
  %tobool2 = icmp ne %union.tree_node* %7, null
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list = bitcast %union.tree_node* %8 to %struct.tree_list*
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1
  %9 = load %union.tree_node*, %union.tree_node** %purpose, align 8
  store %union.tree_node* %9, %union.tree_node** %function, align 8
  %10 = load %union.tree_node*, %union.tree_node** %function, align 8
  %call3 = call %struct.rtx_def* @lookup_static_chain(%union.tree_node* %10)
  store %struct.rtx_def* %call3, %struct.rtx_def** %context, align 8
  %11 = load %union.tree_node*, %union.tree_node** %link, align 8
  %list4 = bitcast %union.tree_node* %11 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list4, i32 0, i32 2
  %12 = load %union.tree_node*, %union.tree_node** %value, align 8
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 2
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i32 0, i64 1
  %13 = bitcast %union.tree_node** %arrayidx to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %tramp, align 8
  call void @start_sequence()
  %15 = load %struct.rtx_def*, %struct.rtx_def** %tramp, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call6 = call %struct.rtx_def* @round_trampoline_addr(%struct.rtx_def* %16)
  store %struct.rtx_def* %call6, %struct.rtx_def** %tramp, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tramp, align 8
  %18 = load %union.tree_node*, %union.tree_node** %function, align 8
  %decl = bitcast %union.tree_node* %18 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool7 = icmp ne %struct.rtx_def* %19, null
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %20 = load %union.tree_node*, %union.tree_node** %function, align 8
  %decl8 = bitcast %union.tree_node* %20 to %struct.tree_decl*
  %rtl9 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl8, i32 0, i32 17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %22 = load %union.tree_node*, %union.tree_node** %function, align 8
  call void @make_decl_rtl(%union.tree_node* %22, i8* null)
  %23 = load %union.tree_node*, %union.tree_node** %function, align 8
  %decl10 = bitcast %union.tree_node* %23 to %struct.tree_decl*
  %rtl11 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl10, i32 0, i32 17
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl11, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %21, %cond.true ], [ %24, %cond.false ]
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx14, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %context, align 8
  call void @x86_initialize_trampoline(%struct.rtx_def* %17, %struct.rtx_def* %25, %struct.rtx_def* %26)
  %call15 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call15, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %27 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %28 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_reentry = getelementptr inbounds %struct.function, %struct.function* %28, i32 0, i32 29
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_reentry, align 8
  %call16 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %27, %struct.rtx_def* %29)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %30 = load %union.tree_node*, %union.tree_node** %link, align 8
  %common = bitcast %union.tree_node* %30 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %31 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %31, %union.tree_node** %link, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load i32, i32* @flag_stack_check, align 4
  %tobool17 = icmp ne i32 %32, 0
  br i1 %tobool17, label %if.then.18, label %if.end.43

if.then.18:                                       ; preds = %for.end
  %call20 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call20, %struct.rtx_def** %insn, align 8
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.38, %if.then.18
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool22 = icmp ne %struct.rtx_def* %33, null
  br i1 %tobool22, label %for.body.23, label %for.end.42

for.body.23:                                      ; preds = %for.cond.21
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load24 = load i32, i32* %35, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp = icmp eq i32 %bf.clear25, 34
  br i1 %cmp, label %if.then.26, label %if.end.37

if.then.26:                                       ; preds = %for.body.23
  call void @start_sequence()
  %36 = load i32, i32* @target_flags, align 4
  %and = and i32 %36, 33554432
  %tobool27 = icmp ne i32 %and, 0
  %cond28 = select i1 %tobool27, i32 8, i32 4
  %mul = mul nsw i32 75, %cond28
  %conv = sext i32 %mul to i64
  %37 = load i32, i32* @target_flags, align 4
  %and29 = and i32 %37, 33554432
  %tobool30 = icmp ne i32 %and29, 0
  %cond31 = select i1 %tobool30, i32 8, i32 4
  %sub = sub nsw i32 4096, %cond31
  %conv32 = sext i32 %sub to i64
  %call33 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv32)
  call void @probe_stack_range(i64 %conv, %struct.rtx_def* %call33)
  %call34 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call34, %struct.rtx_def** %seq19, align 8
  call void @end_sequence()
  %38 = load %struct.rtx_def*, %struct.rtx_def** %seq19, align 8
  %39 = load %struct.function*, %struct.function** @cfun, align 8
  %x_tail_recursion_reentry35 = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 29
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_reentry35, align 8
  %call36 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %38, %struct.rtx_def* %40)
  br label %for.end.42

if.end.37:                                        ; preds = %for.body.23
  br label %for.inc.38

for.inc.38:                                       ; preds = %if.end.37
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i32 0, i64 2
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx41, align 8
  store %struct.rtx_def* %42, %struct.rtx_def** %insn, align 8
  br label %for.cond.21

for.end.42:                                       ; preds = %if.then.26, %for.cond.21
  br label %if.end.43

if.end.43:                                        ; preds = %for.end.42, %for.end
  %43 = load i32, i32* @warn_unused_parameter, align 4
  %cmp44 = icmp sgt i32 %43, 0
  br i1 %cmp44, label %if.then.50, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.43
  %44 = load i32, i32* @warn_unused_parameter, align 4
  %cmp46 = icmp slt i32 %44, 0
  br i1 %cmp46, label %land.lhs.true.48, label %if.end.82

land.lhs.true.48:                                 ; preds = %lor.lhs.false
  %45 = load i32, i32* @extra_warnings, align 4
  %tobool49 = icmp ne i32 %45, 0
  br i1 %tobool49, label %if.then.50, label %if.end.82

if.then.50:                                       ; preds = %land.lhs.true.48, %if.end.43
  %46 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl52 = bitcast %union.tree_node* %46 to %struct.tree_decl*
  %arguments = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl52, i32 0, i32 10
  %47 = load %union.tree_node*, %union.tree_node** %arguments, align 8
  store %union.tree_node* %47, %union.tree_node** %decl51, align 8
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.78, %if.then.50
  %48 = load %union.tree_node*, %union.tree_node** %decl51, align 8
  %tobool54 = icmp ne %union.tree_node* %48, null
  br i1 %tobool54, label %for.body.55, label %for.end.81

for.body.55:                                      ; preds = %for.cond.53
  %49 = load %union.tree_node*, %union.tree_node** %decl51, align 8
  %common56 = bitcast %union.tree_node* %49 to %struct.tree_common*
  %used_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2
  %bf.load57 = load i32, i32* %used_flag, align 8
  %bf.lshr58 = lshr i32 %bf.load57, 16
  %bf.clear59 = and i32 %bf.lshr58, 1
  %tobool60 = icmp ne i32 %bf.clear59, 0
  br i1 %tobool60, label %if.end.77, label %land.lhs.true.61

land.lhs.true.61:                                 ; preds = %for.body.55
  %50 = load %union.tree_node*, %union.tree_node** %decl51, align 8
  %common62 = bitcast %union.tree_node* %50 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2
  %bf.load63 = load i32, i32* %code, align 8
  %bf.clear64 = and i32 %bf.load63, 255
  %cmp65 = icmp eq i32 %bf.clear64, 35
  br i1 %cmp65, label %land.lhs.true.67, label %if.end.77

land.lhs.true.67:                                 ; preds = %land.lhs.true.61
  %51 = load %union.tree_node*, %union.tree_node** %decl51, align 8
  %decl68 = bitcast %union.tree_node* %51 to %struct.tree_decl*
  %name = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl68, i32 0, i32 8
  %52 = load %union.tree_node*, %union.tree_node** %name, align 8
  %tobool69 = icmp ne %union.tree_node* %52, null
  br i1 %tobool69, label %land.lhs.true.70, label %if.end.77

land.lhs.true.70:                                 ; preds = %land.lhs.true.67
  %53 = load %union.tree_node*, %union.tree_node** %decl51, align 8
  %decl71 = bitcast %union.tree_node* %53 to %struct.tree_decl*
  %artificial_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl71, i32 0, i32 5
  %54 = bitcast i48* %artificial_flag to i64*
  %bf.load72 = load i64, i64* %54, align 8
  %bf.lshr73 = lshr i64 %bf.load72, 22
  %bf.clear74 = and i64 %bf.lshr73, 1
  %bf.cast = trunc i64 %bf.clear74 to i32
  %tobool75 = icmp ne i32 %bf.cast, 0
  br i1 %tobool75, label %if.end.77, label %if.then.76

if.then.76:                                       ; preds = %land.lhs.true.70
  %55 = load %union.tree_node*, %union.tree_node** %decl51, align 8
  call void (%union.tree_node*, i8*, ...) @warning_with_decl(%union.tree_node* %55, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %land.lhs.true.70, %land.lhs.true.67, %land.lhs.true.61, %for.body.55
  br label %for.inc.78

for.inc.78:                                       ; preds = %if.end.77
  %56 = load %union.tree_node*, %union.tree_node** %decl51, align 8
  %common79 = bitcast %union.tree_node* %56 to %struct.tree_common*
  %chain80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 0
  %57 = load %union.tree_node*, %union.tree_node** %chain80, align 8
  store %union.tree_node* %57, %union.tree_node** %decl51, align 8
  br label %for.cond.53

for.end.81:                                       ; preds = %for.cond.53
  br label %if.end.82

if.end.82:                                        ; preds = %for.end.81, %land.lhs.true.48, %lor.lhs.false
  %58 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %58, i32 0, i32 20
  %59 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  %cmp83 = icmp ne %struct.rtx_def* %59, null
  br i1 %cmp83, label %land.lhs.true.85, label %if.end.91

land.lhs.true.85:                                 ; preds = %if.end.82
  %60 = load %struct.function*, %struct.function** @cfun, align 8
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %60, i32 0, i32 56
  %61 = bitcast i24* %has_nonlocal_label to i32*
  %bf.load86 = load i32, i32* %61, align 8
  %bf.lshr87 = lshr i32 %bf.load86, 8
  %bf.clear88 = and i32 %bf.lshr87, 1
  %tobool89 = icmp ne i32 %bf.clear88, 0
  br i1 %tobool89, label %if.end.91, label %if.then.90

if.then.90:                                       ; preds = %land.lhs.true.85
  call void @delete_handlers()
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.90, %land.lhs.true.85, %if.end.82
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.91
  %call92 = call i32 @in_sequence_p()
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @end_sequence()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %62 = load i32, i32* @immediate_size_expand, align 4
  %dec = add nsw i32 %62, -1
  store i32 %dec, i32* @immediate_size_expand, align 4
  call void @clear_pending_stack_adjust()
  call void @do_pending_stack_adjust()
  %call94 = call %struct.rtx_def* @emit_note(i8* null, i32 -91)
  %63 = load i32, i32* @flag_test_coverage, align 4
  %tobool95 = icmp ne i32 %63, 0
  br i1 %tobool95, label %if.then.96, label %if.end.98

if.then.96:                                       ; preds = %while.end
  %call97 = call %struct.rtx_def* @emit_note(i8* null, i32 -84)
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.96, %while.end
  %64 = load i8*, i8** %filename.addr, align 8
  %65 = load i32, i32* %line.addr, align 4
  %call99 = call %struct.rtx_def* @emit_line_note_force(i8* %64, i32 %65)
  %call100 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call100, %struct.rtx_def** %clobber_after, align 8
  %66 = load %struct.function*, %struct.function** @cfun, align 8
  %x_return_label = getelementptr inbounds %struct.function, %struct.function* %66, i32 0, i32 24
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x_return_label, align 8
  %tobool101 = icmp ne %struct.rtx_def* %67, null
  br i1 %tobool101, label %if.then.102, label %if.end.105

if.then.102:                                      ; preds = %if.end.98
  %68 = load %struct.function*, %struct.function** @cfun, align 8
  %x_return_label103 = getelementptr inbounds %struct.function, %struct.function* %68, i32 0, i32 24
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x_return_label103, align 8
  %call104 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %69)
  br label %if.end.105

if.end.105:                                       ; preds = %if.then.102, %if.end.98
  %70 = load i32, i32* %end_bindings.addr, align 4
  %tobool106 = icmp ne i32 %70, 0
  br i1 %tobool106, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %if.end.105
  call void @expand_end_bindings(%union.tree_node* null, i32 0, i32 0)
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.107, %if.end.105
  %71 = load %struct.function*, %struct.function** @cfun, align 8
  %instrument_entry_exit = getelementptr inbounds %struct.function, %struct.function* %71, i32 0, i32 56
  %72 = bitcast i24* %instrument_entry_exit to i32*
  %bf.load109 = load i32, i32* %72, align 8
  %bf.lshr110 = lshr i32 %bf.load109, 13
  %bf.clear111 = and i32 %bf.lshr110, 1
  %tobool112 = icmp ne i32 %bf.clear111, 0
  br i1 %tobool112, label %if.then.113, label %if.end.141

if.then.113:                                      ; preds = %if.end.108
  %73 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl114 = bitcast %union.tree_node* %73 to %struct.tree_decl*
  %rtl115 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl114, i32 0, i32 17
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtl115, align 8
  %tobool116 = icmp ne %struct.rtx_def* %74, null
  br i1 %tobool116, label %cond.true.117, label %cond.false.120

cond.true.117:                                    ; preds = %if.then.113
  %75 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl118 = bitcast %union.tree_node* %75 to %struct.tree_decl*
  %rtl119 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl118, i32 0, i32 17
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtl119, align 8
  br label %cond.end.123

cond.false.120:                                   ; preds = %if.then.113
  %77 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  call void @make_decl_rtl(%union.tree_node* %77, i8* null)
  %78 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl121 = bitcast %union.tree_node* %78 to %struct.tree_decl*
  %rtl122 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl121, i32 0, i32 17
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtl122, align 8
  br label %cond.end.123

cond.end.123:                                     ; preds = %cond.false.120, %cond.true.117
  %cond124 = phi %struct.rtx_def* [ %76, %cond.true.117 ], [ %79, %cond.false.120 ]
  store %struct.rtx_def* %cond124, %struct.rtx_def** %fun, align 8
  %80 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8
  %81 = bitcast %struct.rtx_def* %80 to i32*
  %bf.load125 = load i32, i32* %81, align 8
  %bf.clear126 = and i32 %bf.load125, 65535
  %cmp127 = icmp eq i32 %bf.clear126, 66
  br i1 %cmp127, label %if.then.129, label %if.else

if.then.129:                                      ; preds = %cond.end.123
  %82 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8
  %fld130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i32 0, i64 0
  %rtx132 = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rtx132, align 8
  store %struct.rtx_def* %83, %struct.rtx_def** %fun, align 8
  br label %if.end.133

if.else:                                          ; preds = %cond.end.123
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 6977, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.expand_function_end, i32 0, i32 0)) #6
  unreachable

if.end.133:                                       ; preds = %if.then.129
  %84 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*], [97 x %struct.rtx_def*]* @libfunc_table, i32 0, i64 96), align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8
  %86 = load i32, i32* @target_flags, align 4
  %and134 = and i32 %86, 33554432
  %tobool135 = icmp ne i32 %and134, 0
  %cond136 = select i1 %tobool135, i32 5, i32 4
  %87 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 4), align 8
  %call137 = call %struct.rtx_def* @expand_builtin_return_addr(i32 53, i32 0, %struct.rtx_def* %87)
  %88 = load i32, i32* @target_flags, align 4
  %and138 = and i32 %88, 33554432
  %tobool139 = icmp ne i32 %and138, 0
  %cond140 = select i1 %tobool139, i32 5, i32 4
  call void (%struct.rtx_def*, i32, i32, i32, ...) @emit_library_call(%struct.rtx_def* %84, i32 0, i32 0, i32 2, %struct.rtx_def* %85, i32 %cond136, %struct.rtx_def* %call137, i32 %cond140)
  br label %if.end.141

if.end.141:                                       ; preds = %if.end.133, %if.end.108
  %89 = load i32, i32* @flag_exceptions, align 4
  %tobool142 = icmp ne i32 %89, 0
  br i1 %tobool142, label %land.lhs.true.143, label %if.end.146

land.lhs.true.143:                                ; preds = %if.end.141
  br i1 false, label %if.then.144, label %if.end.146

if.then.144:                                      ; preds = %land.lhs.true.143
  %call145 = call %struct.rtx_def* @get_last_insn()
  call void @sjlj_emit_function_exit_after(%struct.rtx_def* %call145)
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.144, %land.lhs.true.143, %if.end.141
  %90 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl147 = bitcast %union.tree_node* %90 to %struct.tree_decl*
  %result = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl147, i32 0, i32 11
  %91 = load %union.tree_node*, %union.tree_node** %result, align 8
  %decl148 = bitcast %union.tree_node* %91 to %struct.tree_decl*
  %rtl149 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl148, i32 0, i32 17
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rtl149, align 8
  %cmp150 = icmp ne %struct.rtx_def* %92, null
  br i1 %cmp150, label %if.then.152, label %if.end.230

if.then.152:                                      ; preds = %if.end.146
  %93 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl153 = bitcast %union.tree_node* %93 to %struct.tree_decl*
  %result154 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl153, i32 0, i32 11
  %94 = load %union.tree_node*, %union.tree_node** %result154, align 8
  store %union.tree_node* %94, %union.tree_node** %decl_result, align 8
  %95 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl155 = bitcast %union.tree_node* %95 to %struct.tree_decl*
  %rtl156 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl155, i32 0, i32 17
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rtl156, align 8
  %tobool157 = icmp ne %struct.rtx_def* %96, null
  br i1 %tobool157, label %cond.true.158, label %cond.false.161

cond.true.158:                                    ; preds = %if.then.152
  %97 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl159 = bitcast %union.tree_node* %97 to %struct.tree_decl*
  %rtl160 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl159, i32 0, i32 17
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtl160, align 8
  br label %cond.end.164

cond.false.161:                                   ; preds = %if.then.152
  %99 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  call void @make_decl_rtl(%union.tree_node* %99, i8* null)
  %100 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl162 = bitcast %union.tree_node* %100 to %struct.tree_decl*
  %rtl163 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl162, i32 0, i32 17
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtl163, align 8
  br label %cond.end.164

cond.end.164:                                     ; preds = %cond.false.161, %cond.true.158
  %cond165 = phi %struct.rtx_def* [ %98, %cond.true.158 ], [ %101, %cond.false.161 ]
  store %struct.rtx_def* %cond165, %struct.rtx_def** %decl_rtl, align 8
  %102 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %103 = bitcast %struct.rtx_def* %102 to i32*
  %bf.load166 = load i32, i32* %103, align 8
  %bf.clear167 = and i32 %bf.load166, 65535
  %cmp168 = icmp eq i32 %bf.clear167, 61
  br i1 %cmp168, label %cond.true.170, label %cond.false.175

cond.true.170:                                    ; preds = %cond.end.164
  %104 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %fld171 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1
  %arrayidx172 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld171, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx172 to i32*
  %105 = load i32, i32* %rtuint, align 4
  %cmp173 = icmp uge i32 %105, 53
  br i1 %cmp173, label %if.then.182, label %if.end.229

cond.false.175:                                   ; preds = %cond.end.164
  %106 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %decl176 = bitcast %union.tree_node* %106 to %struct.tree_decl*
  %regdecl_flag = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl176, i32 0, i32 5
  %107 = bitcast i48* %regdecl_flag to i64*
  %bf.load177 = load i64, i64* %107, align 8
  %bf.lshr178 = lshr i64 %bf.load177, 10
  %bf.clear179 = and i64 %bf.lshr178, 1
  %bf.cast180 = trunc i64 %bf.clear179 to i32
  %tobool181 = icmp ne i32 %bf.cast180, 0
  br i1 %tobool181, label %if.then.182, label %if.end.229

if.then.182:                                      ; preds = %cond.false.175, %cond.true.170
  %108 = load %struct.function*, %struct.function** @cfun, align 8
  %return_rtx = getelementptr inbounds %struct.function, %struct.function* %108, i32 0, i32 14
  %109 = load %struct.rtx_def*, %struct.rtx_def** %return_rtx, align 8
  store %struct.rtx_def* %109, %struct.rtx_def** %real_decl_rtl, align 8
  %110 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %111 = bitcast %struct.rtx_def* %110 to i32*
  %bf.load183 = load i32, i32* %111, align 8
  %bf.lshr184 = lshr i32 %bf.load183, 30
  %bf.clear185 = and i32 %bf.lshr184, 1
  %tobool186 = icmp ne i32 %bf.clear185, 0
  br i1 %tobool186, label %if.end.188, label %if.then.187

if.then.187:                                      ; preds = %if.then.182
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7021, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.expand_function_end, i32 0, i32 0)) #6
  unreachable

if.end.188:                                       ; preds = %if.then.182
  %112 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %113 = bitcast %struct.rtx_def* %112 to i32*
  %bf.load189 = load i32, i32* %113, align 8
  %bf.lshr190 = lshr i32 %bf.load189, 16
  %bf.clear191 = and i32 %bf.lshr190, 255
  %cmp192 = icmp eq i32 %bf.clear191, 51
  br i1 %cmp192, label %if.then.194, label %if.end.200

if.then.194:                                      ; preds = %if.end.188
  %114 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load195 = load i32, i32* %115, align 8
  %bf.lshr196 = lshr i32 %bf.load195, 16
  %bf.clear197 = and i32 %bf.lshr196, 255
  %116 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load198 = load i32, i32* %117, align 8
  %bf.value = and i32 %bf.clear197, 255
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear199 = and i32 %bf.load198, -16711681
  %bf.set = or i32 %bf.clear199, %bf.shl
  store i32 %bf.set, i32* %117, align 8
  br label %if.end.200

if.end.200:                                       ; preds = %if.then.194, %if.end.188
  %118 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %119 = bitcast %struct.rtx_def* %118 to i32*
  %bf.load201 = load i32, i32* %119, align 8
  %bf.lshr202 = lshr i32 %bf.load201, 16
  %bf.clear203 = and i32 %bf.lshr202, 255
  %120 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %bf.load204 = load i32, i32* %121, align 8
  %bf.lshr205 = lshr i32 %bf.load204, 16
  %bf.clear206 = and i32 %bf.lshr205, 255
  %cmp207 = icmp ne i32 %bf.clear203, %bf.clear206
  br i1 %cmp207, label %if.then.209, label %if.else.215

if.then.209:                                      ; preds = %if.end.200
  %122 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %common210 = bitcast %union.tree_node* %122 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common210, i32 0, i32 1
  %123 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common211 = bitcast %union.tree_node* %123 to %struct.tree_common*
  %unsigned_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2
  %bf.load212 = load i32, i32* %unsigned_flag, align 8
  %bf.lshr213 = lshr i32 %bf.load212, 13
  %bf.clear214 = and i32 %bf.lshr213, 1
  store i32 %bf.clear214, i32* %unsignedp, align 4
  %124 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %125 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %126 = load i32, i32* %unsignedp, align 4
  call void @convert_move(%struct.rtx_def* %124, %struct.rtx_def* %125, i32 %126)
  br label %if.end.228

if.else.215:                                      ; preds = %if.end.200
  %127 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %128 = bitcast %struct.rtx_def* %127 to i32*
  %bf.load216 = load i32, i32* %128, align 8
  %bf.clear217 = and i32 %bf.load216, 65535
  %cmp218 = icmp eq i32 %bf.clear217, 39
  br i1 %cmp218, label %if.then.220, label %if.else.225

if.then.220:                                      ; preds = %if.else.215
  %129 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %130 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %131 = load %union.tree_node*, %union.tree_node** %decl_result, align 8
  %common221 = bitcast %union.tree_node* %131 to %struct.tree_common*
  %type222 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common221, i32 0, i32 1
  %132 = load %union.tree_node*, %union.tree_node** %type222, align 8
  %call223 = call i64 @int_size_in_bytes(%union.tree_node* %132)
  %conv224 = trunc i64 %call223 to i32
  call void @emit_group_load(%struct.rtx_def* %129, %struct.rtx_def* %130, i32 %conv224)
  br label %if.end.227

if.else.225:                                      ; preds = %if.else.215
  %133 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8
  %134 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8
  %call226 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %133, %struct.rtx_def* %134)
  br label %if.end.227

if.end.227:                                       ; preds = %if.else.225, %if.then.220
  br label %if.end.228

if.end.228:                                       ; preds = %if.end.227, %if.then.209
  br label %if.end.229

if.end.229:                                       ; preds = %if.end.228, %cond.false.175, %cond.true.170
  br label %if.end.230

if.end.230:                                       ; preds = %if.end.229, %if.end.146
  %135 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %135, i32 0, i32 56
  %136 = bitcast i24* %returns_struct to i32*
  %bf.load231 = load i32, i32* %136, align 8
  %bf.clear232 = and i32 %bf.load231, 1
  %tobool233 = icmp ne i32 %bf.clear232, 0
  br i1 %tobool233, label %if.then.239, label %lor.lhs.false.234

lor.lhs.false.234:                                ; preds = %if.end.230
  %137 = load %struct.function*, %struct.function** @cfun, align 8
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %137, i32 0, i32 56
  %138 = bitcast i24* %returns_pcc_struct to i32*
  %bf.load235 = load i32, i32* %138, align 8
  %bf.lshr236 = lshr i32 %bf.load235, 1
  %bf.clear237 = and i32 %bf.lshr236, 1
  %tobool238 = icmp ne i32 %bf.clear237, 0
  br i1 %tobool238, label %if.then.239, label %if.end.274

if.then.239:                                      ; preds = %lor.lhs.false.234, %if.end.230
  %139 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl240 = bitcast %union.tree_node* %139 to %struct.tree_decl*
  %result241 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl240, i32 0, i32 11
  %140 = load %union.tree_node*, %union.tree_node** %result241, align 8
  %decl242 = bitcast %union.tree_node* %140 to %struct.tree_decl*
  %rtl243 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl242, i32 0, i32 17
  %141 = load %struct.rtx_def*, %struct.rtx_def** %rtl243, align 8
  %tobool244 = icmp ne %struct.rtx_def* %141, null
  br i1 %tobool244, label %cond.true.245, label %cond.false.250

cond.true.245:                                    ; preds = %if.then.239
  %142 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl246 = bitcast %union.tree_node* %142 to %struct.tree_decl*
  %result247 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl246, i32 0, i32 11
  %143 = load %union.tree_node*, %union.tree_node** %result247, align 8
  %decl248 = bitcast %union.tree_node* %143 to %struct.tree_decl*
  %rtl249 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl248, i32 0, i32 17
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rtl249, align 8
  br label %cond.end.257

cond.false.250:                                   ; preds = %if.then.239
  %145 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl251 = bitcast %union.tree_node* %145 to %struct.tree_decl*
  %result252 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl251, i32 0, i32 11
  %146 = load %union.tree_node*, %union.tree_node** %result252, align 8
  call void @make_decl_rtl(%union.tree_node* %146, i8* null)
  %147 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl253 = bitcast %union.tree_node* %147 to %struct.tree_decl*
  %result254 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl253, i32 0, i32 11
  %148 = load %union.tree_node*, %union.tree_node** %result254, align 8
  %decl255 = bitcast %union.tree_node* %148 to %struct.tree_decl*
  %rtl256 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl255, i32 0, i32 17
  %149 = load %struct.rtx_def*, %struct.rtx_def** %rtl256, align 8
  br label %cond.end.257

cond.end.257:                                     ; preds = %cond.false.250, %cond.true.245
  %cond258 = phi %struct.rtx_def* [ %144, %cond.true.245 ], [ %149, %cond.false.250 ]
  %fld259 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond258, i32 0, i32 1
  %arrayidx260 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld259, i32 0, i64 0
  %rtx261 = bitcast %union.rtunion_def* %arrayidx260 to %struct.rtx_def**
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtx261, align 8
  store %struct.rtx_def* %150, %struct.rtx_def** %value_address, align 8
  %151 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %decl263 = bitcast %union.tree_node* %151 to %struct.tree_decl*
  %result264 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl263, i32 0, i32 11
  %152 = load %union.tree_node*, %union.tree_node** %result264, align 8
  %common265 = bitcast %union.tree_node* %152 to %struct.tree_common*
  %type266 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common265, i32 0, i32 1
  %153 = load %union.tree_node*, %union.tree_node** %type266, align 8
  store %union.tree_node* %153, %union.tree_node** %type262, align 8
  %154 = load %union.tree_node*, %union.tree_node** %type262, align 8
  %call267 = call %union.tree_node* @build_pointer_type(%union.tree_node* %154)
  %call268 = call %struct.rtx_def* @ix86_function_value(%union.tree_node* %call267)
  store %struct.rtx_def* %call268, %struct.rtx_def** %outgoing, align 8
  %155 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %bf.load269 = load i32, i32* %156, align 8
  %bf.clear270 = and i32 %bf.load269, -1073741825
  %bf.set271 = or i32 %bf.clear270, 1073741824
  store i32 %bf.set271, i32* %156, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %158 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8
  %call272 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %157, %struct.rtx_def* %158)
  %159 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8
  %160 = load %struct.function*, %struct.function** @cfun, align 8
  %return_rtx273 = getelementptr inbounds %struct.function, %struct.function* %160, i32 0, i32 14
  store %struct.rtx_def* %159, %struct.rtx_def** %return_rtx273, align 8
  br label %if.end.274

if.end.274:                                       ; preds = %cond.end.257, %lor.lhs.false.234
  call void @expand_eh_return()
  call void @start_sequence()
  call void @clobber_return_register()
  %call276 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call276, %struct.rtx_def** %seq275, align 8
  call void @end_sequence()
  %161 = load %struct.rtx_def*, %struct.rtx_def** %seq275, align 8
  %162 = load %struct.rtx_def*, %struct.rtx_def** %clobber_after, align 8
  %call277 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %161, %struct.rtx_def* %162)
  store %struct.rtx_def* %call277, %struct.rtx_def** %after, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %clobber_after, align 8
  %164 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8
  %cmp278 = icmp ne %struct.rtx_def* %163, %164
  br i1 %cmp278, label %if.then.280, label %if.end.281

if.then.280:                                      ; preds = %if.end.274
  %165 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8
  %166 = load %struct.function*, %struct.function** @cfun, align 8
  %x_clobber_return_insn = getelementptr inbounds %struct.function, %struct.function* %166, i32 0, i32 31
  store %struct.rtx_def* %165, %struct.rtx_def** %x_clobber_return_insn, align 8
  br label %if.end.281

if.end.281:                                       ; preds = %if.then.280, %if.end.274
  call void @use_return_register()
  %call282 = call %struct.rtx_def* @get_insns()
  call void @expand_fixups(%struct.rtx_def* %call282)
  ret void
}

declare void @finish_expr_for_function() #2

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @round_trampoline_addr(%struct.rtx_def* %tramp) #0 {
entry:
  %tramp.addr = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %addend = alloca %struct.rtx_def*, align 8
  %mask = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %tramp, %struct.rtx_def** %tramp.addr, align 8
  %0 = load i32, i32* @target_flags, align 4
  %and = and i32 %0, 33554432
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 5, i32 4
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %cond)
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8
  %call1 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 1)
  store %struct.rtx_def* %call1, %struct.rtx_def** %addend, align 8
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -2)
  store %struct.rtx_def* %call2, %struct.rtx_def** %mask, align 8
  %1 = load i32, i32* @target_flags, align 4
  %and3 = and i32 %1, 33554432
  %tobool4 = icmp ne i32 %and3, 0
  %cond5 = select i1 %tobool4, i32 5, i32 4
  %2 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %addend, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call6 = call %struct.rtx_def* @expand_simple_binop(i32 %cond5, i32 75, %struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %4, i32 0, i32 3)
  store %struct.rtx_def* %call6, %struct.rtx_def** %temp, align 8
  %5 = load i32, i32* @target_flags, align 4
  %and7 = and i32 %5, 33554432
  %tobool8 = icmp ne i32 %and7, 0
  %cond9 = select i1 %tobool8, i32 5, i32 4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %mask, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call10 = call %struct.rtx_def* @expand_simple_binop(i32 %cond9, i32 83, %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8, i32 0, i32 3)
  store %struct.rtx_def* %call10, %struct.rtx_def** %tramp.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %tramp.addr, align 8
  ret %struct.rtx_def* %9
}

declare void @x86_initialize_trampoline(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @emit_insns_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @probe_stack_range(i64, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @delete_handlers() #0 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %last_t = alloca %union.tree_node*, align 8
  %can_delete = alloca i32, align 4
  %t38 = alloca %struct.rtx_def*, align 8
  %call = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.63, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %for.body, label %for.end.67

for.body:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %if.then, label %if.end.33

if.then:                                          ; preds = %for.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.clear2 = and i32 %bf.load1, -268435457
  store i32 %bf.clear2, i32* %4, align 8
  %5 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 19
  %6 = load %union.tree_node*, %union.tree_node** %x_nonlocal_labels, align 8
  store %union.tree_node* %6, %union.tree_node** %t, align 8
  store %union.tree_node* null, %union.tree_node** %last_t, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool4 = icmp ne %union.tree_node* %7, null
  br i1 %tobool4, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.3
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list = bitcast %union.tree_node* %8 to %struct.tree_list*
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8
  %decl = bitcast %union.tree_node* %9 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %tobool6 = icmp ne %struct.rtx_def* %10, null
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.5
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list7 = bitcast %union.tree_node* %11 to %struct.tree_list*
  %value8 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list7, i32 0, i32 2
  %12 = load %union.tree_node*, %union.tree_node** %value8, align 8
  %decl9 = bitcast %union.tree_node* %12 to %struct.tree_decl*
  %rtl10 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl9, i32 0, i32 17
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body.5
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list11 = bitcast %union.tree_node* %14 to %struct.tree_list*
  %value12 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list11, i32 0, i32 2
  %15 = load %union.tree_node*, %union.tree_node** %value12, align 8
  call void @make_decl_rtl(%union.tree_node* %15, i8* null)
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8
  %list13 = bitcast %union.tree_node* %16 to %struct.tree_list*
  %value14 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list13, i32 0, i32 2
  %17 = load %union.tree_node*, %union.tree_node** %value14, align 8
  %decl15 = bitcast %union.tree_node* %17 to %struct.tree_decl*
  %rtl16 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl15, i32 0, i32 17
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl16, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %13, %cond.true ], [ %18, %cond.false ]
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %cmp17 = icmp eq %struct.rtx_def* %cond, %19
  br i1 %cmp17, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %cond.end
  br label %for.end

if.end:                                           ; preds = %cond.end
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8
  store %union.tree_node* %20, %union.tree_node** %last_t, align 8
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0
  %22 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %22, %union.tree_node** %t, align 8
  br label %for.cond.3

for.end:                                          ; preds = %if.then.18, %for.cond.3
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool19 = icmp ne %union.tree_node* %23, null
  br i1 %tobool19, label %if.then.20, label %if.end.32

if.then.20:                                       ; preds = %for.end
  %24 = load %union.tree_node*, %union.tree_node** %last_t, align 8
  %tobool21 = icmp ne %union.tree_node* %24, null
  br i1 %tobool21, label %if.else, label %if.then.22

if.then.22:                                       ; preds = %if.then.20
  %25 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels23 = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 19
  %26 = load %union.tree_node*, %union.tree_node** %x_nonlocal_labels23, align 8
  %common24 = bitcast %union.tree_node* %26 to %struct.tree_common*
  %chain25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 0
  %27 = load %union.tree_node*, %union.tree_node** %chain25, align 8
  %28 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_labels26 = getelementptr inbounds %struct.function, %struct.function* %28, i32 0, i32 19
  store %union.tree_node* %27, %union.tree_node** %x_nonlocal_labels26, align 8
  br label %if.end.31

if.else:                                          ; preds = %if.then.20
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common27 = bitcast %union.tree_node* %29 to %struct.tree_common*
  %chain28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 0
  %30 = load %union.tree_node*, %union.tree_node** %chain28, align 8
  %31 = load %union.tree_node*, %union.tree_node** %last_t, align 8
  %common29 = bitcast %union.tree_node* %31 to %struct.tree_common*
  %chain30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 0
  store %union.tree_node* %30, %union.tree_node** %chain30, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.22
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %for.end
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %for.body
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load34 = load i32, i32* %33, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp eq i32 %bf.clear35, 32
  br i1 %cmp36, label %if.then.37, label %if.end.62

if.then.37:                                       ; preds = %if.end.33
  store i32 0, i32* %can_delete, align 4
  %34 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 20
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %t38, align 8
  br label %for.cond.39

for.cond.39:                                      ; preds = %for.inc.46, %if.then.37
  %36 = load %struct.rtx_def*, %struct.rtx_def** %t38, align 8
  %cmp40 = icmp ne %struct.rtx_def* %36, null
  br i1 %cmp40, label %for.body.41, label %for.end.50

for.body.41:                                      ; preds = %for.cond.39
  %37 = load %struct.rtx_def*, %struct.rtx_def** %t38, align 8
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call42 = call i32 @reg_mentioned_p(%struct.rtx_def* %37, %struct.rtx_def* %39)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %for.body.41
  store i32 1, i32* %can_delete, align 4
  br label %for.end.50

if.end.45:                                        ; preds = %for.body.41
  br label %for.inc.46

for.inc.46:                                       ; preds = %if.end.45
  %40 = load %struct.rtx_def*, %struct.rtx_def** %t38, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 1
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %t38, align 8
  br label %for.cond.39

for.end.50:                                       ; preds = %if.then.44, %for.cond.39
  %42 = load i32, i32* %can_delete, align 4
  %tobool51 = icmp ne i32 %42, 0
  br i1 %tobool51, label %if.then.59, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end.50
  %43 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function, %struct.function* %43, i32 0, i32 22
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_stack_level, align 8
  %cmp52 = icmp ne %struct.rtx_def* %44, null
  br i1 %cmp52, label %land.lhs.true, label %if.end.61

land.lhs.true:                                    ; preds = %lor.lhs.false
  %45 = load %struct.function*, %struct.function** @cfun, align 8
  %x_nonlocal_goto_stack_level53 = getelementptr inbounds %struct.function, %struct.function* %45, i32 0, i32 22
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_stack_level53, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 3
  %rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx56, align 8
  %call57 = call i32 @reg_mentioned_p(%struct.rtx_def* %46, %struct.rtx_def* %48)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.61

if.then.59:                                       ; preds = %land.lhs.true, %for.end.50
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call60 = call %struct.rtx_def* @delete_related_insns(%struct.rtx_def* %49)
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.59, %land.lhs.true, %lor.lhs.false
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.end.33
  br label %for.inc.63

for.inc.63:                                       ; preds = %if.end.62
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i32 0, i64 2
  %rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx66, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end.67:                                       ; preds = %for.cond
  ret void
}

declare void @clear_pending_stack_adjust() #2

declare void @do_pending_stack_adjust() #2

declare %struct.rtx_def* @emit_line_note_force(i8*, i32) #2

declare %struct.rtx_def* @emit_label(%struct.rtx_def*) #2

declare void @expand_end_bindings(%union.tree_node*, i32, i32) #2

declare void @sjlj_emit_function_exit_after(%struct.rtx_def*) #2

declare void @convert_move(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare void @emit_group_load(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare void @expand_eh_return() #2

declare %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @expand_fixups(%struct.rtx_def*) #2

declare void @push_topmost_sequence() #2

declare void @pop_topmost_sequence() #2

; Function Attrs: nounwind uwtable
define i32 @prologue_epilogue_contains(%struct.rtx_def* %insn) #0 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %1 = load %struct.varray_head_tag*, %struct.varray_head_tag** @prologue, align 8
  %call = call i32 @contains(%struct.rtx_def* %0, %struct.varray_head_tag* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %3 = load %struct.varray_head_tag*, %struct.varray_head_tag** @epilogue, align 8
  %call1 = call i32 @contains(%struct.rtx_def* %2, %struct.varray_head_tag* %3)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal i32 @contains(%struct.rtx_def* %insn, %struct.varray_head_tag* %vec) #0 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %vec.addr = alloca %struct.varray_head_tag*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.varray_head_tag* %vec, %struct.varray_head_tag** %vec.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load1 = load i32, i32* %4, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 24
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %count, align 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 3
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %7, i32 0, i32 0
  %8 = load i32, i32* %num_elem, align 4
  %sub = sub nsw i32 %8, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.30, %if.then
  %9 = load i32, i32* %i, align 4
  %cmp9 = icmp sge i32 %9, 0
  br i1 %cmp9, label %for.body, label %for.end.32

for.body:                                         ; preds = %for.cond
  %10 = load %struct.varray_head_tag*, %struct.varray_head_tag** %vec.addr, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %10, i32 0, i32 0
  %11 = load i64, i64* %num_elements, align 8
  %sub10 = sub i64 %11, 1
  %conv = trunc i64 %sub10 to i32
  store i32 %conv, i32* %j, align 4
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %cmp12 = icmp sge i32 %12, 0
  br i1 %cmp12, label %for.body.14, label %for.end

for.body.14:                                      ; preds = %for.cond.11
  %13 = load i32, i32* %i, align 4
  %idxprom = sext i32 %13 to i64
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 3
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx17, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtvec20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec20, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx23 to i32*
  %18 = load i32, i32* %rtint, align 4
  %19 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %19 to i64
  %20 = load %struct.varray_head_tag*, %struct.varray_head_tag** %vec.addr, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %20, i32 0, i32 4
  %i25 = bitcast %union.varray_data_tag* %data to [1 x i32]*
  %arrayidx26 = getelementptr inbounds [1 x i32], [1 x i32]* %i25, i32 0, i64 %idxprom24
  %21 = load i32, i32* %arrayidx26, align 4
  %cmp27 = icmp eq i32 %18, %21
  br i1 %cmp27, label %if.then.29, label %if.end

if.then.29:                                       ; preds = %for.body.14
  %22 = load i32, i32* %count, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.29, %for.body.14
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %23 = load i32, i32* %j, align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond.11

for.end:                                          ; preds = %for.cond.11
  br label %for.inc.30

for.inc.30:                                       ; preds = %for.end
  %24 = load i32, i32* %i, align 4
  %dec31 = add nsw i32 %24, -1
  store i32 %dec31, i32* %i, align 4
  br label %for.cond

for.end.32:                                       ; preds = %for.cond
  %25 = load i32, i32* %count, align 4
  store i32 %25, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %26 = load %struct.varray_head_tag*, %struct.varray_head_tag** %vec.addr, align 8
  %num_elements33 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %26, i32 0, i32 0
  %27 = load i64, i64* %num_elements33, align 8
  %sub34 = sub i64 %27, 1
  %conv35 = trunc i64 %sub34 to i32
  store i32 %conv35, i32* %j, align 4
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.51, %if.else
  %28 = load i32, i32* %j, align 4
  %cmp37 = icmp sge i32 %28, 0
  br i1 %cmp37, label %for.body.39, label %for.end.53

for.body.39:                                      ; preds = %for.cond.36
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 0
  %rtint42 = bitcast %union.rtunion_def* %arrayidx41 to i32*
  %30 = load i32, i32* %rtint42, align 4
  %31 = load i32, i32* %j, align 4
  %idxprom43 = sext i32 %31 to i64
  %32 = load %struct.varray_head_tag*, %struct.varray_head_tag** %vec.addr, align 8
  %data44 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %32, i32 0, i32 4
  %i45 = bitcast %union.varray_data_tag* %data44 to [1 x i32]*
  %arrayidx46 = getelementptr inbounds [1 x i32], [1 x i32]* %i45, i32 0, i64 %idxprom43
  %33 = load i32, i32* %arrayidx46, align 4
  %cmp47 = icmp eq i32 %30, %33
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %for.body.39
  store i32 1, i32* %retval
  br label %return

if.end.50:                                        ; preds = %for.body.39
  br label %for.inc.51

for.inc.51:                                       ; preds = %if.end.50
  %34 = load i32, i32* %j, align 4
  %dec52 = add nsw i32 %34, -1
  store i32 %dec52, i32* %j, align 4
  br label %for.cond.36

for.end.53:                                       ; preds = %for.cond.36
  br label %if.end.54

if.end.54:                                        ; preds = %for.end.53
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.54, %if.then.49, %for.end.32
  %35 = load i32, i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define i32 @sibcall_epilogue_contains(%struct.rtx_def* %insn) #0 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.varray_head_tag*, %struct.varray_head_tag** @sibcall_epilogue, align 8
  %tobool = icmp ne %struct.varray_head_tag* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %2 = load %struct.varray_head_tag*, %struct.varray_head_tag** @sibcall_epilogue, align 8
  %call = call i32 @contains(%struct.rtx_def* %1, %struct.varray_head_tag* %2)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define void @thread_prologue_and_epilogue_insns(%struct.rtx_def* %f) #0 {
entry:
  %f.addr = alloca %struct.rtx_def*, align 8
  %inserted = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %prologue_end = alloca %struct.rtx_def*, align 8
  %epilogue_end = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.basic_block_def*, align 8
  %e_next = alloca %struct.edge_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %epilogue_line_note = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %ret = alloca %struct.rtx_def*, align 8
  %loc = alloca %struct.rtx_def**, align 8
  %bb194 = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %i = alloca %struct.rtx_def*, align 8
  %newinsn = alloca %struct.rtx_def*, align 8
  %insn220 = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %insn297 = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %f, %struct.rtx_def** %f.addr, align 8
  store i32 0, i32* %inserted, align 4
  store %struct.rtx_def* null, %struct.rtx_def** %prologue_end, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %epilogue_end, align 8
  call void @start_sequence()
  %call = call %struct.rtx_def* @gen_prologue()
  store %struct.rtx_def* %call, %struct.rtx_def** %seq, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call1 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %0)
  %1 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 24
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call2, %struct.rtx_def** %seq, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  call void @record_insns(%struct.rtx_def* %3, %struct.varray_head_tag** @prologue)
  %call3 = call %struct.rtx_def* @emit_note(i8* null, i32 -90)
  store %struct.rtx_def* %call3, %struct.rtx_def** %prologue_end, align 8
  %call4 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call4, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %4 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 0, i32 5), align 8
  %tobool = icmp ne %struct.edge_def* %4, null
  br i1 %tobool, label %lor.lhs.false, label %if.then.6

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 0, i32 5), align 8
  %succ_next = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 1
  %6 = load %struct.edge_def*, %struct.edge_def** %succ_next, align 8
  %tobool5 = icmp ne %struct.edge_def* %6, null
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %lor.lhs.false, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7594, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @__FUNCTION__.thread_prologue_and_epilogue_insns, i32 0, i32 0)) #6
  unreachable

if.end.7:                                         ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %8 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 0, i32 5), align 8
  call void @insert_insn_on_edge(%struct.rtx_def* %7, %struct.edge_def* %8)
  store i32 1, i32* %inserted, align 4
  %9 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 1, i32 4), align 8
  store %struct.edge_def* %9, %struct.edge_def** %e, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.7
  %10 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %tobool8 = icmp ne %struct.edge_def* %10, null
  br i1 %tobool8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 6
  %12 = load i32, i32* %flags, align 4
  %and = and i32 %12, 16
  %cmp9 = icmp eq i32 %and, 0
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %for.body
  br label %for.end

if.end.11:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.11
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %pred_next = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 0
  %14 = load %struct.edge_def*, %struct.edge_def** %pred_next, align 8
  store %struct.edge_def* %14, %struct.edge_def** %e, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.10, %for.cond
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %cmp12 = icmp eq %struct.edge_def* %15, null
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %for.end
  br label %epilogue_done

if.end.14:                                        ; preds = %for.end
  %16 = load i32, i32* @optimize, align 4
  %tobool15 = icmp ne i32 %16, 0
  br i1 %tobool15, label %land.lhs.true, label %if.end.149

land.lhs.true:                                    ; preds = %if.end.14
  %call16 = call i32 @ix86_can_use_return_insn_p()
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.end.149

if.then.18:                                       ; preds = %land.lhs.true
  %17 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 1, i32 4), align 8
  store %struct.edge_def* %17, %struct.edge_def** %e, align 8
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.27, %if.then.18
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %tobool20 = icmp ne %struct.edge_def* %18, null
  br i1 %tobool20, label %for.body.21, label %for.end.29

for.body.21:                                      ; preds = %for.cond.19
  %19 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %flags22 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 6
  %20 = load i32, i32* %flags22, align 4
  %and23 = and i32 %20, 1
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %for.body.21
  br label %for.end.29

if.end.26:                                        ; preds = %for.body.21
  br label %for.inc.27

for.inc.27:                                       ; preds = %if.end.26
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %pred_next28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 0
  %22 = load %struct.edge_def*, %struct.edge_def** %pred_next28, align 8
  store %struct.edge_def* %22, %struct.edge_def** %e, align 8
  br label %for.cond.19

for.end.29:                                       ; preds = %if.then.25, %for.cond.19
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %cmp30 = icmp eq %struct.edge_def* %23, null
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %for.end.29
  br label %epilogue_done

if.end.32:                                        ; preds = %for.end.29
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 2
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8
  store %struct.basic_block_def* %25, %struct.basic_block_def** %last, align 8
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8
  %end = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 1
  %27 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8
  store %struct.rtx_def* %27, %struct.rtx_def** %label, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.40, %if.end.32
  %28 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %tobool33 = icmp ne %struct.rtx_def* %28, null
  br i1 %tobool33, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %29 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load34 = load i32, i32* %30, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp ne i32 %bf.clear35, 36
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %31 = phi i1 [ false, %while.cond ], [ %cmp36, %land.rhs ]
  br i1 %31, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %call37 = call i32 @active_insn_p(%struct.rtx_def* %32)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %while.body
  br label %while.end

if.end.40:                                        ; preds = %while.body
  %33 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %34, %struct.rtx_def** %label, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then.39, %land.end
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8
  %head = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 0
  %36 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %cmp41 = icmp eq %struct.rtx_def* %36, %37
  br i1 %cmp41, label %land.lhs.true.42, label %if.end.148

land.lhs.true.42:                                 ; preds = %while.end
  %38 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load43 = load i32, i32* %39, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 36
  br i1 %cmp45, label %if.then.46, label %if.end.148

if.then.46:                                       ; preds = %land.lhs.true.42
  store %struct.rtx_def* null, %struct.rtx_def** %epilogue_line_note, align 8
  %call47 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call47, %struct.rtx_def** %seq, align 8
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.64, %if.then.46
  %40 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %tobool49 = icmp ne %struct.rtx_def* %40, null
  br i1 %tobool49, label %land.rhs.50, label %land.end.53

land.rhs.50:                                      ; preds = %for.cond.48
  %41 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call51 = call i32 @active_insn_p(%struct.rtx_def* %41)
  %tobool52 = icmp ne i32 %call51, 0
  %lnot = xor i1 %tobool52, true
  br label %land.end.53

land.end.53:                                      ; preds = %land.rhs.50, %for.cond.48
  %42 = phi i1 [ false, %for.cond.48 ], [ %lnot, %land.rhs.50 ]
  br i1 %42, label %for.body.54, label %for.end.68

for.body.54:                                      ; preds = %land.end.53
  %43 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %44 = bitcast %struct.rtx_def* %43 to i32*
  %bf.load55 = load i32, i32* %44, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 37
  br i1 %cmp57, label %land.lhs.true.58, label %if.end.63

land.lhs.true.58:                                 ; preds = %for.body.54
  %45 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx60 to i32*
  %46 = load i32, i32* %rtint, align 4
  %cmp61 = icmp sgt i32 %46, 0
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %land.lhs.true.58
  %47 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %epilogue_line_note, align 8
  br label %for.end.68

if.end.63:                                        ; preds = %land.lhs.true.58, %for.body.54
  br label %for.inc.64

for.inc.64:                                       ; preds = %if.end.63
  %48 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 1
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %seq, align 8
  br label %for.cond.48

for.end.68:                                       ; preds = %if.then.62, %land.end.53
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8
  %pred = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 4
  %51 = load %struct.edge_def*, %struct.edge_def** %pred, align 8
  store %struct.edge_def* %51, %struct.edge_def** %e, align 8
  br label %for.cond.69

for.cond.69:                                      ; preds = %for.inc.140, %for.end.68
  %52 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %tobool70 = icmp ne %struct.edge_def* %52, null
  br i1 %tobool70, label %for.body.71, label %for.end.141

for.body.71:                                      ; preds = %for.cond.69
  %53 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %src72 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 2
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %src72, align 8
  store %struct.basic_block_def* %54, %struct.basic_block_def** %bb, align 8
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %pred_next73 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 0
  %56 = load %struct.edge_def*, %struct.edge_def** %pred_next73, align 8
  store %struct.edge_def* %56, %struct.edge_def** %e_next, align 8
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8
  %cmp74 = icmp eq %struct.basic_block_def* %57, getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 0)
  br i1 %cmp74, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %for.body.71
  br label %for.inc.140

if.end.76:                                        ; preds = %for.body.71
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8
  %end77 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 1
  %59 = load %struct.rtx_def*, %struct.rtx_def** %end77, align 8
  store %struct.rtx_def* %59, %struct.rtx_def** %jump, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %61 = bitcast %struct.rtx_def* %60 to i32*
  %bf.load78 = load i32, i32* %61, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  %cmp80 = icmp ne i32 %bf.clear79, 33
  br i1 %cmp80, label %if.then.86, label %lor.lhs.false.81

lor.lhs.false.81:                                 ; preds = %if.end.76
  %62 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %fld82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i32 0, i64 7
  %rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rtx84, align 8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8
  %cmp85 = icmp ne %struct.rtx_def* %63, %64
  br i1 %cmp85, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %lor.lhs.false.81, %if.end.76
  br label %for.inc.140

if.end.87:                                        ; preds = %lor.lhs.false.81
  %65 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call88 = call i32 @simplejump_p(%struct.rtx_def* %65)
  %tobool89 = icmp ne i32 %call88, 0
  br i1 %tobool89, label %if.then.90, label %if.else

if.then.90:                                       ; preds = %if.end.87
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_line_note, align 8
  call void @emit_return_into_block(%struct.basic_block_def* %66, %struct.rtx_def* %67)
  %68 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call91 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %68)
  br label %if.end.139

if.else:                                          ; preds = %if.end.87
  %69 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %call92 = call i32 @condjump_p(%struct.rtx_def* %69)
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %if.then.94, label %if.else.137

if.then.94:                                       ; preds = %if.else
  %70 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 3
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtx97, align 8
  %fld98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i32 0, i64 1
  %rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rtx100, align 8
  store %struct.rtx_def* %72, %struct.rtx_def** %ret, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 1
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rtx103, align 8
  %75 = bitcast %struct.rtx_def* %74 to i32*
  %bf.load104 = load i32, i32* %75, align 8
  %bf.clear105 = and i32 %bf.load104, 65535
  %cmp106 = icmp eq i32 %bf.clear105, 67
  br i1 %cmp106, label %if.then.107, label %if.else.111

if.then.107:                                      ; preds = %if.then.94
  %76 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 1
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  store %struct.rtx_def** %rtx110, %struct.rtx_def*** %loc, align 8
  br label %if.end.115

if.else.111:                                      ; preds = %if.then.94
  %77 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %fld112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i32 0, i64 2
  %rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**
  store %struct.rtx_def** %rtx114, %struct.rtx_def*** %loc, align 8
  br label %if.end.115

if.end.115:                                       ; preds = %if.else.111, %if.then.107
  %call116 = call %struct.rtx_def* @gen_rtx_fmt_(i32 51, i32 0)
  store %struct.rtx_def* %call116, %struct.rtx_def** %ret, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %79 = load %struct.rtx_def**, %struct.rtx_def*** %loc, align 8
  %80 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8
  %call117 = call i32 @validate_change(%struct.rtx_def* %78, %struct.rtx_def** %79, %struct.rtx_def* %80, i32 0)
  %tobool118 = icmp ne i32 %call117, 0
  br i1 %tobool118, label %if.end.120, label %if.then.119

if.then.119:                                      ; preds = %if.end.115
  br label %for.inc.140

if.end.120:                                       ; preds = %if.end.115
  %81 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %fld121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i32 0, i64 7
  %rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtx123, align 8
  %tobool124 = icmp ne %struct.rtx_def* %82, null
  br i1 %tobool124, label %if.then.125, label %if.end.132

if.then.125:                                      ; preds = %if.end.120
  %83 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8
  %fld126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i32 0, i64 7
  %rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtx128, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 3
  %rtint131 = bitcast %union.rtunion_def* %arrayidx130 to i32*
  %85 = load i32, i32* %rtint131, align 4
  %dec = add nsw i32 %85, -1
  store i32 %dec, i32* %rtint131, align 4
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.125, %if.end.120
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8
  %succ = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i32 0, i32 5
  %87 = load %struct.edge_def*, %struct.edge_def** %succ, align 8
  %succ_next133 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %87, i32 0, i32 1
  %88 = load %struct.edge_def*, %struct.edge_def** %succ_next133, align 8
  %cmp134 = icmp eq %struct.edge_def* %88, null
  br i1 %cmp134, label %if.then.135, label %if.end.136

if.then.135:                                      ; preds = %if.end.132
  br label %for.inc.140

if.end.136:                                       ; preds = %if.end.132
  br label %if.end.138

if.else.137:                                      ; preds = %if.else
  br label %for.inc.140

if.end.138:                                       ; preds = %if.end.136
  br label %if.end.139

if.end.139:                                       ; preds = %if.end.138, %if.then.90
  %89 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  call void @redirect_edge_succ(%struct.edge_def* %89, %struct.basic_block_def* getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 1))
  br label %for.inc.140

for.inc.140:                                      ; preds = %if.end.139, %if.else.137, %if.then.135, %if.then.119, %if.then.86, %if.then.75
  %90 = load %struct.edge_def*, %struct.edge_def** %e_next, align 8
  store %struct.edge_def* %90, %struct.edge_def** %e, align 8
  br label %for.cond.69

for.end.141:                                      ; preds = %for.cond.69
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8
  %end142 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 1
  %92 = load %struct.rtx_def*, %struct.rtx_def** %end142, align 8
  %call143 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %92)
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8
  %94 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_line_note, align 8
  call void @emit_return_into_block(%struct.basic_block_def* %93, %struct.rtx_def* %94)
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8
  %end144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 1
  %96 = load %struct.rtx_def*, %struct.rtx_def** %end144, align 8
  store %struct.rtx_def* %96, %struct.rtx_def** %epilogue_end, align 8
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8
  %succ145 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 5
  %98 = load %struct.edge_def*, %struct.edge_def** %succ145, align 8
  %flags146 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %98, i32 0, i32 6
  %99 = load i32, i32* %flags146, align 4
  %and147 = and i32 %99, -2
  store i32 %and147, i32* %flags146, align 4
  br label %epilogue_done

if.end.148:                                       ; preds = %land.lhs.true.42, %while.end
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %land.lhs.true, %if.end.14
  %100 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 1, i32 4), align 8
  store %struct.edge_def* %100, %struct.edge_def** %e, align 8
  br label %for.cond.150

for.cond.150:                                     ; preds = %for.inc.158, %if.end.149
  %101 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %tobool151 = icmp ne %struct.edge_def* %101, null
  br i1 %tobool151, label %for.body.152, label %for.end.160

for.body.152:                                     ; preds = %for.cond.150
  %102 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %flags153 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 6
  %103 = load i32, i32* %flags153, align 4
  %and154 = and i32 %103, 1
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %if.then.156, label %if.end.157

if.then.156:                                      ; preds = %for.body.152
  br label %for.end.160

if.end.157:                                       ; preds = %for.body.152
  br label %for.inc.158

for.inc.158:                                      ; preds = %if.end.157
  %104 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %pred_next159 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %104, i32 0, i32 0
  %105 = load %struct.edge_def*, %struct.edge_def** %pred_next159, align 8
  store %struct.edge_def* %105, %struct.edge_def** %e, align 8
  br label %for.cond.150

for.end.160:                                      ; preds = %if.then.156, %for.cond.150
  %106 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %cmp161 = icmp eq %struct.edge_def* %106, null
  br i1 %cmp161, label %if.then.162, label %if.end.163

if.then.162:                                      ; preds = %for.end.160
  br label %epilogue_done

if.end.163:                                       ; preds = %for.end.160
  call void @start_sequence()
  %call164 = call %struct.rtx_def* @emit_note(i8* null, i32 -89)
  store %struct.rtx_def* %call164, %struct.rtx_def** %epilogue_end, align 8
  %call165 = call %struct.rtx_def* @gen_epilogue()
  store %struct.rtx_def* %call165, %struct.rtx_def** %seq, align 8
  %107 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common = bitcast %union.tree_node* %107 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %108 = load %union.tree_node*, %union.tree_node** %type, align 8
  %common166 = bitcast %union.tree_node* %108 to %struct.tree_common*
  %code = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common166, i32 0, i32 2
  %bf.load167 = load i32, i32* %code, align 8
  %bf.clear168 = and i32 %bf.load167, 255
  %cmp169 = icmp eq i32 %bf.clear168, 23
  br i1 %cmp169, label %land.lhs.true.170, label %if.end.179

land.lhs.true.170:                                ; preds = %if.end.163
  %109 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8
  %common171 = bitcast %union.tree_node* %109 to %struct.tree_common*
  %type172 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 1
  %110 = load %union.tree_node*, %union.tree_node** %type172, align 8
  %type173 = bitcast %union.tree_node* %110 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type173, i32 0, i32 6
  %bf.load174 = load i32, i32* %no_force_blk_flag, align 4
  %bf.lshr = lshr i32 %bf.load174, 17
  %bf.clear175 = and i32 %bf.lshr, 1
  %tobool176 = icmp ne i32 %bf.clear175, 0
  br i1 %tobool176, label %if.then.177, label %if.end.179

if.then.177:                                      ; preds = %land.lhs.true.170
  %111 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call178 = call %struct.rtx_def* @keep_stack_depressed(%struct.rtx_def* %111)
  store %struct.rtx_def* %call178, %struct.rtx_def** %seq, align 8
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.177, %land.lhs.true.170, %if.end.163
  %112 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %call180 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %112)
  %113 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %114 = bitcast %struct.rtx_def* %113 to i32*
  %bf.load181 = load i32, i32* %114, align 8
  %bf.clear182 = and i32 %bf.load181, 65535
  %cmp183 = icmp ne i32 %bf.clear182, 24
  br i1 %cmp183, label %if.then.184, label %if.end.186

if.then.184:                                      ; preds = %if.end.179
  %call185 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call185, %struct.rtx_def** %seq, align 8
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.184, %if.end.179
  %115 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  call void @record_insns(%struct.rtx_def* %115, %struct.varray_head_tag** @epilogue)
  %call187 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call187, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %116 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %117 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  call void @insert_insn_on_edge(%struct.rtx_def* %116, %struct.edge_def* %117)
  store i32 1, i32* %inserted, align 4
  br label %epilogue_done

epilogue_done:                                    ; preds = %if.end.186, %if.then.162, %for.end.141, %if.then.31, %if.then.13
  %118 = load i32, i32* %inserted, align 4
  %tobool188 = icmp ne i32 %118, 0
  br i1 %tobool188, label %if.then.189, label %if.end.190

if.then.189:                                      ; preds = %epilogue_done
  call void @commit_edge_insertions()
  br label %if.end.190

if.end.190:                                       ; preds = %if.then.189, %epilogue_done
  %119 = load %struct.edge_def*, %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 1, i32 4), align 8
  store %struct.edge_def* %119, %struct.edge_def** %e, align 8
  br label %for.cond.191

for.cond.191:                                     ; preds = %for.inc.215, %if.end.190
  %120 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %tobool192 = icmp ne %struct.edge_def* %120, null
  br i1 %tobool192, label %for.body.193, label %for.end.217

for.body.193:                                     ; preds = %for.cond.191
  %121 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %src195 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %121, i32 0, i32 2
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %src195, align 8
  store %struct.basic_block_def* %122, %struct.basic_block_def** %bb194, align 8
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %bb194, align 8
  %end196 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %123, i32 0, i32 1
  %124 = load %struct.rtx_def*, %struct.rtx_def** %end196, align 8
  store %struct.rtx_def* %124, %struct.rtx_def** %insn, align 8
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %126 = bitcast %struct.rtx_def* %125 to i32*
  %bf.load197 = load i32, i32* %126, align 8
  %bf.clear198 = and i32 %bf.load197, 65535
  %cmp199 = icmp ne i32 %bf.clear198, 34
  br i1 %cmp199, label %if.then.205, label %lor.lhs.false.200

lor.lhs.false.200:                                ; preds = %for.body.193
  %127 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %128 = bitcast %struct.rtx_def* %127 to i32*
  %bf.load201 = load i32, i32* %128, align 8
  %bf.lshr202 = lshr i32 %bf.load201, 24
  %bf.clear203 = and i32 %bf.lshr202, 1
  %tobool204 = icmp ne i32 %bf.clear203, 0
  br i1 %tobool204, label %if.end.206, label %if.then.205

if.then.205:                                      ; preds = %lor.lhs.false.200, %for.body.193
  br label %for.inc.215

if.end.206:                                       ; preds = %lor.lhs.false.200
  call void @start_sequence()
  %call207 = call %struct.rtx_def* @gen_sibcall_epilogue()
  store %struct.rtx_def* %call207, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %129 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld208 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %129, i32 0, i32 1
  %arrayidx209 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld208, i32 0, i64 1
  %rtx210 = bitcast %union.rtunion_def* %arrayidx209 to %struct.rtx_def**
  %130 = load %struct.rtx_def*, %struct.rtx_def** %rtx210, align 8
  store %struct.rtx_def* %130, %struct.rtx_def** %i, align 8
  %131 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %132 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call211 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %131, %struct.rtx_def* %132)
  store %struct.rtx_def* %call211, %struct.rtx_def** %newinsn, align 8
  %133 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %134 = bitcast %struct.rtx_def* %133 to i32*
  %bf.load212 = load i32, i32* %134, align 8
  %bf.clear213 = and i32 %bf.load212, 65535
  %cmp214 = icmp eq i32 %bf.clear213, 24
  br i1 %cmp214, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.206
  %135 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.206
  %136 = load %struct.rtx_def*, %struct.rtx_def** %newinsn, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %135, %cond.true ], [ %136, %cond.false ]
  call void @record_insns(%struct.rtx_def* %cond, %struct.varray_head_tag** @sibcall_epilogue)
  br label %for.inc.215

for.inc.215:                                      ; preds = %cond.end, %if.then.205
  %137 = load %struct.edge_def*, %struct.edge_def** %e, align 8
  %pred_next216 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %137, i32 0, i32 0
  %138 = load %struct.edge_def*, %struct.edge_def** %pred_next216, align 8
  store %struct.edge_def* %138, %struct.edge_def** %e, align 8
  br label %for.cond.191

for.end.217:                                      ; preds = %for.cond.191
  %139 = load %struct.rtx_def*, %struct.rtx_def** %prologue_end, align 8
  %tobool218 = icmp ne %struct.rtx_def* %139, null
  br i1 %tobool218, label %if.then.219, label %if.end.294

if.then.219:                                      ; preds = %for.end.217
  %140 = load %struct.rtx_def*, %struct.rtx_def** %prologue_end, align 8
  store %struct.rtx_def* %140, %struct.rtx_def** %insn220, align 8
  br label %for.cond.221

for.cond.221:                                     ; preds = %for.inc.240, %if.then.219
  %141 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %tobool222 = icmp ne %struct.rtx_def* %141, null
  br i1 %tobool222, label %for.body.223, label %for.end.241

for.body.223:                                     ; preds = %for.cond.221
  %142 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %fld224 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1
  %arrayidx225 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld224, i32 0, i64 1
  %rtx226 = bitcast %union.rtunion_def* %arrayidx225 to %struct.rtx_def**
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rtx226, align 8
  store %struct.rtx_def* %143, %struct.rtx_def** %prev, align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %145 = bitcast %struct.rtx_def* %144 to i32*
  %bf.load227 = load i32, i32* %145, align 8
  %bf.clear228 = and i32 %bf.load227, 65535
  %cmp229 = icmp eq i32 %bf.clear228, 37
  br i1 %cmp229, label %land.lhs.true.230, label %if.end.239

land.lhs.true.230:                                ; preds = %for.body.223
  %146 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %fld231 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1
  %arrayidx232 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld231, i32 0, i64 4
  %rtint233 = bitcast %union.rtunion_def* %arrayidx232 to i32*
  %147 = load i32, i32* %rtint233, align 4
  %cmp234 = icmp sgt i32 %147, 0
  br i1 %cmp234, label %if.then.235, label %if.end.239

if.then.235:                                      ; preds = %land.lhs.true.230
  %148 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %cmp236 = icmp eq %struct.rtx_def* %148, null
  br i1 %cmp236, label %if.then.237, label %if.end.238

if.then.237:                                      ; preds = %if.then.235
  br label %for.end.241

if.end.238:                                       ; preds = %if.then.235
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %150 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %151 = load %struct.rtx_def*, %struct.rtx_def** %prologue_end, align 8
  call void @reorder_insns(%struct.rtx_def* %149, %struct.rtx_def* %150, %struct.rtx_def* %151)
  br label %if.end.239

if.end.239:                                       ; preds = %if.end.238, %land.lhs.true.230, %for.body.223
  br label %for.inc.240

for.inc.240:                                      ; preds = %if.end.239
  %152 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  store %struct.rtx_def* %152, %struct.rtx_def** %insn220, align 8
  br label %for.cond.221

for.end.241:                                      ; preds = %if.then.237, %for.cond.221
  %153 = load %struct.varray_head_tag*, %struct.varray_head_tag** @basic_block_info, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %153, i32 0, i32 4
  %bb242 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx243 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %bb242, i32 0, i64 0
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx243, align 8
  %end244 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %154, i32 0, i32 1
  %155 = load %struct.rtx_def*, %struct.rtx_def** %end244, align 8
  store %struct.rtx_def* %155, %struct.rtx_def** %insn220, align 8
  br label %for.cond.245

for.cond.245:                                     ; preds = %for.inc.261, %for.end.241
  %156 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %prologue_end, align 8
  %cmp246 = icmp ne %struct.rtx_def* %156, %157
  br i1 %cmp246, label %land.rhs.247, label %land.end.249

land.rhs.247:                                     ; preds = %for.cond.245
  %158 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %tobool248 = icmp ne %struct.rtx_def* %158, null
  br label %land.end.249

land.end.249:                                     ; preds = %land.rhs.247, %for.cond.245
  %159 = phi i1 [ false, %for.cond.245 ], [ %tobool248, %land.rhs.247 ]
  br i1 %159, label %for.body.250, label %for.end.265

for.body.250:                                     ; preds = %land.end.249
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load251 = load i32, i32* %161, align 8
  %bf.clear252 = and i32 %bf.load251, 65535
  %cmp253 = icmp eq i32 %bf.clear252, 37
  br i1 %cmp253, label %land.lhs.true.254, label %if.end.260

land.lhs.true.254:                                ; preds = %for.body.250
  %162 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %fld255 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1
  %arrayidx256 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld255, i32 0, i64 4
  %rtint257 = bitcast %union.rtunion_def* %arrayidx256 to i32*
  %163 = load i32, i32* %rtint257, align 4
  %cmp258 = icmp sgt i32 %163, 0
  br i1 %cmp258, label %if.then.259, label %if.end.260

if.then.259:                                      ; preds = %land.lhs.true.254
  br label %for.end.265

if.end.260:                                       ; preds = %land.lhs.true.254, %for.body.250
  br label %for.inc.261

for.inc.261:                                      ; preds = %if.end.260
  %164 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %fld262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %164, i32 0, i32 1
  %arrayidx263 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld262, i32 0, i64 1
  %rtx264 = bitcast %union.rtunion_def* %arrayidx263 to %struct.rtx_def**
  %165 = load %struct.rtx_def*, %struct.rtx_def** %rtx264, align 8
  store %struct.rtx_def* %165, %struct.rtx_def** %insn220, align 8
  br label %for.cond.245

for.end.265:                                      ; preds = %if.then.259, %land.end.249
  %166 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %tobool266 = icmp ne %struct.rtx_def* %166, null
  br i1 %tobool266, label %if.end.293, label %if.then.267

if.then.267:                                      ; preds = %for.end.265
  %167 = load %struct.rtx_def*, %struct.rtx_def** %prologue_end, align 8
  %call268 = call %struct.rtx_def* @next_active_insn(%struct.rtx_def* %167)
  store %struct.rtx_def* %call268, %struct.rtx_def** %insn220, align 8
  br label %for.cond.269

for.cond.269:                                     ; preds = %for.inc.288, %if.then.267
  %168 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %tobool270 = icmp ne %struct.rtx_def* %168, null
  br i1 %tobool270, label %for.body.271, label %for.end.292

for.body.271:                                     ; preds = %for.cond.269
  %169 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %170 = bitcast %struct.rtx_def* %169 to i32*
  %bf.load272 = load i32, i32* %170, align 8
  %bf.clear273 = and i32 %bf.load272, 65535
  %cmp274 = icmp eq i32 %bf.clear273, 37
  br i1 %cmp274, label %land.lhs.true.275, label %if.end.287

land.lhs.true.275:                                ; preds = %for.body.271
  %171 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %fld276 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1
  %arrayidx277 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld276, i32 0, i64 4
  %rtint278 = bitcast %union.rtunion_def* %arrayidx277 to i32*
  %172 = load i32, i32* %rtint278, align 4
  %cmp279 = icmp sgt i32 %172, 0
  br i1 %cmp279, label %if.then.280, label %if.end.287

if.then.280:                                      ; preds = %land.lhs.true.275
  %173 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %fld281 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %173, i32 0, i32 1
  %arrayidx282 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld281, i32 0, i64 3
  %rtstr = bitcast %union.rtunion_def* %arrayidx282 to i8**
  %174 = load i8*, i8** %rtstr, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %fld283 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1
  %arrayidx284 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld283, i32 0, i64 4
  %rtint285 = bitcast %union.rtunion_def* %arrayidx284 to i32*
  %176 = load i32, i32* %rtint285, align 4
  %177 = load %struct.rtx_def*, %struct.rtx_def** %prologue_end, align 8
  %call286 = call %struct.rtx_def* @emit_line_note_after(i8* %174, i32 %176, %struct.rtx_def* %177)
  br label %for.end.292

if.end.287:                                       ; preds = %land.lhs.true.275, %for.body.271
  br label %for.inc.288

for.inc.288:                                      ; preds = %if.end.287
  %178 = load %struct.rtx_def*, %struct.rtx_def** %insn220, align 8
  %fld289 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1
  %arrayidx290 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld289, i32 0, i64 1
  %rtx291 = bitcast %union.rtunion_def* %arrayidx290 to %struct.rtx_def**
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rtx291, align 8
  store %struct.rtx_def* %179, %struct.rtx_def** %insn220, align 8
  br label %for.cond.269

for.end.292:                                      ; preds = %if.then.280, %for.cond.269
  br label %if.end.293

if.end.293:                                       ; preds = %for.end.292, %for.end.265
  br label %if.end.294

if.end.294:                                       ; preds = %if.end.293, %for.end.217
  %180 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_end, align 8
  %tobool295 = icmp ne %struct.rtx_def* %180, null
  br i1 %tobool295, label %if.then.296, label %if.end.319

if.then.296:                                      ; preds = %if.end.294
  %181 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_end, align 8
  store %struct.rtx_def* %181, %struct.rtx_def** %insn297, align 8
  br label %for.cond.298

for.cond.298:                                     ; preds = %for.inc.317, %if.then.296
  %182 = load %struct.rtx_def*, %struct.rtx_def** %insn297, align 8
  %tobool299 = icmp ne %struct.rtx_def* %182, null
  br i1 %tobool299, label %for.body.300, label %for.end.318

for.body.300:                                     ; preds = %for.cond.298
  %183 = load %struct.rtx_def*, %struct.rtx_def** %insn297, align 8
  %fld301 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1
  %arrayidx302 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld301, i32 0, i64 2
  %rtx303 = bitcast %union.rtunion_def* %arrayidx302 to %struct.rtx_def**
  %184 = load %struct.rtx_def*, %struct.rtx_def** %rtx303, align 8
  store %struct.rtx_def* %184, %struct.rtx_def** %next, align 8
  %185 = load %struct.rtx_def*, %struct.rtx_def** %insn297, align 8
  %186 = bitcast %struct.rtx_def* %185 to i32*
  %bf.load304 = load i32, i32* %186, align 8
  %bf.clear305 = and i32 %bf.load304, 65535
  %cmp306 = icmp eq i32 %bf.clear305, 37
  br i1 %cmp306, label %land.lhs.true.307, label %if.end.316

land.lhs.true.307:                                ; preds = %for.body.300
  %187 = load %struct.rtx_def*, %struct.rtx_def** %insn297, align 8
  %fld308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %187, i32 0, i32 1
  %arrayidx309 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld308, i32 0, i64 4
  %rtint310 = bitcast %union.rtunion_def* %arrayidx309 to i32*
  %188 = load i32, i32* %rtint310, align 4
  %cmp311 = icmp sgt i32 %188, 0
  br i1 %cmp311, label %if.then.312, label %if.end.316

if.then.312:                                      ; preds = %land.lhs.true.307
  %189 = load %struct.rtx_def*, %struct.rtx_def** %insn297, align 8
  %190 = load %struct.rtx_def*, %struct.rtx_def** %insn297, align 8
  %191 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_end, align 8
  %fld313 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %191, i32 0, i32 1
  %arrayidx314 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld313, i32 0, i64 1
  %rtx315 = bitcast %union.rtunion_def* %arrayidx314 to %struct.rtx_def**
  %192 = load %struct.rtx_def*, %struct.rtx_def** %rtx315, align 8
  call void @reorder_insns(%struct.rtx_def* %189, %struct.rtx_def* %190, %struct.rtx_def* %192)
  br label %if.end.316

if.end.316:                                       ; preds = %if.then.312, %land.lhs.true.307, %for.body.300
  br label %for.inc.317

for.inc.317:                                      ; preds = %if.end.316
  %193 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  store %struct.rtx_def* %193, %struct.rtx_def** %insn297, align 8
  br label %for.cond.298

for.end.318:                                      ; preds = %for.cond.298
  br label %if.end.319

if.end.319:                                       ; preds = %for.end.318, %if.end.294
  ret void
}

declare %struct.rtx_def* @gen_prologue() #2

; Function Attrs: nounwind uwtable
define internal void @record_insns(%struct.rtx_def* %insns, %struct.varray_head_tag** %vecp) #0 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %vecp.addr = alloca %struct.varray_head_tag**, align 8
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %i13 = alloca i32, align 4
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  store %struct.varray_head_tag** %vecp, %struct.varray_head_tag*** %vecp.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %3 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %3, i32 0, i32 0
  %4 = load i32, i32* %num_elem, align 4
  store i32 %4, i32* %len, align 4
  %5 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %vecp.addr, align 8
  %6 = load %struct.varray_head_tag*, %struct.varray_head_tag** %5, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %6, i32 0, i32 0
  %7 = load i64, i64* %num_elements, align 8
  %conv = trunc i64 %7 to i32
  store i32 %conv, i32* %i, align 4
  %8 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %vecp.addr, align 8
  %9 = load %struct.varray_head_tag*, %struct.varray_head_tag** %8, align 8
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len, align 4
  %add = add nsw i32 %10, %11
  %conv1 = sext i32 %add to i64
  %call = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %9, i64 %conv1)
  %12 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %vecp.addr, align 8
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** %12, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %13 = load i32, i32* %len, align 4
  %dec = add nsw i32 %13, -1
  store i32 %dec, i32* %len, align 4
  %cmp2 = icmp sge i32 %dec, 0
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %len, align 4
  %idxprom = sext i32 %14 to i64
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtvec6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec6, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %16, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %18 = load i32, i32* %rtint, align 4
  %19 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %19 to i64
  %20 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %vecp.addr, align 8
  %21 = load %struct.varray_head_tag*, %struct.varray_head_tag** %20, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %21, i32 0, i32 4
  %i11 = bitcast %union.varray_data_tag* %data to [1 x i32]*
  %arrayidx12 = getelementptr inbounds [1 x i32], [1 x i32]* %i11, i32 0, i64 %idxprom10
  store i32 %18, i32* %arrayidx12, align 4
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %entry
  %23 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %vecp.addr, align 8
  %24 = load %struct.varray_head_tag*, %struct.varray_head_tag** %23, align 8
  %num_elements14 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %24, i32 0, i32 0
  %25 = load i64, i64* %num_elements14, align 8
  %conv15 = trunc i64 %25 to i32
  store i32 %conv15, i32* %i13, align 4
  %26 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %vecp.addr, align 8
  %27 = load %struct.varray_head_tag*, %struct.varray_head_tag** %26, align 8
  %28 = load i32, i32* %i13, align 4
  %add16 = add nsw i32 %28, 1
  %conv17 = sext i32 %add16 to i64
  %call18 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %27, i64 %conv17)
  %29 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %vecp.addr, align 8
  store %struct.varray_head_tag* %call18, %struct.varray_head_tag** %29, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtint21 = bitcast %union.rtunion_def* %arrayidx20 to i32*
  %31 = load i32, i32* %rtint21, align 4
  %32 = load i32, i32* %i13, align 4
  %idxprom22 = sext i32 %32 to i64
  %33 = load %struct.varray_head_tag**, %struct.varray_head_tag*** %vecp.addr, align 8
  %34 = load %struct.varray_head_tag*, %struct.varray_head_tag** %33, align 8
  %data23 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %34, i32 0, i32 4
  %i24 = bitcast %union.varray_data_tag* %data23 to [1 x i32]*
  %arrayidx25 = getelementptr inbounds [1 x i32], [1 x i32]* %i24, i32 0, i64 %idxprom22
  store i32 %31, i32* %arrayidx25, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %while.end
  ret void
}

declare void @insert_insn_on_edge(%struct.rtx_def*, %struct.edge_def*) #2

declare i32 @ix86_can_use_return_insn_p() #2

declare i32 @active_insn_p(%struct.rtx_def*) #2

declare i32 @simplejump_p(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @emit_return_into_block(%struct.basic_block_def* %bb, %struct.rtx_def* %line_note) #0 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %line_note.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  store %struct.rtx_def* %line_note, %struct.rtx_def** %line_note.addr, align 8
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8
  %end1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1
  %1 = load %struct.rtx_def*, %struct.rtx_def** %end1, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %p, align 8
  %call = call %struct.rtx_def* @gen_return()
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8
  %end2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1
  %4 = load %struct.rtx_def*, %struct.rtx_def** %end2, align 8
  %call3 = call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call, %struct.rtx_def* %4)
  store %struct.rtx_def* %call3, %struct.rtx_def** %end, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %line_note.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %line_note.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 3
  %rtstr = bitcast %union.rtunion_def* %arrayidx5 to i8**
  %7 = load i8*, i8** %rtstr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %line_note.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %9 = load i32, i32* %rtint, align 4
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8
  %end8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end8, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 1
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  %call12 = call %struct.rtx_def* @emit_line_note_after(i8* %7, i32 %9, %struct.rtx_def* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

declare i32 @condjump_p(%struct.rtx_def*) #2

declare %struct.rtx_def* @gen_rtx_fmt_(i32, i32) #2

declare i32 @validate_change(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i32) #2

declare void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

declare %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #2

declare %struct.rtx_def* @gen_epilogue() #2

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @keep_stack_depressed(%struct.rtx_def* %seq) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %seq.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %info = alloca %struct.epi_info, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %retaddr = alloca %struct.rtx_def*, align 8
  %base = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  %jump_insn = alloca %struct.rtx_def*, align 8
  %jump_set = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %seq, %struct.rtx_def** %seq.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 24
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @start_sequence()
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %sp_equiv_reg = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  store %struct.rtx_def* %3, %struct.rtx_def** %sp_equiv_reg, align 8
  %sp_offset = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 1
  store i64 0, i64* %sp_offset, align 8
  %equiv_reg_src = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 4
  store %struct.rtx_def* null, %struct.rtx_def** %equiv_reg_src, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.413, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %6 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %6, i32 0, i32 0
  %7 = load i32, i32* %num_elem, align 4
  %cmp1 = icmp slt i32 %4, %7
  br i1 %cmp1, label %for.body, label %for.end.415

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 0
  %rtvec4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtvec_def**
  %10 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec4, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %10, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx5, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load6 = load i32, i32* %13, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %idxprom8 = sext i32 %bf.clear7 to i64
  %arrayidx9 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom8
  %14 = load i8, i8* %arrayidx9, align 1
  %conv = sext i8 %14 to i32
  %cmp10 = icmp eq i32 %conv, 105
  br i1 %cmp10, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %for.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  call void @add_insn(%struct.rtx_def* %15)
  br label %for.inc.413

if.end.13:                                        ; preds = %for.body
  %equiv_reg_src14 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %equiv_reg_src14, align 8
  %cmp15 = icmp ne %struct.rtx_def* %16, null
  br i1 %cmp15, label %land.lhs.true, label %if.end.22

land.lhs.true:                                    ; preds = %if.end.13
  %sp_equiv_reg17 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  %17 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg17, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %call = call i32 @reg_referenced_p(%struct.rtx_def* %17, %struct.rtx_def* %19)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %land.lhs.true
  call void @emit_equiv_load(%struct.epi_info* %info)
  %sp_equiv_reg21 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  store %struct.rtx_def* null, %struct.rtx_def** %sp_equiv_reg21, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.20, %land.lhs.true, %if.end.13
  %sp_equiv_reg23 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  %20 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg23, align 8
  %new_sp_equiv_reg = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 2
  store %struct.rtx_def* %20, %struct.rtx_def** %new_sp_equiv_reg, align 8
  %sp_offset24 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 1
  %21 = load i64, i64* %sp_offset24, align 8
  %new_sp_offset = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 3
  store i64 %21, i64* %new_sp_offset, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 3
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx27, align 8
  %24 = bitcast %struct.rtx_def* %23 to i32*
  %bf.load28 = load i32, i32* %24, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 51
  br i1 %cmp30, label %if.then.52, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.22
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 3
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx34, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load35 = load i32, i32* %27, align 8
  %bf.clear36 = and i32 %bf.load35, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 39
  br i1 %cmp37, label %land.lhs.true.39, label %if.else.310

land.lhs.true.39:                                 ; preds = %lor.lhs.false
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 3
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx42, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtvec45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtvec_def**
  %30 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec45, align 8
  %elem46 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %30, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem46, i32 0, i64 0
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load48 = load i32, i32* %32, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 51
  br i1 %cmp50, label %if.then.52, label %if.else.310

if.then.52:                                       ; preds = %land.lhs.true.39, %if.end.22
  %call53 = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 7)
  %call54 = call %struct.rtx_def* @gen_rtx_MEM(i32 0, %struct.rtx_def* %call53)
  store %struct.rtx_def* %call54, %struct.rtx_def** %retaddr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %base, align 8
  store i64 0, i64* %offset, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load55 = load i32, i32* %34, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 61
  br i1 %cmp57, label %if.then.59, label %if.else

if.then.59:                                       ; preds = %if.then.52
  call void @emit_equiv_load(%struct.epi_info* %info)
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  call void @add_insn(%struct.rtx_def* %35)
  br label %for.inc.413

if.else:                                          ; preds = %if.then.52
  %36 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load60 = load i32, i32* %37, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 66
  br i1 %cmp62, label %land.lhs.true.64, label %if.else.80

land.lhs.true.64:                                 ; preds = %if.else
  %38 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %fld65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i32 0, i64 0
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtx67, align 8
  %40 = bitcast %struct.rtx_def* %39 to i32*
  %bf.load68 = load i32, i32* %40, align 8
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 61
  br i1 %cmp70, label %if.then.72, label %if.else.80

if.then.72:                                       ; preds = %land.lhs.true.64
  %41 = load i32, i32* @target_flags, align 4
  %and = and i32 %41, 33554432
  %tobool73 = icmp ne i32 %and, 0
  %cond = select i1 %tobool73, i32 5, i32 4
  %42 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %fld74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i32 0, i64 0
  %rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx76, align 8
  %fld77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx78 to i32*
  %44 = load i32, i32* %rtuint, align 4
  %call79 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond, i32 %44)
  store %struct.rtx_def* %call79, %struct.rtx_def** %base, align 8
  store i64 0, i64* %offset, align 8
  br label %if.end.139

if.else.80:                                       ; preds = %land.lhs.true.64, %if.else
  %45 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %46 = bitcast %struct.rtx_def* %45 to i32*
  %bf.load81 = load i32, i32* %46, align 8
  %bf.clear82 = and i32 %bf.load81, 65535
  %cmp83 = icmp eq i32 %bf.clear82, 66
  br i1 %cmp83, label %land.lhs.true.85, label %if.else.137

land.lhs.true.85:                                 ; preds = %if.else.80
  %47 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %fld86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i32 0, i64 0
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx88, align 8
  %49 = bitcast %struct.rtx_def* %48 to i32*
  %bf.load89 = load i32, i32* %49, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 75
  br i1 %cmp91, label %land.lhs.true.93, label %if.else.137

land.lhs.true.93:                                 ; preds = %land.lhs.true.85
  %50 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %fld94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i32 0, i64 0
  %rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx96, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 0
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx99, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load100 = load i32, i32* %53, align 8
  %bf.clear101 = and i32 %bf.load100, 65535
  %cmp102 = icmp eq i32 %bf.clear101, 61
  br i1 %cmp102, label %land.lhs.true.104, label %if.else.137

land.lhs.true.104:                                ; preds = %land.lhs.true.93
  %54 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 0
  %rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx107, align 8
  %fld108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i32 0, i64 1
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx110, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %bf.load111 = load i32, i32* %57, align 8
  %bf.clear112 = and i32 %bf.load111, 65535
  %cmp113 = icmp eq i32 %bf.clear112, 54
  br i1 %cmp113, label %if.then.115, label %if.else.137

if.then.115:                                      ; preds = %land.lhs.true.104
  %58 = load i32, i32* @target_flags, align 4
  %and116 = and i32 %58, 33554432
  %tobool117 = icmp ne i32 %and116, 0
  %cond118 = select i1 %tobool117, i32 5, i32 4
  %59 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %fld119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i32 0, i64 0
  %rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx121, align 8
  %fld122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i32 0, i64 0
  %rtx124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtx_def**
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtx124, align 8
  %fld125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i32 0, i64 0
  %rtuint127 = bitcast %union.rtunion_def* %arrayidx126 to i32*
  %62 = load i32, i32* %rtuint127, align 4
  %call128 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond118, i32 %62)
  store %struct.rtx_def* %call128, %struct.rtx_def** %base, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %fld129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i32 0, i64 0
  %rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtx131, align 8
  %fld132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i32 0, i64 1
  %rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx134, align 8
  %fld135 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx136 to i64*
  %66 = load i64, i64* %rtwint, align 8
  store i64 %66, i64* %offset, align 8
  br label %if.end.138

if.else.137:                                      ; preds = %land.lhs.true.104, %land.lhs.true.93, %land.lhs.true.85, %if.else.80
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7377, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.keep_stack_depressed, i32 0, i32 0)) #6
  unreachable

if.end.138:                                       ; preds = %if.then.115
  br label %if.end.139

if.end.139:                                       ; preds = %if.end.138, %if.then.72
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139
  %67 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %68 = load i64, i64* %offset, align 8
  %call141 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %67, i64 %68)
  store %struct.rtx_def* %call141, %struct.rtx_def** %retaddr, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %base, align 8
  %70 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp142 = icmp eq %struct.rtx_def* %69, %70
  br i1 %cmp142, label %if.then.144, label %if.end.149

if.then.144:                                      ; preds = %if.end.140
  %71 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %sp_equiv_reg145 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  %73 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg145, align 8
  %sp_offset146 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 1
  %74 = load i64, i64* %sp_offset146, align 8
  %call147 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %73, i64 %74)
  %call148 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %71, %struct.rtx_def* %72, %struct.rtx_def* %call147)
  store %struct.rtx_def* %call148, %struct.rtx_def** %retaddr, align 8
  br label %if.end.149

if.end.149:                                       ; preds = %if.then.144, %if.end.140
  %75 = load i32, i32* @target_flags, align 4
  %and150 = and i32 %75, 33554432
  %tobool151 = icmp ne i32 %and150, 0
  %cond152 = select i1 %tobool151, i32 5, i32 4
  %76 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %call153 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond152, %struct.rtx_def* %76)
  store %struct.rtx_def* %call153, %struct.rtx_def** %retaddr, align 8
  %equiv_reg_src154 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 4
  %77 = load %struct.rtx_def*, %struct.rtx_def** %equiv_reg_src154, align 8
  %tobool155 = icmp ne %struct.rtx_def* %77, null
  br i1 %tobool155, label %land.lhs.true.156, label %if.end.271

land.lhs.true.156:                                ; preds = %if.end.149
  %equiv_reg_src157 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 4
  %78 = load %struct.rtx_def*, %struct.rtx_def** %equiv_reg_src157, align 8
  %79 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %call158 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %78, %struct.rtx_def* %79)
  %tobool159 = icmp ne i32 %call158, 0
  br i1 %tobool159, label %if.then.160, label %if.end.271

if.then.160:                                      ; preds = %land.lhs.true.156
  store i32 0, i32* %regno, align 4
  br label %for.cond.161

for.cond.161:                                     ; preds = %for.inc, %if.then.160
  %80 = load i32, i32* %regno, align 4
  %cmp162 = icmp ult i32 %80, 53
  br i1 %cmp162, label %for.body.164, label %for.end

for.body.164:                                     ; preds = %for.cond.161
  %81 = load i32, i32* %regno, align 4
  %82 = load i32, i32* @target_flags, align 4
  %and165 = and i32 %82, 33554432
  %tobool166 = icmp ne i32 %and165, 0
  %cond167 = select i1 %tobool166, i32 5, i32 4
  %call168 = call i32 @ix86_hard_regno_mode_ok(i32 %81, i32 %cond167)
  %tobool169 = icmp ne i32 %call168, 0
  br i1 %tobool169, label %land.lhs.true.170, label %if.end.261

land.lhs.true.170:                                ; preds = %for.body.164
  %83 = load i32, i32* %regno, align 4
  %idxprom171 = zext i32 %83 to i64
  %arrayidx172 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i32 0, i64 %idxprom171
  %84 = load i8, i8* %arrayidx172, align 1
  %tobool173 = icmp ne i8 %84, 0
  br i1 %tobool173, label %if.end.261, label %land.lhs.true.174

land.lhs.true.174:                                ; preds = %land.lhs.true.170
  %85 = load i64, i64* @regs_invalidated_by_call, align 8
  %86 = load i32, i32* %regno, align 4
  %sh_prom = zext i32 %86 to i64
  %shl = shl i64 1, %sh_prom
  %and175 = and i64 %85, %shl
  %tobool176 = icmp ne i64 %and175, 0
  br i1 %tobool176, label %land.lhs.true.177, label %if.end.261

land.lhs.true.177:                                ; preds = %land.lhs.true.174
  %87 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds ([2 x %struct.basic_block_def], [2 x %struct.basic_block_def]* @entry_exit_blocks, i32 0, i64 1, i32 8), align 8
  %88 = load i32, i32* %regno, align 4
  %call178 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %87, i32 %88)
  %tobool179 = icmp ne i32 %call178, 0
  br i1 %tobool179, label %if.end.261, label %land.lhs.true.180

land.lhs.true.180:                                ; preds = %land.lhs.true.177
  %89 = load i32, i32* %regno, align 4
  %90 = load i32, i32* %regno, align 4
  %91 = load i32, i32* %regno, align 4
  %cmp181 = icmp uge i32 %91, 8
  br i1 %cmp181, label %land.lhs.true.183, label %lor.lhs.false.186

land.lhs.true.183:                                ; preds = %land.lhs.true.180
  %92 = load i32, i32* %regno, align 4
  %cmp184 = icmp ule i32 %92, 15
  br i1 %cmp184, label %cond.true, label %lor.lhs.false.186

lor.lhs.false.186:                                ; preds = %land.lhs.true.183, %land.lhs.true.180
  %93 = load i32, i32* %regno, align 4
  %cmp187 = icmp uge i32 %93, 21
  br i1 %cmp187, label %land.lhs.true.189, label %lor.lhs.false.192

land.lhs.true.189:                                ; preds = %lor.lhs.false.186
  %94 = load i32, i32* %regno, align 4
  %cmp190 = icmp ule i32 %94, 28
  br i1 %cmp190, label %cond.true, label %lor.lhs.false.192

lor.lhs.false.192:                                ; preds = %land.lhs.true.189, %lor.lhs.false.186
  %95 = load i32, i32* %regno, align 4
  %cmp193 = icmp uge i32 %95, 45
  br i1 %cmp193, label %land.lhs.true.195, label %lor.lhs.false.198

land.lhs.true.195:                                ; preds = %lor.lhs.false.192
  %96 = load i32, i32* %regno, align 4
  %cmp196 = icmp ule i32 %96, 52
  br i1 %cmp196, label %cond.true, label %lor.lhs.false.198

lor.lhs.false.198:                                ; preds = %land.lhs.true.195, %lor.lhs.false.192
  %97 = load i32, i32* %regno, align 4
  %cmp199 = icmp uge i32 %97, 29
  br i1 %cmp199, label %land.lhs.true.201, label %cond.false

land.lhs.true.201:                                ; preds = %lor.lhs.false.198
  %98 = load i32, i32* %regno, align 4
  %cmp202 = icmp ule i32 %98, 36
  br i1 %cmp202, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.201, %land.lhs.true.195, %land.lhs.true.189, %land.lhs.true.183
  %99 = load i32, i32* @target_flags, align 4
  %and204 = and i32 %99, 33554432
  %tobool205 = icmp ne i32 %and204, 0
  %cond206 = select i1 %tobool205, i32 5, i32 4
  %idxprom207 = sext i32 %cond206 to i64
  %arrayidx208 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom207
  %100 = load i32, i32* %arrayidx208, align 4
  %cmp209 = icmp eq i32 %100, 5
  br i1 %cmp209, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %101 = load i32, i32* @target_flags, align 4
  %and211 = and i32 %101, 33554432
  %tobool212 = icmp ne i32 %and211, 0
  %cond213 = select i1 %tobool212, i32 5, i32 4
  %idxprom214 = sext i32 %cond213 to i64
  %arrayidx215 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom214
  %102 = load i32, i32* %arrayidx215, align 4
  %cmp216 = icmp eq i32 %102, 6
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.true
  %103 = phi i1 [ true, %cond.true ], [ %cmp216, %lor.rhs ]
  %cond218 = select i1 %103, i32 2, i32 1
  br label %cond.end.254

cond.false:                                       ; preds = %land.lhs.true.201, %lor.lhs.false.198
  %104 = load i32, i32* @target_flags, align 4
  %and219 = and i32 %104, 33554432
  %tobool220 = icmp ne i32 %and219, 0
  %cond221 = select i1 %tobool220, i32 5, i32 4
  %cmp222 = icmp eq i32 %cond221, 18
  br i1 %cmp222, label %cond.true.224, label %cond.false.228

cond.true.224:                                    ; preds = %cond.false
  %105 = load i32, i32* @target_flags, align 4
  %and225 = and i32 %105, 33554432
  %tobool226 = icmp ne i32 %and225, 0
  %cond227 = select i1 %tobool226, i32 2, i32 3
  br label %cond.end.252

cond.false.228:                                   ; preds = %cond.false
  %106 = load i32, i32* @target_flags, align 4
  %and229 = and i32 %106, 33554432
  %tobool230 = icmp ne i32 %and229, 0
  %cond231 = select i1 %tobool230, i32 5, i32 4
  %cmp232 = icmp eq i32 %cond231, 24
  br i1 %cmp232, label %cond.true.234, label %cond.false.238

cond.true.234:                                    ; preds = %cond.false.228
  %107 = load i32, i32* @target_flags, align 4
  %and235 = and i32 %107, 33554432
  %tobool236 = icmp ne i32 %and235, 0
  %cond237 = select i1 %tobool236, i32 4, i32 6
  br label %cond.end

cond.false.238:                                   ; preds = %cond.false.228
  %108 = load i32, i32* @target_flags, align 4
  %and239 = and i32 %108, 33554432
  %tobool240 = icmp ne i32 %and239, 0
  %cond241 = select i1 %tobool240, i32 5, i32 4
  %idxprom242 = sext i32 %cond241 to i64
  %arrayidx243 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom242
  %109 = load i8, i8* %arrayidx243, align 1
  %conv244 = zext i8 %109 to i32
  %110 = load i32, i32* @target_flags, align 4
  %and245 = and i32 %110, 33554432
  %tobool246 = icmp ne i32 %and245, 0
  %cond247 = select i1 %tobool246, i32 8, i32 4
  %add = add nsw i32 %conv244, %cond247
  %sub = sub nsw i32 %add, 1
  %111 = load i32, i32* @target_flags, align 4
  %and248 = and i32 %111, 33554432
  %tobool249 = icmp ne i32 %and248, 0
  %cond250 = select i1 %tobool249, i32 8, i32 4
  %div = sdiv i32 %sub, %cond250
  br label %cond.end

cond.end:                                         ; preds = %cond.false.238, %cond.true.234
  %cond251 = phi i32 [ %cond237, %cond.true.234 ], [ %div, %cond.false.238 ]
  br label %cond.end.252

cond.end.252:                                     ; preds = %cond.end, %cond.true.224
  %cond253 = phi i32 [ %cond227, %cond.true.224 ], [ %cond251, %cond.end ]
  br label %cond.end.254

cond.end.254:                                     ; preds = %cond.end.252, %lor.end
  %cond255 = phi i32 [ %cond218, %lor.end ], [ %cond253, %cond.end.252 ]
  %add256 = add i32 %90, %cond255
  %equiv_reg_src257 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 4
  %112 = load %struct.rtx_def*, %struct.rtx_def** %equiv_reg_src257, align 8
  %call258 = call i32 @refers_to_regno_p(i32 %89, i32 %add256, %struct.rtx_def* %112, %struct.rtx_def** null)
  %tobool259 = icmp ne i32 %call258, 0
  br i1 %tobool259, label %if.end.261, label %if.then.260

if.then.260:                                      ; preds = %cond.end.254
  br label %for.end

if.end.261:                                       ; preds = %cond.end.254, %land.lhs.true.177, %land.lhs.true.174, %land.lhs.true.170, %for.body.164
  br label %for.inc

for.inc:                                          ; preds = %if.end.261
  %113 = load i32, i32* %regno, align 4
  %inc = add i32 %113, 1
  store i32 %inc, i32* %regno, align 4
  br label %for.cond.161

for.end:                                          ; preds = %if.then.260, %for.cond.161
  %114 = load i32, i32* %regno, align 4
  %cmp262 = icmp eq i32 %114, 53
  br i1 %cmp262, label %if.then.264, label %if.end.265

if.then.264:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7412, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.keep_stack_depressed, i32 0, i32 0)) #6
  unreachable

if.end.265:                                       ; preds = %for.end
  %115 = load i32, i32* @target_flags, align 4
  %and266 = and i32 %115, 33554432
  %tobool267 = icmp ne i32 %and266, 0
  %cond268 = select i1 %tobool267, i32 5, i32 4
  %116 = load i32, i32* %regno, align 4
  %call269 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond268, i32 %116)
  store %struct.rtx_def* %call269, %struct.rtx_def** %reg, align 8
  %117 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  %118 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %call270 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %117, %struct.rtx_def* %118)
  %119 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8
  store %struct.rtx_def* %119, %struct.rtx_def** %retaddr, align 8
  br label %if.end.271

if.end.271:                                       ; preds = %if.end.265, %land.lhs.true.156, %if.end.149
  call void @emit_equiv_load(%struct.epi_info* %info)
  %120 = load %struct.rtx_def*, %struct.rtx_def** %retaddr, align 8
  %call272 = call %struct.rtx_def* @gen_indirect_jump(%struct.rtx_def* %120)
  %call273 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call272)
  store %struct.rtx_def* %call273, %struct.rtx_def** %jump_insn, align 8
  %121 = load %struct.rtx_def*, %struct.rtx_def** %jump_insn, align 8
  %122 = bitcast %struct.rtx_def* %121 to i32*
  %bf.load274 = load i32, i32* %122, align 8
  %bf.clear275 = and i32 %bf.load274, 65535
  %idxprom276 = sext i32 %bf.clear275 to i64
  %arrayidx277 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom276
  %123 = load i8, i8* %arrayidx277, align 1
  %conv278 = sext i8 %123 to i32
  %cmp279 = icmp eq i32 %conv278, 105
  br i1 %cmp279, label %cond.true.281, label %cond.false.300

cond.true.281:                                    ; preds = %if.end.271
  %124 = load %struct.rtx_def*, %struct.rtx_def** %jump_insn, align 8
  %fld282 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx283 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld282, i32 0, i64 3
  %rtx284 = bitcast %union.rtunion_def* %arrayidx283 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rtx284, align 8
  %126 = bitcast %struct.rtx_def* %125 to i32*
  %bf.load285 = load i32, i32* %126, align 8
  %bf.clear286 = and i32 %bf.load285, 65535
  %cmp287 = icmp eq i32 %bf.clear286, 47
  br i1 %cmp287, label %cond.true.289, label %cond.false.293

cond.true.289:                                    ; preds = %cond.true.281
  %127 = load %struct.rtx_def*, %struct.rtx_def** %jump_insn, align 8
  %fld290 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1
  %arrayidx291 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld290, i32 0, i64 3
  %rtx292 = bitcast %union.rtunion_def* %arrayidx291 to %struct.rtx_def**
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rtx292, align 8
  br label %cond.end.298

cond.false.293:                                   ; preds = %cond.true.281
  %129 = load %struct.rtx_def*, %struct.rtx_def** %jump_insn, align 8
  %130 = load %struct.rtx_def*, %struct.rtx_def** %jump_insn, align 8
  %fld294 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %130, i32 0, i32 1
  %arrayidx295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld294, i32 0, i64 3
  %rtx296 = bitcast %union.rtunion_def* %arrayidx295 to %struct.rtx_def**
  %131 = load %struct.rtx_def*, %struct.rtx_def** %rtx296, align 8
  %call297 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %129, %struct.rtx_def* %131)
  br label %cond.end.298

cond.end.298:                                     ; preds = %cond.false.293, %cond.true.289
  %cond299 = phi %struct.rtx_def* [ %128, %cond.true.289 ], [ %call297, %cond.false.293 ]
  br label %cond.end.301

cond.false.300:                                   ; preds = %if.end.271
  br label %cond.end.301

cond.end.301:                                     ; preds = %cond.false.300, %cond.end.298
  %cond302 = phi %struct.rtx_def* [ %cond299, %cond.end.298 ], [ null, %cond.false.300 ]
  store %struct.rtx_def* %cond302, %struct.rtx_def** %jump_set, align 8
  %132 = load %struct.rtx_def*, %struct.rtx_def** %jump_set, align 8
  %cmp303 = icmp eq %struct.rtx_def* %132, null
  br i1 %cmp303, label %if.then.305, label %if.else.306

if.then.305:                                      ; preds = %cond.end.301
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7425, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.keep_stack_depressed, i32 0, i32 0)) #6
  unreachable

if.else.306:                                      ; preds = %cond.end.301
  %133 = load %struct.rtx_def*, %struct.rtx_def** %jump_set, align 8
  %134 = bitcast %struct.rtx_def* %133 to i32*
  %bf.load307 = load i32, i32* %134, align 8
  %bf.clear308 = and i32 %bf.load307, -16777217
  %bf.set = or i32 %bf.clear308, 16777216
  store i32 %bf.set, i32* %134, align 8
  br label %if.end.309

if.end.309:                                       ; preds = %if.else.306
  br label %if.end.408

if.else.310:                                      ; preds = %land.lhs.true.39, %lor.lhs.false
  %135 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %136 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld311 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1
  %arrayidx312 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld311, i32 0, i64 3
  %rtx313 = bitcast %union.rtunion_def* %arrayidx312 to %struct.rtx_def**
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rtx313, align 8
  %call314 = call i32 @reg_mentioned_p(%struct.rtx_def* %135, %struct.rtx_def* %137)
  %tobool315 = icmp ne i32 %call314, 0
  br i1 %tobool315, label %if.else.325, label %land.lhs.true.316

land.lhs.true.316:                                ; preds = %if.else.310
  %sp_equiv_reg317 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  %138 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg317, align 8
  %139 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp318 = icmp eq %struct.rtx_def* %138, %139
  br i1 %cmp318, label %if.then.324, label %lor.lhs.false.320

lor.lhs.false.320:                                ; preds = %land.lhs.true.316
  %sp_equiv_reg321 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  %140 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg321, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call322 = call i32 @reg_set_p(%struct.rtx_def* %140, %struct.rtx_def* %141)
  %tobool323 = icmp ne i32 %call322, 0
  br i1 %tobool323, label %if.else.325, label %if.then.324

if.then.324:                                      ; preds = %lor.lhs.false.320, %land.lhs.true.316
  %142 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  call void @add_insn(%struct.rtx_def* %142)
  br label %if.end.407

if.else.325:                                      ; preds = %lor.lhs.false.320, %if.else.310
  %143 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call326 = call i32 @reg_set_p(%struct.rtx_def* %143, %struct.rtx_def* %144)
  %tobool327 = icmp ne i32 %call326, 0
  br i1 %tobool327, label %if.else.344, label %land.lhs.true.328

land.lhs.true.328:                                ; preds = %if.else.325
  %sp_equiv_reg329 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  %145 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg329, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp330 = icmp eq %struct.rtx_def* %145, %146
  br i1 %cmp330, label %if.then.336, label %lor.lhs.false.332

lor.lhs.false.332:                                ; preds = %land.lhs.true.328
  %sp_equiv_reg333 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  %147 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg333, align 8
  %148 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call334 = call i32 @reg_set_p(%struct.rtx_def* %147, %struct.rtx_def* %148)
  %tobool335 = icmp ne i32 %call334, 0
  br i1 %tobool335, label %if.else.344, label %if.then.336

if.then.336:                                      ; preds = %lor.lhs.false.332, %land.lhs.true.328
  %149 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %sp_equiv_reg337 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  %150 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg337, align 8
  %sp_offset338 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 1
  %151 = load i64, i64* %sp_offset338, align 8
  %call339 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %150, i64 %151)
  %152 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %call340 = call i32 @validate_replace_rtx(%struct.rtx_def* %149, %struct.rtx_def* %call339, %struct.rtx_def* %152)
  %tobool341 = icmp ne i32 %call340, 0
  br i1 %tobool341, label %if.end.343, label %if.then.342

if.then.342:                                      ; preds = %if.then.336
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7446, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__FUNCTION__.keep_stack_depressed, i32 0, i32 0)) #6
  unreachable

if.end.343:                                       ; preds = %if.then.336
  %153 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  call void @add_insn(%struct.rtx_def* %153)
  br label %if.end.406

if.else.344:                                      ; preds = %lor.lhs.false.332, %if.else.325
  %154 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld345 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx346 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld345, i32 0, i64 3
  %rtx347 = bitcast %union.rtunion_def* %arrayidx346 to %struct.rtx_def**
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rtx347, align 8
  %156 = bitcast %struct.rtx_def* %155 to i32*
  %bf.load348 = load i32, i32* %156, align 8
  %bf.clear349 = and i32 %bf.load348, 65535
  %cmp350 = icmp eq i32 %bf.clear349, 47
  br i1 %cmp350, label %if.then.352, label %if.else.356

if.then.352:                                      ; preds = %if.else.344
  %157 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld353 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %157, i32 0, i32 1
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld353, i32 0, i64 3
  %rtx355 = bitcast %union.rtunion_def* %arrayidx354 to %struct.rtx_def**
  %158 = load %struct.rtx_def*, %struct.rtx_def** %rtx355, align 8
  call void @handle_epilogue_set(%struct.rtx_def* %158, %struct.epi_info* %info)
  br label %if.end.405

if.else.356:                                      ; preds = %if.else.344
  %159 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld357 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %159, i32 0, i32 1
  %arrayidx358 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld357, i32 0, i64 3
  %rtx359 = bitcast %union.rtunion_def* %arrayidx358 to %struct.rtx_def**
  %160 = load %struct.rtx_def*, %struct.rtx_def** %rtx359, align 8
  %161 = bitcast %struct.rtx_def* %160 to i32*
  %bf.load360 = load i32, i32* %161, align 8
  %bf.clear361 = and i32 %bf.load360, 65535
  %cmp362 = icmp eq i32 %bf.clear361, 39
  br i1 %cmp362, label %if.then.364, label %if.else.403

if.then.364:                                      ; preds = %if.else.356
  store i32 0, i32* %j, align 4
  br label %for.cond.365

for.cond.365:                                     ; preds = %for.inc.400, %if.then.364
  %162 = load i32, i32* %j, align 4
  %163 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld366 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %163, i32 0, i32 1
  %arrayidx367 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld366, i32 0, i64 3
  %rtx368 = bitcast %union.rtunion_def* %arrayidx367 to %struct.rtx_def**
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rtx368, align 8
  %fld369 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %164, i32 0, i32 1
  %arrayidx370 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld369, i32 0, i64 0
  %rtvec371 = bitcast %union.rtunion_def* %arrayidx370 to %struct.rtvec_def**
  %165 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec371, align 8
  %num_elem372 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %165, i32 0, i32 0
  %166 = load i32, i32* %num_elem372, align 4
  %cmp373 = icmp slt i32 %162, %166
  br i1 %cmp373, label %for.body.375, label %for.end.402

for.body.375:                                     ; preds = %for.cond.365
  %167 = load i32, i32* %j, align 4
  %idxprom376 = sext i32 %167 to i64
  %168 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld377 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1
  %arrayidx378 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld377, i32 0, i64 3
  %rtx379 = bitcast %union.rtunion_def* %arrayidx378 to %struct.rtx_def**
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtx379, align 8
  %fld380 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1
  %arrayidx381 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld380, i32 0, i64 0
  %rtvec382 = bitcast %union.rtunion_def* %arrayidx381 to %struct.rtvec_def**
  %170 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec382, align 8
  %elem383 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %170, i32 0, i32 1
  %arrayidx384 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem383, i32 0, i64 %idxprom376
  %171 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx384, align 8
  %172 = bitcast %struct.rtx_def* %171 to i32*
  %bf.load385 = load i32, i32* %172, align 8
  %bf.clear386 = and i32 %bf.load385, 65535
  %cmp387 = icmp eq i32 %bf.clear386, 47
  br i1 %cmp387, label %if.then.389, label %if.end.399

if.then.389:                                      ; preds = %for.body.375
  %173 = load i32, i32* %j, align 4
  %idxprom390 = sext i32 %173 to i64
  %174 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld391 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1
  %arrayidx392 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld391, i32 0, i64 3
  %rtx393 = bitcast %union.rtunion_def* %arrayidx392 to %struct.rtx_def**
  %175 = load %struct.rtx_def*, %struct.rtx_def** %rtx393, align 8
  %fld394 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1
  %arrayidx395 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld394, i32 0, i64 0
  %rtvec396 = bitcast %union.rtunion_def* %arrayidx395 to %struct.rtvec_def**
  %176 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec396, align 8
  %elem397 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %176, i32 0, i32 1
  %arrayidx398 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem397, i32 0, i64 %idxprom390
  %177 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx398, align 8
  call void @handle_epilogue_set(%struct.rtx_def* %177, %struct.epi_info* %info)
  br label %if.end.399

if.end.399:                                       ; preds = %if.then.389, %for.body.375
  br label %for.inc.400

for.inc.400:                                      ; preds = %if.end.399
  %178 = load i32, i32* %j, align 4
  %inc401 = add nsw i32 %178, 1
  store i32 %inc401, i32* %j, align 4
  br label %for.cond.365

for.end.402:                                      ; preds = %for.cond.365
  br label %if.end.404

if.else.403:                                      ; preds = %if.else.356
  %179 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  call void @add_insn(%struct.rtx_def* %179)
  br label %if.end.404

if.end.404:                                       ; preds = %if.else.403, %for.end.402
  br label %if.end.405

if.end.405:                                       ; preds = %if.end.404, %if.then.352
  br label %if.end.406

if.end.406:                                       ; preds = %if.end.405, %if.end.343
  br label %if.end.407

if.end.407:                                       ; preds = %if.end.406, %if.then.324
  br label %if.end.408

if.end.408:                                       ; preds = %if.end.407, %if.end.309
  %new_sp_equiv_reg409 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 2
  %180 = load %struct.rtx_def*, %struct.rtx_def** %new_sp_equiv_reg409, align 8
  %sp_equiv_reg410 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 0
  store %struct.rtx_def* %180, %struct.rtx_def** %sp_equiv_reg410, align 8
  %new_sp_offset411 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 3
  %181 = load i64, i64* %new_sp_offset411, align 8
  %sp_offset412 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %info, i32 0, i32 1
  store i64 %181, i64* %sp_offset412, align 8
  br label %for.inc.413

for.inc.413:                                      ; preds = %if.end.408, %if.then.59, %if.then.12
  %182 = load i32, i32* %i, align 4
  %inc414 = add nsw i32 %182, 1
  store i32 %inc414, i32* %i, align 4
  br label %for.cond

for.end.415:                                      ; preds = %for.cond
  %call416 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call416, %struct.rtx_def** %seq.addr, align 8
  call void @end_sequence()
  %183 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8
  store %struct.rtx_def* %183, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %for.end.415, %if.then
  %184 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %184
}

declare %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #2

declare void @commit_edge_insertions() #2

declare %struct.rtx_def* @gen_sibcall_epilogue() #2

declare void @reorder_insns(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @next_active_insn(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_line_note_after(i8*, i32, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @reposition_prologue_and_epilogue_notes(%struct.rtx_def* %f) #0 {
entry:
  %f.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %len = alloca i32, align 4
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %f, %struct.rtx_def** %f.addr, align 8
  %0 = load %struct.varray_head_tag*, %struct.varray_head_tag** @prologue, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %0, i32 0, i32 0
  %1 = load i64, i64* %num_elements, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %len, align 4
  %cmp = icmp sgt i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end.55

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %note, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %f.addr, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool = icmp ne %struct.rtx_def* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 37
  br i1 %cmp2, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %for.body
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %7 = load i32, i32* %rtint, align 4
  %cmp5 = icmp eq i32 %7, -90
  br i1 %cmp5, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then.4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %8, %struct.rtx_def** %note, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.7, %if.then.4
  br label %if.end.15

if.else:                                          ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %10 = load %struct.varray_head_tag*, %struct.varray_head_tag** @prologue, align 8
  %call = call i32 @contains(%struct.rtx_def* %9, %struct.varray_head_tag* %10)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.then.9, label %if.end.14

if.then.9:                                        ; preds = %if.else
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %11, %struct.rtx_def** %last, align 8
  %12 = load i32, i32* %len, align 4
  %dec = add nsw i32 %12, -1
  store i32 %dec, i32* %len, align 4
  %cmp10 = icmp eq i32 %dec, 0
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.9
  br label %for.end

if.end.13:                                        ; preds = %if.then.9
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.else
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.15
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %insn, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.12, %for.cond
  %15 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %tobool18 = icmp ne %struct.rtx_def* %15, null
  br i1 %tobool18, label %if.then.19, label %if.end.54

if.then.19:                                       ; preds = %for.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %cmp20 = icmp eq %struct.rtx_def* %16, null
  br i1 %cmp20, label %if.then.22, label %if.end.41

if.then.22:                                       ; preds = %if.then.19
  %17 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  store %struct.rtx_def* %17, %struct.rtx_def** %note, align 8
  br label %for.cond.23

for.cond.23:                                      ; preds = %if.end.39, %if.then.22
  %18 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 2
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  store %struct.rtx_def* %19, %struct.rtx_def** %note, align 8
  %tobool27 = icmp ne %struct.rtx_def* %19, null
  br i1 %tobool27, label %for.body.28, label %for.end.40

for.body.28:                                      ; preds = %for.cond.23
  %20 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %21 = bitcast %struct.rtx_def* %20 to i32*
  %bf.load29 = load i32, i32* %21, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 37
  br i1 %cmp31, label %land.lhs.true, label %if.end.39

land.lhs.true:                                    ; preds = %for.body.28
  %22 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 4
  %rtint35 = bitcast %union.rtunion_def* %arrayidx34 to i32*
  %23 = load i32, i32* %rtint35, align 4
  %cmp36 = icmp eq i32 %23, -90
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %land.lhs.true
  br label %for.end.40

if.end.39:                                        ; preds = %land.lhs.true, %for.body.28
  br label %for.cond.23

for.end.40:                                       ; preds = %if.then.38, %for.cond.23
  br label %if.end.41

if.end.41:                                        ; preds = %for.end.40, %if.then.19
  %24 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 2
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx44, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %next, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load45 = load i32, i32* %27, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp eq i32 %bf.clear46, 36
  br i1 %cmp47, label %if.then.49, label %if.end.53

if.then.49:                                       ; preds = %if.end.41
  %28 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i32 0, i64 2
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx52, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %last, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.49, %if.end.41
  %30 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %32 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  call void @reorder_insns(%struct.rtx_def* %30, %struct.rtx_def* %31, %struct.rtx_def* %32)
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %for.end
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %entry
  %33 = load %struct.varray_head_tag*, %struct.varray_head_tag** @epilogue, align 8
  %num_elements56 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %33, i32 0, i32 0
  %34 = load i64, i64* %num_elements56, align 8
  %conv57 = trunc i64 %34 to i32
  store i32 %conv57, i32* %len, align 4
  %cmp58 = icmp sgt i32 %conv57, 0
  br i1 %cmp58, label %if.then.60, label %if.end.129

if.then.60:                                       ; preds = %if.end.55
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %note, align 8
  %call61 = call %struct.rtx_def* @get_last_insn()
  store %struct.rtx_def* %call61, %struct.rtx_def** %insn, align 8
  br label %for.cond.62

for.cond.62:                                      ; preds = %for.inc.88, %if.then.60
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %tobool63 = icmp ne %struct.rtx_def* %35, null
  br i1 %tobool63, label %for.body.64, label %for.end.92

for.body.64:                                      ; preds = %for.cond.62
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %37 = bitcast %struct.rtx_def* %36 to i32*
  %bf.load65 = load i32, i32* %37, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 37
  br i1 %cmp67, label %if.then.69, label %if.else.77

if.then.69:                                       ; preds = %for.body.64
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i32 0, i64 4
  %rtint72 = bitcast %union.rtunion_def* %arrayidx71 to i32*
  %39 = load i32, i32* %rtint72, align 4
  %cmp73 = icmp eq i32 %39, -89
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %if.then.69
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %40, %struct.rtx_def** %note, align 8
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.75, %if.then.69
  br label %if.end.87

if.else.77:                                       ; preds = %for.body.64
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %42 = load %struct.varray_head_tag*, %struct.varray_head_tag** @epilogue, align 8
  %call78 = call i32 @contains(%struct.rtx_def* %41, %struct.varray_head_tag* %42)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.then.80, label %if.end.86

if.then.80:                                       ; preds = %if.else.77
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %43, %struct.rtx_def** %last, align 8
  %44 = load i32, i32* %len, align 4
  %dec81 = add nsw i32 %44, -1
  store i32 %dec81, i32* %len, align 4
  %cmp82 = icmp eq i32 %dec81, 0
  br i1 %cmp82, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %if.then.80
  br label %for.end.92

if.end.85:                                        ; preds = %if.then.80
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85, %if.else.77
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86, %if.end.76
  br label %for.inc.88

for.inc.88:                                       ; preds = %if.end.87
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 1
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  store %struct.rtx_def* %46, %struct.rtx_def** %insn, align 8
  br label %for.cond.62

for.end.92:                                       ; preds = %if.then.84, %for.cond.62
  %47 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %tobool93 = icmp ne %struct.rtx_def* %47, null
  br i1 %tobool93, label %if.then.94, label %if.end.128

if.then.94:                                       ; preds = %for.end.92
  %48 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %cmp95 = icmp eq %struct.rtx_def* %48, null
  br i1 %cmp95, label %if.then.97, label %if.end.117

if.then.97:                                       ; preds = %if.then.94
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %note, align 8
  br label %for.cond.98

for.cond.98:                                      ; preds = %if.end.115, %if.then.97
  %50 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i32 0, i64 1
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rtx101, align 8
  store %struct.rtx_def* %51, %struct.rtx_def** %note, align 8
  %tobool102 = icmp ne %struct.rtx_def* %51, null
  br i1 %tobool102, label %for.body.103, label %for.end.116

for.body.103:                                     ; preds = %for.cond.98
  %52 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load104 = load i32, i32* %53, align 8
  %bf.clear105 = and i32 %bf.load104, 65535
  %cmp106 = icmp eq i32 %bf.clear105, 37
  br i1 %cmp106, label %land.lhs.true.108, label %if.end.115

land.lhs.true.108:                                ; preds = %for.body.103
  %54 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i32 0, i64 4
  %rtint111 = bitcast %union.rtunion_def* %arrayidx110 to i32*
  %55 = load i32, i32* %rtint111, align 4
  %cmp112 = icmp eq i32 %55, -89
  br i1 %cmp112, label %if.then.114, label %if.end.115

if.then.114:                                      ; preds = %land.lhs.true.108
  br label %for.end.116

if.end.115:                                       ; preds = %land.lhs.true.108, %for.body.103
  br label %for.cond.98

for.end.116:                                      ; preds = %if.then.114, %for.cond.98
  br label %if.end.117

if.end.117:                                       ; preds = %for.end.116, %if.then.94
  %56 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i32 0, i64 1
  %rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtx120, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %cmp121 = icmp ne %struct.rtx_def* %57, %58
  br i1 %cmp121, label %if.then.123, label %if.end.127

if.then.123:                                      ; preds = %if.end.117
  %59 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i32 0, i64 1
  %rtx126 = bitcast %union.rtunion_def* %arrayidx125 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx126, align 8
  call void @reorder_insns(%struct.rtx_def* %59, %struct.rtx_def* %60, %struct.rtx_def* %62)
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.123, %if.end.117
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %for.end.92
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.end.55
  ret void
}

; Function Attrs: nounwind uwtable
define void @ggc_mark_struct_function(%struct.function* %f) #0 {
entry:
  %f.addr = alloca %struct.function*, align 8
  %a__ = alloca i8*, align 8
  %t__ = alloca %union.tree_node*, align 8
  %v__ = alloca %struct.rtvec_def*, align 8
  %t__36 = alloca %union.tree_node*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.function*, %struct.function** %f.addr, align 8
  %1 = bitcast %struct.function* %0 to i8*
  store i8* %1, i8** %a__, align 8
  %2 = load i8*, i8** %a__, align 8
  %cmp = icmp ne i8* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %3 = load i8*, i8** %a__, align 8
  %call = call i32 @ggc_set_mark(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  %4 = load %struct.function*, %struct.function** %f.addr, align 8
  %decl = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 6
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8
  store %union.tree_node* %5, %union.tree_node** %t__, align 8
  %6 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %cmp2 = icmp ne %union.tree_node* %6, null
  br i1 %cmp2, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %do.body.1
  %7 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %8 = bitcast %union.tree_node* %7 to i8*
  %call3 = call i32 @ggc_set_mark(i8* %8)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end.13, label %if.then.4

if.then.4:                                        ; preds = %land.lhs.true
  br label %do.body.5

do.body.5:                                        ; preds = %if.then.4
  %9 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %9, i32 0, i32 1
  %10 = load i64, i64* %elements_used, align 8
  %11 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %11, i32 0, i32 0
  %12 = load i64, i64* %num_elements, align 8
  %cmp6 = icmp uge i64 %10, %12
  br i1 %cmp6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %do.body.5
  %13 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %14 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements8 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %14, i32 0, i32 0
  %15 = load i64, i64* %num_elements8, align 8
  %mul = mul i64 2, %15
  %call9 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %13, i64 %mul)
  store %struct.varray_head_tag* %call9, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %do.body.5
  %16 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %17 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used11 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %17, i32 0, i32 1
  %18 = load i64, i64* %elements_used11, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %elements_used11, align 8
  %19 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %19, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %18
  store %union.tree_node* %16, %union.tree_node** %arrayidx, align 8
  br label %do.end.12

do.end.12:                                        ; preds = %if.end.10
  br label %if.end.13

if.end.13:                                        ; preds = %do.end.12, %land.lhs.true, %do.body.1
  br label %do.end.14

do.end.14:                                        ; preds = %if.end.13
  %20 = load %struct.function*, %struct.function** %f.addr, align 8
  call void @mark_function_status(%struct.function* %20)
  %21 = load %struct.function*, %struct.function** %f.addr, align 8
  %eh = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 0
  %22 = load %struct.eh_status*, %struct.eh_status** %eh, align 8
  call void @mark_eh_status(%struct.eh_status* %22)
  %23 = load %struct.function*, %struct.function** %f.addr, align 8
  %stmt = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 1
  %24 = load %struct.stmt_status*, %struct.stmt_status** %stmt, align 8
  call void @mark_stmt_status(%struct.stmt_status* %24)
  %25 = load %struct.function*, %struct.function** %f.addr, align 8
  %expr = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 2
  %26 = load %struct.expr_status*, %struct.expr_status** %expr, align 8
  call void @mark_expr_status(%struct.expr_status* %26)
  %27 = load %struct.function*, %struct.function** %f.addr, align 8
  %emit = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 3
  %28 = load %struct.emit_status*, %struct.emit_status** %emit, align 8
  call void @mark_emit_status(%struct.emit_status* %28)
  %29 = load %struct.function*, %struct.function** %f.addr, align 8
  %varasm = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 4
  %30 = load %struct.varasm_status*, %struct.varasm_status** %varasm, align 8
  call void @mark_varasm_status(%struct.varasm_status* %30)
  %31 = load void (%struct.function*)*, void (%struct.function*)** @mark_machine_status, align 8
  %tobool15 = icmp ne void (%struct.function*)* %31, null
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %do.end.14
  %32 = load void (%struct.function*)*, void (%struct.function*)** @mark_machine_status, align 8
  %33 = load %struct.function*, %struct.function** %f.addr, align 8
  call void %32(%struct.function* %33)
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %do.end.14
  %34 = load void (%struct.function*)*, void (%struct.function*)** @mark_lang_status, align 8
  %tobool18 = icmp ne void (%struct.function*)* %34, null
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.17
  %35 = load void (%struct.function*)*, void (%struct.function*)** @mark_lang_status, align 8
  %36 = load %struct.function*, %struct.function** %f.addr, align 8
  call void %35(%struct.function* %36)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.end.17
  %37 = load %struct.function*, %struct.function** %f.addr, align 8
  %original_arg_vector = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 46
  %38 = load i8*, i8** %original_arg_vector, align 8
  %tobool21 = icmp ne i8* %38, null
  br i1 %tobool21, label %if.then.22, label %if.end.32

if.then.22:                                       ; preds = %if.end.20
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %39 = load %struct.function*, %struct.function** %f.addr, align 8
  %original_arg_vector24 = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 46
  %40 = load i8*, i8** %original_arg_vector24, align 8
  %41 = bitcast i8* %40 to %struct.rtvec_def*
  store %struct.rtvec_def* %41, %struct.rtvec_def** %v__, align 8
  %42 = load %struct.rtvec_def*, %struct.rtvec_def** %v__, align 8
  %cmp25 = icmp ne %struct.rtvec_def* %42, null
  br i1 %cmp25, label %land.lhs.true.26, label %if.end.30

land.lhs.true.26:                                 ; preds = %do.body.23
  %43 = load %struct.rtvec_def*, %struct.rtvec_def** %v__, align 8
  %44 = bitcast %struct.rtvec_def* %43 to i8*
  %call27 = call i32 @ggc_set_mark(i8* %44)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true.26
  %45 = load %struct.rtvec_def*, %struct.rtvec_def** %v__, align 8
  call void @ggc_mark_rtvec_children(%struct.rtvec_def* %45)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %land.lhs.true.26, %do.body.23
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  br label %if.end.32

if.end.32:                                        ; preds = %do.end.31, %if.end.20
  %46 = load %struct.function*, %struct.function** %f.addr, align 8
  %original_decl_initial = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 47
  %47 = load %union.tree_node*, %union.tree_node** %original_decl_initial, align 8
  %tobool33 = icmp ne %union.tree_node* %47, null
  br i1 %tobool33, label %if.then.34, label %if.end.60

if.then.34:                                       ; preds = %if.end.32
  br label %do.body.35

do.body.35:                                       ; preds = %if.then.34
  %48 = load %struct.function*, %struct.function** %f.addr, align 8
  %original_decl_initial37 = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 47
  %49 = load %union.tree_node*, %union.tree_node** %original_decl_initial37, align 8
  store %union.tree_node* %49, %union.tree_node** %t__36, align 8
  %50 = load %union.tree_node*, %union.tree_node** %t__36, align 8
  %cmp38 = icmp ne %union.tree_node* %50, null
  br i1 %cmp38, label %land.lhs.true.39, label %if.end.58

land.lhs.true.39:                                 ; preds = %do.body.35
  %51 = load %union.tree_node*, %union.tree_node** %t__36, align 8
  %52 = bitcast %union.tree_node* %51 to i8*
  %call40 = call i32 @ggc_set_mark(i8* %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end.58, label %if.then.42

if.then.42:                                       ; preds = %land.lhs.true.39
  br label %do.body.43

do.body.43:                                       ; preds = %if.then.42
  %53 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used44 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %53, i32 0, i32 1
  %54 = load i64, i64* %elements_used44, align 8
  %55 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements45 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %55, i32 0, i32 0
  %56 = load i64, i64* %num_elements45, align 8
  %cmp46 = icmp uge i64 %54, %56
  br i1 %cmp46, label %if.then.47, label %if.end.51

if.then.47:                                       ; preds = %do.body.43
  %57 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %58 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements48 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %58, i32 0, i32 0
  %59 = load i64, i64* %num_elements48, align 8
  %mul49 = mul i64 2, %59
  %call50 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %57, i64 %mul49)
  store %struct.varray_head_tag* %call50, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.47, %do.body.43
  %60 = load %union.tree_node*, %union.tree_node** %t__36, align 8
  %61 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used52 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %61, i32 0, i32 1
  %62 = load i64, i64* %elements_used52, align 8
  %inc53 = add i64 %62, 1
  store i64 %inc53, i64* %elements_used52, align 8
  %63 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data54 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %63, i32 0, i32 4
  %tree55 = bitcast %union.varray_data_tag* %data54 to [1 x %union.tree_node*]*
  %arrayidx56 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree55, i32 0, i64 %62
  store %union.tree_node* %60, %union.tree_node** %arrayidx56, align 8
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.51
  br label %if.end.58

if.end.58:                                        ; preds = %do.end.57, %land.lhs.true.39, %do.body.35
  br label %do.end.59

do.end.59:                                        ; preds = %if.end.58
  br label %if.end.60

if.end.60:                                        ; preds = %do.end.59, %if.end.32
  %64 = load %struct.function*, %struct.function** %f.addr, align 8
  %outer = getelementptr inbounds %struct.function, %struct.function* %64, i32 0, i32 7
  %65 = load %struct.function*, %struct.function** %outer, align 8
  %tobool61 = icmp ne %struct.function* %65, null
  br i1 %tobool61, label %if.then.62, label %if.end.64

if.then.62:                                       ; preds = %if.end.60
  %66 = load %struct.function*, %struct.function** %f.addr, align 8
  %outer63 = getelementptr inbounds %struct.function, %struct.function* %66, i32 0, i32 7
  %67 = load %struct.function*, %struct.function** %outer63, align 8
  call void @ggc_mark_struct_function(%struct.function* %67)
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.62, %if.end.60
  ret void
}

declare i32 @ggc_set_mark(i8*) #2

; Function Attrs: nounwind uwtable
define internal void @mark_function_status(%struct.function* %p) #0 {
entry:
  %p.addr = alloca %struct.function*, align 8
  %q = alloca %struct.var_refs_queue*, align 8
  %t = alloca %struct.temp_slot*, align 8
  %i = alloca i32, align 4
  %r = alloca %struct.rtx_def**, align 8
  %r__ = alloca %struct.rtx_def*, align 8
  %r__9 = alloca %struct.rtx_def*, align 8
  %r__19 = alloca %struct.rtx_def*, align 8
  %r__28 = alloca %struct.rtx_def*, align 8
  %r__37 = alloca %struct.rtx_def*, align 8
  %r__46 = alloca %struct.rtx_def*, align 8
  %r__55 = alloca %struct.rtx_def*, align 8
  %r__64 = alloca %struct.rtx_def*, align 8
  %r__73 = alloca %struct.rtx_def*, align 8
  %r__82 = alloca %struct.rtx_def*, align 8
  %r__91 = alloca %struct.rtx_def*, align 8
  %r__100 = alloca %struct.rtx_def*, align 8
  %t__ = alloca %union.tree_node*, align 8
  %r__125 = alloca %struct.rtx_def*, align 8
  %t__134 = alloca %union.tree_node*, align 8
  %t__158 = alloca %union.tree_node*, align 8
  %r__182 = alloca %struct.rtx_def*, align 8
  %r__191 = alloca %struct.rtx_def*, align 8
  %a__ = alloca i8*, align 8
  %r__209 = alloca %struct.rtx_def*, align 8
  %r__218 = alloca %struct.rtx_def*, align 8
  %t__227 = alloca %union.tree_node*, align 8
  %t__251 = alloca %union.tree_node*, align 8
  %a__280 = alloca i8*, align 8
  %r__287 = alloca %struct.rtx_def*, align 8
  %r__299 = alloca %struct.rtx_def*, align 8
  %r__308 = alloca %struct.rtx_def*, align 8
  %r__317 = alloca %struct.rtx_def*, align 8
  %t__326 = alloca %union.tree_node*, align 8
  store %struct.function* %p, %struct.function** %p.addr, align 8
  %0 = load %struct.function*, %struct.function** %p.addr, align 8
  %cmp = icmp eq %struct.function* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %1 = load %struct.function*, %struct.function** %p.addr, align 8
  %arg_offset_rtx = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 12
  %2 = load %struct.rtx_def*, %struct.rtx_def** %arg_offset_rtx, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %r__, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %cmp1 = icmp ne %struct.rtx_def* %3, null
  br i1 %cmp1, label %land.lhs.true, label %if.end.3

land.lhs.true:                                    ; preds = %do.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  %5 = bitcast %struct.rtx_def* %4 to i8*
  %call = call i32 @ggc_set_mark(i8* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %r__, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %6)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.3
  %7 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_parm_reg_stack_loc = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 38
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc, align 8
  %tobool4 = icmp ne %struct.rtx_def** %8, null
  br i1 %tobool4, label %if.then.5, label %if.end.17

if.then.5:                                        ; preds = %do.end
  %9 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_max_parm_reg = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 37
  %10 = load i32, i32* %x_max_parm_reg, align 4
  store i32 %10, i32* %i, align 4
  %11 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_parm_reg_stack_loc6 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 38
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %x_parm_reg_stack_loc6, align 8
  store %struct.rtx_def** %12, %struct.rtx_def*** %r, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.5
  %13 = load i32, i32* %i, align 4
  %cmp7 = icmp sgt i32 %13, 0
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body.8

do.body.8:                                        ; preds = %for.body
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %r, align 8
  %15 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8
  store %struct.rtx_def* %15, %struct.rtx_def** %r__9, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %r__9, align 8
  %cmp10 = icmp ne %struct.rtx_def* %16, null
  br i1 %cmp10, label %land.lhs.true.11, label %if.end.15

land.lhs.true.11:                                 ; preds = %do.body.8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %r__9, align 8
  %18 = bitcast %struct.rtx_def* %17 to i8*
  %call12 = call i32 @ggc_set_mark(i8* %18)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %land.lhs.true.11
  %19 = load %struct.rtx_def*, %struct.rtx_def** %r__9, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %19)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %land.lhs.true.11, %do.body.8
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  br label %for.inc

for.inc:                                          ; preds = %do.end.16
  %20 = load i32, i32* %i, align 4
  %dec = add nsw i32 %20, -1
  store i32 %dec, i32* %i, align 4
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %r, align 8
  %incdec.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %21, i32 1
  store %struct.rtx_def** %incdec.ptr, %struct.rtx_def*** %r, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.17

if.end.17:                                        ; preds = %for.end, %do.end
  br label %do.body.18

do.body.18:                                       ; preds = %if.end.17
  %22 = load %struct.function*, %struct.function** %p.addr, align 8
  %return_rtx = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 14
  %23 = load %struct.rtx_def*, %struct.rtx_def** %return_rtx, align 8
  store %struct.rtx_def* %23, %struct.rtx_def** %r__19, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %r__19, align 8
  %cmp20 = icmp ne %struct.rtx_def* %24, null
  br i1 %cmp20, label %land.lhs.true.21, label %if.end.25

land.lhs.true.21:                                 ; preds = %do.body.18
  %25 = load %struct.rtx_def*, %struct.rtx_def** %r__19, align 8
  %26 = bitcast %struct.rtx_def* %25 to i8*
  %call22 = call i32 @ggc_set_mark(i8* %26)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %land.lhs.true.21
  %27 = load %struct.rtx_def*, %struct.rtx_def** %r__19, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %27)
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %land.lhs.true.21, %do.body.18
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  %28 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_cleanup_label = getelementptr inbounds %struct.function, %struct.function* %28, i32 0, i32 23
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x_cleanup_label, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %r__28, align 8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %r__28, align 8
  %cmp29 = icmp ne %struct.rtx_def* %30, null
  br i1 %cmp29, label %land.lhs.true.30, label %if.end.34

land.lhs.true.30:                                 ; preds = %do.body.27
  %31 = load %struct.rtx_def*, %struct.rtx_def** %r__28, align 8
  %32 = bitcast %struct.rtx_def* %31 to i8*
  %call31 = call i32 @ggc_set_mark(i8* %32)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %land.lhs.true.30
  %33 = load %struct.rtx_def*, %struct.rtx_def** %r__28, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %33)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %land.lhs.true.30, %do.body.27
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  br label %do.body.36

do.body.36:                                       ; preds = %do.end.35
  %34 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_return_label = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 24
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x_return_label, align 8
  store %struct.rtx_def* %35, %struct.rtx_def** %r__37, align 8
  %36 = load %struct.rtx_def*, %struct.rtx_def** %r__37, align 8
  %cmp38 = icmp ne %struct.rtx_def* %36, null
  br i1 %cmp38, label %land.lhs.true.39, label %if.end.43

land.lhs.true.39:                                 ; preds = %do.body.36
  %37 = load %struct.rtx_def*, %struct.rtx_def** %r__37, align 8
  %38 = bitcast %struct.rtx_def* %37 to i8*
  %call40 = call i32 @ggc_set_mark(i8* %38)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %land.lhs.true.39
  %39 = load %struct.rtx_def*, %struct.rtx_def** %r__37, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %39)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %land.lhs.true.39, %do.body.36
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  br label %do.body.45

do.body.45:                                       ; preds = %do.end.44
  %40 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_save_expr_regs = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 25
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x_save_expr_regs, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %r__46, align 8
  %42 = load %struct.rtx_def*, %struct.rtx_def** %r__46, align 8
  %cmp47 = icmp ne %struct.rtx_def* %42, null
  br i1 %cmp47, label %land.lhs.true.48, label %if.end.52

land.lhs.true.48:                                 ; preds = %do.body.45
  %43 = load %struct.rtx_def*, %struct.rtx_def** %r__46, align 8
  %44 = bitcast %struct.rtx_def* %43 to i8*
  %call49 = call i32 @ggc_set_mark(i8* %44)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end.52, label %if.then.51

if.then.51:                                       ; preds = %land.lhs.true.48
  %45 = load %struct.rtx_def*, %struct.rtx_def** %r__46, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %45)
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.51, %land.lhs.true.48, %do.body.45
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  br label %do.body.54

do.body.54:                                       ; preds = %do.end.53
  %46 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_stack_slot_list = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 26
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x_stack_slot_list, align 8
  store %struct.rtx_def* %47, %struct.rtx_def** %r__55, align 8
  %48 = load %struct.rtx_def*, %struct.rtx_def** %r__55, align 8
  %cmp56 = icmp ne %struct.rtx_def* %48, null
  br i1 %cmp56, label %land.lhs.true.57, label %if.end.61

land.lhs.true.57:                                 ; preds = %do.body.54
  %49 = load %struct.rtx_def*, %struct.rtx_def** %r__55, align 8
  %50 = bitcast %struct.rtx_def* %49 to i8*
  %call58 = call i32 @ggc_set_mark(i8* %50)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %land.lhs.true.57
  %51 = load %struct.rtx_def*, %struct.rtx_def** %r__55, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %51)
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.60, %land.lhs.true.57, %do.body.54
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  br label %do.body.63

do.body.63:                                       ; preds = %do.end.62
  %52 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_parm_birth_insn = getelementptr inbounds %struct.function, %struct.function* %52, i32 0, i32 35
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x_parm_birth_insn, align 8
  store %struct.rtx_def* %53, %struct.rtx_def** %r__64, align 8
  %54 = load %struct.rtx_def*, %struct.rtx_def** %r__64, align 8
  %cmp65 = icmp ne %struct.rtx_def* %54, null
  br i1 %cmp65, label %land.lhs.true.66, label %if.end.70

land.lhs.true.66:                                 ; preds = %do.body.63
  %55 = load %struct.rtx_def*, %struct.rtx_def** %r__64, align 8
  %56 = bitcast %struct.rtx_def* %55 to i8*
  %call67 = call i32 @ggc_set_mark(i8* %56)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end.70, label %if.then.69

if.then.69:                                       ; preds = %land.lhs.true.66
  %57 = load %struct.rtx_def*, %struct.rtx_def** %r__64, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %57)
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.69, %land.lhs.true.66, %do.body.63
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %do.body.72

do.body.72:                                       ; preds = %do.end.71
  %58 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_tail_recursion_label = getelementptr inbounds %struct.function, %struct.function* %58, i32 0, i32 28
  %59 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_label, align 8
  store %struct.rtx_def* %59, %struct.rtx_def** %r__73, align 8
  %60 = load %struct.rtx_def*, %struct.rtx_def** %r__73, align 8
  %cmp74 = icmp ne %struct.rtx_def* %60, null
  br i1 %cmp74, label %land.lhs.true.75, label %if.end.79

land.lhs.true.75:                                 ; preds = %do.body.72
  %61 = load %struct.rtx_def*, %struct.rtx_def** %r__73, align 8
  %62 = bitcast %struct.rtx_def* %61 to i8*
  %call76 = call i32 @ggc_set_mark(i8* %62)
  %tobool77 = icmp ne i32 %call76, 0
  br i1 %tobool77, label %if.end.79, label %if.then.78

if.then.78:                                       ; preds = %land.lhs.true.75
  %63 = load %struct.rtx_def*, %struct.rtx_def** %r__73, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %63)
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.78, %land.lhs.true.75, %do.body.72
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  br label %do.body.81

do.body.81:                                       ; preds = %do.end.80
  %64 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_tail_recursion_reentry = getelementptr inbounds %struct.function, %struct.function* %64, i32 0, i32 29
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x_tail_recursion_reentry, align 8
  store %struct.rtx_def* %65, %struct.rtx_def** %r__82, align 8
  %66 = load %struct.rtx_def*, %struct.rtx_def** %r__82, align 8
  %cmp83 = icmp ne %struct.rtx_def* %66, null
  br i1 %cmp83, label %land.lhs.true.84, label %if.end.88

land.lhs.true.84:                                 ; preds = %do.body.81
  %67 = load %struct.rtx_def*, %struct.rtx_def** %r__82, align 8
  %68 = bitcast %struct.rtx_def* %67 to i8*
  %call85 = call i32 @ggc_set_mark(i8* %68)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end.88, label %if.then.87

if.then.87:                                       ; preds = %land.lhs.true.84
  %69 = load %struct.rtx_def*, %struct.rtx_def** %r__82, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %69)
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %land.lhs.true.84, %do.body.81
  br label %do.end.89

do.end.89:                                        ; preds = %if.end.88
  br label %do.body.90

do.body.90:                                       ; preds = %do.end.89
  %70 = load %struct.function*, %struct.function** %p.addr, align 8
  %internal_arg_pointer = getelementptr inbounds %struct.function, %struct.function* %70, i32 0, i32 15
  %71 = load %struct.rtx_def*, %struct.rtx_def** %internal_arg_pointer, align 8
  store %struct.rtx_def* %71, %struct.rtx_def** %r__91, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %r__91, align 8
  %cmp92 = icmp ne %struct.rtx_def* %72, null
  br i1 %cmp92, label %land.lhs.true.93, label %if.end.97

land.lhs.true.93:                                 ; preds = %do.body.90
  %73 = load %struct.rtx_def*, %struct.rtx_def** %r__91, align 8
  %74 = bitcast %struct.rtx_def* %73 to i8*
  %call94 = call i32 @ggc_set_mark(i8* %74)
  %tobool95 = icmp ne i32 %call94, 0
  br i1 %tobool95, label %if.end.97, label %if.then.96

if.then.96:                                       ; preds = %land.lhs.true.93
  %75 = load %struct.rtx_def*, %struct.rtx_def** %r__91, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %75)
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.96, %land.lhs.true.93, %do.body.90
  br label %do.end.98

do.end.98:                                        ; preds = %if.end.97
  br label %do.body.99

do.body.99:                                       ; preds = %do.end.98
  %76 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_arg_pointer_save_area = getelementptr inbounds %struct.function, %struct.function* %76, i32 0, i32 30
  %77 = load %struct.rtx_def*, %struct.rtx_def** %x_arg_pointer_save_area, align 8
  store %struct.rtx_def* %77, %struct.rtx_def** %r__100, align 8
  %78 = load %struct.rtx_def*, %struct.rtx_def** %r__100, align 8
  %cmp101 = icmp ne %struct.rtx_def* %78, null
  br i1 %cmp101, label %land.lhs.true.102, label %if.end.106

land.lhs.true.102:                                ; preds = %do.body.99
  %79 = load %struct.rtx_def*, %struct.rtx_def** %r__100, align 8
  %80 = bitcast %struct.rtx_def* %79 to i8*
  %call103 = call i32 @ggc_set_mark(i8* %80)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end.106, label %if.then.105

if.then.105:                                      ; preds = %land.lhs.true.102
  %81 = load %struct.rtx_def*, %struct.rtx_def** %r__100, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %81)
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.105, %land.lhs.true.102, %do.body.99
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  br label %do.body.108

do.body.108:                                      ; preds = %do.end.107
  %82 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_rtl_expr_chain = getelementptr inbounds %struct.function, %struct.function* %82, i32 0, i32 27
  %83 = load %union.tree_node*, %union.tree_node** %x_rtl_expr_chain, align 8
  store %union.tree_node* %83, %union.tree_node** %t__, align 8
  %84 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %cmp109 = icmp ne %union.tree_node* %84, null
  br i1 %cmp109, label %land.lhs.true.110, label %if.end.122

land.lhs.true.110:                                ; preds = %do.body.108
  %85 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %86 = bitcast %union.tree_node* %85 to i8*
  %call111 = call i32 @ggc_set_mark(i8* %86)
  %tobool112 = icmp ne i32 %call111, 0
  br i1 %tobool112, label %if.end.122, label %if.then.113

if.then.113:                                      ; preds = %land.lhs.true.110
  br label %do.body.114

do.body.114:                                      ; preds = %if.then.113
  %87 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %87, i32 0, i32 1
  %88 = load i64, i64* %elements_used, align 8
  %89 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %89, i32 0, i32 0
  %90 = load i64, i64* %num_elements, align 8
  %cmp115 = icmp uge i64 %88, %90
  br i1 %cmp115, label %if.then.116, label %if.end.119

if.then.116:                                      ; preds = %do.body.114
  %91 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %92 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements117 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %92, i32 0, i32 0
  %93 = load i64, i64* %num_elements117, align 8
  %mul = mul i64 2, %93
  %call118 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %91, i64 %mul)
  store %struct.varray_head_tag* %call118, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.116, %do.body.114
  %94 = load %union.tree_node*, %union.tree_node** %t__, align 8
  %95 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used120 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %95, i32 0, i32 1
  %96 = load i64, i64* %elements_used120, align 8
  %inc = add i64 %96, 1
  store i64 %inc, i64* %elements_used120, align 8
  %97 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %97, i32 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree, i32 0, i64 %96
  store %union.tree_node* %94, %union.tree_node** %arrayidx, align 8
  br label %do.end.121

do.end.121:                                       ; preds = %if.end.119
  br label %if.end.122

if.end.122:                                       ; preds = %do.end.121, %land.lhs.true.110, %do.body.108
  br label %do.end.123

do.end.123:                                       ; preds = %if.end.122
  br label %do.body.124

do.body.124:                                      ; preds = %do.end.123
  %98 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_last_parm_insn = getelementptr inbounds %struct.function, %struct.function* %98, i32 0, i32 36
  %99 = load %struct.rtx_def*, %struct.rtx_def** %x_last_parm_insn, align 8
  store %struct.rtx_def* %99, %struct.rtx_def** %r__125, align 8
  %100 = load %struct.rtx_def*, %struct.rtx_def** %r__125, align 8
  %cmp126 = icmp ne %struct.rtx_def* %100, null
  br i1 %cmp126, label %land.lhs.true.127, label %if.end.131

land.lhs.true.127:                                ; preds = %do.body.124
  %101 = load %struct.rtx_def*, %struct.rtx_def** %r__125, align 8
  %102 = bitcast %struct.rtx_def* %101 to i8*
  %call128 = call i32 @ggc_set_mark(i8* %102)
  %tobool129 = icmp ne i32 %call128, 0
  br i1 %tobool129, label %if.end.131, label %if.then.130

if.then.130:                                      ; preds = %land.lhs.true.127
  %103 = load %struct.rtx_def*, %struct.rtx_def** %r__125, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %103)
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.130, %land.lhs.true.127, %do.body.124
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  br label %do.body.133

do.body.133:                                      ; preds = %do.end.132
  %104 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_context_display = getelementptr inbounds %struct.function, %struct.function* %104, i32 0, i32 33
  %105 = load %union.tree_node*, %union.tree_node** %x_context_display, align 8
  store %union.tree_node* %105, %union.tree_node** %t__134, align 8
  %106 = load %union.tree_node*, %union.tree_node** %t__134, align 8
  %cmp135 = icmp ne %union.tree_node* %106, null
  br i1 %cmp135, label %land.lhs.true.136, label %if.end.155

land.lhs.true.136:                                ; preds = %do.body.133
  %107 = load %union.tree_node*, %union.tree_node** %t__134, align 8
  %108 = bitcast %union.tree_node* %107 to i8*
  %call137 = call i32 @ggc_set_mark(i8* %108)
  %tobool138 = icmp ne i32 %call137, 0
  br i1 %tobool138, label %if.end.155, label %if.then.139

if.then.139:                                      ; preds = %land.lhs.true.136
  br label %do.body.140

do.body.140:                                      ; preds = %if.then.139
  %109 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used141 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %109, i32 0, i32 1
  %110 = load i64, i64* %elements_used141, align 8
  %111 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements142 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %111, i32 0, i32 0
  %112 = load i64, i64* %num_elements142, align 8
  %cmp143 = icmp uge i64 %110, %112
  br i1 %cmp143, label %if.then.144, label %if.end.148

if.then.144:                                      ; preds = %do.body.140
  %113 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %114 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements145 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %114, i32 0, i32 0
  %115 = load i64, i64* %num_elements145, align 8
  %mul146 = mul i64 2, %115
  %call147 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %113, i64 %mul146)
  store %struct.varray_head_tag* %call147, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.144, %do.body.140
  %116 = load %union.tree_node*, %union.tree_node** %t__134, align 8
  %117 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used149 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %117, i32 0, i32 1
  %118 = load i64, i64* %elements_used149, align 8
  %inc150 = add i64 %118, 1
  store i64 %inc150, i64* %elements_used149, align 8
  %119 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data151 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %119, i32 0, i32 4
  %tree152 = bitcast %union.varray_data_tag* %data151 to [1 x %union.tree_node*]*
  %arrayidx153 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree152, i32 0, i64 %118
  store %union.tree_node* %116, %union.tree_node** %arrayidx153, align 8
  br label %do.end.154

do.end.154:                                       ; preds = %if.end.148
  br label %if.end.155

if.end.155:                                       ; preds = %do.end.154, %land.lhs.true.136, %do.body.133
  br label %do.end.156

do.end.156:                                       ; preds = %if.end.155
  br label %do.body.157

do.body.157:                                      ; preds = %do.end.156
  %120 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_trampoline_list = getelementptr inbounds %struct.function, %struct.function* %120, i32 0, i32 34
  %121 = load %union.tree_node*, %union.tree_node** %x_trampoline_list, align 8
  store %union.tree_node* %121, %union.tree_node** %t__158, align 8
  %122 = load %union.tree_node*, %union.tree_node** %t__158, align 8
  %cmp159 = icmp ne %union.tree_node* %122, null
  br i1 %cmp159, label %land.lhs.true.160, label %if.end.179

land.lhs.true.160:                                ; preds = %do.body.157
  %123 = load %union.tree_node*, %union.tree_node** %t__158, align 8
  %124 = bitcast %union.tree_node* %123 to i8*
  %call161 = call i32 @ggc_set_mark(i8* %124)
  %tobool162 = icmp ne i32 %call161, 0
  br i1 %tobool162, label %if.end.179, label %if.then.163

if.then.163:                                      ; preds = %land.lhs.true.160
  br label %do.body.164

do.body.164:                                      ; preds = %if.then.163
  %125 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used165 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %125, i32 0, i32 1
  %126 = load i64, i64* %elements_used165, align 8
  %127 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements166 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %127, i32 0, i32 0
  %128 = load i64, i64* %num_elements166, align 8
  %cmp167 = icmp uge i64 %126, %128
  br i1 %cmp167, label %if.then.168, label %if.end.172

if.then.168:                                      ; preds = %do.body.164
  %129 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %130 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements169 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %130, i32 0, i32 0
  %131 = load i64, i64* %num_elements169, align 8
  %mul170 = mul i64 2, %131
  %call171 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %129, i64 %mul170)
  store %struct.varray_head_tag* %call171, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.172

if.end.172:                                       ; preds = %if.then.168, %do.body.164
  %132 = load %union.tree_node*, %union.tree_node** %t__158, align 8
  %133 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used173 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %133, i32 0, i32 1
  %134 = load i64, i64* %elements_used173, align 8
  %inc174 = add i64 %134, 1
  store i64 %inc174, i64* %elements_used173, align 8
  %135 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data175 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %135, i32 0, i32 4
  %tree176 = bitcast %union.varray_data_tag* %data175 to [1 x %union.tree_node*]*
  %arrayidx177 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree176, i32 0, i64 %134
  store %union.tree_node* %132, %union.tree_node** %arrayidx177, align 8
  br label %do.end.178

do.end.178:                                       ; preds = %if.end.172
  br label %if.end.179

if.end.179:                                       ; preds = %do.end.178, %land.lhs.true.160, %do.body.157
  br label %do.end.180

do.end.180:                                       ; preds = %if.end.179
  br label %do.body.181

do.body.181:                                      ; preds = %do.end.180
  %136 = load %struct.function*, %struct.function** %p.addr, align 8
  %epilogue_delay_list = getelementptr inbounds %struct.function, %struct.function* %136, i32 0, i32 55
  %137 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_delay_list, align 8
  store %struct.rtx_def* %137, %struct.rtx_def** %r__182, align 8
  %138 = load %struct.rtx_def*, %struct.rtx_def** %r__182, align 8
  %cmp183 = icmp ne %struct.rtx_def* %138, null
  br i1 %cmp183, label %land.lhs.true.184, label %if.end.188

land.lhs.true.184:                                ; preds = %do.body.181
  %139 = load %struct.rtx_def*, %struct.rtx_def** %r__182, align 8
  %140 = bitcast %struct.rtx_def* %139 to i8*
  %call185 = call i32 @ggc_set_mark(i8* %140)
  %tobool186 = icmp ne i32 %call185, 0
  br i1 %tobool186, label %if.end.188, label %if.then.187

if.then.187:                                      ; preds = %land.lhs.true.184
  %141 = load %struct.rtx_def*, %struct.rtx_def** %r__182, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %141)
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.187, %land.lhs.true.184, %do.body.181
  br label %do.end.189

do.end.189:                                       ; preds = %if.end.188
  br label %do.body.190

do.body.190:                                      ; preds = %do.end.189
  %142 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_clobber_return_insn = getelementptr inbounds %struct.function, %struct.function* %142, i32 0, i32 31
  %143 = load %struct.rtx_def*, %struct.rtx_def** %x_clobber_return_insn, align 8
  store %struct.rtx_def* %143, %struct.rtx_def** %r__191, align 8
  %144 = load %struct.rtx_def*, %struct.rtx_def** %r__191, align 8
  %cmp192 = icmp ne %struct.rtx_def* %144, null
  br i1 %cmp192, label %land.lhs.true.193, label %if.end.197

land.lhs.true.193:                                ; preds = %do.body.190
  %145 = load %struct.rtx_def*, %struct.rtx_def** %r__191, align 8
  %146 = bitcast %struct.rtx_def* %145 to i8*
  %call194 = call i32 @ggc_set_mark(i8* %146)
  %tobool195 = icmp ne i32 %call194, 0
  br i1 %tobool195, label %if.end.197, label %if.then.196

if.then.196:                                      ; preds = %land.lhs.true.193
  %147 = load %struct.rtx_def*, %struct.rtx_def** %r__191, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %147)
  br label %if.end.197

if.end.197:                                       ; preds = %if.then.196, %land.lhs.true.193, %do.body.190
  br label %do.end.198

do.end.198:                                       ; preds = %if.end.197
  %148 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_temp_slots = getelementptr inbounds %struct.function, %struct.function* %148, i32 0, i32 39
  %149 = load %struct.temp_slot*, %struct.temp_slot** %x_temp_slots, align 8
  store %struct.temp_slot* %149, %struct.temp_slot** %t, align 8
  br label %for.cond.199

for.cond.199:                                     ; preds = %for.inc.274, %do.end.198
  %150 = load %struct.temp_slot*, %struct.temp_slot** %t, align 8
  %cmp200 = icmp ne %struct.temp_slot* %150, null
  br i1 %cmp200, label %for.body.201, label %for.end.275

for.body.201:                                     ; preds = %for.cond.199
  br label %do.body.202

do.body.202:                                      ; preds = %for.body.201
  %151 = load %struct.temp_slot*, %struct.temp_slot** %t, align 8
  %152 = bitcast %struct.temp_slot* %151 to i8*
  store i8* %152, i8** %a__, align 8
  %153 = load i8*, i8** %a__, align 8
  %cmp203 = icmp ne i8* %153, null
  br i1 %cmp203, label %if.then.204, label %if.end.206

if.then.204:                                      ; preds = %do.body.202
  %154 = load i8*, i8** %a__, align 8
  %call205 = call i32 @ggc_set_mark(i8* %154)
  br label %if.end.206

if.end.206:                                       ; preds = %if.then.204, %do.body.202
  br label %do.end.207

do.end.207:                                       ; preds = %if.end.206
  br label %do.body.208

do.body.208:                                      ; preds = %do.end.207
  %155 = load %struct.temp_slot*, %struct.temp_slot** %t, align 8
  %slot = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %155, i32 0, i32 1
  %156 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8
  store %struct.rtx_def* %156, %struct.rtx_def** %r__209, align 8
  %157 = load %struct.rtx_def*, %struct.rtx_def** %r__209, align 8
  %cmp210 = icmp ne %struct.rtx_def* %157, null
  br i1 %cmp210, label %land.lhs.true.211, label %if.end.215

land.lhs.true.211:                                ; preds = %do.body.208
  %158 = load %struct.rtx_def*, %struct.rtx_def** %r__209, align 8
  %159 = bitcast %struct.rtx_def* %158 to i8*
  %call212 = call i32 @ggc_set_mark(i8* %159)
  %tobool213 = icmp ne i32 %call212, 0
  br i1 %tobool213, label %if.end.215, label %if.then.214

if.then.214:                                      ; preds = %land.lhs.true.211
  %160 = load %struct.rtx_def*, %struct.rtx_def** %r__209, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %160)
  br label %if.end.215

if.end.215:                                       ; preds = %if.then.214, %land.lhs.true.211, %do.body.208
  br label %do.end.216

do.end.216:                                       ; preds = %if.end.215
  br label %do.body.217

do.body.217:                                      ; preds = %do.end.216
  %161 = load %struct.temp_slot*, %struct.temp_slot** %t, align 8
  %address = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %161, i32 0, i32 2
  %162 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8
  store %struct.rtx_def* %162, %struct.rtx_def** %r__218, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %r__218, align 8
  %cmp219 = icmp ne %struct.rtx_def* %163, null
  br i1 %cmp219, label %land.lhs.true.220, label %if.end.224

land.lhs.true.220:                                ; preds = %do.body.217
  %164 = load %struct.rtx_def*, %struct.rtx_def** %r__218, align 8
  %165 = bitcast %struct.rtx_def* %164 to i8*
  %call221 = call i32 @ggc_set_mark(i8* %165)
  %tobool222 = icmp ne i32 %call221, 0
  br i1 %tobool222, label %if.end.224, label %if.then.223

if.then.223:                                      ; preds = %land.lhs.true.220
  %166 = load %struct.rtx_def*, %struct.rtx_def** %r__218, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %166)
  br label %if.end.224

if.end.224:                                       ; preds = %if.then.223, %land.lhs.true.220, %do.body.217
  br label %do.end.225

do.end.225:                                       ; preds = %if.end.224
  br label %do.body.226

do.body.226:                                      ; preds = %do.end.225
  %167 = load %struct.temp_slot*, %struct.temp_slot** %t, align 8
  %rtl_expr = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %167, i32 0, i32 6
  %168 = load %union.tree_node*, %union.tree_node** %rtl_expr, align 8
  store %union.tree_node* %168, %union.tree_node** %t__227, align 8
  %169 = load %union.tree_node*, %union.tree_node** %t__227, align 8
  %cmp228 = icmp ne %union.tree_node* %169, null
  br i1 %cmp228, label %land.lhs.true.229, label %if.end.248

land.lhs.true.229:                                ; preds = %do.body.226
  %170 = load %union.tree_node*, %union.tree_node** %t__227, align 8
  %171 = bitcast %union.tree_node* %170 to i8*
  %call230 = call i32 @ggc_set_mark(i8* %171)
  %tobool231 = icmp ne i32 %call230, 0
  br i1 %tobool231, label %if.end.248, label %if.then.232

if.then.232:                                      ; preds = %land.lhs.true.229
  br label %do.body.233

do.body.233:                                      ; preds = %if.then.232
  %172 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used234 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %172, i32 0, i32 1
  %173 = load i64, i64* %elements_used234, align 8
  %174 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements235 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %174, i32 0, i32 0
  %175 = load i64, i64* %num_elements235, align 8
  %cmp236 = icmp uge i64 %173, %175
  br i1 %cmp236, label %if.then.237, label %if.end.241

if.then.237:                                      ; preds = %do.body.233
  %176 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %177 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements238 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %177, i32 0, i32 0
  %178 = load i64, i64* %num_elements238, align 8
  %mul239 = mul i64 2, %178
  %call240 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %176, i64 %mul239)
  store %struct.varray_head_tag* %call240, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.241

if.end.241:                                       ; preds = %if.then.237, %do.body.233
  %179 = load %union.tree_node*, %union.tree_node** %t__227, align 8
  %180 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used242 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %180, i32 0, i32 1
  %181 = load i64, i64* %elements_used242, align 8
  %inc243 = add i64 %181, 1
  store i64 %inc243, i64* %elements_used242, align 8
  %182 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data244 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %182, i32 0, i32 4
  %tree245 = bitcast %union.varray_data_tag* %data244 to [1 x %union.tree_node*]*
  %arrayidx246 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree245, i32 0, i64 %181
  store %union.tree_node* %179, %union.tree_node** %arrayidx246, align 8
  br label %do.end.247

do.end.247:                                       ; preds = %if.end.241
  br label %if.end.248

if.end.248:                                       ; preds = %do.end.247, %land.lhs.true.229, %do.body.226
  br label %do.end.249

do.end.249:                                       ; preds = %if.end.248
  br label %do.body.250

do.body.250:                                      ; preds = %do.end.249
  %183 = load %struct.temp_slot*, %struct.temp_slot** %t, align 8
  %type = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %183, i32 0, i32 5
  %184 = load %union.tree_node*, %union.tree_node** %type, align 8
  store %union.tree_node* %184, %union.tree_node** %t__251, align 8
  %185 = load %union.tree_node*, %union.tree_node** %t__251, align 8
  %cmp252 = icmp ne %union.tree_node* %185, null
  br i1 %cmp252, label %land.lhs.true.253, label %if.end.272

land.lhs.true.253:                                ; preds = %do.body.250
  %186 = load %union.tree_node*, %union.tree_node** %t__251, align 8
  %187 = bitcast %union.tree_node* %186 to i8*
  %call254 = call i32 @ggc_set_mark(i8* %187)
  %tobool255 = icmp ne i32 %call254, 0
  br i1 %tobool255, label %if.end.272, label %if.then.256

if.then.256:                                      ; preds = %land.lhs.true.253
  br label %do.body.257

do.body.257:                                      ; preds = %if.then.256
  %188 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used258 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %188, i32 0, i32 1
  %189 = load i64, i64* %elements_used258, align 8
  %190 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements259 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %190, i32 0, i32 0
  %191 = load i64, i64* %num_elements259, align 8
  %cmp260 = icmp uge i64 %189, %191
  br i1 %cmp260, label %if.then.261, label %if.end.265

if.then.261:                                      ; preds = %do.body.257
  %192 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %193 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements262 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %193, i32 0, i32 0
  %194 = load i64, i64* %num_elements262, align 8
  %mul263 = mul i64 2, %194
  %call264 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %192, i64 %mul263)
  store %struct.varray_head_tag* %call264, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.265

if.end.265:                                       ; preds = %if.then.261, %do.body.257
  %195 = load %union.tree_node*, %union.tree_node** %t__251, align 8
  %196 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used266 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %196, i32 0, i32 1
  %197 = load i64, i64* %elements_used266, align 8
  %inc267 = add i64 %197, 1
  store i64 %inc267, i64* %elements_used266, align 8
  %198 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data268 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %198, i32 0, i32 4
  %tree269 = bitcast %union.varray_data_tag* %data268 to [1 x %union.tree_node*]*
  %arrayidx270 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree269, i32 0, i64 %197
  store %union.tree_node* %195, %union.tree_node** %arrayidx270, align 8
  br label %do.end.271

do.end.271:                                       ; preds = %if.end.265
  br label %if.end.272

if.end.272:                                       ; preds = %do.end.271, %land.lhs.true.253, %do.body.250
  br label %do.end.273

do.end.273:                                       ; preds = %if.end.272
  br label %for.inc.274

for.inc.274:                                      ; preds = %do.end.273
  %199 = load %struct.temp_slot*, %struct.temp_slot** %t, align 8
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %199, i32 0, i32 0
  %200 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8
  store %struct.temp_slot* %200, %struct.temp_slot** %t, align 8
  br label %for.cond.199

for.end.275:                                      ; preds = %for.cond.199
  %201 = load %struct.function*, %struct.function** %p.addr, align 8
  %fixup_var_refs_queue = getelementptr inbounds %struct.function, %struct.function* %201, i32 0, i32 43
  %202 = load %struct.var_refs_queue*, %struct.var_refs_queue** %fixup_var_refs_queue, align 8
  store %struct.var_refs_queue* %202, %struct.var_refs_queue** %q, align 8
  br label %for.cond.276

for.cond.276:                                     ; preds = %for.inc.295, %for.end.275
  %203 = load %struct.var_refs_queue*, %struct.var_refs_queue** %q, align 8
  %cmp277 = icmp ne %struct.var_refs_queue* %203, null
  br i1 %cmp277, label %for.body.278, label %for.end.297

for.body.278:                                     ; preds = %for.cond.276
  br label %do.body.279

do.body.279:                                      ; preds = %for.body.278
  %204 = load %struct.var_refs_queue*, %struct.var_refs_queue** %q, align 8
  %205 = bitcast %struct.var_refs_queue* %204 to i8*
  store i8* %205, i8** %a__280, align 8
  %206 = load i8*, i8** %a__280, align 8
  %cmp281 = icmp ne i8* %206, null
  br i1 %cmp281, label %if.then.282, label %if.end.284

if.then.282:                                      ; preds = %do.body.279
  %207 = load i8*, i8** %a__280, align 8
  %call283 = call i32 @ggc_set_mark(i8* %207)
  br label %if.end.284

if.end.284:                                       ; preds = %if.then.282, %do.body.279
  br label %do.end.285

do.end.285:                                       ; preds = %if.end.284
  br label %do.body.286

do.body.286:                                      ; preds = %do.end.285
  %208 = load %struct.var_refs_queue*, %struct.var_refs_queue** %q, align 8
  %modified = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %208, i32 0, i32 0
  %209 = load %struct.rtx_def*, %struct.rtx_def** %modified, align 8
  store %struct.rtx_def* %209, %struct.rtx_def** %r__287, align 8
  %210 = load %struct.rtx_def*, %struct.rtx_def** %r__287, align 8
  %cmp288 = icmp ne %struct.rtx_def* %210, null
  br i1 %cmp288, label %land.lhs.true.289, label %if.end.293

land.lhs.true.289:                                ; preds = %do.body.286
  %211 = load %struct.rtx_def*, %struct.rtx_def** %r__287, align 8
  %212 = bitcast %struct.rtx_def* %211 to i8*
  %call290 = call i32 @ggc_set_mark(i8* %212)
  %tobool291 = icmp ne i32 %call290, 0
  br i1 %tobool291, label %if.end.293, label %if.then.292

if.then.292:                                      ; preds = %land.lhs.true.289
  %213 = load %struct.rtx_def*, %struct.rtx_def** %r__287, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %213)
  br label %if.end.293

if.end.293:                                       ; preds = %if.then.292, %land.lhs.true.289, %do.body.286
  br label %do.end.294

do.end.294:                                       ; preds = %if.end.293
  br label %for.inc.295

for.inc.295:                                      ; preds = %do.end.294
  %214 = load %struct.var_refs_queue*, %struct.var_refs_queue** %q, align 8
  %next296 = getelementptr inbounds %struct.var_refs_queue, %struct.var_refs_queue* %214, i32 0, i32 3
  %215 = load %struct.var_refs_queue*, %struct.var_refs_queue** %next296, align 8
  store %struct.var_refs_queue* %215, %struct.var_refs_queue** %q, align 8
  br label %for.cond.276

for.end.297:                                      ; preds = %for.cond.276
  br label %do.body.298

do.body.298:                                      ; preds = %for.end.297
  %216 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function, %struct.function* %216, i32 0, i32 20
  %217 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  store %struct.rtx_def* %217, %struct.rtx_def** %r__299, align 8
  %218 = load %struct.rtx_def*, %struct.rtx_def** %r__299, align 8
  %cmp300 = icmp ne %struct.rtx_def* %218, null
  br i1 %cmp300, label %land.lhs.true.301, label %if.end.305

land.lhs.true.301:                                ; preds = %do.body.298
  %219 = load %struct.rtx_def*, %struct.rtx_def** %r__299, align 8
  %220 = bitcast %struct.rtx_def* %219 to i8*
  %call302 = call i32 @ggc_set_mark(i8* %220)
  %tobool303 = icmp ne i32 %call302, 0
  br i1 %tobool303, label %if.end.305, label %if.then.304

if.then.304:                                      ; preds = %land.lhs.true.301
  %221 = load %struct.rtx_def*, %struct.rtx_def** %r__299, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %221)
  br label %if.end.305

if.end.305:                                       ; preds = %if.then.304, %land.lhs.true.301, %do.body.298
  br label %do.end.306

do.end.306:                                       ; preds = %if.end.305
  br label %do.body.307

do.body.307:                                      ; preds = %do.end.306
  %222 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_nonlocal_goto_handler_labels = getelementptr inbounds %struct.function, %struct.function* %222, i32 0, i32 21
  %223 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_handler_labels, align 8
  store %struct.rtx_def* %223, %struct.rtx_def** %r__308, align 8
  %224 = load %struct.rtx_def*, %struct.rtx_def** %r__308, align 8
  %cmp309 = icmp ne %struct.rtx_def* %224, null
  br i1 %cmp309, label %land.lhs.true.310, label %if.end.314

land.lhs.true.310:                                ; preds = %do.body.307
  %225 = load %struct.rtx_def*, %struct.rtx_def** %r__308, align 8
  %226 = bitcast %struct.rtx_def* %225 to i8*
  %call311 = call i32 @ggc_set_mark(i8* %226)
  %tobool312 = icmp ne i32 %call311, 0
  br i1 %tobool312, label %if.end.314, label %if.then.313

if.then.313:                                      ; preds = %land.lhs.true.310
  %227 = load %struct.rtx_def*, %struct.rtx_def** %r__308, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %227)
  br label %if.end.314

if.end.314:                                       ; preds = %if.then.313, %land.lhs.true.310, %do.body.307
  br label %do.end.315

do.end.315:                                       ; preds = %if.end.314
  br label %do.body.316

do.body.316:                                      ; preds = %do.end.315
  %228 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function, %struct.function* %228, i32 0, i32 22
  %229 = load %struct.rtx_def*, %struct.rtx_def** %x_nonlocal_goto_stack_level, align 8
  store %struct.rtx_def* %229, %struct.rtx_def** %r__317, align 8
  %230 = load %struct.rtx_def*, %struct.rtx_def** %r__317, align 8
  %cmp318 = icmp ne %struct.rtx_def* %230, null
  br i1 %cmp318, label %land.lhs.true.319, label %if.end.323

land.lhs.true.319:                                ; preds = %do.body.316
  %231 = load %struct.rtx_def*, %struct.rtx_def** %r__317, align 8
  %232 = bitcast %struct.rtx_def* %231 to i8*
  %call320 = call i32 @ggc_set_mark(i8* %232)
  %tobool321 = icmp ne i32 %call320, 0
  br i1 %tobool321, label %if.end.323, label %if.then.322

if.then.322:                                      ; preds = %land.lhs.true.319
  %233 = load %struct.rtx_def*, %struct.rtx_def** %r__317, align 8
  call void @ggc_mark_rtx_children(%struct.rtx_def* %233)
  br label %if.end.323

if.end.323:                                       ; preds = %if.then.322, %land.lhs.true.319, %do.body.316
  br label %do.end.324

do.end.324:                                       ; preds = %if.end.323
  br label %do.body.325

do.body.325:                                      ; preds = %do.end.324
  %234 = load %struct.function*, %struct.function** %p.addr, align 8
  %x_nonlocal_labels = getelementptr inbounds %struct.function, %struct.function* %234, i32 0, i32 19
  %235 = load %union.tree_node*, %union.tree_node** %x_nonlocal_labels, align 8
  store %union.tree_node* %235, %union.tree_node** %t__326, align 8
  %236 = load %union.tree_node*, %union.tree_node** %t__326, align 8
  %cmp327 = icmp ne %union.tree_node* %236, null
  br i1 %cmp327, label %land.lhs.true.328, label %if.end.347

land.lhs.true.328:                                ; preds = %do.body.325
  %237 = load %union.tree_node*, %union.tree_node** %t__326, align 8
  %238 = bitcast %union.tree_node* %237 to i8*
  %call329 = call i32 @ggc_set_mark(i8* %238)
  %tobool330 = icmp ne i32 %call329, 0
  br i1 %tobool330, label %if.end.347, label %if.then.331

if.then.331:                                      ; preds = %land.lhs.true.328
  br label %do.body.332

do.body.332:                                      ; preds = %if.then.331
  %239 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used333 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %239, i32 0, i32 1
  %240 = load i64, i64* %elements_used333, align 8
  %241 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements334 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %241, i32 0, i32 0
  %242 = load i64, i64* %num_elements334, align 8
  %cmp335 = icmp uge i64 %240, %242
  br i1 %cmp335, label %if.then.336, label %if.end.340

if.then.336:                                      ; preds = %do.body.332
  %243 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %244 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %num_elements337 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %244, i32 0, i32 0
  %245 = load i64, i64* %num_elements337, align 8
  %mul338 = mul i64 2, %245
  %call339 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %243, i64 %mul338)
  store %struct.varray_head_tag* %call339, %struct.varray_head_tag** @ggc_pending_trees, align 8
  br label %if.end.340

if.end.340:                                       ; preds = %if.then.336, %do.body.332
  %246 = load %union.tree_node*, %union.tree_node** %t__326, align 8
  %247 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %elements_used341 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %247, i32 0, i32 1
  %248 = load i64, i64* %elements_used341, align 8
  %inc342 = add i64 %248, 1
  store i64 %inc342, i64* %elements_used341, align 8
  %249 = load %struct.varray_head_tag*, %struct.varray_head_tag** @ggc_pending_trees, align 8
  %data343 = getelementptr inbounds %struct.varray_head_tag, %struct.varray_head_tag* %249, i32 0, i32 4
  %tree344 = bitcast %union.varray_data_tag* %data343 to [1 x %union.tree_node*]*
  %arrayidx345 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %tree344, i32 0, i64 %248
  store %union.tree_node* %246, %union.tree_node** %arrayidx345, align 8
  br label %do.end.346

do.end.346:                                       ; preds = %if.end.340
  br label %if.end.347

if.end.347:                                       ; preds = %do.end.346, %land.lhs.true.328, %do.body.325
  br label %do.end.348

do.end.348:                                       ; preds = %if.end.347
  %250 = load %struct.function*, %struct.function** %p.addr, align 8
  call void @mark_hard_reg_initial_vals(%struct.function* %250)
  br label %return

return:                                           ; preds = %do.end.348, %if.then
  ret void
}

declare void @mark_eh_status(%struct.eh_status*) #2

declare void @mark_stmt_status(%struct.stmt_status*) #2

declare void @mark_expr_status(%struct.expr_status*) #2

declare void @mark_emit_status(%struct.emit_status*) #2

declare void @mark_varasm_status(%struct.varasm_status*) #2

declare void @ggc_mark_rtvec_children(%struct.rtvec_def*) #2

; Function Attrs: nounwind uwtable
define void @init_function_once() #0 {
entry:
  call void @ggc_add_root(i8* bitcast (%struct.function** @cfun to i8*), i32 1, i32 8, void (i8*)* @maybe_mark_struct_function)
  call void @ggc_add_root(i8* bitcast (%struct.function** @outer_function_chain to i8*), i32 1, i32 8, void (i8*)* @maybe_mark_struct_function)
  %call = call %struct.varray_head_tag* @varray_init(i64 0, i64 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0))
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** @prologue, align 8
  %call1 = call %struct.varray_head_tag* @varray_init(i64 0, i64 4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0))
  store %struct.varray_head_tag* %call1, %struct.varray_head_tag** @epilogue, align 8
  %call2 = call %struct.varray_head_tag* @varray_init(i64 0, i64 4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i32 0, i32 0))
  store %struct.varray_head_tag* %call2, %struct.varray_head_tag** @sibcall_epilogue, align 8
  ret void
}

declare void @ggc_add_root(i8*, i32, i32, void (i8*)*) #2

; Function Attrs: nounwind uwtable
define internal void @maybe_mark_struct_function(i8* %arg) #0 {
entry:
  %arg.addr = alloca i8*, align 8
  %f = alloca %struct.function*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load i8*, i8** %arg.addr, align 8
  %1 = bitcast i8* %0 to %struct.function**
  %2 = load %struct.function*, %struct.function** %1, align 8
  store %struct.function* %2, %struct.function** %f, align 8
  %3 = load %struct.function*, %struct.function** %f, align 8
  %cmp = icmp eq %struct.function* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.function*, %struct.function** %f, align 8
  call void @ggc_mark_struct_function(%struct.function* %4)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @fixup_var_refs_insns_with_hash(%struct.hash_table* %ht, %struct.rtx_def* %var, i32 %promoted_mode, i32 %unsignedp, %struct.rtx_def* %may_share) #0 {
entry:
  %ht.addr = alloca %struct.hash_table*, align 8
  %var.addr = alloca %struct.rtx_def*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %may_share.addr = alloca %struct.rtx_def*, align 8
  %ime = alloca %struct.insns_for_mem_entry*, align 8
  %insn_list = alloca %struct.rtx_def*, align 8
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  store %struct.rtx_def* %var, %struct.rtx_def** %var.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  store %struct.rtx_def* %may_share, %struct.rtx_def** %may_share.addr, align 8
  %0 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i8*
  %call = call %struct.hash_entry* @hash_lookup(%struct.hash_table* %0, i8* %2, i32 0, i8* (%struct.obstack*, i8*)* null)
  %3 = bitcast %struct.hash_entry* %call to %struct.insns_for_mem_entry*
  store %struct.insns_for_mem_entry* %3, %struct.insns_for_mem_entry** %ime, align 8
  %4 = load %struct.insns_for_mem_entry*, %struct.insns_for_mem_entry** %ime, align 8
  %insns = getelementptr inbounds %struct.insns_for_mem_entry, %struct.insns_for_mem_entry* %4, i32 0, i32 1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  store %struct.rtx_def* %5, %struct.rtx_def** %insn_list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn_list, align 8
  %cmp = icmp ne %struct.rtx_def* %6, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn_list, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load = load i32, i32* %9, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom = sext i32 %bf.clear to i64
  %arrayidx1 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %10 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %10 to i32
  %cmp2 = icmp eq i32 %conv, 105
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn_list, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %14 = load i32, i32* %promoted_mode.addr, align 4
  %15 = load i32, i32* %unsignedp.addr, align 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %may_share.addr, align 8
  call void @fixup_var_refs_insn(%struct.rtx_def* %12, %struct.rtx_def* %13, i32 %14, i32 %15, i32 1, %struct.rtx_def* %16)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn_list, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 1
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %insn_list, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @fixup_var_refs_insns(%struct.rtx_def* %insn, %struct.rtx_def* %var, i32 %promoted_mode, i32 %unsignedp, i32 %toplevel, %struct.rtx_def* %may_share) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %var.addr = alloca %struct.rtx_def*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %toplevel.addr = alloca i32, align 4
  %may_share.addr = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %var, %struct.rtx_def** %var.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  store i32 %toplevel, i32* %toplevel.addr, align 4
  store %struct.rtx_def* %may_share, %struct.rtx_def** %may_share.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.31, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %tobool = icmp ne %struct.rtx_def* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %next, align 8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 3
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load4 = load i32, i32* %7, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 141
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %8, 3
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i32 0, i64 3
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx10, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 %idxprom
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  store %struct.rtx_def* %12, %struct.rtx_def** %seq, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %tobool14 = icmp ne %struct.rtx_def* %13, null
  br i1 %tobool14, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %for.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  call void @push_to_sequence(%struct.rtx_def* %14)
  %15 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %17 = load i32, i32* %promoted_mode.addr, align 4
  %18 = load i32, i32* %unsignedp.addr, align 4
  %19 = load %struct.rtx_def*, %struct.rtx_def** %may_share.addr, align 8
  call void @fixup_var_refs_insns(%struct.rtx_def* %15, %struct.rtx_def* %16, i32 %17, i32 %18, i32 0, %struct.rtx_def* %19)
  %call = call %struct.rtx_def* @get_insns()
  %20 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %20 to i64
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i32 0, i64 3
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx19, align 8
  %fld20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i32 0, i64 %idxprom16
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  store %struct.rtx_def* %call, %struct.rtx_def** %rtx22, align 8
  call void @end_sequence()
  br label %if.end

if.end:                                           ; preds = %if.then.15, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.31

if.else:                                          ; preds = %land.lhs.true, %while.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load23 = load i32, i32* %25, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %idxprom25 = sext i32 %bf.clear24 to i64
  %arrayidx26 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom25
  %26 = load i8, i8* %arrayidx26, align 1
  %conv = sext i8 %26 to i32
  %cmp27 = icmp eq i32 %conv, 105
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.else
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %29 = load i32, i32* %promoted_mode.addr, align 4
  %30 = load i32, i32* %unsignedp.addr, align 4
  %31 = load i32, i32* %toplevel.addr, align 4
  %32 = load %struct.rtx_def*, %struct.rtx_def** %may_share.addr, align 8
  call void @fixup_var_refs_insn(%struct.rtx_def* %27, %struct.rtx_def* %28, i32 %29, i32 %30, i32 %31, %struct.rtx_def* %32)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %if.else
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %for.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8
  store %struct.rtx_def* %33, %struct.rtx_def** %insn.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare void @push_to_full_sequence(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.hash_entry* @hash_lookup(%struct.hash_table*, i8*, i32, i8* (%struct.obstack*, i8*)*) #2

; Function Attrs: nounwind uwtable
define internal void @fixup_var_refs_insn(%struct.rtx_def* %insn, %struct.rtx_def* %var, i32 %promoted_mode, i32 %unsignedp, i32 %toplevel, %struct.rtx_def* %no_share) #0 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %var.addr = alloca %struct.rtx_def*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %toplevel.addr = alloca i32, align 4
  %no_share.addr = alloca %struct.rtx_def*, align 8
  %call_dest = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %prev_set = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %replacements = alloca %struct.fixup_replacement*, align 8
  %next_insn = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.fixup_replacement*, align 8
  %insert_before = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %var, %struct.rtx_def** %var.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  store i32 %toplevel, i32* %toplevel.addr, align 4
  store %struct.rtx_def* %no_share, %struct.rtx_def** %no_share.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %call_dest, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 6
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %note, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 3
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 49
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 3
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp10 = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp10, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 3
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx16, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load17 = load i32, i32* %12, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 65
  br i1 %cmp19, label %land.lhs.true.20, label %if.else

land.lhs.true.20:                                 ; preds = %lor.lhs.false
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 3
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx23, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 0
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtx26, align 8
  %fld27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i32 0, i64 0
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtx29, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp30 = icmp eq %struct.rtx_def* %16, %17
  br i1 %cmp30, label %if.then, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %land.lhs.true.20
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i32 0, i64 3
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtx34, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 0
  %rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx37, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i32 0, i64 1
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx40, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp41 = icmp eq %struct.rtx_def* %21, %22
  br i1 %cmp41, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.31, %land.lhs.true.20, %land.lhs.true
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %23, i32 7, %struct.rtx_def* null)
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8
  %cmp42 = icmp ne %struct.rtx_def* %call, null
  br i1 %cmp42, label %if.then.43, label %if.end

if.then.43:                                       ; preds = %if.then
  %24 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx46, align 8
  %26 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i32 0, i64 0
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx49, align 8
  %call50 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %27, i32 6, %struct.rtx_def* null)
  call void @remove_note(%struct.rtx_def* %25, %struct.rtx_def* %call50)
  br label %if.end

if.end:                                           ; preds = %if.then.43, %if.then
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call51 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %28)
  br label %if.end.303

if.else:                                          ; preds = %lor.lhs.false.31, %lor.lhs.false, %entry
  %29 = load i32, i32* %toplevel.addr, align 4
  %tobool = icmp ne i32 %29, 0
  br i1 %tobool, label %land.lhs.true.52, label %if.else.155

land.lhs.true.52:                                 ; preds = %if.else
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load53 = load i32, i32* %31, align 8
  %bf.clear54 = and i32 %bf.load53, 65535
  %idxprom = sext i32 %bf.clear54 to i64
  %arrayidx55 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom
  %32 = load i8, i8* %arrayidx55, align 1
  %conv = sext i8 %32 to i32
  %cmp56 = icmp eq i32 %conv, 105
  br i1 %cmp56, label %cond.true, label %cond.false.73

cond.true:                                        ; preds = %land.lhs.true.52
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i32 0, i64 3
  %rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx60, align 8
  %35 = bitcast %struct.rtx_def* %34 to i32*
  %bf.load61 = load i32, i32* %35, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  %cmp63 = icmp eq i32 %bf.clear62, 47
  br i1 %cmp63, label %cond.true.65, label %cond.false

cond.true.65:                                     ; preds = %cond.true
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i32 0, i64 3
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx68, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i32 0, i64 3
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx71, align 8
  %call72 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %38, %struct.rtx_def* %40)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.65
  %cond = phi %struct.rtx_def* [ %37, %cond.true.65 ], [ %call72, %cond.false ]
  br label %cond.end.74

cond.false.73:                                    ; preds = %land.lhs.true.52
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.false.73, %cond.end
  %cond75 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false.73 ]
  store %struct.rtx_def* %cond75, %struct.rtx_def** %set, align 8
  %cmp76 = icmp ne %struct.rtx_def* %cond75, null
  br i1 %cmp76, label %land.lhs.true.78, label %if.else.155

land.lhs.true.78:                                 ; preds = %cond.end.74
  %41 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 0
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtx81, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp82 = icmp eq %struct.rtx_def* %42, %43
  br i1 %cmp82, label %land.lhs.true.84, label %if.else.155

land.lhs.true.84:                                 ; preds = %land.lhs.true.78
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call85 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %44, i32 6, %struct.rtx_def* null)
  %cmp86 = icmp eq %struct.rtx_def* %call85, null
  br i1 %cmp86, label %land.lhs.true.88, label %if.else.155

land.lhs.true.88:                                 ; preds = %land.lhs.true.84
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i32 0, i64 1
  %rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rtx91, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %call92 = call i32 @rtx_equal_p(%struct.rtx_def* %46, %struct.rtx_def* %47)
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %if.then.153, label %lor.lhs.false.94

lor.lhs.false.94:                                 ; preds = %land.lhs.true.88
  %48 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 1
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx97, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load98 = load i32, i32* %50, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 61
  br i1 %cmp100, label %land.lhs.true.102, label %if.else.155

land.lhs.true.102:                                ; preds = %lor.lhs.false.94
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call103 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %51)
  store %struct.rtx_def* %call103, %struct.rtx_def** %prev, align 8
  %cmp104 = icmp ne %struct.rtx_def* %call103, null
  br i1 %cmp104, label %land.lhs.true.106, label %if.else.155

land.lhs.true.106:                                ; preds = %land.lhs.true.102
  %52 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %53 = bitcast %struct.rtx_def* %52 to i32*
  %bf.load107 = load i32, i32* %53, align 8
  %bf.clear108 = and i32 %bf.load107, 65535
  %idxprom109 = sext i32 %bf.clear108 to i64
  %arrayidx110 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom109
  %54 = load i8, i8* %arrayidx110, align 1
  %conv111 = sext i8 %54 to i32
  %cmp112 = icmp eq i32 %conv111, 105
  br i1 %cmp112, label %cond.true.114, label %cond.false.133

cond.true.114:                                    ; preds = %land.lhs.true.106
  %55 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %fld115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i32 0, i64 3
  %rtx117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rtx117, align 8
  %57 = bitcast %struct.rtx_def* %56 to i32*
  %bf.load118 = load i32, i32* %57, align 8
  %bf.clear119 = and i32 %bf.load118, 65535
  %cmp120 = icmp eq i32 %bf.clear119, 47
  br i1 %cmp120, label %cond.true.122, label %cond.false.126

cond.true.122:                                    ; preds = %cond.true.114
  %58 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %fld123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i32 0, i64 3
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtx125, align 8
  br label %cond.end.131

cond.false.126:                                   ; preds = %cond.true.114
  %60 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8
  %fld127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i32 0, i64 3
  %rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtx129, align 8
  %call130 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %60, %struct.rtx_def* %62)
  br label %cond.end.131

cond.end.131:                                     ; preds = %cond.false.126, %cond.true.122
  %cond132 = phi %struct.rtx_def* [ %59, %cond.true.122 ], [ %call130, %cond.false.126 ]
  br label %cond.end.134

cond.false.133:                                   ; preds = %land.lhs.true.106
  br label %cond.end.134

cond.end.134:                                     ; preds = %cond.false.133, %cond.end.131
  %cond135 = phi %struct.rtx_def* [ %cond132, %cond.end.131 ], [ null, %cond.false.133 ]
  store %struct.rtx_def* %cond135, %struct.rtx_def** %prev_set, align 8
  %cmp136 = icmp ne %struct.rtx_def* %cond135, null
  br i1 %cmp136, label %land.lhs.true.138, label %if.else.155

land.lhs.true.138:                                ; preds = %cond.end.134
  %63 = load %struct.rtx_def*, %struct.rtx_def** %prev_set, align 8
  %fld139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i32 0, i64 0
  %rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtx141, align 8
  %65 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8
  %fld142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i32 0, i64 1
  %rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rtx144, align 8
  %cmp145 = icmp eq %struct.rtx_def* %64, %66
  br i1 %cmp145, label %land.lhs.true.147, label %if.else.155

land.lhs.true.147:                                ; preds = %land.lhs.true.138
  %67 = load %struct.rtx_def*, %struct.rtx_def** %prev_set, align 8
  %fld148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i32 0, i64 1
  %rtx150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtx_def**
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtx150, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %call151 = call i32 @rtx_equal_p(%struct.rtx_def* %68, %struct.rtx_def* %69)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.then.153, label %if.else.155

if.then.153:                                      ; preds = %land.lhs.true.147, %land.lhs.true.88
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call154 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %70)
  br label %if.end.302

if.else.155:                                      ; preds = %land.lhs.true.147, %land.lhs.true.138, %cond.end.134, %land.lhs.true.102, %lor.lhs.false.94, %land.lhs.true.84, %land.lhs.true.78, %cond.end.74, %if.else
  store %struct.fixup_replacement* null, %struct.fixup_replacement** %replacements, align 8
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i32 0, i64 2
  %rtx158 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtx_def**
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rtx158, align 8
  store %struct.rtx_def* %72, %struct.rtx_def** %next_insn, align 8
  %73 = load %struct.rtx_def*, %struct.rtx_def** %call_dest, align 8
  %cmp159 = icmp ne %struct.rtx_def* %73, null
  br i1 %cmp159, label %land.lhs.true.161, label %if.end.191

land.lhs.true.161:                                ; preds = %if.else.155
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %75 = bitcast %struct.rtx_def* %74 to i32*
  %bf.load162 = load i32, i32* %75, align 8
  %bf.clear163 = and i32 %bf.load162, 65535
  %cmp164 = icmp eq i32 %bf.clear163, 32
  br i1 %cmp164, label %land.lhs.true.166, label %if.end.191

land.lhs.true.166:                                ; preds = %land.lhs.true.161
  %76 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %77 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i32 0, i64 3
  %rtx169 = bitcast %union.rtunion_def* %arrayidx168 to %struct.rtx_def**
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtx169, align 8
  %call170 = call i32 @reg_mentioned_p(%struct.rtx_def* %76, %struct.rtx_def* %78)
  %tobool171 = icmp ne i32 %call170, 0
  br i1 %tobool171, label %land.lhs.true.172, label %if.end.191

land.lhs.true.172:                                ; preds = %land.lhs.true.166
  %79 = load %struct.rtx_def*, %struct.rtx_def** %call_dest, align 8
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i32 0, i64 3
  %rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtx175, align 8
  %call176 = call i32 @reg_mentioned_p(%struct.rtx_def* %79, %struct.rtx_def* %81)
  %tobool177 = icmp ne i32 %call176, 0
  br i1 %tobool177, label %if.then.178, label %if.end.191

if.then.178:                                      ; preds = %land.lhs.true.172
  %82 = load %struct.rtx_def*, %struct.rtx_def** %call_dest, align 8
  %83 = bitcast %struct.rtx_def* %82 to i32*
  %bf.load179 = load i32, i32* %83, align 8
  %bf.lshr = lshr i32 %bf.load179, 16
  %bf.clear180 = and i32 %bf.lshr, 255
  %call181 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear180)
  store %struct.rtx_def* %call181, %struct.rtx_def** %temp, align 8
  %84 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %call_dest, align 8
  %call182 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %84, %struct.rtx_def* %85)
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call183 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call182, %struct.rtx_def* %86)
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i32 0, i64 3
  %rtx186 = bitcast %union.rtunion_def* %arrayidx185 to %struct.rtx_def**
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rtx186, align 8
  %89 = load %struct.rtx_def*, %struct.rtx_def** %call_dest, align 8
  %90 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call187 = call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %88, %struct.rtx_def* %89, %struct.rtx_def* %90)
  %91 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1
  %arrayidx189 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld188, i32 0, i64 3
  %rtx190 = bitcast %union.rtunion_def* %arrayidx189 to %struct.rtx_def**
  store %struct.rtx_def* %call187, %struct.rtx_def** %rtx190, align 8
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.178, %land.lhs.true.172, %land.lhs.true.166, %land.lhs.true.161, %if.else.155
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %93 = bitcast %struct.rtx_def* %92 to i32*
  %bf.load192 = load i32, i32* %93, align 8
  %bf.clear193 = and i32 %bf.load192, 65535
  %cmp194 = icmp eq i32 %bf.clear193, 34
  br i1 %cmp194, label %land.lhs.true.196, label %if.else.211

land.lhs.true.196:                                ; preds = %if.end.191
  %94 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i32 0, i64 3
  %rtx199 = bitcast %union.rtunion_def* %arrayidx198 to %struct.rtx_def**
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rtx199, align 8
  %96 = bitcast %struct.rtx_def* %95 to i32*
  %bf.load200 = load i32, i32* %96, align 8
  %bf.clear201 = and i32 %bf.load200, 65535
  %cmp202 = icmp eq i32 %bf.clear201, 47
  br i1 %cmp202, label %if.then.204, label %if.else.211

if.then.204:                                      ; preds = %land.lhs.true.196
  %97 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld205 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1
  %arrayidx206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld205, i32 0, i64 3
  %rtx207 = bitcast %union.rtunion_def* %arrayidx206 to %struct.rtx_def**
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rtx207, align 8
  %fld208 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1
  %arrayidx209 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld208, i32 0, i64 0
  %rtx210 = bitcast %union.rtunion_def* %arrayidx209 to %struct.rtx_def**
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtx210, align 8
  store %struct.rtx_def* %99, %struct.rtx_def** %call_dest, align 8
  br label %if.end.249

if.else.211:                                      ; preds = %land.lhs.true.196, %if.end.191
  %100 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load212 = load i32, i32* %101, align 8
  %bf.clear213 = and i32 %bf.load212, 65535
  %cmp214 = icmp eq i32 %bf.clear213, 34
  br i1 %cmp214, label %land.lhs.true.216, label %if.else.247

land.lhs.true.216:                                ; preds = %if.else.211
  %102 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld217 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx218 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld217, i32 0, i64 3
  %rtx219 = bitcast %union.rtunion_def* %arrayidx218 to %struct.rtx_def**
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rtx219, align 8
  %104 = bitcast %struct.rtx_def* %103 to i32*
  %bf.load220 = load i32, i32* %104, align 8
  %bf.clear221 = and i32 %bf.load220, 65535
  %cmp222 = icmp eq i32 %bf.clear221, 39
  br i1 %cmp222, label %land.lhs.true.224, label %if.else.247

land.lhs.true.224:                                ; preds = %land.lhs.true.216
  %105 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld225 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx226 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld225, i32 0, i64 3
  %rtx227 = bitcast %union.rtunion_def* %arrayidx226 to %struct.rtx_def**
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rtx227, align 8
  %fld228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i32 0, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx229 to %struct.rtvec_def**
  %107 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %107, i32 0, i32 1
  %arrayidx230 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 0
  %108 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx230, align 8
  %109 = bitcast %struct.rtx_def* %108 to i32*
  %bf.load231 = load i32, i32* %109, align 8
  %bf.clear232 = and i32 %bf.load231, 65535
  %cmp233 = icmp eq i32 %bf.clear232, 47
  br i1 %cmp233, label %if.then.235, label %if.else.247

if.then.235:                                      ; preds = %land.lhs.true.224
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld236 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i32 0, i64 3
  %rtx238 = bitcast %union.rtunion_def* %arrayidx237 to %struct.rtx_def**
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rtx238, align 8
  %fld239 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1
  %arrayidx240 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld239, i32 0, i64 0
  %rtvec241 = bitcast %union.rtunion_def* %arrayidx240 to %struct.rtvec_def**
  %112 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec241, align 8
  %elem242 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %112, i32 0, i32 1
  %arrayidx243 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem242, i32 0, i64 0
  %113 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx243, align 8
  %fld244 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1
  %arrayidx245 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld244, i32 0, i64 0
  %rtx246 = bitcast %union.rtunion_def* %arrayidx245 to %struct.rtx_def**
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rtx246, align 8
  store %struct.rtx_def* %114, %struct.rtx_def** %call_dest, align 8
  br label %if.end.248

if.else.247:                                      ; preds = %land.lhs.true.224, %land.lhs.true.216, %if.else.211
  store %struct.rtx_def* null, %struct.rtx_def** %call_dest, align 8
  br label %if.end.248

if.end.248:                                       ; preds = %if.else.247, %if.then.235
  br label %if.end.249

if.end.249:                                       ; preds = %if.end.248, %if.then.204
  %115 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %116 = load i32, i32* %promoted_mode.addr, align 4
  %117 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld250 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1
  %arrayidx251 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld250, i32 0, i64 3
  %rtx252 = bitcast %union.rtunion_def* %arrayidx251 to %struct.rtx_def**
  %118 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %119 = load %struct.rtx_def*, %struct.rtx_def** %no_share.addr, align 8
  call void @fixup_var_refs_1(%struct.rtx_def* %115, i32 %116, %struct.rtx_def** %rtx252, %struct.rtx_def* %118, %struct.fixup_replacement** %replacements, %struct.rtx_def* %119)
  %120 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %121 = load %struct.function*, %struct.function** @cfun, align 8
  %x_last_parm_insn = getelementptr inbounds %struct.function, %struct.function* %121, i32 0, i32 36
  %122 = load %struct.rtx_def*, %struct.rtx_def** %x_last_parm_insn, align 8
  %cmp253 = icmp eq %struct.rtx_def* %120, %122
  br i1 %cmp253, label %if.then.255, label %if.end.260

if.then.255:                                      ; preds = %if.end.249
  %123 = load %struct.rtx_def*, %struct.rtx_def** %next_insn, align 8
  %fld256 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx257 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld256, i32 0, i64 1
  %rtx258 = bitcast %union.rtunion_def* %arrayidx257 to %struct.rtx_def**
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtx258, align 8
  %125 = load %struct.function*, %struct.function** @cfun, align 8
  %x_last_parm_insn259 = getelementptr inbounds %struct.function, %struct.function* %125, i32 0, i32 36
  store %struct.rtx_def* %124, %struct.rtx_def** %x_last_parm_insn259, align 8
  br label %if.end.260

if.end.260:                                       ; preds = %if.then.255, %if.end.249
  br label %while.cond

while.cond:                                       ; preds = %if.end.300, %if.end.260
  %126 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %tobool261 = icmp ne %struct.fixup_replacement* %126, null
  br i1 %tobool261, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %127 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %new = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %127, i32 0, i32 1
  %128 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %129 = bitcast %struct.rtx_def* %128 to i32*
  %bf.load262 = load i32, i32* %129, align 8
  %bf.clear263 = and i32 %bf.load262, 65535
  %cmp264 = icmp eq i32 %bf.clear263, 61
  br i1 %cmp264, label %if.then.266, label %if.end.300

if.then.266:                                      ; preds = %while.body
  %130 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %old = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %130, i32 0, i32 0
  %131 = load %struct.rtx_def*, %struct.rtx_def** %old, align 8
  %132 = bitcast %struct.rtx_def* %131 to i32*
  %bf.load267 = load i32, i32* %132, align 8
  %bf.clear268 = and i32 %bf.load267, 65535
  %cmp269 = icmp eq i32 %bf.clear268, 63
  br i1 %cmp269, label %if.then.271, label %if.else.275

if.then.271:                                      ; preds = %if.then.266
  %133 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %old272 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %133, i32 0, i32 0
  %134 = load %struct.rtx_def*, %struct.rtx_def** %old272, align 8
  %135 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %136 = load i32, i32* %promoted_mode.addr, align 4
  %call273 = call %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %134, %struct.rtx_def* %135, i32 %136, i32 0)
  %137 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %old274 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %137, i32 0, i32 0
  store %struct.rtx_def* %call273, %struct.rtx_def** %old274, align 8
  br label %if.end.279

if.else.275:                                      ; preds = %if.then.266
  %138 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %old276 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %138, i32 0, i32 0
  %139 = load %struct.rtx_def*, %struct.rtx_def** %old276, align 8
  %140 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call277 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %139, %struct.rtx_def* %140)
  %141 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %old278 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %141, i32 0, i32 0
  store %struct.rtx_def* %call277, %struct.rtx_def** %old278, align 8
  br label %if.end.279

if.end.279:                                       ; preds = %if.else.275, %if.then.271
  %142 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def* %142, %struct.rtx_def** %insert_before, align 8
  %143 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %new280 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %143, i32 0, i32 1
  %144 = load %struct.rtx_def*, %struct.rtx_def** %new280, align 8
  %145 = bitcast %struct.rtx_def* %144 to i32*
  %bf.load281 = load i32, i32* %145, align 8
  %bf.lshr282 = lshr i32 %bf.load281, 16
  %bf.clear283 = and i32 %bf.lshr282, 255
  %146 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %old284 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %146, i32 0, i32 0
  %147 = load %struct.rtx_def*, %struct.rtx_def** %old284, align 8
  %148 = bitcast %struct.rtx_def* %147 to i32*
  %bf.load285 = load i32, i32* %148, align 8
  %bf.lshr286 = lshr i32 %bf.load285, 16
  %bf.clear287 = and i32 %bf.lshr286, 255
  %cmp288 = icmp ne i32 %bf.clear283, %bf.clear287
  br i1 %cmp288, label %if.then.290, label %if.else.294

if.then.290:                                      ; preds = %if.end.279
  call void @start_sequence()
  %149 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %new291 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %149, i32 0, i32 1
  %150 = load %struct.rtx_def*, %struct.rtx_def** %new291, align 8
  %151 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %old292 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %151, i32 0, i32 0
  %152 = load %struct.rtx_def*, %struct.rtx_def** %old292, align 8
  %153 = load i32, i32* %unsignedp.addr, align 4
  call void @convert_move(%struct.rtx_def* %150, %struct.rtx_def* %152, i32 %153)
  %call293 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call293, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  br label %if.end.298

if.else.294:                                      ; preds = %if.end.279
  %154 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %new295 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %154, i32 0, i32 1
  %155 = load %struct.rtx_def*, %struct.rtx_def** %new295, align 8
  %156 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %old296 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %156, i32 0, i32 0
  %157 = load %struct.rtx_def*, %struct.rtx_def** %old296, align 8
  %call297 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %155, %struct.rtx_def* %157)
  store %struct.rtx_def* %call297, %struct.rtx_def** %seq, align 8
  br label %if.end.298

if.end.298:                                       ; preds = %if.else.294, %if.then.290
  %158 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %159 = load %struct.rtx_def*, %struct.rtx_def** %insert_before, align 8
  %call299 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %158, %struct.rtx_def* %159)
  br label %if.end.300

if.end.300:                                       ; preds = %if.end.298, %while.body
  %160 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %next301 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %160, i32 0, i32 2
  %161 = load %struct.fixup_replacement*, %struct.fixup_replacement** %next301, align 8
  store %struct.fixup_replacement* %161, %struct.fixup_replacement** %next, align 8
  %162 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacements, align 8
  %163 = bitcast %struct.fixup_replacement* %162 to i8*
  call void @free(i8* %163) #5
  %164 = load %struct.fixup_replacement*, %struct.fixup_replacement** %next, align 8
  store %struct.fixup_replacement* %164, %struct.fixup_replacement** %replacements, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.302

if.end.302:                                       ; preds = %while.end, %if.then.153
  br label %if.end.303

if.end.303:                                       ; preds = %if.end.302, %if.end
  br label %while.cond.304

while.cond.304:                                   ; preds = %if.end.319, %if.end.303
  %165 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %tobool305 = icmp ne %struct.rtx_def* %165, null
  br i1 %tobool305, label %while.body.306, label %while.end.323

while.body.306:                                   ; preds = %while.cond.304
  %166 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %167 = bitcast %struct.rtx_def* %166 to i32*
  %bf.load307 = load i32, i32* %167, align 8
  %bf.clear308 = and i32 %bf.load307, 65535
  %cmp309 = icmp ne i32 %bf.clear308, 4
  br i1 %cmp309, label %if.then.311, label %if.end.319

if.then.311:                                      ; preds = %while.body.306
  %168 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld312 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1
  %arrayidx313 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld312, i32 0, i64 0
  %rtx314 = bitcast %union.rtunion_def* %arrayidx313 to %struct.rtx_def**
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtx314, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %171 = load i32, i32* %promoted_mode.addr, align 4
  %call315 = call %struct.rtx_def* @walk_fixup_memory_subreg(%struct.rtx_def* %169, %struct.rtx_def* %170, i32 %171, i32 1)
  %172 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld316 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %arrayidx317 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld316, i32 0, i64 0
  %rtx318 = bitcast %union.rtunion_def* %arrayidx317 to %struct.rtx_def**
  store %struct.rtx_def* %call315, %struct.rtx_def** %rtx318, align 8
  br label %if.end.319

if.end.319:                                       ; preds = %if.then.311, %while.body.306
  %173 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8
  %fld320 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %173, i32 0, i32 1
  %arrayidx321 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld320, i32 0, i64 1
  %rtx322 = bitcast %union.rtunion_def* %arrayidx321 to %struct.rtx_def**
  %174 = load %struct.rtx_def*, %struct.rtx_def** %rtx322, align 8
  store %struct.rtx_def* %174, %struct.rtx_def** %note, align 8
  br label %while.cond.304

while.end.323:                                    ; preds = %while.cond.304
  ret void
}

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @fixup_var_refs_1(%struct.rtx_def* %var, i32 %promoted_mode, %struct.rtx_def** %loc, %struct.rtx_def* %insn, %struct.fixup_replacement** %replacements, %struct.rtx_def* %no_share) #0 {
entry:
  %var.addr = alloca %struct.rtx_def*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %loc.addr = alloca %struct.rtx_def**, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %replacements.addr = alloca %struct.fixup_replacement**, align 8
  %no_share.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %tem1 = alloca %struct.rtx_def*, align 8
  %replacement = alloca %struct.fixup_replacement*, align 8
  %sub = alloca %struct.rtx_def*, align 8
  %y = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %new_insn = alloca %struct.rtx_def*, align 8
  %wanted_mode = alloca i32, align 4
  %is_mode = alloca i32, align 4
  %pos = alloca i64, align 8
  %new_mode = alloca i32, align 4
  %new_mode203 = alloca i32, align 4
  %offset = alloca i64, align 8
  %old_pos = alloca %struct.rtx_def*, align 8
  %newmem = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %outerdest = alloca %struct.rtx_def*, align 8
  %wanted_mode628 = alloca i32, align 4
  %is_mode629 = alloca i32, align 4
  %pos633 = alloca i64, align 8
  %offset650 = alloca i64, align 8
  %old_pos652 = alloca %struct.rtx_def*, align 8
  %newmem656 = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %pat1054 = alloca %struct.rtx_def*, align 8
  %last1055 = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %fixeddest = alloca %struct.rtx_def*, align 8
  %temp_mode = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %var, %struct.rtx_def** %var.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store %struct.rtx_def** %loc, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.fixup_replacement** %replacements, %struct.fixup_replacement*** %replacements.addr, align 8
  store %struct.rtx_def* %no_share, %struct.rtx_def** %no_share.addr, align 8
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %4 = load i32, i32* %code, align 4
  switch i32 %4, label %sw.default [
    i32 70, label %sw.bb
    i32 66, label %sw.bb.35
    i32 61, label %sw.bb.86
    i32 69, label %sw.bb.86
    i32 59, label %sw.bb.86
    i32 54, label %sw.bb.86
    i32 58, label %sw.bb.86
    i32 68, label %sw.bb.86
    i32 67, label %sw.bb.86
    i32 55, label %sw.bb.86
    i32 56, label %sw.bb.86
    i32 132, label %sw.bb.87
    i32 133, label %sw.bb.87
    i32 63, label %sw.bb.272
    i32 47, label %sw.bb.352
  ]

sw.bb:                                            ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %6, %7
  br i1 %cmp, label %if.then, label %if.end.34

if.then:                                          ; preds = %sw.bb
  %8 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %9)
  store %struct.rtx_def* %call, %struct.rtx_def** %sub, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %call4 = call i32 @validate_change(%struct.rtx_def* %10, %struct.rtx_def** %11, %struct.rtx_def* %12, i32 0)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.end.33, label %if.then.5

if.then.5:                                        ; preds = %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load6 = load i32, i32* %14, align 8
  %bf.lshr = lshr i32 %bf.load6, 16
  %bf.clear7 = and i32 %bf.lshr, 255
  %call8 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear7)
  store %struct.rtx_def* %call8, %struct.rtx_def** %y, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call9 = call i32 @validate_replace_rtx(%struct.rtx_def* %16, %struct.rtx_def* %17, %struct.rtx_def* %18)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then.11

if.then.11:                                       ; preds = %if.then.5
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 1964, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.fixup_var_refs_1, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %if.then.5
  call void @start_sequence()
  %19 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %19, %struct.rtx_def* %20)
  %call13 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12)
  store %struct.rtx_def* %call13, %struct.rtx_def** %new_insn, align 8
  %call14 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call14, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8
  %fld15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i32 0, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %22 = load i32, i32* %rtint, align 4
  %cmp17 = icmp sge i32 %22, 0
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 4
  %rtint20 = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %24 = load i32, i32* %rtint20, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8
  %call21 = call i32 @recog_memoized_1(%struct.rtx_def* %25)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %24, %cond.true ], [ %call21, %cond.false ]
  %cmp22 = icmp slt i32 %cond, 0
  br i1 %cmp22, label %if.then.23, label %if.end.31

if.then.23:                                       ; preds = %cond.end
  call void @start_sequence()
  %26 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %call24 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %26, %struct.rtx_def* %27)
  store %struct.rtx_def* %call24, %struct.rtx_def** %sub, align 8
  %28 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %cmp25 = icmp ne %struct.rtx_def* %28, %29
  br i1 %cmp25, label %if.then.26, label %if.end.29

if.then.26:                                       ; preds = %if.then.23
  %30 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %sub, align 8
  %call27 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %30, %struct.rtx_def* %31)
  %call28 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27)
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.26, %if.then.23
  %call30 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call30, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.29, %cond.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call32 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %32, %struct.rtx_def* %33)
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.31, %if.then
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %sw.bb
  br label %for.end.1225

sw.bb.35:                                         ; preds = %entry
  %34 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %cmp36 = icmp eq %struct.rtx_def* %34, %35
  br i1 %cmp36, label %if.then.37, label %if.end.71

if.then.37:                                       ; preds = %sw.bb.35
  %36 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %37 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %call38 = call %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %36, %struct.rtx_def* %37)
  store %struct.fixup_replacement* %call38, %struct.fixup_replacement** %replacement, align 8
  %38 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %38, i32 0, i32 1
  %39 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  %tobool39 = icmp ne %struct.rtx_def* %39, null
  br i1 %tobool39, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %if.then.37
  %40 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new41 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %40, i32 0, i32 1
  %41 = load %struct.rtx_def*, %struct.rtx_def** %new41, align 8
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %41, %struct.rtx_def** %42, align 8
  br label %for.end.1225

if.end.42:                                        ; preds = %if.then.37
  %43 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call43 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %43, %struct.rtx_def* %44)
  store %struct.rtx_def* %call43, %struct.rtx_def** %x, align 8
  %45 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new44 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %45, i32 0, i32 1
  store %struct.rtx_def* %call43, %struct.rtx_def** %new44, align 8
  %46 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %call43, %struct.rtx_def** %46, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i32 0, i64 4
  %rtint47 = bitcast %union.rtunion_def* %arrayidx46 to i32*
  store i32 -1, i32* %rtint47, align 4
  %48 = load i32, i32* @flag_force_mem, align 4
  %tobool48 = icmp ne i32 %48, 0
  br i1 %tobool48, label %if.end.68, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.42
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %50 = bitcast %struct.rtx_def* %49 to i32*
  %bf.load49 = load i32, i32* %50, align 8
  %bf.lshr50 = lshr i32 %bf.load49, 16
  %bf.clear51 = and i32 %bf.lshr50, 255
  %51 = load i32, i32* %promoted_mode.addr, align 4
  %cmp52 = icmp eq i32 %bf.clear51, %51
  br i1 %cmp52, label %land.lhs.true.53, label %if.end.68

land.lhs.true.53:                                 ; preds = %land.lhs.true
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i32 0, i64 4
  %rtint56 = bitcast %union.rtunion_def* %arrayidx55 to i32*
  %53 = load i32, i32* %rtint56, align 4
  %cmp57 = icmp sge i32 %53, 0
  br i1 %cmp57, label %cond.true.58, label %cond.false.62

cond.true.58:                                     ; preds = %land.lhs.true.53
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 4
  %rtint61 = bitcast %union.rtunion_def* %arrayidx60 to i32*
  %55 = load i32, i32* %rtint61, align 4
  br label %cond.end.64

cond.false.62:                                    ; preds = %land.lhs.true.53
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call63 = call i32 @recog_memoized_1(%struct.rtx_def* %56)
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.62, %cond.true.58
  %cond65 = phi i32 [ %55, %cond.true.58 ], [ %call63, %cond.false.62 ]
  %cmp66 = icmp sge i32 %cond65, 0
  br i1 %cmp66, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %cond.end.64
  br label %for.end.1225

if.end.68:                                        ; preds = %cond.end.64, %land.lhs.true, %if.end.42
  %57 = load i32, i32* %promoted_mode.addr, align 4
  %call69 = call %struct.rtx_def* @gen_reg_rtx(i32 %57)
  %58 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new70 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %58, i32 0, i32 1
  store %struct.rtx_def* %call69, %struct.rtx_def** %new70, align 8
  %59 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %call69, %struct.rtx_def** %59, align 8
  br label %for.end.1225

if.end.71:                                        ; preds = %sw.bb.35
  %60 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %call72 = call i32 @reg_mentioned_p(%struct.rtx_def* %60, %struct.rtx_def* %61)
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.then.74, label %if.end.85

if.then.74:                                       ; preds = %if.end.71
  %62 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %63 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %call75 = call %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %62, %struct.rtx_def* %63)
  store %struct.fixup_replacement* %call75, %struct.fixup_replacement** %replacement, align 8
  %64 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new76 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %64, i32 0, i32 1
  %65 = load %struct.rtx_def*, %struct.rtx_def** %new76, align 8
  %cmp77 = icmp eq %struct.rtx_def* %65, null
  br i1 %cmp77, label %if.then.78, label %if.end.81

if.then.78:                                       ; preds = %if.then.74
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %no_share.addr, align 8
  %call79 = call %struct.rtx_def* @copy_most_rtx(%struct.rtx_def* %66, %struct.rtx_def* %67)
  %68 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new80 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %68, i32 0, i32 1
  store %struct.rtx_def* %call79, %struct.rtx_def** %new80, align 8
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.78, %if.then.74
  %69 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new82 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %69, i32 0, i32 1
  %70 = load %struct.rtx_def*, %struct.rtx_def** %new82, align 8
  store %struct.rtx_def* %70, %struct.rtx_def** %x, align 8
  %71 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %70, %struct.rtx_def** %71, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %73 = bitcast %struct.rtx_def* %72 to i32*
  %bf.load83 = load i32, i32* %73, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  store i32 %bf.clear84, i32* %code, align 4
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.81, %if.end.71
  br label %sw.epilog

sw.bb.86:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %for.end.1225

sw.bb.87:                                         ; preds = %entry, %entry
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rtx90, align 8
  %76 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp91 = icmp eq %struct.rtx_def* %75, %76
  br i1 %cmp91, label %if.then.106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.87
  %77 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i32 0, i64 0
  %rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rtx94, align 8
  %79 = bitcast %struct.rtx_def* %78 to i32*
  %bf.load95 = load i32, i32* %79, align 8
  %bf.clear96 = and i32 %bf.load95, 65535
  %cmp97 = icmp eq i32 %bf.clear96, 63
  br i1 %cmp97, label %land.lhs.true.98, label %if.end.271

land.lhs.true.98:                                 ; preds = %lor.lhs.false
  %80 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i32 0, i64 0
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtx101, align 8
  %fld102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i32 0, i64 0
  %rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rtx104, align 8
  %83 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp105 = icmp eq %struct.rtx_def* %82, %83
  br i1 %cmp105, label %if.then.106, label %if.end.271

if.then.106:                                      ; preds = %land.lhs.true.98, %sw.bb.87
  %84 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i32 0, i64 0
  %rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rtx109, align 8
  store %struct.rtx_def* %85, %struct.rtx_def** %tem, align 8
  %86 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %87 = bitcast %struct.rtx_def* %86 to i32*
  %bf.load110 = load i32, i32* %87, align 8
  %bf.clear111 = and i32 %bf.load110, 65535
  %cmp112 = icmp eq i32 %bf.clear111, 63
  br i1 %cmp112, label %if.then.113, label %if.else.147

if.then.113:                                      ; preds = %if.then.106
  %88 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %89 = bitcast %struct.rtx_def* %88 to i32*
  %bf.load114 = load i32, i32* %89, align 8
  %bf.lshr115 = lshr i32 %bf.load114, 16
  %bf.clear116 = and i32 %bf.lshr115, 255
  %idxprom = sext i32 %bf.clear116 to i64
  %arrayidx117 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom
  %90 = load i16, i16* %arrayidx117, align 2
  %conv = zext i16 %90 to i32
  %91 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %92 = bitcast %struct.rtx_def* %91 to i32*
  %bf.load118 = load i32, i32* %92, align 8
  %bf.lshr119 = lshr i32 %bf.load118, 16
  %bf.clear120 = and i32 %bf.lshr119, 255
  %idxprom121 = sext i32 %bf.clear120 to i64
  %arrayidx122 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom121
  %93 = load i16, i16* %arrayidx122, align 2
  %conv123 = zext i16 %93 to i32
  %cmp124 = icmp sgt i32 %conv, %conv123
  br i1 %cmp124, label %if.then.126, label %if.else

if.then.126:                                      ; preds = %if.then.113
  %94 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %95 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %call127 = call %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %94, %struct.rtx_def* %95)
  store %struct.fixup_replacement* %call127, %struct.fixup_replacement** %replacement, align 8
  %96 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new128 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %96, i32 0, i32 1
  %97 = load %struct.rtx_def*, %struct.rtx_def** %new128, align 8
  %cmp129 = icmp eq %struct.rtx_def* %97, null
  br i1 %cmp129, label %if.then.131, label %if.end.137

if.then.131:                                      ; preds = %if.then.126
  %98 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %99 = bitcast %struct.rtx_def* %98 to i32*
  %bf.load132 = load i32, i32* %99, align 8
  %bf.lshr133 = lshr i32 %bf.load132, 16
  %bf.clear134 = and i32 %bf.lshr133, 255
  %call135 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear134)
  %100 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new136 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %100, i32 0, i32 1
  store %struct.rtx_def* %call135, %struct.rtx_def** %new136, align 8
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.131, %if.then.126
  %101 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new138 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %101, i32 0, i32 1
  %102 = load %struct.rtx_def*, %struct.rtx_def** %new138, align 8
  %103 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i32 0, i64 0
  %rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**
  store %struct.rtx_def* %102, %struct.rtx_def** %rtx141, align 8
  %104 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %105 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i32 0, i64 0
  %rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**
  store %struct.rtx_def* %104, %struct.rtx_def** %rtx144, align 8
  br label %for.end.1225

if.else:                                          ; preds = %if.then.113
  %106 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %107 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %108 = load i32, i32* %promoted_mode.addr, align 4
  %call145 = call %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %106, %struct.rtx_def* %107, i32 %108, i32 0)
  store %struct.rtx_def* %call145, %struct.rtx_def** %tem, align 8
  br label %if.end.146

if.end.146:                                       ; preds = %if.else
  br label %if.end.149

if.else.147:                                      ; preds = %if.then.106
  %109 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call148 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %109, %struct.rtx_def* %110)
  store %struct.rtx_def* %call148, %struct.rtx_def** %tem, align 8
  br label %if.end.149

if.end.149:                                       ; preds = %if.else.147, %if.end.146
  %111 = load i32, i32* @flag_force_mem, align 4
  %tobool150 = icmp ne i32 %111, 0
  br i1 %tobool150, label %if.end.261, label %land.lhs.true.151

land.lhs.true.151:                                ; preds = %if.end.149
  %112 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i32 0, i64 1
  %rtx154 = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx154, align 8
  %114 = bitcast %struct.rtx_def* %113 to i32*
  %bf.load155 = load i32, i32* %114, align 8
  %bf.clear156 = and i32 %bf.load155, 65535
  %cmp157 = icmp eq i32 %bf.clear156, 54
  br i1 %cmp157, label %land.lhs.true.159, label %if.end.261

land.lhs.true.159:                                ; preds = %land.lhs.true.151
  %115 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i32 0, i64 2
  %rtx162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.rtx_def**
  %116 = load %struct.rtx_def*, %struct.rtx_def** %rtx162, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load163 = load i32, i32* %117, align 8
  %bf.clear164 = and i32 %bf.load163, 65535
  %cmp165 = icmp eq i32 %bf.clear164, 54
  br i1 %cmp165, label %land.lhs.true.167, label %if.end.261

land.lhs.true.167:                                ; preds = %land.lhs.true.159
  %118 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld168 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i32 0, i64 0
  %rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rtx170, align 8
  %call171 = call i32 @mode_dependent_address_p(%struct.rtx_def* %119)
  %tobool172 = icmp ne i32 %call171, 0
  br i1 %tobool172, label %if.end.261, label %land.lhs.true.173

land.lhs.true.173:                                ; preds = %land.lhs.true.167
  %120 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %121 = bitcast %struct.rtx_def* %120 to i32*
  %bf.load174 = load i32, i32* %121, align 8
  %bf.lshr175 = lshr i32 %bf.load174, 27
  %bf.clear176 = and i32 %bf.lshr175, 1
  %tobool177 = icmp ne i32 %bf.clear176, 0
  br i1 %tobool177, label %if.end.261, label %if.then.178

if.then.178:                                      ; preds = %land.lhs.true.173
  store i32 0, i32* %wanted_mode, align 4
  %122 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load179 = load i32, i32* %123, align 8
  %bf.lshr180 = lshr i32 %bf.load179, 16
  %bf.clear181 = and i32 %bf.lshr180, 255
  store i32 %bf.clear181, i32* %is_mode, align 4
  %124 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i32 0, i64 2
  %rtx184 = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtx_def**
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rtx184, align 8
  %fld185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx186 to i64*
  %126 = load i64, i64* %rtwint, align 8
  store i64 %126, i64* %pos, align 8
  %127 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %128 = bitcast %struct.rtx_def* %127 to i32*
  %bf.load187 = load i32, i32* %128, align 8
  %bf.clear188 = and i32 %bf.load187, 65535
  %cmp189 = icmp eq i32 %bf.clear188, 133
  br i1 %cmp189, label %if.then.191, label %if.else.197

if.then.191:                                      ; preds = %if.then.178
  %call192 = call i32 @mode_for_extraction(i32 2, i32 1)
  store i32 %call192, i32* %new_mode, align 4
  %129 = load i32, i32* %new_mode, align 4
  %cmp193 = icmp ne i32 %129, 59
  br i1 %cmp193, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %if.then.191
  %130 = load i32, i32* %new_mode, align 4
  store i32 %130, i32* %wanted_mode, align 4
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.195, %if.then.191
  br label %if.end.210

if.else.197:                                      ; preds = %if.then.178
  %131 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %132 = bitcast %struct.rtx_def* %131 to i32*
  %bf.load198 = load i32, i32* %132, align 8
  %bf.clear199 = and i32 %bf.load198, 65535
  %cmp200 = icmp eq i32 %bf.clear199, 132
  br i1 %cmp200, label %if.then.202, label %if.end.209

if.then.202:                                      ; preds = %if.else.197
  %call204 = call i32 @mode_for_extraction(i32 1, i32 1)
  store i32 %call204, i32* %new_mode203, align 4
  %133 = load i32, i32* %new_mode203, align 4
  %cmp205 = icmp ne i32 %133, 59
  br i1 %cmp205, label %if.then.207, label %if.end.208

if.then.207:                                      ; preds = %if.then.202
  %134 = load i32, i32* %new_mode203, align 4
  store i32 %134, i32* %wanted_mode, align 4
  br label %if.end.208

if.end.208:                                       ; preds = %if.then.207, %if.then.202
  br label %if.end.209

if.end.209:                                       ; preds = %if.end.208, %if.else.197
  br label %if.end.210

if.end.210:                                       ; preds = %if.end.209, %if.end.196
  %135 = load i32, i32* %wanted_mode, align 4
  %cmp211 = icmp ne i32 %135, 0
  br i1 %cmp211, label %land.lhs.true.213, label %if.end.260

land.lhs.true.213:                                ; preds = %if.end.210
  %136 = load i32, i32* %wanted_mode, align 4
  %idxprom214 = sext i32 %136 to i64
  %arrayidx215 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom214
  %137 = load i8, i8* %arrayidx215, align 1
  %conv216 = zext i8 %137 to i32
  %138 = load i32, i32* %is_mode, align 4
  %idxprom217 = sext i32 %138 to i64
  %arrayidx218 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom217
  %139 = load i8, i8* %arrayidx218, align 1
  %conv219 = zext i8 %139 to i32
  %cmp220 = icmp slt i32 %conv216, %conv219
  br i1 %cmp220, label %if.then.222, label %if.end.260

if.then.222:                                      ; preds = %land.lhs.true.213
  %140 = load i64, i64* %pos, align 8
  %div = sdiv i64 %140, 8
  store i64 %div, i64* %offset, align 8
  %141 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1
  %arrayidx224 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld223, i32 0, i64 2
  %rtx225 = bitcast %union.rtunion_def* %arrayidx224 to %struct.rtx_def**
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rtx225, align 8
  store %struct.rtx_def* %142, %struct.rtx_def** %old_pos, align 8
  %143 = load i32, i32* %wanted_mode, align 4
  %idxprom226 = sext i32 %143 to i64
  %arrayidx227 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom226
  %144 = load i16, i16* %arrayidx227, align 2
  %conv228 = zext i16 %144 to i64
  %145 = load i64, i64* %pos, align 8
  %rem = srem i64 %145, %conv228
  store i64 %rem, i64* %pos, align 8
  %146 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %147 = load i32, i32* %wanted_mode, align 4
  %148 = load i64, i64* %offset, align 8
  %call229 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %146, i32 %147, i64 %148, i32 0, i32 1)
  store %struct.rtx_def* %call229, %struct.rtx_def** %newmem, align 8
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1
  %arrayidx231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld230, i32 0, i64 4
  %rtint232 = bitcast %union.rtunion_def* %arrayidx231 to i32*
  store i32 -1, i32* %rtint232, align 4
  %150 = load %struct.rtx_def*, %struct.rtx_def** %newmem, align 8
  %151 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld233 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1
  %arrayidx234 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld233, i32 0, i64 0
  %rtx235 = bitcast %union.rtunion_def* %arrayidx234 to %struct.rtx_def**
  store %struct.rtx_def* %150, %struct.rtx_def** %rtx235, align 8
  %152 = load i64, i64* %pos, align 8
  %call236 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %152)
  %153 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %153, i32 0, i32 1
  %arrayidx238 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld237, i32 0, i64 2
  %rtx239 = bitcast %union.rtunion_def* %arrayidx238 to %struct.rtx_def**
  store %struct.rtx_def* %call236, %struct.rtx_def** %rtx239, align 8
  %154 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1
  %arrayidx241 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld240, i32 0, i64 4
  %rtint242 = bitcast %union.rtunion_def* %arrayidx241 to i32*
  %155 = load i32, i32* %rtint242, align 4
  %cmp243 = icmp sge i32 %155, 0
  br i1 %cmp243, label %cond.true.245, label %cond.false.249

cond.true.245:                                    ; preds = %if.then.222
  %156 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld246 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %156, i32 0, i32 1
  %arrayidx247 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld246, i32 0, i64 4
  %rtint248 = bitcast %union.rtunion_def* %arrayidx247 to i32*
  %157 = load i32, i32* %rtint248, align 4
  br label %cond.end.251

cond.false.249:                                   ; preds = %if.then.222
  %158 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call250 = call i32 @recog_memoized_1(%struct.rtx_def* %158)
  br label %cond.end.251

cond.end.251:                                     ; preds = %cond.false.249, %cond.true.245
  %cond252 = phi i32 [ %157, %cond.true.245 ], [ %call250, %cond.false.249 ]
  %cmp253 = icmp sge i32 %cond252, 0
  br i1 %cmp253, label %if.then.255, label %if.end.256

if.then.255:                                      ; preds = %cond.end.251
  br label %for.end.1225

if.end.256:                                       ; preds = %cond.end.251
  %159 = load %struct.rtx_def*, %struct.rtx_def** %old_pos, align 8
  %160 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1
  %arrayidx258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld257, i32 0, i64 2
  %rtx259 = bitcast %union.rtunion_def* %arrayidx258 to %struct.rtx_def**
  store %struct.rtx_def* %159, %struct.rtx_def** %rtx259, align 8
  br label %if.end.260

if.end.260:                                       ; preds = %if.end.256, %land.lhs.true.213, %if.end.210
  br label %if.end.261

if.end.261:                                       ; preds = %if.end.260, %land.lhs.true.173, %land.lhs.true.167, %land.lhs.true.159, %land.lhs.true.151, %if.end.149
  %161 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %162 = bitcast %struct.rtx_def* %161 to i32*
  %bf.load262 = load i32, i32* %162, align 8
  %bf.lshr263 = lshr i32 %bf.load262, 16
  %bf.clear264 = and i32 %bf.lshr263, 255
  %call265 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear264)
  store %struct.rtx_def* %call265, %struct.rtx_def** %tem1, align 8
  %163 = load %struct.rtx_def*, %struct.rtx_def** %tem1, align 8
  %164 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %call266 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %163, %struct.rtx_def* %164)
  %165 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call267 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call266, %struct.rtx_def* %165)
  %166 = load %struct.rtx_def*, %struct.rtx_def** %tem1, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld268 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1
  %arrayidx269 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld268, i32 0, i64 0
  %rtx270 = bitcast %union.rtunion_def* %arrayidx269 to %struct.rtx_def**
  store %struct.rtx_def* %166, %struct.rtx_def** %rtx270, align 8
  br label %for.end.1225

if.end.271:                                       ; preds = %land.lhs.true.98, %lor.lhs.false
  br label %sw.epilog

sw.bb.272:                                        ; preds = %entry
  %168 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld273 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1
  %arrayidx274 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld273, i32 0, i64 0
  %rtx275 = bitcast %union.rtunion_def* %arrayidx274 to %struct.rtx_def**
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtx275, align 8
  %170 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp276 = icmp eq %struct.rtx_def* %169, %170
  br i1 %cmp276, label %if.then.278, label %if.end.351

if.then.278:                                      ; preds = %sw.bb.272
  %171 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %172 = bitcast %struct.rtx_def* %171 to i32*
  %bf.load279 = load i32, i32* %172, align 8
  %bf.lshr280 = lshr i32 %bf.load279, 28
  %bf.clear281 = and i32 %bf.lshr280, 1
  %tobool282 = icmp ne i32 %bf.clear281, 0
  br i1 %tobool282, label %if.then.283, label %if.end.287

if.then.283:                                      ; preds = %if.then.278
  %173 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %174 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %173, %struct.rtx_def** %174, align 8
  %175 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %176 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %177 = bitcast %struct.rtx_def* %176 to i32*
  %bf.load284 = load i32, i32* %177, align 8
  %bf.lshr285 = lshr i32 %bf.load284, 16
  %bf.clear286 = and i32 %bf.lshr285, 255
  %178 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  %179 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %180 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %181 = load %struct.rtx_def*, %struct.rtx_def** %no_share.addr, align 8
  call void @fixup_var_refs_1(%struct.rtx_def* %175, i32 %bf.clear286, %struct.rtx_def** %178, %struct.rtx_def* %179, %struct.fixup_replacement** %180, %struct.rtx_def* %181)
  br label %for.end.1225

if.end.287:                                       ; preds = %if.then.278
  %182 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %183 = bitcast %struct.rtx_def* %182 to i32*
  %bf.load288 = load i32, i32* %183, align 8
  %bf.lshr289 = lshr i32 %bf.load288, 16
  %bf.clear290 = and i32 %bf.lshr289, 255
  %idxprom291 = sext i32 %bf.clear290 to i64
  %arrayidx292 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom291
  %184 = load i8, i8* %arrayidx292, align 1
  %conv293 = zext i8 %184 to i32
  %185 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %186 = bitcast %struct.rtx_def* %185 to i32*
  %bf.load294 = load i32, i32* %186, align 8
  %bf.lshr295 = lshr i32 %bf.load294, 16
  %bf.clear296 = and i32 %bf.lshr295, 255
  %idxprom297 = sext i32 %bf.clear296 to i64
  %arrayidx298 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom297
  %187 = load i8, i8* %arrayidx298, align 1
  %conv299 = zext i8 %187 to i32
  %cmp300 = icmp sgt i32 %conv293, %conv299
  br i1 %cmp300, label %if.then.302, label %if.end.315

if.then.302:                                      ; preds = %if.end.287
  %188 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %189 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %call303 = call %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %188, %struct.rtx_def* %189)
  store %struct.fixup_replacement* %call303, %struct.fixup_replacement** %replacement, align 8
  %190 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new304 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %190, i32 0, i32 1
  %191 = load %struct.rtx_def*, %struct.rtx_def** %new304, align 8
  %cmp305 = icmp eq %struct.rtx_def* %191, null
  br i1 %cmp305, label %if.then.307, label %if.end.310

if.then.307:                                      ; preds = %if.then.302
  %192 = load i32, i32* %promoted_mode.addr, align 4
  %call308 = call %struct.rtx_def* @gen_reg_rtx(i32 %192)
  %193 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new309 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %193, i32 0, i32 1
  store %struct.rtx_def* %call308, %struct.rtx_def** %new309, align 8
  br label %if.end.310

if.end.310:                                       ; preds = %if.then.307, %if.then.302
  %194 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new311 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %194, i32 0, i32 1
  %195 = load %struct.rtx_def*, %struct.rtx_def** %new311, align 8
  %196 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld312 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %196, i32 0, i32 1
  %arrayidx313 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld312, i32 0, i64 0
  %rtx314 = bitcast %union.rtunion_def* %arrayidx313 to %struct.rtx_def**
  store %struct.rtx_def* %195, %struct.rtx_def** %rtx314, align 8
  br label %for.end.1225

if.end.315:                                       ; preds = %if.end.287
  %197 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %198 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %call316 = call %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %197, %struct.rtx_def* %198)
  store %struct.fixup_replacement* %call316, %struct.fixup_replacement** %replacement, align 8
  %199 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new317 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %199, i32 0, i32 1
  %200 = load %struct.rtx_def*, %struct.rtx_def** %new317, align 8
  %tobool318 = icmp ne %struct.rtx_def* %200, null
  br i1 %tobool318, label %if.then.319, label %if.end.321

if.then.319:                                      ; preds = %if.end.315
  %201 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new320 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %201, i32 0, i32 1
  %202 = load %struct.rtx_def*, %struct.rtx_def** %new320, align 8
  %203 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %202, %struct.rtx_def** %203, align 8
  br label %for.end.1225

if.end.321:                                       ; preds = %if.end.315
  %204 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %205 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %206 = load i32, i32* %promoted_mode.addr, align 4
  %call322 = call %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %204, %struct.rtx_def* %205, i32 %206, i32 0)
  %207 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %call322, %struct.rtx_def** %207, align 8
  %208 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new323 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %208, i32 0, i32 1
  store %struct.rtx_def* %call322, %struct.rtx_def** %new323, align 8
  %209 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld324 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %209, i32 0, i32 1
  %arrayidx325 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld324, i32 0, i64 4
  %rtint326 = bitcast %union.rtunion_def* %arrayidx325 to i32*
  store i32 -1, i32* %rtint326, align 4
  %210 = load i32, i32* @flag_force_mem, align 4
  %tobool327 = icmp ne i32 %210, 0
  br i1 %tobool327, label %if.end.345, label %land.lhs.true.328

land.lhs.true.328:                                ; preds = %if.end.321
  %211 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld329 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %211, i32 0, i32 1
  %arrayidx330 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld329, i32 0, i64 4
  %rtint331 = bitcast %union.rtunion_def* %arrayidx330 to i32*
  %212 = load i32, i32* %rtint331, align 4
  %cmp332 = icmp sge i32 %212, 0
  br i1 %cmp332, label %cond.true.334, label %cond.false.338

cond.true.334:                                    ; preds = %land.lhs.true.328
  %213 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld335 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %213, i32 0, i32 1
  %arrayidx336 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld335, i32 0, i64 4
  %rtint337 = bitcast %union.rtunion_def* %arrayidx336 to i32*
  %214 = load i32, i32* %rtint337, align 4
  br label %cond.end.340

cond.false.338:                                   ; preds = %land.lhs.true.328
  %215 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call339 = call i32 @recog_memoized_1(%struct.rtx_def* %215)
  br label %cond.end.340

cond.end.340:                                     ; preds = %cond.false.338, %cond.true.334
  %cond341 = phi i32 [ %214, %cond.true.334 ], [ %call339, %cond.false.338 ]
  %cmp342 = icmp sge i32 %cond341, 0
  br i1 %cmp342, label %if.then.344, label %if.end.345

if.then.344:                                      ; preds = %cond.end.340
  br label %for.end.1225

if.end.345:                                       ; preds = %cond.end.340, %if.end.321
  %216 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %217 = bitcast %struct.rtx_def* %216 to i32*
  %bf.load346 = load i32, i32* %217, align 8
  %bf.lshr347 = lshr i32 %bf.load346, 16
  %bf.clear348 = and i32 %bf.lshr347, 255
  %call349 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear348)
  %218 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new350 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %218, i32 0, i32 1
  store %struct.rtx_def* %call349, %struct.rtx_def** %new350, align 8
  %219 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8
  store %struct.rtx_def* %call349, %struct.rtx_def** %219, align 8
  br label %for.end.1225

if.end.351:                                       ; preds = %sw.bb.272
  br label %sw.epilog

sw.bb.352:                                        ; preds = %entry
  %220 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld353 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %220, i32 0, i32 1
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld353, i32 0, i64 0
  %rtx355 = bitcast %union.rtunion_def* %arrayidx354 to %struct.rtx_def**
  %221 = load %struct.rtx_def*, %struct.rtx_def** %rtx355, align 8
  %222 = bitcast %struct.rtx_def* %221 to i32*
  %bf.load356 = load i32, i32* %222, align 8
  %bf.clear357 = and i32 %bf.load356, 65535
  %cmp358 = icmp eq i32 %bf.clear357, 132
  br i1 %cmp358, label %if.then.368, label %lor.lhs.false.360

lor.lhs.false.360:                                ; preds = %sw.bb.352
  %223 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld361 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %223, i32 0, i32 1
  %arrayidx362 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld361, i32 0, i64 0
  %rtx363 = bitcast %union.rtunion_def* %arrayidx362 to %struct.rtx_def**
  %224 = load %struct.rtx_def*, %struct.rtx_def** %rtx363, align 8
  %225 = bitcast %struct.rtx_def* %224 to i32*
  %bf.load364 = load i32, i32* %225, align 8
  %bf.clear365 = and i32 %bf.load364, 65535
  %cmp366 = icmp eq i32 %bf.clear365, 133
  br i1 %cmp366, label %if.then.368, label %if.end.369

if.then.368:                                      ; preds = %lor.lhs.false.360, %sw.bb.352
  %226 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %227 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @optimize_bit_field(%struct.rtx_def* %226, %struct.rtx_def* %227, %struct.rtx_def** null)
  br label %if.end.369

if.end.369:                                       ; preds = %if.then.368, %lor.lhs.false.360
  %228 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld370 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %228, i32 0, i32 1
  %arrayidx371 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld370, i32 0, i64 1
  %rtx372 = bitcast %union.rtunion_def* %arrayidx371 to %struct.rtx_def**
  %229 = load %struct.rtx_def*, %struct.rtx_def** %rtx372, align 8
  %230 = bitcast %struct.rtx_def* %229 to i32*
  %bf.load373 = load i32, i32* %230, align 8
  %bf.clear374 = and i32 %bf.load373, 65535
  %cmp375 = icmp eq i32 %bf.clear374, 132
  br i1 %cmp375, label %if.then.385, label %lor.lhs.false.377

lor.lhs.false.377:                                ; preds = %if.end.369
  %231 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld378 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %231, i32 0, i32 1
  %arrayidx379 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld378, i32 0, i64 1
  %rtx380 = bitcast %union.rtunion_def* %arrayidx379 to %struct.rtx_def**
  %232 = load %struct.rtx_def*, %struct.rtx_def** %rtx380, align 8
  %233 = bitcast %struct.rtx_def* %232 to i32*
  %bf.load381 = load i32, i32* %233, align 8
  %bf.clear382 = and i32 %bf.load381, 65535
  %cmp383 = icmp eq i32 %bf.clear382, 133
  br i1 %cmp383, label %if.then.385, label %if.end.386

if.then.385:                                      ; preds = %lor.lhs.false.377, %if.end.369
  %234 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %235 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  call void @optimize_bit_field(%struct.rtx_def* %234, %struct.rtx_def* %235, %struct.rtx_def** null)
  br label %if.end.386

if.end.386:                                       ; preds = %if.then.385, %lor.lhs.false.377
  %236 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i32 0, i64 0
  %rtx389 = bitcast %union.rtunion_def* %arrayidx388 to %struct.rtx_def**
  %237 = load %struct.rtx_def*, %struct.rtx_def** %rtx389, align 8
  %238 = bitcast %struct.rtx_def* %237 to i32*
  %bf.load390 = load i32, i32* %238, align 8
  %bf.clear391 = and i32 %bf.load390, 65535
  %cmp392 = icmp eq i32 %bf.clear391, 133
  br i1 %cmp392, label %land.lhs.true.394, label %if.end.463

land.lhs.true.394:                                ; preds = %if.end.386
  %239 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld395 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %239, i32 0, i32 1
  %arrayidx396 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld395, i32 0, i64 0
  %rtx397 = bitcast %union.rtunion_def* %arrayidx396 to %struct.rtx_def**
  %240 = load %struct.rtx_def*, %struct.rtx_def** %rtx397, align 8
  %fld398 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %240, i32 0, i32 1
  %arrayidx399 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld398, i32 0, i64 0
  %rtx400 = bitcast %union.rtunion_def* %arrayidx399 to %struct.rtx_def**
  %241 = load %struct.rtx_def*, %struct.rtx_def** %rtx400, align 8
  %242 = bitcast %struct.rtx_def* %241 to i32*
  %bf.load401 = load i32, i32* %242, align 8
  %bf.clear402 = and i32 %bf.load401, 65535
  %cmp403 = icmp eq i32 %bf.clear402, 63
  br i1 %cmp403, label %land.lhs.true.405, label %if.end.463

land.lhs.true.405:                                ; preds = %land.lhs.true.394
  %243 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld406 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %243, i32 0, i32 1
  %arrayidx407 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld406, i32 0, i64 0
  %rtx408 = bitcast %union.rtunion_def* %arrayidx407 to %struct.rtx_def**
  %244 = load %struct.rtx_def*, %struct.rtx_def** %rtx408, align 8
  %fld409 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1
  %arrayidx410 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld409, i32 0, i64 0
  %rtx411 = bitcast %union.rtunion_def* %arrayidx410 to %struct.rtx_def**
  %245 = load %struct.rtx_def*, %struct.rtx_def** %rtx411, align 8
  %fld412 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %245, i32 0, i32 1
  %arrayidx413 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld412, i32 0, i64 0
  %rtx414 = bitcast %union.rtunion_def* %arrayidx413 to %struct.rtx_def**
  %246 = load %struct.rtx_def*, %struct.rtx_def** %rtx414, align 8
  %247 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp415 = icmp eq %struct.rtx_def* %246, %247
  br i1 %cmp415, label %land.lhs.true.417, label %if.end.463

land.lhs.true.417:                                ; preds = %land.lhs.true.405
  %248 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld418 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %248, i32 0, i32 1
  %arrayidx419 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld418, i32 0, i64 0
  %rtx420 = bitcast %union.rtunion_def* %arrayidx419 to %struct.rtx_def**
  %249 = load %struct.rtx_def*, %struct.rtx_def** %rtx420, align 8
  %fld421 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %249, i32 0, i32 1
  %arrayidx422 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld421, i32 0, i64 0
  %rtx423 = bitcast %union.rtunion_def* %arrayidx422 to %struct.rtx_def**
  %250 = load %struct.rtx_def*, %struct.rtx_def** %rtx423, align 8
  %251 = bitcast %struct.rtx_def* %250 to i32*
  %bf.load424 = load i32, i32* %251, align 8
  %bf.lshr425 = lshr i32 %bf.load424, 16
  %bf.clear426 = and i32 %bf.lshr425, 255
  %idxprom427 = sext i32 %bf.clear426 to i64
  %arrayidx428 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom427
  %252 = load i8, i8* %arrayidx428, align 1
  %conv429 = zext i8 %252 to i32
  %253 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %254 = bitcast %struct.rtx_def* %253 to i32*
  %bf.load430 = load i32, i32* %254, align 8
  %bf.lshr431 = lshr i32 %bf.load430, 16
  %bf.clear432 = and i32 %bf.lshr431, 255
  %idxprom433 = sext i32 %bf.clear432 to i64
  %arrayidx434 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom433
  %255 = load i8, i8* %arrayidx434, align 1
  %conv435 = zext i8 %255 to i32
  %cmp436 = icmp sgt i32 %conv429, %conv435
  br i1 %cmp436, label %if.then.438, label %if.end.463

if.then.438:                                      ; preds = %land.lhs.true.417
  %256 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %257 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %call439 = call %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %256, %struct.rtx_def* %257)
  store %struct.fixup_replacement* %call439, %struct.fixup_replacement** %replacement, align 8
  %258 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new440 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %258, i32 0, i32 1
  %259 = load %struct.rtx_def*, %struct.rtx_def** %new440, align 8
  %cmp441 = icmp eq %struct.rtx_def* %259, null
  br i1 %cmp441, label %if.then.443, label %if.end.449

if.then.443:                                      ; preds = %if.then.438
  %260 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %261 = bitcast %struct.rtx_def* %260 to i32*
  %bf.load444 = load i32, i32* %261, align 8
  %bf.lshr445 = lshr i32 %bf.load444, 16
  %bf.clear446 = and i32 %bf.lshr445, 255
  %call447 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear446)
  %262 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new448 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %262, i32 0, i32 1
  store %struct.rtx_def* %call447, %struct.rtx_def** %new448, align 8
  br label %if.end.449

if.end.449:                                       ; preds = %if.then.443, %if.then.438
  %263 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new450 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %263, i32 0, i32 1
  %264 = load %struct.rtx_def*, %struct.rtx_def** %new450, align 8
  %265 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld451 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %265, i32 0, i32 1
  %arrayidx452 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld451, i32 0, i64 0
  %rtx453 = bitcast %union.rtunion_def* %arrayidx452 to %struct.rtx_def**
  %266 = load %struct.rtx_def*, %struct.rtx_def** %rtx453, align 8
  %fld454 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %266, i32 0, i32 1
  %arrayidx455 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld454, i32 0, i64 0
  %rtx456 = bitcast %union.rtunion_def* %arrayidx455 to %struct.rtx_def**
  %267 = load %struct.rtx_def*, %struct.rtx_def** %rtx456, align 8
  %fld457 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %267, i32 0, i32 1
  %arrayidx458 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld457, i32 0, i64 0
  %rtx459 = bitcast %union.rtunion_def* %arrayidx458 to %struct.rtx_def**
  store %struct.rtx_def* %264, %struct.rtx_def** %rtx459, align 8
  %268 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %269 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new460 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %269, i32 0, i32 1
  %270 = load %struct.rtx_def*, %struct.rtx_def** %new460, align 8
  %call461 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %268, %struct.rtx_def* %270)
  %271 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call462 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call461, %struct.rtx_def* %271)
  br label %if.end.463

if.end.463:                                       ; preds = %if.end.449, %land.lhs.true.417, %land.lhs.true.405, %land.lhs.true.394, %if.end.386
  %272 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld464 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %272, i32 0, i32 1
  %arrayidx465 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld464, i32 0, i64 0
  %rtx466 = bitcast %union.rtunion_def* %arrayidx465 to %struct.rtx_def**
  %273 = load %struct.rtx_def*, %struct.rtx_def** %rtx466, align 8
  %274 = bitcast %struct.rtx_def* %273 to i32*
  %bf.load467 = load i32, i32* %274, align 8
  %bf.clear468 = and i32 %bf.load467, 65535
  %cmp469 = icmp eq i32 %bf.clear468, 63
  br i1 %cmp469, label %land.lhs.true.471, label %if.end.515

land.lhs.true.471:                                ; preds = %if.end.463
  %275 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld472 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %275, i32 0, i32 1
  %arrayidx473 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld472, i32 0, i64 0
  %rtx474 = bitcast %union.rtunion_def* %arrayidx473 to %struct.rtx_def**
  %276 = load %struct.rtx_def*, %struct.rtx_def** %rtx474, align 8
  %fld475 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %276, i32 0, i32 1
  %arrayidx476 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld475, i32 0, i64 0
  %rtx477 = bitcast %union.rtunion_def* %arrayidx476 to %struct.rtx_def**
  %277 = load %struct.rtx_def*, %struct.rtx_def** %rtx477, align 8
  %278 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp478 = icmp eq %struct.rtx_def* %277, %278
  br i1 %cmp478, label %land.lhs.true.480, label %if.end.515

land.lhs.true.480:                                ; preds = %land.lhs.true.471
  %279 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld481 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %279, i32 0, i32 1
  %arrayidx482 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld481, i32 0, i64 0
  %rtx483 = bitcast %union.rtunion_def* %arrayidx482 to %struct.rtx_def**
  %280 = load %struct.rtx_def*, %struct.rtx_def** %rtx483, align 8
  %281 = bitcast %struct.rtx_def* %280 to i32*
  %bf.load484 = load i32, i32* %281, align 8
  %bf.lshr485 = lshr i32 %bf.load484, 16
  %bf.clear486 = and i32 %bf.lshr485, 255
  %idxprom487 = sext i32 %bf.clear486 to i64
  %arrayidx488 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom487
  %282 = load i8, i8* %arrayidx488, align 1
  %conv489 = zext i8 %282 to i32
  %283 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %284 = bitcast %struct.rtx_def* %283 to i32*
  %bf.load490 = load i32, i32* %284, align 8
  %bf.lshr491 = lshr i32 %bf.load490, 16
  %bf.clear492 = and i32 %bf.lshr491, 255
  %idxprom493 = sext i32 %bf.clear492 to i64
  %arrayidx494 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom493
  %285 = load i8, i8* %arrayidx494, align 1
  %conv495 = zext i8 %285 to i32
  %cmp496 = icmp sgt i32 %conv489, %conv495
  br i1 %cmp496, label %if.then.498, label %if.end.515

if.then.498:                                      ; preds = %land.lhs.true.480
  %286 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld499 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %286, i32 0, i32 1
  %arrayidx500 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld499, i32 0, i64 0
  %rtx501 = bitcast %union.rtunion_def* %arrayidx500 to %struct.rtx_def**
  %287 = load %struct.rtx_def*, %struct.rtx_def** %rtx501, align 8
  %288 = bitcast %struct.rtx_def* %287 to i32*
  %bf.load502 = load i32, i32* %288, align 8
  %bf.lshr503 = lshr i32 %bf.load502, 16
  %bf.clear504 = and i32 %bf.lshr503, 255
  %call505 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear504)
  store %struct.rtx_def* %call505, %struct.rtx_def** %tem, align 8
  %289 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld506 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %289, i32 0, i32 1
  %arrayidx507 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld506, i32 0, i64 0
  %rtx508 = bitcast %union.rtunion_def* %arrayidx507 to %struct.rtx_def**
  store %struct.rtx_def* %call505, %struct.rtx_def** %rtx508, align 8
  %290 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %291 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %292 = bitcast %struct.rtx_def* %291 to i32*
  %bf.load509 = load i32, i32* %292, align 8
  %bf.lshr510 = lshr i32 %bf.load509, 16
  %bf.clear511 = and i32 %bf.lshr510, 255
  %293 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %call512 = call %struct.rtx_def* @gen_lowpart(i32 %bf.clear511, %struct.rtx_def* %293)
  %call513 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %290, %struct.rtx_def* %call512)
  %294 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call514 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call513, %struct.rtx_def* %294)
  br label %sw.epilog

if.end.515:                                       ; preds = %land.lhs.true.480, %land.lhs.true.471, %if.end.463
  %295 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld516 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %295, i32 0, i32 1
  %arrayidx517 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld516, i32 0, i64 0
  %rtx518 = bitcast %union.rtunion_def* %arrayidx517 to %struct.rtx_def**
  %296 = load %struct.rtx_def*, %struct.rtx_def** %rtx518, align 8
  store %struct.rtx_def* %296, %struct.rtx_def** %dest, align 8
  %297 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld519 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %297, i32 0, i32 1
  %arrayidx520 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld519, i32 0, i64 1
  %rtx521 = bitcast %union.rtunion_def* %arrayidx520 to %struct.rtx_def**
  %298 = load %struct.rtx_def*, %struct.rtx_def** %rtx521, align 8
  store %struct.rtx_def* %298, %struct.rtx_def** %src, align 8
  %299 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  store %struct.rtx_def* %299, %struct.rtx_def** %outerdest, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.515
  %300 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %301 = bitcast %struct.rtx_def* %300 to i32*
  %bf.load522 = load i32, i32* %301, align 8
  %bf.clear523 = and i32 %bf.load522, 65535
  %cmp524 = icmp eq i32 %bf.clear523, 63
  br i1 %cmp524, label %lor.end, label %lor.lhs.false.526

lor.lhs.false.526:                                ; preds = %while.cond
  %302 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %303 = bitcast %struct.rtx_def* %302 to i32*
  %bf.load527 = load i32, i32* %303, align 8
  %bf.clear528 = and i32 %bf.load527, 65535
  %cmp529 = icmp eq i32 %bf.clear528, 64
  br i1 %cmp529, label %lor.end, label %lor.lhs.false.531

lor.lhs.false.531:                                ; preds = %lor.lhs.false.526
  %304 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %305 = bitcast %struct.rtx_def* %304 to i32*
  %bf.load532 = load i32, i32* %305, align 8
  %bf.clear533 = and i32 %bf.load532, 65535
  %cmp534 = icmp eq i32 %bf.clear533, 132
  br i1 %cmp534, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.531
  %306 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %307 = bitcast %struct.rtx_def* %306 to i32*
  %bf.load536 = load i32, i32* %307, align 8
  %bf.clear537 = and i32 %bf.load536, 65535
  %cmp538 = icmp eq i32 %bf.clear537, 133
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.531, %lor.lhs.false.526, %while.cond
  %308 = phi i1 [ true, %lor.lhs.false.531 ], [ true, %lor.lhs.false.526 ], [ true, %while.cond ], [ %cmp538, %lor.rhs ]
  br i1 %308, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %309 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld540 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %309, i32 0, i32 1
  %arrayidx541 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld540, i32 0, i64 0
  %rtx542 = bitcast %union.rtunion_def* %arrayidx541 to %struct.rtx_def**
  %310 = load %struct.rtx_def*, %struct.rtx_def** %rtx542, align 8
  store %struct.rtx_def* %310, %struct.rtx_def** %dest, align 8
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %311 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %312 = bitcast %struct.rtx_def* %311 to i32*
  %bf.load543 = load i32, i32* %312, align 8
  %bf.clear544 = and i32 %bf.load543, 65535
  %cmp545 = icmp eq i32 %bf.clear544, 63
  br i1 %cmp545, label %if.then.547, label %if.end.551

if.then.547:                                      ; preds = %while.end
  %313 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld548 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %313, i32 0, i32 1
  %arrayidx549 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld548, i32 0, i64 0
  %rtx550 = bitcast %union.rtunion_def* %arrayidx549 to %struct.rtx_def**
  %314 = load %struct.rtx_def*, %struct.rtx_def** %rtx550, align 8
  store %struct.rtx_def* %314, %struct.rtx_def** %src, align 8
  br label %if.end.551

if.end.551:                                       ; preds = %if.then.547, %while.end
  %315 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %316 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp552 = icmp ne %struct.rtx_def* %315, %316
  br i1 %cmp552, label %land.lhs.true.554, label %if.end.558

land.lhs.true.554:                                ; preds = %if.end.551
  %317 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %318 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp555 = icmp ne %struct.rtx_def* %317, %318
  br i1 %cmp555, label %if.then.557, label %if.end.558

if.then.557:                                      ; preds = %land.lhs.true.554
  br label %sw.epilog

if.end.558:                                       ; preds = %land.lhs.true.554, %if.end.551
  %319 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld559 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %319, i32 0, i32 1
  %arrayidx560 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld559, i32 0, i64 4
  %rtint561 = bitcast %union.rtunion_def* %arrayidx560 to i32*
  store i32 -1, i32* %rtint561, align 4
  %320 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %321 = bitcast %struct.rtx_def* %320 to i32*
  %bf.load562 = load i32, i32* %321, align 8
  %bf.clear563 = and i32 %bf.load562, 65535
  %cmp564 = icmp eq i32 %bf.clear563, 133
  br i1 %cmp564, label %land.lhs.true.566, label %if.end.705

land.lhs.true.566:                                ; preds = %if.end.558
  %322 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %323 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp567 = icmp eq %struct.rtx_def* %322, %323
  br i1 %cmp567, label %land.lhs.true.569, label %if.end.705

land.lhs.true.569:                                ; preds = %land.lhs.true.566
  %call570 = call i32 @mode_for_extraction(i32 0, i32 -1)
  %cmp571 = icmp ne i32 %call570, 59
  br i1 %cmp571, label %if.then.573, label %if.end.705

if.then.573:                                      ; preds = %land.lhs.true.569
  %324 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %325 = load i32, i32* %promoted_mode.addr, align 4
  %326 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld574 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %326, i32 0, i32 1
  %arrayidx575 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld574, i32 0, i64 1
  %rtx576 = bitcast %union.rtunion_def* %arrayidx575 to %struct.rtx_def**
  %327 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %328 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %329 = load %struct.rtx_def*, %struct.rtx_def** %no_share.addr, align 8
  call void @fixup_var_refs_1(%struct.rtx_def* %324, i32 %325, %struct.rtx_def** %rtx576, %struct.rtx_def* %327, %struct.fixup_replacement** %328, %struct.rtx_def* %329)
  %330 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %331 = load i32, i32* %promoted_mode.addr, align 4
  %332 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld577 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %332, i32 0, i32 1
  %arrayidx578 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld577, i32 0, i64 2
  %rtx579 = bitcast %union.rtunion_def* %arrayidx578 to %struct.rtx_def**
  %333 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %334 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %335 = load %struct.rtx_def*, %struct.rtx_def** %no_share.addr, align 8
  call void @fixup_var_refs_1(%struct.rtx_def* %330, i32 %331, %struct.rtx_def** %rtx579, %struct.rtx_def* %333, %struct.fixup_replacement** %334, %struct.rtx_def* %335)
  %336 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %337 = load i32, i32* %promoted_mode.addr, align 4
  %338 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld580 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %338, i32 0, i32 1
  %arrayidx581 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld580, i32 0, i64 1
  %rtx582 = bitcast %union.rtunion_def* %arrayidx581 to %struct.rtx_def**
  %339 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %340 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %341 = load %struct.rtx_def*, %struct.rtx_def** %no_share.addr, align 8
  call void @fixup_var_refs_1(%struct.rtx_def* %336, i32 %337, %struct.rtx_def** %rtx582, %struct.rtx_def* %339, %struct.fixup_replacement** %340, %struct.rtx_def* %341)
  %342 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld583 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %342, i32 0, i32 1
  %arrayidx584 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld583, i32 0, i64 0
  %rtx585 = bitcast %union.rtunion_def* %arrayidx584 to %struct.rtx_def**
  %343 = load %struct.rtx_def*, %struct.rtx_def** %rtx585, align 8
  store %struct.rtx_def* %343, %struct.rtx_def** %tem, align 8
  %344 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %345 = bitcast %struct.rtx_def* %344 to i32*
  %bf.load586 = load i32, i32* %345, align 8
  %bf.clear587 = and i32 %bf.load586, 65535
  %cmp588 = icmp eq i32 %bf.clear587, 63
  br i1 %cmp588, label %land.lhs.true.590, label %if.else.598

land.lhs.true.590:                                ; preds = %if.then.573
  %346 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld591 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %346, i32 0, i32 1
  %arrayidx592 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld591, i32 0, i64 0
  %rtx593 = bitcast %union.rtunion_def* %arrayidx592 to %struct.rtx_def**
  %347 = load %struct.rtx_def*, %struct.rtx_def** %rtx593, align 8
  %348 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp594 = icmp eq %struct.rtx_def* %347, %348
  br i1 %cmp594, label %if.then.596, label %if.else.598

if.then.596:                                      ; preds = %land.lhs.true.590
  %349 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %350 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %351 = load i32, i32* %promoted_mode.addr, align 4
  %call597 = call %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %349, %struct.rtx_def* %350, i32 %351, i32 0)
  store %struct.rtx_def* %call597, %struct.rtx_def** %tem, align 8
  br label %if.end.600

if.else.598:                                      ; preds = %land.lhs.true.590, %if.then.573
  %352 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %353 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call599 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %352, %struct.rtx_def* %353)
  store %struct.rtx_def* %call599, %struct.rtx_def** %tem, align 8
  br label %if.end.600

if.end.600:                                       ; preds = %if.else.598, %if.then.596
  %354 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld601 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %354, i32 0, i32 1
  %arrayidx602 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld601, i32 0, i64 1
  %rtx603 = bitcast %union.rtunion_def* %arrayidx602 to %struct.rtx_def**
  %355 = load %struct.rtx_def*, %struct.rtx_def** %rtx603, align 8
  %356 = bitcast %struct.rtx_def* %355 to i32*
  %bf.load604 = load i32, i32* %356, align 8
  %bf.clear605 = and i32 %bf.load604, 65535
  %cmp606 = icmp eq i32 %bf.clear605, 54
  br i1 %cmp606, label %land.lhs.true.608, label %if.end.693

land.lhs.true.608:                                ; preds = %if.end.600
  %357 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld609 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %357, i32 0, i32 1
  %arrayidx610 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld609, i32 0, i64 2
  %rtx611 = bitcast %union.rtunion_def* %arrayidx610 to %struct.rtx_def**
  %358 = load %struct.rtx_def*, %struct.rtx_def** %rtx611, align 8
  %359 = bitcast %struct.rtx_def* %358 to i32*
  %bf.load612 = load i32, i32* %359, align 8
  %bf.clear613 = and i32 %bf.load612, 65535
  %cmp614 = icmp eq i32 %bf.clear613, 54
  br i1 %cmp614, label %land.lhs.true.616, label %if.end.693

land.lhs.true.616:                                ; preds = %land.lhs.true.608
  %360 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %fld617 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %360, i32 0, i32 1
  %arrayidx618 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld617, i32 0, i64 0
  %rtx619 = bitcast %union.rtunion_def* %arrayidx618 to %struct.rtx_def**
  %361 = load %struct.rtx_def*, %struct.rtx_def** %rtx619, align 8
  %call620 = call i32 @mode_dependent_address_p(%struct.rtx_def* %361)
  %tobool621 = icmp ne i32 %call620, 0
  br i1 %tobool621, label %if.end.693, label %land.lhs.true.622

land.lhs.true.622:                                ; preds = %land.lhs.true.616
  %362 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %363 = bitcast %struct.rtx_def* %362 to i32*
  %bf.load623 = load i32, i32* %363, align 8
  %bf.lshr624 = lshr i32 %bf.load623, 27
  %bf.clear625 = and i32 %bf.lshr624, 1
  %tobool626 = icmp ne i32 %bf.clear625, 0
  br i1 %tobool626, label %if.end.693, label %if.then.627

if.then.627:                                      ; preds = %land.lhs.true.622
  %364 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %365 = bitcast %struct.rtx_def* %364 to i32*
  %bf.load630 = load i32, i32* %365, align 8
  %bf.lshr631 = lshr i32 %bf.load630, 16
  %bf.clear632 = and i32 %bf.lshr631, 255
  store i32 %bf.clear632, i32* %is_mode629, align 4
  %366 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld634 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %366, i32 0, i32 1
  %arrayidx635 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld634, i32 0, i64 2
  %rtx636 = bitcast %union.rtunion_def* %arrayidx635 to %struct.rtx_def**
  %367 = load %struct.rtx_def*, %struct.rtx_def** %rtx636, align 8
  %fld637 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %367, i32 0, i32 1
  %arrayidx638 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld637, i32 0, i64 0
  %rtwint639 = bitcast %union.rtunion_def* %arrayidx638 to i64*
  %368 = load i64, i64* %rtwint639, align 8
  store i64 %368, i64* %pos633, align 8
  %call640 = call i32 @mode_for_extraction(i32 0, i32 0)
  store i32 %call640, i32* %wanted_mode628, align 4
  %369 = load i32, i32* %wanted_mode628, align 4
  %idxprom641 = sext i32 %369 to i64
  %arrayidx642 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom641
  %370 = load i8, i8* %arrayidx642, align 1
  %conv643 = zext i8 %370 to i32
  %371 = load i32, i32* %is_mode629, align 4
  %idxprom644 = sext i32 %371 to i64
  %arrayidx645 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom644
  %372 = load i8, i8* %arrayidx645, align 1
  %conv646 = zext i8 %372 to i32
  %cmp647 = icmp slt i32 %conv643, %conv646
  br i1 %cmp647, label %if.then.649, label %if.end.692

if.then.649:                                      ; preds = %if.then.627
  %373 = load i64, i64* %pos633, align 8
  %div651 = sdiv i64 %373, 8
  store i64 %div651, i64* %offset650, align 8
  %374 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld653 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %374, i32 0, i32 1
  %arrayidx654 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld653, i32 0, i64 2
  %rtx655 = bitcast %union.rtunion_def* %arrayidx654 to %struct.rtx_def**
  %375 = load %struct.rtx_def*, %struct.rtx_def** %rtx655, align 8
  store %struct.rtx_def* %375, %struct.rtx_def** %old_pos652, align 8
  %376 = load i32, i32* %wanted_mode628, align 4
  %idxprom657 = sext i32 %376 to i64
  %arrayidx658 = getelementptr inbounds [59 x i16], [59 x i16]* @mode_bitsize, i32 0, i64 %idxprom657
  %377 = load i16, i16* %arrayidx658, align 2
  %conv659 = zext i16 %377 to i64
  %378 = load i64, i64* %pos633, align 8
  %rem660 = srem i64 %378, %conv659
  store i64 %rem660, i64* %pos633, align 8
  %379 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %380 = load i32, i32* %wanted_mode628, align 4
  %381 = load i64, i64* %offset650, align 8
  %call661 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %379, i32 %380, i64 %381, i32 0, i32 1)
  store %struct.rtx_def* %call661, %struct.rtx_def** %newmem656, align 8
  %382 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld662 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %382, i32 0, i32 1
  %arrayidx663 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld662, i32 0, i64 4
  %rtint664 = bitcast %union.rtunion_def* %arrayidx663 to i32*
  store i32 -1, i32* %rtint664, align 4
  %383 = load %struct.rtx_def*, %struct.rtx_def** %newmem656, align 8
  %384 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld665 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %384, i32 0, i32 1
  %arrayidx666 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld665, i32 0, i64 0
  %rtx667 = bitcast %union.rtunion_def* %arrayidx666 to %struct.rtx_def**
  store %struct.rtx_def* %383, %struct.rtx_def** %rtx667, align 8
  %385 = load i64, i64* %pos633, align 8
  %call668 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %385)
  %386 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld669 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %386, i32 0, i32 1
  %arrayidx670 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld669, i32 0, i64 2
  %rtx671 = bitcast %union.rtunion_def* %arrayidx670 to %struct.rtx_def**
  store %struct.rtx_def* %call668, %struct.rtx_def** %rtx671, align 8
  %387 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld672 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %387, i32 0, i32 1
  %arrayidx673 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld672, i32 0, i64 4
  %rtint674 = bitcast %union.rtunion_def* %arrayidx673 to i32*
  %388 = load i32, i32* %rtint674, align 4
  %cmp675 = icmp sge i32 %388, 0
  br i1 %cmp675, label %cond.true.677, label %cond.false.681

cond.true.677:                                    ; preds = %if.then.649
  %389 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld678 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %389, i32 0, i32 1
  %arrayidx679 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld678, i32 0, i64 4
  %rtint680 = bitcast %union.rtunion_def* %arrayidx679 to i32*
  %390 = load i32, i32* %rtint680, align 4
  br label %cond.end.683

cond.false.681:                                   ; preds = %if.then.649
  %391 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call682 = call i32 @recog_memoized_1(%struct.rtx_def* %391)
  br label %cond.end.683

cond.end.683:                                     ; preds = %cond.false.681, %cond.true.677
  %cond684 = phi i32 [ %390, %cond.true.677 ], [ %call682, %cond.false.681 ]
  %cmp685 = icmp sge i32 %cond684, 0
  br i1 %cmp685, label %if.then.687, label %if.end.688

if.then.687:                                      ; preds = %cond.end.683
  br label %for.end.1225

if.end.688:                                       ; preds = %cond.end.683
  %392 = load %struct.rtx_def*, %struct.rtx_def** %old_pos652, align 8
  %393 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld689 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %393, i32 0, i32 1
  %arrayidx690 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld689, i32 0, i64 2
  %rtx691 = bitcast %union.rtunion_def* %arrayidx690 to %struct.rtx_def**
  store %struct.rtx_def* %392, %struct.rtx_def** %rtx691, align 8
  br label %if.end.692

if.end.692:                                       ; preds = %if.end.688, %if.then.627
  br label %if.end.693

if.end.693:                                       ; preds = %if.end.692, %land.lhs.true.622, %land.lhs.true.616, %land.lhs.true.608, %if.end.600
  %394 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %395 = bitcast %struct.rtx_def* %394 to i32*
  %bf.load694 = load i32, i32* %395, align 8
  %bf.lshr695 = lshr i32 %bf.load694, 16
  %bf.clear696 = and i32 %bf.lshr695, 255
  %call697 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear696)
  store %struct.rtx_def* %call697, %struct.rtx_def** %tem1, align 8
  %396 = load %struct.rtx_def*, %struct.rtx_def** %tem1, align 8
  %397 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %call698 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %396, %struct.rtx_def* %397)
  %398 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call699 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call698, %struct.rtx_def* %398)
  %399 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8
  %400 = load %struct.rtx_def*, %struct.rtx_def** %tem1, align 8
  %call700 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %399, %struct.rtx_def* %400)
  %401 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call701 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call700, %struct.rtx_def* %401)
  %402 = load %struct.rtx_def*, %struct.rtx_def** %tem1, align 8
  %403 = load %struct.rtx_def*, %struct.rtx_def** %outerdest, align 8
  %fld702 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %403, i32 0, i32 1
  %arrayidx703 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld702, i32 0, i64 0
  %rtx704 = bitcast %union.rtunion_def* %arrayidx703 to %struct.rtx_def**
  store %struct.rtx_def* %402, %struct.rtx_def** %rtx704, align 8
  br label %for.end.1225

if.end.705:                                       ; preds = %land.lhs.true.569, %land.lhs.true.566, %if.end.558
  %404 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %405 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp706 = icmp eq %struct.rtx_def* %404, %405
  br i1 %cmp706, label %land.lhs.true.708, label %if.end.726

land.lhs.true.708:                                ; preds = %if.end.705
  %406 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld709 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %406, i32 0, i32 1
  %arrayidx710 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld709, i32 0, i64 0
  %rtx711 = bitcast %union.rtunion_def* %arrayidx710 to %struct.rtx_def**
  %407 = load %struct.rtx_def*, %struct.rtx_def** %rtx711, align 8
  %408 = bitcast %struct.rtx_def* %407 to i32*
  %bf.load712 = load i32, i32* %408, align 8
  %bf.clear713 = and i32 %bf.load712, 65535
  %cmp714 = icmp eq i32 %bf.clear713, 64
  br i1 %cmp714, label %if.then.716, label %if.end.726

if.then.716:                                      ; preds = %land.lhs.true.708
  %409 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld717 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %409, i32 0, i32 1
  %arrayidx718 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld717, i32 0, i64 0
  %rtx719 = bitcast %union.rtunion_def* %arrayidx718 to %struct.rtx_def**
  %410 = load %struct.rtx_def*, %struct.rtx_def** %rtx719, align 8
  %fld720 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %410, i32 0, i32 1
  %arrayidx721 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld720, i32 0, i64 0
  %rtx722 = bitcast %union.rtunion_def* %arrayidx721 to %struct.rtx_def**
  %411 = load %struct.rtx_def*, %struct.rtx_def** %rtx722, align 8
  %412 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld723 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %412, i32 0, i32 1
  %arrayidx724 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld723, i32 0, i64 0
  %rtx725 = bitcast %union.rtunion_def* %arrayidx724 to %struct.rtx_def**
  store %struct.rtx_def* %411, %struct.rtx_def** %rtx725, align 8
  br label %if.end.726

if.end.726:                                       ; preds = %if.then.716, %land.lhs.true.708, %if.end.705
  %413 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld727 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %413, i32 0, i32 1
  %arrayidx728 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld727, i32 0, i64 1
  %rtx729 = bitcast %union.rtunion_def* %arrayidx728 to %struct.rtx_def**
  %414 = load %struct.rtx_def*, %struct.rtx_def** %rtx729, align 8
  %415 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp730 = icmp eq %struct.rtx_def* %414, %415
  br i1 %cmp730, label %land.lhs.true.749, label %lor.lhs.false.732

lor.lhs.false.732:                                ; preds = %if.end.726
  %416 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld733 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %416, i32 0, i32 1
  %arrayidx734 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld733, i32 0, i64 1
  %rtx735 = bitcast %union.rtunion_def* %arrayidx734 to %struct.rtx_def**
  %417 = load %struct.rtx_def*, %struct.rtx_def** %rtx735, align 8
  %418 = bitcast %struct.rtx_def* %417 to i32*
  %bf.load736 = load i32, i32* %418, align 8
  %bf.clear737 = and i32 %bf.load736, 65535
  %cmp738 = icmp eq i32 %bf.clear737, 63
  br i1 %cmp738, label %land.lhs.true.740, label %if.end.965

land.lhs.true.740:                                ; preds = %lor.lhs.false.732
  %419 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld741 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %419, i32 0, i32 1
  %arrayidx742 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld741, i32 0, i64 1
  %rtx743 = bitcast %union.rtunion_def* %arrayidx742 to %struct.rtx_def**
  %420 = load %struct.rtx_def*, %struct.rtx_def** %rtx743, align 8
  %fld744 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %420, i32 0, i32 1
  %arrayidx745 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld744, i32 0, i64 0
  %rtx746 = bitcast %union.rtunion_def* %arrayidx745 to %struct.rtx_def**
  %421 = load %struct.rtx_def*, %struct.rtx_def** %rtx746, align 8
  %422 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp747 = icmp eq %struct.rtx_def* %421, %422
  br i1 %cmp747, label %land.lhs.true.749, label %if.end.965

land.lhs.true.749:                                ; preds = %land.lhs.true.740, %if.end.726
  %423 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld750 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %423, i32 0, i32 1
  %arrayidx751 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld750, i32 0, i64 0
  %rtx752 = bitcast %union.rtunion_def* %arrayidx751 to %struct.rtx_def**
  %424 = load %struct.rtx_def*, %struct.rtx_def** %rtx752, align 8
  %425 = bitcast %struct.rtx_def* %424 to i32*
  %bf.load753 = load i32, i32* %425, align 8
  %bf.clear754 = and i32 %bf.load753, 65535
  %cmp755 = icmp eq i32 %bf.clear754, 61
  br i1 %cmp755, label %land.lhs.true.776, label %lor.lhs.false.757

lor.lhs.false.757:                                ; preds = %land.lhs.true.749
  %426 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld758 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %426, i32 0, i32 1
  %arrayidx759 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld758, i32 0, i64 0
  %rtx760 = bitcast %union.rtunion_def* %arrayidx759 to %struct.rtx_def**
  %427 = load %struct.rtx_def*, %struct.rtx_def** %rtx760, align 8
  %428 = bitcast %struct.rtx_def* %427 to i32*
  %bf.load761 = load i32, i32* %428, align 8
  %bf.clear762 = and i32 %bf.load761, 65535
  %cmp763 = icmp eq i32 %bf.clear762, 63
  br i1 %cmp763, label %land.lhs.true.765, label %if.end.965

land.lhs.true.765:                                ; preds = %lor.lhs.false.757
  %429 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld766 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %429, i32 0, i32 1
  %arrayidx767 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld766, i32 0, i64 0
  %rtx768 = bitcast %union.rtunion_def* %arrayidx767 to %struct.rtx_def**
  %430 = load %struct.rtx_def*, %struct.rtx_def** %rtx768, align 8
  %fld769 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %430, i32 0, i32 1
  %arrayidx770 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld769, i32 0, i64 0
  %rtx771 = bitcast %union.rtunion_def* %arrayidx770 to %struct.rtx_def**
  %431 = load %struct.rtx_def*, %struct.rtx_def** %rtx771, align 8
  %432 = bitcast %struct.rtx_def* %431 to i32*
  %bf.load772 = load i32, i32* %432, align 8
  %bf.clear773 = and i32 %bf.load772, 65535
  %cmp774 = icmp eq i32 %bf.clear773, 61
  br i1 %cmp774, label %land.lhs.true.776, label %if.end.965

land.lhs.true.776:                                ; preds = %land.lhs.true.765, %land.lhs.true.749
  %433 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %434 = bitcast %struct.rtx_def* %433 to i32*
  %bf.load777 = load i32, i32* %434, align 8
  %bf.lshr778 = lshr i32 %bf.load777, 16
  %bf.clear779 = and i32 %bf.lshr778, 255
  %435 = load i32, i32* %promoted_mode.addr, align 4
  %cmp780 = icmp eq i32 %bf.clear779, %435
  br i1 %cmp780, label %land.lhs.true.782, label %if.end.965

land.lhs.true.782:                                ; preds = %land.lhs.true.776
  %436 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %437 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %438 = bitcast %struct.rtx_def* %437 to i32*
  %bf.load783 = load i32, i32* %438, align 8
  %bf.clear784 = and i32 %bf.load783, 65535
  %idxprom785 = sext i32 %bf.clear784 to i64
  %arrayidx786 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom785
  %439 = load i8, i8* %arrayidx786, align 1
  %conv787 = sext i8 %439 to i32
  %cmp788 = icmp eq i32 %conv787, 105
  br i1 %cmp788, label %cond.true.790, label %cond.false.809

cond.true.790:                                    ; preds = %land.lhs.true.782
  %440 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld791 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %440, i32 0, i32 1
  %arrayidx792 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld791, i32 0, i64 3
  %rtx793 = bitcast %union.rtunion_def* %arrayidx792 to %struct.rtx_def**
  %441 = load %struct.rtx_def*, %struct.rtx_def** %rtx793, align 8
  %442 = bitcast %struct.rtx_def* %441 to i32*
  %bf.load794 = load i32, i32* %442, align 8
  %bf.clear795 = and i32 %bf.load794, 65535
  %cmp796 = icmp eq i32 %bf.clear795, 47
  br i1 %cmp796, label %cond.true.798, label %cond.false.802

cond.true.798:                                    ; preds = %cond.true.790
  %443 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld799 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %443, i32 0, i32 1
  %arrayidx800 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld799, i32 0, i64 3
  %rtx801 = bitcast %union.rtunion_def* %arrayidx800 to %struct.rtx_def**
  %444 = load %struct.rtx_def*, %struct.rtx_def** %rtx801, align 8
  br label %cond.end.807

cond.false.802:                                   ; preds = %cond.true.790
  %445 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %446 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld803 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %446, i32 0, i32 1
  %arrayidx804 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld803, i32 0, i64 3
  %rtx805 = bitcast %union.rtunion_def* %arrayidx804 to %struct.rtx_def**
  %447 = load %struct.rtx_def*, %struct.rtx_def** %rtx805, align 8
  %call806 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %445, %struct.rtx_def* %447)
  br label %cond.end.807

cond.end.807:                                     ; preds = %cond.false.802, %cond.true.798
  %cond808 = phi %struct.rtx_def* [ %444, %cond.true.798 ], [ %call806, %cond.false.802 ]
  br label %cond.end.810

cond.false.809:                                   ; preds = %land.lhs.true.782
  br label %cond.end.810

cond.end.810:                                     ; preds = %cond.false.809, %cond.end.807
  %cond811 = phi %struct.rtx_def* [ %cond808, %cond.end.807 ], [ null, %cond.false.809 ]
  %cmp812 = icmp eq %struct.rtx_def* %436, %cond811
  br i1 %cmp812, label %if.then.814, label %if.end.965

if.then.814:                                      ; preds = %cond.end.810
  %448 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld815 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %448, i32 0, i32 1
  %arrayidx816 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld815, i32 0, i64 1
  %rtx817 = bitcast %union.rtunion_def* %arrayidx816 to %struct.rtx_def**
  %449 = load %struct.rtx_def*, %struct.rtx_def** %rtx817, align 8
  %450 = bitcast %struct.rtx_def* %449 to i32*
  %bf.load818 = load i32, i32* %450, align 8
  %bf.clear819 = and i32 %bf.load818, 65535
  %cmp820 = icmp eq i32 %bf.clear819, 63
  br i1 %cmp820, label %land.lhs.true.822, label %if.else.859

land.lhs.true.822:                                ; preds = %if.then.814
  %451 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld823 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %451, i32 0, i32 1
  %arrayidx824 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld823, i32 0, i64 1
  %rtx825 = bitcast %union.rtunion_def* %arrayidx824 to %struct.rtx_def**
  %452 = load %struct.rtx_def*, %struct.rtx_def** %rtx825, align 8
  %453 = bitcast %struct.rtx_def* %452 to i32*
  %bf.load826 = load i32, i32* %453, align 8
  %bf.lshr827 = lshr i32 %bf.load826, 16
  %bf.clear828 = and i32 %bf.lshr827, 255
  %idxprom829 = sext i32 %bf.clear828 to i64
  %arrayidx830 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom829
  %454 = load i8, i8* %arrayidx830, align 1
  %conv831 = zext i8 %454 to i32
  %455 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %456 = bitcast %struct.rtx_def* %455 to i32*
  %bf.load832 = load i32, i32* %456, align 8
  %bf.lshr833 = lshr i32 %bf.load832, 16
  %bf.clear834 = and i32 %bf.lshr833, 255
  %idxprom835 = sext i32 %bf.clear834 to i64
  %arrayidx836 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom835
  %457 = load i8, i8* %arrayidx836, align 1
  %conv837 = zext i8 %457 to i32
  %cmp838 = icmp sgt i32 %conv831, %conv837
  br i1 %cmp838, label %if.then.840, label %if.else.859

if.then.840:                                      ; preds = %land.lhs.true.822
  %458 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %459 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %call841 = call %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %458, %struct.rtx_def* %459)
  store %struct.fixup_replacement* %call841, %struct.fixup_replacement** %replacement, align 8
  %460 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new842 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %460, i32 0, i32 1
  %461 = load %struct.rtx_def*, %struct.rtx_def** %new842, align 8
  %cmp843 = icmp eq %struct.rtx_def* %461, null
  br i1 %cmp843, label %if.then.845, label %if.end.851

if.then.845:                                      ; preds = %if.then.840
  %462 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %463 = bitcast %struct.rtx_def* %462 to i32*
  %bf.load846 = load i32, i32* %463, align 8
  %bf.lshr847 = lshr i32 %bf.load846, 16
  %bf.clear848 = and i32 %bf.lshr847, 255
  %call849 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear848)
  %464 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new850 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %464, i32 0, i32 1
  store %struct.rtx_def* %call849, %struct.rtx_def** %new850, align 8
  br label %if.end.851

if.end.851:                                       ; preds = %if.then.845, %if.then.840
  %465 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new852 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %465, i32 0, i32 1
  %466 = load %struct.rtx_def*, %struct.rtx_def** %new852, align 8
  %467 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld853 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %467, i32 0, i32 1
  %arrayidx854 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld853, i32 0, i64 1
  %rtx855 = bitcast %union.rtunion_def* %arrayidx854 to %struct.rtx_def**
  %468 = load %struct.rtx_def*, %struct.rtx_def** %rtx855, align 8
  %fld856 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %468, i32 0, i32 1
  %arrayidx857 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld856, i32 0, i64 0
  %rtx858 = bitcast %union.rtunion_def* %arrayidx857 to %struct.rtx_def**
  store %struct.rtx_def* %466, %struct.rtx_def** %rtx858, align 8
  br label %if.end.899

if.else.859:                                      ; preds = %land.lhs.true.822, %if.then.814
  %469 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %470 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld860 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %470, i32 0, i32 1
  %arrayidx861 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld860, i32 0, i64 1
  %rtx862 = bitcast %union.rtunion_def* %arrayidx861 to %struct.rtx_def**
  %471 = load %struct.rtx_def*, %struct.rtx_def** %rtx862, align 8
  %call863 = call %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %469, %struct.rtx_def* %471)
  store %struct.fixup_replacement* %call863, %struct.fixup_replacement** %replacement, align 8
  %472 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new864 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %472, i32 0, i32 1
  %473 = load %struct.rtx_def*, %struct.rtx_def** %new864, align 8
  %tobool865 = icmp ne %struct.rtx_def* %473, null
  br i1 %tobool865, label %if.then.866, label %if.else.871

if.then.866:                                      ; preds = %if.else.859
  %474 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new867 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %474, i32 0, i32 1
  %475 = load %struct.rtx_def*, %struct.rtx_def** %new867, align 8
  %476 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld868 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %476, i32 0, i32 1
  %arrayidx869 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld868, i32 0, i64 1
  %rtx870 = bitcast %union.rtunion_def* %arrayidx869 to %struct.rtx_def**
  store %struct.rtx_def* %475, %struct.rtx_def** %rtx870, align 8
  br label %if.end.898

if.else.871:                                      ; preds = %if.else.859
  %477 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld872 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %477, i32 0, i32 1
  %arrayidx873 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld872, i32 0, i64 1
  %rtx874 = bitcast %union.rtunion_def* %arrayidx873 to %struct.rtx_def**
  %478 = load %struct.rtx_def*, %struct.rtx_def** %rtx874, align 8
  %479 = bitcast %struct.rtx_def* %478 to i32*
  %bf.load875 = load i32, i32* %479, align 8
  %bf.clear876 = and i32 %bf.load875, 65535
  %cmp877 = icmp eq i32 %bf.clear876, 63
  br i1 %cmp877, label %if.then.879, label %if.else.888

if.then.879:                                      ; preds = %if.else.871
  %480 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld880 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %480, i32 0, i32 1
  %arrayidx881 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld880, i32 0, i64 1
  %rtx882 = bitcast %union.rtunion_def* %arrayidx881 to %struct.rtx_def**
  %481 = load %struct.rtx_def*, %struct.rtx_def** %rtx882, align 8
  %482 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %483 = load i32, i32* %promoted_mode.addr, align 4
  %call883 = call %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %481, %struct.rtx_def* %482, i32 %483, i32 0)
  %484 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new884 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %484, i32 0, i32 1
  store %struct.rtx_def* %call883, %struct.rtx_def** %new884, align 8
  %485 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld885 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %485, i32 0, i32 1
  %arrayidx886 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld885, i32 0, i64 1
  %rtx887 = bitcast %union.rtunion_def* %arrayidx886 to %struct.rtx_def**
  store %struct.rtx_def* %call883, %struct.rtx_def** %rtx887, align 8
  br label %if.end.897

if.else.888:                                      ; preds = %if.else.871
  %486 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld889 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %486, i32 0, i32 1
  %arrayidx890 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld889, i32 0, i64 1
  %rtx891 = bitcast %union.rtunion_def* %arrayidx890 to %struct.rtx_def**
  %487 = load %struct.rtx_def*, %struct.rtx_def** %rtx891, align 8
  %488 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call892 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %487, %struct.rtx_def* %488)
  %489 = load %struct.fixup_replacement*, %struct.fixup_replacement** %replacement, align 8
  %new893 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %489, i32 0, i32 1
  store %struct.rtx_def* %call892, %struct.rtx_def** %new893, align 8
  %490 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld894 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %490, i32 0, i32 1
  %arrayidx895 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld894, i32 0, i64 1
  %rtx896 = bitcast %union.rtunion_def* %arrayidx895 to %struct.rtx_def**
  store %struct.rtx_def* %call892, %struct.rtx_def** %rtx896, align 8
  br label %if.end.897

if.end.897:                                       ; preds = %if.else.888, %if.then.879
  br label %if.end.898

if.end.898:                                       ; preds = %if.end.897, %if.then.866
  br label %if.end.899

if.end.899:                                       ; preds = %if.end.898, %if.end.851
  %491 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld900 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %491, i32 0, i32 1
  %arrayidx901 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld900, i32 0, i64 4
  %rtint902 = bitcast %union.rtunion_def* %arrayidx901 to i32*
  %492 = load i32, i32* %rtint902, align 4
  %cmp903 = icmp sge i32 %492, 0
  br i1 %cmp903, label %cond.true.905, label %cond.false.909

cond.true.905:                                    ; preds = %if.end.899
  %493 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld906 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %493, i32 0, i32 1
  %arrayidx907 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld906, i32 0, i64 4
  %rtint908 = bitcast %union.rtunion_def* %arrayidx907 to i32*
  %494 = load i32, i32* %rtint908, align 4
  br label %cond.end.911

cond.false.909:                                   ; preds = %if.end.899
  %495 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call910 = call i32 @recog_memoized_1(%struct.rtx_def* %495)
  br label %cond.end.911

cond.end.911:                                     ; preds = %cond.false.909, %cond.true.905
  %cond912 = phi i32 [ %494, %cond.true.905 ], [ %call910, %cond.false.909 ]
  %cmp913 = icmp sge i32 %cond912, 0
  br i1 %cmp913, label %if.then.915, label %if.end.916

if.then.915:                                      ; preds = %cond.end.911
  br label %for.end.1225

if.end.916:                                       ; preds = %cond.end.911
  %496 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld917 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %496, i32 0, i32 1
  %arrayidx918 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld917, i32 0, i64 0
  %rtx919 = bitcast %union.rtunion_def* %arrayidx918 to %struct.rtx_def**
  %497 = load %struct.rtx_def*, %struct.rtx_def** %rtx919, align 8
  %498 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld920 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %498, i32 0, i32 1
  %arrayidx921 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld920, i32 0, i64 1
  %rtx922 = bitcast %union.rtunion_def* %arrayidx921 to %struct.rtx_def**
  %499 = load %struct.rtx_def*, %struct.rtx_def** %rtx922, align 8
  %call923 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %497, %struct.rtx_def* %499)
  store %struct.rtx_def* %call923, %struct.rtx_def** %pat, align 8
  %500 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %501 = bitcast %struct.rtx_def* %500 to i32*
  %bf.load924 = load i32, i32* %501, align 8
  %bf.clear925 = and i32 %bf.load924, 65535
  %cmp926 = icmp eq i32 %bf.clear925, 24
  br i1 %cmp926, label %if.then.928, label %if.else.960

if.then.928:                                      ; preds = %if.end.916
  %502 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %503 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call929 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %502, %struct.rtx_def* %503)
  store %struct.rtx_def* %call929, %struct.rtx_def** %last, align 8
  %504 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld930 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %504, i32 0, i32 1
  %arrayidx931 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld930, i32 0, i64 6
  %rtx932 = bitcast %union.rtunion_def* %arrayidx931 to %struct.rtx_def**
  %505 = load %struct.rtx_def*, %struct.rtx_def** %rtx932, align 8
  %tobool933 = icmp ne %struct.rtx_def* %505, null
  br i1 %tobool933, label %land.lhs.true.934, label %if.end.940

land.lhs.true.934:                                ; preds = %if.then.928
  %506 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld935 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %506, i32 0, i32 1
  %arrayidx936 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld935, i32 0, i64 6
  %rtx937 = bitcast %union.rtunion_def* %arrayidx936 to %struct.rtx_def**
  %507 = load %struct.rtx_def*, %struct.rtx_def** %rtx937, align 8
  %tobool938 = icmp ne %struct.rtx_def* %507, null
  br i1 %tobool938, label %if.then.939, label %if.end.940

if.then.939:                                      ; preds = %land.lhs.true.934
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 2424, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.fixup_var_refs_1, i32 0, i32 0)) #6
  unreachable

if.end.940:                                       ; preds = %land.lhs.true.934, %if.then.928
  %508 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld941 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %508, i32 0, i32 1
  %arrayidx942 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld941, i32 0, i64 6
  %rtx943 = bitcast %union.rtunion_def* %arrayidx942 to %struct.rtx_def**
  %509 = load %struct.rtx_def*, %struct.rtx_def** %rtx943, align 8
  %tobool944 = icmp ne %struct.rtx_def* %509, null
  br i1 %tobool944, label %if.then.945, label %if.end.952

if.then.945:                                      ; preds = %if.end.940
  %510 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld946 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %510, i32 0, i32 1
  %arrayidx947 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld946, i32 0, i64 6
  %rtx948 = bitcast %union.rtunion_def* %arrayidx947 to %struct.rtx_def**
  %511 = load %struct.rtx_def*, %struct.rtx_def** %rtx948, align 8
  %512 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld949 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %512, i32 0, i32 1
  %arrayidx950 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld949, i32 0, i64 6
  %rtx951 = bitcast %union.rtunion_def* %arrayidx950 to %struct.rtx_def**
  store %struct.rtx_def* %511, %struct.rtx_def** %rtx951, align 8
  br label %if.end.952

if.end.952:                                       ; preds = %if.then.945, %if.end.940
  %513 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %fld953 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %513, i32 0, i32 1
  %arrayidx954 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld953, i32 0, i64 3
  %rtx955 = bitcast %union.rtunion_def* %arrayidx954 to %struct.rtx_def**
  %514 = load %struct.rtx_def*, %struct.rtx_def** %rtx955, align 8
  %515 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld956 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %515, i32 0, i32 1
  %arrayidx957 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld956, i32 0, i64 3
  %rtx958 = bitcast %union.rtunion_def* %arrayidx957 to %struct.rtx_def**
  store %struct.rtx_def* %514, %struct.rtx_def** %rtx958, align 8
  %516 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8
  %call959 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %516)
  br label %if.end.964

if.else.960:                                      ; preds = %if.end.916
  %517 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8
  %518 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld961 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %518, i32 0, i32 1
  %arrayidx962 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld961, i32 0, i64 3
  %rtx963 = bitcast %union.rtunion_def* %arrayidx962 to %struct.rtx_def**
  store %struct.rtx_def* %517, %struct.rtx_def** %rtx963, align 8
  br label %if.end.964

if.end.964:                                       ; preds = %if.else.960, %if.end.952
  br label %for.end.1225

if.end.965:                                       ; preds = %cond.end.810, %land.lhs.true.776, %land.lhs.true.765, %lor.lhs.false.757, %land.lhs.true.740, %lor.lhs.false.732
  %519 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld966 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %519, i32 0, i32 1
  %arrayidx967 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld966, i32 0, i64 0
  %rtx968 = bitcast %union.rtunion_def* %arrayidx967 to %struct.rtx_def**
  %520 = load %struct.rtx_def*, %struct.rtx_def** %rtx968, align 8
  %521 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp969 = icmp eq %struct.rtx_def* %520, %521
  br i1 %cmp969, label %land.lhs.true.988, label %lor.lhs.false.971

lor.lhs.false.971:                                ; preds = %if.end.965
  %522 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld972 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %522, i32 0, i32 1
  %arrayidx973 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld972, i32 0, i64 0
  %rtx974 = bitcast %union.rtunion_def* %arrayidx973 to %struct.rtx_def**
  %523 = load %struct.rtx_def*, %struct.rtx_def** %rtx974, align 8
  %524 = bitcast %struct.rtx_def* %523 to i32*
  %bf.load975 = load i32, i32* %524, align 8
  %bf.clear976 = and i32 %bf.load975, 65535
  %cmp977 = icmp eq i32 %bf.clear976, 63
  br i1 %cmp977, label %land.lhs.true.979, label %if.end.1145

land.lhs.true.979:                                ; preds = %lor.lhs.false.971
  %525 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld980 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %525, i32 0, i32 1
  %arrayidx981 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld980, i32 0, i64 0
  %rtx982 = bitcast %union.rtunion_def* %arrayidx981 to %struct.rtx_def**
  %526 = load %struct.rtx_def*, %struct.rtx_def** %rtx982, align 8
  %fld983 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %526, i32 0, i32 1
  %arrayidx984 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld983, i32 0, i64 0
  %rtx985 = bitcast %union.rtunion_def* %arrayidx984 to %struct.rtx_def**
  %527 = load %struct.rtx_def*, %struct.rtx_def** %rtx985, align 8
  %528 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp986 = icmp eq %struct.rtx_def* %527, %528
  br i1 %cmp986, label %land.lhs.true.988, label %if.end.1145

land.lhs.true.988:                                ; preds = %land.lhs.true.979, %if.end.965
  %529 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld989 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %529, i32 0, i32 1
  %arrayidx990 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld989, i32 0, i64 1
  %rtx991 = bitcast %union.rtunion_def* %arrayidx990 to %struct.rtx_def**
  %530 = load %struct.rtx_def*, %struct.rtx_def** %rtx991, align 8
  %531 = bitcast %struct.rtx_def* %530 to i32*
  %bf.load992 = load i32, i32* %531, align 8
  %bf.clear993 = and i32 %bf.load992, 65535
  %cmp994 = icmp eq i32 %bf.clear993, 61
  br i1 %cmp994, label %land.lhs.true.1015, label %lor.lhs.false.996

lor.lhs.false.996:                                ; preds = %land.lhs.true.988
  %532 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld997 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %532, i32 0, i32 1
  %arrayidx998 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld997, i32 0, i64 1
  %rtx999 = bitcast %union.rtunion_def* %arrayidx998 to %struct.rtx_def**
  %533 = load %struct.rtx_def*, %struct.rtx_def** %rtx999, align 8
  %534 = bitcast %struct.rtx_def* %533 to i32*
  %bf.load1000 = load i32, i32* %534, align 8
  %bf.clear1001 = and i32 %bf.load1000, 65535
  %cmp1002 = icmp eq i32 %bf.clear1001, 63
  br i1 %cmp1002, label %land.lhs.true.1004, label %if.end.1145

land.lhs.true.1004:                               ; preds = %lor.lhs.false.996
  %535 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1005 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %535, i32 0, i32 1
  %arrayidx1006 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1005, i32 0, i64 1
  %rtx1007 = bitcast %union.rtunion_def* %arrayidx1006 to %struct.rtx_def**
  %536 = load %struct.rtx_def*, %struct.rtx_def** %rtx1007, align 8
  %fld1008 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %536, i32 0, i32 1
  %arrayidx1009 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1008, i32 0, i64 0
  %rtx1010 = bitcast %union.rtunion_def* %arrayidx1009 to %struct.rtx_def**
  %537 = load %struct.rtx_def*, %struct.rtx_def** %rtx1010, align 8
  %538 = bitcast %struct.rtx_def* %537 to i32*
  %bf.load1011 = load i32, i32* %538, align 8
  %bf.clear1012 = and i32 %bf.load1011, 65535
  %cmp1013 = icmp eq i32 %bf.clear1012, 61
  br i1 %cmp1013, label %land.lhs.true.1015, label %if.end.1145

land.lhs.true.1015:                               ; preds = %land.lhs.true.1004, %land.lhs.true.988
  %539 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %540 = bitcast %struct.rtx_def* %539 to i32*
  %bf.load1016 = load i32, i32* %540, align 8
  %bf.lshr1017 = lshr i32 %bf.load1016, 16
  %bf.clear1018 = and i32 %bf.lshr1017, 255
  %541 = load i32, i32* %promoted_mode.addr, align 4
  %cmp1019 = icmp eq i32 %bf.clear1018, %541
  br i1 %cmp1019, label %land.lhs.true.1021, label %if.end.1145

land.lhs.true.1021:                               ; preds = %land.lhs.true.1015
  %542 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %543 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %544 = bitcast %struct.rtx_def* %543 to i32*
  %bf.load1022 = load i32, i32* %544, align 8
  %bf.clear1023 = and i32 %bf.load1022, 65535
  %idxprom1024 = sext i32 %bf.clear1023 to i64
  %arrayidx1025 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i64 %idxprom1024
  %545 = load i8, i8* %arrayidx1025, align 1
  %conv1026 = sext i8 %545 to i32
  %cmp1027 = icmp eq i32 %conv1026, 105
  br i1 %cmp1027, label %cond.true.1029, label %cond.false.1048

cond.true.1029:                                   ; preds = %land.lhs.true.1021
  %546 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1030 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %546, i32 0, i32 1
  %arrayidx1031 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1030, i32 0, i64 3
  %rtx1032 = bitcast %union.rtunion_def* %arrayidx1031 to %struct.rtx_def**
  %547 = load %struct.rtx_def*, %struct.rtx_def** %rtx1032, align 8
  %548 = bitcast %struct.rtx_def* %547 to i32*
  %bf.load1033 = load i32, i32* %548, align 8
  %bf.clear1034 = and i32 %bf.load1033, 65535
  %cmp1035 = icmp eq i32 %bf.clear1034, 47
  br i1 %cmp1035, label %cond.true.1037, label %cond.false.1041

cond.true.1037:                                   ; preds = %cond.true.1029
  %549 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1038 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %549, i32 0, i32 1
  %arrayidx1039 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1038, i32 0, i64 3
  %rtx1040 = bitcast %union.rtunion_def* %arrayidx1039 to %struct.rtx_def**
  %550 = load %struct.rtx_def*, %struct.rtx_def** %rtx1040, align 8
  br label %cond.end.1046

cond.false.1041:                                  ; preds = %cond.true.1029
  %551 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %552 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1042 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %552, i32 0, i32 1
  %arrayidx1043 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1042, i32 0, i64 3
  %rtx1044 = bitcast %union.rtunion_def* %arrayidx1043 to %struct.rtx_def**
  %553 = load %struct.rtx_def*, %struct.rtx_def** %rtx1044, align 8
  %call1045 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %551, %struct.rtx_def* %553)
  br label %cond.end.1046

cond.end.1046:                                    ; preds = %cond.false.1041, %cond.true.1037
  %cond1047 = phi %struct.rtx_def* [ %550, %cond.true.1037 ], [ %call1045, %cond.false.1041 ]
  br label %cond.end.1049

cond.false.1048:                                  ; preds = %land.lhs.true.1021
  br label %cond.end.1049

cond.end.1049:                                    ; preds = %cond.false.1048, %cond.end.1046
  %cond1050 = phi %struct.rtx_def* [ %cond1047, %cond.end.1046 ], [ null, %cond.false.1048 ]
  %cmp1051 = icmp eq %struct.rtx_def* %542, %cond1050
  br i1 %cmp1051, label %if.then.1053, label %if.end.1145

if.then.1053:                                     ; preds = %cond.end.1049
  %554 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1056 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %554, i32 0, i32 1
  %arrayidx1057 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1056, i32 0, i64 0
  %rtx1058 = bitcast %union.rtunion_def* %arrayidx1057 to %struct.rtx_def**
  %555 = load %struct.rtx_def*, %struct.rtx_def** %rtx1058, align 8
  %556 = bitcast %struct.rtx_def* %555 to i32*
  %bf.load1059 = load i32, i32* %556, align 8
  %bf.clear1060 = and i32 %bf.load1059, 65535
  %cmp1061 = icmp eq i32 %bf.clear1060, 63
  br i1 %cmp1061, label %if.then.1063, label %if.else.1071

if.then.1063:                                     ; preds = %if.then.1053
  %557 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1064 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %557, i32 0, i32 1
  %arrayidx1065 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1064, i32 0, i64 0
  %rtx1066 = bitcast %union.rtunion_def* %arrayidx1065 to %struct.rtx_def**
  %558 = load %struct.rtx_def*, %struct.rtx_def** %rtx1066, align 8
  %559 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %560 = load i32, i32* %promoted_mode.addr, align 4
  %call1067 = call %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %558, %struct.rtx_def* %559, i32 %560, i32 0)
  %561 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1068 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %561, i32 0, i32 1
  %arrayidx1069 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1068, i32 0, i64 0
  %rtx1070 = bitcast %union.rtunion_def* %arrayidx1069 to %struct.rtx_def**
  store %struct.rtx_def* %call1067, %struct.rtx_def** %rtx1070, align 8
  br label %if.end.1079

if.else.1071:                                     ; preds = %if.then.1053
  %562 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1072 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %562, i32 0, i32 1
  %arrayidx1073 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1072, i32 0, i64 0
  %rtx1074 = bitcast %union.rtunion_def* %arrayidx1073 to %struct.rtx_def**
  %563 = load %struct.rtx_def*, %struct.rtx_def** %rtx1074, align 8
  %564 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call1075 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %563, %struct.rtx_def* %564)
  %565 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1076 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %565, i32 0, i32 1
  %arrayidx1077 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1076, i32 0, i64 0
  %rtx1078 = bitcast %union.rtunion_def* %arrayidx1077 to %struct.rtx_def**
  store %struct.rtx_def* %call1075, %struct.rtx_def** %rtx1078, align 8
  br label %if.end.1079

if.end.1079:                                      ; preds = %if.else.1071, %if.then.1063
  %566 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1080 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %566, i32 0, i32 1
  %arrayidx1081 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1080, i32 0, i64 4
  %rtint1082 = bitcast %union.rtunion_def* %arrayidx1081 to i32*
  %567 = load i32, i32* %rtint1082, align 4
  %cmp1083 = icmp sge i32 %567, 0
  br i1 %cmp1083, label %cond.true.1085, label %cond.false.1089

cond.true.1085:                                   ; preds = %if.end.1079
  %568 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1086 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %568, i32 0, i32 1
  %arrayidx1087 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1086, i32 0, i64 4
  %rtint1088 = bitcast %union.rtunion_def* %arrayidx1087 to i32*
  %569 = load i32, i32* %rtint1088, align 4
  br label %cond.end.1091

cond.false.1089:                                  ; preds = %if.end.1079
  %570 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call1090 = call i32 @recog_memoized_1(%struct.rtx_def* %570)
  br label %cond.end.1091

cond.end.1091:                                    ; preds = %cond.false.1089, %cond.true.1085
  %cond1092 = phi i32 [ %569, %cond.true.1085 ], [ %call1090, %cond.false.1089 ]
  %cmp1093 = icmp sge i32 %cond1092, 0
  br i1 %cmp1093, label %if.then.1095, label %if.end.1096

if.then.1095:                                     ; preds = %cond.end.1091
  br label %for.end.1225

if.end.1096:                                      ; preds = %cond.end.1091
  %571 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1097 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %571, i32 0, i32 1
  %arrayidx1098 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1097, i32 0, i64 0
  %rtx1099 = bitcast %union.rtunion_def* %arrayidx1098 to %struct.rtx_def**
  %572 = load %struct.rtx_def*, %struct.rtx_def** %rtx1099, align 8
  %573 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %573, i32 0, i32 1
  %arrayidx1101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1100, i32 0, i64 1
  %rtx1102 = bitcast %union.rtunion_def* %arrayidx1101 to %struct.rtx_def**
  %574 = load %struct.rtx_def*, %struct.rtx_def** %rtx1102, align 8
  %call1103 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %572, %struct.rtx_def* %574)
  store %struct.rtx_def* %call1103, %struct.rtx_def** %pat1054, align 8
  %575 = load %struct.rtx_def*, %struct.rtx_def** %pat1054, align 8
  %576 = bitcast %struct.rtx_def* %575 to i32*
  %bf.load1104 = load i32, i32* %576, align 8
  %bf.clear1105 = and i32 %bf.load1104, 65535
  %cmp1106 = icmp eq i32 %bf.clear1105, 24
  br i1 %cmp1106, label %if.then.1108, label %if.else.1140

if.then.1108:                                     ; preds = %if.end.1096
  %577 = load %struct.rtx_def*, %struct.rtx_def** %pat1054, align 8
  %578 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call1109 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %577, %struct.rtx_def* %578)
  store %struct.rtx_def* %call1109, %struct.rtx_def** %last1055, align 8
  %579 = load %struct.rtx_def*, %struct.rtx_def** %last1055, align 8
  %fld1110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %579, i32 0, i32 1
  %arrayidx1111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1110, i32 0, i64 6
  %rtx1112 = bitcast %union.rtunion_def* %arrayidx1111 to %struct.rtx_def**
  %580 = load %struct.rtx_def*, %struct.rtx_def** %rtx1112, align 8
  %tobool1113 = icmp ne %struct.rtx_def* %580, null
  br i1 %tobool1113, label %land.lhs.true.1114, label %if.end.1120

land.lhs.true.1114:                               ; preds = %if.then.1108
  %581 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %581, i32 0, i32 1
  %arrayidx1116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1115, i32 0, i64 6
  %rtx1117 = bitcast %union.rtunion_def* %arrayidx1116 to %struct.rtx_def**
  %582 = load %struct.rtx_def*, %struct.rtx_def** %rtx1117, align 8
  %tobool1118 = icmp ne %struct.rtx_def* %582, null
  br i1 %tobool1118, label %if.then.1119, label %if.end.1120

if.then.1119:                                     ; preds = %land.lhs.true.1114
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 2468, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__FUNCTION__.fixup_var_refs_1, i32 0, i32 0)) #6
  unreachable

if.end.1120:                                      ; preds = %land.lhs.true.1114, %if.then.1108
  %583 = load %struct.rtx_def*, %struct.rtx_def** %last1055, align 8
  %fld1121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %583, i32 0, i32 1
  %arrayidx1122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1121, i32 0, i64 6
  %rtx1123 = bitcast %union.rtunion_def* %arrayidx1122 to %struct.rtx_def**
  %584 = load %struct.rtx_def*, %struct.rtx_def** %rtx1123, align 8
  %tobool1124 = icmp ne %struct.rtx_def* %584, null
  br i1 %tobool1124, label %if.then.1125, label %if.end.1132

if.then.1125:                                     ; preds = %if.end.1120
  %585 = load %struct.rtx_def*, %struct.rtx_def** %last1055, align 8
  %fld1126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %585, i32 0, i32 1
  %arrayidx1127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1126, i32 0, i64 6
  %rtx1128 = bitcast %union.rtunion_def* %arrayidx1127 to %struct.rtx_def**
  %586 = load %struct.rtx_def*, %struct.rtx_def** %rtx1128, align 8
  %587 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %587, i32 0, i32 1
  %arrayidx1130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1129, i32 0, i64 6
  %rtx1131 = bitcast %union.rtunion_def* %arrayidx1130 to %struct.rtx_def**
  store %struct.rtx_def* %586, %struct.rtx_def** %rtx1131, align 8
  br label %if.end.1132

if.end.1132:                                      ; preds = %if.then.1125, %if.end.1120
  %588 = load %struct.rtx_def*, %struct.rtx_def** %last1055, align 8
  %fld1133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %588, i32 0, i32 1
  %arrayidx1134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1133, i32 0, i64 3
  %rtx1135 = bitcast %union.rtunion_def* %arrayidx1134 to %struct.rtx_def**
  %589 = load %struct.rtx_def*, %struct.rtx_def** %rtx1135, align 8
  %590 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %590, i32 0, i32 1
  %arrayidx1137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1136, i32 0, i64 3
  %rtx1138 = bitcast %union.rtunion_def* %arrayidx1137 to %struct.rtx_def**
  store %struct.rtx_def* %589, %struct.rtx_def** %rtx1138, align 8
  %591 = load %struct.rtx_def*, %struct.rtx_def** %last1055, align 8
  %call1139 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %591)
  br label %if.end.1144

if.else.1140:                                     ; preds = %if.end.1096
  %592 = load %struct.rtx_def*, %struct.rtx_def** %pat1054, align 8
  %593 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %fld1141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %593, i32 0, i32 1
  %arrayidx1142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1141, i32 0, i64 3
  %rtx1143 = bitcast %union.rtunion_def* %arrayidx1142 to %struct.rtx_def**
  store %struct.rtx_def* %592, %struct.rtx_def** %rtx1143, align 8
  br label %if.end.1144

if.end.1144:                                      ; preds = %if.else.1140, %if.end.1132
  br label %for.end.1225

if.end.1145:                                      ; preds = %cond.end.1049, %land.lhs.true.1015, %land.lhs.true.1004, %lor.lhs.false.996, %land.lhs.true.979, %lor.lhs.false.971
  %594 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %595 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %cmp1146 = icmp eq %struct.rtx_def* %594, %595
  br i1 %cmp1146, label %if.then.1148, label %if.end.1183

if.then.1148:                                     ; preds = %if.end.1145
  %596 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %596, i32 0, i32 1
  %arrayidx1150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1149, i32 0, i64 0
  %rtx1151 = bitcast %union.rtunion_def* %arrayidx1150 to %struct.rtx_def**
  %597 = load %struct.rtx_def*, %struct.rtx_def** %rtx1151, align 8
  store %struct.rtx_def* %597, %struct.rtx_def** %fixeddest, align 8
  %598 = load %struct.rtx_def*, %struct.rtx_def** %fixeddest, align 8
  %599 = bitcast %struct.rtx_def* %598 to i32*
  %bf.load1152 = load i32, i32* %599, align 8
  %bf.clear1153 = and i32 %bf.load1152, 65535
  %cmp1154 = icmp eq i32 %bf.clear1153, 64
  br i1 %cmp1154, label %if.then.1156, label %if.end.1160

if.then.1156:                                     ; preds = %if.then.1148
  %600 = load %struct.rtx_def*, %struct.rtx_def** %fixeddest, align 8
  %fld1157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %600, i32 0, i32 1
  %arrayidx1158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1157, i32 0, i64 0
  %rtx1159 = bitcast %union.rtunion_def* %arrayidx1158 to %struct.rtx_def**
  %601 = load %struct.rtx_def*, %struct.rtx_def** %rtx1159, align 8
  store %struct.rtx_def* %601, %struct.rtx_def** %fixeddest, align 8
  br label %if.end.1160

if.end.1160:                                      ; preds = %if.then.1156, %if.then.1148
  %602 = load %struct.rtx_def*, %struct.rtx_def** %fixeddest, align 8
  %603 = bitcast %struct.rtx_def* %602 to i32*
  %bf.load1161 = load i32, i32* %603, align 8
  %bf.clear1162 = and i32 %bf.load1161, 65535
  %cmp1163 = icmp eq i32 %bf.clear1162, 63
  br i1 %cmp1163, label %if.then.1165, label %if.else.1170

if.then.1165:                                     ; preds = %if.end.1160
  %604 = load %struct.rtx_def*, %struct.rtx_def** %fixeddest, align 8
  %605 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %606 = load i32, i32* %promoted_mode.addr, align 4
  %call1166 = call %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %604, %struct.rtx_def* %605, i32 %606, i32 0)
  store %struct.rtx_def* %call1166, %struct.rtx_def** %fixeddest, align 8
  %607 = load %struct.rtx_def*, %struct.rtx_def** %fixeddest, align 8
  %608 = bitcast %struct.rtx_def* %607 to i32*
  %bf.load1167 = load i32, i32* %608, align 8
  %bf.lshr1168 = lshr i32 %bf.load1167, 16
  %bf.clear1169 = and i32 %bf.lshr1168, 255
  store i32 %bf.clear1169, i32* %temp_mode, align 4
  br label %if.end.1172

if.else.1170:                                     ; preds = %if.end.1160
  %609 = load %struct.rtx_def*, %struct.rtx_def** %fixeddest, align 8
  %610 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call1171 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %609, %struct.rtx_def* %610)
  store %struct.rtx_def* %call1171, %struct.rtx_def** %fixeddest, align 8
  %611 = load i32, i32* %promoted_mode.addr, align 4
  store i32 %611, i32* %temp_mode, align 4
  br label %if.end.1172

if.end.1172:                                      ; preds = %if.else.1170, %if.then.1165
  %612 = load i32, i32* %temp_mode, align 4
  %call1173 = call %struct.rtx_def* @gen_reg_rtx(i32 %612)
  store %struct.rtx_def* %call1173, %struct.rtx_def** %temp, align 8
  %613 = load %struct.rtx_def*, %struct.rtx_def** %fixeddest, align 8
  %614 = load %struct.rtx_def*, %struct.rtx_def** %fixeddest, align 8
  %615 = bitcast %struct.rtx_def* %614 to i32*
  %bf.load1174 = load i32, i32* %615, align 8
  %bf.lshr1175 = lshr i32 %bf.load1174, 16
  %bf.clear1176 = and i32 %bf.lshr1175, 255
  %616 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call1177 = call %struct.rtx_def* @gen_lowpart(i32 %bf.clear1176, %struct.rtx_def* %616)
  %call1178 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %613, %struct.rtx_def* %call1177)
  %617 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call1179 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call1178, %struct.rtx_def* %617)
  %618 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %619 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %619, i32 0, i32 1
  %arrayidx1181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1180, i32 0, i64 0
  %rtx1182 = bitcast %union.rtunion_def* %arrayidx1181 to %struct.rtx_def**
  store %struct.rtx_def* %618, %struct.rtx_def** %rtx1182, align 8
  br label %if.end.1183

if.end.1183:                                      ; preds = %if.end.1172, %if.end.1145
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end.1183
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.then.557, %if.then.498, %if.end.351, %if.end.271, %if.end.85
  %620 = load i32, i32* %code, align 4
  %idxprom1184 = sext i32 %620 to i64
  %arrayidx1185 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom1184
  %621 = load i8*, i8** %arrayidx1185, align 8
  store i8* %621, i8** %fmt, align 8
  %622 = load i32, i32* %code, align 4
  %idxprom1186 = sext i32 %622 to i64
  %arrayidx1187 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom1186
  %623 = load i8, i8* %arrayidx1187, align 1
  %conv1188 = zext i8 %623 to i32
  %sub1189 = sub nsw i32 %conv1188, 1
  store i32 %sub1189, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.1224, %sw.epilog
  %624 = load i32, i32* %i, align 4
  %cmp1190 = icmp sge i32 %624, 0
  br i1 %cmp1190, label %for.body, label %for.end.1225

for.body:                                         ; preds = %for.cond
  %625 = load i32, i32* %i, align 4
  %idxprom1192 = sext i32 %625 to i64
  %626 = load i8*, i8** %fmt, align 8
  %arrayidx1193 = getelementptr inbounds i8, i8* %626, i64 %idxprom1192
  %627 = load i8, i8* %arrayidx1193, align 1
  %conv1194 = sext i8 %627 to i32
  %cmp1195 = icmp eq i32 %conv1194, 101
  br i1 %cmp1195, label %if.then.1197, label %if.else.1202

if.then.1197:                                     ; preds = %for.body
  %628 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %629 = load i32, i32* %promoted_mode.addr, align 4
  %630 = load i32, i32* %i, align 4
  %idxprom1198 = sext i32 %630 to i64
  %631 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %631, i32 0, i32 1
  %arrayidx1200 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1199, i32 0, i64 %idxprom1198
  %rtx1201 = bitcast %union.rtunion_def* %arrayidx1200 to %struct.rtx_def**
  %632 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %633 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %634 = load %struct.rtx_def*, %struct.rtx_def** %no_share.addr, align 8
  call void @fixup_var_refs_1(%struct.rtx_def* %628, i32 %629, %struct.rtx_def** %rtx1201, %struct.rtx_def* %632, %struct.fixup_replacement** %633, %struct.rtx_def* %634)
  br label %if.end.1223

if.else.1202:                                     ; preds = %for.body
  %635 = load i32, i32* %i, align 4
  %idxprom1203 = sext i32 %635 to i64
  %636 = load i8*, i8** %fmt, align 8
  %arrayidx1204 = getelementptr inbounds i8, i8* %636, i64 %idxprom1203
  %637 = load i8, i8* %arrayidx1204, align 1
  %conv1205 = sext i8 %637 to i32
  %cmp1206 = icmp eq i32 %conv1205, 69
  br i1 %cmp1206, label %if.then.1208, label %if.end.1222

if.then.1208:                                     ; preds = %if.else.1202
  store i32 0, i32* %j, align 4
  br label %for.cond.1209

for.cond.1209:                                    ; preds = %for.inc, %if.then.1208
  %638 = load i32, i32* %j, align 4
  %639 = load i32, i32* %i, align 4
  %idxprom1210 = sext i32 %639 to i64
  %640 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1211 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %640, i32 0, i32 1
  %arrayidx1212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1211, i32 0, i64 %idxprom1210
  %rtvec = bitcast %union.rtunion_def* %arrayidx1212 to %struct.rtvec_def**
  %641 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %641, i32 0, i32 0
  %642 = load i32, i32* %num_elem, align 4
  %cmp1213 = icmp slt i32 %638, %642
  br i1 %cmp1213, label %for.body.1215, label %for.end

for.body.1215:                                    ; preds = %for.cond.1209
  %643 = load %struct.rtx_def*, %struct.rtx_def** %var.addr, align 8
  %644 = load i32, i32* %promoted_mode.addr, align 4
  %645 = load i32, i32* %j, align 4
  %idxprom1216 = sext i32 %645 to i64
  %646 = load i32, i32* %i, align 4
  %idxprom1217 = sext i32 %646 to i64
  %647 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8
  %fld1218 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %647, i32 0, i32 1
  %arrayidx1219 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1218, i32 0, i64 %idxprom1217
  %rtvec1220 = bitcast %union.rtunion_def* %arrayidx1219 to %struct.rtvec_def**
  %648 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec1220, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %648, i32 0, i32 1
  %arrayidx1221 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom1216
  %649 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %650 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %651 = load %struct.rtx_def*, %struct.rtx_def** %no_share.addr, align 8
  call void @fixup_var_refs_1(%struct.rtx_def* %643, i32 %644, %struct.rtx_def** %arrayidx1221, %struct.rtx_def* %649, %struct.fixup_replacement** %650, %struct.rtx_def* %651)
  br label %for.inc

for.inc:                                          ; preds = %for.body.1215
  %652 = load i32, i32* %j, align 4
  %inc = add nsw i32 %652, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.1209

for.end:                                          ; preds = %for.cond.1209
  br label %if.end.1222

if.end.1222:                                      ; preds = %for.end, %if.else.1202
  br label %if.end.1223

if.end.1223:                                      ; preds = %if.end.1222, %if.then.1197
  br label %for.inc.1224

for.inc.1224:                                     ; preds = %if.end.1223
  %653 = load i32, i32* %i, align 4
  %dec = add nsw i32 %653, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end.1225:                                     ; preds = %if.end.34, %if.then.40, %if.then.67, %if.end.68, %sw.bb.86, %if.end.137, %if.then.255, %if.end.261, %if.then.283, %if.end.310, %if.then.319, %if.then.344, %if.end.345, %if.then.687, %if.end.693, %if.then.915, %if.end.964, %if.then.1095, %if.end.1144, %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %x, %struct.rtx_def* %insn, i32 %promoted_mode, i32 %uncritical) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %uncritical.addr = alloca i32, align 4
  %offset = alloca i32, align 4
  %mem = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %result = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store i32 %uncritical, i32* %uncritical.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %1, %struct.rtx_def** %mem, align 8
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  store %struct.rtx_def* %3, %struct.rtx_def** %addr, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  store i32 %bf.clear, i32* %mode, align 4
  %6 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx4 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx4, align 1
  %conv = zext i8 %7 to i32
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load5 = load i32, i32* %9, align 8
  %bf.lshr6 = lshr i32 %bf.load5, 16
  %bf.clear7 = and i32 %bf.lshr6, 255
  %idxprom8 = sext i32 %bf.clear7 to i64
  %arrayidx9 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom8
  %10 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %10 to i32
  %cmp = icmp sgt i32 %conv, %conv10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %11 = load i32, i32* %uncritical.addr, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 2571, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.fixup_memory_subreg, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i32 0, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %13 = load i32, i32* %rtuint, align 4
  store i32 %13, i32* %offset, align 4
  %14 = load i32, i32* @flag_force_addr, align 4
  %tobool14 = icmp ne i32 %14, 0
  br i1 %tobool14, label %if.end.22, label %land.lhs.true.15

land.lhs.true.15:                                 ; preds = %if.end
  %15 = load i32, i32* %mode, align 4
  %16 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %17 = load i32, i32* %offset, align 4
  %conv16 = sext i32 %17 to i64
  %call = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %16, i64 %conv16)
  %call17 = call i32 @memory_address_p(i32 %15, %struct.rtx_def* %call)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.22

if.then.19:                                       ; preds = %land.lhs.true.15
  %18 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %19 = load i32, i32* %mode, align 4
  %20 = load i32, i32* %offset, align 4
  %conv20 = sext i32 %20 to i64
  %call21 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %18, i32 %19, i64 %conv20, i32 1, i32 1)
  store %struct.rtx_def* %call21, %struct.rtx_def** %retval
  br label %return

if.end.22:                                        ; preds = %land.lhs.true.15, %if.end
  call void @start_sequence()
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8
  %22 = load i32, i32* %mode, align 4
  %23 = load i32, i32* %offset, align 4
  %conv23 = sext i32 %23 to i64
  %call24 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %21, i32 %22, i64 %conv23, i32 1, i32 1)
  store %struct.rtx_def* %call24, %struct.rtx_def** %result, align 8
  %call25 = call %struct.rtx_def* @gen_sequence()
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call26 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call25, %struct.rtx_def* %24)
  call void @end_sequence()
  %25 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8
  store %struct.rtx_def* %25, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.22, %if.then.19
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %26
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %x, %struct.rtx_def* %insn) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %ad = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %j = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %2 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %2, 66
  br i1 %cmp, label %if.then, label %if.end.77

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %ad, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load1 = load i32, i32* %6, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 75
  br i1 %cmp3, label %land.lhs.true, label %if.end.76

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i32 0, i64 0
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtx6, align 8
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load7 = load i32, i32* %9, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 61
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.76

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i32 0, i64 0
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx13, align 8
  %fld14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx15 to i32*
  %12 = load i32, i32* %rtuint, align 4
  %cmp16 = icmp uge i32 %12, 53
  br i1 %cmp16, label %land.lhs.true.17, label %lor.lhs.false

land.lhs.true.17:                                 ; preds = %land.lhs.true.10
  %13 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i32 0, i64 0
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx20, align 8
  %fld21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i32 0, i64 0
  %rtuint23 = bitcast %union.rtunion_def* %arrayidx22 to i32*
  %15 = load i32, i32* %rtuint23, align 4
  %cmp24 = icmp ule i32 %15, 57
  br i1 %cmp24, label %land.lhs.true.61, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.17, %land.lhs.true.10
  %16 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 0
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx27, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 0
  %rtuint30 = bitcast %union.rtunion_def* %arrayidx29 to i32*
  %18 = load i32, i32* %rtuint30, align 4
  %cmp31 = icmp eq i32 %18, 20
  br i1 %cmp31, label %land.lhs.true.61, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %lor.lhs.false
  %19 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i32 0, i64 0
  %rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx35, align 8
  %fld36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i32 0, i64 0
  %rtuint38 = bitcast %union.rtunion_def* %arrayidx37 to i32*
  %21 = load i32, i32* %rtuint38, align 4
  %cmp39 = icmp eq i32 %21, 6
  br i1 %cmp39, label %land.lhs.true.61, label %lor.lhs.false.40

lor.lhs.false.40:                                 ; preds = %lor.lhs.false.32
  %22 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i32 0, i64 0
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx43, align 8
  %fld44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i32 0, i64 0
  %rtuint46 = bitcast %union.rtunion_def* %arrayidx45 to i32*
  %24 = load i32, i32* %rtuint46, align 4
  %cmp47 = icmp eq i32 %24, 7
  br i1 %cmp47, label %land.lhs.true.61, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %lor.lhs.false.40
  %25 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtuint54 = bitcast %union.rtunion_def* %arrayidx53 to i32*
  %27 = load i32, i32* %rtuint54, align 4
  %cmp55 = icmp eq i32 %27, 16
  br i1 %cmp55, label %land.lhs.true.61, label %lor.lhs.false.56

lor.lhs.false.56:                                 ; preds = %lor.lhs.false.48
  %28 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 0
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx59, align 8
  %30 = load %struct.function*, %struct.function** @cfun, align 8
  %internal_arg_pointer = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 15
  %31 = load %struct.rtx_def*, %struct.rtx_def** %internal_arg_pointer, align 8
  %cmp60 = icmp eq %struct.rtx_def* %29, %31
  br i1 %cmp60, label %land.lhs.true.61, label %if.end.76

land.lhs.true.61:                                 ; preds = %lor.lhs.false.56, %lor.lhs.false.48, %lor.lhs.false.40, %lor.lhs.false.32, %lor.lhs.false, %land.lhs.true.17
  %32 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %fld62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i32 0, i64 1
  %rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtx64, align 8
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load65 = load i32, i32* %34, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 54
  br i1 %cmp67, label %if.then.68, label %if.end.76

if.then.68:                                       ; preds = %land.lhs.true.61
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %36 = bitcast %struct.rtx_def* %35 to i32*
  %bf.load69 = load i32, i32* %36, align 8
  %bf.lshr = lshr i32 %bf.load69, 16
  %bf.clear70 = and i32 %bf.lshr, 255
  %37 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %call = call i32 @memory_address_p(i32 %bf.clear70, %struct.rtx_def* %37)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.71, label %if.end

if.then.71:                                       ; preds = %if.then.68
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %if.then.68
  call void @start_sequence()
  %39 = load %struct.rtx_def*, %struct.rtx_def** %ad, align 8
  %call72 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %39)
  store %struct.rtx_def* %call72, %struct.rtx_def** %temp, align 8
  %call73 = call %struct.rtx_def* @gen_sequence()
  store %struct.rtx_def* %call73, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %40 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call74 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %40, %struct.rtx_def* %41)
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %43 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8
  %call75 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %42, %struct.rtx_def* %43)
  store %struct.rtx_def* %call75, %struct.rtx_def** %retval
  br label %return

if.end.76:                                        ; preds = %land.lhs.true.61, %lor.lhs.false.56, %land.lhs.true, %if.then
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %44, %struct.rtx_def** %retval
  br label %return

if.end.77:                                        ; preds = %entry
  %45 = load i32, i32* %code, align 4
  %idxprom = sext i32 %45 to i64
  %arrayidx78 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %46 = load i8*, i8** %arrayidx78, align 8
  store i8* %46, i8** %fmt, align 8
  %47 = load i32, i32* %code, align 4
  %idxprom79 = sext i32 %47 to i64
  %arrayidx80 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom79
  %48 = load i8, i8* %arrayidx80, align 1
  %conv = zext i8 %48 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.127, %if.end.77
  %49 = load i32, i32* %i, align 4
  %cmp81 = icmp sge i32 %49, 0
  br i1 %cmp81, label %for.body, label %for.end.128

for.body:                                         ; preds = %for.cond
  %50 = load i32, i32* %i, align 4
  %idxprom83 = sext i32 %50 to i64
  %51 = load i8*, i8** %fmt, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %51, i64 %idxprom83
  %52 = load i8, i8* %arrayidx84, align 1
  %conv85 = sext i8 %52 to i32
  %cmp86 = icmp eq i32 %conv85, 101
  br i1 %cmp86, label %if.then.88, label %if.else

if.then.88:                                       ; preds = %for.body
  %53 = load i32, i32* %i, align 4
  %idxprom89 = sext i32 %53 to i64
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i32 0, i64 %idxprom89
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx92, align 8
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call93 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %55, %struct.rtx_def* %56)
  %57 = load i32, i32* %i, align 4
  %idxprom94 = sext i32 %57 to i64
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 %idxprom94
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  store %struct.rtx_def* %call93, %struct.rtx_def** %rtx97, align 8
  br label %if.end.126

if.else:                                          ; preds = %for.body
  %59 = load i32, i32* %i, align 4
  %idxprom98 = sext i32 %59 to i64
  %60 = load i8*, i8** %fmt, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %60, i64 %idxprom98
  %61 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %61 to i32
  %cmp101 = icmp eq i32 %conv100, 69
  br i1 %cmp101, label %if.then.103, label %if.end.125

if.then.103:                                      ; preds = %if.else
  store i32 0, i32* %j, align 4
  br label %for.cond.104

for.cond.104:                                     ; preds = %for.inc, %if.then.103
  %62 = load i32, i32* %j, align 4
  %63 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %63 to i64
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i32 0, i64 %idxprom105
  %rtvec = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtvec_def**
  %65 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %65, i32 0, i32 0
  %66 = load i32, i32* %num_elem, align 4
  %cmp108 = icmp slt i32 %62, %66
  br i1 %cmp108, label %for.body.110, label %for.end

for.body.110:                                     ; preds = %for.cond.104
  %67 = load i32, i32* %j, align 4
  %idxprom111 = sext i32 %67 to i64
  %68 = load i32, i32* %i, align 4
  %idxprom112 = sext i32 %68 to i64
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i32 0, i64 %idxprom112
  %rtvec115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtvec_def**
  %70 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec115, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %70, i32 0, i32 1
  %arrayidx116 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom111
  %71 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx116, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call117 = call %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %71, %struct.rtx_def* %72)
  %73 = load i32, i32* %j, align 4
  %idxprom118 = sext i32 %73 to i64
  %74 = load i32, i32* %i, align 4
  %idxprom119 = sext i32 %74 to i64
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld120, i32 0, i64 %idxprom119
  %rtvec122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtvec_def**
  %76 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec122, align 8
  %elem123 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %76, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem123, i32 0, i64 %idxprom118
  store %struct.rtx_def* %call117, %struct.rtx_def** %arrayidx124, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.110
  %77 = load i32, i32* %j, align 4
  %inc = add nsw i32 %77, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.104

for.end:                                          ; preds = %for.cond.104
  br label %if.end.125

if.end.125:                                       ; preds = %for.end, %if.else
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %if.then.88
  br label %for.inc.127

for.inc.127:                                      ; preds = %if.end.126
  %78 = load i32, i32* %i, align 4
  %dec = add nsw i32 %78, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end.128:                                      ; preds = %for.cond
  %79 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %79, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %for.end.128, %if.end.76, %if.end, %if.then.71
  %80 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %80
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @walk_fixup_memory_subreg(%struct.rtx_def* %x, %struct.rtx_def* %insn, i32 %promoted_mode, i32 %uncritical) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %promoted_mode.addr = alloca i32, align 4
  %uncritical.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store i32 %promoted_mode, i32* %promoted_mode.addr, align 4
  store i32 %uncritical, i32* %uncritical.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  store i32 %bf.clear, i32* %code, align 4
  %3 = load i32, i32* %code, align 4
  %cmp1 = icmp eq i32 %3, 63
  br i1 %cmp1, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load2 = load i32, i32* %6, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 66
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %9 = load i32, i32* %promoted_mode.addr, align 4
  %10 = load i32, i32* %uncritical.addr, align 4
  %call = call %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* %7, %struct.rtx_def* %8, i32 %9, i32 %10)
  store %struct.rtx_def* %call, %struct.rtx_def** %retval
  br label %return

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %11 = load i32, i32* %code, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx7 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i64 %idxprom
  %12 = load i8*, i8** %arrayidx7, align 8
  store i8* %12, i8** %fmt, align 8
  %13 = load i32, i32* %code, align 4
  %idxprom8 = sext i32 %13 to i64
  %arrayidx9 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i64 %idxprom8
  %14 = load i8, i8* %arrayidx9, align 1
  %conv = zext i8 %14 to i32
  %sub = sub nsw i32 %conv, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.56, %if.end.6
  %15 = load i32, i32* %i, align 4
  %cmp10 = icmp sge i32 %15, 0
  br i1 %cmp10, label %for.body, label %for.end.57

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %16 to i64
  %17 = load i8*, i8** %fmt, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %17, i64 %idxprom12
  %18 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %18 to i32
  %cmp15 = icmp eq i32 %conv14, 101
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %19 to i64
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 %idxprom18
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %23 = load i32, i32* %promoted_mode.addr, align 4
  %24 = load i32, i32* %uncritical.addr, align 4
  %call22 = call %struct.rtx_def* @walk_fixup_memory_subreg(%struct.rtx_def* %21, %struct.rtx_def* %22, i32 %23, i32 %24)
  %25 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %25 to i64
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i32 0, i64 %idxprom23
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  store %struct.rtx_def* %call22, %struct.rtx_def** %rtx26, align 8
  br label %if.end.55

if.else:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %27 to i64
  %28 = load i8*, i8** %fmt, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %28, i64 %idxprom27
  %29 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %29 to i32
  %cmp30 = icmp eq i32 %conv29, 69
  br i1 %cmp30, label %if.then.32, label %if.end.54

if.then.32:                                       ; preds = %if.else
  store i32 0, i32* %j, align 4
  br label %for.cond.33

for.cond.33:                                      ; preds = %for.inc, %if.then.32
  %30 = load i32, i32* %j, align 4
  %31 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %31 to i64
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i32 0, i64 %idxprom34
  %rtvec = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**
  %33 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %33, i32 0, i32 0
  %34 = load i32, i32* %num_elem, align 4
  %cmp37 = icmp slt i32 %30, %34
  br i1 %cmp37, label %for.body.39, label %for.end

for.body.39:                                      ; preds = %for.cond.33
  %35 = load i32, i32* %j, align 4
  %idxprom40 = sext i32 %35 to i64
  %36 = load i32, i32* %i, align 4
  %idxprom41 = sext i32 %36 to i64
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i32 0, i64 %idxprom41
  %rtvec44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtvec_def**
  %38 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec44, align 8
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %38, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i32 0, i64 %idxprom40
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx45, align 8
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %41 = load i32, i32* %promoted_mode.addr, align 4
  %42 = load i32, i32* %uncritical.addr, align 4
  %call46 = call %struct.rtx_def* @walk_fixup_memory_subreg(%struct.rtx_def* %39, %struct.rtx_def* %40, i32 %41, i32 %42)
  %43 = load i32, i32* %j, align 4
  %idxprom47 = sext i32 %43 to i64
  %44 = load i32, i32* %i, align 4
  %idxprom48 = sext i32 %44 to i64
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 %idxprom48
  %rtvec51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtvec_def**
  %46 = load %struct.rtvec_def*, %struct.rtvec_def** %rtvec51, align 8
  %elem52 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %46, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem52, i32 0, i64 %idxprom47
  store %struct.rtx_def* %call46, %struct.rtx_def** %arrayidx53, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.39
  %47 = load i32, i32* %j, align 4
  %inc = add nsw i32 %47, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.33

for.end:                                          ; preds = %for.cond.33
  br label %if.end.54

if.end.54:                                        ; preds = %for.end, %if.else
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then.17
  br label %for.inc.56

for.inc.56:                                       ; preds = %if.end.55
  %48 = load i32, i32* %i, align 4
  %dec = add nsw i32 %48, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end.57:                                       ; preds = %for.cond
  %49 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  store %struct.rtx_def* %49, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %for.end.57, %if.then.5, %if.then
  %50 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %50
}

declare i32 @validate_replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare i32 @recog_memoized_1(%struct.rtx_def*) #2

declare %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal %struct.fixup_replacement* @find_fixup_replacement(%struct.fixup_replacement** %replacements, %struct.rtx_def* %x) #0 {
entry:
  %replacements.addr = alloca %struct.fixup_replacement**, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.fixup_replacement*, align 8
  store %struct.fixup_replacement** %replacements, %struct.fixup_replacement*** %replacements.addr, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  %0 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %1 = load %struct.fixup_replacement*, %struct.fixup_replacement** %0, align 8
  store %struct.fixup_replacement* %1, %struct.fixup_replacement** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  %cmp = icmp ne %struct.fixup_replacement* %2, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  %old = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %3, i32 0, i32 0
  %4 = load %struct.rtx_def*, %struct.rtx_def** %old, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %4, %struct.rtx_def* %5)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  %next = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %7, i32 0, i32 2
  %8 = load %struct.fixup_replacement*, %struct.fixup_replacement** %next, align 8
  store %struct.fixup_replacement* %8, %struct.fixup_replacement** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %9 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  %cmp1 = icmp eq %struct.fixup_replacement* %9, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %call2 = call noalias i8* @xmalloc(i64 24)
  %10 = bitcast i8* %call2 to %struct.fixup_replacement*
  store %struct.fixup_replacement* %10, %struct.fixup_replacement** %p, align 8
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %12 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  %old3 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %12, i32 0, i32 0
  store %struct.rtx_def* %11, %struct.rtx_def** %old3, align 8
  %13 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  %new = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %13, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %new, align 8
  %14 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  %15 = load %struct.fixup_replacement*, %struct.fixup_replacement** %14, align 8
  %16 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  %next4 = getelementptr inbounds %struct.fixup_replacement, %struct.fixup_replacement* %16, i32 0, i32 2
  store %struct.fixup_replacement* %15, %struct.fixup_replacement** %next4, align 8
  %17 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  %18 = load %struct.fixup_replacement**, %struct.fixup_replacement*** %replacements.addr, align 8
  store %struct.fixup_replacement* %17, %struct.fixup_replacement** %18, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %19 = load %struct.fixup_replacement*, %struct.fixup_replacement** %p, align 8
  ret %struct.fixup_replacement* %19
}

declare %struct.rtx_def* @copy_most_rtx(%struct.rtx_def*, %struct.rtx_def*) #2

declare i32 @mode_dependent_address_p(%struct.rtx_def*) #2

declare i32 @mode_for_extraction(i32, i32) #2

; Function Attrs: nounwind uwtable
define internal void @optimize_bit_field(%struct.rtx_def* %body, %struct.rtx_def* %insn, %struct.rtx_def** %equiv_mem) #0 {
entry:
  %body.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %equiv_mem.addr = alloca %struct.rtx_def**, align 8
  %bitfield = alloca %struct.rtx_def*, align 8
  %destflag = alloca i32, align 4
  %seq = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %memref = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %newreg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %body, %struct.rtx_def** %body.addr, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  store %struct.rtx_def** %equiv_mem, %struct.rtx_def*** %equiv_mem.addr, align 8
  store %struct.rtx_def* null, %struct.rtx_def** %seq, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 132
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1, i32 0, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx3, align 8
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load4 = load i32, i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 133
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  store %struct.rtx_def* %7, %struct.rtx_def** %bitfield, align 8
  store i32 1, i32* %destflag, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i32 0, i64 1
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx12, align 8
  store %struct.rtx_def* %9, %struct.rtx_def** %bitfield, align 8
  store i32 0, i32* %destflag, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i32 0, i64 1
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx15, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load16 = load i32, i32* %12, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp eq i32 %bf.clear17, 54
  br i1 %cmp18, label %land.lhs.true, label %if.end.385

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 2
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load22 = load i32, i32* %15, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 54
  br i1 %cmp24, label %land.lhs.true.25, label %if.end.385

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i32 0, i64 1
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx28, align 8
  %fld29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx30 to i64*
  %18 = load i64, i64* %rtwint, align 8
  %conv = trunc i64 %18 to i32
  %call = call i32 @mode_for_size(i32 %conv, i32 1, i32 1)
  store i32 %call, i32* %mode, align 4
  %cmp31 = icmp ne i32 %call, 51
  br i1 %cmp31, label %land.lhs.true.33, label %if.end.385

land.lhs.true.33:                                 ; preds = %land.lhs.true.25
  %19 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i32 0, i64 2
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtx36, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtwint39 = bitcast %union.rtunion_def* %arrayidx38 to i64*
  %21 = load i64, i64* %rtwint39, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i32 0, i64 1
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtx42, align 8
  %fld43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i32 0, i64 0
  %rtwint45 = bitcast %union.rtunion_def* %arrayidx44 to i64*
  %24 = load i64, i64* %rtwint45, align 8
  %rem = srem i64 %21, %24
  %cmp46 = icmp eq i64 %rem, 0
  br i1 %cmp46, label %if.then.48, label %if.end.385

if.then.48:                                       ; preds = %land.lhs.true.33
  store %struct.rtx_def* null, %struct.rtx_def** %memref, align 8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i32 0, i64 0
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtx51, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load52 = load i32, i32* %27, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 66
  br i1 %cmp54, label %if.then.56, label %if.else.60

if.then.56:                                       ; preds = %if.then.48
  %28 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i32 0, i64 0
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx59, align 8
  store %struct.rtx_def* %29, %struct.rtx_def** %memref, align 8
  br label %if.end.141

if.else.60:                                       ; preds = %if.then.48
  %30 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i32 0, i64 0
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx63, align 8
  %32 = bitcast %struct.rtx_def* %31 to i32*
  %bf.load64 = load i32, i32* %32, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %cmp66 = icmp eq i32 %bf.clear65, 61
  br i1 %cmp66, label %land.lhs.true.68, label %if.else.78

land.lhs.true.68:                                 ; preds = %if.else.60
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %equiv_mem.addr, align 8
  %cmp69 = icmp ne %struct.rtx_def** %33, null
  br i1 %cmp69, label %if.then.71, label %if.else.78

if.then.71:                                       ; preds = %land.lhs.true.68
  %34 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i32 0, i64 0
  %rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtx74, align 8
  %fld75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx76 to i32*
  %36 = load i32, i32* %rtuint, align 4
  %idxprom = zext i32 %36 to i64
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %equiv_mem.addr, align 8
  %arrayidx77 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %37, i64 %idxprom
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx77, align 8
  store %struct.rtx_def* %38, %struct.rtx_def** %memref, align 8
  br label %if.end.140

if.else.78:                                       ; preds = %land.lhs.true.68, %if.else.60
  %39 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i32 0, i64 0
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx81, align 8
  %41 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load82 = load i32, i32* %41, align 8
  %bf.clear83 = and i32 %bf.load82, 65535
  %cmp84 = icmp eq i32 %bf.clear83, 63
  br i1 %cmp84, label %land.lhs.true.86, label %if.else.104

land.lhs.true.86:                                 ; preds = %if.else.78
  %42 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i32 0, i64 0
  %rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx89, align 8
  %fld90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i32 0, i64 0
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx92, align 8
  %45 = bitcast %struct.rtx_def* %44 to i32*
  %bf.load93 = load i32, i32* %45, align 8
  %bf.clear94 = and i32 %bf.load93, 65535
  %cmp95 = icmp eq i32 %bf.clear94, 66
  br i1 %cmp95, label %if.then.97, label %if.else.104

if.then.97:                                       ; preds = %land.lhs.true.86
  %46 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i32 0, i64 0
  %rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx100, align 8
  %fld101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i32 0, i64 0
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx103, align 8
  store %struct.rtx_def* %48, %struct.rtx_def** %memref, align 8
  br label %if.end.139

if.else.104:                                      ; preds = %land.lhs.true.86, %if.else.78
  %49 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld105, i32 0, i64 0
  %rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx107, align 8
  %51 = bitcast %struct.rtx_def* %50 to i32*
  %bf.load108 = load i32, i32* %51, align 8
  %bf.clear109 = and i32 %bf.load108, 65535
  %cmp110 = icmp eq i32 %bf.clear109, 63
  br i1 %cmp110, label %land.lhs.true.112, label %if.end.138

land.lhs.true.112:                                ; preds = %if.else.104
  %52 = load %struct.rtx_def**, %struct.rtx_def*** %equiv_mem.addr, align 8
  %cmp113 = icmp ne %struct.rtx_def** %52, null
  br i1 %cmp113, label %land.lhs.true.115, label %if.end.138

land.lhs.true.115:                                ; preds = %land.lhs.true.112
  %53 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i32 0, i64 0
  %rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rtx118, align 8
  %fld119 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i32 0, i64 0
  %rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtx121, align 8
  %56 = bitcast %struct.rtx_def* %55 to i32*
  %bf.load122 = load i32, i32* %56, align 8
  %bf.clear123 = and i32 %bf.load122, 65535
  %cmp124 = icmp eq i32 %bf.clear123, 61
  br i1 %cmp124, label %if.then.126, label %if.end.138

if.then.126:                                      ; preds = %land.lhs.true.115
  %57 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i32 0, i64 0
  %rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtx129, align 8
  %fld130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i32 0, i64 0
  %rtx132 = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rtx132, align 8
  %fld133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i32 0, i64 0
  %rtuint135 = bitcast %union.rtunion_def* %arrayidx134 to i32*
  %60 = load i32, i32* %rtuint135, align 4
  %idxprom136 = zext i32 %60 to i64
  %61 = load %struct.rtx_def**, %struct.rtx_def*** %equiv_mem.addr, align 8
  %arrayidx137 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %61, i64 %idxprom136
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx137, align 8
  store %struct.rtx_def* %62, %struct.rtx_def** %memref, align 8
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.126, %land.lhs.true.115, %land.lhs.true.112, %if.else.104
  br label %if.end.139

if.end.139:                                       ; preds = %if.end.138, %if.then.97
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139, %if.then.71
  br label %if.end.141

if.end.141:                                       ; preds = %if.end.140, %if.then.56
  %63 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %tobool = icmp ne %struct.rtx_def* %63, null
  br i1 %tobool, label %land.lhs.true.142, label %if.end.384

land.lhs.true.142:                                ; preds = %if.end.141
  %64 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %fld143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1
  %arrayidx144 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld143, i32 0, i64 0
  %rtx145 = bitcast %union.rtunion_def* %arrayidx144 to %struct.rtx_def**
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtx145, align 8
  %call146 = call i32 @mode_dependent_address_p(%struct.rtx_def* %65)
  %tobool147 = icmp ne i32 %call146, 0
  br i1 %tobool147, label %if.end.384, label %land.lhs.true.148

land.lhs.true.148:                                ; preds = %land.lhs.true.142
  %66 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %67 = bitcast %struct.rtx_def* %66 to i32*
  %bf.load149 = load i32, i32* %67, align 8
  %bf.lshr = lshr i32 %bf.load149, 27
  %bf.clear150 = and i32 %bf.lshr, 1
  %tobool151 = icmp ne i32 %bf.clear150, 0
  br i1 %tobool151, label %if.end.384, label %if.then.152

if.then.152:                                      ; preds = %land.lhs.true.148
  %68 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i32 0, i64 2
  %rtx155 = bitcast %union.rtunion_def* %arrayidx154 to %struct.rtx_def**
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rtx155, align 8
  %fld156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i32 0, i64 0
  %rtwint158 = bitcast %union.rtunion_def* %arrayidx157 to i64*
  %70 = load i64, i64* %rtwint158, align 8
  store i64 %70, i64* %offset, align 8
  %71 = load i64, i64* %offset, align 8
  %div = sdiv i64 %71, 8
  store i64 %div, i64* %offset, align 8
  %72 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i32 0, i64 0
  %rtx161 = bitcast %union.rtunion_def* %arrayidx160 to %struct.rtx_def**
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtx161, align 8
  %74 = bitcast %struct.rtx_def* %73 to i32*
  %bf.load162 = load i32, i32* %74, align 8
  %bf.clear163 = and i32 %bf.load162, 65535
  %cmp164 = icmp eq i32 %bf.clear163, 63
  br i1 %cmp164, label %if.then.166, label %if.end.179

if.then.166:                                      ; preds = %if.then.152
  %75 = load %struct.rtx_def*, %struct.rtx_def** %bitfield, align 8
  %fld167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i32 0, i64 0
  %rtx169 = bitcast %union.rtunion_def* %arrayidx168 to %struct.rtx_def**
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rtx169, align 8
  %fld170 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i32 0, i64 1
  %rtuint172 = bitcast %union.rtunion_def* %arrayidx171 to i32*
  %77 = load i32, i32* %rtuint172, align 4
  %78 = load i32, i32* @target_flags, align 4
  %and = and i32 %78, 33554432
  %tobool173 = icmp ne i32 %and, 0
  %cond = select i1 %tobool173, i32 8, i32 4
  %div174 = udiv i32 %77, %cond
  %79 = load i32, i32* @target_flags, align 4
  %and175 = and i32 %79, 33554432
  %tobool176 = icmp ne i32 %and175, 0
  %cond177 = select i1 %tobool176, i32 8, i32 4
  %mul = mul i32 %div174, %cond177
  %conv178 = zext i32 %mul to i64
  %80 = load i64, i64* %offset, align 8
  %add = add nsw i64 %80, %conv178
  store i64 %add, i64* %offset, align 8
  br label %if.end.179

if.end.179:                                       ; preds = %if.then.166, %if.then.152
  call void @start_sequence()
  %81 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %82 = load i32, i32* %mode, align 4
  %83 = load i64, i64* %offset, align 8
  %call180 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %81, i32 %82, i64 %83, i32 1, i32 1)
  store %struct.rtx_def* %call180, %struct.rtx_def** %memref, align 8
  %call181 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call181, %struct.rtx_def** %insns, align 8
  call void @end_sequence()
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call182 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %84, %struct.rtx_def* %85)
  %86 = load i32, i32* %destflag, align 4
  %tobool183 = icmp ne i32 %86, 0
  br i1 %tobool183, label %if.then.184, label %if.else.289

if.then.184:                                      ; preds = %if.end.179
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %88 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i32 0, i64 0
  %rtx187 = bitcast %union.rtunion_def* %arrayidx186 to %struct.rtx_def**
  %89 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %call188 = call i32 @validate_change(%struct.rtx_def* %87, %struct.rtx_def** %rtx187, %struct.rtx_def* %89, i32 1)
  %90 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i32 0, i64 1
  %rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**
  %91 = load %struct.rtx_def*, %struct.rtx_def** %rtx191, align 8
  %92 = bitcast %struct.rtx_def* %91 to i32*
  %bf.load192 = load i32, i32* %92, align 8
  %bf.clear193 = and i32 %bf.load192, 65535
  %cmp194 = icmp eq i32 %bf.clear193, 67
  br i1 %cmp194, label %if.else.265, label %lor.lhs.false.196

lor.lhs.false.196:                                ; preds = %if.then.184
  %93 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i32 0, i64 1
  %rtx199 = bitcast %union.rtunion_def* %arrayidx198 to %struct.rtx_def**
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rtx199, align 8
  %95 = bitcast %struct.rtx_def* %94 to i32*
  %bf.load200 = load i32, i32* %95, align 8
  %bf.clear201 = and i32 %bf.load200, 65535
  %cmp202 = icmp eq i32 %bf.clear201, 68
  br i1 %cmp202, label %if.else.265, label %lor.lhs.false.204

lor.lhs.false.204:                                ; preds = %lor.lhs.false.196
  %96 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld205 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1
  %arrayidx206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld205, i32 0, i64 1
  %rtx207 = bitcast %union.rtunion_def* %arrayidx206 to %struct.rtx_def**
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtx207, align 8
  %98 = bitcast %struct.rtx_def* %97 to i32*
  %bf.load208 = load i32, i32* %98, align 8
  %bf.clear209 = and i32 %bf.load208, 65535
  %cmp210 = icmp eq i32 %bf.clear209, 54
  br i1 %cmp210, label %if.else.265, label %lor.lhs.false.212

lor.lhs.false.212:                                ; preds = %lor.lhs.false.204
  %99 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld213 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1
  %arrayidx214 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld213, i32 0, i64 1
  %rtx215 = bitcast %union.rtunion_def* %arrayidx214 to %struct.rtx_def**
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rtx215, align 8
  %101 = bitcast %struct.rtx_def* %100 to i32*
  %bf.load216 = load i32, i32* %101, align 8
  %bf.clear217 = and i32 %bf.load216, 65535
  %cmp218 = icmp eq i32 %bf.clear217, 58
  br i1 %cmp218, label %if.else.265, label %lor.lhs.false.220

lor.lhs.false.220:                                ; preds = %lor.lhs.false.212
  %102 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld221 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1
  %arrayidx222 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld221, i32 0, i64 1
  %rtx223 = bitcast %union.rtunion_def* %arrayidx222 to %struct.rtx_def**
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rtx223, align 8
  %104 = bitcast %struct.rtx_def* %103 to i32*
  %bf.load224 = load i32, i32* %104, align 8
  %bf.clear225 = and i32 %bf.load224, 65535
  %cmp226 = icmp eq i32 %bf.clear225, 55
  br i1 %cmp226, label %if.else.265, label %if.then.228

if.then.228:                                      ; preds = %lor.lhs.false.220
  %105 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld229 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1
  %arrayidx230 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld229, i32 0, i64 1
  %rtx231 = bitcast %union.rtunion_def* %arrayidx230 to %struct.rtx_def**
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rtx231, align 8
  store %struct.rtx_def* %106, %struct.rtx_def** %src, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.228
  %107 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %108 = bitcast %struct.rtx_def* %107 to i32*
  %bf.load232 = load i32, i32* %108, align 8
  %bf.clear233 = and i32 %bf.load232, 65535
  %cmp234 = icmp eq i32 %bf.clear233, 63
  br i1 %cmp234, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %109 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld236 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i32 0, i64 1
  %rtuint238 = bitcast %union.rtunion_def* %arrayidx237 to i32*
  %110 = load i32, i32* %rtuint238, align 4
  %cmp239 = icmp eq i32 %110, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %111 = phi i1 [ false, %while.cond ], [ %cmp239, %land.rhs ]
  br i1 %111, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %112 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %fld241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i32 0, i64 0
  %rtx243 = bitcast %union.rtunion_def* %arrayidx242 to %struct.rtx_def**
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rtx243, align 8
  store %struct.rtx_def* %113, %struct.rtx_def** %src, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %114 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %115 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load244 = load i32, i32* %115, align 8
  %bf.lshr245 = lshr i32 %bf.load244, 16
  %bf.clear246 = and i32 %bf.lshr245, 255
  %116 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %117 = bitcast %struct.rtx_def* %116 to i32*
  %bf.load247 = load i32, i32* %117, align 8
  %bf.lshr248 = lshr i32 %bf.load247, 16
  %bf.clear249 = and i32 %bf.lshr248, 255
  %cmp250 = icmp ne i32 %bf.clear246, %bf.clear249
  br i1 %cmp250, label %if.then.252, label %if.end.260

if.then.252:                                      ; preds = %while.end
  %118 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %119 = bitcast %struct.rtx_def* %118 to i32*
  %bf.load253 = load i32, i32* %119, align 8
  %bf.lshr254 = lshr i32 %bf.load253, 16
  %bf.clear255 = and i32 %bf.lshr254, 255
  %120 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld256 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %120, i32 0, i32 1
  %arrayidx257 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld256, i32 0, i64 1
  %rtx258 = bitcast %union.rtunion_def* %arrayidx257 to %struct.rtx_def**
  %121 = load %struct.rtx_def*, %struct.rtx_def** %rtx258, align 8
  %call259 = call %struct.rtx_def* @gen_lowpart(i32 %bf.clear255, %struct.rtx_def* %121)
  store %struct.rtx_def* %call259, %struct.rtx_def** %src, align 8
  br label %if.end.260

if.end.260:                                       ; preds = %if.then.252, %while.end
  %122 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %123 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld261 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1
  %arrayidx262 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld261, i32 0, i64 1
  %rtx263 = bitcast %union.rtunion_def* %arrayidx262 to %struct.rtx_def**
  %124 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8
  %call264 = call i32 @validate_change(%struct.rtx_def* %122, %struct.rtx_def** %rtx263, %struct.rtx_def* %124, i32 1)
  br label %if.end.288

if.else.265:                                      ; preds = %lor.lhs.false.220, %lor.lhs.false.212, %lor.lhs.false.204, %lor.lhs.false.196, %if.then.184
  %125 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld266 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1
  %arrayidx267 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld266, i32 0, i64 1
  %rtx268 = bitcast %union.rtunion_def* %arrayidx267 to %struct.rtx_def**
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtx268, align 8
  %127 = bitcast %struct.rtx_def* %126 to i32*
  %bf.load269 = load i32, i32* %127, align 8
  %bf.lshr270 = lshr i32 %bf.load269, 16
  %bf.clear271 = and i32 %bf.lshr270, 255
  %cmp272 = icmp ne i32 %bf.clear271, 0
  br i1 %cmp272, label %land.lhs.true.274, label %if.end.287

land.lhs.true.274:                                ; preds = %if.else.265
  %128 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld275 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1
  %arrayidx276 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld275, i32 0, i64 1
  %rtx277 = bitcast %union.rtunion_def* %arrayidx276 to %struct.rtx_def**
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtx277, align 8
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load278 = load i32, i32* %130, align 8
  %bf.lshr279 = lshr i32 %bf.load278, 16
  %bf.clear280 = and i32 %bf.lshr279, 255
  %131 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %132 = bitcast %struct.rtx_def* %131 to i32*
  %bf.load281 = load i32, i32* %132, align 8
  %bf.lshr282 = lshr i32 %bf.load281, 16
  %bf.clear283 = and i32 %bf.lshr282, 255
  %cmp284 = icmp ne i32 %bf.clear280, %bf.clear283
  br i1 %cmp284, label %if.then.286, label %if.end.287

if.then.286:                                      ; preds = %land.lhs.true.274
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 2815, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.optimize_bit_field, i32 0, i32 0)) #6
  unreachable

if.end.287:                                       ; preds = %land.lhs.true.274, %if.else.265
  br label %if.end.288

if.end.288:                                       ; preds = %if.end.287, %if.end.260
  br label %if.end.376

if.else.289:                                      ; preds = %if.end.179
  %133 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld290 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1
  %arrayidx291 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld290, i32 0, i64 0
  %rtx292 = bitcast %union.rtunion_def* %arrayidx291 to %struct.rtx_def**
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtx292, align 8
  store %struct.rtx_def* %134, %struct.rtx_def** %dest, align 8
  br label %while.cond.293

while.cond.293:                                   ; preds = %while.body.336, %if.else.289
  %135 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %136 = bitcast %struct.rtx_def* %135 to i32*
  %bf.load294 = load i32, i32* %136, align 8
  %bf.clear295 = and i32 %bf.load294, 65535
  %cmp296 = icmp eq i32 %bf.clear295, 63
  br i1 %cmp296, label %land.lhs.true.298, label %land.end.335

land.lhs.true.298:                                ; preds = %while.cond.293
  %137 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld299 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1
  %arrayidx300 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld299, i32 0, i64 1
  %rtuint301 = bitcast %union.rtunion_def* %arrayidx300 to i32*
  %138 = load i32, i32* %rtuint301, align 4
  %cmp302 = icmp eq i32 %138, 0
  br i1 %cmp302, label %land.lhs.true.304, label %land.end.335

land.lhs.true.304:                                ; preds = %land.lhs.true.298
  %139 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %140 = bitcast %struct.rtx_def* %139 to i32*
  %bf.load305 = load i32, i32* %140, align 8
  %bf.lshr306 = lshr i32 %bf.load305, 16
  %bf.clear307 = and i32 %bf.lshr306, 255
  %idxprom308 = sext i32 %bf.clear307 to i64
  %arrayidx309 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom308
  %141 = load i32, i32* %arrayidx309, align 4
  %142 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld310 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1
  %arrayidx311 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld310, i32 0, i64 0
  %rtx312 = bitcast %union.rtunion_def* %arrayidx311 to %struct.rtx_def**
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rtx312, align 8
  %144 = bitcast %struct.rtx_def* %143 to i32*
  %bf.load313 = load i32, i32* %144, align 8
  %bf.lshr314 = lshr i32 %bf.load313, 16
  %bf.clear315 = and i32 %bf.lshr314, 255
  %idxprom316 = sext i32 %bf.clear315 to i64
  %arrayidx317 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i64 %idxprom316
  %145 = load i32, i32* %arrayidx317, align 4
  %cmp318 = icmp eq i32 %141, %145
  br i1 %cmp318, label %land.rhs.320, label %land.end.335

land.rhs.320:                                     ; preds = %land.lhs.true.304
  %146 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld321 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1
  %arrayidx322 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld321, i32 0, i64 0
  %rtx323 = bitcast %union.rtunion_def* %arrayidx322 to %struct.rtx_def**
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rtx323, align 8
  %148 = bitcast %struct.rtx_def* %147 to i32*
  %bf.load324 = load i32, i32* %148, align 8
  %bf.lshr325 = lshr i32 %bf.load324, 16
  %bf.clear326 = and i32 %bf.lshr325, 255
  %idxprom327 = sext i32 %bf.clear326 to i64
  %arrayidx328 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom327
  %149 = load i8, i8* %arrayidx328, align 1
  %conv329 = zext i8 %149 to i32
  %150 = load i32, i32* @target_flags, align 4
  %and330 = and i32 %150, 33554432
  %tobool331 = icmp ne i32 %and330, 0
  %cond332 = select i1 %tobool331, i32 8, i32 4
  %cmp333 = icmp sle i32 %conv329, %cond332
  br label %land.end.335

land.end.335:                                     ; preds = %land.rhs.320, %land.lhs.true.304, %land.lhs.true.298, %while.cond.293
  %151 = phi i1 [ false, %land.lhs.true.304 ], [ false, %land.lhs.true.298 ], [ false, %while.cond.293 ], [ %cmp333, %land.rhs.320 ]
  br i1 %151, label %while.body.336, label %while.end.340

while.body.336:                                   ; preds = %land.end.335
  %152 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %fld337 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1
  %arrayidx338 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld337, i32 0, i64 0
  %rtx339 = bitcast %union.rtunion_def* %arrayidx338 to %struct.rtx_def**
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rtx339, align 8
  store %struct.rtx_def* %153, %struct.rtx_def** %dest, align 8
  br label %while.cond.293

while.end.340:                                    ; preds = %land.end.335
  %154 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %155 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld341 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %155, i32 0, i32 1
  %arrayidx342 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld341, i32 0, i64 0
  %rtx343 = bitcast %union.rtunion_def* %arrayidx342 to %struct.rtx_def**
  %156 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %call344 = call i32 @validate_change(%struct.rtx_def* %154, %struct.rtx_def** %rtx343, %struct.rtx_def* %156, i32 1)
  %157 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %158 = bitcast %struct.rtx_def* %157 to i32*
  %bf.load345 = load i32, i32* %158, align 8
  %bf.lshr346 = lshr i32 %bf.load345, 16
  %bf.clear347 = and i32 %bf.lshr346, 255
  %159 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %160 = bitcast %struct.rtx_def* %159 to i32*
  %bf.load348 = load i32, i32* %160, align 8
  %bf.lshr349 = lshr i32 %bf.load348, 16
  %bf.clear350 = and i32 %bf.lshr349, 255
  %cmp351 = icmp eq i32 %bf.clear347, %bf.clear350
  br i1 %cmp351, label %if.then.353, label %if.else.358

if.then.353:                                      ; preds = %while.end.340
  %161 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %162 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld354 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1
  %arrayidx355 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld354, i32 0, i64 1
  %rtx356 = bitcast %union.rtunion_def* %arrayidx355 to %struct.rtx_def**
  %163 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %call357 = call i32 @validate_change(%struct.rtx_def* %161, %struct.rtx_def** %rtx356, %struct.rtx_def* %163, i32 1)
  br label %if.end.375

if.else.358:                                      ; preds = %while.end.340
  %164 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8
  %165 = bitcast %struct.rtx_def* %164 to i32*
  %bf.load359 = load i32, i32* %165, align 8
  %bf.lshr360 = lshr i32 %bf.load359, 16
  %bf.clear361 = and i32 %bf.lshr360, 255
  %call362 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear361)
  store %struct.rtx_def* %call362, %struct.rtx_def** %newreg, align 8
  call void @start_sequence()
  %166 = load %struct.rtx_def*, %struct.rtx_def** %newreg, align 8
  %167 = load %struct.rtx_def*, %struct.rtx_def** %memref, align 8
  %168 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld363 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1
  %arrayidx364 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld363, i32 0, i64 1
  %rtx365 = bitcast %union.rtunion_def* %arrayidx364 to %struct.rtx_def**
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtx365, align 8
  %170 = bitcast %struct.rtx_def* %169 to i32*
  %bf.load366 = load i32, i32* %170, align 8
  %bf.clear367 = and i32 %bf.load366, 65535
  %cmp368 = icmp eq i32 %bf.clear367, 133
  %conv369 = zext i1 %cmp368 to i32
  call void @convert_move(%struct.rtx_def* %166, %struct.rtx_def* %167, i32 %conv369)
  %call370 = call %struct.rtx_def* @get_insns()
  store %struct.rtx_def* %call370, %struct.rtx_def** %seq, align 8
  call void @end_sequence()
  %171 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %172 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8
  %fld371 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %172, i32 0, i32 1
  %arrayidx372 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld371, i32 0, i64 1
  %rtx373 = bitcast %union.rtunion_def* %arrayidx372 to %struct.rtx_def**
  %173 = load %struct.rtx_def*, %struct.rtx_def** %newreg, align 8
  %call374 = call i32 @validate_change(%struct.rtx_def* %171, %struct.rtx_def** %rtx373, %struct.rtx_def* %173, i32 1)
  br label %if.end.375

if.end.375:                                       ; preds = %if.else.358, %if.then.353
  br label %if.end.376

if.end.376:                                       ; preds = %if.end.375, %if.end.288
  %call377 = call i32 @apply_change_group()
  %tobool378 = icmp ne i32 %call377, 0
  br i1 %tobool378, label %land.lhs.true.379, label %if.end.383

land.lhs.true.379:                                ; preds = %if.end.376
  %174 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %tobool380 = icmp ne %struct.rtx_def* %174, null
  br i1 %tobool380, label %if.then.381, label %if.end.383

if.then.381:                                      ; preds = %land.lhs.true.379
  %175 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8
  %176 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8
  %call382 = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %175, %struct.rtx_def* %176)
  br label %if.end.383

if.end.383:                                       ; preds = %if.then.381, %land.lhs.true.379, %if.end.376
  br label %if.end.384

if.end.384:                                       ; preds = %if.end.383, %land.lhs.true.148, %land.lhs.true.142, %if.end.141
  br label %if.end.385

if.end.385:                                       ; preds = %if.end.384, %land.lhs.true.33, %land.lhs.true.25, %land.lhs.true, %if.end
  ret void
}

declare %struct.rtx_def* @gen_lowpart(i32, %struct.rtx_def*) #2

declare i32 @mode_for_size(i32, i32, i32) #2

declare i32 @apply_change_group() #2

declare i32 @memory_address_p(i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @replace_equiv_address(%struct.rtx_def*, %struct.rtx_def*) #2

declare i8* @hash_allocate(%struct.hash_table*, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @insns_for_mem_walk(%struct.rtx_def** %r, i8* %data) #0 {
entry:
  %r.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %ifmwi = alloca %struct.insns_for_mem_walk_info*, align 8
  %ifme = alloca %struct.insns_for_mem_entry*, align 8
  store %struct.rtx_def** %r, %struct.rtx_def*** %r.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.insns_for_mem_walk_info*
  store %struct.insns_for_mem_walk_info* %1, %struct.insns_for_mem_walk_info** %ifmwi, align 8
  %2 = load %struct.insns_for_mem_walk_info*, %struct.insns_for_mem_walk_info** %ifmwi, align 8
  %pass = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %2, i32 0, i32 2
  %3 = load i32, i32* %pass, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %r.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8
  %tobool = icmp ne %struct.rtx_def* %5, null
  br i1 %tobool, label %land.lhs.true.1, label %if.else

land.lhs.true.1:                                  ; preds = %land.lhs.true
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %r.addr, align 8
  %7 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load = load i32, i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 70
  br i1 %cmp2, label %land.lhs.true.3, label %if.else

land.lhs.true.3:                                  ; preds = %land.lhs.true.1
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %r.addr, align 8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load4 = load i32, i32* %12, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 61
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.3
  %13 = load %struct.insns_for_mem_walk_info*, %struct.insns_for_mem_walk_info** %ifmwi, align 8
  %ht = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %13, i32 0, i32 0
  %14 = load %struct.hash_table*, %struct.hash_table** %ht, align 8
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %r.addr, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %15, align 8
  %fld7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i32 0, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx9, align 8
  %18 = bitcast %struct.rtx_def* %17 to i8*
  %call = call %struct.hash_entry* @hash_lookup(%struct.hash_table* %14, i8* %18, i32 1, i8* (%struct.obstack*, i8*)* null)
  br label %if.end.35

if.else:                                          ; preds = %land.lhs.true.3, %land.lhs.true.1, %land.lhs.true, %entry
  %19 = load %struct.insns_for_mem_walk_info*, %struct.insns_for_mem_walk_info** %ifmwi, align 8
  %pass10 = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %19, i32 0, i32 2
  %20 = load i32, i32* %pass10, align 4
  %cmp11 = icmp eq i32 %20, 1
  br i1 %cmp11, label %land.lhs.true.12, label %if.end.34

land.lhs.true.12:                                 ; preds = %if.else
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %r.addr, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8
  %tobool13 = icmp ne %struct.rtx_def* %22, null
  br i1 %tobool13, label %land.lhs.true.14, label %if.end.34

land.lhs.true.14:                                 ; preds = %land.lhs.true.12
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %r.addr, align 8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %23, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load15 = load i32, i32* %25, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 61
  br i1 %cmp17, label %if.then.18, label %if.end.34

if.then.18:                                       ; preds = %land.lhs.true.14
  %26 = load %struct.insns_for_mem_walk_info*, %struct.insns_for_mem_walk_info** %ifmwi, align 8
  %ht19 = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %26, i32 0, i32 0
  %27 = load %struct.hash_table*, %struct.hash_table** %ht19, align 8
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %r.addr, align 8
  %29 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8
  %30 = bitcast %struct.rtx_def* %29 to i8*
  %call20 = call %struct.hash_entry* @hash_lookup(%struct.hash_table* %27, i8* %30, i32 0, i8* (%struct.obstack*, i8*)* null)
  %31 = bitcast %struct.hash_entry* %call20 to %struct.insns_for_mem_entry*
  store %struct.insns_for_mem_entry* %31, %struct.insns_for_mem_entry** %ifme, align 8
  %32 = load %struct.insns_for_mem_entry*, %struct.insns_for_mem_entry** %ifme, align 8
  %tobool21 = icmp ne %struct.insns_for_mem_entry* %32, null
  br i1 %tobool21, label %land.lhs.true.22, label %if.end

land.lhs.true.22:                                 ; preds = %if.then.18
  %33 = load %struct.insns_for_mem_entry*, %struct.insns_for_mem_entry** %ifme, align 8
  %insns = getelementptr inbounds %struct.insns_for_mem_entry, %struct.insns_for_mem_entry* %33, i32 0, i32 1
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8
  %tobool23 = icmp ne %struct.rtx_def* %34, null
  br i1 %tobool23, label %lor.lhs.false, label %if.then.29

lor.lhs.false:                                    ; preds = %land.lhs.true.22
  %35 = load %struct.insns_for_mem_entry*, %struct.insns_for_mem_entry** %ifme, align 8
  %insns24 = getelementptr inbounds %struct.insns_for_mem_entry, %struct.insns_for_mem_entry* %35, i32 0, i32 1
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insns24, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 0
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtx27, align 8
  %38 = load %struct.insns_for_mem_walk_info*, %struct.insns_for_mem_walk_info** %ifmwi, align 8
  %insn = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %38, i32 0, i32 1
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8
  %cmp28 = icmp ne %struct.rtx_def* %37, %39
  br i1 %cmp28, label %if.then.29, label %if.end

if.then.29:                                       ; preds = %lor.lhs.false, %land.lhs.true.22
  %40 = load %struct.insns_for_mem_walk_info*, %struct.insns_for_mem_walk_info** %ifmwi, align 8
  %insn30 = getelementptr inbounds %struct.insns_for_mem_walk_info, %struct.insns_for_mem_walk_info* %40, i32 0, i32 1
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn30, align 8
  %42 = load %struct.insns_for_mem_entry*, %struct.insns_for_mem_entry** %ifme, align 8
  %insns31 = getelementptr inbounds %struct.insns_for_mem_entry, %struct.insns_for_mem_entry* %42, i32 0, i32 1
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insns31, align 8
  %call32 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %41, %struct.rtx_def* %43)
  %44 = load %struct.insns_for_mem_entry*, %struct.insns_for_mem_entry** %ifme, align 8
  %insns33 = getelementptr inbounds %struct.insns_for_mem_entry, %struct.insns_for_mem_entry* %44, i32 0, i32 1
  store %struct.rtx_def* %call32, %struct.rtx_def** %insns33, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.29, %lor.lhs.false, %if.then.18
  br label %if.end.34

if.end.34:                                        ; preds = %if.end, %land.lhs.true.14, %land.lhs.true.12, %if.else
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then
  ret i32 0
}

declare %struct.rtx_def* @gen_rtx_SUBREG(i32, %struct.rtx_def*, i32) #2

declare i32 @int_mode_for_mode(i32) #2

declare %struct.rtx_def* @store_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*, i64) #2

declare %struct.rtx_def* @extract_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*, i32, i32, i64) #2

declare %struct.rtx_def* @gen_rtx(i32, i32, ...) #2

declare i32 @subreg_regno_offset(i32, i32, i32, i32) #2

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

; Function Attrs: nounwind uwtable
define internal void @instantiate_decl(%struct.rtx_def* %x, i64 %size, i32 %valid_only) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca i64, align 8
  %valid_only.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %addr = alloca %struct.rtx_def*, align 8
  %decl_size = alloca i64, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i32 %valid_only, i32* %valid_only.addr, align 4
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp ne i32 %bf.clear, 66
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  store %struct.rtx_def* %4, %struct.rtx_def** %addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load2 = load i32, i32* %6, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 67
  br i1 %cmp4, label %if.then.56, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load6 = load i32, i32* %8, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 68
  br i1 %cmp8, label %if.then.56, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.5
  %9 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load10 = load i32, i32* %10, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 54
  br i1 %cmp12, label %if.then.56, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load14 = load i32, i32* %12, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 55
  br i1 %cmp16, label %if.then.56, label %lor.lhs.false.17

lor.lhs.false.17:                                 ; preds = %lor.lhs.false.13
  %13 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %14 = bitcast %struct.rtx_def* %13 to i32*
  %bf.load18 = load i32, i32* %14, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 58
  br i1 %cmp20, label %if.then.56, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %lor.lhs.false.17
  %15 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load22 = load i32, i32* %16, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 134
  br i1 %cmp24, label %if.then.56, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.21
  %17 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load26 = load i32, i32* %18, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 56
  br i1 %cmp28, label %if.then.56, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.25
  %19 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load30 = load i32, i32* %20, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 140
  br i1 %cmp32, label %if.then.56, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.29
  %21 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %22 = bitcast %struct.rtx_def* %21 to i32*
  %bf.load34 = load i32, i32* %22, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp eq i32 %bf.clear35, 70
  br i1 %cmp36, label %land.lhs.true, label %lor.lhs.false.43

land.lhs.true:                                    ; preds = %lor.lhs.false.33
  %23 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i32 0, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtx39, align 8
  %25 = bitcast %struct.rtx_def* %24 to i32*
  %bf.load40 = load i32, i32* %25, align 8
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 61
  br i1 %cmp42, label %if.then.56, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %land.lhs.true, %lor.lhs.false.33
  %26 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %27 = bitcast %struct.rtx_def* %26 to i32*
  %bf.load44 = load i32, i32* %27, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp eq i32 %bf.clear45, 61
  br i1 %cmp46, label %land.lhs.true.47, label %if.end.57

land.lhs.true.47:                                 ; preds = %lor.lhs.false.43
  %28 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i32 0, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx49 to i32*
  %29 = load i32, i32* %rtuint, align 4
  %cmp50 = icmp ult i32 %29, 53
  br i1 %cmp50, label %if.then.56, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %land.lhs.true.47
  %30 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %fld52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i32 0, i64 0
  %rtuint54 = bitcast %union.rtunion_def* %arrayidx53 to i32*
  %31 = load i32, i32* %rtuint54, align 4
  %cmp55 = icmp ugt i32 %31, 57
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %lor.lhs.false.51, %land.lhs.true.47, %land.lhs.true, %lor.lhs.false.29, %lor.lhs.false.25, %lor.lhs.false.21, %lor.lhs.false.17, %lor.lhs.false.13, %lor.lhs.false.9, %lor.lhs.false.5, %if.end
  br label %return

if.end.57:                                        ; preds = %lor.lhs.false.51, %lor.lhs.false.43
  %32 = load i32, i32* %valid_only.addr, align 4
  %tobool = icmp ne i32 %32, 0
  br i1 %tobool, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.end.57
  %33 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %33)
  store %struct.rtx_def* %call, %struct.rtx_def** %addr, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.58, %if.end.57
  %call60 = call i32 @instantiate_virtual_regs_1(%struct.rtx_def** %addr, %struct.rtx_def* null, i32 0)
  %34 = load i32, i32* %valid_only.addr, align 4
  %tobool61 = icmp ne i32 %34, 0
  br i1 %tobool61, label %land.lhs.true.62, label %if.end.96

land.lhs.true.62:                                 ; preds = %if.end.59
  %35 = load i64, i64* %size.addr, align 8
  %cmp63 = icmp sge i64 %35, 0
  br i1 %cmp63, label %if.then.64, label %if.end.96

if.then.64:                                       ; preds = %land.lhs.true.62
  %36 = load i64, i64* %size.addr, align 8
  store i64 %36, i64* %decl_size, align 8
  %37 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 1), align 4
  store i32 %37, i32* %mode, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.64
  %38 = load i32, i32* %mode, align 4
  %cmp65 = icmp ne i32 %38, 0
  br i1 %cmp65, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %39 = load i32, i32* %mode, align 4
  %idxprom = sext i32 %39 to i64
  %arrayidx66 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom
  %40 = load i8, i8* %arrayidx66, align 1
  %conv = zext i8 %40 to i64
  %41 = load i64, i64* %decl_size, align 8
  %cmp67 = icmp ule i64 %conv, %41
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %42 = phi i1 [ false, %for.cond ], [ %cmp67, %land.rhs ]
  br i1 %42, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %43 = load i32, i32* %mode, align 4
  %44 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call69 = call i32 @memory_address_p(i32 %43, %struct.rtx_def* %44)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.end.72, label %if.then.71

if.then.71:                                       ; preds = %for.body
  br label %return

if.end.72:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.72
  %45 = load i32, i32* %mode, align 4
  %idxprom73 = sext i32 %45 to i64
  %arrayidx74 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom73
  %46 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %46 to i32
  store i32 %conv75, i32* %mode, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %47 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @class_narrowest_mode, i32 0, i64 2), align 4
  store i32 %47, i32* %mode, align 4
  br label %for.cond.76

for.cond.76:                                      ; preds = %for.inc.91, %for.end
  %48 = load i32, i32* %mode, align 4
  %cmp77 = icmp ne i32 %48, 0
  br i1 %cmp77, label %land.rhs.79, label %land.end.85

land.rhs.79:                                      ; preds = %for.cond.76
  %49 = load i32, i32* %mode, align 4
  %idxprom80 = sext i32 %49 to i64
  %arrayidx81 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_size, i32 0, i64 %idxprom80
  %50 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %50 to i64
  %51 = load i64, i64* %decl_size, align 8
  %cmp83 = icmp ule i64 %conv82, %51
  br label %land.end.85

land.end.85:                                      ; preds = %land.rhs.79, %for.cond.76
  %52 = phi i1 [ false, %for.cond.76 ], [ %cmp83, %land.rhs.79 ]
  br i1 %52, label %for.body.86, label %for.end.95

for.body.86:                                      ; preds = %land.end.85
  %53 = load i32, i32* %mode, align 4
  %54 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %call87 = call i32 @memory_address_p(i32 %53, %struct.rtx_def* %54)
  %tobool88 = icmp ne i32 %call87, 0
  br i1 %tobool88, label %if.end.90, label %if.then.89

if.then.89:                                       ; preds = %for.body.86
  br label %return

if.end.90:                                        ; preds = %for.body.86
  br label %for.inc.91

for.inc.91:                                       ; preds = %if.end.90
  %55 = load i32, i32* %mode, align 4
  %idxprom92 = sext i32 %55 to i64
  %arrayidx93 = getelementptr inbounds [59 x i8], [59 x i8]* @mode_wider_mode, i32 0, i64 %idxprom92
  %56 = load i8, i8* %arrayidx93, align 1
  %conv94 = zext i8 %56 to i32
  store i32 %conv94, i32* %mode, align 4
  br label %for.cond.76

for.end.95:                                       ; preds = %land.end.85
  br label %if.end.96

if.end.96:                                        ; preds = %for.end.95, %land.lhs.true.62, %if.end.59
  %57 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %fld97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i32 0, i64 0
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  store %struct.rtx_def* %57, %struct.rtx_def** %rtx99, align 8
  br label %return

return:                                           ; preds = %if.end.96, %if.then.89, %if.then.71, %if.then.56, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @instantiate_decls_1(%union.tree_node* %let, i32 %valid_only) #0 {
entry:
  %let.addr = alloca %union.tree_node*, align 8
  %valid_only.addr = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %let, %union.tree_node** %let.addr, align 8
  store i32 %valid_only, i32* %valid_only.addr, align 4
  %0 = load %union.tree_node*, %union.tree_node** %let.addr, align 8
  %block = bitcast %union.tree_node* %0 to %struct.tree_block*
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 2
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8
  store %union.tree_node* %1, %union.tree_node** %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool = icmp ne %union.tree_node* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8
  %decl = bitcast %union.tree_node* %3 to %struct.tree_decl*
  %rtl = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl, i32 0, i32 17
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8
  %cmp = icmp ne %struct.rtx_def* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8
  %decl1 = bitcast %union.tree_node* %5 to %struct.tree_decl*
  %rtl2 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl1, i32 0, i32 17
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl2, align 8
  %tobool3 = icmp ne %struct.rtx_def* %6, null
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8
  %decl4 = bitcast %union.tree_node* %7 to %struct.tree_decl*
  %rtl5 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl4, i32 0, i32 17
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8
  call void @make_decl_rtl(%union.tree_node* %9, i8* null)
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8
  %decl6 = bitcast %union.tree_node* %10 to %struct.tree_decl*
  %rtl7 = getelementptr inbounds %struct.tree_decl, %struct.tree_decl* %decl6, i32 0, i32 17
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ %11, %cond.false ]
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8
  %call = call i64 @int_size_in_bytes(%union.tree_node* %13)
  %14 = load i32, i32* %valid_only.addr, align 4
  call void @instantiate_decl(%struct.rtx_def* %cond, i64 %call, i32 %14)
  br label %if.end

if.end:                                           ; preds = %cond.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common8 = bitcast %union.tree_node* %15 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 0
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %16, %union.tree_node** %t, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %union.tree_node*, %union.tree_node** %let.addr, align 8
  %block9 = bitcast %union.tree_node* %17 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block9, i32 0, i32 3
  %18 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  store %union.tree_node* %18, %union.tree_node** %t, align 8
  br label %for.cond.10

for.cond.10:                                      ; preds = %for.inc.13, %for.end
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8
  %tobool11 = icmp ne %union.tree_node* %19, null
  br i1 %tobool11, label %for.body.12, label %for.end.16

for.body.12:                                      ; preds = %for.cond.10
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8
  %21 = load i32, i32* %valid_only.addr, align 4
  call void @instantiate_decls_1(%union.tree_node* %20, i32 %21)
  br label %for.inc.13

for.inc.13:                                       ; preds = %for.body.12
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8
  %common14 = bitcast %union.tree_node* %22 to %struct.tree_common*
  %chain15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 0
  %23 = load %union.tree_node*, %union.tree_node** %chain15, align 8
  store %union.tree_node* %23, %union.tree_node** %t, align 8
  br label %for.cond.10

for.end.16:                                       ; preds = %for.cond.10
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %x, i64* %poffset) #0 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %poffset.addr = alloca i64*, align 8
  %new = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  store i64* %poffset, i64** %poffset.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 6), align 8
  %cmp = icmp eq %struct.rtx_def* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  store %struct.rtx_def* %2, %struct.rtx_def** %new, align 8
  %3 = load i32, i32* @in_arg_offset, align 4
  %conv = sext i32 %3 to i64
  store i64 %conv, i64* %offset, align 8
  br label %if.end.24

if.else:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 7), align 8
  %cmp1 = icmp eq %struct.rtx_def* %4, %5
  br i1 %cmp1, label %if.then.3, label %if.else.5

if.then.3:                                        ; preds = %if.else
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 3), align 8
  store %struct.rtx_def* %6, %struct.rtx_def** %new, align 8
  %7 = load i32, i32* @var_offset, align 4
  %conv4 = sext i32 %7 to i64
  store i64 %conv4, i64* %offset, align 8
  br label %if.end.23

if.else.5:                                        ; preds = %if.else
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 8), align 8
  %cmp6 = icmp eq %struct.rtx_def* %8, %9
  br i1 %cmp6, label %if.then.8, label %if.else.10

if.then.8:                                        ; preds = %if.else.5
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  store %struct.rtx_def* %10, %struct.rtx_def** %new, align 8
  %11 = load i32, i32* @dynamic_offset, align 4
  %conv9 = sext i32 %11 to i64
  store i64 %conv9, i64* %offset, align 8
  br label %if.end.22

if.else.10:                                       ; preds = %if.else.5
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 9), align 8
  %cmp11 = icmp eq %struct.rtx_def* %12, %13
  br i1 %cmp11, label %if.then.13, label %if.else.15

if.then.13:                                       ; preds = %if.else.10
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  store %struct.rtx_def* %14, %struct.rtx_def** %new, align 8
  %15 = load i32, i32* @out_arg_offset, align 4
  %conv14 = sext i32 %15 to i64
  store i64 %conv14, i64* %offset, align 8
  br label %if.end.21

if.else.15:                                       ; preds = %if.else.10
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8
  %17 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 10), align 8
  %cmp16 = icmp eq %struct.rtx_def* %16, %17
  br i1 %cmp16, label %if.then.18, label %if.else.20

if.then.18:                                       ; preds = %if.else.15
  %18 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 5), align 8
  store %struct.rtx_def* %18, %struct.rtx_def** %new, align 8
  %19 = load i32, i32* @cfa_offset, align 4
  %conv19 = sext i32 %19 to i64
  store i64 %conv19, i64* %offset, align 8
  br label %if.end

if.else.20:                                       ; preds = %if.else.15
  store %struct.rtx_def* null, %struct.rtx_def** %retval
  br label %return

if.end:                                           ; preds = %if.then.18
  br label %if.end.21

if.end.21:                                        ; preds = %if.end, %if.then.13
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.then.8
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.then.3
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.then
  %20 = load i64, i64* %offset, align 8
  %21 = load i64*, i64** %poffset.addr, align 8
  store i64 %20, i64* %21, align 8
  %22 = load %struct.rtx_def*, %struct.rtx_def** %new, align 8
  store %struct.rtx_def* %22, %struct.rtx_def** %retval
  br label %return

return:                                           ; preds = %if.end.24, %if.else.20
  %23 = load %struct.rtx_def*, %struct.rtx_def** %retval
  ret %struct.rtx_def* %23
}

declare %union.tree_node* @copy_node(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define internal i32 @all_blocks(%union.tree_node* %block, %union.tree_node** %vector) #0 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %vector.addr = alloca %union.tree_node**, align 8
  %n_blocks = alloca i32, align 4
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  store %union.tree_node** %vector, %union.tree_node*** %vector.addr, align 8
  store i32 0, i32* %n_blocks, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %tobool = icmp ne %union.tree_node* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*
  %asm_written_flag = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2
  %bf.load = load i32, i32* %asm_written_flag, align 8
  %bf.clear = and i32 %bf.load, -16385
  store i32 %bf.clear, i32* %asm_written_flag, align 8
  %2 = load %union.tree_node**, %union.tree_node*** %vector.addr, align 8
  %tobool1 = icmp ne %union.tree_node** %2, null
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %3 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %4 = load i32, i32* %n_blocks, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %union.tree_node**, %union.tree_node*** %vector.addr, align 8
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %5, i64 %idxprom
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32, i32* %n_blocks, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %n_blocks, align 4
  %7 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %block2 = bitcast %union.tree_node* %7 to %struct.tree_block*
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 3
  %8 = load %union.tree_node*, %union.tree_node** %subblocks, align 8
  %9 = load %union.tree_node**, %union.tree_node*** %vector.addr, align 8
  %tobool3 = icmp ne %union.tree_node** %9, null
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %10 = load %union.tree_node**, %union.tree_node*** %vector.addr, align 8
  %11 = load i32, i32* %n_blocks, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %10, i64 %idx.ext
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %add.ptr, %cond.true ], [ null, %cond.false ]
  %call = call i32 @all_blocks(%union.tree_node* %8, %union.tree_node** %cond)
  %12 = load i32, i32* %n_blocks, align 4
  %add = add nsw i32 %12, %call
  store i32 %add, i32* %n_blocks, align 4
  %13 = load %union.tree_node*, %union.tree_node** %block.addr, align 8
  %common4 = bitcast %union.tree_node* %13 to %struct.tree_common*
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 0
  %14 = load %union.tree_node*, %union.tree_node** %chain, align 8
  store %union.tree_node* %14, %union.tree_node** %block.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i32, i32* %n_blocks, align 4
  ret i32 %15
}

declare i8* @ggc_alloc_cleared(i64) #2

declare void @init_stmt_for_function() #2

declare void @init_eh_for_function() #2

declare void @init_emit() #2

declare void @init_expr() #2

declare void @init_varasm_status(%struct.function*) #2

declare void @init_pending_stack_adjust() #2

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @delete_related_insns(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_return() #2

declare void @add_insn(%struct.rtx_def*) #2

declare i32 @reg_referenced_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @emit_equiv_load(%struct.epi_info* %p) #0 {
entry:
  %p.addr = alloca %struct.epi_info*, align 8
  store %struct.epi_info* %p, %struct.epi_info** %p.addr, align 8
  %0 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %equiv_reg_src = getelementptr inbounds %struct.epi_info, %struct.epi_info* %0, i32 0, i32 4
  %1 = load %struct.rtx_def*, %struct.rtx_def** %equiv_reg_src, align 8
  %cmp = icmp ne %struct.rtx_def* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_equiv_reg = getelementptr inbounds %struct.epi_info, %struct.epi_info* %2, i32 0, i32 0
  %3 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg, align 8
  %4 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %equiv_reg_src1 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %4, i32 0, i32 4
  %5 = load %struct.rtx_def*, %struct.rtx_def** %equiv_reg_src1, align 8
  %call = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3, %struct.rtx_def* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %equiv_reg_src2 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %6, i32 0, i32 4
  store %struct.rtx_def* null, %struct.rtx_def** %equiv_reg_src2, align 8
  ret void
}

declare %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare i32 @ix86_hard_regno_mode_ok(i32, i32) #2

declare i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare i32 @refers_to_regno_p(i32, i32, %struct.rtx_def*, %struct.rtx_def**) #2

declare %struct.rtx_def* @gen_indirect_jump(%struct.rtx_def*) #2

declare i32 @reg_set_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal void @handle_epilogue_set(%struct.rtx_def* %set, %struct.epi_info* %p) #0 {
entry:
  %set.addr = alloca %struct.rtx_def*, align 8
  %p.addr = alloca %struct.epi_info*, align 8
  store %struct.rtx_def* %set, %struct.rtx_def** %set.addr, align 8
  store %struct.epi_info* %p, %struct.epi_info** %p.addr, align 8
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %1 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %call = call i32 @reg_set_p(%struct.rtx_def* %0, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else.50

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i32 0, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtx, align 8
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp = icmp ne %struct.rtx_def* %3, %4
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7485, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.handle_epilogue_set, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i32 0, i64 1
  %rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtx4, align 8
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp5 = icmp eq i32 %bf.clear, 75
  br i1 %cmp5, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i32 0, i64 1
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtx8, align 8
  %fld9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i32 0, i64 1
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtx11, align 8
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load12 = load i32, i32* %11, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp eq i32 %bf.clear13, 54
  br i1 %cmp14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i32 0, i64 1
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtx18, align 8
  %fld19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i32 0, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtx21, align 8
  %15 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg = getelementptr inbounds %struct.epi_info, %struct.epi_info* %15, i32 0, i32 2
  store %struct.rtx_def* %14, %struct.rtx_def** %new_sp_equiv_reg, align 8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i32 0, i64 1
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtx24, align 8
  %fld25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i32 0, i64 1
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtx27, align 8
  %fld28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i32 0, i64 0
  %rtwint = bitcast %union.rtunion_def* %arrayidx29 to i64*
  %19 = load i64, i64* %rtwint, align 8
  %20 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_offset = getelementptr inbounds %struct.epi_info, %struct.epi_info* %20, i32 0, i32 3
  store i64 %19, i64* %new_sp_offset, align 8
  br label %if.end.35

if.else:                                          ; preds = %land.lhs.true, %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i32 0, i64 1
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtx32, align 8
  %23 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg33 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %23, i32 0, i32 2
  store %struct.rtx_def* %22, %struct.rtx_def** %new_sp_equiv_reg33, align 8
  %24 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_offset34 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %24, i32 0, i32 3
  store i64 0, i64* %new_sp_offset34, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.else, %if.then.15
  %25 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg36 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %25, i32 0, i32 2
  %26 = load %struct.rtx_def*, %struct.rtx_def** %new_sp_equiv_reg36, align 8
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %cmp37 = icmp eq %struct.rtx_def* %26, %27
  br i1 %cmp37, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %if.end.35
  %28 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_equiv_reg = getelementptr inbounds %struct.epi_info, %struct.epi_info* %28, i32 0, i32 0
  %29 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg, align 8
  %30 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg39 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %30, i32 0, i32 2
  store %struct.rtx_def* %29, %struct.rtx_def** %new_sp_equiv_reg39, align 8
  %31 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_offset = getelementptr inbounds %struct.epi_info, %struct.epi_info* %31, i32 0, i32 1
  %32 = load i64, i64* %sp_offset, align 8
  %33 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_offset40 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %33, i32 0, i32 3
  %34 = load i64, i64* %new_sp_offset40, align 8
  %add = add nsw i64 %34, %32
  store i64 %add, i64* %new_sp_offset40, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %if.end.35
  %35 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg42 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %35, i32 0, i32 2
  %36 = load %struct.rtx_def*, %struct.rtx_def** %new_sp_equiv_reg42, align 8
  %cmp43 = icmp eq %struct.rtx_def* %36, null
  br i1 %cmp43, label %if.then.48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.41
  %37 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg44 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %37, i32 0, i32 2
  %38 = load %struct.rtx_def*, %struct.rtx_def** %new_sp_equiv_reg44, align 8
  %39 = bitcast %struct.rtx_def* %38 to i32*
  %bf.load45 = load i32, i32* %39, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  %cmp47 = icmp ne i32 %bf.clear46, 61
  br i1 %cmp47, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %lor.lhs.false, %if.end.41
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7504, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.handle_epilogue_set, i32 0, i32 0)) #6
  unreachable

if.end.49:                                        ; preds = %lor.lhs.false
  br label %if.end.100

if.else.50:                                       ; preds = %entry
  %40 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg51 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %40, i32 0, i32 2
  %41 = load %struct.rtx_def*, %struct.rtx_def** %new_sp_equiv_reg51, align 8
  %cmp52 = icmp ne %struct.rtx_def* %41, null
  br i1 %cmp52, label %land.lhs.true.53, label %if.else.77

land.lhs.true.53:                                 ; preds = %if.else.50
  %42 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg54 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %42, i32 0, i32 2
  %43 = load %struct.rtx_def*, %struct.rtx_def** %new_sp_equiv_reg54, align 8
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %call55 = call i32 @reg_set_p(%struct.rtx_def* %43, %struct.rtx_def* %44)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.then.57, label %if.else.77

if.then.57:                                       ; preds = %land.lhs.true.53
  %45 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %new_sp_equiv_reg58 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %45, i32 0, i32 2
  %46 = load %struct.rtx_def*, %struct.rtx_def** %new_sp_equiv_reg58, align 8
  %47 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i32 0, i64 0
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtx61, align 8
  %call62 = call i32 @rtx_equal_p(%struct.rtx_def* %46, %struct.rtx_def* %48)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %lor.lhs.false.64, label %if.then.66

lor.lhs.false.64:                                 ; preds = %if.then.57
  %49 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %equiv_reg_src = getelementptr inbounds %struct.epi_info, %struct.epi_info* %49, i32 0, i32 4
  %50 = load %struct.rtx_def*, %struct.rtx_def** %equiv_reg_src, align 8
  %cmp65 = icmp ne %struct.rtx_def* %50, null
  br i1 %cmp65, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %lor.lhs.false.64, %if.then.57
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 7519, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.handle_epilogue_set, i32 0, i32 0)) #6
  unreachable

if.else.67:                                       ; preds = %lor.lhs.false.64
  %51 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i32 0, i64 1
  %rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rtx70, align 8
  %53 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %54 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_equiv_reg71 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %54, i32 0, i32 0
  %55 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg71, align 8
  %56 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_offset72 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %56, i32 0, i32 1
  %57 = load i64, i64* %sp_offset72, align 8
  %call73 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %55, i64 %57)
  %call74 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %52, %struct.rtx_def* %53, %struct.rtx_def* %call73)
  %58 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %equiv_reg_src75 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %58, i32 0, i32 4
  store %struct.rtx_def* %call74, %struct.rtx_def** %equiv_reg_src75, align 8
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.67
  br label %if.end.99

if.else.77:                                       ; preds = %land.lhs.true.53, %if.else.50
  %59 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i32 0, i64 1
  %rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtx80, align 8
  %61 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %62 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_equiv_reg81 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %62, i32 0, i32 0
  %63 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg81, align 8
  %64 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_offset82 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %64, i32 0, i32 1
  %65 = load i64, i64* %sp_offset82, align 8
  %call83 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %63, i64 %65)
  %call84 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* %call83)
  %66 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i32 0, i64 1
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  store %struct.rtx_def* %call84, %struct.rtx_def** %rtx87, align 8
  %67 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i32 0, i64 0
  %rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtx90, align 8
  %69 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i32 0, i64 2), align 8
  %70 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_equiv_reg91 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %70, i32 0, i32 0
  %71 = load %struct.rtx_def*, %struct.rtx_def** %sp_equiv_reg91, align 8
  %72 = load %struct.epi_info*, %struct.epi_info** %p.addr, align 8
  %sp_offset92 = getelementptr inbounds %struct.epi_info, %struct.epi_info* %72, i32 0, i32 1
  %73 = load i64, i64* %sp_offset92, align 8
  %call93 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %71, i64 %73)
  %call94 = call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %68, %struct.rtx_def* %69, %struct.rtx_def* %call93)
  %74 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %fld95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i32 0, i64 0
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  store %struct.rtx_def* %call94, %struct.rtx_def** %rtx97, align 8
  %75 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8
  %call98 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %75)
  br label %if.end.99

if.end.99:                                        ; preds = %if.else.77, %if.end.76
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.49, %if.end.99
  ret void
}

declare void @ggc_mark_rtx_children(%struct.rtx_def*) #2

declare void @mark_hard_reg_initial_vals(%struct.function*) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn }
attributes #7 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
