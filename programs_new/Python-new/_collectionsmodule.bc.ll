; ModuleID = 'irs-onlybc/_collectionsmodule.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.PyModuleDef = type { %struct.PyModuleDef_Base, i8*, i8*, i64, %struct.PyMethodDef*, i32 (%struct._object*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, void (i8*)* }
%struct.PyModuleDef_Base = type { %struct._object, %struct._object* ()*, i64, %struct._object* }
%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct.BLOCK = type { %struct.BLOCK*, [62 x %struct._object*], %struct.BLOCK* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct.dequeobject = type { %struct.PyVarObject, %struct.BLOCK*, %struct.BLOCK*, i64, i64, i64, i64, %struct._object* }
%struct.dequeiterobject = type { %struct._object, i64, %struct.BLOCK*, %struct.dequeobject*, i64, i64 }
%struct.defdictobject = type { %struct.PyDictObject, %struct._object* }
%struct.PyDictObject = type { %struct._object, i64, %struct._dictkeysobject*, %struct._object** }
%struct._dictkeysobject = type opaque
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }

@_collectionsmodule = internal global %struct.PyModuleDef { %struct.PyModuleDef_Base { %struct._object { i64 1, %struct._typeobject* null }, %struct._object* ()* null, i64 0, %struct._object* null }, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([160 x i8], [160 x i8]* @module_doc, i32 0, i32 0), i64 -1, %struct.PyMethodDef* getelementptr inbounds ([2 x %struct.PyMethodDef], [2 x %struct.PyMethodDef]* @module_functions, i32 0, i32 0), i32 (%struct._object*)* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, void (i8*)* null }, align 8
@deque_type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i32 0, i32 0), i64 80, i64 0, void (%struct._object*)* bitcast (void (%struct.dequeobject*)* @deque_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* @deque_repr, %struct.PyNumberMethods* null, %struct.PySequenceMethods* @deque_as_sequence, %struct.PyMappingMethods* null, i64 (%struct._object*)* @PyObject_HashNotImplemented, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([116 x i8], [116 x i8]* @deque_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.dequeobject*, i32 (%struct._object*, i8*)*, i8*)* @deque_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (void (%struct.dequeobject*)* @deque_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* @deque_richcompare, i64 72, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.dequeobject*)* @deque_iter to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([16 x %struct.PyMethodDef], [16 x %struct.PyMethodDef]* @deque_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([2 x %struct.PyGetSetDef], [2 x %struct.PyGetSetDef]* @deque_getset, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* bitcast (i32 (%struct.dequeobject*, %struct._object*, %struct._object*)* @deque_init to i32 (%struct._object*, %struct._object*, %struct._object*)*), %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @deque_new, void (i8*)* @PyObject_GC_Del, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str = private unnamed_addr constant [6 x i8] c"deque\00", align 1
@PyDict_Type = external global %struct._typeobject, align 8
@defdict_type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.46, i32 0, i32 0), i64 48, i64 0, void (%struct._object*)* bitcast (void (%struct.defdictobject*)* @defdict_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.defdictobject*)* @defdict_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([369 x i8], [369 x i8]* @defdict_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* @defdict_traverse, i32 (%struct._object*)* bitcast (i32 (%struct.defdictobject*)* @defdict_tp_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([5 x %struct.PyMethodDef], [5 x %struct.PyMethodDef]* @defdict_methods, i32 0, i32 0), %struct.PyMemberDef* getelementptr inbounds ([2 x %struct.PyMemberDef], [2 x %struct.PyMemberDef]* @defdict_members, i32 0, i32 0), %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @defdict_init, %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, void (i8*)* @PyObject_GC_Del, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"defaultdict\00", align 1
@dequeiter_type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.57, i32 0, i32 0), i64 56, i64 0, void (%struct._object*)* bitcast (void (%struct.dequeiterobject*)* @dequeiter_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 278528, i8* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.dequeiterobject*, i32 (%struct._object*, i8*)*, i8*)* @dequeiter_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* @PyObject_SelfIter, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.dequeiterobject*)* @dequeiter_next to %struct._object* (%struct._object*)*), %struct.PyMethodDef* getelementptr inbounds ([3 x %struct.PyMethodDef], [3 x %struct.PyMethodDef]* @dequeiter_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @dequeiter_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.2 = private unnamed_addr constant [16 x i8] c"_deque_iterator\00", align 1
@dequereviter_type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.60, i32 0, i32 0), i64 56, i64 0, void (%struct._object*)* bitcast (void (%struct.dequeiterobject*)* @dequeiter_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 278528, i8* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.dequeiterobject*, i32 (%struct._object*, i8*)*, i8*)* @dequeiter_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* @PyObject_SelfIter, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.dequeiterobject*)* @dequereviter_next to %struct._object* (%struct._object*)*), %struct.PyMethodDef* getelementptr inbounds ([3 x %struct.PyMethodDef], [3 x %struct.PyMethodDef]* @dequeiter_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @dequereviter_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.3 = private unnamed_addr constant [24 x i8] c"_deque_reverse_iterator\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"_collections\00", align 1
@module_doc = internal global [160 x i8] c"High performance data structures.\0A- deque:        ordered collection accessible from endpoints only\0A- defaultdict:  dict subclass with a default value factory\0A\00", align 16
@module_functions = internal global [2 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @_count_elements, i32 1, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @_count_elements_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.5 = private unnamed_addr constant [16 x i8] c"_count_elements\00", align 1
@_count_elements_doc = internal global [98 x i8] c"_count_elements(mapping, iterable) -> None\0A\0ACount elements in the iterable, updating the mappping\00", align 16
@_count_elements.PyId_get = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), %struct._object* null }, align 8
@.str.6 = private unnamed_addr constant [4 x i8] c"get\00", align 1
@_count_elements.PyId___setitem__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0), %struct._object* null }, align 8
@.str.7 = private unnamed_addr constant [12 x i8] c"__setitem__\00", align 1
@_Py_NoneStruct = external global %struct._object, align 8
@.str.8 = private unnamed_addr constant [18 x i8] c"collections.deque\00", align 1
@deque_as_sequence = internal global %struct.PySequenceMethods { i64 (%struct._object*)* bitcast (i64 (%struct.dequeobject*)* @deque_len to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, i64)* null, %struct._object* (%struct._object*, i64)* bitcast (%struct._object* (%struct.dequeobject*, i64)* @deque_item to %struct._object* (%struct._object*, i64)*), i8* null, i32 (%struct._object*, i64, %struct._object*)* bitcast (i32 (%struct.dequeobject*, i64, %struct._object*)* @deque_ass_item to i32 (%struct._object*, i64, %struct._object*)*), i8* null, i32 (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_inplace_concat to %struct._object* (%struct._object*, %struct._object*)*), %struct._object* (%struct._object*, i64)* null }, align 8
@deque_doc = internal global [116 x i8] c"deque([iterable[, maxlen]]) --> deque object\0A\0ABuild an ordered collection with optimized access from its endpoints.\00", align 16
@deque_methods = internal global [16 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_append to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @append_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_appendleft to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @appendleft_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*)* @deque_clearmethod to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @clear_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @deque_copy to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @copy_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_count to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @count_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_extend to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @extend_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_extendleft to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @extendleft_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_pop to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @pop_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_popleft to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @popleft_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*)* @deque_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @reduce_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_remove to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @remove_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.26, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*)* @deque_reviter to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @reversed_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_reverse to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @reverse_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, %struct._object*)* @deque_rotate to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @rotate_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeobject*, i8*)* @deque_sizeof to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @sizeof_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@deque_getset = internal global [2 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.dequeobject*)* @deque_get_maxlen to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.42, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@numfreeblocks = internal global i64 0, align 8
@freeblocks = internal global [10 x %struct.BLOCK*] zeroinitializer, align 16
@.str.9 = private unnamed_addr constant [6 x i8] c"[...]\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"deque(%R, maxlen=%zd)\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"deque(%R)\00", align 1
@PyExc_IndexError = external global %struct._object*, align 8
@.str.12 = private unnamed_addr constant [25 x i8] c"deque index out of range\00", align 1
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.13 = private unnamed_addr constant [36 x i8] c"cannot add more blocks to the deque\00", align 1
@.str.14 = private unnamed_addr constant [24 x i8] c"pop from an empty deque\00", align 1
@_Py_NotImplementedStruct = external global %struct._object, align 8
@_Py_TrueStruct = external global %struct._longobject, align 8
@_Py_FalseStruct = external global %struct._longobject, align 8
@.str.15 = private unnamed_addr constant [7 x i8] c"append\00", align 1
@append_doc = internal global [47 x i8] c"Add an element to the right side of the deque.\00", align 16
@.str.16 = private unnamed_addr constant [11 x i8] c"appendleft\00", align 1
@appendleft_doc = internal global [46 x i8] c"Add an element to the left side of the deque.\00", align 16
@.str.17 = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@clear_doc = internal global [36 x i8] c"Remove all elements from the deque.\00", align 16
@.str.18 = private unnamed_addr constant [9 x i8] c"__copy__\00", align 1
@copy_doc = internal global [34 x i8] c"Return a shallow copy of a deque.\00", align 16
@.str.19 = private unnamed_addr constant [6 x i8] c"count\00", align 1
@count_doc = internal global [67 x i8] c"D.count(value) -> integer -- return number of occurrences of value\00", align 16
@.str.20 = private unnamed_addr constant [7 x i8] c"extend\00", align 1
@extend_doc = internal global [67 x i8] c"Extend the right side of the deque with elements from the iterable\00", align 16
@.str.21 = private unnamed_addr constant [11 x i8] c"extendleft\00", align 1
@extendleft_doc = internal global [66 x i8] c"Extend the left side of the deque with elements from the iterable\00", align 16
@.str.22 = private unnamed_addr constant [4 x i8] c"pop\00", align 1
@pop_doc = internal global [41 x i8] c"Remove and return the rightmost element.\00", align 16
@.str.23 = private unnamed_addr constant [8 x i8] c"popleft\00", align 1
@popleft_doc = internal global [40 x i8] c"Remove and return the leftmost element.\00", align 16
@.str.24 = private unnamed_addr constant [11 x i8] c"__reduce__\00", align 1
@reduce_doc = internal global [39 x i8] c"Return state information for pickling.\00", align 16
@.str.25 = private unnamed_addr constant [7 x i8] c"remove\00", align 1
@remove_doc = internal global [53 x i8] c"D.remove(value) -- remove first occurrence of value.\00", align 16
@.str.26 = private unnamed_addr constant [13 x i8] c"__reversed__\00", align 1
@reversed_doc = internal global [61 x i8] c"D.__reversed__() -- return a reverse iterator over the deque\00", align 16
@.str.27 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@reverse_doc = internal global [34 x i8] c"D.reverse() -- reverse *IN PLACE*\00", align 16
@.str.28 = private unnamed_addr constant [7 x i8] c"rotate\00", align 1
@rotate_doc = internal global [86 x i8] c"Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.\00", align 16
@.str.29 = private unnamed_addr constant [11 x i8] c"__sizeof__\00", align 1
@sizeof_doc = internal global [48 x i8] c"D.__sizeof__() -- size of D in memory, in bytes\00", align 16
@.str.30 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"Oi\00", align 1
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.32 = private unnamed_addr constant [31 x i8] c"deque mutated during iteration\00", align 1
@deque_reduce.PyId___dict__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), %struct._object* null }, align 8
@.str.33 = private unnamed_addr constant [9 x i8] c"__dict__\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"O(O)\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"O(On)\00", align 1
@.str.36 = private unnamed_addr constant [7 x i8] c"O(OO)O\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"O(On)O\00", align 1
@.str.38 = private unnamed_addr constant [31 x i8] c"deque mutated during remove().\00", align 1
@PyExc_ValueError = external global %struct._object*, align 8
@.str.39 = private unnamed_addr constant [32 x i8] c"deque.remove(x): x not in deque\00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] c"|n:rotate\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"maxlen\00", align 1
@.str.42 = private unnamed_addr constant [45 x i8] c"maximum size of a deque or None if unbounded\00", align 1
@.str.43 = private unnamed_addr constant [9 x i8] c"iterable\00", align 1
@deque_init.kwlist = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), i8* null], align 16
@.str.44 = private unnamed_addr constant [10 x i8] c"|OO:deque\00", align 1
@.str.45 = private unnamed_addr constant [28 x i8] c"maxlen must be non-negative\00", align 1
@.str.46 = private unnamed_addr constant [24 x i8] c"collections.defaultdict\00", align 1
@defdict_doc = internal global [369 x i8] c"defaultdict(default_factory[, ...]) --> dict with default factory\0A\0AThe default factory is called without arguments to produce\0Aa new value when a key is not present, in __getitem__ only.\0AA defaultdict compares equal to a dict with the same items.\0AAll remaining arguments are treated the same as if they were\0Apassed to the dict constructor, including keyword arguments.\0A\00", align 16
@defdict_methods = internal global [5 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.defdictobject*, %struct._object*)* @defdict_missing to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([190 x i8], [190 x i8]* @defdict_missing_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.defdictobject*)* @defdict_copy to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @defdict_copy_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.defdictobject*)* @defdict_copy to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @defdict_copy_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.defdictobject*)* @defdict_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @reduce_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@defdict_members = internal global [2 x %struct.PyMemberDef] [%struct.PyMemberDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.54, i32 0, i32 0), i32 6, i64 40, i32 0, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.55, i32 0, i32 0) }, %struct.PyMemberDef zeroinitializer], align 16
@.str.47 = private unnamed_addr constant [5 x i8] c"None\00", align 1
@.str.48 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.49 = private unnamed_addr constant [20 x i8] c"defaultdict(%U, %U)\00", align 1
@.str.50 = private unnamed_addr constant [12 x i8] c"__missing__\00", align 1
@defdict_missing_doc = internal global [190 x i8] c"__missing__(key) # Called by __getitem__ for missing key; pseudo-code:\0A  if self.default_factory is None: raise KeyError((key,))\0A  self[key] = value = self.default_factory()\0A  return value\0A\00", align 16
@.str.51 = private unnamed_addr constant [5 x i8] c"copy\00", align 1
@defdict_copy_doc = internal global [33 x i8] c"D.copy() -> a shallow copy of D.\00", align 16
@PyExc_KeyError = external global %struct._object*, align 8
@defdict_reduce.PyId_items = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0), %struct._object* null }, align 8
@.str.52 = private unnamed_addr constant [6 x i8] c"items\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.54 = private unnamed_addr constant [16 x i8] c"default_factory\00", align 1
@.str.55 = private unnamed_addr constant [51 x i8] c"Factory for default value called by __missing__().\00", align 1
@PyExc_TypeError = external global %struct._object*, align 8
@.str.56 = private unnamed_addr constant [32 x i8] c"first argument must be callable\00", align 1
@.str.57 = private unnamed_addr constant [29 x i8] c"_collections._deque_iterator\00", align 1
@dequeiter_methods = internal global [3 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.58, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeiterobject*)* @dequeiter_len to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @length_hint_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.dequeiterobject*)* @dequeiter_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @reduce_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.58 = private unnamed_addr constant [16 x i8] c"__length_hint__\00", align 1
@length_hint_doc = internal global [55 x i8] c"Private method returning an estimate of len(list(it)).\00", align 16
@.str.59 = private unnamed_addr constant [5 x i8] c"O!|n\00", align 1
@.str.60 = private unnamed_addr constant [37 x i8] c"_collections._deque_reverse_iterator\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @PyInit__collections() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %m = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %0 = bitcast %struct._object** %m to i8*, !dbg !1241
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !1241
  call void @llvm.dbg.declare(metadata %struct._object** %m, metadata !416, metadata !1242), !dbg !1243
  %call = call %struct._object* @PyModule_Create2(%struct.PyModuleDef* @_collectionsmodule, i32 1013), !dbg !1244
  store %struct._object* %call, %struct._object** %m, align 8, !dbg !1245, !tbaa !1246
  %1 = load %struct._object*, %struct._object** %m, align 8, !dbg !1250, !tbaa !1246
  %cmp = icmp eq %struct._object* %1, null, !dbg !1252
  br i1 %cmp, label %if.then, label %if.end, !dbg !1253

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !1254
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1254

if.end:                                           ; preds = %entry
  %call1 = call i32 @PyType_Ready(%struct._typeobject* @deque_type), !dbg !1255
  %cmp2 = icmp slt i32 %call1, 0, !dbg !1257
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !1258

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !1259
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1259

if.end.4:                                         ; preds = %if.end
  %2 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @deque_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !1260, !tbaa !1261
  %inc = add i64 %2, 1, !dbg !1260
  store i64 %inc, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @deque_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !1260, !tbaa !1261
  %3 = load %struct._object*, %struct._object** %m, align 8, !dbg !1264, !tbaa !1246
  %call5 = call i32 @PyModule_AddObject(%struct._object* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @deque_type, i32 0, i32 0, i32 0)), !dbg !1265
  store %struct._typeobject* @PyDict_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @defdict_type, i32 0, i32 30), align 8, !dbg !1266, !tbaa !1267
  %call6 = call i32 @PyType_Ready(%struct._typeobject* @defdict_type), !dbg !1271
  %cmp7 = icmp slt i32 %call6, 0, !dbg !1273
  br i1 %cmp7, label %if.then.8, label %if.end.9, !dbg !1274

if.then.8:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval, !dbg !1275
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1275

if.end.9:                                         ; preds = %if.end.4
  %4 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @defdict_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !1276, !tbaa !1261
  %inc10 = add i64 %4, 1, !dbg !1276
  store i64 %inc10, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @defdict_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !1276, !tbaa !1261
  %5 = load %struct._object*, %struct._object** %m, align 8, !dbg !1277, !tbaa !1246
  %call11 = call i32 @PyModule_AddObject(%struct._object* %5, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @defdict_type, i32 0, i32 0, i32 0)), !dbg !1278
  %call12 = call i32 @PyType_Ready(%struct._typeobject* @dequeiter_type), !dbg !1279
  %cmp13 = icmp slt i32 %call12, 0, !dbg !1281
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !1282

if.then.14:                                       ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval, !dbg !1283
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1283

if.end.15:                                        ; preds = %if.end.9
  %6 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @dequeiter_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !1284, !tbaa !1261
  %inc16 = add i64 %6, 1, !dbg !1284
  store i64 %inc16, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @dequeiter_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !1284, !tbaa !1261
  %7 = load %struct._object*, %struct._object** %m, align 8, !dbg !1285, !tbaa !1246
  %call17 = call i32 @PyModule_AddObject(%struct._object* %7, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @dequeiter_type, i32 0, i32 0, i32 0)), !dbg !1286
  %call18 = call i32 @PyType_Ready(%struct._typeobject* @dequereviter_type), !dbg !1287
  %cmp19 = icmp slt i32 %call18, 0, !dbg !1289
  br i1 %cmp19, label %if.then.20, label %if.end.21, !dbg !1290

if.then.20:                                       ; preds = %if.end.15
  store %struct._object* null, %struct._object** %retval, !dbg !1291
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1291

if.end.21:                                        ; preds = %if.end.15
  %8 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @dequereviter_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !1292, !tbaa !1261
  %inc22 = add i64 %8, 1, !dbg !1292
  store i64 %inc22, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @dequereviter_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !1292, !tbaa !1261
  %9 = load %struct._object*, %struct._object** %m, align 8, !dbg !1293, !tbaa !1246
  %call23 = call i32 @PyModule_AddObject(%struct._object* %9, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @dequereviter_type, i32 0, i32 0, i32 0)), !dbg !1294
  %10 = load %struct._object*, %struct._object** %m, align 8, !dbg !1295, !tbaa !1246
  store %struct._object* %10, %struct._object** %retval, !dbg !1296
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1296

cleanup:                                          ; preds = %if.end.21, %if.then.20, %if.then.14, %if.then.8, %if.then.3, %if.then
  %11 = bitcast %struct._object** %m to i8*, !dbg !1297
  call void @llvm.lifetime.end(i64 8, i8* %11) #1, !dbg !1297
  %12 = load %struct._object*, %struct._object** %retval, !dbg !1297
  ret %struct._object* %12, !dbg !1297
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare %struct._object* @PyModule_Create2(%struct.PyModuleDef*, i32) #3

declare i32 @PyType_Ready(%struct._typeobject*) #3

declare i32 @PyModule_AddObject(%struct._object*, i8*, %struct._object*) #3

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @_count_elements(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %it = alloca %struct._object*, align 8
  %iterable = alloca %struct._object*, align 8
  %mapping = alloca %struct._object*, align 8
  %oldval = alloca %struct._object*, align 8
  %newval = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %zero = alloca %struct._object*, align 8
  %one = alloca %struct._object*, align 8
  %bound_get = alloca %struct._object*, align 8
  %mapping_get = alloca %struct._object*, align 8
  %dict_get = alloca %struct._object*, align 8
  %mapping_setitem = alloca %struct._object*, align 8
  %dict_setitem = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp84 = alloca %struct._object*, align 8
  %_py_tmp103 = alloca %struct._object*, align 8
  %_py_decref_tmp107 = alloca %struct._object*, align 8
  %_py_decref_tmp122 = alloca %struct._object*, align 8
  %_py_decref_tmp136 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp151 = alloca %struct._object*, align 8
  %_py_xdecref_tmp166 = alloca %struct._object*, align 8
  %_py_decref_tmp170 = alloca %struct._object*, align 8
  %_py_xdecref_tmp185 = alloca %struct._object*, align 8
  %_py_decref_tmp189 = alloca %struct._object*, align 8
  %_py_xdecref_tmp204 = alloca %struct._object*, align 8
  %_py_decref_tmp208 = alloca %struct._object*, align 8
  %_py_xdecref_tmp223 = alloca %struct._object*, align 8
  %_py_decref_tmp227 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !419, metadata !1242), !dbg !1298
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !420, metadata !1242), !dbg !1299
  %0 = bitcast %struct._object** %it to i8*, !dbg !1300
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !1300
  call void @llvm.dbg.declare(metadata %struct._object** %it, metadata !421, metadata !1242), !dbg !1301
  %1 = bitcast %struct._object** %iterable to i8*, !dbg !1300
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !1300
  call void @llvm.dbg.declare(metadata %struct._object** %iterable, metadata !422, metadata !1242), !dbg !1302
  %2 = bitcast %struct._object** %mapping to i8*, !dbg !1300
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !1300
  call void @llvm.dbg.declare(metadata %struct._object** %mapping, metadata !423, metadata !1242), !dbg !1303
  %3 = bitcast %struct._object** %oldval to i8*, !dbg !1300
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !1300
  call void @llvm.dbg.declare(metadata %struct._object** %oldval, metadata !424, metadata !1242), !dbg !1304
  %4 = bitcast %struct._object** %newval to i8*, !dbg !1305
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !1305
  call void @llvm.dbg.declare(metadata %struct._object** %newval, metadata !425, metadata !1242), !dbg !1306
  store %struct._object* null, %struct._object** %newval, align 8, !dbg !1306, !tbaa !1246
  %5 = bitcast %struct._object** %key to i8*, !dbg !1307
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !1307
  call void @llvm.dbg.declare(metadata %struct._object** %key, metadata !426, metadata !1242), !dbg !1308
  store %struct._object* null, %struct._object** %key, align 8, !dbg !1308, !tbaa !1246
  %6 = bitcast %struct._object** %zero to i8*, !dbg !1309
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !1309
  call void @llvm.dbg.declare(metadata %struct._object** %zero, metadata !427, metadata !1242), !dbg !1310
  store %struct._object* null, %struct._object** %zero, align 8, !dbg !1310, !tbaa !1246
  %7 = bitcast %struct._object** %one to i8*, !dbg !1311
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !1311
  call void @llvm.dbg.declare(metadata %struct._object** %one, metadata !428, metadata !1242), !dbg !1312
  store %struct._object* null, %struct._object** %one, align 8, !dbg !1312, !tbaa !1246
  %8 = bitcast %struct._object** %bound_get to i8*, !dbg !1313
  call void @llvm.lifetime.start(i64 8, i8* %8) #1, !dbg !1313
  call void @llvm.dbg.declare(metadata %struct._object** %bound_get, metadata !429, metadata !1242), !dbg !1314
  store %struct._object* null, %struct._object** %bound_get, align 8, !dbg !1314, !tbaa !1246
  %9 = bitcast %struct._object** %mapping_get to i8*, !dbg !1315
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !1315
  call void @llvm.dbg.declare(metadata %struct._object** %mapping_get, metadata !430, metadata !1242), !dbg !1316
  %10 = bitcast %struct._object** %dict_get to i8*, !dbg !1317
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !1317
  call void @llvm.dbg.declare(metadata %struct._object** %dict_get, metadata !431, metadata !1242), !dbg !1318
  %11 = bitcast %struct._object** %mapping_setitem to i8*, !dbg !1319
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !1319
  call void @llvm.dbg.declare(metadata %struct._object** %mapping_setitem, metadata !432, metadata !1242), !dbg !1320
  %12 = bitcast %struct._object** %dict_setitem to i8*, !dbg !1321
  call void @llvm.lifetime.start(i64 8, i8* %12) #1, !dbg !1321
  call void @llvm.dbg.declare(metadata %struct._object** %dict_setitem, metadata !433, metadata !1242), !dbg !1322
  %13 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !1323, !tbaa !1246
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), i64 2, i64 2, %struct._object** %mapping, %struct._object** %iterable), !dbg !1325
  %tobool = icmp ne i32 %call, 0, !dbg !1325
  br i1 %tobool, label %if.end, label %if.then, !dbg !1326

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !1327
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1327

if.end:                                           ; preds = %entry
  %14 = load %struct._object*, %struct._object** %iterable, align 8, !dbg !1328, !tbaa !1246
  %call1 = call %struct._object* @PyObject_GetIter(%struct._object* %14), !dbg !1329
  store %struct._object* %call1, %struct._object** %it, align 8, !dbg !1330, !tbaa !1246
  %15 = load %struct._object*, %struct._object** %it, align 8, !dbg !1331, !tbaa !1246
  %cmp = icmp eq %struct._object* %15, null, !dbg !1333
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !1334

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !1335
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1335

if.end.3:                                         ; preds = %if.end
  %call4 = call %struct._object* @PyLong_FromLong(i64 1), !dbg !1336
  store %struct._object* %call4, %struct._object** %one, align 8, !dbg !1337, !tbaa !1246
  %16 = load %struct._object*, %struct._object** %one, align 8, !dbg !1338, !tbaa !1246
  %cmp5 = icmp eq %struct._object* %16, null, !dbg !1340
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !1341

if.then.6:                                        ; preds = %if.end.3
  br label %done, !dbg !1342

if.end.7:                                         ; preds = %if.end.3
  %17 = load %struct._object*, %struct._object** %mapping, align 8, !dbg !1343, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1, !dbg !1344
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !1344, !tbaa !1345
  %call8 = call %struct._object* @_PyType_LookupId(%struct._typeobject* %18, %struct._Py_Identifier* @_count_elements.PyId_get), !dbg !1346
  store %struct._object* %call8, %struct._object** %mapping_get, align 8, !dbg !1347, !tbaa !1246
  %call9 = call %struct._object* @_PyType_LookupId(%struct._typeobject* @PyDict_Type, %struct._Py_Identifier* @_count_elements.PyId_get), !dbg !1348
  store %struct._object* %call9, %struct._object** %dict_get, align 8, !dbg !1349, !tbaa !1246
  %19 = load %struct._object*, %struct._object** %mapping, align 8, !dbg !1350, !tbaa !1246
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !1351
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8, !dbg !1351, !tbaa !1345
  %call11 = call %struct._object* @_PyType_LookupId(%struct._typeobject* %20, %struct._Py_Identifier* @_count_elements.PyId___setitem__), !dbg !1352
  store %struct._object* %call11, %struct._object** %mapping_setitem, align 8, !dbg !1353, !tbaa !1246
  %call12 = call %struct._object* @_PyType_LookupId(%struct._typeobject* @PyDict_Type, %struct._Py_Identifier* @_count_elements.PyId___setitem__), !dbg !1354
  store %struct._object* %call12, %struct._object** %dict_setitem, align 8, !dbg !1355, !tbaa !1246
  %21 = load %struct._object*, %struct._object** %mapping_get, align 8, !dbg !1356, !tbaa !1246
  %cmp13 = icmp ne %struct._object* %21, null, !dbg !1357
  br i1 %cmp13, label %land.lhs.true, label %if.else.63, !dbg !1358

land.lhs.true:                                    ; preds = %if.end.7
  %22 = load %struct._object*, %struct._object** %mapping_get, align 8, !dbg !1359, !tbaa !1246
  %23 = load %struct._object*, %struct._object** %dict_get, align 8, !dbg !1361, !tbaa !1246
  %cmp14 = icmp eq %struct._object* %22, %23, !dbg !1362
  br i1 %cmp14, label %land.lhs.true.15, label %if.else.63, !dbg !1363

land.lhs.true.15:                                 ; preds = %land.lhs.true
  %24 = load %struct._object*, %struct._object** %mapping_setitem, align 8, !dbg !1364, !tbaa !1246
  %cmp16 = icmp ne %struct._object* %24, null, !dbg !1365
  br i1 %cmp16, label %land.lhs.true.17, label %if.else.63, !dbg !1366

land.lhs.true.17:                                 ; preds = %land.lhs.true.15
  %25 = load %struct._object*, %struct._object** %mapping_setitem, align 8, !dbg !1367, !tbaa !1246
  %26 = load %struct._object*, %struct._object** %dict_setitem, align 8, !dbg !1368, !tbaa !1246
  %cmp18 = icmp eq %struct._object* %25, %26, !dbg !1369
  br i1 %cmp18, label %if.then.19, label %if.else.63, !dbg !1370

if.then.19:                                       ; preds = %land.lhs.true.17
  br label %while.cond, !dbg !1371

while.cond:                                       ; preds = %do.end.62, %if.then.19
  br label %while.body, !dbg !1372

while.body:                                       ; preds = %while.cond
  %27 = load %struct._object*, %struct._object** %it, align 8, !dbg !1375, !tbaa !1246
  %call20 = call %struct._object* @PyIter_Next(%struct._object* %27), !dbg !1376
  store %struct._object* %call20, %struct._object** %key, align 8, !dbg !1377, !tbaa !1246
  %28 = load %struct._object*, %struct._object** %key, align 8, !dbg !1378, !tbaa !1246
  %cmp21 = icmp eq %struct._object* %28, null, !dbg !1380
  br i1 %cmp21, label %if.then.22, label %if.end.23, !dbg !1381

if.then.22:                                       ; preds = %while.body
  br label %while.end, !dbg !1382

if.end.23:                                        ; preds = %while.body
  %29 = load %struct._object*, %struct._object** %mapping, align 8, !dbg !1383, !tbaa !1246
  %30 = load %struct._object*, %struct._object** %key, align 8, !dbg !1384, !tbaa !1246
  %call24 = call %struct._object* @PyDict_GetItem(%struct._object* %29, %struct._object* %30), !dbg !1385
  store %struct._object* %call24, %struct._object** %oldval, align 8, !dbg !1386, !tbaa !1246
  %31 = load %struct._object*, %struct._object** %oldval, align 8, !dbg !1387, !tbaa !1246
  %cmp25 = icmp eq %struct._object* %31, null, !dbg !1388
  br i1 %cmp25, label %if.then.26, label %if.else, !dbg !1389

if.then.26:                                       ; preds = %if.end.23
  %32 = load %struct._object*, %struct._object** %mapping, align 8, !dbg !1390, !tbaa !1246
  %33 = load %struct._object*, %struct._object** %key, align 8, !dbg !1393, !tbaa !1246
  %34 = load %struct._object*, %struct._object** %one, align 8, !dbg !1394, !tbaa !1246
  %call27 = call i32 @PyDict_SetItem(%struct._object* %32, %struct._object* %33, %struct._object* %34), !dbg !1395
  %cmp28 = icmp eq i32 %call27, -1, !dbg !1396
  br i1 %cmp28, label %if.then.29, label %if.end.30, !dbg !1397

if.then.29:                                       ; preds = %if.then.26
  br label %while.end, !dbg !1398

if.end.30:                                        ; preds = %if.then.26
  br label %if.end.50, !dbg !1399

if.else:                                          ; preds = %if.end.23
  %35 = load %struct._object*, %struct._object** %oldval, align 8, !dbg !1400, !tbaa !1246
  %36 = load %struct._object*, %struct._object** %one, align 8, !dbg !1401, !tbaa !1246
  %call31 = call %struct._object* @PyNumber_Add(%struct._object* %35, %struct._object* %36), !dbg !1402
  store %struct._object* %call31, %struct._object** %newval, align 8, !dbg !1403, !tbaa !1246
  %37 = load %struct._object*, %struct._object** %newval, align 8, !dbg !1404, !tbaa !1246
  %cmp32 = icmp eq %struct._object* %37, null, !dbg !1406
  br i1 %cmp32, label %if.then.33, label %if.end.34, !dbg !1407

if.then.33:                                       ; preds = %if.else
  br label %while.end, !dbg !1408

if.end.34:                                        ; preds = %if.else
  %38 = load %struct._object*, %struct._object** %mapping, align 8, !dbg !1409, !tbaa !1246
  %39 = load %struct._object*, %struct._object** %key, align 8, !dbg !1411, !tbaa !1246
  %40 = load %struct._object*, %struct._object** %newval, align 8, !dbg !1412, !tbaa !1246
  %call35 = call i32 @PyDict_SetItem(%struct._object* %38, %struct._object* %39, %struct._object* %40), !dbg !1413
  %cmp36 = icmp eq i32 %call35, -1, !dbg !1414
  br i1 %cmp36, label %if.then.37, label %if.end.38, !dbg !1415

if.then.37:                                       ; preds = %if.end.34
  br label %while.end, !dbg !1416

if.end.38:                                        ; preds = %if.end.34
  br label %do.body, !dbg !1417

do.body:                                          ; preds = %if.end.38
  %41 = bitcast %struct._object** %_py_tmp to i8*, !dbg !1418
  call void @llvm.lifetime.start(i64 8, i8* %41) #1, !dbg !1418
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp, metadata !434, metadata !1242), !dbg !1420
  %42 = load %struct._object*, %struct._object** %newval, align 8, !dbg !1421, !tbaa !1246
  store %struct._object* %42, %struct._object** %_py_tmp, align 8, !dbg !1420, !tbaa !1246
  %43 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !1422, !tbaa !1246
  %cmp39 = icmp ne %struct._object* %43, null, !dbg !1423
  br i1 %cmp39, label %if.then.40, label %if.end.47, !dbg !1424

if.then.40:                                       ; preds = %do.body
  store %struct._object* null, %struct._object** %newval, align 8, !dbg !1425, !tbaa !1246
  br label %do.body.41, !dbg !1427

do.body.41:                                       ; preds = %if.then.40
  %44 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !1428
  call void @llvm.lifetime.start(i64 8, i8* %44) #1, !dbg !1428
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !441, metadata !1242), !dbg !1430
  %45 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !1431, !tbaa !1246
  store %struct._object* %45, %struct._object** %_py_decref_tmp, align 8, !dbg !1430, !tbaa !1246
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !1432, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0, !dbg !1434
  %47 = load i64, i64* %ob_refcnt, align 8, !dbg !1435, !tbaa !1261
  %dec = add i64 %47, -1, !dbg !1435
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !1435, !tbaa !1261
  %cmp42 = icmp ne i64 %dec, 0, !dbg !1436
  br i1 %cmp42, label %if.then.43, label %if.else.44, !dbg !1437

if.then.43:                                       ; preds = %do.body.41
  br label %if.end.46, !dbg !1438

if.else.44:                                       ; preds = %do.body.41
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !1440, !tbaa !1246
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1, !dbg !1442
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8, !dbg !1442, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4, !dbg !1443
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !1443, !tbaa !1444
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !1445, !tbaa !1246
  call void %50(%struct._object* %51), !dbg !1446
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.44, %if.then.43
  %52 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !1447
  call void @llvm.lifetime.end(i64 8, i8* %52) #1, !dbg !1447
  br label %do.cond, !dbg !1449

do.cond:                                          ; preds = %if.end.46
  br label %do.end, !dbg !1450

do.end:                                           ; preds = %do.cond
  br label %if.end.47, !dbg !1452

if.end.47:                                        ; preds = %do.end, %do.body
  %53 = bitcast %struct._object** %_py_tmp to i8*, !dbg !1454
  call void @llvm.lifetime.end(i64 8, i8* %53) #1, !dbg !1454
  br label %do.cond.48, !dbg !1457

do.cond.48:                                       ; preds = %if.end.47
  br label %do.end.49, !dbg !1458

do.end.49:                                        ; preds = %do.cond.48
  br label %if.end.50

if.end.50:                                        ; preds = %do.end.49, %if.end.30
  br label %do.body.51, !dbg !1460

do.body.51:                                       ; preds = %if.end.50
  %54 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !1461
  call void @llvm.lifetime.start(i64 8, i8* %54) #1, !dbg !1461
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp52, metadata !445, metadata !1242), !dbg !1463
  %55 = load %struct._object*, %struct._object** %key, align 8, !dbg !1464, !tbaa !1246
  store %struct._object* %55, %struct._object** %_py_decref_tmp52, align 8, !dbg !1463, !tbaa !1246
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !1465, !tbaa !1246
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0, !dbg !1467
  %57 = load i64, i64* %ob_refcnt53, align 8, !dbg !1468, !tbaa !1261
  %dec54 = add i64 %57, -1, !dbg !1468
  store i64 %dec54, i64* %ob_refcnt53, align 8, !dbg !1468, !tbaa !1261
  %cmp55 = icmp ne i64 %dec54, 0, !dbg !1469
  br i1 %cmp55, label %if.then.56, label %if.else.57, !dbg !1470

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60, !dbg !1471

if.else.57:                                       ; preds = %do.body.51
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !1473, !tbaa !1246
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1, !dbg !1475
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8, !dbg !1475, !tbaa !1345
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4, !dbg !1476
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8, !dbg !1476, !tbaa !1444
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !1477, !tbaa !1246
  call void %60(%struct._object* %61), !dbg !1478
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  %62 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !1479
  call void @llvm.lifetime.end(i64 8, i8* %62) #1, !dbg !1479
  br label %do.cond.61, !dbg !1481

do.cond.61:                                       ; preds = %if.end.60
  br label %do.end.62, !dbg !1482

do.end.62:                                        ; preds = %do.cond.61
  br label %while.cond, !dbg !1371

while.end:                                        ; preds = %if.then.37, %if.then.33, %if.then.29, %if.then.22
  br label %if.end.134, !dbg !1484

if.else.63:                                       ; preds = %land.lhs.true.17, %land.lhs.true.15, %land.lhs.true, %if.end.7
  %63 = load %struct._object*, %struct._object** %mapping, align 8, !dbg !1485, !tbaa !1246
  %call64 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %63, %struct._Py_Identifier* @_count_elements.PyId_get), !dbg !1486
  store %struct._object* %call64, %struct._object** %bound_get, align 8, !dbg !1487, !tbaa !1246
  %64 = load %struct._object*, %struct._object** %bound_get, align 8, !dbg !1488, !tbaa !1246
  %cmp65 = icmp eq %struct._object* %64, null, !dbg !1490
  br i1 %cmp65, label %if.then.66, label %if.end.67, !dbg !1491

if.then.66:                                       ; preds = %if.else.63
  br label %done, !dbg !1492

if.end.67:                                        ; preds = %if.else.63
  %call68 = call %struct._object* @PyLong_FromLong(i64 0), !dbg !1493
  store %struct._object* %call68, %struct._object** %zero, align 8, !dbg !1494, !tbaa !1246
  %65 = load %struct._object*, %struct._object** %zero, align 8, !dbg !1495, !tbaa !1246
  %cmp69 = icmp eq %struct._object* %65, null, !dbg !1497
  br i1 %cmp69, label %if.then.70, label %if.end.71, !dbg !1498

if.then.70:                                       ; preds = %if.end.67
  br label %done, !dbg !1499

if.end.71:                                        ; preds = %if.end.67
  br label %while.cond.72, !dbg !1500

while.cond.72:                                    ; preds = %do.end.132, %if.end.71
  br label %while.body.73, !dbg !1501

while.body.73:                                    ; preds = %while.cond.72
  %66 = load %struct._object*, %struct._object** %it, align 8, !dbg !1504, !tbaa !1246
  %call74 = call %struct._object* @PyIter_Next(%struct._object* %66), !dbg !1505
  store %struct._object* %call74, %struct._object** %key, align 8, !dbg !1506, !tbaa !1246
  %67 = load %struct._object*, %struct._object** %key, align 8, !dbg !1507, !tbaa !1246
  %cmp75 = icmp eq %struct._object* %67, null, !dbg !1509
  br i1 %cmp75, label %if.then.76, label %if.end.77, !dbg !1510

if.then.76:                                       ; preds = %while.body.73
  br label %while.end.133, !dbg !1511

if.end.77:                                        ; preds = %while.body.73
  %68 = load %struct._object*, %struct._object** %bound_get, align 8, !dbg !1512, !tbaa !1246
  %69 = load %struct._object*, %struct._object** %key, align 8, !dbg !1513, !tbaa !1246
  %70 = load %struct._object*, %struct._object** %zero, align 8, !dbg !1514, !tbaa !1246
  %call78 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %68, %struct._object* %69, %struct._object* %70, i8* null), !dbg !1515
  store %struct._object* %call78, %struct._object** %oldval, align 8, !dbg !1516, !tbaa !1246
  %71 = load %struct._object*, %struct._object** %oldval, align 8, !dbg !1517, !tbaa !1246
  %cmp79 = icmp eq %struct._object* %71, null, !dbg !1519
  br i1 %cmp79, label %if.then.80, label %if.end.81, !dbg !1520

if.then.80:                                       ; preds = %if.end.77
  br label %while.end.133, !dbg !1521

if.end.81:                                        ; preds = %if.end.77
  %72 = load %struct._object*, %struct._object** %oldval, align 8, !dbg !1522, !tbaa !1246
  %73 = load %struct._object*, %struct._object** %one, align 8, !dbg !1523, !tbaa !1246
  %call82 = call %struct._object* @PyNumber_Add(%struct._object* %72, %struct._object* %73), !dbg !1524
  store %struct._object* %call82, %struct._object** %newval, align 8, !dbg !1525, !tbaa !1246
  br label %do.body.83, !dbg !1526

do.body.83:                                       ; preds = %if.end.81
  %74 = bitcast %struct._object** %_py_decref_tmp84 to i8*, !dbg !1527
  call void @llvm.lifetime.start(i64 8, i8* %74) #1, !dbg !1527
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp84, metadata !447, metadata !1242), !dbg !1529
  %75 = load %struct._object*, %struct._object** %oldval, align 8, !dbg !1530, !tbaa !1246
  store %struct._object* %75, %struct._object** %_py_decref_tmp84, align 8, !dbg !1529, !tbaa !1246
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8, !dbg !1531, !tbaa !1246
  %ob_refcnt85 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0, !dbg !1533
  %77 = load i64, i64* %ob_refcnt85, align 8, !dbg !1534, !tbaa !1261
  %dec86 = add i64 %77, -1, !dbg !1534
  store i64 %dec86, i64* %ob_refcnt85, align 8, !dbg !1534, !tbaa !1261
  %cmp87 = icmp ne i64 %dec86, 0, !dbg !1535
  br i1 %cmp87, label %if.then.88, label %if.else.89, !dbg !1536

if.then.88:                                       ; preds = %do.body.83
  br label %if.end.92, !dbg !1537

if.else.89:                                       ; preds = %do.body.83
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8, !dbg !1539, !tbaa !1246
  %ob_type90 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1, !dbg !1541
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type90, align 8, !dbg !1541, !tbaa !1345
  %tp_dealloc91 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4, !dbg !1542
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc91, align 8, !dbg !1542, !tbaa !1444
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8, !dbg !1543, !tbaa !1246
  call void %80(%struct._object* %81), !dbg !1544
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.89, %if.then.88
  %82 = bitcast %struct._object** %_py_decref_tmp84 to i8*, !dbg !1545
  call void @llvm.lifetime.end(i64 8, i8* %82) #1, !dbg !1545
  br label %do.cond.93, !dbg !1547

do.cond.93:                                       ; preds = %if.end.92
  br label %do.end.94, !dbg !1548

do.end.94:                                        ; preds = %do.cond.93
  %83 = load %struct._object*, %struct._object** %newval, align 8, !dbg !1550, !tbaa !1246
  %cmp95 = icmp eq %struct._object* %83, null, !dbg !1552
  br i1 %cmp95, label %if.then.96, label %if.end.97, !dbg !1553

if.then.96:                                       ; preds = %do.end.94
  br label %while.end.133, !dbg !1554

if.end.97:                                        ; preds = %do.end.94
  %84 = load %struct._object*, %struct._object** %mapping, align 8, !dbg !1555, !tbaa !1246
  %85 = load %struct._object*, %struct._object** %key, align 8, !dbg !1557, !tbaa !1246
  %86 = load %struct._object*, %struct._object** %newval, align 8, !dbg !1558, !tbaa !1246
  %call98 = call i32 @PyObject_SetItem(%struct._object* %84, %struct._object* %85, %struct._object* %86), !dbg !1559
  %cmp99 = icmp eq i32 %call98, -1, !dbg !1560
  br i1 %cmp99, label %if.then.100, label %if.end.101, !dbg !1561

if.then.100:                                      ; preds = %if.end.97
  br label %while.end.133, !dbg !1562

if.end.101:                                       ; preds = %if.end.97
  br label %do.body.102, !dbg !1563

do.body.102:                                      ; preds = %if.end.101
  %87 = bitcast %struct._object** %_py_tmp103 to i8*, !dbg !1564
  call void @llvm.lifetime.start(i64 8, i8* %87) #1, !dbg !1564
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp103, metadata !451, metadata !1242), !dbg !1566
  %88 = load %struct._object*, %struct._object** %newval, align 8, !dbg !1567, !tbaa !1246
  store %struct._object* %88, %struct._object** %_py_tmp103, align 8, !dbg !1566, !tbaa !1246
  %89 = load %struct._object*, %struct._object** %_py_tmp103, align 8, !dbg !1568, !tbaa !1246
  %cmp104 = icmp ne %struct._object* %89, null, !dbg !1569
  br i1 %cmp104, label %if.then.105, label %if.end.118, !dbg !1570

if.then.105:                                      ; preds = %do.body.102
  store %struct._object* null, %struct._object** %newval, align 8, !dbg !1571, !tbaa !1246
  br label %do.body.106, !dbg !1573

do.body.106:                                      ; preds = %if.then.105
  %90 = bitcast %struct._object** %_py_decref_tmp107 to i8*, !dbg !1574
  call void @llvm.lifetime.start(i64 8, i8* %90) #1, !dbg !1574
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp107, metadata !453, metadata !1242), !dbg !1576
  %91 = load %struct._object*, %struct._object** %_py_tmp103, align 8, !dbg !1577, !tbaa !1246
  store %struct._object* %91, %struct._object** %_py_decref_tmp107, align 8, !dbg !1576, !tbaa !1246
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8, !dbg !1578, !tbaa !1246
  %ob_refcnt108 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0, !dbg !1580
  %93 = load i64, i64* %ob_refcnt108, align 8, !dbg !1581, !tbaa !1261
  %dec109 = add i64 %93, -1, !dbg !1581
  store i64 %dec109, i64* %ob_refcnt108, align 8, !dbg !1581, !tbaa !1261
  %cmp110 = icmp ne i64 %dec109, 0, !dbg !1582
  br i1 %cmp110, label %if.then.111, label %if.else.112, !dbg !1583

if.then.111:                                      ; preds = %do.body.106
  br label %if.end.115, !dbg !1584

if.else.112:                                      ; preds = %do.body.106
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8, !dbg !1586, !tbaa !1246
  %ob_type113 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1, !dbg !1588
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type113, align 8, !dbg !1588, !tbaa !1345
  %tp_dealloc114 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4, !dbg !1589
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc114, align 8, !dbg !1589, !tbaa !1444
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8, !dbg !1590, !tbaa !1246
  call void %96(%struct._object* %97), !dbg !1591
  br label %if.end.115

if.end.115:                                       ; preds = %if.else.112, %if.then.111
  %98 = bitcast %struct._object** %_py_decref_tmp107 to i8*, !dbg !1592
  call void @llvm.lifetime.end(i64 8, i8* %98) #1, !dbg !1592
  br label %do.cond.116, !dbg !1594

do.cond.116:                                      ; preds = %if.end.115
  br label %do.end.117, !dbg !1595

do.end.117:                                       ; preds = %do.cond.116
  br label %if.end.118, !dbg !1597

if.end.118:                                       ; preds = %do.end.117, %do.body.102
  %99 = bitcast %struct._object** %_py_tmp103 to i8*, !dbg !1599
  call void @llvm.lifetime.end(i64 8, i8* %99) #1, !dbg !1599
  br label %do.cond.119, !dbg !1602

do.cond.119:                                      ; preds = %if.end.118
  br label %do.end.120, !dbg !1603

do.end.120:                                       ; preds = %do.cond.119
  br label %do.body.121, !dbg !1605

do.body.121:                                      ; preds = %do.end.120
  %100 = bitcast %struct._object** %_py_decref_tmp122 to i8*, !dbg !1606
  call void @llvm.lifetime.start(i64 8, i8* %100) #1, !dbg !1606
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp122, metadata !457, metadata !1242), !dbg !1608
  %101 = load %struct._object*, %struct._object** %key, align 8, !dbg !1609, !tbaa !1246
  store %struct._object* %101, %struct._object** %_py_decref_tmp122, align 8, !dbg !1608, !tbaa !1246
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !1610, !tbaa !1246
  %ob_refcnt123 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 0, !dbg !1612
  %103 = load i64, i64* %ob_refcnt123, align 8, !dbg !1613, !tbaa !1261
  %dec124 = add i64 %103, -1, !dbg !1613
  store i64 %dec124, i64* %ob_refcnt123, align 8, !dbg !1613, !tbaa !1261
  %cmp125 = icmp ne i64 %dec124, 0, !dbg !1614
  br i1 %cmp125, label %if.then.126, label %if.else.127, !dbg !1615

if.then.126:                                      ; preds = %do.body.121
  br label %if.end.130, !dbg !1616

if.else.127:                                      ; preds = %do.body.121
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !1618, !tbaa !1246
  %ob_type128 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1, !dbg !1620
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type128, align 8, !dbg !1620, !tbaa !1345
  %tp_dealloc129 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 4, !dbg !1621
  %106 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc129, align 8, !dbg !1621, !tbaa !1444
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !1622, !tbaa !1246
  call void %106(%struct._object* %107), !dbg !1623
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.127, %if.then.126
  %108 = bitcast %struct._object** %_py_decref_tmp122 to i8*, !dbg !1624
  call void @llvm.lifetime.end(i64 8, i8* %108) #1, !dbg !1624
  br label %do.cond.131, !dbg !1625

do.cond.131:                                      ; preds = %if.end.130
  br label %do.end.132, !dbg !1626

do.end.132:                                       ; preds = %do.cond.131
  br label %while.cond.72, !dbg !1500

while.end.133:                                    ; preds = %if.then.100, %if.then.96, %if.then.80, %if.then.76
  br label %if.end.134

if.end.134:                                       ; preds = %while.end.133, %while.end
  br label %done, !dbg !1368

done:                                             ; preds = %if.end.134, %if.then.70, %if.then.66, %if.then.6
  br label %do.body.135, !dbg !1628

do.body.135:                                      ; preds = %done
  %109 = bitcast %struct._object** %_py_decref_tmp136 to i8*, !dbg !1629
  call void @llvm.lifetime.start(i64 8, i8* %109) #1, !dbg !1629
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp136, metadata !459, metadata !1242), !dbg !1631
  %110 = load %struct._object*, %struct._object** %it, align 8, !dbg !1632, !tbaa !1246
  store %struct._object* %110, %struct._object** %_py_decref_tmp136, align 8, !dbg !1631, !tbaa !1246
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8, !dbg !1633, !tbaa !1246
  %ob_refcnt137 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 0, !dbg !1635
  %112 = load i64, i64* %ob_refcnt137, align 8, !dbg !1636, !tbaa !1261
  %dec138 = add i64 %112, -1, !dbg !1636
  store i64 %dec138, i64* %ob_refcnt137, align 8, !dbg !1636, !tbaa !1261
  %cmp139 = icmp ne i64 %dec138, 0, !dbg !1637
  br i1 %cmp139, label %if.then.140, label %if.else.141, !dbg !1638

if.then.140:                                      ; preds = %do.body.135
  br label %if.end.144, !dbg !1639

if.else.141:                                      ; preds = %do.body.135
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8, !dbg !1641, !tbaa !1246
  %ob_type142 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 1, !dbg !1643
  %114 = load %struct._typeobject*, %struct._typeobject** %ob_type142, align 8, !dbg !1643, !tbaa !1345
  %tp_dealloc143 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 4, !dbg !1644
  %115 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc143, align 8, !dbg !1644, !tbaa !1444
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8, !dbg !1645, !tbaa !1246
  call void %115(%struct._object* %116), !dbg !1646
  br label %if.end.144

if.end.144:                                       ; preds = %if.else.141, %if.then.140
  %117 = bitcast %struct._object** %_py_decref_tmp136 to i8*, !dbg !1647
  call void @llvm.lifetime.end(i64 8, i8* %117) #1, !dbg !1647
  br label %do.cond.145, !dbg !1649

do.cond.145:                                      ; preds = %if.end.144
  br label %do.end.146, !dbg !1650

do.end.146:                                       ; preds = %do.cond.145
  br label %do.body.147, !dbg !1652

do.body.147:                                      ; preds = %do.end.146
  %118 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !1653
  call void @llvm.lifetime.start(i64 8, i8* %118) #1, !dbg !1653
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !461, metadata !1242), !dbg !1655
  %119 = load %struct._object*, %struct._object** %key, align 8, !dbg !1656, !tbaa !1246
  store %struct._object* %119, %struct._object** %_py_xdecref_tmp, align 8, !dbg !1655, !tbaa !1246
  %120 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !1657, !tbaa !1246
  %cmp148 = icmp ne %struct._object* %120, null, !dbg !1658
  br i1 %cmp148, label %if.then.149, label %if.end.162, !dbg !1659

if.then.149:                                      ; preds = %do.body.147
  br label %do.body.150, !dbg !1660

do.body.150:                                      ; preds = %if.then.149
  %121 = bitcast %struct._object** %_py_decref_tmp151 to i8*, !dbg !1662
  call void @llvm.lifetime.start(i64 8, i8* %121) #1, !dbg !1662
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp151, metadata !463, metadata !1242), !dbg !1664
  %122 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !1665, !tbaa !1246
  store %struct._object* %122, %struct._object** %_py_decref_tmp151, align 8, !dbg !1664, !tbaa !1246
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp151, align 8, !dbg !1666, !tbaa !1246
  %ob_refcnt152 = getelementptr inbounds %struct._object, %struct._object* %123, i32 0, i32 0, !dbg !1668
  %124 = load i64, i64* %ob_refcnt152, align 8, !dbg !1669, !tbaa !1261
  %dec153 = add i64 %124, -1, !dbg !1669
  store i64 %dec153, i64* %ob_refcnt152, align 8, !dbg !1669, !tbaa !1261
  %cmp154 = icmp ne i64 %dec153, 0, !dbg !1670
  br i1 %cmp154, label %if.then.155, label %if.else.156, !dbg !1671

if.then.155:                                      ; preds = %do.body.150
  br label %if.end.159, !dbg !1672

if.else.156:                                      ; preds = %do.body.150
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp151, align 8, !dbg !1674, !tbaa !1246
  %ob_type157 = getelementptr inbounds %struct._object, %struct._object* %125, i32 0, i32 1, !dbg !1676
  %126 = load %struct._typeobject*, %struct._typeobject** %ob_type157, align 8, !dbg !1676, !tbaa !1345
  %tp_dealloc158 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %126, i32 0, i32 4, !dbg !1677
  %127 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc158, align 8, !dbg !1677, !tbaa !1444
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp151, align 8, !dbg !1678, !tbaa !1246
  call void %127(%struct._object* %128), !dbg !1679
  br label %if.end.159

if.end.159:                                       ; preds = %if.else.156, %if.then.155
  %129 = bitcast %struct._object** %_py_decref_tmp151 to i8*, !dbg !1680
  call void @llvm.lifetime.end(i64 8, i8* %129) #1, !dbg !1680
  br label %do.cond.160, !dbg !1682

do.cond.160:                                      ; preds = %if.end.159
  br label %do.end.161, !dbg !1683

do.end.161:                                       ; preds = %do.cond.160
  br label %if.end.162, !dbg !1685

if.end.162:                                       ; preds = %do.end.161, %do.body.147
  %130 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !1687
  call void @llvm.lifetime.end(i64 8, i8* %130) #1, !dbg !1687
  br label %do.cond.163, !dbg !1690

do.cond.163:                                      ; preds = %if.end.162
  br label %do.end.164, !dbg !1691

do.end.164:                                       ; preds = %do.cond.163
  br label %do.body.165, !dbg !1693

do.body.165:                                      ; preds = %do.end.164
  %131 = bitcast %struct._object** %_py_xdecref_tmp166 to i8*, !dbg !1694
  call void @llvm.lifetime.start(i64 8, i8* %131) #1, !dbg !1694
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp166, metadata !466, metadata !1242), !dbg !1696
  %132 = load %struct._object*, %struct._object** %newval, align 8, !dbg !1697, !tbaa !1246
  store %struct._object* %132, %struct._object** %_py_xdecref_tmp166, align 8, !dbg !1696, !tbaa !1246
  %133 = load %struct._object*, %struct._object** %_py_xdecref_tmp166, align 8, !dbg !1698, !tbaa !1246
  %cmp167 = icmp ne %struct._object* %133, null, !dbg !1699
  br i1 %cmp167, label %if.then.168, label %if.end.181, !dbg !1700

if.then.168:                                      ; preds = %do.body.165
  br label %do.body.169, !dbg !1701

do.body.169:                                      ; preds = %if.then.168
  %134 = bitcast %struct._object** %_py_decref_tmp170 to i8*, !dbg !1703
  call void @llvm.lifetime.start(i64 8, i8* %134) #1, !dbg !1703
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp170, metadata !468, metadata !1242), !dbg !1705
  %135 = load %struct._object*, %struct._object** %_py_xdecref_tmp166, align 8, !dbg !1706, !tbaa !1246
  store %struct._object* %135, %struct._object** %_py_decref_tmp170, align 8, !dbg !1705, !tbaa !1246
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8, !dbg !1707, !tbaa !1246
  %ob_refcnt171 = getelementptr inbounds %struct._object, %struct._object* %136, i32 0, i32 0, !dbg !1709
  %137 = load i64, i64* %ob_refcnt171, align 8, !dbg !1710, !tbaa !1261
  %dec172 = add i64 %137, -1, !dbg !1710
  store i64 %dec172, i64* %ob_refcnt171, align 8, !dbg !1710, !tbaa !1261
  %cmp173 = icmp ne i64 %dec172, 0, !dbg !1711
  br i1 %cmp173, label %if.then.174, label %if.else.175, !dbg !1712

if.then.174:                                      ; preds = %do.body.169
  br label %if.end.178, !dbg !1713

if.else.175:                                      ; preds = %do.body.169
  %138 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8, !dbg !1715, !tbaa !1246
  %ob_type176 = getelementptr inbounds %struct._object, %struct._object* %138, i32 0, i32 1, !dbg !1717
  %139 = load %struct._typeobject*, %struct._typeobject** %ob_type176, align 8, !dbg !1717, !tbaa !1345
  %tp_dealloc177 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %139, i32 0, i32 4, !dbg !1718
  %140 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc177, align 8, !dbg !1718, !tbaa !1444
  %141 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8, !dbg !1719, !tbaa !1246
  call void %140(%struct._object* %141), !dbg !1720
  br label %if.end.178

if.end.178:                                       ; preds = %if.else.175, %if.then.174
  %142 = bitcast %struct._object** %_py_decref_tmp170 to i8*, !dbg !1721
  call void @llvm.lifetime.end(i64 8, i8* %142) #1, !dbg !1721
  br label %do.cond.179, !dbg !1723

do.cond.179:                                      ; preds = %if.end.178
  br label %do.end.180, !dbg !1724

do.end.180:                                       ; preds = %do.cond.179
  br label %if.end.181, !dbg !1726

if.end.181:                                       ; preds = %do.end.180, %do.body.165
  %143 = bitcast %struct._object** %_py_xdecref_tmp166 to i8*, !dbg !1728
  call void @llvm.lifetime.end(i64 8, i8* %143) #1, !dbg !1728
  br label %do.cond.182, !dbg !1729

do.cond.182:                                      ; preds = %if.end.181
  br label %do.end.183, !dbg !1730

do.end.183:                                       ; preds = %do.cond.182
  br label %do.body.184, !dbg !1732

do.body.184:                                      ; preds = %do.end.183
  %144 = bitcast %struct._object** %_py_xdecref_tmp185 to i8*, !dbg !1733
  call void @llvm.lifetime.start(i64 8, i8* %144) #1, !dbg !1733
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp185, metadata !471, metadata !1242), !dbg !1735
  %145 = load %struct._object*, %struct._object** %bound_get, align 8, !dbg !1736, !tbaa !1246
  store %struct._object* %145, %struct._object** %_py_xdecref_tmp185, align 8, !dbg !1735, !tbaa !1246
  %146 = load %struct._object*, %struct._object** %_py_xdecref_tmp185, align 8, !dbg !1737, !tbaa !1246
  %cmp186 = icmp ne %struct._object* %146, null, !dbg !1738
  br i1 %cmp186, label %if.then.187, label %if.end.200, !dbg !1739

if.then.187:                                      ; preds = %do.body.184
  br label %do.body.188, !dbg !1740

do.body.188:                                      ; preds = %if.then.187
  %147 = bitcast %struct._object** %_py_decref_tmp189 to i8*, !dbg !1742
  call void @llvm.lifetime.start(i64 8, i8* %147) #1, !dbg !1742
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp189, metadata !473, metadata !1242), !dbg !1744
  %148 = load %struct._object*, %struct._object** %_py_xdecref_tmp185, align 8, !dbg !1745, !tbaa !1246
  store %struct._object* %148, %struct._object** %_py_decref_tmp189, align 8, !dbg !1744, !tbaa !1246
  %149 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8, !dbg !1746, !tbaa !1246
  %ob_refcnt190 = getelementptr inbounds %struct._object, %struct._object* %149, i32 0, i32 0, !dbg !1748
  %150 = load i64, i64* %ob_refcnt190, align 8, !dbg !1749, !tbaa !1261
  %dec191 = add i64 %150, -1, !dbg !1749
  store i64 %dec191, i64* %ob_refcnt190, align 8, !dbg !1749, !tbaa !1261
  %cmp192 = icmp ne i64 %dec191, 0, !dbg !1750
  br i1 %cmp192, label %if.then.193, label %if.else.194, !dbg !1751

if.then.193:                                      ; preds = %do.body.188
  br label %if.end.197, !dbg !1752

if.else.194:                                      ; preds = %do.body.188
  %151 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8, !dbg !1754, !tbaa !1246
  %ob_type195 = getelementptr inbounds %struct._object, %struct._object* %151, i32 0, i32 1, !dbg !1756
  %152 = load %struct._typeobject*, %struct._typeobject** %ob_type195, align 8, !dbg !1756, !tbaa !1345
  %tp_dealloc196 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %152, i32 0, i32 4, !dbg !1757
  %153 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc196, align 8, !dbg !1757, !tbaa !1444
  %154 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8, !dbg !1758, !tbaa !1246
  call void %153(%struct._object* %154), !dbg !1759
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.194, %if.then.193
  %155 = bitcast %struct._object** %_py_decref_tmp189 to i8*, !dbg !1760
  call void @llvm.lifetime.end(i64 8, i8* %155) #1, !dbg !1760
  br label %do.cond.198, !dbg !1762

do.cond.198:                                      ; preds = %if.end.197
  br label %do.end.199, !dbg !1763

do.end.199:                                       ; preds = %do.cond.198
  br label %if.end.200, !dbg !1765

if.end.200:                                       ; preds = %do.end.199, %do.body.184
  %156 = bitcast %struct._object** %_py_xdecref_tmp185 to i8*, !dbg !1767
  call void @llvm.lifetime.end(i64 8, i8* %156) #1, !dbg !1767
  br label %do.cond.201, !dbg !1768

do.cond.201:                                      ; preds = %if.end.200
  br label %do.end.202, !dbg !1769

do.end.202:                                       ; preds = %do.cond.201
  br label %do.body.203, !dbg !1771

do.body.203:                                      ; preds = %do.end.202
  %157 = bitcast %struct._object** %_py_xdecref_tmp204 to i8*, !dbg !1772
  call void @llvm.lifetime.start(i64 8, i8* %157) #1, !dbg !1772
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp204, metadata !476, metadata !1242), !dbg !1774
  %158 = load %struct._object*, %struct._object** %zero, align 8, !dbg !1775, !tbaa !1246
  store %struct._object* %158, %struct._object** %_py_xdecref_tmp204, align 8, !dbg !1774, !tbaa !1246
  %159 = load %struct._object*, %struct._object** %_py_xdecref_tmp204, align 8, !dbg !1776, !tbaa !1246
  %cmp205 = icmp ne %struct._object* %159, null, !dbg !1777
  br i1 %cmp205, label %if.then.206, label %if.end.219, !dbg !1778

if.then.206:                                      ; preds = %do.body.203
  br label %do.body.207, !dbg !1779

do.body.207:                                      ; preds = %if.then.206
  %160 = bitcast %struct._object** %_py_decref_tmp208 to i8*, !dbg !1781
  call void @llvm.lifetime.start(i64 8, i8* %160) #1, !dbg !1781
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp208, metadata !478, metadata !1242), !dbg !1783
  %161 = load %struct._object*, %struct._object** %_py_xdecref_tmp204, align 8, !dbg !1784, !tbaa !1246
  store %struct._object* %161, %struct._object** %_py_decref_tmp208, align 8, !dbg !1783, !tbaa !1246
  %162 = load %struct._object*, %struct._object** %_py_decref_tmp208, align 8, !dbg !1785, !tbaa !1246
  %ob_refcnt209 = getelementptr inbounds %struct._object, %struct._object* %162, i32 0, i32 0, !dbg !1787
  %163 = load i64, i64* %ob_refcnt209, align 8, !dbg !1788, !tbaa !1261
  %dec210 = add i64 %163, -1, !dbg !1788
  store i64 %dec210, i64* %ob_refcnt209, align 8, !dbg !1788, !tbaa !1261
  %cmp211 = icmp ne i64 %dec210, 0, !dbg !1789
  br i1 %cmp211, label %if.then.212, label %if.else.213, !dbg !1790

if.then.212:                                      ; preds = %do.body.207
  br label %if.end.216, !dbg !1791

if.else.213:                                      ; preds = %do.body.207
  %164 = load %struct._object*, %struct._object** %_py_decref_tmp208, align 8, !dbg !1793, !tbaa !1246
  %ob_type214 = getelementptr inbounds %struct._object, %struct._object* %164, i32 0, i32 1, !dbg !1795
  %165 = load %struct._typeobject*, %struct._typeobject** %ob_type214, align 8, !dbg !1795, !tbaa !1345
  %tp_dealloc215 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %165, i32 0, i32 4, !dbg !1796
  %166 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc215, align 8, !dbg !1796, !tbaa !1444
  %167 = load %struct._object*, %struct._object** %_py_decref_tmp208, align 8, !dbg !1797, !tbaa !1246
  call void %166(%struct._object* %167), !dbg !1798
  br label %if.end.216

if.end.216:                                       ; preds = %if.else.213, %if.then.212
  %168 = bitcast %struct._object** %_py_decref_tmp208 to i8*, !dbg !1799
  call void @llvm.lifetime.end(i64 8, i8* %168) #1, !dbg !1799
  br label %do.cond.217, !dbg !1801

do.cond.217:                                      ; preds = %if.end.216
  br label %do.end.218, !dbg !1802

do.end.218:                                       ; preds = %do.cond.217
  br label %if.end.219, !dbg !1804

if.end.219:                                       ; preds = %do.end.218, %do.body.203
  %169 = bitcast %struct._object** %_py_xdecref_tmp204 to i8*, !dbg !1806
  call void @llvm.lifetime.end(i64 8, i8* %169) #1, !dbg !1806
  br label %do.cond.220, !dbg !1807

do.cond.220:                                      ; preds = %if.end.219
  br label %do.end.221, !dbg !1808

do.end.221:                                       ; preds = %do.cond.220
  br label %do.body.222, !dbg !1810

do.body.222:                                      ; preds = %do.end.221
  %170 = bitcast %struct._object** %_py_xdecref_tmp223 to i8*, !dbg !1811
  call void @llvm.lifetime.start(i64 8, i8* %170) #1, !dbg !1811
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp223, metadata !481, metadata !1242), !dbg !1813
  %171 = load %struct._object*, %struct._object** %one, align 8, !dbg !1814, !tbaa !1246
  store %struct._object* %171, %struct._object** %_py_xdecref_tmp223, align 8, !dbg !1813, !tbaa !1246
  %172 = load %struct._object*, %struct._object** %_py_xdecref_tmp223, align 8, !dbg !1815, !tbaa !1246
  %cmp224 = icmp ne %struct._object* %172, null, !dbg !1816
  br i1 %cmp224, label %if.then.225, label %if.end.238, !dbg !1817

if.then.225:                                      ; preds = %do.body.222
  br label %do.body.226, !dbg !1818

do.body.226:                                      ; preds = %if.then.225
  %173 = bitcast %struct._object** %_py_decref_tmp227 to i8*, !dbg !1820
  call void @llvm.lifetime.start(i64 8, i8* %173) #1, !dbg !1820
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp227, metadata !483, metadata !1242), !dbg !1822
  %174 = load %struct._object*, %struct._object** %_py_xdecref_tmp223, align 8, !dbg !1823, !tbaa !1246
  store %struct._object* %174, %struct._object** %_py_decref_tmp227, align 8, !dbg !1822, !tbaa !1246
  %175 = load %struct._object*, %struct._object** %_py_decref_tmp227, align 8, !dbg !1824, !tbaa !1246
  %ob_refcnt228 = getelementptr inbounds %struct._object, %struct._object* %175, i32 0, i32 0, !dbg !1826
  %176 = load i64, i64* %ob_refcnt228, align 8, !dbg !1827, !tbaa !1261
  %dec229 = add i64 %176, -1, !dbg !1827
  store i64 %dec229, i64* %ob_refcnt228, align 8, !dbg !1827, !tbaa !1261
  %cmp230 = icmp ne i64 %dec229, 0, !dbg !1828
  br i1 %cmp230, label %if.then.231, label %if.else.232, !dbg !1829

if.then.231:                                      ; preds = %do.body.226
  br label %if.end.235, !dbg !1830

if.else.232:                                      ; preds = %do.body.226
  %177 = load %struct._object*, %struct._object** %_py_decref_tmp227, align 8, !dbg !1832, !tbaa !1246
  %ob_type233 = getelementptr inbounds %struct._object, %struct._object* %177, i32 0, i32 1, !dbg !1834
  %178 = load %struct._typeobject*, %struct._typeobject** %ob_type233, align 8, !dbg !1834, !tbaa !1345
  %tp_dealloc234 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %178, i32 0, i32 4, !dbg !1835
  %179 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc234, align 8, !dbg !1835, !tbaa !1444
  %180 = load %struct._object*, %struct._object** %_py_decref_tmp227, align 8, !dbg !1836, !tbaa !1246
  call void %179(%struct._object* %180), !dbg !1837
  br label %if.end.235

if.end.235:                                       ; preds = %if.else.232, %if.then.231
  %181 = bitcast %struct._object** %_py_decref_tmp227 to i8*, !dbg !1838
  call void @llvm.lifetime.end(i64 8, i8* %181) #1, !dbg !1838
  br label %do.cond.236, !dbg !1840

do.cond.236:                                      ; preds = %if.end.235
  br label %do.end.237, !dbg !1841

do.end.237:                                       ; preds = %do.cond.236
  br label %if.end.238, !dbg !1843

if.end.238:                                       ; preds = %do.end.237, %do.body.222
  %182 = bitcast %struct._object** %_py_xdecref_tmp223 to i8*, !dbg !1845
  call void @llvm.lifetime.end(i64 8, i8* %182) #1, !dbg !1845
  br label %do.cond.239, !dbg !1846

do.cond.239:                                      ; preds = %if.end.238
  br label %do.end.240, !dbg !1847

do.end.240:                                       ; preds = %do.cond.239
  %call241 = call %struct._object* @PyErr_Occurred(), !dbg !1849
  %tobool242 = icmp ne %struct._object* %call241, null, !dbg !1849
  br i1 %tobool242, label %if.then.243, label %if.end.244, !dbg !1851

if.then.243:                                      ; preds = %do.end.240
  store %struct._object* null, %struct._object** %retval, !dbg !1852
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1852

if.end.244:                                       ; preds = %do.end.240
  %183 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !1853, !tbaa !1261
  %inc = add i64 %183, 1, !dbg !1853
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !1853, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !1854
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1854

cleanup:                                          ; preds = %if.end.244, %if.then.243, %if.then.2, %if.then
  %184 = bitcast %struct._object** %dict_setitem to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %184) #1, !dbg !1855
  %185 = bitcast %struct._object** %mapping_setitem to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %185) #1, !dbg !1855
  %186 = bitcast %struct._object** %dict_get to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %186) #1, !dbg !1855
  %187 = bitcast %struct._object** %mapping_get to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %187) #1, !dbg !1855
  %188 = bitcast %struct._object** %bound_get to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %188) #1, !dbg !1855
  %189 = bitcast %struct._object** %one to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %189) #1, !dbg !1855
  %190 = bitcast %struct._object** %zero to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %190) #1, !dbg !1855
  %191 = bitcast %struct._object** %key to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %191) #1, !dbg !1855
  %192 = bitcast %struct._object** %newval to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %192) #1, !dbg !1855
  %193 = bitcast %struct._object** %oldval to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %193) #1, !dbg !1855
  %194 = bitcast %struct._object** %mapping to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %194) #1, !dbg !1855
  %195 = bitcast %struct._object** %iterable to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %195) #1, !dbg !1855
  %196 = bitcast %struct._object** %it to i8*, !dbg !1855
  call void @llvm.lifetime.end(i64 8, i8* %196) #1, !dbg !1855
  %197 = load %struct._object*, %struct._object** %retval, !dbg !1855
  ret %struct._object* %197, !dbg !1855
}

declare i32 @PyArg_UnpackTuple(%struct._object*, i8*, i64, i64, ...) #3

declare %struct._object* @PyObject_GetIter(%struct._object*) #3

declare %struct._object* @PyLong_FromLong(i64) #3

declare %struct._object* @_PyType_LookupId(%struct._typeobject*, %struct._Py_Identifier*) #3

declare %struct._object* @PyIter_Next(%struct._object*) #3

declare %struct._object* @PyDict_GetItem(%struct._object*, %struct._object*) #3

declare i32 @PyDict_SetItem(%struct._object*, %struct._object*, %struct._object*) #3

declare %struct._object* @PyNumber_Add(%struct._object*, %struct._object*) #3

declare %struct._object* @_PyObject_GetAttrId(%struct._object*, %struct._Py_Identifier*) #3

declare %struct._object* @PyObject_CallFunctionObjArgs(%struct._object*, ...) #3

declare i32 @PyObject_SetItem(%struct._object*, %struct._object*, %struct._object*) #3

declare %struct._object* @PyErr_Occurred() #3

; Function Attrs: nounwind uwtable
define internal void @deque_dealloc(%struct.dequeobject* %deque) #0 {
entry:
  %deque.addr = alloca %struct.dequeobject*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !490, metadata !1242), !dbg !1856
  %0 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1857, !tbaa !1246
  %1 = bitcast %struct.dequeobject* %0 to i8*, !dbg !1857
  call void @PyObject_GC_UnTrack(i8* %1), !dbg !1858
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1859, !tbaa !1246
  %weakreflist = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %2, i32 0, i32 7, !dbg !1861
  %3 = load %struct._object*, %struct._object** %weakreflist, align 8, !dbg !1861, !tbaa !1862
  %cmp = icmp ne %struct._object* %3, null, !dbg !1864
  br i1 %cmp, label %if.then, label %if.end, !dbg !1865

if.then:                                          ; preds = %entry
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1866, !tbaa !1246
  %5 = bitcast %struct.dequeobject* %4 to %struct._object*, !dbg !1867
  call void @PyObject_ClearWeakRefs(%struct._object* %5), !dbg !1868
  br label %if.end, !dbg !1868

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1869, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %6, i32 0, i32 1, !dbg !1871
  %7 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !1871, !tbaa !1872
  %cmp1 = icmp ne %struct.BLOCK* %7, null, !dbg !1873
  br i1 %cmp1, label %if.then.2, label %if.end.4, !dbg !1874

if.then.2:                                        ; preds = %if.end
  %8 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1875, !tbaa !1246
  call void @deque_clear(%struct.dequeobject* %8), !dbg !1877
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1878, !tbaa !1246
  %leftblock3 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %9, i32 0, i32 1, !dbg !1879
  %10 = load %struct.BLOCK*, %struct.BLOCK** %leftblock3, align 8, !dbg !1879, !tbaa !1872
  call void @freeblock(%struct.BLOCK* %10), !dbg !1880
  br label %if.end.4, !dbg !1881

if.end.4:                                         ; preds = %if.then.2, %if.end
  %11 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1882, !tbaa !1246
  %leftblock5 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %11, i32 0, i32 1, !dbg !1883
  store %struct.BLOCK* null, %struct.BLOCK** %leftblock5, align 8, !dbg !1884, !tbaa !1872
  %12 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1885, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %12, i32 0, i32 2, !dbg !1886
  store %struct.BLOCK* null, %struct.BLOCK** %rightblock, align 8, !dbg !1887, !tbaa !1888
  %13 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1889, !tbaa !1246
  %14 = bitcast %struct.dequeobject* %13 to %struct._object*, !dbg !1890
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !1891
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !1891, !tbaa !1345
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 38, !dbg !1892
  %16 = load void (i8*)*, void (i8*)** %tp_free, align 8, !dbg !1892, !tbaa !1893
  %17 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1894, !tbaa !1246
  %18 = bitcast %struct.dequeobject* %17 to i8*, !dbg !1894
  call void %16(i8* %18), !dbg !1895
  ret void, !dbg !1896
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_repr(%struct._object* %deque) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct._object*, align 8
  %aslist = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %deque, %struct._object** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %deque.addr, metadata !498, metadata !1242), !dbg !1897
  %0 = bitcast %struct._object** %aslist to i8*, !dbg !1898
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !1898
  call void @llvm.dbg.declare(metadata %struct._object** %aslist, metadata !499, metadata !1242), !dbg !1899
  %1 = bitcast %struct._object** %result to i8*, !dbg !1898
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !1898
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !500, metadata !1242), !dbg !1900
  %2 = bitcast i32* %i to i8*, !dbg !1901
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !1901
  call void @llvm.dbg.declare(metadata i32* %i, metadata !501, metadata !1242), !dbg !1902
  %3 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !1903, !tbaa !1246
  %call = call i32 @Py_ReprEnter(%struct._object* %3), !dbg !1904
  store i32 %call, i32* %i, align 4, !dbg !1905, !tbaa !1906
  %4 = load i32, i32* %i, align 4, !dbg !1907, !tbaa !1906
  %cmp = icmp ne i32 %4, 0, !dbg !1909
  br i1 %cmp, label %if.then, label %if.end.4, !dbg !1910

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %i, align 4, !dbg !1911, !tbaa !1906
  %cmp1 = icmp slt i32 %5, 0, !dbg !1914
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !1915

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !1916
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1916

if.end:                                           ; preds = %if.then
  %call3 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0)), !dbg !1917
  store %struct._object* %call3, %struct._object** %retval, !dbg !1918
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1918

if.end.4:                                         ; preds = %entry
  %6 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !1919, !tbaa !1246
  %call5 = call %struct._object* @PySequence_List(%struct._object* %6), !dbg !1920
  store %struct._object* %call5, %struct._object** %aslist, align 8, !dbg !1921, !tbaa !1246
  %7 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !1922, !tbaa !1246
  %cmp6 = icmp eq %struct._object* %7, null, !dbg !1924
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !1925

if.then.7:                                        ; preds = %if.end.4
  %8 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !1926, !tbaa !1246
  call void @Py_ReprLeave(%struct._object* %8), !dbg !1928
  store %struct._object* null, %struct._object** %retval, !dbg !1929
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1929

if.end.8:                                         ; preds = %if.end.4
  %9 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !1930, !tbaa !1246
  %10 = bitcast %struct._object* %9 to %struct.dequeobject*, !dbg !1932
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %10, i32 0, i32 6, !dbg !1933
  %11 = load i64, i64* %maxlen, align 8, !dbg !1933, !tbaa !1934
  %cmp9 = icmp ne i64 %11, -1, !dbg !1935
  br i1 %cmp9, label %if.then.10, label %if.else, !dbg !1936

if.then.10:                                       ; preds = %if.end.8
  %12 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !1937, !tbaa !1246
  %13 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !1938, !tbaa !1246
  %14 = bitcast %struct._object* %13 to %struct.dequeobject*, !dbg !1939
  %maxlen11 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %14, i32 0, i32 6, !dbg !1940
  %15 = load i64, i64* %maxlen11, align 8, !dbg !1940, !tbaa !1934
  %call12 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), %struct._object* %12, i64 %15), !dbg !1941
  store %struct._object* %call12, %struct._object** %result, align 8, !dbg !1942, !tbaa !1246
  br label %if.end.14, !dbg !1943

if.else:                                          ; preds = %if.end.8
  %16 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !1944, !tbaa !1246
  %call13 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), %struct._object* %16), !dbg !1945
  store %struct._object* %call13, %struct._object** %result, align 8, !dbg !1946, !tbaa !1246
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.10
  br label %do.body, !dbg !1947

do.body:                                          ; preds = %if.end.14
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !1948
  call void @llvm.lifetime.start(i64 8, i8* %17) #1, !dbg !1948
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !502, metadata !1242), !dbg !1950
  %18 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !1951, !tbaa !1246
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8, !dbg !1950, !tbaa !1246
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !1952, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0, !dbg !1954
  %20 = load i64, i64* %ob_refcnt, align 8, !dbg !1955, !tbaa !1261
  %dec = add i64 %20, -1, !dbg !1955
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !1955, !tbaa !1261
  %cmp15 = icmp ne i64 %dec, 0, !dbg !1956
  br i1 %cmp15, label %if.then.16, label %if.else.17, !dbg !1957

if.then.16:                                       ; preds = %do.body
  br label %if.end.18, !dbg !1958

if.else.17:                                       ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !1960, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !1962
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !1962, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4, !dbg !1963
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !1963, !tbaa !1444
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !1964, !tbaa !1246
  call void %23(%struct._object* %24), !dbg !1965
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.17, %if.then.16
  %25 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !1966
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !1966
  br label %do.cond, !dbg !1968

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !1969

do.end:                                           ; preds = %do.cond
  %26 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !1971, !tbaa !1246
  call void @Py_ReprLeave(%struct._object* %26), !dbg !1972
  %27 = load %struct._object*, %struct._object** %result, align 8, !dbg !1973, !tbaa !1246
  store %struct._object* %27, %struct._object** %retval, !dbg !1974
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1974

cleanup:                                          ; preds = %do.end, %if.then.7, %if.end, %if.then.2
  %28 = bitcast i32* %i to i8*, !dbg !1975
  call void @llvm.lifetime.end(i64 4, i8* %28) #1, !dbg !1975
  %29 = bitcast %struct._object** %result to i8*, !dbg !1975
  call void @llvm.lifetime.end(i64 8, i8* %29) #1, !dbg !1975
  %30 = bitcast %struct._object** %aslist to i8*, !dbg !1975
  call void @llvm.lifetime.end(i64 8, i8* %30) #1, !dbg !1975
  %31 = load %struct._object*, %struct._object** %retval, !dbg !1975
  ret %struct._object* %31, !dbg !1975
}

declare i64 @PyObject_HashNotImplemented(%struct._object*) #3

declare %struct._object* @PyObject_GenericGetAttr(%struct._object*, %struct._object*) #3

; Function Attrs: nounwind uwtable
define internal i32 @deque_traverse(%struct.dequeobject* %deque, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %deque.addr = alloca %struct.dequeobject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %b = alloca %struct.BLOCK*, align 8
  %item = alloca %struct._object*, align 8
  %index = alloca i64, align 8
  %indexlo = alloca i64, align 8
  %vret = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %vret17 = alloca i32, align 4
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !628, metadata !1242), !dbg !1976
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata i32 (%struct._object*, i8*)** %visit.addr, metadata !629, metadata !1242), !dbg !1977
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !630, metadata !1242), !dbg !1978
  %0 = bitcast %struct.BLOCK** %b to i8*, !dbg !1979
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !1979
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !631, metadata !1242), !dbg !1980
  %1 = bitcast %struct._object** %item to i8*, !dbg !1981
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !1981
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !632, metadata !1242), !dbg !1982
  %2 = bitcast i64* %index to i8*, !dbg !1983
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !1983
  call void @llvm.dbg.declare(metadata i64* %index, metadata !633, metadata !1242), !dbg !1984
  %3 = bitcast i64* %indexlo to i8*, !dbg !1985
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !1985
  call void @llvm.dbg.declare(metadata i64* %indexlo, metadata !634, metadata !1242), !dbg !1986
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1987, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %4, i32 0, i32 3, !dbg !1988
  %5 = load i64, i64* %leftindex, align 8, !dbg !1988, !tbaa !1989
  store i64 %5, i64* %indexlo, align 8, !dbg !1986, !tbaa !1990
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1991, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %6, i32 0, i32 1, !dbg !1992
  %7 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !1992, !tbaa !1872
  store %struct.BLOCK* %7, %struct.BLOCK** %b, align 8, !dbg !1993, !tbaa !1246
  br label %for.cond, !dbg !1994

for.cond:                                         ; preds = %for.inc.7, %entry
  %8 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !1995, !tbaa !1246
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !1998, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %9, i32 0, i32 2, !dbg !1999
  %10 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !1999, !tbaa !1888
  %cmp = icmp ne %struct.BLOCK* %8, %10, !dbg !2000
  br i1 %cmp, label %for.body, label %for.end.8, !dbg !2001

for.body:                                         ; preds = %for.cond
  %11 = load i64, i64* %indexlo, align 8, !dbg !2002, !tbaa !1990
  store i64 %11, i64* %index, align 8, !dbg !2003, !tbaa !1990
  br label %for.cond.1, !dbg !2004

for.cond.1:                                       ; preds = %for.inc, %for.body
  %12 = load i64, i64* %index, align 8, !dbg !2005, !tbaa !1990
  %cmp2 = icmp slt i64 %12, 62, !dbg !2008
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !2009

for.body.3:                                       ; preds = %for.cond.1
  %13 = load i64, i64* %index, align 8, !dbg !2010, !tbaa !1990
  %14 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2011, !tbaa !1246
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %14, i32 0, i32 1, !dbg !2012
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %13, !dbg !2011
  %15 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !2011, !tbaa !1246
  store %struct._object* %15, %struct._object** %item, align 8, !dbg !2013, !tbaa !1246
  br label %do.body, !dbg !2014

do.body:                                          ; preds = %for.body.3
  %16 = load %struct._object*, %struct._object** %item, align 8, !dbg !2015, !tbaa !1246
  %tobool = icmp ne %struct._object* %16, null, !dbg !2015
  br i1 %tobool, label %if.then, label %if.end.6, !dbg !2017

if.then:                                          ; preds = %do.body
  %17 = bitcast i32* %vret to i8*, !dbg !2018
  call void @llvm.lifetime.start(i64 4, i8* %17) #1, !dbg !2018
  call void @llvm.dbg.declare(metadata i32* %vret, metadata !635, metadata !1242), !dbg !2020
  %18 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8, !dbg !2021, !tbaa !1246
  %19 = load %struct._object*, %struct._object** %item, align 8, !dbg !2022, !tbaa !1246
  %20 = load i8*, i8** %arg.addr, align 8, !dbg !2023, !tbaa !1246
  %call = call i32 %18(%struct._object* %19, i8* %20), !dbg !2021
  store i32 %call, i32* %vret, align 4, !dbg !2020, !tbaa !1906
  %21 = load i32, i32* %vret, align 4, !dbg !2024, !tbaa !1906
  %tobool4 = icmp ne i32 %21, 0, !dbg !2024
  br i1 %tobool4, label %if.then.5, label %if.end, !dbg !2026

if.then.5:                                        ; preds = %if.then
  %22 = load i32, i32* %vret, align 4, !dbg !2027, !tbaa !1906
  store i32 %22, i32* %retval, !dbg !2029
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2029

if.end:                                           ; preds = %if.then
  store i32 0, i32* %cleanup.dest.slot, !dbg !2030
  br label %cleanup, !dbg !2030

cleanup:                                          ; preds = %if.end, %if.then.5
  %23 = bitcast i32* %vret to i8*, !dbg !2032
  call void @llvm.lifetime.end(i64 4, i8* %23) #1, !dbg !2032
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.31 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.6, !dbg !2035

if.end.6:                                         ; preds = %cleanup.cont, %do.body
  br label %do.cond, !dbg !2036

do.cond:                                          ; preds = %if.end.6
  br label %do.end, !dbg !2039

do.end:                                           ; preds = %do.cond
  br label %for.inc, !dbg !2041

for.inc:                                          ; preds = %do.end
  %24 = load i64, i64* %index, align 8, !dbg !2042, !tbaa !1990
  %inc = add i64 %24, 1, !dbg !2042
  store i64 %inc, i64* %index, align 8, !dbg !2042, !tbaa !1990
  br label %for.cond.1, !dbg !2043

for.end:                                          ; preds = %for.cond.1
  store i64 0, i64* %indexlo, align 8, !dbg !2044, !tbaa !1990
  br label %for.inc.7, !dbg !2045

for.inc.7:                                        ; preds = %for.end
  %25 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2046, !tbaa !1246
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %25, i32 0, i32 2, !dbg !2047
  %26 = load %struct.BLOCK*, %struct.BLOCK** %rightlink, align 8, !dbg !2047, !tbaa !2048
  store %struct.BLOCK* %26, %struct.BLOCK** %b, align 8, !dbg !2050, !tbaa !1246
  br label %for.cond, !dbg !2051

for.end.8:                                        ; preds = %for.cond
  %27 = load i64, i64* %indexlo, align 8, !dbg !2052, !tbaa !1990
  store i64 %27, i64* %index, align 8, !dbg !2053, !tbaa !1990
  br label %for.cond.9, !dbg !2054

for.cond.9:                                       ; preds = %for.inc.28, %for.end.8
  %28 = load i64, i64* %index, align 8, !dbg !2055, !tbaa !1990
  %29 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2058, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %29, i32 0, i32 4, !dbg !2059
  %30 = load i64, i64* %rightindex, align 8, !dbg !2059, !tbaa !2060
  %cmp10 = icmp sle i64 %28, %30, !dbg !2061
  br i1 %cmp10, label %for.body.11, label %for.end.30, !dbg !2062

for.body.11:                                      ; preds = %for.cond.9
  %31 = load i64, i64* %index, align 8, !dbg !2063, !tbaa !1990
  %32 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2064, !tbaa !1246
  %data12 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %32, i32 0, i32 1, !dbg !2065
  %arrayidx13 = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data12, i32 0, i64 %31, !dbg !2064
  %33 = load %struct._object*, %struct._object** %arrayidx13, align 8, !dbg !2064, !tbaa !1246
  store %struct._object* %33, %struct._object** %item, align 8, !dbg !2066, !tbaa !1246
  br label %do.body.14, !dbg !2067

do.body.14:                                       ; preds = %for.body.11
  %34 = load %struct._object*, %struct._object** %item, align 8, !dbg !2068, !tbaa !1246
  %tobool15 = icmp ne %struct._object* %34, null, !dbg !2068
  br i1 %tobool15, label %if.then.16, label %if.end.25, !dbg !2070

if.then.16:                                       ; preds = %do.body.14
  %35 = bitcast i32* %vret17 to i8*, !dbg !2071
  call void @llvm.lifetime.start(i64 4, i8* %35) #1, !dbg !2071
  call void @llvm.dbg.declare(metadata i32* %vret17, metadata !645, metadata !1242), !dbg !2073
  %36 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8, !dbg !2074, !tbaa !1246
  %37 = load %struct._object*, %struct._object** %item, align 8, !dbg !2075, !tbaa !1246
  %38 = load i8*, i8** %arg.addr, align 8, !dbg !2076, !tbaa !1246
  %call18 = call i32 %36(%struct._object* %37, i8* %38), !dbg !2074
  store i32 %call18, i32* %vret17, align 4, !dbg !2073, !tbaa !1906
  %39 = load i32, i32* %vret17, align 4, !dbg !2077, !tbaa !1906
  %tobool19 = icmp ne i32 %39, 0, !dbg !2077
  br i1 %tobool19, label %if.then.20, label %if.end.21, !dbg !2079

if.then.20:                                       ; preds = %if.then.16
  %40 = load i32, i32* %vret17, align 4, !dbg !2080, !tbaa !1906
  store i32 %40, i32* %retval, !dbg !2082
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.22, !dbg !2082

if.end.21:                                        ; preds = %if.then.16
  store i32 0, i32* %cleanup.dest.slot, !dbg !2083
  br label %cleanup.22, !dbg !2083

cleanup.22:                                       ; preds = %if.end.21, %if.then.20
  %41 = bitcast i32* %vret17 to i8*, !dbg !2085
  call void @llvm.lifetime.end(i64 4, i8* %41) #1, !dbg !2085
  %cleanup.dest.23 = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest.23, label %cleanup.31 [
    i32 0, label %cleanup.cont.24
  ]

cleanup.cont.24:                                  ; preds = %cleanup.22
  br label %if.end.25, !dbg !2088

if.end.25:                                        ; preds = %cleanup.cont.24, %do.body.14
  br label %do.cond.26, !dbg !2089

do.cond.26:                                       ; preds = %if.end.25
  br label %do.end.27, !dbg !2092

do.end.27:                                        ; preds = %do.cond.26
  br label %for.inc.28, !dbg !2094

for.inc.28:                                       ; preds = %do.end.27
  %42 = load i64, i64* %index, align 8, !dbg !2095, !tbaa !1990
  %inc29 = add i64 %42, 1, !dbg !2095
  store i64 %inc29, i64* %index, align 8, !dbg !2095, !tbaa !1990
  br label %for.cond.9, !dbg !2096

for.end.30:                                       ; preds = %for.cond.9
  store i32 0, i32* %retval, !dbg !2097
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.31, !dbg !2097

cleanup.31:                                       ; preds = %for.end.30, %cleanup.22, %cleanup
  %43 = bitcast i64* %indexlo to i8*, !dbg !2098
  call void @llvm.lifetime.end(i64 8, i8* %43) #1, !dbg !2098
  %44 = bitcast i64* %index to i8*, !dbg !2098
  call void @llvm.lifetime.end(i64 8, i8* %44) #1, !dbg !2098
  %45 = bitcast %struct._object** %item to i8*, !dbg !2098
  call void @llvm.lifetime.end(i64 8, i8* %45) #1, !dbg !2098
  %46 = bitcast %struct.BLOCK** %b to i8*, !dbg !2098
  call void @llvm.lifetime.end(i64 8, i8* %46) #1, !dbg !2098
  %47 = load i32, i32* %retval, !dbg !2098
  ret i32 %47, !dbg !2098
}

; Function Attrs: nounwind uwtable
define internal void @deque_clear(%struct.dequeobject* %deque) #0 {
entry:
  %deque.addr = alloca %struct.dequeobject*, align 8
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !654, metadata !1242), !dbg !2099
  %0 = bitcast %struct._object** %item to i8*, !dbg !2100
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !2100
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !655, metadata !1242), !dbg !2101
  br label %while.cond, !dbg !2102

while.cond:                                       ; preds = %do.end, %entry
  %1 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2103, !tbaa !1246
  %2 = bitcast %struct.dequeobject* %1 to %struct.PyVarObject*, !dbg !2106
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !2107
  %3 = load i64, i64* %ob_size, align 8, !dbg !2107, !tbaa !2108
  %tobool = icmp ne i64 %3, 0, !dbg !2102
  br i1 %tobool, label %while.body, label %while.end, !dbg !2102

while.body:                                       ; preds = %while.cond
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2109, !tbaa !1246
  %call = call %struct._object* @deque_pop(%struct.dequeobject* %4, %struct._object* null), !dbg !2110
  store %struct._object* %call, %struct._object** %item, align 8, !dbg !2111, !tbaa !1246
  br label %do.body, !dbg !2112

do.body:                                          ; preds = %while.body
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2113
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !2113
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !656, metadata !1242), !dbg !2115
  %6 = load %struct._object*, %struct._object** %item, align 8, !dbg !2116, !tbaa !1246
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !2115, !tbaa !1246
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2117, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !2119
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !2120, !tbaa !1261
  %dec = add i64 %8, -1, !dbg !2120
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2120, !tbaa !1261
  %cmp = icmp ne i64 %dec, 0, !dbg !2121
  br i1 %cmp, label %if.then, label %if.else, !dbg !2122

if.then:                                          ; preds = %do.body
  br label %if.end, !dbg !2123

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2125, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !2127
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2127, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !2128
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2128, !tbaa !1444
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2129, !tbaa !1246
  call void %11(%struct._object* %12), !dbg !2130
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2131
  call void @llvm.lifetime.end(i64 8, i8* %13) #1, !dbg !2131
  br label %do.cond, !dbg !2133

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !2134

do.end:                                           ; preds = %do.cond
  br label %while.cond, !dbg !2102

while.end:                                        ; preds = %while.cond
  %14 = bitcast %struct._object** %item to i8*, !dbg !2136
  call void @llvm.lifetime.end(i64 8, i8* %14) #1, !dbg !2136
  ret void, !dbg !2136
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_richcompare(%struct._object* %v, %struct._object* %w, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %it1 = alloca %struct._object*, align 8
  %it2 = alloca %struct._object*, align 8
  %x = alloca %struct._object*, align 8
  %y = alloca %struct._object*, align 8
  %vs = alloca i64, align 8
  %ws = alloca i64, align 8
  %b = alloca i32, align 4
  %cmp = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp62 = alloca %struct._object*, align 8
  %_py_decref_tmp75 = alloca %struct._object*, align 8
  %_py_decref_tmp87 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp105 = alloca %struct._object*, align 8
  %_py_xdecref_tmp120 = alloca %struct._object*, align 8
  %_py_decref_tmp124 = alloca %struct._object*, align 8
  %_py_xdecref_tmp159 = alloca %struct._object*, align 8
  %_py_decref_tmp164 = alloca %struct._object*, align 8
  %_py_xdecref_tmp180 = alloca %struct._object*, align 8
  %_py_decref_tmp185 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !667, metadata !1242), !dbg !2137
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !668, metadata !1242), !dbg !2138
  store i32 %op, i32* %op.addr, align 4, !tbaa !1906
  call void @llvm.dbg.declare(metadata i32* %op.addr, metadata !669, metadata !1242), !dbg !2139
  %0 = bitcast %struct._object** %it1 to i8*, !dbg !2140
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !2140
  call void @llvm.dbg.declare(metadata %struct._object** %it1, metadata !670, metadata !1242), !dbg !2141
  store %struct._object* null, %struct._object** %it1, align 8, !dbg !2141, !tbaa !1246
  %1 = bitcast %struct._object** %it2 to i8*, !dbg !2140
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !2140
  call void @llvm.dbg.declare(metadata %struct._object** %it2, metadata !671, metadata !1242), !dbg !2142
  store %struct._object* null, %struct._object** %it2, align 8, !dbg !2142, !tbaa !1246
  %2 = bitcast %struct._object** %x to i8*, !dbg !2140
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !2140
  call void @llvm.dbg.declare(metadata %struct._object** %x, metadata !672, metadata !1242), !dbg !2143
  %3 = bitcast %struct._object** %y to i8*, !dbg !2140
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !2140
  call void @llvm.dbg.declare(metadata %struct._object** %y, metadata !673, metadata !1242), !dbg !2144
  %4 = bitcast i64* %vs to i8*, !dbg !2145
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !2145
  call void @llvm.dbg.declare(metadata i64* %vs, metadata !674, metadata !1242), !dbg !2146
  %5 = bitcast i64* %ws to i8*, !dbg !2145
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !2145
  call void @llvm.dbg.declare(metadata i64* %ws, metadata !675, metadata !1242), !dbg !2147
  %6 = bitcast i32* %b to i8*, !dbg !2148
  call void @llvm.lifetime.start(i64 4, i8* %6) #1, !dbg !2148
  call void @llvm.dbg.declare(metadata i32* %b, metadata !676, metadata !1242), !dbg !2149
  %7 = bitcast i32* %cmp to i8*, !dbg !2148
  call void @llvm.lifetime.start(i64 4, i8* %7) #1, !dbg !2148
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !677, metadata !1242), !dbg !2150
  store i32 -1, i32* %cmp, align 4, !dbg !2150, !tbaa !1906
  %8 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !2151, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !2153
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2153, !tbaa !1345
  %cmp1 = icmp eq %struct._typeobject* %9, @deque_type, !dbg !2154
  br i1 %cmp1, label %lor.lhs.false.3, label %lor.lhs.false, !dbg !2155

lor.lhs.false:                                    ; preds = %entry
  %10 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !2156, !tbaa !1246
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !2158
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !2158, !tbaa !1345
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %11, %struct._typeobject* @deque_type), !dbg !2159
  %tobool = icmp ne i32 %call, 0, !dbg !2159
  br i1 %tobool, label %lor.lhs.false.3, label %if.then, !dbg !2160

lor.lhs.false.3:                                  ; preds = %lor.lhs.false, %entry
  %12 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !2161, !tbaa !1246
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !2162
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !2162, !tbaa !1345
  %cmp5 = icmp eq %struct._typeobject* %13, @deque_type, !dbg !2163
  br i1 %cmp5, label %if.end, label %lor.lhs.false.6, !dbg !2164

lor.lhs.false.6:                                  ; preds = %lor.lhs.false.3
  %14 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !2165, !tbaa !1246
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !2166
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8, !dbg !2166, !tbaa !1345
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %15, %struct._typeobject* @deque_type), !dbg !2167
  %tobool9 = icmp ne i32 %call8, 0, !dbg !2167
  br i1 %tobool9, label %if.end, label %if.then, !dbg !2168

if.then:                                          ; preds = %lor.lhs.false.6, %lor.lhs.false
  %16 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !2169, !tbaa !1261
  %inc = add i64 %16, 1, !dbg !2169
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !2169, !tbaa !1261
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval, !dbg !2171
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2171

if.end:                                           ; preds = %lor.lhs.false.6, %lor.lhs.false.3
  %17 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !2172, !tbaa !1246
  %18 = bitcast %struct._object* %17 to %struct.dequeobject*, !dbg !2173
  %19 = bitcast %struct.dequeobject* %18 to %struct.PyVarObject*, !dbg !2174
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !2175
  %20 = load i64, i64* %ob_size, align 8, !dbg !2175, !tbaa !2108
  store i64 %20, i64* %vs, align 8, !dbg !2176, !tbaa !1990
  %21 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !2177, !tbaa !1246
  %22 = bitcast %struct._object* %21 to %struct.dequeobject*, !dbg !2178
  %23 = bitcast %struct.dequeobject* %22 to %struct.PyVarObject*, !dbg !2179
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %23, i32 0, i32 1, !dbg !2180
  %24 = load i64, i64* %ob_size10, align 8, !dbg !2180, !tbaa !2108
  store i64 %24, i64* %ws, align 8, !dbg !2181, !tbaa !1990
  %25 = load i32, i32* %op.addr, align 4, !dbg !2182, !tbaa !1906
  %cmp11 = icmp eq i32 %25, 2, !dbg !2184
  br i1 %cmp11, label %if.then.12, label %if.end.21, !dbg !2185

if.then.12:                                       ; preds = %if.end
  %26 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !2186, !tbaa !1246
  %27 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !2189, !tbaa !1246
  %cmp13 = icmp eq %struct._object* %26, %27, !dbg !2190
  br i1 %cmp13, label %if.then.14, label %if.end.16, !dbg !2191

if.then.14:                                       ; preds = %if.then.12
  %28 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2192, !tbaa !1261
  %inc15 = add i64 %28, 1, !dbg !2192
  store i64 %inc15, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2192, !tbaa !1261
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !2193
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2193

if.end.16:                                        ; preds = %if.then.12
  %29 = load i64, i64* %vs, align 8, !dbg !2194, !tbaa !1990
  %30 = load i64, i64* %ws, align 8, !dbg !2196, !tbaa !1990
  %cmp17 = icmp ne i64 %29, %30, !dbg !2197
  br i1 %cmp17, label %if.then.18, label %if.end.20, !dbg !2198

if.then.18:                                       ; preds = %if.end.16
  %31 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2199, !tbaa !1261
  %inc19 = add i64 %31, 1, !dbg !2199
  store i64 %inc19, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2199, !tbaa !1261
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !2200
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2200

if.end.20:                                        ; preds = %if.end.16
  br label %if.end.21, !dbg !2201

if.end.21:                                        ; preds = %if.end.20, %if.end
  %32 = load i32, i32* %op.addr, align 4, !dbg !2202, !tbaa !1906
  %cmp22 = icmp eq i32 %32, 3, !dbg !2204
  br i1 %cmp22, label %if.then.23, label %if.end.32, !dbg !2205

if.then.23:                                       ; preds = %if.end.21
  %33 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !2206, !tbaa !1246
  %34 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !2209, !tbaa !1246
  %cmp24 = icmp eq %struct._object* %33, %34, !dbg !2210
  br i1 %cmp24, label %if.then.25, label %if.end.27, !dbg !2211

if.then.25:                                       ; preds = %if.then.23
  %35 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2212, !tbaa !1261
  %inc26 = add i64 %35, 1, !dbg !2212
  store i64 %inc26, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2212, !tbaa !1261
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !2213
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2213

if.end.27:                                        ; preds = %if.then.23
  %36 = load i64, i64* %vs, align 8, !dbg !2214, !tbaa !1990
  %37 = load i64, i64* %ws, align 8, !dbg !2216, !tbaa !1990
  %cmp28 = icmp ne i64 %36, %37, !dbg !2217
  br i1 %cmp28, label %if.then.29, label %if.end.31, !dbg !2218

if.then.29:                                       ; preds = %if.end.27
  %38 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2219, !tbaa !1261
  %inc30 = add i64 %38, 1, !dbg !2219
  store i64 %inc30, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2219, !tbaa !1261
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !2220
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2220

if.end.31:                                        ; preds = %if.end.27
  br label %if.end.32, !dbg !2221

if.end.32:                                        ; preds = %if.end.31, %if.end.21
  %39 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !2222, !tbaa !1246
  %call33 = call %struct._object* @PyObject_GetIter(%struct._object* %39), !dbg !2223
  store %struct._object* %call33, %struct._object** %it1, align 8, !dbg !2224, !tbaa !1246
  %40 = load %struct._object*, %struct._object** %it1, align 8, !dbg !2225, !tbaa !1246
  %cmp34 = icmp eq %struct._object* %40, null, !dbg !2227
  br i1 %cmp34, label %if.then.35, label %if.end.36, !dbg !2228

if.then.35:                                       ; preds = %if.end.32
  br label %done, !dbg !2229

if.end.36:                                        ; preds = %if.end.32
  %41 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !2230, !tbaa !1246
  %call37 = call %struct._object* @PyObject_GetIter(%struct._object* %41), !dbg !2231
  store %struct._object* %call37, %struct._object** %it2, align 8, !dbg !2232, !tbaa !1246
  %42 = load %struct._object*, %struct._object** %it2, align 8, !dbg !2233, !tbaa !1246
  %cmp38 = icmp eq %struct._object* %42, null, !dbg !2235
  br i1 %cmp38, label %if.then.39, label %if.end.40, !dbg !2236

if.then.39:                                       ; preds = %if.end.36
  br label %done, !dbg !2237

if.end.40:                                        ; preds = %if.end.36
  br label %for.cond, !dbg !2238

for.cond:                                         ; preds = %if.end.100, %if.end.40
  %43 = load %struct._object*, %struct._object** %it1, align 8, !dbg !2239, !tbaa !1246
  %call41 = call %struct._object* @PyIter_Next(%struct._object* %43), !dbg !2240
  store %struct._object* %call41, %struct._object** %x, align 8, !dbg !2241, !tbaa !1246
  %44 = load %struct._object*, %struct._object** %x, align 8, !dbg !2242, !tbaa !1246
  %cmp42 = icmp eq %struct._object* %44, null, !dbg !2244
  br i1 %cmp42, label %land.lhs.true, label %if.end.46, !dbg !2245

land.lhs.true:                                    ; preds = %for.cond
  %call43 = call %struct._object* @PyErr_Occurred(), !dbg !2246
  %tobool44 = icmp ne %struct._object* %call43, null, !dbg !2246
  br i1 %tobool44, label %if.then.45, label %if.end.46, !dbg !2248

if.then.45:                                       ; preds = %land.lhs.true
  br label %done, !dbg !2249

if.end.46:                                        ; preds = %land.lhs.true, %for.cond
  %45 = load %struct._object*, %struct._object** %it2, align 8, !dbg !2250, !tbaa !1246
  %call47 = call %struct._object* @PyIter_Next(%struct._object* %45), !dbg !2251
  store %struct._object* %call47, %struct._object** %y, align 8, !dbg !2252, !tbaa !1246
  %46 = load %struct._object*, %struct._object** %x, align 8, !dbg !2253, !tbaa !1246
  %cmp48 = icmp eq %struct._object* %46, null, !dbg !2255
  br i1 %cmp48, label %if.then.51, label %lor.lhs.false.49, !dbg !2256

lor.lhs.false.49:                                 ; preds = %if.end.46
  %47 = load %struct._object*, %struct._object** %y, align 8, !dbg !2257, !tbaa !1246
  %cmp50 = icmp eq %struct._object* %47, null, !dbg !2259
  br i1 %cmp50, label %if.then.51, label %if.end.52, !dbg !2260

if.then.51:                                       ; preds = %lor.lhs.false.49, %if.end.46
  br label %for.end, !dbg !2261

if.end.52:                                        ; preds = %lor.lhs.false.49
  %48 = load %struct._object*, %struct._object** %x, align 8, !dbg !2262, !tbaa !1246
  %49 = load %struct._object*, %struct._object** %y, align 8, !dbg !2263, !tbaa !1246
  %call53 = call i32 @PyObject_RichCompareBool(%struct._object* %48, %struct._object* %49, i32 2), !dbg !2264
  store i32 %call53, i32* %b, align 4, !dbg !2265, !tbaa !1906
  %50 = load i32, i32* %b, align 4, !dbg !2266, !tbaa !1906
  %cmp54 = icmp eq i32 %50, 0, !dbg !2267
  br i1 %cmp54, label %if.then.55, label %if.end.73, !dbg !2268

if.then.55:                                       ; preds = %if.end.52
  %51 = load %struct._object*, %struct._object** %x, align 8, !dbg !2269, !tbaa !1246
  %52 = load %struct._object*, %struct._object** %y, align 8, !dbg !2270, !tbaa !1246
  %53 = load i32, i32* %op.addr, align 4, !dbg !2271, !tbaa !1906
  %call56 = call i32 @PyObject_RichCompareBool(%struct._object* %51, %struct._object* %52, i32 %53), !dbg !2272
  store i32 %call56, i32* %cmp, align 4, !dbg !2273, !tbaa !1906
  br label %do.body, !dbg !2274

do.body:                                          ; preds = %if.then.55
  %54 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2275
  call void @llvm.lifetime.start(i64 8, i8* %54) #1, !dbg !2275
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !678, metadata !1242), !dbg !2277
  %55 = load %struct._object*, %struct._object** %x, align 8, !dbg !2278, !tbaa !1246
  store %struct._object* %55, %struct._object** %_py_decref_tmp, align 8, !dbg !2277, !tbaa !1246
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2279, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0, !dbg !2281
  %57 = load i64, i64* %ob_refcnt, align 8, !dbg !2282, !tbaa !1261
  %dec = add i64 %57, -1, !dbg !2282
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2282, !tbaa !1261
  %cmp57 = icmp ne i64 %dec, 0, !dbg !2283
  br i1 %cmp57, label %if.then.58, label %if.else, !dbg !2284

if.then.58:                                       ; preds = %do.body
  br label %if.end.60, !dbg !2285

if.else:                                          ; preds = %do.body
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2287, !tbaa !1246
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1, !dbg !2289
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8, !dbg !2289, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4, !dbg !2290
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2290, !tbaa !1444
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2291, !tbaa !1246
  call void %60(%struct._object* %61), !dbg !2292
  br label %if.end.60

if.end.60:                                        ; preds = %if.else, %if.then.58
  %62 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2293
  call void @llvm.lifetime.end(i64 8, i8* %62) #1, !dbg !2293
  br label %do.cond, !dbg !2295

do.cond:                                          ; preds = %if.end.60
  br label %do.end, !dbg !2296

do.end:                                           ; preds = %do.cond
  br label %do.body.61, !dbg !2298

do.body.61:                                       ; preds = %do.end
  %63 = bitcast %struct._object** %_py_decref_tmp62 to i8*, !dbg !2299
  call void @llvm.lifetime.start(i64 8, i8* %63) #1, !dbg !2299
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp62, metadata !685, metadata !1242), !dbg !2301
  %64 = load %struct._object*, %struct._object** %y, align 8, !dbg !2302, !tbaa !1246
  store %struct._object* %64, %struct._object** %_py_decref_tmp62, align 8, !dbg !2301, !tbaa !1246
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8, !dbg !2303, !tbaa !1246
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 0, !dbg !2305
  %66 = load i64, i64* %ob_refcnt63, align 8, !dbg !2306, !tbaa !1261
  %dec64 = add i64 %66, -1, !dbg !2306
  store i64 %dec64, i64* %ob_refcnt63, align 8, !dbg !2306, !tbaa !1261
  %cmp65 = icmp ne i64 %dec64, 0, !dbg !2307
  br i1 %cmp65, label %if.then.66, label %if.else.67, !dbg !2308

if.then.66:                                       ; preds = %do.body.61
  br label %if.end.70, !dbg !2309

if.else.67:                                       ; preds = %do.body.61
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8, !dbg !2311, !tbaa !1246
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1, !dbg !2313
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8, !dbg !2313, !tbaa !1345
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 4, !dbg !2314
  %69 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8, !dbg !2314, !tbaa !1444
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8, !dbg !2315, !tbaa !1246
  call void %69(%struct._object* %70), !dbg !2316
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  %71 = bitcast %struct._object** %_py_decref_tmp62 to i8*, !dbg !2317
  call void @llvm.lifetime.end(i64 8, i8* %71) #1, !dbg !2317
  br label %do.cond.71, !dbg !2318

do.cond.71:                                       ; preds = %if.end.70
  br label %do.end.72, !dbg !2319

do.end.72:                                        ; preds = %do.cond.71
  br label %done, !dbg !2321

if.end.73:                                        ; preds = %if.end.52
  br label %do.body.74, !dbg !2322

do.body.74:                                       ; preds = %if.end.73
  %72 = bitcast %struct._object** %_py_decref_tmp75 to i8*, !dbg !2323
  call void @llvm.lifetime.start(i64 8, i8* %72) #1, !dbg !2323
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp75, metadata !687, metadata !1242), !dbg !2325
  %73 = load %struct._object*, %struct._object** %x, align 8, !dbg !2326, !tbaa !1246
  store %struct._object* %73, %struct._object** %_py_decref_tmp75, align 8, !dbg !2325, !tbaa !1246
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8, !dbg !2327, !tbaa !1246
  %ob_refcnt76 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 0, !dbg !2329
  %75 = load i64, i64* %ob_refcnt76, align 8, !dbg !2330, !tbaa !1261
  %dec77 = add i64 %75, -1, !dbg !2330
  store i64 %dec77, i64* %ob_refcnt76, align 8, !dbg !2330, !tbaa !1261
  %cmp78 = icmp ne i64 %dec77, 0, !dbg !2331
  br i1 %cmp78, label %if.then.79, label %if.else.80, !dbg !2332

if.then.79:                                       ; preds = %do.body.74
  br label %if.end.83, !dbg !2333

if.else.80:                                       ; preds = %do.body.74
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8, !dbg !2335, !tbaa !1246
  %ob_type81 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1, !dbg !2337
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type81, align 8, !dbg !2337, !tbaa !1345
  %tp_dealloc82 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 4, !dbg !2338
  %78 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc82, align 8, !dbg !2338, !tbaa !1444
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8, !dbg !2339, !tbaa !1246
  call void %78(%struct._object* %79), !dbg !2340
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.80, %if.then.79
  %80 = bitcast %struct._object** %_py_decref_tmp75 to i8*, !dbg !2341
  call void @llvm.lifetime.end(i64 8, i8* %80) #1, !dbg !2341
  br label %do.cond.84, !dbg !2343

do.cond.84:                                       ; preds = %if.end.83
  br label %do.end.85, !dbg !2344

do.end.85:                                        ; preds = %do.cond.84
  br label %do.body.86, !dbg !2346

do.body.86:                                       ; preds = %do.end.85
  %81 = bitcast %struct._object** %_py_decref_tmp87 to i8*, !dbg !2347
  call void @llvm.lifetime.start(i64 8, i8* %81) #1, !dbg !2347
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp87, metadata !689, metadata !1242), !dbg !2349
  %82 = load %struct._object*, %struct._object** %y, align 8, !dbg !2350, !tbaa !1246
  store %struct._object* %82, %struct._object** %_py_decref_tmp87, align 8, !dbg !2349, !tbaa !1246
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8, !dbg !2351, !tbaa !1246
  %ob_refcnt88 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0, !dbg !2353
  %84 = load i64, i64* %ob_refcnt88, align 8, !dbg !2354, !tbaa !1261
  %dec89 = add i64 %84, -1, !dbg !2354
  store i64 %dec89, i64* %ob_refcnt88, align 8, !dbg !2354, !tbaa !1261
  %cmp90 = icmp ne i64 %dec89, 0, !dbg !2355
  br i1 %cmp90, label %if.then.91, label %if.else.92, !dbg !2356

if.then.91:                                       ; preds = %do.body.86
  br label %if.end.95, !dbg !2357

if.else.92:                                       ; preds = %do.body.86
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8, !dbg !2359, !tbaa !1246
  %ob_type93 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1, !dbg !2361
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type93, align 8, !dbg !2361, !tbaa !1345
  %tp_dealloc94 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4, !dbg !2362
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc94, align 8, !dbg !2362, !tbaa !1444
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8, !dbg !2363, !tbaa !1246
  call void %87(%struct._object* %88), !dbg !2364
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.92, %if.then.91
  %89 = bitcast %struct._object** %_py_decref_tmp87 to i8*, !dbg !2365
  call void @llvm.lifetime.end(i64 8, i8* %89) #1, !dbg !2365
  br label %do.cond.96, !dbg !2366

do.cond.96:                                       ; preds = %if.end.95
  br label %do.end.97, !dbg !2367

do.end.97:                                        ; preds = %do.cond.96
  %90 = load i32, i32* %b, align 4, !dbg !2369, !tbaa !1906
  %cmp98 = icmp eq i32 %90, -1, !dbg !2371
  br i1 %cmp98, label %if.then.99, label %if.end.100, !dbg !2372

if.then.99:                                       ; preds = %do.end.97
  br label %done, !dbg !2373

if.end.100:                                       ; preds = %do.end.97
  br label %for.cond, !dbg !2374

for.end:                                          ; preds = %if.then.51
  br label %do.body.101, !dbg !2375

do.body.101:                                      ; preds = %for.end
  %91 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !2376
  call void @llvm.lifetime.start(i64 8, i8* %91) #1, !dbg !2376
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !691, metadata !1242), !dbg !2378
  %92 = load %struct._object*, %struct._object** %x, align 8, !dbg !2379, !tbaa !1246
  store %struct._object* %92, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2378, !tbaa !1246
  %93 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2380, !tbaa !1246
  %cmp102 = icmp ne %struct._object* %93, null, !dbg !2381
  br i1 %cmp102, label %if.then.103, label %if.end.116, !dbg !2382

if.then.103:                                      ; preds = %do.body.101
  br label %do.body.104, !dbg !2383

do.body.104:                                      ; preds = %if.then.103
  %94 = bitcast %struct._object** %_py_decref_tmp105 to i8*, !dbg !2385
  call void @llvm.lifetime.start(i64 8, i8* %94) #1, !dbg !2385
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp105, metadata !693, metadata !1242), !dbg !2387
  %95 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2388, !tbaa !1246
  store %struct._object* %95, %struct._object** %_py_decref_tmp105, align 8, !dbg !2387, !tbaa !1246
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8, !dbg !2389, !tbaa !1246
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %96, i32 0, i32 0, !dbg !2391
  %97 = load i64, i64* %ob_refcnt106, align 8, !dbg !2392, !tbaa !1261
  %dec107 = add i64 %97, -1, !dbg !2392
  store i64 %dec107, i64* %ob_refcnt106, align 8, !dbg !2392, !tbaa !1261
  %cmp108 = icmp ne i64 %dec107, 0, !dbg !2393
  br i1 %cmp108, label %if.then.109, label %if.else.110, !dbg !2394

if.then.109:                                      ; preds = %do.body.104
  br label %if.end.113, !dbg !2395

if.else.110:                                      ; preds = %do.body.104
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8, !dbg !2397, !tbaa !1246
  %ob_type111 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 1, !dbg !2399
  %99 = load %struct._typeobject*, %struct._typeobject** %ob_type111, align 8, !dbg !2399, !tbaa !1345
  %tp_dealloc112 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %99, i32 0, i32 4, !dbg !2400
  %100 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc112, align 8, !dbg !2400, !tbaa !1444
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8, !dbg !2401, !tbaa !1246
  call void %100(%struct._object* %101), !dbg !2402
  br label %if.end.113

if.end.113:                                       ; preds = %if.else.110, %if.then.109
  %102 = bitcast %struct._object** %_py_decref_tmp105 to i8*, !dbg !2403
  call void @llvm.lifetime.end(i64 8, i8* %102) #1, !dbg !2403
  br label %do.cond.114, !dbg !2405

do.cond.114:                                      ; preds = %if.end.113
  br label %do.end.115, !dbg !2406

do.end.115:                                       ; preds = %do.cond.114
  br label %if.end.116, !dbg !2408

if.end.116:                                       ; preds = %do.end.115, %do.body.101
  %103 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !2410
  call void @llvm.lifetime.end(i64 8, i8* %103) #1, !dbg !2410
  br label %do.cond.117, !dbg !2413

do.cond.117:                                      ; preds = %if.end.116
  br label %do.end.118, !dbg !2414

do.end.118:                                       ; preds = %do.cond.117
  br label %do.body.119, !dbg !2416

do.body.119:                                      ; preds = %do.end.118
  %104 = bitcast %struct._object** %_py_xdecref_tmp120 to i8*, !dbg !2417
  call void @llvm.lifetime.start(i64 8, i8* %104) #1, !dbg !2417
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp120, metadata !696, metadata !1242), !dbg !2419
  %105 = load %struct._object*, %struct._object** %y, align 8, !dbg !2420, !tbaa !1246
  store %struct._object* %105, %struct._object** %_py_xdecref_tmp120, align 8, !dbg !2419, !tbaa !1246
  %106 = load %struct._object*, %struct._object** %_py_xdecref_tmp120, align 8, !dbg !2421, !tbaa !1246
  %cmp121 = icmp ne %struct._object* %106, null, !dbg !2422
  br i1 %cmp121, label %if.then.122, label %if.end.135, !dbg !2423

if.then.122:                                      ; preds = %do.body.119
  br label %do.body.123, !dbg !2424

do.body.123:                                      ; preds = %if.then.122
  %107 = bitcast %struct._object** %_py_decref_tmp124 to i8*, !dbg !2426
  call void @llvm.lifetime.start(i64 8, i8* %107) #1, !dbg !2426
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp124, metadata !698, metadata !1242), !dbg !2428
  %108 = load %struct._object*, %struct._object** %_py_xdecref_tmp120, align 8, !dbg !2429, !tbaa !1246
  store %struct._object* %108, %struct._object** %_py_decref_tmp124, align 8, !dbg !2428, !tbaa !1246
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8, !dbg !2430, !tbaa !1246
  %ob_refcnt125 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 0, !dbg !2432
  %110 = load i64, i64* %ob_refcnt125, align 8, !dbg !2433, !tbaa !1261
  %dec126 = add i64 %110, -1, !dbg !2433
  store i64 %dec126, i64* %ob_refcnt125, align 8, !dbg !2433, !tbaa !1261
  %cmp127 = icmp ne i64 %dec126, 0, !dbg !2434
  br i1 %cmp127, label %if.then.128, label %if.else.129, !dbg !2435

if.then.128:                                      ; preds = %do.body.123
  br label %if.end.132, !dbg !2436

if.else.129:                                      ; preds = %do.body.123
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8, !dbg !2438, !tbaa !1246
  %ob_type130 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 1, !dbg !2440
  %112 = load %struct._typeobject*, %struct._typeobject** %ob_type130, align 8, !dbg !2440, !tbaa !1345
  %tp_dealloc131 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %112, i32 0, i32 4, !dbg !2441
  %113 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc131, align 8, !dbg !2441, !tbaa !1444
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8, !dbg !2442, !tbaa !1246
  call void %113(%struct._object* %114), !dbg !2443
  br label %if.end.132

if.end.132:                                       ; preds = %if.else.129, %if.then.128
  %115 = bitcast %struct._object** %_py_decref_tmp124 to i8*, !dbg !2444
  call void @llvm.lifetime.end(i64 8, i8* %115) #1, !dbg !2444
  br label %do.cond.133, !dbg !2446

do.cond.133:                                      ; preds = %if.end.132
  br label %do.end.134, !dbg !2447

do.end.134:                                       ; preds = %do.cond.133
  br label %if.end.135, !dbg !2449

if.end.135:                                       ; preds = %do.end.134, %do.body.119
  %116 = bitcast %struct._object** %_py_xdecref_tmp120 to i8*, !dbg !2451
  call void @llvm.lifetime.end(i64 8, i8* %116) #1, !dbg !2451
  br label %do.cond.136, !dbg !2452

do.cond.136:                                      ; preds = %if.end.135
  br label %do.end.137, !dbg !2453

do.end.137:                                       ; preds = %do.cond.136
  %call138 = call %struct._object* @PyErr_Occurred(), !dbg !2455
  %tobool139 = icmp ne %struct._object* %call138, null, !dbg !2455
  br i1 %tobool139, label %if.then.140, label %if.end.141, !dbg !2457

if.then.140:                                      ; preds = %do.end.137
  br label %done, !dbg !2458

if.end.141:                                       ; preds = %do.end.137
  %117 = load i32, i32* %op.addr, align 4, !dbg !2459, !tbaa !1906
  switch i32 %117, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.143
    i32 2, label %sw.bb.146
    i32 3, label %sw.bb.149
    i32 4, label %sw.bb.152
    i32 5, label %sw.bb.155
  ], !dbg !2460

sw.bb:                                            ; preds = %if.end.141
  %118 = load %struct._object*, %struct._object** %y, align 8, !dbg !2461, !tbaa !1246
  %cmp142 = icmp ne %struct._object* %118, null, !dbg !2463
  %conv = zext i1 %cmp142 to i32, !dbg !2463
  store i32 %conv, i32* %cmp, align 4, !dbg !2464, !tbaa !1906
  br label %sw.epilog, !dbg !2465

sw.bb.143:                                        ; preds = %if.end.141
  %119 = load %struct._object*, %struct._object** %x, align 8, !dbg !2466, !tbaa !1246
  %cmp144 = icmp eq %struct._object* %119, null, !dbg !2467
  %conv145 = zext i1 %cmp144 to i32, !dbg !2467
  store i32 %conv145, i32* %cmp, align 4, !dbg !2468, !tbaa !1906
  br label %sw.epilog, !dbg !2469

sw.bb.146:                                        ; preds = %if.end.141
  %120 = load %struct._object*, %struct._object** %x, align 8, !dbg !2470, !tbaa !1246
  %121 = load %struct._object*, %struct._object** %y, align 8, !dbg !2471, !tbaa !1246
  %cmp147 = icmp eq %struct._object* %120, %121, !dbg !2472
  %conv148 = zext i1 %cmp147 to i32, !dbg !2472
  store i32 %conv148, i32* %cmp, align 4, !dbg !2473, !tbaa !1906
  br label %sw.epilog, !dbg !2474

sw.bb.149:                                        ; preds = %if.end.141
  %122 = load %struct._object*, %struct._object** %x, align 8, !dbg !2475, !tbaa !1246
  %123 = load %struct._object*, %struct._object** %y, align 8, !dbg !2476, !tbaa !1246
  %cmp150 = icmp ne %struct._object* %122, %123, !dbg !2477
  %conv151 = zext i1 %cmp150 to i32, !dbg !2477
  store i32 %conv151, i32* %cmp, align 4, !dbg !2478, !tbaa !1906
  br label %sw.epilog, !dbg !2479

sw.bb.152:                                        ; preds = %if.end.141
  %124 = load %struct._object*, %struct._object** %x, align 8, !dbg !2480, !tbaa !1246
  %cmp153 = icmp ne %struct._object* %124, null, !dbg !2481
  %conv154 = zext i1 %cmp153 to i32, !dbg !2481
  store i32 %conv154, i32* %cmp, align 4, !dbg !2482, !tbaa !1906
  br label %sw.epilog, !dbg !2483

sw.bb.155:                                        ; preds = %if.end.141
  %125 = load %struct._object*, %struct._object** %y, align 8, !dbg !2484, !tbaa !1246
  %cmp156 = icmp eq %struct._object* %125, null, !dbg !2485
  %conv157 = zext i1 %cmp156 to i32, !dbg !2485
  store i32 %conv157, i32* %cmp, align 4, !dbg !2486, !tbaa !1906
  br label %sw.epilog, !dbg !2487

sw.epilog:                                        ; preds = %if.end.141, %sw.bb.155, %sw.bb.152, %sw.bb.149, %sw.bb.146, %sw.bb.143, %sw.bb
  br label %done, !dbg !2488

done:                                             ; preds = %sw.epilog, %if.then.140, %if.then.99, %do.end.72, %if.then.45, %if.then.39, %if.then.35
  br label %do.body.158, !dbg !2489

do.body.158:                                      ; preds = %done
  %126 = bitcast %struct._object** %_py_xdecref_tmp159 to i8*, !dbg !2490
  call void @llvm.lifetime.start(i64 8, i8* %126) #1, !dbg !2490
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp159, metadata !701, metadata !1242), !dbg !2492
  %127 = load %struct._object*, %struct._object** %it1, align 8, !dbg !2493, !tbaa !1246
  store %struct._object* %127, %struct._object** %_py_xdecref_tmp159, align 8, !dbg !2492, !tbaa !1246
  %128 = load %struct._object*, %struct._object** %_py_xdecref_tmp159, align 8, !dbg !2494, !tbaa !1246
  %cmp160 = icmp ne %struct._object* %128, null, !dbg !2495
  br i1 %cmp160, label %if.then.162, label %if.end.176, !dbg !2496

if.then.162:                                      ; preds = %do.body.158
  br label %do.body.163, !dbg !2497

do.body.163:                                      ; preds = %if.then.162
  %129 = bitcast %struct._object** %_py_decref_tmp164 to i8*, !dbg !2499
  call void @llvm.lifetime.start(i64 8, i8* %129) #1, !dbg !2499
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp164, metadata !703, metadata !1242), !dbg !2501
  %130 = load %struct._object*, %struct._object** %_py_xdecref_tmp159, align 8, !dbg !2502, !tbaa !1246
  store %struct._object* %130, %struct._object** %_py_decref_tmp164, align 8, !dbg !2501, !tbaa !1246
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !2503, !tbaa !1246
  %ob_refcnt165 = getelementptr inbounds %struct._object, %struct._object* %131, i32 0, i32 0, !dbg !2505
  %132 = load i64, i64* %ob_refcnt165, align 8, !dbg !2506, !tbaa !1261
  %dec166 = add i64 %132, -1, !dbg !2506
  store i64 %dec166, i64* %ob_refcnt165, align 8, !dbg !2506, !tbaa !1261
  %cmp167 = icmp ne i64 %dec166, 0, !dbg !2507
  br i1 %cmp167, label %if.then.169, label %if.else.170, !dbg !2508

if.then.169:                                      ; preds = %do.body.163
  br label %if.end.173, !dbg !2509

if.else.170:                                      ; preds = %do.body.163
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !2511, !tbaa !1246
  %ob_type171 = getelementptr inbounds %struct._object, %struct._object* %133, i32 0, i32 1, !dbg !2513
  %134 = load %struct._typeobject*, %struct._typeobject** %ob_type171, align 8, !dbg !2513, !tbaa !1345
  %tp_dealloc172 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %134, i32 0, i32 4, !dbg !2514
  %135 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc172, align 8, !dbg !2514, !tbaa !1444
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !2515, !tbaa !1246
  call void %135(%struct._object* %136), !dbg !2516
  br label %if.end.173

if.end.173:                                       ; preds = %if.else.170, %if.then.169
  %137 = bitcast %struct._object** %_py_decref_tmp164 to i8*, !dbg !2517
  call void @llvm.lifetime.end(i64 8, i8* %137) #1, !dbg !2517
  br label %do.cond.174, !dbg !2519

do.cond.174:                                      ; preds = %if.end.173
  br label %do.end.175, !dbg !2520

do.end.175:                                       ; preds = %do.cond.174
  br label %if.end.176, !dbg !2522

if.end.176:                                       ; preds = %do.end.175, %do.body.158
  %138 = bitcast %struct._object** %_py_xdecref_tmp159 to i8*, !dbg !2524
  call void @llvm.lifetime.end(i64 8, i8* %138) #1, !dbg !2524
  br label %do.cond.177, !dbg !2525

do.cond.177:                                      ; preds = %if.end.176
  br label %do.end.178, !dbg !2526

do.end.178:                                       ; preds = %do.cond.177
  br label %do.body.179, !dbg !2528

do.body.179:                                      ; preds = %do.end.178
  %139 = bitcast %struct._object** %_py_xdecref_tmp180 to i8*, !dbg !2529
  call void @llvm.lifetime.start(i64 8, i8* %139) #1, !dbg !2529
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp180, metadata !706, metadata !1242), !dbg !2531
  %140 = load %struct._object*, %struct._object** %it2, align 8, !dbg !2532, !tbaa !1246
  store %struct._object* %140, %struct._object** %_py_xdecref_tmp180, align 8, !dbg !2531, !tbaa !1246
  %141 = load %struct._object*, %struct._object** %_py_xdecref_tmp180, align 8, !dbg !2533, !tbaa !1246
  %cmp181 = icmp ne %struct._object* %141, null, !dbg !2534
  br i1 %cmp181, label %if.then.183, label %if.end.197, !dbg !2535

if.then.183:                                      ; preds = %do.body.179
  br label %do.body.184, !dbg !2536

do.body.184:                                      ; preds = %if.then.183
  %142 = bitcast %struct._object** %_py_decref_tmp185 to i8*, !dbg !2538
  call void @llvm.lifetime.start(i64 8, i8* %142) #1, !dbg !2538
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp185, metadata !708, metadata !1242), !dbg !2540
  %143 = load %struct._object*, %struct._object** %_py_xdecref_tmp180, align 8, !dbg !2541, !tbaa !1246
  store %struct._object* %143, %struct._object** %_py_decref_tmp185, align 8, !dbg !2540, !tbaa !1246
  %144 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8, !dbg !2542, !tbaa !1246
  %ob_refcnt186 = getelementptr inbounds %struct._object, %struct._object* %144, i32 0, i32 0, !dbg !2544
  %145 = load i64, i64* %ob_refcnt186, align 8, !dbg !2545, !tbaa !1261
  %dec187 = add i64 %145, -1, !dbg !2545
  store i64 %dec187, i64* %ob_refcnt186, align 8, !dbg !2545, !tbaa !1261
  %cmp188 = icmp ne i64 %dec187, 0, !dbg !2546
  br i1 %cmp188, label %if.then.190, label %if.else.191, !dbg !2547

if.then.190:                                      ; preds = %do.body.184
  br label %if.end.194, !dbg !2548

if.else.191:                                      ; preds = %do.body.184
  %146 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8, !dbg !2550, !tbaa !1246
  %ob_type192 = getelementptr inbounds %struct._object, %struct._object* %146, i32 0, i32 1, !dbg !2552
  %147 = load %struct._typeobject*, %struct._typeobject** %ob_type192, align 8, !dbg !2552, !tbaa !1345
  %tp_dealloc193 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %147, i32 0, i32 4, !dbg !2553
  %148 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc193, align 8, !dbg !2553, !tbaa !1444
  %149 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8, !dbg !2554, !tbaa !1246
  call void %148(%struct._object* %149), !dbg !2555
  br label %if.end.194

if.end.194:                                       ; preds = %if.else.191, %if.then.190
  %150 = bitcast %struct._object** %_py_decref_tmp185 to i8*, !dbg !2556
  call void @llvm.lifetime.end(i64 8, i8* %150) #1, !dbg !2556
  br label %do.cond.195, !dbg !2558

do.cond.195:                                      ; preds = %if.end.194
  br label %do.end.196, !dbg !2559

do.end.196:                                       ; preds = %do.cond.195
  br label %if.end.197, !dbg !2561

if.end.197:                                       ; preds = %do.end.196, %do.body.179
  %151 = bitcast %struct._object** %_py_xdecref_tmp180 to i8*, !dbg !2563
  call void @llvm.lifetime.end(i64 8, i8* %151) #1, !dbg !2563
  br label %do.cond.198, !dbg !2564

do.cond.198:                                      ; preds = %if.end.197
  br label %do.end.199, !dbg !2565

do.end.199:                                       ; preds = %do.cond.198
  %152 = load i32, i32* %cmp, align 4, !dbg !2567, !tbaa !1906
  %cmp200 = icmp eq i32 %152, 1, !dbg !2569
  br i1 %cmp200, label %if.then.202, label %if.end.204, !dbg !2570

if.then.202:                                      ; preds = %do.end.199
  %153 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2571, !tbaa !1261
  %inc203 = add i64 %153, 1, !dbg !2571
  store i64 %inc203, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2571, !tbaa !1261
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !2572
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2572

if.end.204:                                       ; preds = %do.end.199
  %154 = load i32, i32* %cmp, align 4, !dbg !2573, !tbaa !1906
  %cmp205 = icmp eq i32 %154, 0, !dbg !2575
  br i1 %cmp205, label %if.then.207, label %if.end.209, !dbg !2576

if.then.207:                                      ; preds = %if.end.204
  %155 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2577, !tbaa !1261
  %inc208 = add i64 %155, 1, !dbg !2577
  store i64 %inc208, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2577, !tbaa !1261
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !2578
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2578

if.end.209:                                       ; preds = %if.end.204
  store %struct._object* null, %struct._object** %retval, !dbg !2579
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2579

cleanup:                                          ; preds = %if.end.209, %if.then.207, %if.then.202, %if.then.29, %if.then.25, %if.then.18, %if.then.14, %if.then
  %156 = bitcast i32* %cmp to i8*, !dbg !2580
  call void @llvm.lifetime.end(i64 4, i8* %156) #1, !dbg !2580
  %157 = bitcast i32* %b to i8*, !dbg !2580
  call void @llvm.lifetime.end(i64 4, i8* %157) #1, !dbg !2580
  %158 = bitcast i64* %ws to i8*, !dbg !2580
  call void @llvm.lifetime.end(i64 8, i8* %158) #1, !dbg !2580
  %159 = bitcast i64* %vs to i8*, !dbg !2580
  call void @llvm.lifetime.end(i64 8, i8* %159) #1, !dbg !2580
  %160 = bitcast %struct._object** %y to i8*, !dbg !2580
  call void @llvm.lifetime.end(i64 8, i8* %160) #1, !dbg !2580
  %161 = bitcast %struct._object** %x to i8*, !dbg !2580
  call void @llvm.lifetime.end(i64 8, i8* %161) #1, !dbg !2580
  %162 = bitcast %struct._object** %it2 to i8*, !dbg !2580
  call void @llvm.lifetime.end(i64 8, i8* %162) #1, !dbg !2580
  %163 = bitcast %struct._object** %it1 to i8*, !dbg !2580
  call void @llvm.lifetime.end(i64 8, i8* %163) #1, !dbg !2580
  %164 = load %struct._object*, %struct._object** %retval, !dbg !2580
  ret %struct._object* %164, !dbg !2580
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_iter(%struct.dequeobject* %deque) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %it = alloca %struct.dequeiterobject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !715, metadata !1242), !dbg !2581
  %0 = bitcast %struct.dequeiterobject** %it to i8*, !dbg !2582
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !2582
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %it, metadata !716, metadata !1242), !dbg !2583
  %call = call %struct._object* @_PyObject_GC_New(%struct._typeobject* @dequeiter_type), !dbg !2584
  %1 = bitcast %struct._object* %call to %struct.dequeiterobject*, !dbg !2585
  store %struct.dequeiterobject* %1, %struct.dequeiterobject** %it, align 8, !dbg !2586, !tbaa !1246
  %2 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !2587, !tbaa !1246
  %cmp = icmp eq %struct.dequeiterobject* %2, null, !dbg !2589
  br i1 %cmp, label %if.then, label %if.end, !dbg !2590

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !2591
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2591

if.end:                                           ; preds = %entry
  %3 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2592, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %3, i32 0, i32 1, !dbg !2593
  %4 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !2593, !tbaa !1872
  %5 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !2594, !tbaa !1246
  %b = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %5, i32 0, i32 2, !dbg !2595
  store %struct.BLOCK* %4, %struct.BLOCK** %b, align 8, !dbg !2596, !tbaa !2597
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2599, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %6, i32 0, i32 3, !dbg !2600
  %7 = load i64, i64* %leftindex, align 8, !dbg !2600, !tbaa !1989
  %8 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !2601, !tbaa !1246
  %index = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %8, i32 0, i32 1, !dbg !2602
  store i64 %7, i64* %index, align 8, !dbg !2603, !tbaa !2604
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2605, !tbaa !1246
  %10 = bitcast %struct.dequeobject* %9 to %struct._object*, !dbg !2606
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !2607
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !2608, !tbaa !1261
  %inc = add i64 %11, 1, !dbg !2608
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !2608, !tbaa !1261
  %12 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2609, !tbaa !1246
  %13 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !2610, !tbaa !1246
  %deque1 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %13, i32 0, i32 3, !dbg !2611
  store %struct.dequeobject* %12, %struct.dequeobject** %deque1, align 8, !dbg !2612, !tbaa !2613
  %14 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2614, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %14, i32 0, i32 5, !dbg !2615
  %15 = load i64, i64* %state, align 8, !dbg !2615, !tbaa !2616
  %16 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !2617, !tbaa !1246
  %state2 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %16, i32 0, i32 4, !dbg !2618
  store i64 %15, i64* %state2, align 8, !dbg !2619, !tbaa !2620
  %17 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2621, !tbaa !1246
  %18 = bitcast %struct.dequeobject* %17 to %struct.PyVarObject*, !dbg !2622
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !2623
  %19 = load i64, i64* %ob_size, align 8, !dbg !2623, !tbaa !2108
  %20 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !2624, !tbaa !1246
  %counter = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %20, i32 0, i32 5, !dbg !2625
  store i64 %19, i64* %counter, align 8, !dbg !2626, !tbaa !2627
  %21 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !2628, !tbaa !1246
  %22 = bitcast %struct.dequeiterobject* %21 to i8*, !dbg !2628
  call void @PyObject_GC_Track(i8* %22), !dbg !2629
  %23 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !2630, !tbaa !1246
  %24 = bitcast %struct.dequeiterobject* %23 to %struct._object*, !dbg !2631
  store %struct._object* %24, %struct._object** %retval, !dbg !2632
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2632

cleanup:                                          ; preds = %if.end, %if.then
  %25 = bitcast %struct.dequeiterobject** %it to i8*, !dbg !2633
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !2633
  %26 = load %struct._object*, %struct._object** %retval, !dbg !2633
  ret %struct._object* %26, !dbg !2633
}

; Function Attrs: nounwind uwtable
define internal i32 @deque_init(%struct.dequeobject* %deque, %struct._object* %args, %struct._object* %kwdargs) #0 {
entry:
  %retval = alloca i32, align 4
  %deque.addr = alloca %struct.dequeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwdargs.addr = alloca %struct._object*, align 8
  %iterable = alloca %struct._object*, align 8
  %maxlenobj = alloca %struct._object*, align 8
  %maxlen = alloca i64, align 8
  %kwlist = alloca [3 x i8*], align 16
  %cleanup.dest.slot = alloca i32
  %rv = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !859, metadata !1242), !dbg !2634
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !860, metadata !1242), !dbg !2635
  store %struct._object* %kwdargs, %struct._object** %kwdargs.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %kwdargs.addr, metadata !861, metadata !1242), !dbg !2636
  %0 = bitcast %struct._object** %iterable to i8*, !dbg !2637
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !2637
  call void @llvm.dbg.declare(metadata %struct._object** %iterable, metadata !862, metadata !1242), !dbg !2638
  store %struct._object* null, %struct._object** %iterable, align 8, !dbg !2638, !tbaa !1246
  %1 = bitcast %struct._object** %maxlenobj to i8*, !dbg !2639
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !2639
  call void @llvm.dbg.declare(metadata %struct._object** %maxlenobj, metadata !863, metadata !1242), !dbg !2640
  store %struct._object* null, %struct._object** %maxlenobj, align 8, !dbg !2640, !tbaa !1246
  %2 = bitcast i64* %maxlen to i8*, !dbg !2641
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !2641
  call void @llvm.dbg.declare(metadata i64* %maxlen, metadata !864, metadata !1242), !dbg !2642
  store i64 -1, i64* %maxlen, align 8, !dbg !2642, !tbaa !1990
  %3 = bitcast [3 x i8*]* %kwlist to i8*, !dbg !2643
  call void @llvm.lifetime.start(i64 24, i8* %3) #1, !dbg !2643
  call void @llvm.dbg.declare(metadata [3 x i8*]* %kwlist, metadata !865, metadata !1242), !dbg !2644
  %4 = bitcast [3 x i8*]* %kwlist to i8*, !dbg !2644
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast ([3 x i8*]* @deque_init.kwlist to i8*), i64 24, i32 16, i1 false), !dbg !2644
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !2645, !tbaa !1246
  %6 = load %struct._object*, %struct._object** %kwdargs.addr, align 8, !dbg !2647, !tbaa !1246
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %kwlist, i32 0, i32 0, !dbg !2648
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %5, %struct._object* %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0), i8** %arraydecay, %struct._object** %iterable, %struct._object** %maxlenobj), !dbg !2649
  %tobool = icmp ne i32 %call, 0, !dbg !2649
  br i1 %tobool, label %if.end, label %if.then, !dbg !2650

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, !dbg !2651
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.25, !dbg !2651

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** %maxlenobj, align 8, !dbg !2652, !tbaa !1246
  %cmp = icmp ne %struct._object* %7, null, !dbg !2654
  br i1 %cmp, label %land.lhs.true, label %if.end.13, !dbg !2655

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %maxlenobj, align 8, !dbg !2656, !tbaa !1246
  %cmp1 = icmp ne %struct._object* %8, @_Py_NoneStruct, !dbg !2658
  br i1 %cmp1, label %if.then.2, label %if.end.13, !dbg !2659

if.then.2:                                        ; preds = %land.lhs.true
  %9 = load %struct._object*, %struct._object** %maxlenobj, align 8, !dbg !2660, !tbaa !1246
  %call3 = call i64 @PyLong_AsSsize_t(%struct._object* %9), !dbg !2662
  store i64 %call3, i64* %maxlen, align 8, !dbg !2663, !tbaa !1990
  %10 = load i64, i64* %maxlen, align 8, !dbg !2664, !tbaa !1990
  %cmp4 = icmp eq i64 %10, -1, !dbg !2666
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.9, !dbg !2667

land.lhs.true.5:                                  ; preds = %if.then.2
  %call6 = call %struct._object* @PyErr_Occurred(), !dbg !2668
  %tobool7 = icmp ne %struct._object* %call6, null, !dbg !2668
  br i1 %tobool7, label %if.then.8, label %if.end.9, !dbg !2670

if.then.8:                                        ; preds = %land.lhs.true.5
  store i32 -1, i32* %retval, !dbg !2671
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.25, !dbg !2671

if.end.9:                                         ; preds = %land.lhs.true.5, %if.then.2
  %11 = load i64, i64* %maxlen, align 8, !dbg !2672, !tbaa !1990
  %cmp10 = icmp slt i64 %11, 0, !dbg !2674
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !2675

if.then.11:                                       ; preds = %if.end.9
  %12 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !2676, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.45, i32 0, i32 0)), !dbg !2678
  store i32 -1, i32* %retval, !dbg !2679
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.25, !dbg !2679

if.end.12:                                        ; preds = %if.end.9
  br label %if.end.13, !dbg !2680

if.end.13:                                        ; preds = %if.end.12, %land.lhs.true, %if.end
  %13 = load i64, i64* %maxlen, align 8, !dbg !2681, !tbaa !1990
  %14 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2682, !tbaa !1246
  %maxlen14 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %14, i32 0, i32 6, !dbg !2683
  store i64 %13, i64* %maxlen14, align 8, !dbg !2684, !tbaa !1934
  %15 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2685, !tbaa !1246
  call void @deque_clear(%struct.dequeobject* %15), !dbg !2686
  %16 = load %struct._object*, %struct._object** %iterable, align 8, !dbg !2687, !tbaa !1246
  %cmp15 = icmp ne %struct._object* %16, null, !dbg !2688
  br i1 %cmp15, label %if.then.16, label %if.end.24, !dbg !2689

if.then.16:                                       ; preds = %if.end.13
  %17 = bitcast %struct._object** %rv to i8*, !dbg !2690
  call void @llvm.lifetime.start(i64 8, i8* %17) #1, !dbg !2690
  call void @llvm.dbg.declare(metadata %struct._object** %rv, metadata !869, metadata !1242), !dbg !2691
  %18 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2692, !tbaa !1246
  %19 = load %struct._object*, %struct._object** %iterable, align 8, !dbg !2693, !tbaa !1246
  %call17 = call %struct._object* @deque_extend(%struct.dequeobject* %18, %struct._object* %19), !dbg !2694
  store %struct._object* %call17, %struct._object** %rv, align 8, !dbg !2691, !tbaa !1246
  %20 = load %struct._object*, %struct._object** %rv, align 8, !dbg !2695, !tbaa !1246
  %cmp18 = icmp eq %struct._object* %20, null, !dbg !2697
  br i1 %cmp18, label %if.then.19, label %if.end.20, !dbg !2698

if.then.19:                                       ; preds = %if.then.16
  store i32 -1, i32* %retval, !dbg !2699
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2699

if.end.20:                                        ; preds = %if.then.16
  br label %do.body, !dbg !2700

do.body:                                          ; preds = %if.end.20
  %21 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2701
  call void @llvm.lifetime.start(i64 8, i8* %21) #1, !dbg !2701
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !872, metadata !1242), !dbg !2703
  %22 = load %struct._object*, %struct._object** %rv, align 8, !dbg !2704, !tbaa !1246
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8, !dbg !2703, !tbaa !1246
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2705, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0, !dbg !2707
  %24 = load i64, i64* %ob_refcnt, align 8, !dbg !2708, !tbaa !1261
  %dec = add i64 %24, -1, !dbg !2708
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2708, !tbaa !1261
  %cmp21 = icmp ne i64 %dec, 0, !dbg !2709
  br i1 %cmp21, label %if.then.22, label %if.else, !dbg !2710

if.then.22:                                       ; preds = %do.body
  br label %if.end.23, !dbg !2711

if.else:                                          ; preds = %do.body
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2713, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1, !dbg !2715
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2715, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4, !dbg !2716
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2716, !tbaa !1444
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2717, !tbaa !1246
  call void %27(%struct._object* %28), !dbg !2718
  br label %if.end.23

if.end.23:                                        ; preds = %if.else, %if.then.22
  %29 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2719
  call void @llvm.lifetime.end(i64 8, i8* %29) #1, !dbg !2719
  br label %do.cond, !dbg !2721

do.cond:                                          ; preds = %if.end.23
  br label %do.end, !dbg !2722

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, !dbg !2724
  br label %cleanup, !dbg !2724

cleanup:                                          ; preds = %do.end, %if.then.19
  %30 = bitcast %struct._object** %rv to i8*, !dbg !2725
  call void @llvm.lifetime.end(i64 8, i8* %30) #1, !dbg !2725
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.25 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.24, !dbg !2727

if.end.24:                                        ; preds = %cleanup.cont, %if.end.13
  store i32 0, i32* %retval, !dbg !2728
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.25, !dbg !2728

cleanup.25:                                       ; preds = %if.end.24, %cleanup, %if.then.11, %if.then.8, %if.then
  %31 = bitcast [3 x i8*]* %kwlist to i8*, !dbg !2729
  call void @llvm.lifetime.end(i64 24, i8* %31) #1, !dbg !2729
  %32 = bitcast i64* %maxlen to i8*, !dbg !2729
  call void @llvm.lifetime.end(i64 8, i8* %32) #1, !dbg !2729
  %33 = bitcast %struct._object** %maxlenobj to i8*, !dbg !2729
  call void @llvm.lifetime.end(i64 8, i8* %33) #1, !dbg !2729
  %34 = bitcast %struct._object** %iterable to i8*, !dbg !2729
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !2729
  %35 = load i32, i32* %retval, !dbg !2729
  ret i32 %35, !dbg !2729
}

declare %struct._object* @PyType_GenericAlloc(%struct._typeobject*, i64) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %deque = alloca %struct.dequeobject*, align 8
  %b = alloca %struct.BLOCK*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._typeobject** %type.addr, metadata !880, metadata !1242), !dbg !2730
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !881, metadata !1242), !dbg !2731
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !882, metadata !1242), !dbg !2732
  %0 = bitcast %struct.dequeobject** %deque to i8*, !dbg !2733
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !2733
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque, metadata !883, metadata !1242), !dbg !2734
  %1 = bitcast %struct.BLOCK** %b to i8*, !dbg !2735
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !2735
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !884, metadata !1242), !dbg !2736
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8, !dbg !2737, !tbaa !1246
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 36, !dbg !2738
  %3 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8, !dbg !2738, !tbaa !2739
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8, !dbg !2740, !tbaa !1246
  %call = call %struct._object* %3(%struct._typeobject* %4, i64 0), !dbg !2737
  %5 = bitcast %struct._object* %call to %struct.dequeobject*, !dbg !2741
  store %struct.dequeobject* %5, %struct.dequeobject** %deque, align 8, !dbg !2742, !tbaa !1246
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2743, !tbaa !1246
  %cmp = icmp eq %struct.dequeobject* %6, null, !dbg !2745
  br i1 %cmp, label %if.then, label %if.end, !dbg !2746

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !2747
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2747

if.end:                                           ; preds = %entry
  %call1 = call %struct.BLOCK* @newblock(i64 0), !dbg !2748
  store %struct.BLOCK* %call1, %struct.BLOCK** %b, align 8, !dbg !2749, !tbaa !1246
  %7 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2750, !tbaa !1246
  %cmp2 = icmp eq %struct.BLOCK* %7, null, !dbg !2751
  br i1 %cmp2, label %if.then.3, label %if.end.7, !dbg !2752

if.then.3:                                        ; preds = %if.end
  br label %do.body, !dbg !2753

do.body:                                          ; preds = %if.then.3
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2754
  call void @llvm.lifetime.start(i64 8, i8* %8) #1, !dbg !2754
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !885, metadata !1242), !dbg !2756
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2757, !tbaa !1246
  %10 = bitcast %struct.dequeobject* %9 to %struct._object*, !dbg !2758
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8, !dbg !2756, !tbaa !1246
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2759, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0, !dbg !2761
  %12 = load i64, i64* %ob_refcnt, align 8, !dbg !2762, !tbaa !1261
  %dec = add i64 %12, -1, !dbg !2762
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2762, !tbaa !1261
  %cmp4 = icmp ne i64 %dec, 0, !dbg !2763
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !2764

if.then.5:                                        ; preds = %do.body
  br label %if.end.6, !dbg !2765

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2767, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !2769
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2769, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4, !dbg !2770
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2770, !tbaa !1444
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2771, !tbaa !1246
  call void %15(%struct._object* %16), !dbg !2772
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2773
  call void @llvm.lifetime.end(i64 8, i8* %17) #1, !dbg !2773
  br label %do.cond, !dbg !2775

do.cond:                                          ; preds = %if.end.6
  br label %do.end, !dbg !2776

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !2778
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2778

if.end.7:                                         ; preds = %if.end
  %18 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2779, !tbaa !1246
  %19 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2780, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %19, i32 0, i32 1, !dbg !2781
  store %struct.BLOCK* %18, %struct.BLOCK** %leftblock, align 8, !dbg !2782, !tbaa !1872
  %20 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2783, !tbaa !1246
  %21 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2784, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %21, i32 0, i32 2, !dbg !2785
  store %struct.BLOCK* %20, %struct.BLOCK** %rightblock, align 8, !dbg !2786, !tbaa !1888
  %22 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2787, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %22, i32 0, i32 3, !dbg !2788
  store i64 31, i64* %leftindex, align 8, !dbg !2789, !tbaa !1989
  %23 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2790, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %23, i32 0, i32 4, !dbg !2791
  store i64 30, i64* %rightindex, align 8, !dbg !2792, !tbaa !2060
  %24 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2793, !tbaa !1246
  %25 = bitcast %struct.dequeobject* %24 to %struct.PyVarObject*, !dbg !2794
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1, !dbg !2795
  store i64 0, i64* %ob_size, align 8, !dbg !2796, !tbaa !2108
  %26 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2797, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %26, i32 0, i32 5, !dbg !2798
  store i64 0, i64* %state, align 8, !dbg !2799, !tbaa !2616
  %27 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2800, !tbaa !1246
  %weakreflist = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %27, i32 0, i32 7, !dbg !2801
  store %struct._object* null, %struct._object** %weakreflist, align 8, !dbg !2802, !tbaa !1862
  %28 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2803, !tbaa !1246
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %28, i32 0, i32 6, !dbg !2804
  store i64 -1, i64* %maxlen, align 8, !dbg !2805, !tbaa !1934
  %29 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !2806, !tbaa !1246
  %30 = bitcast %struct.dequeobject* %29 to %struct._object*, !dbg !2807
  store %struct._object* %30, %struct._object** %retval, !dbg !2808
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2808

cleanup:                                          ; preds = %if.end.7, %do.end, %if.then
  %31 = bitcast %struct.BLOCK** %b to i8*, !dbg !2809
  call void @llvm.lifetime.end(i64 8, i8* %31) #1, !dbg !2809
  %32 = bitcast %struct.dequeobject** %deque to i8*, !dbg !2809
  call void @llvm.lifetime.end(i64 8, i8* %32) #1, !dbg !2809
  %33 = load %struct._object*, %struct._object** %retval, !dbg !2809
  ret %struct._object* %33, !dbg !2809
}

declare void @PyObject_GC_Del(i8*) #3

declare void @PyObject_GC_UnTrack(i8*) #3

declare void @PyObject_ClearWeakRefs(%struct._object*) #3

; Function Attrs: nounwind uwtable
define internal void @freeblock(%struct.BLOCK* %b) #0 {
entry:
  %b.addr = alloca %struct.BLOCK*, align 8
  store %struct.BLOCK* %b, %struct.BLOCK** %b.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b.addr, metadata !495, metadata !1242), !dbg !2810
  %0 = load i64, i64* @numfreeblocks, align 8, !dbg !2811, !tbaa !1990
  %cmp = icmp slt i64 %0, 10, !dbg !2813
  br i1 %cmp, label %if.then, label %if.else, !dbg !2814

if.then:                                          ; preds = %entry
  %1 = load %struct.BLOCK*, %struct.BLOCK** %b.addr, align 8, !dbg !2815, !tbaa !1246
  %2 = load i64, i64* @numfreeblocks, align 8, !dbg !2817, !tbaa !1990
  %arrayidx = getelementptr [10 x %struct.BLOCK*], [10 x %struct.BLOCK*]* @freeblocks, i32 0, i64 %2, !dbg !2818
  store %struct.BLOCK* %1, %struct.BLOCK** %arrayidx, align 8, !dbg !2819, !tbaa !1246
  %3 = load i64, i64* @numfreeblocks, align 8, !dbg !2820, !tbaa !1990
  %inc = add i64 %3, 1, !dbg !2820
  store i64 %inc, i64* @numfreeblocks, align 8, !dbg !2820, !tbaa !1990
  br label %if.end, !dbg !2821

if.else:                                          ; preds = %entry
  %4 = load %struct.BLOCK*, %struct.BLOCK** %b.addr, align 8, !dbg !2822, !tbaa !1246
  %5 = bitcast %struct.BLOCK* %4 to i8*, !dbg !2822
  call void @PyMem_Free(i8* %5), !dbg !2824
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2825
}

declare void @PyMem_Free(i8*) #3

declare i32 @Py_ReprEnter(%struct._object*) #3

declare %struct._object* @PyUnicode_FromString(i8*) #3

declare %struct._object* @PySequence_List(%struct._object*) #3

declare void @Py_ReprLeave(%struct._object*) #3

declare %struct._object* @PyUnicode_FromFormat(i8*, ...) #3

; Function Attrs: nounwind uwtable
define internal i64 @deque_len(%struct.dequeobject* %deque) #0 {
entry:
  %deque.addr = alloca %struct.dequeobject*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !508, metadata !1242), !dbg !2826
  %0 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2827, !tbaa !1246
  %1 = bitcast %struct.dequeobject* %0 to %struct.PyVarObject*, !dbg !2828
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !2829
  %2 = load i64, i64* %ob_size, align 8, !dbg !2829, !tbaa !2108
  ret i64 %2, !dbg !2830
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_item(%struct.dequeobject* %deque, i64 %i) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %i.addr = alloca i64, align 8
  %b = alloca %struct.BLOCK*, align 8
  %item = alloca %struct._object*, align 8
  %n = alloca i64, align 8
  %index = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !513, metadata !1242), !dbg !2831
  store i64 %i, i64* %i.addr, align 8, !tbaa !1990
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !514, metadata !1242), !dbg !2832
  %0 = bitcast %struct.BLOCK** %b to i8*, !dbg !2833
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !2833
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !515, metadata !1242), !dbg !2834
  %1 = bitcast %struct._object** %item to i8*, !dbg !2835
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !2835
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !516, metadata !1242), !dbg !2836
  %2 = bitcast i64* %n to i8*, !dbg !2837
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !2837
  call void @llvm.dbg.declare(metadata i64* %n, metadata !517, metadata !1242), !dbg !2838
  %3 = bitcast i64* %index to i8*, !dbg !2837
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !2837
  call void @llvm.dbg.declare(metadata i64* %index, metadata !518, metadata !1242), !dbg !2839
  %4 = load i64, i64* %i.addr, align 8, !dbg !2840, !tbaa !1990
  store i64 %4, i64* %index, align 8, !dbg !2839, !tbaa !1990
  %5 = load i64, i64* %i.addr, align 8, !dbg !2841, !tbaa !1990
  %cmp = icmp slt i64 %5, 0, !dbg !2843
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2844

lor.lhs.false:                                    ; preds = %entry
  %6 = load i64, i64* %i.addr, align 8, !dbg !2845, !tbaa !1990
  %7 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2847, !tbaa !1246
  %8 = bitcast %struct.dequeobject* %7 to %struct.PyVarObject*, !dbg !2848
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !2849
  %9 = load i64, i64* %ob_size, align 8, !dbg !2849, !tbaa !2108
  %cmp1 = icmp sge i64 %6, %9, !dbg !2850
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2851

if.then:                                          ; preds = %lor.lhs.false, %entry
  %10 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !2852, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i32 0, i32 0)), !dbg !2854
  store %struct._object* null, %struct._object** %retval, !dbg !2855
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2855

if.end:                                           ; preds = %lor.lhs.false
  %11 = load i64, i64* %i.addr, align 8, !dbg !2856, !tbaa !1990
  %cmp2 = icmp eq i64 %11, 0, !dbg !2858
  br i1 %cmp2, label %if.then.3, label %if.else, !dbg !2859

if.then.3:                                        ; preds = %if.end
  %12 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2860, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %12, i32 0, i32 3, !dbg !2862
  %13 = load i64, i64* %leftindex, align 8, !dbg !2862, !tbaa !1989
  store i64 %13, i64* %i.addr, align 8, !dbg !2863, !tbaa !1990
  %14 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2864, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %14, i32 0, i32 1, !dbg !2865
  %15 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !2865, !tbaa !1872
  store %struct.BLOCK* %15, %struct.BLOCK** %b, align 8, !dbg !2866, !tbaa !1246
  br label %if.end.28, !dbg !2867

if.else:                                          ; preds = %if.end
  %16 = load i64, i64* %i.addr, align 8, !dbg !2868, !tbaa !1990
  %17 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2870, !tbaa !1246
  %18 = bitcast %struct.dequeobject* %17 to %struct.PyVarObject*, !dbg !2871
  %ob_size4 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !2872
  %19 = load i64, i64* %ob_size4, align 8, !dbg !2872, !tbaa !2108
  %sub = sub i64 %19, 1, !dbg !2873
  %cmp5 = icmp eq i64 %16, %sub, !dbg !2874
  br i1 %cmp5, label %if.then.6, label %if.else.7, !dbg !2875

if.then.6:                                        ; preds = %if.else
  %20 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2876, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %20, i32 0, i32 4, !dbg !2878
  %21 = load i64, i64* %rightindex, align 8, !dbg !2878, !tbaa !2060
  store i64 %21, i64* %i.addr, align 8, !dbg !2879, !tbaa !1990
  %22 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2880, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %22, i32 0, i32 2, !dbg !2881
  %23 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !2881, !tbaa !1888
  store %struct.BLOCK* %23, %struct.BLOCK** %b, align 8, !dbg !2882, !tbaa !1246
  br label %if.end.27, !dbg !2883

if.else.7:                                        ; preds = %if.else
  %24 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2884, !tbaa !1246
  %leftindex8 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %24, i32 0, i32 3, !dbg !2886
  %25 = load i64, i64* %leftindex8, align 8, !dbg !2886, !tbaa !1989
  %26 = load i64, i64* %i.addr, align 8, !dbg !2887, !tbaa !1990
  %add = add i64 %26, %25, !dbg !2887
  store i64 %add, i64* %i.addr, align 8, !dbg !2887, !tbaa !1990
  %27 = load i64, i64* %i.addr, align 8, !dbg !2888, !tbaa !1990
  %div = sdiv i64 %27, 62, !dbg !2889
  store i64 %div, i64* %n, align 8, !dbg !2890, !tbaa !1990
  %28 = load i64, i64* %i.addr, align 8, !dbg !2891, !tbaa !1990
  %rem = srem i64 %28, 62, !dbg !2891
  store i64 %rem, i64* %i.addr, align 8, !dbg !2891, !tbaa !1990
  %29 = load i64, i64* %index, align 8, !dbg !2892, !tbaa !1990
  %30 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2894, !tbaa !1246
  %31 = bitcast %struct.dequeobject* %30 to %struct.PyVarObject*, !dbg !2895
  %ob_size9 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %31, i32 0, i32 1, !dbg !2896
  %32 = load i64, i64* %ob_size9, align 8, !dbg !2896, !tbaa !2108
  %shr = ashr i64 %32, 1, !dbg !2897
  %cmp10 = icmp slt i64 %29, %shr, !dbg !2898
  br i1 %cmp10, label %if.then.11, label %if.else.13, !dbg !2899

if.then.11:                                       ; preds = %if.else.7
  %33 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2900, !tbaa !1246
  %leftblock12 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %33, i32 0, i32 1, !dbg !2902
  %34 = load %struct.BLOCK*, %struct.BLOCK** %leftblock12, align 8, !dbg !2902, !tbaa !1872
  store %struct.BLOCK* %34, %struct.BLOCK** %b, align 8, !dbg !2903, !tbaa !1246
  br label %while.cond, !dbg !2904

while.cond:                                       ; preds = %while.body, %if.then.11
  %35 = load i64, i64* %n, align 8, !dbg !2905, !tbaa !1990
  %dec = add i64 %35, -1, !dbg !2905
  store i64 %dec, i64* %n, align 8, !dbg !2905, !tbaa !1990
  %tobool = icmp ne i64 %35, 0, !dbg !2904
  br i1 %tobool, label %while.body, label %while.end, !dbg !2904

while.body:                                       ; preds = %while.cond
  %36 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2908, !tbaa !1246
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %36, i32 0, i32 2, !dbg !2909
  %37 = load %struct.BLOCK*, %struct.BLOCK** %rightlink, align 8, !dbg !2909, !tbaa !2048
  store %struct.BLOCK* %37, %struct.BLOCK** %b, align 8, !dbg !2910, !tbaa !1246
  br label %while.cond, !dbg !2904

while.end:                                        ; preds = %while.cond
  br label %if.end.26, !dbg !2911

if.else.13:                                       ; preds = %if.else.7
  %38 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2912, !tbaa !1246
  %leftindex14 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %38, i32 0, i32 3, !dbg !2914
  %39 = load i64, i64* %leftindex14, align 8, !dbg !2914, !tbaa !1989
  %40 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2915, !tbaa !1246
  %41 = bitcast %struct.dequeobject* %40 to %struct.PyVarObject*, !dbg !2916
  %ob_size15 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %41, i32 0, i32 1, !dbg !2917
  %42 = load i64, i64* %ob_size15, align 8, !dbg !2917, !tbaa !2108
  %add16 = add i64 %39, %42, !dbg !2918
  %sub17 = sub i64 %add16, 1, !dbg !2919
  %div18 = sdiv i64 %sub17, 62, !dbg !2920
  %43 = load i64, i64* %n, align 8, !dbg !2921, !tbaa !1990
  %sub19 = sub i64 %div18, %43, !dbg !2922
  store i64 %sub19, i64* %n, align 8, !dbg !2923, !tbaa !1990
  %44 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2924, !tbaa !1246
  %rightblock20 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %44, i32 0, i32 2, !dbg !2925
  %45 = load %struct.BLOCK*, %struct.BLOCK** %rightblock20, align 8, !dbg !2925, !tbaa !1888
  store %struct.BLOCK* %45, %struct.BLOCK** %b, align 8, !dbg !2926, !tbaa !1246
  br label %while.cond.21, !dbg !2927

while.cond.21:                                    ; preds = %while.body.24, %if.else.13
  %46 = load i64, i64* %n, align 8, !dbg !2928, !tbaa !1990
  %dec22 = add i64 %46, -1, !dbg !2928
  store i64 %dec22, i64* %n, align 8, !dbg !2928, !tbaa !1990
  %tobool23 = icmp ne i64 %46, 0, !dbg !2927
  br i1 %tobool23, label %while.body.24, label %while.end.25, !dbg !2927

while.body.24:                                    ; preds = %while.cond.21
  %47 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2931, !tbaa !1246
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %47, i32 0, i32 0, !dbg !2932
  %48 = load %struct.BLOCK*, %struct.BLOCK** %leftlink, align 8, !dbg !2932, !tbaa !2933
  store %struct.BLOCK* %48, %struct.BLOCK** %b, align 8, !dbg !2934, !tbaa !1246
  br label %while.cond.21, !dbg !2927

while.end.25:                                     ; preds = %while.cond.21
  br label %if.end.26

if.end.26:                                        ; preds = %while.end.25, %while.end
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then.6
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.3
  %49 = load i64, i64* %i.addr, align 8, !dbg !2935, !tbaa !1990
  %50 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !2936, !tbaa !1246
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %50, i32 0, i32 1, !dbg !2937
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %49, !dbg !2936
  %51 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !2936, !tbaa !1246
  store %struct._object* %51, %struct._object** %item, align 8, !dbg !2938, !tbaa !1246
  %52 = load %struct._object*, %struct._object** %item, align 8, !dbg !2939, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0, !dbg !2940
  %53 = load i64, i64* %ob_refcnt, align 8, !dbg !2941, !tbaa !1261
  %inc = add i64 %53, 1, !dbg !2941
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !2941, !tbaa !1261
  %54 = load %struct._object*, %struct._object** %item, align 8, !dbg !2942, !tbaa !1246
  store %struct._object* %54, %struct._object** %retval, !dbg !2943
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2943

cleanup:                                          ; preds = %if.end.28, %if.then
  %55 = bitcast i64* %index to i8*, !dbg !2944
  call void @llvm.lifetime.end(i64 8, i8* %55) #1, !dbg !2944
  %56 = bitcast i64* %n to i8*, !dbg !2944
  call void @llvm.lifetime.end(i64 8, i8* %56) #1, !dbg !2944
  %57 = bitcast %struct._object** %item to i8*, !dbg !2944
  call void @llvm.lifetime.end(i64 8, i8* %57) #1, !dbg !2944
  %58 = bitcast %struct.BLOCK** %b to i8*, !dbg !2944
  call void @llvm.lifetime.end(i64 8, i8* %58) #1, !dbg !2944
  %59 = load %struct._object*, %struct._object** %retval, !dbg !2944
  ret %struct._object* %59, !dbg !2944
}

; Function Attrs: nounwind uwtable
define internal i32 @deque_ass_item(%struct.dequeobject* %deque, i64 %i, %struct._object* %v) #0 {
entry:
  %retval = alloca i32, align 4
  %deque.addr = alloca %struct.dequeobject*, align 8
  %i.addr = alloca i64, align 8
  %v.addr = alloca %struct._object*, align 8
  %old_value = alloca %struct._object*, align 8
  %b = alloca %struct.BLOCK*, align 8
  %n = alloca i64, align 8
  %len = alloca i64, align 8
  %halflen = alloca i64, align 8
  %index = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !523, metadata !1242), !dbg !2945
  store i64 %i, i64* %i.addr, align 8, !tbaa !1990
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !524, metadata !1242), !dbg !2946
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !525, metadata !1242), !dbg !2947
  %0 = bitcast %struct._object** %old_value to i8*, !dbg !2948
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !2948
  call void @llvm.dbg.declare(metadata %struct._object** %old_value, metadata !526, metadata !1242), !dbg !2949
  %1 = bitcast %struct.BLOCK** %b to i8*, !dbg !2950
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !2950
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !527, metadata !1242), !dbg !2951
  %2 = bitcast i64* %n to i8*, !dbg !2952
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !2952
  call void @llvm.dbg.declare(metadata i64* %n, metadata !528, metadata !1242), !dbg !2953
  %3 = bitcast i64* %len to i8*, !dbg !2952
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !2952
  call void @llvm.dbg.declare(metadata i64* %len, metadata !529, metadata !1242), !dbg !2954
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2955, !tbaa !1246
  %5 = bitcast %struct.dequeobject* %4 to %struct.PyVarObject*, !dbg !2956
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !2957
  %6 = load i64, i64* %ob_size, align 8, !dbg !2957, !tbaa !2108
  store i64 %6, i64* %len, align 8, !dbg !2954, !tbaa !1990
  %7 = bitcast i64* %halflen to i8*, !dbg !2952
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !2952
  call void @llvm.dbg.declare(metadata i64* %halflen, metadata !530, metadata !1242), !dbg !2958
  %8 = load i64, i64* %len, align 8, !dbg !2959, !tbaa !1990
  %add = add i64 %8, 1, !dbg !2960
  %shr = ashr i64 %add, 1, !dbg !2961
  store i64 %shr, i64* %halflen, align 8, !dbg !2958, !tbaa !1990
  %9 = bitcast i64* %index to i8*, !dbg !2952
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !2952
  call void @llvm.dbg.declare(metadata i64* %index, metadata !531, metadata !1242), !dbg !2962
  %10 = load i64, i64* %i.addr, align 8, !dbg !2963, !tbaa !1990
  store i64 %10, i64* %index, align 8, !dbg !2962, !tbaa !1990
  %11 = load i64, i64* %i.addr, align 8, !dbg !2964, !tbaa !1990
  %cmp = icmp slt i64 %11, 0, !dbg !2966
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2967

lor.lhs.false:                                    ; preds = %entry
  %12 = load i64, i64* %i.addr, align 8, !dbg !2968, !tbaa !1990
  %13 = load i64, i64* %len, align 8, !dbg !2970, !tbaa !1990
  %cmp1 = icmp sge i64 %12, %13, !dbg !2971
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2972

if.then:                                          ; preds = %lor.lhs.false, %entry
  %14 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !2973, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %14, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i32 0, i32 0)), !dbg !2975
  store i32 -1, i32* %retval, !dbg !2976
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2976

if.end:                                           ; preds = %lor.lhs.false
  %15 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !2977, !tbaa !1246
  %cmp2 = icmp eq %struct._object* %15, null, !dbg !2979
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !2980

if.then.3:                                        ; preds = %if.end
  %16 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2981, !tbaa !1246
  %17 = load i64, i64* %i.addr, align 8, !dbg !2982, !tbaa !1990
  %call = call i32 @deque_del_item(%struct.dequeobject* %16, i64 %17), !dbg !2983
  store i32 %call, i32* %retval, !dbg !2984
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2984

if.end.4:                                         ; preds = %if.end
  %18 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2985, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %18, i32 0, i32 3, !dbg !2986
  %19 = load i64, i64* %leftindex, align 8, !dbg !2986, !tbaa !1989
  %20 = load i64, i64* %i.addr, align 8, !dbg !2987, !tbaa !1990
  %add5 = add i64 %20, %19, !dbg !2987
  store i64 %add5, i64* %i.addr, align 8, !dbg !2987, !tbaa !1990
  %21 = load i64, i64* %i.addr, align 8, !dbg !2988, !tbaa !1990
  %div = sdiv i64 %21, 62, !dbg !2989
  store i64 %div, i64* %n, align 8, !dbg !2990, !tbaa !1990
  %22 = load i64, i64* %i.addr, align 8, !dbg !2991, !tbaa !1990
  %rem = srem i64 %22, 62, !dbg !2991
  store i64 %rem, i64* %i.addr, align 8, !dbg !2991, !tbaa !1990
  %23 = load i64, i64* %index, align 8, !dbg !2992, !tbaa !1990
  %24 = load i64, i64* %halflen, align 8, !dbg !2994, !tbaa !1990
  %cmp6 = icmp sle i64 %23, %24, !dbg !2995
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !2996

if.then.7:                                        ; preds = %if.end.4
  %25 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !2997, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %25, i32 0, i32 1, !dbg !2999
  %26 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !2999, !tbaa !1872
  store %struct.BLOCK* %26, %struct.BLOCK** %b, align 8, !dbg !3000, !tbaa !1246
  br label %while.cond, !dbg !3001

while.cond:                                       ; preds = %while.body, %if.then.7
  %27 = load i64, i64* %n, align 8, !dbg !3002, !tbaa !1990
  %dec = add i64 %27, -1, !dbg !3002
  store i64 %dec, i64* %n, align 8, !dbg !3002, !tbaa !1990
  %tobool = icmp ne i64 %27, 0, !dbg !3001
  br i1 %tobool, label %while.body, label %while.end, !dbg !3001

while.body:                                       ; preds = %while.cond
  %28 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3005, !tbaa !1246
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %28, i32 0, i32 2, !dbg !3006
  %29 = load %struct.BLOCK*, %struct.BLOCK** %rightlink, align 8, !dbg !3006, !tbaa !2048
  store %struct.BLOCK* %29, %struct.BLOCK** %b, align 8, !dbg !3007, !tbaa !1246
  br label %while.cond, !dbg !3001

while.end:                                        ; preds = %while.cond
  br label %if.end.17, !dbg !3008

if.else:                                          ; preds = %if.end.4
  %30 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3009, !tbaa !1246
  %leftindex8 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %30, i32 0, i32 3, !dbg !3011
  %31 = load i64, i64* %leftindex8, align 8, !dbg !3011, !tbaa !1989
  %32 = load i64, i64* %len, align 8, !dbg !3012, !tbaa !1990
  %add9 = add i64 %31, %32, !dbg !3013
  %sub = sub i64 %add9, 1, !dbg !3014
  %div10 = sdiv i64 %sub, 62, !dbg !3015
  %33 = load i64, i64* %n, align 8, !dbg !3016, !tbaa !1990
  %sub11 = sub i64 %div10, %33, !dbg !3017
  store i64 %sub11, i64* %n, align 8, !dbg !3018, !tbaa !1990
  %34 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3019, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %34, i32 0, i32 2, !dbg !3020
  %35 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3020, !tbaa !1888
  store %struct.BLOCK* %35, %struct.BLOCK** %b, align 8, !dbg !3021, !tbaa !1246
  br label %while.cond.12, !dbg !3022

while.cond.12:                                    ; preds = %while.body.15, %if.else
  %36 = load i64, i64* %n, align 8, !dbg !3023, !tbaa !1990
  %dec13 = add i64 %36, -1, !dbg !3023
  store i64 %dec13, i64* %n, align 8, !dbg !3023, !tbaa !1990
  %tobool14 = icmp ne i64 %36, 0, !dbg !3022
  br i1 %tobool14, label %while.body.15, label %while.end.16, !dbg !3022

while.body.15:                                    ; preds = %while.cond.12
  %37 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3026, !tbaa !1246
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %37, i32 0, i32 0, !dbg !3027
  %38 = load %struct.BLOCK*, %struct.BLOCK** %leftlink, align 8, !dbg !3027, !tbaa !2933
  store %struct.BLOCK* %38, %struct.BLOCK** %b, align 8, !dbg !3028, !tbaa !1246
  br label %while.cond.12, !dbg !3022

while.end.16:                                     ; preds = %while.cond.12
  br label %if.end.17

if.end.17:                                        ; preds = %while.end.16, %while.end
  %39 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !3029, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0, !dbg !3030
  %40 = load i64, i64* %ob_refcnt, align 8, !dbg !3031, !tbaa !1261
  %inc = add i64 %40, 1, !dbg !3031
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !3031, !tbaa !1261
  %41 = load i64, i64* %i.addr, align 8, !dbg !3032, !tbaa !1990
  %42 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3033, !tbaa !1246
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %42, i32 0, i32 1, !dbg !3034
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %41, !dbg !3033
  %43 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !3033, !tbaa !1246
  store %struct._object* %43, %struct._object** %old_value, align 8, !dbg !3035, !tbaa !1246
  %44 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !3036, !tbaa !1246
  %45 = load i64, i64* %i.addr, align 8, !dbg !3037, !tbaa !1990
  %46 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3038, !tbaa !1246
  %data18 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %46, i32 0, i32 1, !dbg !3039
  %arrayidx19 = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data18, i32 0, i64 %45, !dbg !3038
  store %struct._object* %44, %struct._object** %arrayidx19, align 8, !dbg !3040, !tbaa !1246
  br label %do.body, !dbg !3041

do.body:                                          ; preds = %if.end.17
  %47 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3042
  call void @llvm.lifetime.start(i64 8, i8* %47) #1, !dbg !3042
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !532, metadata !1242), !dbg !3044
  %48 = load %struct._object*, %struct._object** %old_value, align 8, !dbg !3045, !tbaa !1246
  store %struct._object* %48, %struct._object** %_py_decref_tmp, align 8, !dbg !3044, !tbaa !1246
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3046, !tbaa !1246
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0, !dbg !3048
  %50 = load i64, i64* %ob_refcnt20, align 8, !dbg !3049, !tbaa !1261
  %dec21 = add i64 %50, -1, !dbg !3049
  store i64 %dec21, i64* %ob_refcnt20, align 8, !dbg !3049, !tbaa !1261
  %cmp22 = icmp ne i64 %dec21, 0, !dbg !3050
  br i1 %cmp22, label %if.then.23, label %if.else.24, !dbg !3051

if.then.23:                                       ; preds = %do.body
  br label %if.end.25, !dbg !3052

if.else.24:                                       ; preds = %do.body
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3054, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1, !dbg !3056
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3056, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4, !dbg !3057
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3057, !tbaa !1444
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3058, !tbaa !1246
  call void %53(%struct._object* %54), !dbg !3059
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.24, %if.then.23
  %55 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3060
  call void @llvm.lifetime.end(i64 8, i8* %55) #1, !dbg !3060
  br label %do.cond, !dbg !3062

do.cond:                                          ; preds = %if.end.25
  br label %do.end, !dbg !3063

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval, !dbg !3065
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3065

cleanup:                                          ; preds = %do.end, %if.then.3, %if.then
  %56 = bitcast i64* %index to i8*, !dbg !3066
  call void @llvm.lifetime.end(i64 8, i8* %56) #1, !dbg !3066
  %57 = bitcast i64* %halflen to i8*, !dbg !3066
  call void @llvm.lifetime.end(i64 8, i8* %57) #1, !dbg !3066
  %58 = bitcast i64* %len to i8*, !dbg !3066
  call void @llvm.lifetime.end(i64 8, i8* %58) #1, !dbg !3066
  %59 = bitcast i64* %n to i8*, !dbg !3066
  call void @llvm.lifetime.end(i64 8, i8* %59) #1, !dbg !3066
  %60 = bitcast %struct.BLOCK** %b to i8*, !dbg !3066
  call void @llvm.lifetime.end(i64 8, i8* %60) #1, !dbg !3066
  %61 = bitcast %struct._object** %old_value to i8*, !dbg !3066
  call void @llvm.lifetime.end(i64 8, i8* %61) #1, !dbg !3066
  %62 = load i32, i32* %retval, !dbg !3066
  ret i32 %62, !dbg !3066
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_inplace_concat(%struct.dequeobject* %deque, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %other.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !581, metadata !1242), !dbg !3067
  store %struct._object* %other, %struct._object** %other.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %other.addr, metadata !582, metadata !1242), !dbg !3068
  %0 = bitcast %struct._object** %result to i8*, !dbg !3069
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3069
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !583, metadata !1242), !dbg !3070
  %1 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3071, !tbaa !1246
  %2 = load %struct._object*, %struct._object** %other.addr, align 8, !dbg !3072, !tbaa !1246
  %call = call %struct._object* @deque_extend(%struct.dequeobject* %1, %struct._object* %2), !dbg !3073
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !3074, !tbaa !1246
  %3 = load %struct._object*, %struct._object** %result, align 8, !dbg !3075, !tbaa !1246
  %cmp = icmp eq %struct._object* %3, null, !dbg !3077
  br i1 %cmp, label %if.then, label %if.end, !dbg !3078

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %result, align 8, !dbg !3079, !tbaa !1246
  store %struct._object* %4, %struct._object** %retval, !dbg !3080
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3080

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !3081

do.body:                                          ; preds = %if.end
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3082
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !3082
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !584, metadata !1242), !dbg !3084
  %6 = load %struct._object*, %struct._object** %result, align 8, !dbg !3085, !tbaa !1246
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !3084, !tbaa !1246
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3086, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !3088
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !3089, !tbaa !1261
  %dec = add i64 %8, -1, !dbg !3089
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3089, !tbaa !1261
  %cmp1 = icmp ne i64 %dec, 0, !dbg !3090
  br i1 %cmp1, label %if.then.2, label %if.else, !dbg !3091

if.then.2:                                        ; preds = %do.body
  br label %if.end.3, !dbg !3092

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3094, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !3096
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3096, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !3097
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3097, !tbaa !1444
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3098, !tbaa !1246
  call void %11(%struct._object* %12), !dbg !3099
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3100
  call void @llvm.lifetime.end(i64 8, i8* %13) #1, !dbg !3100
  br label %do.cond, !dbg !3102

do.cond:                                          ; preds = %if.end.3
  br label %do.end, !dbg !3103

do.end:                                           ; preds = %do.cond
  %14 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3105, !tbaa !1246
  %15 = bitcast %struct.dequeobject* %14 to %struct._object*, !dbg !3106
  %ob_refcnt4 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0, !dbg !3107
  %16 = load i64, i64* %ob_refcnt4, align 8, !dbg !3108, !tbaa !1261
  %inc = add i64 %16, 1, !dbg !3108
  store i64 %inc, i64* %ob_refcnt4, align 8, !dbg !3108, !tbaa !1261
  %17 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3109, !tbaa !1246
  %18 = bitcast %struct.dequeobject* %17 to %struct._object*, !dbg !3110
  store %struct._object* %18, %struct._object** %retval, !dbg !3111
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3111

cleanup:                                          ; preds = %do.end, %if.then
  %19 = bitcast %struct._object** %result to i8*, !dbg !3112
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !3112
  %20 = load %struct._object*, %struct._object** %retval, !dbg !3112
  ret %struct._object* %20, !dbg !3112
}

declare void @PyErr_SetString(%struct._object*, i8*) #3

; Function Attrs: nounwind uwtable
define internal i32 @deque_del_item(%struct.dequeobject* %deque, i64 %i) #0 {
entry:
  %retval = alloca i32, align 4
  %deque.addr = alloca %struct.dequeobject*, align 8
  %i.addr = alloca i64, align 8
  %item = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !538, metadata !1242), !dbg !3113
  store i64 %i, i64* %i.addr, align 8, !tbaa !1990
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !539, metadata !1242), !dbg !3114
  %0 = bitcast %struct._object** %item to i8*, !dbg !3115
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3115
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !540, metadata !1242), !dbg !3116
  %1 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3117, !tbaa !1246
  %2 = load i64, i64* %i.addr, align 8, !dbg !3119, !tbaa !1990
  %sub = sub i64 0, %2, !dbg !3120
  %call = call i32 @_deque_rotate(%struct.dequeobject* %1, i64 %sub), !dbg !3121
  %cmp = icmp eq i32 %call, -1, !dbg !3122
  br i1 %cmp, label %if.then, label %if.end, !dbg !3123

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, !dbg !3124
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3124

if.end:                                           ; preds = %entry
  %3 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3125, !tbaa !1246
  %call1 = call %struct._object* @deque_popleft(%struct.dequeobject* %3, %struct._object* null), !dbg !3126
  store %struct._object* %call1, %struct._object** %item, align 8, !dbg !3127, !tbaa !1246
  br label %do.body, !dbg !3128

do.body:                                          ; preds = %if.end
  %4 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3129
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !3129
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !541, metadata !1242), !dbg !3131
  %5 = load %struct._object*, %struct._object** %item, align 8, !dbg !3132, !tbaa !1246
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8, !dbg !3131, !tbaa !1246
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3133, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0, !dbg !3135
  %7 = load i64, i64* %ob_refcnt, align 8, !dbg !3136, !tbaa !1261
  %dec = add i64 %7, -1, !dbg !3136
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3136, !tbaa !1261
  %cmp2 = icmp ne i64 %dec, 0, !dbg !3137
  br i1 %cmp2, label %if.then.3, label %if.else, !dbg !3138

if.then.3:                                        ; preds = %do.body
  br label %if.end.4, !dbg !3139

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3141, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !3143
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3143, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4, !dbg !3144
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3144, !tbaa !1444
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3145, !tbaa !1246
  call void %10(%struct._object* %11), !dbg !3146
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  %12 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3147
  call void @llvm.lifetime.end(i64 8, i8* %12) #1, !dbg !3147
  br label %do.cond, !dbg !3149

do.cond:                                          ; preds = %if.end.4
  br label %do.end, !dbg !3150

do.end:                                           ; preds = %do.cond
  %13 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3152, !tbaa !1246
  %14 = load i64, i64* %i.addr, align 8, !dbg !3153, !tbaa !1990
  %call5 = call i32 @_deque_rotate(%struct.dequeobject* %13, i64 %14), !dbg !3154
  store i32 %call5, i32* %retval, !dbg !3155
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3155

cleanup:                                          ; preds = %do.end, %if.then
  %15 = bitcast %struct._object** %item to i8*, !dbg !3156
  call void @llvm.lifetime.end(i64 8, i8* %15) #1, !dbg !3156
  %16 = load i32, i32* %retval, !dbg !3156
  ret i32 %16, !dbg !3156
}

; Function Attrs: nounwind uwtable
define internal i32 @_deque_rotate(%struct.dequeobject* %deque, i64 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %deque.addr = alloca %struct.dequeobject*, align 8
  %n.addr = alloca i64, align 8
  %b = alloca %struct.BLOCK*, align 8
  %leftblock = alloca %struct.BLOCK*, align 8
  %rightblock = alloca %struct.BLOCK*, align 8
  %leftindex = alloca i64, align 8
  %rightindex = alloca i64, align 8
  %len = alloca i64, align 8
  %halflen = alloca i64, align 8
  %rv = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %src = alloca %struct._object**, align 8
  %dest = alloca %struct._object**, align 8
  %m = alloca i64, align 8
  %src61 = alloca %struct._object**, align 8
  %dest62 = alloca %struct._object**, align 8
  %m63 = alloca i64, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !545, metadata !1242), !dbg !3157
  store i64 %n, i64* %n.addr, align 8, !tbaa !1990
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !546, metadata !1242), !dbg !3158
  %0 = bitcast %struct.BLOCK** %b to i8*, !dbg !3159
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3159
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !547, metadata !1242), !dbg !3160
  store %struct.BLOCK* null, %struct.BLOCK** %b, align 8, !dbg !3160, !tbaa !1246
  %1 = bitcast %struct.BLOCK** %leftblock to i8*, !dbg !3161
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !3161
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %leftblock, metadata !548, metadata !1242), !dbg !3162
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3163, !tbaa !1246
  %leftblock1 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %2, i32 0, i32 1, !dbg !3164
  %3 = load %struct.BLOCK*, %struct.BLOCK** %leftblock1, align 8, !dbg !3164, !tbaa !1872
  store %struct.BLOCK* %3, %struct.BLOCK** %leftblock, align 8, !dbg !3162, !tbaa !1246
  %4 = bitcast %struct.BLOCK** %rightblock to i8*, !dbg !3165
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !3165
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %rightblock, metadata !549, metadata !1242), !dbg !3166
  %5 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3167, !tbaa !1246
  %rightblock2 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %5, i32 0, i32 2, !dbg !3168
  %6 = load %struct.BLOCK*, %struct.BLOCK** %rightblock2, align 8, !dbg !3168, !tbaa !1888
  store %struct.BLOCK* %6, %struct.BLOCK** %rightblock, align 8, !dbg !3166, !tbaa !1246
  %7 = bitcast i64* %leftindex to i8*, !dbg !3169
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !3169
  call void @llvm.dbg.declare(metadata i64* %leftindex, metadata !550, metadata !1242), !dbg !3170
  %8 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3171, !tbaa !1246
  %leftindex3 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %8, i32 0, i32 3, !dbg !3172
  %9 = load i64, i64* %leftindex3, align 8, !dbg !3172, !tbaa !1989
  store i64 %9, i64* %leftindex, align 8, !dbg !3170, !tbaa !1990
  %10 = bitcast i64* %rightindex to i8*, !dbg !3173
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !3173
  call void @llvm.dbg.declare(metadata i64* %rightindex, metadata !551, metadata !1242), !dbg !3174
  %11 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3175, !tbaa !1246
  %rightindex4 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %11, i32 0, i32 4, !dbg !3176
  %12 = load i64, i64* %rightindex4, align 8, !dbg !3176, !tbaa !2060
  store i64 %12, i64* %rightindex, align 8, !dbg !3174, !tbaa !1990
  %13 = bitcast i64* %len to i8*, !dbg !3177
  call void @llvm.lifetime.start(i64 8, i8* %13) #1, !dbg !3177
  call void @llvm.dbg.declare(metadata i64* %len, metadata !552, metadata !1242), !dbg !3178
  %14 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3179, !tbaa !1246
  %15 = bitcast %struct.dequeobject* %14 to %struct.PyVarObject*, !dbg !3180
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1, !dbg !3181
  %16 = load i64, i64* %ob_size, align 8, !dbg !3181, !tbaa !2108
  store i64 %16, i64* %len, align 8, !dbg !3178, !tbaa !1990
  %17 = bitcast i64* %halflen to i8*, !dbg !3177
  call void @llvm.lifetime.start(i64 8, i8* %17) #1, !dbg !3177
  call void @llvm.dbg.declare(metadata i64* %halflen, metadata !553, metadata !1242), !dbg !3182
  %18 = load i64, i64* %len, align 8, !dbg !3183, !tbaa !1990
  %shr = ashr i64 %18, 1, !dbg !3184
  store i64 %shr, i64* %halflen, align 8, !dbg !3182, !tbaa !1990
  %19 = bitcast i32* %rv to i8*, !dbg !3185
  call void @llvm.lifetime.start(i64 4, i8* %19) #1, !dbg !3185
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !554, metadata !1242), !dbg !3186
  store i32 -1, i32* %rv, align 4, !dbg !3186, !tbaa !1906
  %20 = load i64, i64* %len, align 8, !dbg !3187, !tbaa !1990
  %cmp = icmp sle i64 %20, 1, !dbg !3189
  br i1 %cmp, label %if.then, label %if.end, !dbg !3190

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !3191
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3191

if.end:                                           ; preds = %entry
  %21 = load i64, i64* %n.addr, align 8, !dbg !3192, !tbaa !1990
  %22 = load i64, i64* %halflen, align 8, !dbg !3194, !tbaa !1990
  %cmp5 = icmp sgt i64 %21, %22, !dbg !3195
  br i1 %cmp5, label %if.then.7, label %lor.lhs.false, !dbg !3196

lor.lhs.false:                                    ; preds = %if.end
  %23 = load i64, i64* %n.addr, align 8, !dbg !3197, !tbaa !1990
  %24 = load i64, i64* %halflen, align 8, !dbg !3199, !tbaa !1990
  %sub = sub i64 0, %24, !dbg !3200
  %cmp6 = icmp slt i64 %23, %sub, !dbg !3201
  br i1 %cmp6, label %if.then.7, label %if.end.16, !dbg !3202

if.then.7:                                        ; preds = %lor.lhs.false, %if.end
  %25 = load i64, i64* %len, align 8, !dbg !3203, !tbaa !1990
  %26 = load i64, i64* %n.addr, align 8, !dbg !3205, !tbaa !1990
  %rem = srem i64 %26, %25, !dbg !3205
  store i64 %rem, i64* %n.addr, align 8, !dbg !3205, !tbaa !1990
  %27 = load i64, i64* %n.addr, align 8, !dbg !3206, !tbaa !1990
  %28 = load i64, i64* %halflen, align 8, !dbg !3208, !tbaa !1990
  %cmp8 = icmp sgt i64 %27, %28, !dbg !3209
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !3210

if.then.9:                                        ; preds = %if.then.7
  %29 = load i64, i64* %len, align 8, !dbg !3211, !tbaa !1990
  %30 = load i64, i64* %n.addr, align 8, !dbg !3212, !tbaa !1990
  %sub10 = sub i64 %30, %29, !dbg !3212
  store i64 %sub10, i64* %n.addr, align 8, !dbg !3212, !tbaa !1990
  br label %if.end.15, !dbg !3213

if.else:                                          ; preds = %if.then.7
  %31 = load i64, i64* %n.addr, align 8, !dbg !3214, !tbaa !1990
  %32 = load i64, i64* %halflen, align 8, !dbg !3216, !tbaa !1990
  %sub11 = sub i64 0, %32, !dbg !3217
  %cmp12 = icmp slt i64 %31, %sub11, !dbg !3218
  br i1 %cmp12, label %if.then.13, label %if.end.14, !dbg !3219

if.then.13:                                       ; preds = %if.else
  %33 = load i64, i64* %len, align 8, !dbg !3220, !tbaa !1990
  %34 = load i64, i64* %n.addr, align 8, !dbg !3221, !tbaa !1990
  %add = add i64 %34, %33, !dbg !3221
  store i64 %add, i64* %n.addr, align 8, !dbg !3221, !tbaa !1990
  br label %if.end.14, !dbg !3222

if.end.14:                                        ; preds = %if.then.13, %if.else
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.then.9
  br label %if.end.16, !dbg !3223

if.end.16:                                        ; preds = %if.end.15, %lor.lhs.false
  %35 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3224, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %35, i32 0, i32 5, !dbg !3225
  %36 = load i64, i64* %state, align 8, !dbg !3226, !tbaa !2616
  %inc = add i64 %36, 1, !dbg !3226
  store i64 %inc, i64* %state, align 8, !dbg !3226, !tbaa !2616
  br label %while.cond, !dbg !3227

while.cond:                                       ; preds = %if.end.45, %if.end.16
  %37 = load i64, i64* %n.addr, align 8, !dbg !3228, !tbaa !1990
  %cmp17 = icmp sgt i64 %37, 0, !dbg !3231
  br i1 %cmp17, label %while.body, label %while.end, !dbg !3227

while.body:                                       ; preds = %while.cond
  %38 = load i64, i64* %leftindex, align 8, !dbg !3232, !tbaa !1990
  %cmp18 = icmp eq i64 %38, 0, !dbg !3234
  br i1 %cmp18, label %if.then.19, label %if.end.26, !dbg !3235

if.then.19:                                       ; preds = %while.body
  %39 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3236, !tbaa !1246
  %cmp20 = icmp eq %struct.BLOCK* %39, null, !dbg !3239
  br i1 %cmp20, label %if.then.21, label %if.end.25, !dbg !3240

if.then.21:                                       ; preds = %if.then.19
  %40 = load i64, i64* %len, align 8, !dbg !3241, !tbaa !1990
  %call = call %struct.BLOCK* @newblock(i64 %40), !dbg !3243
  store %struct.BLOCK* %call, %struct.BLOCK** %b, align 8, !dbg !3244, !tbaa !1246
  %41 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3245, !tbaa !1246
  %cmp22 = icmp eq %struct.BLOCK* %41, null, !dbg !3247
  br i1 %cmp22, label %if.then.23, label %if.end.24, !dbg !3248

if.then.23:                                       ; preds = %if.then.21
  br label %done, !dbg !3249

if.end.24:                                        ; preds = %if.then.21
  br label %if.end.25, !dbg !3250

if.end.25:                                        ; preds = %if.end.24, %if.then.19
  %42 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !3251, !tbaa !1246
  %43 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3252, !tbaa !1246
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %43, i32 0, i32 2, !dbg !3253
  store %struct.BLOCK* %42, %struct.BLOCK** %rightlink, align 8, !dbg !3254, !tbaa !2048
  %44 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3255, !tbaa !1246
  %45 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !3256, !tbaa !1246
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %45, i32 0, i32 0, !dbg !3257
  store %struct.BLOCK* %44, %struct.BLOCK** %leftlink, align 8, !dbg !3258, !tbaa !2933
  %46 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3259, !tbaa !1246
  store %struct.BLOCK* %46, %struct.BLOCK** %leftblock, align 8, !dbg !3260, !tbaa !1246
  store i64 62, i64* %leftindex, align 8, !dbg !3261, !tbaa !1990
  store %struct.BLOCK* null, %struct.BLOCK** %b, align 8, !dbg !3262, !tbaa !1246
  br label %if.end.26, !dbg !3263

if.end.26:                                        ; preds = %if.end.25, %while.body
  %47 = bitcast %struct._object*** %src to i8*, !dbg !3264
  call void @llvm.lifetime.start(i64 8, i8* %47) #1, !dbg !3264
  call void @llvm.dbg.declare(metadata %struct._object*** %src, metadata !555, metadata !1242), !dbg !3265
  %48 = bitcast %struct._object*** %dest to i8*, !dbg !3264
  call void @llvm.lifetime.start(i64 8, i8* %48) #1, !dbg !3264
  call void @llvm.dbg.declare(metadata %struct._object*** %dest, metadata !558, metadata !1242), !dbg !3266
  %49 = bitcast i64* %m to i8*, !dbg !3267
  call void @llvm.lifetime.start(i64 8, i8* %49) #1, !dbg !3267
  call void @llvm.dbg.declare(metadata i64* %m, metadata !559, metadata !1242), !dbg !3268
  %50 = load i64, i64* %n.addr, align 8, !dbg !3269, !tbaa !1990
  store i64 %50, i64* %m, align 8, !dbg !3268, !tbaa !1990
  %51 = load i64, i64* %m, align 8, !dbg !3270, !tbaa !1990
  %52 = load i64, i64* %rightindex, align 8, !dbg !3272, !tbaa !1990
  %add27 = add i64 %52, 1, !dbg !3273
  %cmp28 = icmp sgt i64 %51, %add27, !dbg !3274
  br i1 %cmp28, label %if.then.29, label %if.end.31, !dbg !3275

if.then.29:                                       ; preds = %if.end.26
  %53 = load i64, i64* %rightindex, align 8, !dbg !3276, !tbaa !1990
  %add30 = add i64 %53, 1, !dbg !3277
  store i64 %add30, i64* %m, align 8, !dbg !3278, !tbaa !1990
  br label %if.end.31, !dbg !3279

if.end.31:                                        ; preds = %if.then.29, %if.end.26
  %54 = load i64, i64* %m, align 8, !dbg !3280, !tbaa !1990
  %55 = load i64, i64* %leftindex, align 8, !dbg !3282, !tbaa !1990
  %cmp32 = icmp sgt i64 %54, %55, !dbg !3283
  br i1 %cmp32, label %if.then.33, label %if.end.34, !dbg !3284

if.then.33:                                       ; preds = %if.end.31
  %56 = load i64, i64* %leftindex, align 8, !dbg !3285, !tbaa !1990
  store i64 %56, i64* %m, align 8, !dbg !3286, !tbaa !1990
  br label %if.end.34, !dbg !3287

if.end.34:                                        ; preds = %if.then.33, %if.end.31
  %57 = load i64, i64* %rightindex, align 8, !dbg !3288, !tbaa !1990
  %58 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3289, !tbaa !1246
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %58, i32 0, i32 1, !dbg !3290
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %57, !dbg !3289
  store %struct._object** %arrayidx, %struct._object*** %src, align 8, !dbg !3291, !tbaa !1246
  %59 = load i64, i64* %leftindex, align 8, !dbg !3292, !tbaa !1990
  %sub35 = sub i64 %59, 1, !dbg !3293
  %60 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !3294, !tbaa !1246
  %data36 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %60, i32 0, i32 1, !dbg !3295
  %arrayidx37 = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data36, i32 0, i64 %sub35, !dbg !3294
  store %struct._object** %arrayidx37, %struct._object*** %dest, align 8, !dbg !3296, !tbaa !1246
  %61 = load i64, i64* %m, align 8, !dbg !3297, !tbaa !1990
  %62 = load i64, i64* %rightindex, align 8, !dbg !3298, !tbaa !1990
  %sub38 = sub i64 %62, %61, !dbg !3298
  store i64 %sub38, i64* %rightindex, align 8, !dbg !3298, !tbaa !1990
  %63 = load i64, i64* %m, align 8, !dbg !3299, !tbaa !1990
  %64 = load i64, i64* %leftindex, align 8, !dbg !3300, !tbaa !1990
  %sub39 = sub i64 %64, %63, !dbg !3300
  store i64 %sub39, i64* %leftindex, align 8, !dbg !3300, !tbaa !1990
  %65 = load i64, i64* %m, align 8, !dbg !3301, !tbaa !1990
  %66 = load i64, i64* %n.addr, align 8, !dbg !3302, !tbaa !1990
  %sub40 = sub i64 %66, %65, !dbg !3302
  store i64 %sub40, i64* %n.addr, align 8, !dbg !3302, !tbaa !1990
  br label %do.body, !dbg !3303

do.body:                                          ; preds = %do.cond, %if.end.34
  %67 = load %struct._object**, %struct._object*** %src, align 8, !dbg !3304, !tbaa !1246
  %incdec.ptr = getelementptr %struct._object*, %struct._object** %67, i32 -1, !dbg !3304
  store %struct._object** %incdec.ptr, %struct._object*** %src, align 8, !dbg !3304, !tbaa !1246
  %68 = load %struct._object*, %struct._object** %67, align 8, !dbg !3306, !tbaa !1246
  %69 = load %struct._object**, %struct._object*** %dest, align 8, !dbg !3307, !tbaa !1246
  %incdec.ptr41 = getelementptr %struct._object*, %struct._object** %69, i32 -1, !dbg !3307
  store %struct._object** %incdec.ptr41, %struct._object*** %dest, align 8, !dbg !3307, !tbaa !1246
  store %struct._object* %68, %struct._object** %69, align 8, !dbg !3308, !tbaa !1246
  br label %do.cond, !dbg !3309

do.cond:                                          ; preds = %do.body
  %70 = load i64, i64* %m, align 8, !dbg !3310, !tbaa !1990
  %dec = add i64 %70, -1, !dbg !3310
  store i64 %dec, i64* %m, align 8, !dbg !3310, !tbaa !1990
  %tobool = icmp ne i64 %dec, 0, !dbg !3309
  br i1 %tobool, label %do.body, label %do.end, !dbg !3309

do.end:                                           ; preds = %do.cond
  %71 = bitcast i64* %m to i8*, !dbg !3312
  call void @llvm.lifetime.end(i64 8, i8* %71) #1, !dbg !3312
  %72 = bitcast %struct._object*** %dest to i8*, !dbg !3312
  call void @llvm.lifetime.end(i64 8, i8* %72) #1, !dbg !3312
  %73 = bitcast %struct._object*** %src to i8*, !dbg !3312
  call void @llvm.lifetime.end(i64 8, i8* %73) #1, !dbg !3312
  %74 = load i64, i64* %rightindex, align 8, !dbg !3313, !tbaa !1990
  %cmp42 = icmp eq i64 %74, -1, !dbg !3315
  br i1 %cmp42, label %if.then.43, label %if.end.45, !dbg !3316

if.then.43:                                       ; preds = %do.end
  %75 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3317, !tbaa !1246
  store %struct.BLOCK* %75, %struct.BLOCK** %b, align 8, !dbg !3319, !tbaa !1246
  %76 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3320, !tbaa !1246
  %leftlink44 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %76, i32 0, i32 0, !dbg !3321
  %77 = load %struct.BLOCK*, %struct.BLOCK** %leftlink44, align 8, !dbg !3321, !tbaa !2933
  store %struct.BLOCK* %77, %struct.BLOCK** %rightblock, align 8, !dbg !3322, !tbaa !1246
  store i64 61, i64* %rightindex, align 8, !dbg !3323, !tbaa !1990
  br label %if.end.45, !dbg !3324

if.end.45:                                        ; preds = %if.then.43, %do.end
  br label %while.cond, !dbg !3227

while.end:                                        ; preds = %while.cond
  br label %while.cond.46, !dbg !3325

while.cond.46:                                    ; preds = %if.end.93, %while.end
  %78 = load i64, i64* %n.addr, align 8, !dbg !3326, !tbaa !1990
  %cmp47 = icmp slt i64 %78, 0, !dbg !3327
  br i1 %cmp47, label %while.body.48, label %while.end.94, !dbg !3325

while.body.48:                                    ; preds = %while.cond.46
  %79 = load i64, i64* %rightindex, align 8, !dbg !3328, !tbaa !1990
  %cmp49 = icmp eq i64 %79, 61, !dbg !3330
  br i1 %cmp49, label %if.then.50, label %if.end.60, !dbg !3331

if.then.50:                                       ; preds = %while.body.48
  %80 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3332, !tbaa !1246
  %cmp51 = icmp eq %struct.BLOCK* %80, null, !dbg !3335
  br i1 %cmp51, label %if.then.52, label %if.end.57, !dbg !3336

if.then.52:                                       ; preds = %if.then.50
  %81 = load i64, i64* %len, align 8, !dbg !3337, !tbaa !1990
  %call53 = call %struct.BLOCK* @newblock(i64 %81), !dbg !3339
  store %struct.BLOCK* %call53, %struct.BLOCK** %b, align 8, !dbg !3340, !tbaa !1246
  %82 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3341, !tbaa !1246
  %cmp54 = icmp eq %struct.BLOCK* %82, null, !dbg !3343
  br i1 %cmp54, label %if.then.55, label %if.end.56, !dbg !3344

if.then.55:                                       ; preds = %if.then.52
  br label %done, !dbg !3345

if.end.56:                                        ; preds = %if.then.52
  br label %if.end.57, !dbg !3346

if.end.57:                                        ; preds = %if.end.56, %if.then.50
  %83 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3347, !tbaa !1246
  %84 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3348, !tbaa !1246
  %leftlink58 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %84, i32 0, i32 0, !dbg !3349
  store %struct.BLOCK* %83, %struct.BLOCK** %leftlink58, align 8, !dbg !3350, !tbaa !2933
  %85 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3351, !tbaa !1246
  %86 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3352, !tbaa !1246
  %rightlink59 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %86, i32 0, i32 2, !dbg !3353
  store %struct.BLOCK* %85, %struct.BLOCK** %rightlink59, align 8, !dbg !3354, !tbaa !2048
  %87 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3355, !tbaa !1246
  store %struct.BLOCK* %87, %struct.BLOCK** %rightblock, align 8, !dbg !3356, !tbaa !1246
  store i64 -1, i64* %rightindex, align 8, !dbg !3357, !tbaa !1990
  store %struct.BLOCK* null, %struct.BLOCK** %b, align 8, !dbg !3358, !tbaa !1246
  br label %if.end.60, !dbg !3359

if.end.60:                                        ; preds = %if.end.57, %while.body.48
  %88 = bitcast %struct._object*** %src61 to i8*, !dbg !3360
  call void @llvm.lifetime.start(i64 8, i8* %88) #1, !dbg !3360
  call void @llvm.dbg.declare(metadata %struct._object*** %src61, metadata !560, metadata !1242), !dbg !3361
  %89 = bitcast %struct._object*** %dest62 to i8*, !dbg !3360
  call void @llvm.lifetime.start(i64 8, i8* %89) #1, !dbg !3360
  call void @llvm.dbg.declare(metadata %struct._object*** %dest62, metadata !563, metadata !1242), !dbg !3362
  %90 = bitcast i64* %m63 to i8*, !dbg !3363
  call void @llvm.lifetime.start(i64 8, i8* %90) #1, !dbg !3363
  call void @llvm.dbg.declare(metadata i64* %m63, metadata !564, metadata !1242), !dbg !3364
  %91 = load i64, i64* %n.addr, align 8, !dbg !3365, !tbaa !1990
  %sub64 = sub i64 0, %91, !dbg !3366
  store i64 %sub64, i64* %m63, align 8, !dbg !3364, !tbaa !1990
  %92 = load i64, i64* %m63, align 8, !dbg !3367, !tbaa !1990
  %93 = load i64, i64* %leftindex, align 8, !dbg !3369, !tbaa !1990
  %sub65 = sub i64 62, %93, !dbg !3370
  %cmp66 = icmp sgt i64 %92, %sub65, !dbg !3371
  br i1 %cmp66, label %if.then.67, label %if.end.69, !dbg !3372

if.then.67:                                       ; preds = %if.end.60
  %94 = load i64, i64* %leftindex, align 8, !dbg !3373, !tbaa !1990
  %sub68 = sub i64 62, %94, !dbg !3374
  store i64 %sub68, i64* %m63, align 8, !dbg !3375, !tbaa !1990
  br label %if.end.69, !dbg !3376

if.end.69:                                        ; preds = %if.then.67, %if.end.60
  %95 = load i64, i64* %m63, align 8, !dbg !3377, !tbaa !1990
  %96 = load i64, i64* %rightindex, align 8, !dbg !3379, !tbaa !1990
  %sub70 = sub i64 61, %96, !dbg !3380
  %cmp71 = icmp sgt i64 %95, %sub70, !dbg !3381
  br i1 %cmp71, label %if.then.72, label %if.end.74, !dbg !3382

if.then.72:                                       ; preds = %if.end.69
  %97 = load i64, i64* %rightindex, align 8, !dbg !3383, !tbaa !1990
  %sub73 = sub i64 61, %97, !dbg !3384
  store i64 %sub73, i64* %m63, align 8, !dbg !3385, !tbaa !1990
  br label %if.end.74, !dbg !3386

if.end.74:                                        ; preds = %if.then.72, %if.end.69
  %98 = load i64, i64* %leftindex, align 8, !dbg !3387, !tbaa !1990
  %99 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !3388, !tbaa !1246
  %data75 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %99, i32 0, i32 1, !dbg !3389
  %arrayidx76 = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data75, i32 0, i64 %98, !dbg !3388
  store %struct._object** %arrayidx76, %struct._object*** %src61, align 8, !dbg !3390, !tbaa !1246
  %100 = load i64, i64* %rightindex, align 8, !dbg !3391, !tbaa !1990
  %add77 = add i64 %100, 1, !dbg !3392
  %101 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3393, !tbaa !1246
  %data78 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %101, i32 0, i32 1, !dbg !3394
  %arrayidx79 = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data78, i32 0, i64 %add77, !dbg !3393
  store %struct._object** %arrayidx79, %struct._object*** %dest62, align 8, !dbg !3395, !tbaa !1246
  %102 = load i64, i64* %m63, align 8, !dbg !3396, !tbaa !1990
  %103 = load i64, i64* %leftindex, align 8, !dbg !3397, !tbaa !1990
  %add80 = add i64 %103, %102, !dbg !3397
  store i64 %add80, i64* %leftindex, align 8, !dbg !3397, !tbaa !1990
  %104 = load i64, i64* %m63, align 8, !dbg !3398, !tbaa !1990
  %105 = load i64, i64* %rightindex, align 8, !dbg !3399, !tbaa !1990
  %add81 = add i64 %105, %104, !dbg !3399
  store i64 %add81, i64* %rightindex, align 8, !dbg !3399, !tbaa !1990
  %106 = load i64, i64* %m63, align 8, !dbg !3400, !tbaa !1990
  %107 = load i64, i64* %n.addr, align 8, !dbg !3401, !tbaa !1990
  %add82 = add i64 %107, %106, !dbg !3401
  store i64 %add82, i64* %n.addr, align 8, !dbg !3401, !tbaa !1990
  br label %do.body.83, !dbg !3402

do.body.83:                                       ; preds = %do.cond.86, %if.end.74
  %108 = load %struct._object**, %struct._object*** %src61, align 8, !dbg !3403, !tbaa !1246
  %incdec.ptr84 = getelementptr %struct._object*, %struct._object** %108, i32 1, !dbg !3403
  store %struct._object** %incdec.ptr84, %struct._object*** %src61, align 8, !dbg !3403, !tbaa !1246
  %109 = load %struct._object*, %struct._object** %108, align 8, !dbg !3405, !tbaa !1246
  %110 = load %struct._object**, %struct._object*** %dest62, align 8, !dbg !3406, !tbaa !1246
  %incdec.ptr85 = getelementptr %struct._object*, %struct._object** %110, i32 1, !dbg !3406
  store %struct._object** %incdec.ptr85, %struct._object*** %dest62, align 8, !dbg !3406, !tbaa !1246
  store %struct._object* %109, %struct._object** %110, align 8, !dbg !3407, !tbaa !1246
  br label %do.cond.86, !dbg !3408

do.cond.86:                                       ; preds = %do.body.83
  %111 = load i64, i64* %m63, align 8, !dbg !3409, !tbaa !1990
  %dec87 = add i64 %111, -1, !dbg !3409
  store i64 %dec87, i64* %m63, align 8, !dbg !3409, !tbaa !1990
  %tobool88 = icmp ne i64 %dec87, 0, !dbg !3408
  br i1 %tobool88, label %do.body.83, label %do.end.89, !dbg !3408

do.end.89:                                        ; preds = %do.cond.86
  %112 = bitcast i64* %m63 to i8*, !dbg !3411
  call void @llvm.lifetime.end(i64 8, i8* %112) #1, !dbg !3411
  %113 = bitcast %struct._object*** %dest62 to i8*, !dbg !3411
  call void @llvm.lifetime.end(i64 8, i8* %113) #1, !dbg !3411
  %114 = bitcast %struct._object*** %src61 to i8*, !dbg !3411
  call void @llvm.lifetime.end(i64 8, i8* %114) #1, !dbg !3411
  %115 = load i64, i64* %leftindex, align 8, !dbg !3412, !tbaa !1990
  %cmp90 = icmp eq i64 %115, 62, !dbg !3414
  br i1 %cmp90, label %if.then.91, label %if.end.93, !dbg !3415

if.then.91:                                       ; preds = %do.end.89
  %116 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !3416, !tbaa !1246
  store %struct.BLOCK* %116, %struct.BLOCK** %b, align 8, !dbg !3418, !tbaa !1246
  %117 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !3419, !tbaa !1246
  %rightlink92 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %117, i32 0, i32 2, !dbg !3420
  %118 = load %struct.BLOCK*, %struct.BLOCK** %rightlink92, align 8, !dbg !3420, !tbaa !2048
  store %struct.BLOCK* %118, %struct.BLOCK** %leftblock, align 8, !dbg !3421, !tbaa !1246
  store i64 0, i64* %leftindex, align 8, !dbg !3422, !tbaa !1990
  br label %if.end.93, !dbg !3423

if.end.93:                                        ; preds = %if.then.91, %do.end.89
  br label %while.cond.46, !dbg !3325

while.end.94:                                     ; preds = %while.cond.46
  store i32 0, i32* %rv, align 4, !dbg !3424, !tbaa !1906
  br label %done, !dbg !3425

done:                                             ; preds = %while.end.94, %if.then.55, %if.then.23
  %119 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3426, !tbaa !1246
  %cmp95 = icmp ne %struct.BLOCK* %119, null, !dbg !3428
  br i1 %cmp95, label %if.then.96, label %if.end.97, !dbg !3429

if.then.96:                                       ; preds = %done
  %120 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3430, !tbaa !1246
  call void @freeblock(%struct.BLOCK* %120), !dbg !3431
  br label %if.end.97, !dbg !3431

if.end.97:                                        ; preds = %if.then.96, %done
  %121 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !3432, !tbaa !1246
  %122 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3433, !tbaa !1246
  %leftblock98 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %122, i32 0, i32 1, !dbg !3434
  store %struct.BLOCK* %121, %struct.BLOCK** %leftblock98, align 8, !dbg !3435, !tbaa !1872
  %123 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3436, !tbaa !1246
  %124 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3437, !tbaa !1246
  %rightblock99 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %124, i32 0, i32 2, !dbg !3438
  store %struct.BLOCK* %123, %struct.BLOCK** %rightblock99, align 8, !dbg !3439, !tbaa !1888
  %125 = load i64, i64* %leftindex, align 8, !dbg !3440, !tbaa !1990
  %126 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3441, !tbaa !1246
  %leftindex100 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %126, i32 0, i32 3, !dbg !3442
  store i64 %125, i64* %leftindex100, align 8, !dbg !3443, !tbaa !1989
  %127 = load i64, i64* %rightindex, align 8, !dbg !3444, !tbaa !1990
  %128 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3445, !tbaa !1246
  %rightindex101 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %128, i32 0, i32 4, !dbg !3446
  store i64 %127, i64* %rightindex101, align 8, !dbg !3447, !tbaa !2060
  %129 = load i32, i32* %rv, align 4, !dbg !3448, !tbaa !1906
  store i32 %129, i32* %retval, !dbg !3449
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3449

cleanup:                                          ; preds = %if.end.97, %if.then
  %130 = bitcast i32* %rv to i8*, !dbg !3450
  call void @llvm.lifetime.end(i64 4, i8* %130) #1, !dbg !3450
  %131 = bitcast i64* %halflen to i8*, !dbg !3450
  call void @llvm.lifetime.end(i64 8, i8* %131) #1, !dbg !3450
  %132 = bitcast i64* %len to i8*, !dbg !3450
  call void @llvm.lifetime.end(i64 8, i8* %132) #1, !dbg !3450
  %133 = bitcast i64* %rightindex to i8*, !dbg !3450
  call void @llvm.lifetime.end(i64 8, i8* %133) #1, !dbg !3450
  %134 = bitcast i64* %leftindex to i8*, !dbg !3450
  call void @llvm.lifetime.end(i64 8, i8* %134) #1, !dbg !3450
  %135 = bitcast %struct.BLOCK** %rightblock to i8*, !dbg !3450
  call void @llvm.lifetime.end(i64 8, i8* %135) #1, !dbg !3450
  %136 = bitcast %struct.BLOCK** %leftblock to i8*, !dbg !3450
  call void @llvm.lifetime.end(i64 8, i8* %136) #1, !dbg !3450
  %137 = bitcast %struct.BLOCK** %b to i8*, !dbg !3450
  call void @llvm.lifetime.end(i64 8, i8* %137) #1, !dbg !3450
  %138 = load i32, i32* %retval, !dbg !3450
  ret i32 %138, !dbg !3450
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_popleft(%struct.dequeobject* %deque, %struct._object* %unused) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %unused.addr = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %prevblock = alloca %struct.BLOCK*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !575, metadata !1242), !dbg !3451
  store %struct._object* %unused, %struct._object** %unused.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %unused.addr, metadata !576, metadata !1242), !dbg !3452
  %0 = bitcast %struct._object** %item to i8*, !dbg !3453
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3453
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !577, metadata !1242), !dbg !3454
  %1 = bitcast %struct.BLOCK** %prevblock to i8*, !dbg !3455
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !3455
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %prevblock, metadata !578, metadata !1242), !dbg !3456
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3457, !tbaa !1246
  %3 = bitcast %struct.dequeobject* %2 to %struct.PyVarObject*, !dbg !3459
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !3460
  %4 = load i64, i64* %ob_size, align 8, !dbg !3460, !tbaa !2108
  %cmp = icmp eq i64 %4, 0, !dbg !3461
  br i1 %cmp, label %if.then, label %if.end, !dbg !3462

if.then:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !3463, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i32 0, i32 0)), !dbg !3465
  store %struct._object* null, %struct._object** %retval, !dbg !3466
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3466

if.end:                                           ; preds = %entry
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3467, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %6, i32 0, i32 3, !dbg !3468
  %7 = load i64, i64* %leftindex, align 8, !dbg !3468, !tbaa !1989
  %8 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3469, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %8, i32 0, i32 1, !dbg !3470
  %9 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !3470, !tbaa !1872
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %9, i32 0, i32 1, !dbg !3471
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %7, !dbg !3469
  %10 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !3469, !tbaa !1246
  store %struct._object* %10, %struct._object** %item, align 8, !dbg !3472, !tbaa !1246
  %11 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3473, !tbaa !1246
  %leftindex1 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %11, i32 0, i32 3, !dbg !3474
  %12 = load i64, i64* %leftindex1, align 8, !dbg !3475, !tbaa !1989
  %inc = add i64 %12, 1, !dbg !3475
  store i64 %inc, i64* %leftindex1, align 8, !dbg !3475, !tbaa !1989
  %13 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3476, !tbaa !1246
  %14 = bitcast %struct.dequeobject* %13 to %struct.PyVarObject*, !dbg !3477
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !3478
  %15 = load i64, i64* %ob_size2, align 8, !dbg !3479, !tbaa !2108
  %dec = add i64 %15, -1, !dbg !3479
  store i64 %dec, i64* %ob_size2, align 8, !dbg !3479, !tbaa !2108
  %16 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3480, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %16, i32 0, i32 5, !dbg !3481
  %17 = load i64, i64* %state, align 8, !dbg !3482, !tbaa !2616
  %inc3 = add i64 %17, 1, !dbg !3482
  store i64 %inc3, i64* %state, align 8, !dbg !3482, !tbaa !2616
  %18 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3483, !tbaa !1246
  %leftindex4 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %18, i32 0, i32 3, !dbg !3485
  %19 = load i64, i64* %leftindex4, align 8, !dbg !3485, !tbaa !1989
  %cmp5 = icmp eq i64 %19, 62, !dbg !3486
  br i1 %cmp5, label %if.then.6, label %if.end.16, !dbg !3487

if.then.6:                                        ; preds = %if.end
  %20 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3488, !tbaa !1246
  %21 = bitcast %struct.dequeobject* %20 to %struct.PyVarObject*, !dbg !3491
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %21, i32 0, i32 1, !dbg !3492
  %22 = load i64, i64* %ob_size7, align 8, !dbg !3492, !tbaa !2108
  %cmp8 = icmp eq i64 %22, 0, !dbg !3493
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !3494

if.then.9:                                        ; preds = %if.then.6
  %23 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3495, !tbaa !1246
  %leftindex10 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %23, i32 0, i32 3, !dbg !3497
  store i64 31, i64* %leftindex10, align 8, !dbg !3498, !tbaa !1989
  %24 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3499, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %24, i32 0, i32 4, !dbg !3500
  store i64 30, i64* %rightindex, align 8, !dbg !3501, !tbaa !2060
  br label %if.end.15, !dbg !3502

if.else:                                          ; preds = %if.then.6
  %25 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3503, !tbaa !1246
  %leftblock11 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %25, i32 0, i32 1, !dbg !3505
  %26 = load %struct.BLOCK*, %struct.BLOCK** %leftblock11, align 8, !dbg !3505, !tbaa !1872
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %26, i32 0, i32 2, !dbg !3506
  %27 = load %struct.BLOCK*, %struct.BLOCK** %rightlink, align 8, !dbg !3506, !tbaa !2048
  store %struct.BLOCK* %27, %struct.BLOCK** %prevblock, align 8, !dbg !3507, !tbaa !1246
  %28 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3508, !tbaa !1246
  %leftblock12 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %28, i32 0, i32 1, !dbg !3509
  %29 = load %struct.BLOCK*, %struct.BLOCK** %leftblock12, align 8, !dbg !3509, !tbaa !1872
  call void @freeblock(%struct.BLOCK* %29), !dbg !3510
  %30 = load %struct.BLOCK*, %struct.BLOCK** %prevblock, align 8, !dbg !3511, !tbaa !1246
  %31 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3512, !tbaa !1246
  %leftblock13 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %31, i32 0, i32 1, !dbg !3513
  store %struct.BLOCK* %30, %struct.BLOCK** %leftblock13, align 8, !dbg !3514, !tbaa !1872
  %32 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3515, !tbaa !1246
  %leftindex14 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %32, i32 0, i32 3, !dbg !3516
  store i64 0, i64* %leftindex14, align 8, !dbg !3517, !tbaa !1989
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.9
  br label %if.end.16, !dbg !3518

if.end.16:                                        ; preds = %if.end.15, %if.end
  %33 = load %struct._object*, %struct._object** %item, align 8, !dbg !3519, !tbaa !1246
  store %struct._object* %33, %struct._object** %retval, !dbg !3520
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3520

cleanup:                                          ; preds = %if.end.16, %if.then
  %34 = bitcast %struct.BLOCK** %prevblock to i8*, !dbg !3521
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !3521
  %35 = bitcast %struct._object** %item to i8*, !dbg !3521
  call void @llvm.lifetime.end(i64 8, i8* %35) #1, !dbg !3521
  %36 = load %struct._object*, %struct._object** %retval, !dbg !3521
  ret %struct._object* %36, !dbg !3521
}

; Function Attrs: nounwind uwtable
define internal %struct.BLOCK* @newblock(i64 %len) #0 {
entry:
  %retval = alloca %struct.BLOCK*, align 8
  %len.addr = alloca i64, align 8
  %b = alloca %struct.BLOCK*, align 8
  %cleanup.dest.slot = alloca i32
  store i64 %len, i64* %len.addr, align 8, !tbaa !1990
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !569, metadata !1242), !dbg !3522
  %0 = bitcast %struct.BLOCK** %b to i8*, !dbg !3523
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3523
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !570, metadata !1242), !dbg !3524
  %1 = load i64, i64* %len.addr, align 8, !dbg !3525, !tbaa !1990
  %cmp = icmp sge i64 %1, 9223372036854775683, !dbg !3527
  br i1 %cmp, label %if.then, label %if.end, !dbg !3528

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !3529, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.13, i32 0, i32 0)), !dbg !3531
  store %struct.BLOCK* null, %struct.BLOCK** %retval, !dbg !3532
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3532

if.end:                                           ; preds = %entry
  %3 = load i64, i64* @numfreeblocks, align 8, !dbg !3533, !tbaa !1990
  %tobool = icmp ne i64 %3, 0, !dbg !3533
  br i1 %tobool, label %if.then.1, label %if.end.2, !dbg !3535

if.then.1:                                        ; preds = %if.end
  %4 = load i64, i64* @numfreeblocks, align 8, !dbg !3536, !tbaa !1990
  %dec = add i64 %4, -1, !dbg !3536
  store i64 %dec, i64* @numfreeblocks, align 8, !dbg !3536, !tbaa !1990
  %5 = load i64, i64* @numfreeblocks, align 8, !dbg !3538, !tbaa !1990
  %arrayidx = getelementptr [10 x %struct.BLOCK*], [10 x %struct.BLOCK*]* @freeblocks, i32 0, i64 %5, !dbg !3539
  %6 = load %struct.BLOCK*, %struct.BLOCK** %arrayidx, align 8, !dbg !3539, !tbaa !1246
  store %struct.BLOCK* %6, %struct.BLOCK** %retval, !dbg !3540
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3540

if.end.2:                                         ; preds = %if.end
  %call = call i8* @PyMem_Malloc(i64 512), !dbg !3541
  %7 = bitcast i8* %call to %struct.BLOCK*, !dbg !3541
  store %struct.BLOCK* %7, %struct.BLOCK** %b, align 8, !dbg !3542, !tbaa !1246
  %8 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3543, !tbaa !1246
  %cmp3 = icmp ne %struct.BLOCK* %8, null, !dbg !3545
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !3546

if.then.4:                                        ; preds = %if.end.2
  %9 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3547, !tbaa !1246
  store %struct.BLOCK* %9, %struct.BLOCK** %retval, !dbg !3549
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3549

if.end.5:                                         ; preds = %if.end.2
  %call6 = call %struct._object* @PyErr_NoMemory(), !dbg !3550
  store %struct.BLOCK* null, %struct.BLOCK** %retval, !dbg !3551
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3551

cleanup:                                          ; preds = %if.end.5, %if.then.4, %if.then.1, %if.then
  %10 = bitcast %struct.BLOCK** %b to i8*, !dbg !3552
  call void @llvm.lifetime.end(i64 8, i8* %10) #1, !dbg !3552
  %11 = load %struct.BLOCK*, %struct.BLOCK** %retval, !dbg !3552
  ret %struct.BLOCK* %11, !dbg !3552
}

declare i8* @PyMem_Malloc(i64) #3

declare %struct._object* @PyErr_NoMemory() #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_extend(%struct.dequeobject* %deque, %struct._object* %iterable) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %iterable.addr = alloca %struct._object*, align 8
  %it = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %s = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %b = alloca %struct.BLOCK*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %rv = alloca %struct._object*, align 8
  %_py_decref_tmp73 = alloca %struct._object*, align 8
  %_py_decref_tmp86 = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !588, metadata !1242), !dbg !3553
  store %struct._object* %iterable, %struct._object** %iterable.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %iterable.addr, metadata !589, metadata !1242), !dbg !3554
  %0 = bitcast %struct._object** %it to i8*, !dbg !3555
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3555
  call void @llvm.dbg.declare(metadata %struct._object** %it, metadata !590, metadata !1242), !dbg !3556
  %1 = bitcast %struct._object** %item to i8*, !dbg !3555
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !3555
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !591, metadata !1242), !dbg !3557
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3558, !tbaa !1246
  %3 = bitcast %struct.dequeobject* %2 to %struct._object*, !dbg !3559
  %4 = load %struct._object*, %struct._object** %iterable.addr, align 8, !dbg !3560, !tbaa !1246
  %cmp = icmp eq %struct._object* %3, %4, !dbg !3561
  br i1 %cmp, label %if.then, label %if.end.8, !dbg !3562

if.then:                                          ; preds = %entry
  %5 = bitcast %struct._object** %result to i8*, !dbg !3563
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !3563
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !592, metadata !1242), !dbg !3564
  %6 = bitcast %struct._object** %s to i8*, !dbg !3565
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !3565
  call void @llvm.dbg.declare(metadata %struct._object** %s, metadata !595, metadata !1242), !dbg !3566
  %7 = load %struct._object*, %struct._object** %iterable.addr, align 8, !dbg !3567, !tbaa !1246
  %call = call %struct._object* @PySequence_List(%struct._object* %7), !dbg !3568
  store %struct._object* %call, %struct._object** %s, align 8, !dbg !3566, !tbaa !1246
  %8 = load %struct._object*, %struct._object** %s, align 8, !dbg !3569, !tbaa !1246
  %cmp1 = icmp eq %struct._object* %8, null, !dbg !3571
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !3572

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !3573
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3573

if.end:                                           ; preds = %if.then
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3574, !tbaa !1246
  %10 = load %struct._object*, %struct._object** %s, align 8, !dbg !3575, !tbaa !1246
  %call3 = call %struct._object* @deque_extend(%struct.dequeobject* %9, %struct._object* %10), !dbg !3576
  store %struct._object* %call3, %struct._object** %result, align 8, !dbg !3577, !tbaa !1246
  br label %do.body, !dbg !3578

do.body:                                          ; preds = %if.end
  %11 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3579
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !3579
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !596, metadata !1242), !dbg !3581
  %12 = load %struct._object*, %struct._object** %s, align 8, !dbg !3582, !tbaa !1246
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8, !dbg !3581, !tbaa !1246
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3583, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0, !dbg !3585
  %14 = load i64, i64* %ob_refcnt, align 8, !dbg !3586, !tbaa !1261
  %dec = add i64 %14, -1, !dbg !3586
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3586, !tbaa !1261
  %cmp4 = icmp ne i64 %dec, 0, !dbg !3587
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !3588

if.then.5:                                        ; preds = %do.body
  br label %if.end.6, !dbg !3589

if.else:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3591, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !3593
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3593, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4, !dbg !3594
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3594, !tbaa !1444
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3595, !tbaa !1246
  call void %17(%struct._object* %18), !dbg !3596
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3597
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !3597
  br label %do.cond, !dbg !3599

do.cond:                                          ; preds = %if.end.6
  br label %do.end, !dbg !3600

do.end:                                           ; preds = %do.cond
  %20 = load %struct._object*, %struct._object** %result, align 8, !dbg !3602, !tbaa !1246
  store %struct._object* %20, %struct._object** %retval, !dbg !3603
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3603

cleanup:                                          ; preds = %do.end, %if.then.2
  %21 = bitcast %struct._object** %s to i8*, !dbg !3604
  call void @llvm.lifetime.end(i64 8, i8* %21) #1, !dbg !3604
  %22 = bitcast %struct._object** %result to i8*, !dbg !3604
  call void @llvm.lifetime.end(i64 8, i8* %22) #1, !dbg !3604
  br label %cleanup.101

if.end.8:                                         ; preds = %entry
  %23 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3605, !tbaa !1246
  %24 = bitcast %struct.dequeobject* %23 to %struct.PyVarObject*, !dbg !3607
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %24, i32 0, i32 1, !dbg !3608
  %25 = load i64, i64* %ob_size, align 8, !dbg !3608, !tbaa !2108
  %cmp9 = icmp eq i64 %25, 0, !dbg !3609
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !3610

if.then.10:                                       ; preds = %if.end.8
  %26 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3611, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %26, i32 0, i32 3, !dbg !3613
  store i64 1, i64* %leftindex, align 8, !dbg !3614, !tbaa !1989
  %27 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3615, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %27, i32 0, i32 4, !dbg !3616
  store i64 0, i64* %rightindex, align 8, !dbg !3617, !tbaa !2060
  br label %if.end.11, !dbg !3618

if.end.11:                                        ; preds = %if.then.10, %if.end.8
  %28 = load %struct._object*, %struct._object** %iterable.addr, align 8, !dbg !3619, !tbaa !1246
  %call12 = call %struct._object* @PyObject_GetIter(%struct._object* %28), !dbg !3620
  store %struct._object* %call12, %struct._object** %it, align 8, !dbg !3621, !tbaa !1246
  %29 = load %struct._object*, %struct._object** %it, align 8, !dbg !3622, !tbaa !1246
  %cmp13 = icmp eq %struct._object* %29, null, !dbg !3624
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !3625

if.then.14:                                       ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval, !dbg !3626
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.101, !dbg !3626

if.end.15:                                        ; preds = %if.end.11
  %30 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3627, !tbaa !1246
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %30, i32 0, i32 6, !dbg !3629
  %31 = load i64, i64* %maxlen, align 8, !dbg !3629, !tbaa !1934
  %cmp16 = icmp eq i64 %31, 0, !dbg !3630
  br i1 %cmp16, label %if.then.17, label %if.end.19, !dbg !3631

if.then.17:                                       ; preds = %if.end.15
  %32 = load %struct._object*, %struct._object** %it, align 8, !dbg !3632, !tbaa !1246
  %call18 = call %struct._object* @consume_iterator(%struct._object* %32), !dbg !3633
  store %struct._object* %call18, %struct._object** %retval, !dbg !3634
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.101, !dbg !3634

if.end.19:                                        ; preds = %if.end.15
  br label %while.cond, !dbg !3635

while.cond:                                       ; preds = %if.end.84, %if.end.19
  %33 = load %struct._object*, %struct._object** %it, align 8, !dbg !3636, !tbaa !1246
  %call20 = call %struct._object* @PyIter_Next(%struct._object* %33), !dbg !3639
  store %struct._object* %call20, %struct._object** %item, align 8, !dbg !3640, !tbaa !1246
  %cmp21 = icmp ne %struct._object* %call20, null, !dbg !3641
  br i1 %cmp21, label %while.body, label %while.end, !dbg !3635

while.body:                                       ; preds = %while.cond
  %34 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3642, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %34, i32 0, i32 5, !dbg !3643
  %35 = load i64, i64* %state, align 8, !dbg !3644, !tbaa !2616
  %inc = add i64 %35, 1, !dbg !3644
  store i64 %inc, i64* %state, align 8, !dbg !3644, !tbaa !2616
  %36 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3645, !tbaa !1246
  %rightindex22 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %36, i32 0, i32 4, !dbg !3646
  %37 = load i64, i64* %rightindex22, align 8, !dbg !3646, !tbaa !2060
  %cmp23 = icmp eq i64 %37, 61, !dbg !3647
  br i1 %cmp23, label %if.then.24, label %if.end.58, !dbg !3648

if.then.24:                                       ; preds = %while.body
  %38 = bitcast %struct.BLOCK** %b to i8*, !dbg !3649
  call void @llvm.lifetime.start(i64 8, i8* %38) #1, !dbg !3649
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !598, metadata !1242), !dbg !3650
  %39 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3651, !tbaa !1246
  %40 = bitcast %struct.dequeobject* %39 to %struct.PyVarObject*, !dbg !3652
  %ob_size25 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %40, i32 0, i32 1, !dbg !3653
  %41 = load i64, i64* %ob_size25, align 8, !dbg !3653, !tbaa !2108
  %call26 = call %struct.BLOCK* @newblock(i64 %41), !dbg !3654
  store %struct.BLOCK* %call26, %struct.BLOCK** %b, align 8, !dbg !3650, !tbaa !1246
  %42 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3655, !tbaa !1246
  %cmp27 = icmp eq %struct.BLOCK* %42, null, !dbg !3656
  br i1 %cmp27, label %if.then.28, label %if.end.53, !dbg !3657

if.then.28:                                       ; preds = %if.then.24
  br label %do.body.29, !dbg !3658

do.body.29:                                       ; preds = %if.then.28
  %43 = bitcast %struct._object** %_py_decref_tmp30 to i8*, !dbg !3659
  call void @llvm.lifetime.start(i64 8, i8* %43) #1, !dbg !3659
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp30, metadata !602, metadata !1242), !dbg !3661
  %44 = load %struct._object*, %struct._object** %item, align 8, !dbg !3662, !tbaa !1246
  store %struct._object* %44, %struct._object** %_py_decref_tmp30, align 8, !dbg !3661, !tbaa !1246
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8, !dbg !3663, !tbaa !1246
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0, !dbg !3665
  %46 = load i64, i64* %ob_refcnt31, align 8, !dbg !3666, !tbaa !1261
  %dec32 = add i64 %46, -1, !dbg !3666
  store i64 %dec32, i64* %ob_refcnt31, align 8, !dbg !3666, !tbaa !1261
  %cmp33 = icmp ne i64 %dec32, 0, !dbg !3667
  br i1 %cmp33, label %if.then.34, label %if.else.35, !dbg !3668

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38, !dbg !3669

if.else.35:                                       ; preds = %do.body.29
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8, !dbg !3671, !tbaa !1246
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1, !dbg !3673
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8, !dbg !3673, !tbaa !1345
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4, !dbg !3674
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8, !dbg !3674, !tbaa !1444
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8, !dbg !3675, !tbaa !1246
  call void %49(%struct._object* %50), !dbg !3676
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  %51 = bitcast %struct._object** %_py_decref_tmp30 to i8*, !dbg !3677
  call void @llvm.lifetime.end(i64 8, i8* %51) #1, !dbg !3677
  br label %do.cond.39, !dbg !3679

do.cond.39:                                       ; preds = %if.end.38
  br label %do.end.40, !dbg !3680

do.end.40:                                        ; preds = %do.cond.39
  br label %do.body.41, !dbg !3682

do.body.41:                                       ; preds = %do.end.40
  %52 = bitcast %struct._object** %_py_decref_tmp42 to i8*, !dbg !3683
  call void @llvm.lifetime.start(i64 8, i8* %52) #1, !dbg !3683
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp42, metadata !606, metadata !1242), !dbg !3685
  %53 = load %struct._object*, %struct._object** %it, align 8, !dbg !3686, !tbaa !1246
  store %struct._object* %53, %struct._object** %_py_decref_tmp42, align 8, !dbg !3685, !tbaa !1246
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !3687, !tbaa !1246
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0, !dbg !3689
  %55 = load i64, i64* %ob_refcnt43, align 8, !dbg !3690, !tbaa !1261
  %dec44 = add i64 %55, -1, !dbg !3690
  store i64 %dec44, i64* %ob_refcnt43, align 8, !dbg !3690, !tbaa !1261
  %cmp45 = icmp ne i64 %dec44, 0, !dbg !3691
  br i1 %cmp45, label %if.then.46, label %if.else.47, !dbg !3692

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50, !dbg !3693

if.else.47:                                       ; preds = %do.body.41
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !3695, !tbaa !1246
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1, !dbg !3697
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8, !dbg !3697, !tbaa !1345
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4, !dbg !3698
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8, !dbg !3698, !tbaa !1444
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !3699, !tbaa !1246
  call void %58(%struct._object* %59), !dbg !3700
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  %60 = bitcast %struct._object** %_py_decref_tmp42 to i8*, !dbg !3701
  call void @llvm.lifetime.end(i64 8, i8* %60) #1, !dbg !3701
  br label %do.cond.51, !dbg !3702

do.cond.51:                                       ; preds = %if.end.50
  br label %do.end.52, !dbg !3703

do.end.52:                                        ; preds = %do.cond.51
  store %struct._object* null, %struct._object** %retval, !dbg !3705
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.57, !dbg !3705

if.end.53:                                        ; preds = %if.then.24
  %61 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3706, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %61, i32 0, i32 2, !dbg !3707
  %62 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3707, !tbaa !1888
  %63 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3708, !tbaa !1246
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %63, i32 0, i32 0, !dbg !3709
  store %struct.BLOCK* %62, %struct.BLOCK** %leftlink, align 8, !dbg !3710, !tbaa !2933
  %64 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3711, !tbaa !1246
  %65 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3712, !tbaa !1246
  %rightblock54 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %65, i32 0, i32 2, !dbg !3713
  %66 = load %struct.BLOCK*, %struct.BLOCK** %rightblock54, align 8, !dbg !3713, !tbaa !1888
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %66, i32 0, i32 2, !dbg !3714
  store %struct.BLOCK* %64, %struct.BLOCK** %rightlink, align 8, !dbg !3715, !tbaa !2048
  %67 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3716, !tbaa !1246
  %68 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3717, !tbaa !1246
  %rightblock55 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %68, i32 0, i32 2, !dbg !3718
  store %struct.BLOCK* %67, %struct.BLOCK** %rightblock55, align 8, !dbg !3719, !tbaa !1888
  %69 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3720, !tbaa !1246
  %rightindex56 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %69, i32 0, i32 4, !dbg !3721
  store i64 -1, i64* %rightindex56, align 8, !dbg !3722, !tbaa !2060
  store i32 0, i32* %cleanup.dest.slot, !dbg !3723
  br label %cleanup.57, !dbg !3723

cleanup.57:                                       ; preds = %if.end.53, %do.end.52
  %70 = bitcast %struct.BLOCK** %b to i8*, !dbg !3724
  call void @llvm.lifetime.end(i64 8, i8* %70) #1, !dbg !3724
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.101 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup.57
  br label %if.end.58, !dbg !3726

if.end.58:                                        ; preds = %cleanup.cont, %while.body
  %71 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3727, !tbaa !1246
  %72 = bitcast %struct.dequeobject* %71 to %struct.PyVarObject*, !dbg !3728
  %ob_size59 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %72, i32 0, i32 1, !dbg !3729
  %73 = load i64, i64* %ob_size59, align 8, !dbg !3730, !tbaa !2108
  %inc60 = add i64 %73, 1, !dbg !3730
  store i64 %inc60, i64* %ob_size59, align 8, !dbg !3730, !tbaa !2108
  %74 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3731, !tbaa !1246
  %rightindex61 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %74, i32 0, i32 4, !dbg !3732
  %75 = load i64, i64* %rightindex61, align 8, !dbg !3733, !tbaa !2060
  %inc62 = add i64 %75, 1, !dbg !3733
  store i64 %inc62, i64* %rightindex61, align 8, !dbg !3733, !tbaa !2060
  %76 = load %struct._object*, %struct._object** %item, align 8, !dbg !3734, !tbaa !1246
  %77 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3735, !tbaa !1246
  %rightindex63 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %77, i32 0, i32 4, !dbg !3736
  %78 = load i64, i64* %rightindex63, align 8, !dbg !3736, !tbaa !2060
  %79 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3737, !tbaa !1246
  %rightblock64 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %79, i32 0, i32 2, !dbg !3738
  %80 = load %struct.BLOCK*, %struct.BLOCK** %rightblock64, align 8, !dbg !3738, !tbaa !1888
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %80, i32 0, i32 1, !dbg !3739
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %78, !dbg !3737
  store %struct._object* %76, %struct._object** %arrayidx, align 8, !dbg !3740, !tbaa !1246
  %81 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3741, !tbaa !1246
  %maxlen65 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %81, i32 0, i32 6, !dbg !3742
  %82 = load i64, i64* %maxlen65, align 8, !dbg !3742, !tbaa !1934
  %cmp66 = icmp ne i64 %82, -1, !dbg !3743
  br i1 %cmp66, label %land.lhs.true, label %if.end.84, !dbg !3744

land.lhs.true:                                    ; preds = %if.end.58
  %83 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3745, !tbaa !1246
  %84 = bitcast %struct.dequeobject* %83 to %struct.PyVarObject*, !dbg !3747
  %ob_size67 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %84, i32 0, i32 1, !dbg !3748
  %85 = load i64, i64* %ob_size67, align 8, !dbg !3748, !tbaa !2108
  %86 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3749, !tbaa !1246
  %maxlen68 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %86, i32 0, i32 6, !dbg !3750
  %87 = load i64, i64* %maxlen68, align 8, !dbg !3750, !tbaa !1934
  %cmp69 = icmp sgt i64 %85, %87, !dbg !3751
  br i1 %cmp69, label %if.then.70, label %if.end.84, !dbg !3752

if.then.70:                                       ; preds = %land.lhs.true
  %88 = bitcast %struct._object** %rv to i8*, !dbg !3753
  call void @llvm.lifetime.start(i64 8, i8* %88) #1, !dbg !3753
  call void @llvm.dbg.declare(metadata %struct._object** %rv, metadata !608, metadata !1242), !dbg !3755
  %89 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3756, !tbaa !1246
  %call71 = call %struct._object* @deque_popleft(%struct.dequeobject* %89, %struct._object* null), !dbg !3757
  store %struct._object* %call71, %struct._object** %rv, align 8, !dbg !3755, !tbaa !1246
  br label %do.body.72, !dbg !3758

do.body.72:                                       ; preds = %if.then.70
  %90 = bitcast %struct._object** %_py_decref_tmp73 to i8*, !dbg !3759
  call void @llvm.lifetime.start(i64 8, i8* %90) #1, !dbg !3759
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp73, metadata !611, metadata !1242), !dbg !3761
  %91 = load %struct._object*, %struct._object** %rv, align 8, !dbg !3762, !tbaa !1246
  store %struct._object* %91, %struct._object** %_py_decref_tmp73, align 8, !dbg !3761, !tbaa !1246
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8, !dbg !3763, !tbaa !1246
  %ob_refcnt74 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0, !dbg !3765
  %93 = load i64, i64* %ob_refcnt74, align 8, !dbg !3766, !tbaa !1261
  %dec75 = add i64 %93, -1, !dbg !3766
  store i64 %dec75, i64* %ob_refcnt74, align 8, !dbg !3766, !tbaa !1261
  %cmp76 = icmp ne i64 %dec75, 0, !dbg !3767
  br i1 %cmp76, label %if.then.77, label %if.else.78, !dbg !3768

if.then.77:                                       ; preds = %do.body.72
  br label %if.end.81, !dbg !3769

if.else.78:                                       ; preds = %do.body.72
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8, !dbg !3771, !tbaa !1246
  %ob_type79 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1, !dbg !3773
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type79, align 8, !dbg !3773, !tbaa !1345
  %tp_dealloc80 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4, !dbg !3774
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc80, align 8, !dbg !3774, !tbaa !1444
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8, !dbg !3775, !tbaa !1246
  call void %96(%struct._object* %97), !dbg !3776
  br label %if.end.81

if.end.81:                                        ; preds = %if.else.78, %if.then.77
  %98 = bitcast %struct._object** %_py_decref_tmp73 to i8*, !dbg !3777
  call void @llvm.lifetime.end(i64 8, i8* %98) #1, !dbg !3777
  br label %do.cond.82, !dbg !3779

do.cond.82:                                       ; preds = %if.end.81
  br label %do.end.83, !dbg !3780

do.end.83:                                        ; preds = %do.cond.82
  %99 = bitcast %struct._object** %rv to i8*, !dbg !3782
  call void @llvm.lifetime.end(i64 8, i8* %99) #1, !dbg !3782
  br label %if.end.84, !dbg !3784

if.end.84:                                        ; preds = %do.end.83, %land.lhs.true, %if.end.58
  br label %while.cond, !dbg !3635

while.end:                                        ; preds = %while.cond
  br label %do.body.85, !dbg !3785

do.body.85:                                       ; preds = %while.end
  %100 = bitcast %struct._object** %_py_decref_tmp86 to i8*, !dbg !3786
  call void @llvm.lifetime.start(i64 8, i8* %100) #1, !dbg !3786
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp86, metadata !613, metadata !1242), !dbg !3788
  %101 = load %struct._object*, %struct._object** %it, align 8, !dbg !3789, !tbaa !1246
  store %struct._object* %101, %struct._object** %_py_decref_tmp86, align 8, !dbg !3788, !tbaa !1246
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8, !dbg !3790, !tbaa !1246
  %ob_refcnt87 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 0, !dbg !3792
  %103 = load i64, i64* %ob_refcnt87, align 8, !dbg !3793, !tbaa !1261
  %dec88 = add i64 %103, -1, !dbg !3793
  store i64 %dec88, i64* %ob_refcnt87, align 8, !dbg !3793, !tbaa !1261
  %cmp89 = icmp ne i64 %dec88, 0, !dbg !3794
  br i1 %cmp89, label %if.then.90, label %if.else.91, !dbg !3795

if.then.90:                                       ; preds = %do.body.85
  br label %if.end.94, !dbg !3796

if.else.91:                                       ; preds = %do.body.85
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8, !dbg !3798, !tbaa !1246
  %ob_type92 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1, !dbg !3800
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type92, align 8, !dbg !3800, !tbaa !1345
  %tp_dealloc93 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 4, !dbg !3801
  %106 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc93, align 8, !dbg !3801, !tbaa !1444
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8, !dbg !3802, !tbaa !1246
  call void %106(%struct._object* %107), !dbg !3803
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.91, %if.then.90
  %108 = bitcast %struct._object** %_py_decref_tmp86 to i8*, !dbg !3804
  call void @llvm.lifetime.end(i64 8, i8* %108) #1, !dbg !3804
  br label %do.cond.95, !dbg !3806

do.cond.95:                                       ; preds = %if.end.94
  br label %do.end.96, !dbg !3807

do.end.96:                                        ; preds = %do.cond.95
  %call97 = call %struct._object* @PyErr_Occurred(), !dbg !3809
  %tobool = icmp ne %struct._object* %call97, null, !dbg !3809
  br i1 %tobool, label %if.then.98, label %if.end.99, !dbg !3811

if.then.98:                                       ; preds = %do.end.96
  store %struct._object* null, %struct._object** %retval, !dbg !3812
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.101, !dbg !3812

if.end.99:                                        ; preds = %do.end.96
  %109 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3813, !tbaa !1261
  %inc100 = add i64 %109, 1, !dbg !3813
  store i64 %inc100, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3813, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !3814
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.101, !dbg !3814

cleanup.101:                                      ; preds = %if.end.99, %if.then.98, %cleanup.57, %if.then.17, %if.then.14, %cleanup
  %110 = bitcast %struct._object** %item to i8*, !dbg !3815
  call void @llvm.lifetime.end(i64 8, i8* %110) #1, !dbg !3815
  %111 = bitcast %struct._object** %it to i8*, !dbg !3815
  call void @llvm.lifetime.end(i64 8, i8* %111) #1, !dbg !3815
  %112 = load %struct._object*, %struct._object** %retval, !dbg !3815
  ret %struct._object* %112, !dbg !3815
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @consume_iterator(%struct._object* %it) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %it.addr = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp3 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %it, %struct._object** %it.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %it.addr, metadata !617, metadata !1242), !dbg !3816
  %0 = bitcast %struct._object** %item to i8*, !dbg !3817
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3817
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !618, metadata !1242), !dbg !3818
  br label %while.cond, !dbg !3819

while.cond:                                       ; preds = %do.end, %entry
  %1 = load %struct._object*, %struct._object** %it.addr, align 8, !dbg !3820, !tbaa !1246
  %call = call %struct._object* @PyIter_Next(%struct._object* %1), !dbg !3823
  store %struct._object* %call, %struct._object** %item, align 8, !dbg !3824, !tbaa !1246
  %cmp = icmp ne %struct._object* %call, null, !dbg !3825
  br i1 %cmp, label %while.body, label %while.end, !dbg !3819

while.body:                                       ; preds = %while.cond
  br label %do.body, !dbg !3826

do.body:                                          ; preds = %while.body
  %2 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3827
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !3827
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !619, metadata !1242), !dbg !3829
  %3 = load %struct._object*, %struct._object** %item, align 8, !dbg !3830, !tbaa !1246
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8, !dbg !3829, !tbaa !1246
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3831, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0, !dbg !3833
  %5 = load i64, i64* %ob_refcnt, align 8, !dbg !3834, !tbaa !1261
  %dec = add i64 %5, -1, !dbg !3834
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3834, !tbaa !1261
  %cmp1 = icmp ne i64 %dec, 0, !dbg !3835
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3836

if.then:                                          ; preds = %do.body
  br label %if.end, !dbg !3837

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3839, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1, !dbg !3841
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3841, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4, !dbg !3842
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3842, !tbaa !1444
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3843, !tbaa !1246
  call void %8(%struct._object* %9), !dbg !3844
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3845
  call void @llvm.lifetime.end(i64 8, i8* %10) #1, !dbg !3845
  br label %do.cond, !dbg !3847

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !3848

do.end:                                           ; preds = %do.cond
  br label %while.cond, !dbg !3819

while.end:                                        ; preds = %while.cond
  br label %do.body.2, !dbg !3850

do.body.2:                                        ; preds = %while.end
  %11 = bitcast %struct._object** %_py_decref_tmp3 to i8*, !dbg !3851
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !3851
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp3, metadata !622, metadata !1242), !dbg !3853
  %12 = load %struct._object*, %struct._object** %it.addr, align 8, !dbg !3854, !tbaa !1246
  store %struct._object* %12, %struct._object** %_py_decref_tmp3, align 8, !dbg !3853, !tbaa !1246
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp3, align 8, !dbg !3855, !tbaa !1246
  %ob_refcnt4 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0, !dbg !3857
  %14 = load i64, i64* %ob_refcnt4, align 8, !dbg !3858, !tbaa !1261
  %dec5 = add i64 %14, -1, !dbg !3858
  store i64 %dec5, i64* %ob_refcnt4, align 8, !dbg !3858, !tbaa !1261
  %cmp6 = icmp ne i64 %dec5, 0, !dbg !3859
  br i1 %cmp6, label %if.then.7, label %if.else.8, !dbg !3860

if.then.7:                                        ; preds = %do.body.2
  br label %if.end.11, !dbg !3861

if.else.8:                                        ; preds = %do.body.2
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp3, align 8, !dbg !3863, !tbaa !1246
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !3865
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8, !dbg !3865, !tbaa !1345
  %tp_dealloc10 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4, !dbg !3866
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc10, align 8, !dbg !3866, !tbaa !1444
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp3, align 8, !dbg !3867, !tbaa !1246
  call void %17(%struct._object* %18), !dbg !3868
  br label %if.end.11

if.end.11:                                        ; preds = %if.else.8, %if.then.7
  %19 = bitcast %struct._object** %_py_decref_tmp3 to i8*, !dbg !3869
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !3869
  br label %do.cond.12, !dbg !3871

do.cond.12:                                       ; preds = %if.end.11
  br label %do.end.13, !dbg !3872

do.end.13:                                        ; preds = %do.cond.12
  %call14 = call %struct._object* @PyErr_Occurred(), !dbg !3874
  %tobool = icmp ne %struct._object* %call14, null, !dbg !3874
  br i1 %tobool, label %if.then.15, label %if.end.16, !dbg !3876

if.then.15:                                       ; preds = %do.end.13
  store %struct._object* null, %struct._object** %retval, !dbg !3877
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3877

if.end.16:                                        ; preds = %do.end.13
  %20 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3878, !tbaa !1261
  %inc = add i64 %20, 1, !dbg !3878
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3878, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !3879
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3879

cleanup:                                          ; preds = %if.end.16, %if.then.15
  %21 = bitcast %struct._object** %item to i8*, !dbg !3880
  call void @llvm.lifetime.end(i64 8, i8* %21) #1, !dbg !3880
  %22 = load %struct._object*, %struct._object** %retval, !dbg !3880
  ret %struct._object* %22, !dbg !3880
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_pop(%struct.dequeobject* %deque, %struct._object* %unused) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %unused.addr = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %prevblock = alloca %struct.BLOCK*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !661, metadata !1242), !dbg !3881
  store %struct._object* %unused, %struct._object** %unused.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %unused.addr, metadata !662, metadata !1242), !dbg !3882
  %0 = bitcast %struct._object** %item to i8*, !dbg !3883
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3883
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !663, metadata !1242), !dbg !3884
  %1 = bitcast %struct.BLOCK** %prevblock to i8*, !dbg !3885
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !3885
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %prevblock, metadata !664, metadata !1242), !dbg !3886
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3887, !tbaa !1246
  %3 = bitcast %struct.dequeobject* %2 to %struct.PyVarObject*, !dbg !3889
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !3890
  %4 = load i64, i64* %ob_size, align 8, !dbg !3890, !tbaa !2108
  %cmp = icmp eq i64 %4, 0, !dbg !3891
  br i1 %cmp, label %if.then, label %if.end, !dbg !3892

if.then:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !3893, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i32 0, i32 0)), !dbg !3895
  store %struct._object* null, %struct._object** %retval, !dbg !3896
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3896

if.end:                                           ; preds = %entry
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3897, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %6, i32 0, i32 4, !dbg !3898
  %7 = load i64, i64* %rightindex, align 8, !dbg !3898, !tbaa !2060
  %8 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3899, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %8, i32 0, i32 2, !dbg !3900
  %9 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3900, !tbaa !1888
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %9, i32 0, i32 1, !dbg !3901
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %7, !dbg !3899
  %10 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !3899, !tbaa !1246
  store %struct._object* %10, %struct._object** %item, align 8, !dbg !3902, !tbaa !1246
  %11 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3903, !tbaa !1246
  %rightindex1 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %11, i32 0, i32 4, !dbg !3904
  %12 = load i64, i64* %rightindex1, align 8, !dbg !3905, !tbaa !2060
  %dec = add i64 %12, -1, !dbg !3905
  store i64 %dec, i64* %rightindex1, align 8, !dbg !3905, !tbaa !2060
  %13 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3906, !tbaa !1246
  %14 = bitcast %struct.dequeobject* %13 to %struct.PyVarObject*, !dbg !3907
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !3908
  %15 = load i64, i64* %ob_size2, align 8, !dbg !3909, !tbaa !2108
  %dec3 = add i64 %15, -1, !dbg !3909
  store i64 %dec3, i64* %ob_size2, align 8, !dbg !3909, !tbaa !2108
  %16 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3910, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %16, i32 0, i32 5, !dbg !3911
  %17 = load i64, i64* %state, align 8, !dbg !3912, !tbaa !2616
  %inc = add i64 %17, 1, !dbg !3912
  store i64 %inc, i64* %state, align 8, !dbg !3912, !tbaa !2616
  %18 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3913, !tbaa !1246
  %rightindex4 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %18, i32 0, i32 4, !dbg !3915
  %19 = load i64, i64* %rightindex4, align 8, !dbg !3915, !tbaa !2060
  %cmp5 = icmp eq i64 %19, -1, !dbg !3916
  br i1 %cmp5, label %if.then.6, label %if.end.16, !dbg !3917

if.then.6:                                        ; preds = %if.end
  %20 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3918, !tbaa !1246
  %21 = bitcast %struct.dequeobject* %20 to %struct.PyVarObject*, !dbg !3921
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %21, i32 0, i32 1, !dbg !3922
  %22 = load i64, i64* %ob_size7, align 8, !dbg !3922, !tbaa !2108
  %cmp8 = icmp eq i64 %22, 0, !dbg !3923
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !3924

if.then.9:                                        ; preds = %if.then.6
  %23 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3925, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %23, i32 0, i32 3, !dbg !3927
  store i64 31, i64* %leftindex, align 8, !dbg !3928, !tbaa !1989
  %24 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3929, !tbaa !1246
  %rightindex10 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %24, i32 0, i32 4, !dbg !3930
  store i64 30, i64* %rightindex10, align 8, !dbg !3931, !tbaa !2060
  br label %if.end.15, !dbg !3932

if.else:                                          ; preds = %if.then.6
  %25 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3933, !tbaa !1246
  %rightblock11 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %25, i32 0, i32 2, !dbg !3935
  %26 = load %struct.BLOCK*, %struct.BLOCK** %rightblock11, align 8, !dbg !3935, !tbaa !1888
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %26, i32 0, i32 0, !dbg !3936
  %27 = load %struct.BLOCK*, %struct.BLOCK** %leftlink, align 8, !dbg !3936, !tbaa !2933
  store %struct.BLOCK* %27, %struct.BLOCK** %prevblock, align 8, !dbg !3937, !tbaa !1246
  %28 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3938, !tbaa !1246
  %rightblock12 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %28, i32 0, i32 2, !dbg !3939
  %29 = load %struct.BLOCK*, %struct.BLOCK** %rightblock12, align 8, !dbg !3939, !tbaa !1888
  call void @freeblock(%struct.BLOCK* %29), !dbg !3940
  %30 = load %struct.BLOCK*, %struct.BLOCK** %prevblock, align 8, !dbg !3941, !tbaa !1246
  %31 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3942, !tbaa !1246
  %rightblock13 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %31, i32 0, i32 2, !dbg !3943
  store %struct.BLOCK* %30, %struct.BLOCK** %rightblock13, align 8, !dbg !3944, !tbaa !1888
  %32 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3945, !tbaa !1246
  %rightindex14 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %32, i32 0, i32 4, !dbg !3946
  store i64 61, i64* %rightindex14, align 8, !dbg !3947, !tbaa !2060
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.9
  br label %if.end.16, !dbg !3948

if.end.16:                                        ; preds = %if.end.15, %if.end
  %33 = load %struct._object*, %struct._object** %item, align 8, !dbg !3949, !tbaa !1246
  store %struct._object* %33, %struct._object** %retval, !dbg !3950
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3950

cleanup:                                          ; preds = %if.end.16, %if.then
  %34 = bitcast %struct.BLOCK** %prevblock to i8*, !dbg !3951
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !3951
  %35 = bitcast %struct._object** %item to i8*, !dbg !3951
  call void @llvm.lifetime.end(i64 8, i8* %35) #1, !dbg !3951
  %36 = load %struct._object*, %struct._object** %retval, !dbg !3951
  ret %struct._object* %36, !dbg !3951
}

declare i32 @PyType_IsSubtype(%struct._typeobject*, %struct._typeobject*) #3

declare i32 @PyObject_RichCompareBool(%struct._object*, %struct._object*, i32) #3

declare %struct._object* @_PyObject_GC_New(%struct._typeobject*) #3

declare void @PyObject_GC_Track(i8*) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_append(%struct.dequeobject* %deque, %struct._object* %item) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %item.addr = alloca %struct._object*, align 8
  %b = alloca %struct.BLOCK*, align 8
  %cleanup.dest.slot = alloca i32
  %rv = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !719, metadata !1242), !dbg !3952
  store %struct._object* %item, %struct._object** %item.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %item.addr, metadata !720, metadata !1242), !dbg !3953
  %0 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3954, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %0, i32 0, i32 5, !dbg !3955
  %1 = load i64, i64* %state, align 8, !dbg !3956, !tbaa !2616
  %inc = add i64 %1, 1, !dbg !3956
  store i64 %inc, i64* %state, align 8, !dbg !3956, !tbaa !2616
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3957, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %2, i32 0, i32 4, !dbg !3958
  %3 = load i64, i64* %rightindex, align 8, !dbg !3958, !tbaa !2060
  %cmp = icmp eq i64 %3, 61, !dbg !3959
  br i1 %cmp, label %if.then, label %if.end.6, !dbg !3960

if.then:                                          ; preds = %entry
  %4 = bitcast %struct.BLOCK** %b to i8*, !dbg !3961
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !3961
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !721, metadata !1242), !dbg !3962
  %5 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3963, !tbaa !1246
  %6 = bitcast %struct.dequeobject* %5 to %struct.PyVarObject*, !dbg !3964
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !3965
  %7 = load i64, i64* %ob_size, align 8, !dbg !3965, !tbaa !2108
  %call = call %struct.BLOCK* @newblock(i64 %7), !dbg !3966
  store %struct.BLOCK* %call, %struct.BLOCK** %b, align 8, !dbg !3962, !tbaa !1246
  %8 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3967, !tbaa !1246
  %cmp1 = icmp eq %struct.BLOCK* %8, null, !dbg !3969
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !3970

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !3971
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3971

if.end:                                           ; preds = %if.then
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3972, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %9, i32 0, i32 2, !dbg !3973
  %10 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !3973, !tbaa !1888
  %11 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3974, !tbaa !1246
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %11, i32 0, i32 0, !dbg !3975
  store %struct.BLOCK* %10, %struct.BLOCK** %leftlink, align 8, !dbg !3976, !tbaa !2933
  %12 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3977, !tbaa !1246
  %13 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3978, !tbaa !1246
  %rightblock3 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %13, i32 0, i32 2, !dbg !3979
  %14 = load %struct.BLOCK*, %struct.BLOCK** %rightblock3, align 8, !dbg !3979, !tbaa !1888
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %14, i32 0, i32 2, !dbg !3980
  store %struct.BLOCK* %12, %struct.BLOCK** %rightlink, align 8, !dbg !3981, !tbaa !2048
  %15 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !3982, !tbaa !1246
  %16 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3983, !tbaa !1246
  %rightblock4 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %16, i32 0, i32 2, !dbg !3984
  store %struct.BLOCK* %15, %struct.BLOCK** %rightblock4, align 8, !dbg !3985, !tbaa !1888
  %17 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3986, !tbaa !1246
  %rightindex5 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %17, i32 0, i32 4, !dbg !3987
  store i64 -1, i64* %rightindex5, align 8, !dbg !3988, !tbaa !2060
  store i32 0, i32* %cleanup.dest.slot, !dbg !3989
  br label %cleanup, !dbg !3989

cleanup:                                          ; preds = %if.end, %if.then.2
  %18 = bitcast %struct.BLOCK** %b to i8*, !dbg !3990
  call void @llvm.lifetime.end(i64 8, i8* %18) #1, !dbg !3990
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.6, !dbg !3992

if.end.6:                                         ; preds = %cleanup.cont, %entry
  %19 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !3993, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0, !dbg !3994
  %20 = load i64, i64* %ob_refcnt, align 8, !dbg !3995, !tbaa !1261
  %inc7 = add i64 %20, 1, !dbg !3995
  store i64 %inc7, i64* %ob_refcnt, align 8, !dbg !3995, !tbaa !1261
  %21 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !3996, !tbaa !1246
  %22 = bitcast %struct.dequeobject* %21 to %struct.PyVarObject*, !dbg !3997
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %22, i32 0, i32 1, !dbg !3998
  %23 = load i64, i64* %ob_size8, align 8, !dbg !3999, !tbaa !2108
  %inc9 = add i64 %23, 1, !dbg !3999
  store i64 %inc9, i64* %ob_size8, align 8, !dbg !3999, !tbaa !2108
  %24 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4000, !tbaa !1246
  %rightindex10 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %24, i32 0, i32 4, !dbg !4001
  %25 = load i64, i64* %rightindex10, align 8, !dbg !4002, !tbaa !2060
  %inc11 = add i64 %25, 1, !dbg !4002
  store i64 %inc11, i64* %rightindex10, align 8, !dbg !4002, !tbaa !2060
  %26 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !4003, !tbaa !1246
  %27 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4004, !tbaa !1246
  %rightindex12 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %27, i32 0, i32 4, !dbg !4005
  %28 = load i64, i64* %rightindex12, align 8, !dbg !4005, !tbaa !2060
  %29 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4006, !tbaa !1246
  %rightblock13 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %29, i32 0, i32 2, !dbg !4007
  %30 = load %struct.BLOCK*, %struct.BLOCK** %rightblock13, align 8, !dbg !4007, !tbaa !1888
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %30, i32 0, i32 1, !dbg !4008
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %28, !dbg !4006
  store %struct._object* %26, %struct._object** %arrayidx, align 8, !dbg !4009, !tbaa !1246
  %31 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4010, !tbaa !1246
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %31, i32 0, i32 6, !dbg !4011
  %32 = load i64, i64* %maxlen, align 8, !dbg !4011, !tbaa !1934
  %cmp14 = icmp ne i64 %32, -1, !dbg !4012
  br i1 %cmp14, label %land.lhs.true, label %if.end.24, !dbg !4013

land.lhs.true:                                    ; preds = %if.end.6
  %33 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4014, !tbaa !1246
  %34 = bitcast %struct.dequeobject* %33 to %struct.PyVarObject*, !dbg !4016
  %ob_size15 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %34, i32 0, i32 1, !dbg !4017
  %35 = load i64, i64* %ob_size15, align 8, !dbg !4017, !tbaa !2108
  %36 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4018, !tbaa !1246
  %maxlen16 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %36, i32 0, i32 6, !dbg !4019
  %37 = load i64, i64* %maxlen16, align 8, !dbg !4019, !tbaa !1934
  %cmp17 = icmp sgt i64 %35, %37, !dbg !4020
  br i1 %cmp17, label %if.then.18, label %if.end.24, !dbg !4021

if.then.18:                                       ; preds = %land.lhs.true
  %38 = bitcast %struct._object** %rv to i8*, !dbg !4022
  call void @llvm.lifetime.start(i64 8, i8* %38) #1, !dbg !4022
  call void @llvm.dbg.declare(metadata %struct._object** %rv, metadata !724, metadata !1242), !dbg !4024
  %39 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4025, !tbaa !1246
  %call19 = call %struct._object* @deque_popleft(%struct.dequeobject* %39, %struct._object* null), !dbg !4026
  store %struct._object* %call19, %struct._object** %rv, align 8, !dbg !4024, !tbaa !1246
  br label %do.body, !dbg !4027

do.body:                                          ; preds = %if.then.18
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4028
  call void @llvm.lifetime.start(i64 8, i8* %40) #1, !dbg !4028
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !727, metadata !1242), !dbg !4030
  %41 = load %struct._object*, %struct._object** %rv, align 8, !dbg !4031, !tbaa !1246
  store %struct._object* %41, %struct._object** %_py_decref_tmp, align 8, !dbg !4030, !tbaa !1246
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4032, !tbaa !1246
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !4034
  %43 = load i64, i64* %ob_refcnt20, align 8, !dbg !4035, !tbaa !1261
  %dec = add i64 %43, -1, !dbg !4035
  store i64 %dec, i64* %ob_refcnt20, align 8, !dbg !4035, !tbaa !1261
  %cmp21 = icmp ne i64 %dec, 0, !dbg !4036
  br i1 %cmp21, label %if.then.22, label %if.else, !dbg !4037

if.then.22:                                       ; preds = %do.body
  br label %if.end.23, !dbg !4038

if.else:                                          ; preds = %do.body
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4040, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !4042
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4042, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !4043
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4043, !tbaa !1444
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4044, !tbaa !1246
  call void %46(%struct._object* %47), !dbg !4045
  br label %if.end.23

if.end.23:                                        ; preds = %if.else, %if.then.22
  %48 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4046
  call void @llvm.lifetime.end(i64 8, i8* %48) #1, !dbg !4046
  br label %do.cond, !dbg !4048

do.cond:                                          ; preds = %if.end.23
  br label %do.end, !dbg !4049

do.end:                                           ; preds = %do.cond
  %49 = bitcast %struct._object** %rv to i8*, !dbg !4051
  call void @llvm.lifetime.end(i64 8, i8* %49) #1, !dbg !4051
  br label %if.end.24, !dbg !4053

if.end.24:                                        ; preds = %do.end, %land.lhs.true, %if.end.6
  %50 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4054, !tbaa !1261
  %inc25 = add i64 %50, 1, !dbg !4054
  store i64 %inc25, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4054, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4055
  br label %return, !dbg !4055

return:                                           ; preds = %if.end.24, %cleanup
  %51 = load %struct._object*, %struct._object** %retval, !dbg !4056
  ret %struct._object* %51, !dbg !4056

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_appendleft(%struct.dequeobject* %deque, %struct._object* %item) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %item.addr = alloca %struct._object*, align 8
  %b = alloca %struct.BLOCK*, align 8
  %cleanup.dest.slot = alloca i32
  %rv = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !731, metadata !1242), !dbg !4057
  store %struct._object* %item, %struct._object** %item.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %item.addr, metadata !732, metadata !1242), !dbg !4058
  %0 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4059, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %0, i32 0, i32 5, !dbg !4060
  %1 = load i64, i64* %state, align 8, !dbg !4061, !tbaa !2616
  %inc = add i64 %1, 1, !dbg !4061
  store i64 %inc, i64* %state, align 8, !dbg !4061, !tbaa !2616
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4062, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %2, i32 0, i32 3, !dbg !4063
  %3 = load i64, i64* %leftindex, align 8, !dbg !4063, !tbaa !1989
  %cmp = icmp eq i64 %3, 0, !dbg !4064
  br i1 %cmp, label %if.then, label %if.end.6, !dbg !4065

if.then:                                          ; preds = %entry
  %4 = bitcast %struct.BLOCK** %b to i8*, !dbg !4066
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !4066
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !733, metadata !1242), !dbg !4067
  %5 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4068, !tbaa !1246
  %6 = bitcast %struct.dequeobject* %5 to %struct.PyVarObject*, !dbg !4069
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !4070
  %7 = load i64, i64* %ob_size, align 8, !dbg !4070, !tbaa !2108
  %call = call %struct.BLOCK* @newblock(i64 %7), !dbg !4071
  store %struct.BLOCK* %call, %struct.BLOCK** %b, align 8, !dbg !4067, !tbaa !1246
  %8 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4072, !tbaa !1246
  %cmp1 = icmp eq %struct.BLOCK* %8, null, !dbg !4074
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !4075

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !4076
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4076

if.end:                                           ; preds = %if.then
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4077, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %9, i32 0, i32 1, !dbg !4078
  %10 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !4078, !tbaa !1872
  %11 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4079, !tbaa !1246
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %11, i32 0, i32 2, !dbg !4080
  store %struct.BLOCK* %10, %struct.BLOCK** %rightlink, align 8, !dbg !4081, !tbaa !2048
  %12 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4082, !tbaa !1246
  %13 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4083, !tbaa !1246
  %leftblock3 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %13, i32 0, i32 1, !dbg !4084
  %14 = load %struct.BLOCK*, %struct.BLOCK** %leftblock3, align 8, !dbg !4084, !tbaa !1872
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %14, i32 0, i32 0, !dbg !4085
  store %struct.BLOCK* %12, %struct.BLOCK** %leftlink, align 8, !dbg !4086, !tbaa !2933
  %15 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4087, !tbaa !1246
  %16 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4088, !tbaa !1246
  %leftblock4 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %16, i32 0, i32 1, !dbg !4089
  store %struct.BLOCK* %15, %struct.BLOCK** %leftblock4, align 8, !dbg !4090, !tbaa !1872
  %17 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4091, !tbaa !1246
  %leftindex5 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %17, i32 0, i32 3, !dbg !4092
  store i64 62, i64* %leftindex5, align 8, !dbg !4093, !tbaa !1989
  store i32 0, i32* %cleanup.dest.slot, !dbg !4094
  br label %cleanup, !dbg !4094

cleanup:                                          ; preds = %if.end, %if.then.2
  %18 = bitcast %struct.BLOCK** %b to i8*, !dbg !4095
  call void @llvm.lifetime.end(i64 8, i8* %18) #1, !dbg !4095
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.6, !dbg !4097

if.end.6:                                         ; preds = %cleanup.cont, %entry
  %19 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !4098, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0, !dbg !4099
  %20 = load i64, i64* %ob_refcnt, align 8, !dbg !4100, !tbaa !1261
  %inc7 = add i64 %20, 1, !dbg !4100
  store i64 %inc7, i64* %ob_refcnt, align 8, !dbg !4100, !tbaa !1261
  %21 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4101, !tbaa !1246
  %22 = bitcast %struct.dequeobject* %21 to %struct.PyVarObject*, !dbg !4102
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %22, i32 0, i32 1, !dbg !4103
  %23 = load i64, i64* %ob_size8, align 8, !dbg !4104, !tbaa !2108
  %inc9 = add i64 %23, 1, !dbg !4104
  store i64 %inc9, i64* %ob_size8, align 8, !dbg !4104, !tbaa !2108
  %24 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4105, !tbaa !1246
  %leftindex10 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %24, i32 0, i32 3, !dbg !4106
  %25 = load i64, i64* %leftindex10, align 8, !dbg !4107, !tbaa !1989
  %dec = add i64 %25, -1, !dbg !4107
  store i64 %dec, i64* %leftindex10, align 8, !dbg !4107, !tbaa !1989
  %26 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !4108, !tbaa !1246
  %27 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4109, !tbaa !1246
  %leftindex11 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %27, i32 0, i32 3, !dbg !4110
  %28 = load i64, i64* %leftindex11, align 8, !dbg !4110, !tbaa !1989
  %29 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4111, !tbaa !1246
  %leftblock12 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %29, i32 0, i32 1, !dbg !4112
  %30 = load %struct.BLOCK*, %struct.BLOCK** %leftblock12, align 8, !dbg !4112, !tbaa !1872
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %30, i32 0, i32 1, !dbg !4113
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %28, !dbg !4111
  store %struct._object* %26, %struct._object** %arrayidx, align 8, !dbg !4114, !tbaa !1246
  %31 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4115, !tbaa !1246
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %31, i32 0, i32 6, !dbg !4116
  %32 = load i64, i64* %maxlen, align 8, !dbg !4116, !tbaa !1934
  %cmp13 = icmp ne i64 %32, -1, !dbg !4117
  br i1 %cmp13, label %land.lhs.true, label %if.end.24, !dbg !4118

land.lhs.true:                                    ; preds = %if.end.6
  %33 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4119, !tbaa !1246
  %34 = bitcast %struct.dequeobject* %33 to %struct.PyVarObject*, !dbg !4121
  %ob_size14 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %34, i32 0, i32 1, !dbg !4122
  %35 = load i64, i64* %ob_size14, align 8, !dbg !4122, !tbaa !2108
  %36 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4123, !tbaa !1246
  %maxlen15 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %36, i32 0, i32 6, !dbg !4124
  %37 = load i64, i64* %maxlen15, align 8, !dbg !4124, !tbaa !1934
  %cmp16 = icmp sgt i64 %35, %37, !dbg !4125
  br i1 %cmp16, label %if.then.17, label %if.end.24, !dbg !4126

if.then.17:                                       ; preds = %land.lhs.true
  %38 = bitcast %struct._object** %rv to i8*, !dbg !4127
  call void @llvm.lifetime.start(i64 8, i8* %38) #1, !dbg !4127
  call void @llvm.dbg.declare(metadata %struct._object** %rv, metadata !736, metadata !1242), !dbg !4129
  %39 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4130, !tbaa !1246
  %call18 = call %struct._object* @deque_pop(%struct.dequeobject* %39, %struct._object* null), !dbg !4131
  store %struct._object* %call18, %struct._object** %rv, align 8, !dbg !4129, !tbaa !1246
  br label %do.body, !dbg !4132

do.body:                                          ; preds = %if.then.17
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4133
  call void @llvm.lifetime.start(i64 8, i8* %40) #1, !dbg !4133
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !739, metadata !1242), !dbg !4135
  %41 = load %struct._object*, %struct._object** %rv, align 8, !dbg !4136, !tbaa !1246
  store %struct._object* %41, %struct._object** %_py_decref_tmp, align 8, !dbg !4135, !tbaa !1246
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4137, !tbaa !1246
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !4139
  %43 = load i64, i64* %ob_refcnt19, align 8, !dbg !4140, !tbaa !1261
  %dec20 = add i64 %43, -1, !dbg !4140
  store i64 %dec20, i64* %ob_refcnt19, align 8, !dbg !4140, !tbaa !1261
  %cmp21 = icmp ne i64 %dec20, 0, !dbg !4141
  br i1 %cmp21, label %if.then.22, label %if.else, !dbg !4142

if.then.22:                                       ; preds = %do.body
  br label %if.end.23, !dbg !4143

if.else:                                          ; preds = %do.body
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4145, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !4147
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4147, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !4148
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4148, !tbaa !1444
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4149, !tbaa !1246
  call void %46(%struct._object* %47), !dbg !4150
  br label %if.end.23

if.end.23:                                        ; preds = %if.else, %if.then.22
  %48 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4151
  call void @llvm.lifetime.end(i64 8, i8* %48) #1, !dbg !4151
  br label %do.cond, !dbg !4153

do.cond:                                          ; preds = %if.end.23
  br label %do.end, !dbg !4154

do.end:                                           ; preds = %do.cond
  %49 = bitcast %struct._object** %rv to i8*, !dbg !4156
  call void @llvm.lifetime.end(i64 8, i8* %49) #1, !dbg !4156
  br label %if.end.24, !dbg !4158

if.end.24:                                        ; preds = %do.end, %land.lhs.true, %if.end.6
  %50 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4159, !tbaa !1261
  %inc25 = add i64 %50, 1, !dbg !4159
  store i64 %inc25, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4159, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4160
  br label %return, !dbg !4160

return:                                           ; preds = %if.end.24, %cleanup
  %51 = load %struct._object*, %struct._object** %retval, !dbg !4161
  ret %struct._object* %51, !dbg !4161

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_clearmethod(%struct.dequeobject* %deque) #0 {
entry:
  %deque.addr = alloca %struct.dequeobject*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !743, metadata !1242), !dbg !4162
  %0 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4163, !tbaa !1246
  call void @deque_clear(%struct.dequeobject* %0), !dbg !4164
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4165, !tbaa !1261
  %inc = add i64 %1, 1, !dbg !4165
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4165, !tbaa !1261
  ret %struct._object* @_Py_NoneStruct, !dbg !4166
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_copy(%struct._object* %deque) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct._object*, align 8
  store %struct._object* %deque, %struct._object** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %deque.addr, metadata !746, metadata !1242), !dbg !4167
  %0 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !4168, !tbaa !1246
  %1 = bitcast %struct._object* %0 to %struct.dequeobject*, !dbg !4170
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %1, i32 0, i32 6, !dbg !4171
  %2 = load i64, i64* %maxlen, align 8, !dbg !4171, !tbaa !1934
  %cmp = icmp eq i64 %2, -1, !dbg !4172
  br i1 %cmp, label %if.then, label %if.else, !dbg !4173

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !4174, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !4175
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4175, !tbaa !1345
  %5 = bitcast %struct._typeobject* %4 to %struct._object*, !dbg !4176
  %6 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !4177, !tbaa !1246
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyObject_CallFunction(%struct._object* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i32 0, i32 0), %struct._object* %6, i8* null), !dbg !4178
  store %struct._object* %call, %struct._object** %retval, !dbg !4179
  br label %return, !dbg !4179

if.else:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !4180, !tbaa !1246
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !4181
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !4181, !tbaa !1345
  %9 = bitcast %struct._typeobject* %8 to %struct._object*, !dbg !4182
  %10 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !4183, !tbaa !1246
  %11 = load %struct._object*, %struct._object** %deque.addr, align 8, !dbg !4184, !tbaa !1246
  %12 = bitcast %struct._object* %11 to %struct.dequeobject*, !dbg !4185
  %maxlen2 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %12, i32 0, i32 6, !dbg !4186
  %13 = load i64, i64* %maxlen2, align 8, !dbg !4186, !tbaa !1934
  %call3 = call %struct._object* (%struct._object*, i8*, ...) @PyObject_CallFunction(%struct._object* %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), %struct._object* %10, i64 %13, i8* null), !dbg !4187
  store %struct._object* %call3, %struct._object** %retval, !dbg !4188
  br label %return, !dbg !4188

return:                                           ; preds = %if.else, %if.then
  %14 = load %struct._object*, %struct._object** %retval, !dbg !4189
  ret %struct._object* %14, !dbg !4189
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_count(%struct.dequeobject* %deque, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %v.addr = alloca %struct._object*, align 8
  %b = alloca %struct.BLOCK*, align 8
  %index = alloca i64, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %count = alloca i64, align 8
  %item = alloca %struct._object*, align 8
  %start_state = alloca i64, align 8
  %cmp = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !749, metadata !1242), !dbg !4190
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !750, metadata !1242), !dbg !4191
  %0 = bitcast %struct.BLOCK** %b to i8*, !dbg !4192
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4192
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !751, metadata !1242), !dbg !4193
  %1 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4194, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %1, i32 0, i32 1, !dbg !4195
  %2 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !4195, !tbaa !1872
  store %struct.BLOCK* %2, %struct.BLOCK** %b, align 8, !dbg !4193, !tbaa !1246
  %3 = bitcast i64* %index to i8*, !dbg !4196
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !4196
  call void @llvm.dbg.declare(metadata i64* %index, metadata !752, metadata !1242), !dbg !4197
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4198, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %4, i32 0, i32 3, !dbg !4199
  %5 = load i64, i64* %leftindex, align 8, !dbg !4199, !tbaa !1989
  store i64 %5, i64* %index, align 8, !dbg !4197, !tbaa !1990
  %6 = bitcast i64* %n to i8*, !dbg !4200
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !4200
  call void @llvm.dbg.declare(metadata i64* %n, metadata !753, metadata !1242), !dbg !4201
  %7 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4202, !tbaa !1246
  %8 = bitcast %struct.dequeobject* %7 to %struct.PyVarObject*, !dbg !4203
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !4204
  %9 = load i64, i64* %ob_size, align 8, !dbg !4204, !tbaa !2108
  store i64 %9, i64* %n, align 8, !dbg !4201, !tbaa !1990
  %10 = bitcast i64* %i to i8*, !dbg !4205
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !4205
  call void @llvm.dbg.declare(metadata i64* %i, metadata !754, metadata !1242), !dbg !4206
  %11 = bitcast i64* %count to i8*, !dbg !4207
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !4207
  call void @llvm.dbg.declare(metadata i64* %count, metadata !755, metadata !1242), !dbg !4208
  store i64 0, i64* %count, align 8, !dbg !4208, !tbaa !1990
  %12 = bitcast %struct._object** %item to i8*, !dbg !4209
  call void @llvm.lifetime.start(i64 8, i8* %12) #1, !dbg !4209
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !756, metadata !1242), !dbg !4210
  %13 = bitcast i64* %start_state to i8*, !dbg !4211
  call void @llvm.lifetime.start(i64 8, i8* %13) #1, !dbg !4211
  call void @llvm.dbg.declare(metadata i64* %start_state, metadata !757, metadata !1242), !dbg !4212
  %14 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4213, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %14, i32 0, i32 5, !dbg !4214
  %15 = load i64, i64* %state, align 8, !dbg !4214, !tbaa !2616
  store i64 %15, i64* %start_state, align 8, !dbg !4212, !tbaa !1990
  %16 = bitcast i32* %cmp to i8*, !dbg !4215
  call void @llvm.lifetime.start(i64 4, i8* %16) #1, !dbg !4215
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !758, metadata !1242), !dbg !4216
  store i64 0, i64* %i, align 8, !dbg !4217, !tbaa !1990
  br label %for.cond, !dbg !4219

for.cond:                                         ; preds = %for.inc, %entry
  %17 = load i64, i64* %i, align 8, !dbg !4220, !tbaa !1990
  %18 = load i64, i64* %n, align 8, !dbg !4224, !tbaa !1990
  %cmp1 = icmp slt i64 %17, %18, !dbg !4225
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4226

for.body:                                         ; preds = %for.cond
  %19 = load i64, i64* %index, align 8, !dbg !4227, !tbaa !1990
  %20 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4229, !tbaa !1246
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %20, i32 0, i32 1, !dbg !4230
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %19, !dbg !4229
  %21 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !4229, !tbaa !1246
  store %struct._object* %21, %struct._object** %item, align 8, !dbg !4231, !tbaa !1246
  %22 = load %struct._object*, %struct._object** %item, align 8, !dbg !4232, !tbaa !1246
  %23 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4233, !tbaa !1246
  %call = call i32 @PyObject_RichCompareBool(%struct._object* %22, %struct._object* %23, i32 2), !dbg !4234
  store i32 %call, i32* %cmp, align 4, !dbg !4235, !tbaa !1906
  %24 = load i32, i32* %cmp, align 4, !dbg !4236, !tbaa !1906
  %cmp2 = icmp sgt i32 %24, 0, !dbg !4238
  br i1 %cmp2, label %if.then, label %if.else, !dbg !4239

if.then:                                          ; preds = %for.body
  %25 = load i64, i64* %count, align 8, !dbg !4240, !tbaa !1990
  %inc = add i64 %25, 1, !dbg !4240
  store i64 %inc, i64* %count, align 8, !dbg !4240, !tbaa !1990
  br label %if.end.5, !dbg !4241

if.else:                                          ; preds = %for.body
  %26 = load i32, i32* %cmp, align 4, !dbg !4242, !tbaa !1906
  %cmp3 = icmp slt i32 %26, 0, !dbg !4244
  br i1 %cmp3, label %if.then.4, label %if.end, !dbg !4245

if.then.4:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval, !dbg !4246
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4246

if.end:                                           ; preds = %if.else
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %if.then
  %27 = load i64, i64* %start_state, align 8, !dbg !4247, !tbaa !1990
  %28 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4249, !tbaa !1246
  %state6 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %28, i32 0, i32 5, !dbg !4250
  %29 = load i64, i64* %state6, align 8, !dbg !4250, !tbaa !2616
  %cmp7 = icmp ne i64 %27, %29, !dbg !4251
  br i1 %cmp7, label %if.then.8, label %if.end.9, !dbg !4252

if.then.8:                                        ; preds = %if.end.5
  %30 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !4253, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %30, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i32 0, i32 0)), !dbg !4255
  store %struct._object* null, %struct._object** %retval, !dbg !4256
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4256

if.end.9:                                         ; preds = %if.end.5
  %31 = load i64, i64* %index, align 8, !dbg !4257, !tbaa !1990
  %inc10 = add i64 %31, 1, !dbg !4257
  store i64 %inc10, i64* %index, align 8, !dbg !4257, !tbaa !1990
  %32 = load i64, i64* %index, align 8, !dbg !4258, !tbaa !1990
  %cmp11 = icmp eq i64 %32, 62, !dbg !4260
  br i1 %cmp11, label %if.then.12, label %if.end.13, !dbg !4261

if.then.12:                                       ; preds = %if.end.9
  %33 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4262, !tbaa !1246
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %33, i32 0, i32 2, !dbg !4264
  %34 = load %struct.BLOCK*, %struct.BLOCK** %rightlink, align 8, !dbg !4264, !tbaa !2048
  store %struct.BLOCK* %34, %struct.BLOCK** %b, align 8, !dbg !4265, !tbaa !1246
  store i64 0, i64* %index, align 8, !dbg !4266, !tbaa !1990
  br label %if.end.13, !dbg !4267

if.end.13:                                        ; preds = %if.then.12, %if.end.9
  br label %for.inc, !dbg !4268

for.inc:                                          ; preds = %if.end.13
  %35 = load i64, i64* %i, align 8, !dbg !4269, !tbaa !1990
  %inc14 = add i64 %35, 1, !dbg !4269
  store i64 %inc14, i64* %i, align 8, !dbg !4269, !tbaa !1990
  br label %for.cond, !dbg !4270

for.end:                                          ; preds = %for.cond
  %36 = load i64, i64* %count, align 8, !dbg !4271, !tbaa !1990
  %call15 = call %struct._object* @PyLong_FromSsize_t(i64 %36), !dbg !4272
  store %struct._object* %call15, %struct._object** %retval, !dbg !4273
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4273

cleanup:                                          ; preds = %for.end, %if.then.8, %if.then.4
  %37 = bitcast i32* %cmp to i8*, !dbg !4274
  call void @llvm.lifetime.end(i64 4, i8* %37) #1, !dbg !4274
  %38 = bitcast i64* %start_state to i8*, !dbg !4274
  call void @llvm.lifetime.end(i64 8, i8* %38) #1, !dbg !4274
  %39 = bitcast %struct._object** %item to i8*, !dbg !4274
  call void @llvm.lifetime.end(i64 8, i8* %39) #1, !dbg !4274
  %40 = bitcast i64* %count to i8*, !dbg !4274
  call void @llvm.lifetime.end(i64 8, i8* %40) #1, !dbg !4274
  %41 = bitcast i64* %i to i8*, !dbg !4274
  call void @llvm.lifetime.end(i64 8, i8* %41) #1, !dbg !4274
  %42 = bitcast i64* %n to i8*, !dbg !4274
  call void @llvm.lifetime.end(i64 8, i8* %42) #1, !dbg !4274
  %43 = bitcast i64* %index to i8*, !dbg !4274
  call void @llvm.lifetime.end(i64 8, i8* %43) #1, !dbg !4274
  %44 = bitcast %struct.BLOCK** %b to i8*, !dbg !4274
  call void @llvm.lifetime.end(i64 8, i8* %44) #1, !dbg !4274
  %45 = load %struct._object*, %struct._object** %retval, !dbg !4274
  ret %struct._object* %45, !dbg !4274
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_extendleft(%struct.dequeobject* %deque, %struct._object* %iterable) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %iterable.addr = alloca %struct._object*, align 8
  %it = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %s = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %b = alloca %struct.BLOCK*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %rv = alloca %struct._object*, align 8
  %_py_decref_tmp73 = alloca %struct._object*, align 8
  %_py_decref_tmp86 = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !761, metadata !1242), !dbg !4275
  store %struct._object* %iterable, %struct._object** %iterable.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %iterable.addr, metadata !762, metadata !1242), !dbg !4276
  %0 = bitcast %struct._object** %it to i8*, !dbg !4277
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4277
  call void @llvm.dbg.declare(metadata %struct._object** %it, metadata !763, metadata !1242), !dbg !4278
  %1 = bitcast %struct._object** %item to i8*, !dbg !4277
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4277
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !764, metadata !1242), !dbg !4279
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4280, !tbaa !1246
  %3 = bitcast %struct.dequeobject* %2 to %struct._object*, !dbg !4281
  %4 = load %struct._object*, %struct._object** %iterable.addr, align 8, !dbg !4282, !tbaa !1246
  %cmp = icmp eq %struct._object* %3, %4, !dbg !4283
  br i1 %cmp, label %if.then, label %if.end.8, !dbg !4284

if.then:                                          ; preds = %entry
  %5 = bitcast %struct._object** %result to i8*, !dbg !4285
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !4285
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !765, metadata !1242), !dbg !4286
  %6 = bitcast %struct._object** %s to i8*, !dbg !4287
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !4287
  call void @llvm.dbg.declare(metadata %struct._object** %s, metadata !768, metadata !1242), !dbg !4288
  %7 = load %struct._object*, %struct._object** %iterable.addr, align 8, !dbg !4289, !tbaa !1246
  %call = call %struct._object* @PySequence_List(%struct._object* %7), !dbg !4290
  store %struct._object* %call, %struct._object** %s, align 8, !dbg !4288, !tbaa !1246
  %8 = load %struct._object*, %struct._object** %s, align 8, !dbg !4291, !tbaa !1246
  %cmp1 = icmp eq %struct._object* %8, null, !dbg !4293
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !4294

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !4295
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4295

if.end:                                           ; preds = %if.then
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4296, !tbaa !1246
  %10 = load %struct._object*, %struct._object** %s, align 8, !dbg !4297, !tbaa !1246
  %call3 = call %struct._object* @deque_extendleft(%struct.dequeobject* %9, %struct._object* %10), !dbg !4298
  store %struct._object* %call3, %struct._object** %result, align 8, !dbg !4299, !tbaa !1246
  br label %do.body, !dbg !4300

do.body:                                          ; preds = %if.end
  %11 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4301
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !4301
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !769, metadata !1242), !dbg !4303
  %12 = load %struct._object*, %struct._object** %s, align 8, !dbg !4304, !tbaa !1246
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8, !dbg !4303, !tbaa !1246
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4305, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0, !dbg !4307
  %14 = load i64, i64* %ob_refcnt, align 8, !dbg !4308, !tbaa !1261
  %dec = add i64 %14, -1, !dbg !4308
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4308, !tbaa !1261
  %cmp4 = icmp ne i64 %dec, 0, !dbg !4309
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !4310

if.then.5:                                        ; preds = %do.body
  br label %if.end.6, !dbg !4311

if.else:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4313, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !4315
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4315, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4, !dbg !4316
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4316, !tbaa !1444
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4317, !tbaa !1246
  call void %17(%struct._object* %18), !dbg !4318
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4319
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !4319
  br label %do.cond, !dbg !4321

do.cond:                                          ; preds = %if.end.6
  br label %do.end, !dbg !4322

do.end:                                           ; preds = %do.cond
  %20 = load %struct._object*, %struct._object** %result, align 8, !dbg !4324, !tbaa !1246
  store %struct._object* %20, %struct._object** %retval, !dbg !4325
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4325

cleanup:                                          ; preds = %do.end, %if.then.2
  %21 = bitcast %struct._object** %s to i8*, !dbg !4326
  call void @llvm.lifetime.end(i64 8, i8* %21) #1, !dbg !4326
  %22 = bitcast %struct._object** %result to i8*, !dbg !4326
  call void @llvm.lifetime.end(i64 8, i8* %22) #1, !dbg !4326
  br label %cleanup.101

if.end.8:                                         ; preds = %entry
  %23 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4327, !tbaa !1246
  %24 = bitcast %struct.dequeobject* %23 to %struct.PyVarObject*, !dbg !4329
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %24, i32 0, i32 1, !dbg !4330
  %25 = load i64, i64* %ob_size, align 8, !dbg !4330, !tbaa !2108
  %cmp9 = icmp eq i64 %25, 0, !dbg !4331
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !4332

if.then.10:                                       ; preds = %if.end.8
  %26 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4333, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %26, i32 0, i32 3, !dbg !4335
  store i64 61, i64* %leftindex, align 8, !dbg !4336, !tbaa !1989
  %27 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4337, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %27, i32 0, i32 4, !dbg !4338
  store i64 60, i64* %rightindex, align 8, !dbg !4339, !tbaa !2060
  br label %if.end.11, !dbg !4340

if.end.11:                                        ; preds = %if.then.10, %if.end.8
  %28 = load %struct._object*, %struct._object** %iterable.addr, align 8, !dbg !4341, !tbaa !1246
  %call12 = call %struct._object* @PyObject_GetIter(%struct._object* %28), !dbg !4342
  store %struct._object* %call12, %struct._object** %it, align 8, !dbg !4343, !tbaa !1246
  %29 = load %struct._object*, %struct._object** %it, align 8, !dbg !4344, !tbaa !1246
  %cmp13 = icmp eq %struct._object* %29, null, !dbg !4346
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !4347

if.then.14:                                       ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval, !dbg !4348
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.101, !dbg !4348

if.end.15:                                        ; preds = %if.end.11
  %30 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4349, !tbaa !1246
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %30, i32 0, i32 6, !dbg !4351
  %31 = load i64, i64* %maxlen, align 8, !dbg !4351, !tbaa !1934
  %cmp16 = icmp eq i64 %31, 0, !dbg !4352
  br i1 %cmp16, label %if.then.17, label %if.end.19, !dbg !4353

if.then.17:                                       ; preds = %if.end.15
  %32 = load %struct._object*, %struct._object** %it, align 8, !dbg !4354, !tbaa !1246
  %call18 = call %struct._object* @consume_iterator(%struct._object* %32), !dbg !4355
  store %struct._object* %call18, %struct._object** %retval, !dbg !4356
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.101, !dbg !4356

if.end.19:                                        ; preds = %if.end.15
  br label %while.cond, !dbg !4357

while.cond:                                       ; preds = %if.end.84, %if.end.19
  %33 = load %struct._object*, %struct._object** %it, align 8, !dbg !4358, !tbaa !1246
  %call20 = call %struct._object* @PyIter_Next(%struct._object* %33), !dbg !4361
  store %struct._object* %call20, %struct._object** %item, align 8, !dbg !4362, !tbaa !1246
  %cmp21 = icmp ne %struct._object* %call20, null, !dbg !4363
  br i1 %cmp21, label %while.body, label %while.end, !dbg !4357

while.body:                                       ; preds = %while.cond
  %34 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4364, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %34, i32 0, i32 5, !dbg !4365
  %35 = load i64, i64* %state, align 8, !dbg !4366, !tbaa !2616
  %inc = add i64 %35, 1, !dbg !4366
  store i64 %inc, i64* %state, align 8, !dbg !4366, !tbaa !2616
  %36 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4367, !tbaa !1246
  %leftindex22 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %36, i32 0, i32 3, !dbg !4368
  %37 = load i64, i64* %leftindex22, align 8, !dbg !4368, !tbaa !1989
  %cmp23 = icmp eq i64 %37, 0, !dbg !4369
  br i1 %cmp23, label %if.then.24, label %if.end.58, !dbg !4370

if.then.24:                                       ; preds = %while.body
  %38 = bitcast %struct.BLOCK** %b to i8*, !dbg !4371
  call void @llvm.lifetime.start(i64 8, i8* %38) #1, !dbg !4371
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %b, metadata !771, metadata !1242), !dbg !4372
  %39 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4373, !tbaa !1246
  %40 = bitcast %struct.dequeobject* %39 to %struct.PyVarObject*, !dbg !4374
  %ob_size25 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %40, i32 0, i32 1, !dbg !4375
  %41 = load i64, i64* %ob_size25, align 8, !dbg !4375, !tbaa !2108
  %call26 = call %struct.BLOCK* @newblock(i64 %41), !dbg !4376
  store %struct.BLOCK* %call26, %struct.BLOCK** %b, align 8, !dbg !4372, !tbaa !1246
  %42 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4377, !tbaa !1246
  %cmp27 = icmp eq %struct.BLOCK* %42, null, !dbg !4378
  br i1 %cmp27, label %if.then.28, label %if.end.53, !dbg !4379

if.then.28:                                       ; preds = %if.then.24
  br label %do.body.29, !dbg !4380

do.body.29:                                       ; preds = %if.then.28
  %43 = bitcast %struct._object** %_py_decref_tmp30 to i8*, !dbg !4381
  call void @llvm.lifetime.start(i64 8, i8* %43) #1, !dbg !4381
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp30, metadata !775, metadata !1242), !dbg !4383
  %44 = load %struct._object*, %struct._object** %item, align 8, !dbg !4384, !tbaa !1246
  store %struct._object* %44, %struct._object** %_py_decref_tmp30, align 8, !dbg !4383, !tbaa !1246
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8, !dbg !4385, !tbaa !1246
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0, !dbg !4387
  %46 = load i64, i64* %ob_refcnt31, align 8, !dbg !4388, !tbaa !1261
  %dec32 = add i64 %46, -1, !dbg !4388
  store i64 %dec32, i64* %ob_refcnt31, align 8, !dbg !4388, !tbaa !1261
  %cmp33 = icmp ne i64 %dec32, 0, !dbg !4389
  br i1 %cmp33, label %if.then.34, label %if.else.35, !dbg !4390

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38, !dbg !4391

if.else.35:                                       ; preds = %do.body.29
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8, !dbg !4393, !tbaa !1246
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1, !dbg !4395
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8, !dbg !4395, !tbaa !1345
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4, !dbg !4396
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8, !dbg !4396, !tbaa !1444
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8, !dbg !4397, !tbaa !1246
  call void %49(%struct._object* %50), !dbg !4398
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  %51 = bitcast %struct._object** %_py_decref_tmp30 to i8*, !dbg !4399
  call void @llvm.lifetime.end(i64 8, i8* %51) #1, !dbg !4399
  br label %do.cond.39, !dbg !4401

do.cond.39:                                       ; preds = %if.end.38
  br label %do.end.40, !dbg !4402

do.end.40:                                        ; preds = %do.cond.39
  br label %do.body.41, !dbg !4404

do.body.41:                                       ; preds = %do.end.40
  %52 = bitcast %struct._object** %_py_decref_tmp42 to i8*, !dbg !4405
  call void @llvm.lifetime.start(i64 8, i8* %52) #1, !dbg !4405
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp42, metadata !779, metadata !1242), !dbg !4407
  %53 = load %struct._object*, %struct._object** %it, align 8, !dbg !4408, !tbaa !1246
  store %struct._object* %53, %struct._object** %_py_decref_tmp42, align 8, !dbg !4407, !tbaa !1246
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !4409, !tbaa !1246
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0, !dbg !4411
  %55 = load i64, i64* %ob_refcnt43, align 8, !dbg !4412, !tbaa !1261
  %dec44 = add i64 %55, -1, !dbg !4412
  store i64 %dec44, i64* %ob_refcnt43, align 8, !dbg !4412, !tbaa !1261
  %cmp45 = icmp ne i64 %dec44, 0, !dbg !4413
  br i1 %cmp45, label %if.then.46, label %if.else.47, !dbg !4414

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50, !dbg !4415

if.else.47:                                       ; preds = %do.body.41
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !4417, !tbaa !1246
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1, !dbg !4419
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8, !dbg !4419, !tbaa !1345
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4, !dbg !4420
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8, !dbg !4420, !tbaa !1444
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !4421, !tbaa !1246
  call void %58(%struct._object* %59), !dbg !4422
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  %60 = bitcast %struct._object** %_py_decref_tmp42 to i8*, !dbg !4423
  call void @llvm.lifetime.end(i64 8, i8* %60) #1, !dbg !4423
  br label %do.cond.51, !dbg !4424

do.cond.51:                                       ; preds = %if.end.50
  br label %do.end.52, !dbg !4425

do.end.52:                                        ; preds = %do.cond.51
  store %struct._object* null, %struct._object** %retval, !dbg !4427
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.57, !dbg !4427

if.end.53:                                        ; preds = %if.then.24
  %61 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4428, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %61, i32 0, i32 1, !dbg !4429
  %62 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !4429, !tbaa !1872
  %63 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4430, !tbaa !1246
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %63, i32 0, i32 2, !dbg !4431
  store %struct.BLOCK* %62, %struct.BLOCK** %rightlink, align 8, !dbg !4432, !tbaa !2048
  %64 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4433, !tbaa !1246
  %65 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4434, !tbaa !1246
  %leftblock54 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %65, i32 0, i32 1, !dbg !4435
  %66 = load %struct.BLOCK*, %struct.BLOCK** %leftblock54, align 8, !dbg !4435, !tbaa !1872
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %66, i32 0, i32 0, !dbg !4436
  store %struct.BLOCK* %64, %struct.BLOCK** %leftlink, align 8, !dbg !4437, !tbaa !2933
  %67 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !4438, !tbaa !1246
  %68 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4439, !tbaa !1246
  %leftblock55 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %68, i32 0, i32 1, !dbg !4440
  store %struct.BLOCK* %67, %struct.BLOCK** %leftblock55, align 8, !dbg !4441, !tbaa !1872
  %69 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4442, !tbaa !1246
  %leftindex56 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %69, i32 0, i32 3, !dbg !4443
  store i64 62, i64* %leftindex56, align 8, !dbg !4444, !tbaa !1989
  store i32 0, i32* %cleanup.dest.slot, !dbg !4445
  br label %cleanup.57, !dbg !4445

cleanup.57:                                       ; preds = %if.end.53, %do.end.52
  %70 = bitcast %struct.BLOCK** %b to i8*, !dbg !4446
  call void @llvm.lifetime.end(i64 8, i8* %70) #1, !dbg !4446
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.101 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup.57
  br label %if.end.58, !dbg !4448

if.end.58:                                        ; preds = %cleanup.cont, %while.body
  %71 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4449, !tbaa !1246
  %72 = bitcast %struct.dequeobject* %71 to %struct.PyVarObject*, !dbg !4450
  %ob_size59 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %72, i32 0, i32 1, !dbg !4451
  %73 = load i64, i64* %ob_size59, align 8, !dbg !4452, !tbaa !2108
  %inc60 = add i64 %73, 1, !dbg !4452
  store i64 %inc60, i64* %ob_size59, align 8, !dbg !4452, !tbaa !2108
  %74 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4453, !tbaa !1246
  %leftindex61 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %74, i32 0, i32 3, !dbg !4454
  %75 = load i64, i64* %leftindex61, align 8, !dbg !4455, !tbaa !1989
  %dec62 = add i64 %75, -1, !dbg !4455
  store i64 %dec62, i64* %leftindex61, align 8, !dbg !4455, !tbaa !1989
  %76 = load %struct._object*, %struct._object** %item, align 8, !dbg !4456, !tbaa !1246
  %77 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4457, !tbaa !1246
  %leftindex63 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %77, i32 0, i32 3, !dbg !4458
  %78 = load i64, i64* %leftindex63, align 8, !dbg !4458, !tbaa !1989
  %79 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4459, !tbaa !1246
  %leftblock64 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %79, i32 0, i32 1, !dbg !4460
  %80 = load %struct.BLOCK*, %struct.BLOCK** %leftblock64, align 8, !dbg !4460, !tbaa !1872
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %80, i32 0, i32 1, !dbg !4461
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %78, !dbg !4459
  store %struct._object* %76, %struct._object** %arrayidx, align 8, !dbg !4462, !tbaa !1246
  %81 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4463, !tbaa !1246
  %maxlen65 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %81, i32 0, i32 6, !dbg !4464
  %82 = load i64, i64* %maxlen65, align 8, !dbg !4464, !tbaa !1934
  %cmp66 = icmp ne i64 %82, -1, !dbg !4465
  br i1 %cmp66, label %land.lhs.true, label %if.end.84, !dbg !4466

land.lhs.true:                                    ; preds = %if.end.58
  %83 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4467, !tbaa !1246
  %84 = bitcast %struct.dequeobject* %83 to %struct.PyVarObject*, !dbg !4469
  %ob_size67 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %84, i32 0, i32 1, !dbg !4470
  %85 = load i64, i64* %ob_size67, align 8, !dbg !4470, !tbaa !2108
  %86 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4471, !tbaa !1246
  %maxlen68 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %86, i32 0, i32 6, !dbg !4472
  %87 = load i64, i64* %maxlen68, align 8, !dbg !4472, !tbaa !1934
  %cmp69 = icmp sgt i64 %85, %87, !dbg !4473
  br i1 %cmp69, label %if.then.70, label %if.end.84, !dbg !4474

if.then.70:                                       ; preds = %land.lhs.true
  %88 = bitcast %struct._object** %rv to i8*, !dbg !4475
  call void @llvm.lifetime.start(i64 8, i8* %88) #1, !dbg !4475
  call void @llvm.dbg.declare(metadata %struct._object** %rv, metadata !781, metadata !1242), !dbg !4477
  %89 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4478, !tbaa !1246
  %call71 = call %struct._object* @deque_pop(%struct.dequeobject* %89, %struct._object* null), !dbg !4479
  store %struct._object* %call71, %struct._object** %rv, align 8, !dbg !4477, !tbaa !1246
  br label %do.body.72, !dbg !4480

do.body.72:                                       ; preds = %if.then.70
  %90 = bitcast %struct._object** %_py_decref_tmp73 to i8*, !dbg !4481
  call void @llvm.lifetime.start(i64 8, i8* %90) #1, !dbg !4481
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp73, metadata !784, metadata !1242), !dbg !4483
  %91 = load %struct._object*, %struct._object** %rv, align 8, !dbg !4484, !tbaa !1246
  store %struct._object* %91, %struct._object** %_py_decref_tmp73, align 8, !dbg !4483, !tbaa !1246
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8, !dbg !4485, !tbaa !1246
  %ob_refcnt74 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0, !dbg !4487
  %93 = load i64, i64* %ob_refcnt74, align 8, !dbg !4488, !tbaa !1261
  %dec75 = add i64 %93, -1, !dbg !4488
  store i64 %dec75, i64* %ob_refcnt74, align 8, !dbg !4488, !tbaa !1261
  %cmp76 = icmp ne i64 %dec75, 0, !dbg !4489
  br i1 %cmp76, label %if.then.77, label %if.else.78, !dbg !4490

if.then.77:                                       ; preds = %do.body.72
  br label %if.end.81, !dbg !4491

if.else.78:                                       ; preds = %do.body.72
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8, !dbg !4493, !tbaa !1246
  %ob_type79 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1, !dbg !4495
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type79, align 8, !dbg !4495, !tbaa !1345
  %tp_dealloc80 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4, !dbg !4496
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc80, align 8, !dbg !4496, !tbaa !1444
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8, !dbg !4497, !tbaa !1246
  call void %96(%struct._object* %97), !dbg !4498
  br label %if.end.81

if.end.81:                                        ; preds = %if.else.78, %if.then.77
  %98 = bitcast %struct._object** %_py_decref_tmp73 to i8*, !dbg !4499
  call void @llvm.lifetime.end(i64 8, i8* %98) #1, !dbg !4499
  br label %do.cond.82, !dbg !4501

do.cond.82:                                       ; preds = %if.end.81
  br label %do.end.83, !dbg !4502

do.end.83:                                        ; preds = %do.cond.82
  %99 = bitcast %struct._object** %rv to i8*, !dbg !4504
  call void @llvm.lifetime.end(i64 8, i8* %99) #1, !dbg !4504
  br label %if.end.84, !dbg !4506

if.end.84:                                        ; preds = %do.end.83, %land.lhs.true, %if.end.58
  br label %while.cond, !dbg !4357

while.end:                                        ; preds = %while.cond
  br label %do.body.85, !dbg !4507

do.body.85:                                       ; preds = %while.end
  %100 = bitcast %struct._object** %_py_decref_tmp86 to i8*, !dbg !4508
  call void @llvm.lifetime.start(i64 8, i8* %100) #1, !dbg !4508
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp86, metadata !786, metadata !1242), !dbg !4510
  %101 = load %struct._object*, %struct._object** %it, align 8, !dbg !4511, !tbaa !1246
  store %struct._object* %101, %struct._object** %_py_decref_tmp86, align 8, !dbg !4510, !tbaa !1246
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8, !dbg !4512, !tbaa !1246
  %ob_refcnt87 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 0, !dbg !4514
  %103 = load i64, i64* %ob_refcnt87, align 8, !dbg !4515, !tbaa !1261
  %dec88 = add i64 %103, -1, !dbg !4515
  store i64 %dec88, i64* %ob_refcnt87, align 8, !dbg !4515, !tbaa !1261
  %cmp89 = icmp ne i64 %dec88, 0, !dbg !4516
  br i1 %cmp89, label %if.then.90, label %if.else.91, !dbg !4517

if.then.90:                                       ; preds = %do.body.85
  br label %if.end.94, !dbg !4518

if.else.91:                                       ; preds = %do.body.85
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8, !dbg !4520, !tbaa !1246
  %ob_type92 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1, !dbg !4522
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type92, align 8, !dbg !4522, !tbaa !1345
  %tp_dealloc93 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 4, !dbg !4523
  %106 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc93, align 8, !dbg !4523, !tbaa !1444
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8, !dbg !4524, !tbaa !1246
  call void %106(%struct._object* %107), !dbg !4525
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.91, %if.then.90
  %108 = bitcast %struct._object** %_py_decref_tmp86 to i8*, !dbg !4526
  call void @llvm.lifetime.end(i64 8, i8* %108) #1, !dbg !4526
  br label %do.cond.95, !dbg !4528

do.cond.95:                                       ; preds = %if.end.94
  br label %do.end.96, !dbg !4529

do.end.96:                                        ; preds = %do.cond.95
  %call97 = call %struct._object* @PyErr_Occurred(), !dbg !4531
  %tobool = icmp ne %struct._object* %call97, null, !dbg !4531
  br i1 %tobool, label %if.then.98, label %if.end.99, !dbg !4533

if.then.98:                                       ; preds = %do.end.96
  store %struct._object* null, %struct._object** %retval, !dbg !4534
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.101, !dbg !4534

if.end.99:                                        ; preds = %do.end.96
  %109 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4535, !tbaa !1261
  %inc100 = add i64 %109, 1, !dbg !4535
  store i64 %inc100, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4535, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4536
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.101, !dbg !4536

cleanup.101:                                      ; preds = %if.end.99, %if.then.98, %cleanup.57, %if.then.17, %if.then.14, %cleanup
  %110 = bitcast %struct._object** %item to i8*, !dbg !4537
  call void @llvm.lifetime.end(i64 8, i8* %110) #1, !dbg !4537
  %111 = bitcast %struct._object** %it to i8*, !dbg !4537
  call void @llvm.lifetime.end(i64 8, i8* %111) #1, !dbg !4537
  %112 = load %struct._object*, %struct._object** %retval, !dbg !4537
  ret %struct._object* %112, !dbg !4537
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_reduce(%struct.dequeobject* %deque) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %dict = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %aslist = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xdecref_tmp38 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !790, metadata !1242), !dbg !4538
  %0 = bitcast %struct._object** %dict to i8*, !dbg !4539
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4539
  call void @llvm.dbg.declare(metadata %struct._object** %dict, metadata !791, metadata !1242), !dbg !4540
  %1 = bitcast %struct._object** %result to i8*, !dbg !4539
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4539
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !792, metadata !1242), !dbg !4541
  %2 = bitcast %struct._object** %aslist to i8*, !dbg !4539
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !4539
  call void @llvm.dbg.declare(metadata %struct._object** %aslist, metadata !793, metadata !1242), !dbg !4542
  %3 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4543, !tbaa !1246
  %4 = bitcast %struct.dequeobject* %3 to %struct._object*, !dbg !4544
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %4, %struct._Py_Identifier* @deque_reduce.PyId___dict__), !dbg !4545
  store %struct._object* %call, %struct._object** %dict, align 8, !dbg !4546, !tbaa !1246
  %5 = load %struct._object*, %struct._object** %dict, align 8, !dbg !4547, !tbaa !1246
  %cmp = icmp eq %struct._object* %5, null, !dbg !4549
  br i1 %cmp, label %if.then, label %if.end, !dbg !4550

if.then:                                          ; preds = %entry
  call void @PyErr_Clear(), !dbg !4551
  br label %if.end, !dbg !4551

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4552, !tbaa !1246
  %7 = bitcast %struct.dequeobject* %6 to %struct._object*, !dbg !4553
  %call1 = call %struct._object* @PySequence_List(%struct._object* %7), !dbg !4554
  store %struct._object* %call1, %struct._object** %aslist, align 8, !dbg !4555, !tbaa !1246
  %8 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !4556, !tbaa !1246
  %cmp2 = icmp eq %struct._object* %8, null, !dbg !4557
  br i1 %cmp2, label %if.then.3, label %if.end.13, !dbg !4558

if.then.3:                                        ; preds = %if.end
  br label %do.body, !dbg !4559

do.body:                                          ; preds = %if.then.3
  %9 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4560
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !4560
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !794, metadata !1242), !dbg !4562
  %10 = load %struct._object*, %struct._object** %dict, align 8, !dbg !4563, !tbaa !1246
  store %struct._object* %10, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4562, !tbaa !1246
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4564, !tbaa !1246
  %cmp4 = icmp ne %struct._object* %11, null, !dbg !4565
  br i1 %cmp4, label %if.then.5, label %if.end.10, !dbg !4566

if.then.5:                                        ; preds = %do.body
  br label %do.body.6, !dbg !4567

do.body.6:                                        ; preds = %if.then.5
  %12 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4569
  call void @llvm.lifetime.start(i64 8, i8* %12) #1, !dbg !4569
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !798, metadata !1242), !dbg !4571
  %13 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4572, !tbaa !1246
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8, !dbg !4571, !tbaa !1246
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4573, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0, !dbg !4575
  %15 = load i64, i64* %ob_refcnt, align 8, !dbg !4576, !tbaa !1261
  %dec = add i64 %15, -1, !dbg !4576
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4576, !tbaa !1261
  %cmp7 = icmp ne i64 %dec, 0, !dbg !4577
  br i1 %cmp7, label %if.then.8, label %if.else, !dbg !4578

if.then.8:                                        ; preds = %do.body.6
  br label %if.end.9, !dbg !4579

if.else:                                          ; preds = %do.body.6
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4581, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1, !dbg !4583
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4583, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4, !dbg !4584
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4584, !tbaa !1444
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4585, !tbaa !1246
  call void %18(%struct._object* %19), !dbg !4586
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  %20 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4587
  call void @llvm.lifetime.end(i64 8, i8* %20) #1, !dbg !4587
  br label %do.cond, !dbg !4589

do.cond:                                          ; preds = %if.end.9
  br label %do.end, !dbg !4590

do.end:                                           ; preds = %do.cond
  br label %if.end.10, !dbg !4592

if.end.10:                                        ; preds = %do.end, %do.body
  %21 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4594
  call void @llvm.lifetime.end(i64 8, i8* %21) #1, !dbg !4594
  br label %do.cond.11, !dbg !4597

do.cond.11:                                       ; preds = %if.end.10
  br label %do.end.12, !dbg !4598

do.end.12:                                        ; preds = %do.cond.11
  store %struct._object* null, %struct._object** %retval, !dbg !4600
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4600

if.end.13:                                        ; preds = %if.end
  %22 = load %struct._object*, %struct._object** %dict, align 8, !dbg !4601, !tbaa !1246
  %cmp14 = icmp eq %struct._object* %22, null, !dbg !4603
  br i1 %cmp14, label %if.then.15, label %if.else.25, !dbg !4604

if.then.15:                                       ; preds = %if.end.13
  %23 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4605, !tbaa !1246
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %23, i32 0, i32 6, !dbg !4608
  %24 = load i64, i64* %maxlen, align 8, !dbg !4608, !tbaa !1934
  %cmp16 = icmp eq i64 %24, -1, !dbg !4609
  br i1 %cmp16, label %if.then.17, label %if.else.20, !dbg !4610

if.then.17:                                       ; preds = %if.then.15
  %25 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4611, !tbaa !1246
  %26 = bitcast %struct.dequeobject* %25 to %struct._object*, !dbg !4612
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1, !dbg !4613
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8, !dbg !4613, !tbaa !1345
  %28 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !4614, !tbaa !1246
  %call19 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), %struct._typeobject* %27, %struct._object* %28), !dbg !4615
  store %struct._object* %call19, %struct._object** %result, align 8, !dbg !4616, !tbaa !1246
  br label %if.end.24, !dbg !4617

if.else.20:                                       ; preds = %if.then.15
  %29 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4618, !tbaa !1246
  %30 = bitcast %struct.dequeobject* %29 to %struct._object*, !dbg !4619
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !4620
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8, !dbg !4620, !tbaa !1345
  %32 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !4621, !tbaa !1246
  %33 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4622, !tbaa !1246
  %maxlen22 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %33, i32 0, i32 6, !dbg !4623
  %34 = load i64, i64* %maxlen22, align 8, !dbg !4623, !tbaa !1934
  %call23 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), %struct._typeobject* %31, %struct._object* %32, i64 %34), !dbg !4624
  store %struct._object* %call23, %struct._object** %result, align 8, !dbg !4625, !tbaa !1246
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.20, %if.then.17
  br label %if.end.36, !dbg !4626

if.else.25:                                       ; preds = %if.end.13
  %35 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4627, !tbaa !1246
  %maxlen26 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %35, i32 0, i32 6, !dbg !4630
  %36 = load i64, i64* %maxlen26, align 8, !dbg !4630, !tbaa !1934
  %cmp27 = icmp eq i64 %36, -1, !dbg !4631
  br i1 %cmp27, label %if.then.28, label %if.else.31, !dbg !4632

if.then.28:                                       ; preds = %if.else.25
  %37 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4633, !tbaa !1246
  %38 = bitcast %struct.dequeobject* %37 to %struct._object*, !dbg !4634
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1, !dbg !4635
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8, !dbg !4635, !tbaa !1345
  %40 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !4636, !tbaa !1246
  %41 = load %struct._object*, %struct._object** %dict, align 8, !dbg !4637, !tbaa !1246
  %call30 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36, i32 0, i32 0), %struct._typeobject* %39, %struct._object* %40, %struct._object* @_Py_NoneStruct, %struct._object* %41), !dbg !4638
  store %struct._object* %call30, %struct._object** %result, align 8, !dbg !4639, !tbaa !1246
  br label %if.end.35, !dbg !4640

if.else.31:                                       ; preds = %if.else.25
  %42 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4641, !tbaa !1246
  %43 = bitcast %struct.dequeobject* %42 to %struct._object*, !dbg !4642
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !4643
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8, !dbg !4643, !tbaa !1345
  %45 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !4644, !tbaa !1246
  %46 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4645, !tbaa !1246
  %maxlen33 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %46, i32 0, i32 6, !dbg !4646
  %47 = load i64, i64* %maxlen33, align 8, !dbg !4646, !tbaa !1934
  %48 = load %struct._object*, %struct._object** %dict, align 8, !dbg !4647, !tbaa !1246
  %call34 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), %struct._typeobject* %44, %struct._object* %45, i64 %47, %struct._object* %48), !dbg !4648
  store %struct._object* %call34, %struct._object** %result, align 8, !dbg !4649, !tbaa !1246
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.31, %if.then.28
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.end.24
  br label %do.body.37, !dbg !4650

do.body.37:                                       ; preds = %if.end.36
  %49 = bitcast %struct._object** %_py_xdecref_tmp38 to i8*, !dbg !4651
  call void @llvm.lifetime.start(i64 8, i8* %49) #1, !dbg !4651
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp38, metadata !801, metadata !1242), !dbg !4653
  %50 = load %struct._object*, %struct._object** %dict, align 8, !dbg !4654, !tbaa !1246
  store %struct._object* %50, %struct._object** %_py_xdecref_tmp38, align 8, !dbg !4653, !tbaa !1246
  %51 = load %struct._object*, %struct._object** %_py_xdecref_tmp38, align 8, !dbg !4655, !tbaa !1246
  %cmp39 = icmp ne %struct._object* %51, null, !dbg !4656
  br i1 %cmp39, label %if.then.40, label %if.end.53, !dbg !4657

if.then.40:                                       ; preds = %do.body.37
  br label %do.body.41, !dbg !4658

do.body.41:                                       ; preds = %if.then.40
  %52 = bitcast %struct._object** %_py_decref_tmp42 to i8*, !dbg !4660
  call void @llvm.lifetime.start(i64 8, i8* %52) #1, !dbg !4660
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp42, metadata !803, metadata !1242), !dbg !4662
  %53 = load %struct._object*, %struct._object** %_py_xdecref_tmp38, align 8, !dbg !4663, !tbaa !1246
  store %struct._object* %53, %struct._object** %_py_decref_tmp42, align 8, !dbg !4662, !tbaa !1246
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !4664, !tbaa !1246
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0, !dbg !4666
  %55 = load i64, i64* %ob_refcnt43, align 8, !dbg !4667, !tbaa !1261
  %dec44 = add i64 %55, -1, !dbg !4667
  store i64 %dec44, i64* %ob_refcnt43, align 8, !dbg !4667, !tbaa !1261
  %cmp45 = icmp ne i64 %dec44, 0, !dbg !4668
  br i1 %cmp45, label %if.then.46, label %if.else.47, !dbg !4669

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50, !dbg !4670

if.else.47:                                       ; preds = %do.body.41
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !4672, !tbaa !1246
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1, !dbg !4674
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8, !dbg !4674, !tbaa !1345
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4, !dbg !4675
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8, !dbg !4675, !tbaa !1444
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !4676, !tbaa !1246
  call void %58(%struct._object* %59), !dbg !4677
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  %60 = bitcast %struct._object** %_py_decref_tmp42 to i8*, !dbg !4678
  call void @llvm.lifetime.end(i64 8, i8* %60) #1, !dbg !4678
  br label %do.cond.51, !dbg !4680

do.cond.51:                                       ; preds = %if.end.50
  br label %do.end.52, !dbg !4681

do.end.52:                                        ; preds = %do.cond.51
  br label %if.end.53, !dbg !4683

if.end.53:                                        ; preds = %do.end.52, %do.body.37
  %61 = bitcast %struct._object** %_py_xdecref_tmp38 to i8*, !dbg !4685
  call void @llvm.lifetime.end(i64 8, i8* %61) #1, !dbg !4685
  br label %do.cond.54, !dbg !4688

do.cond.54:                                       ; preds = %if.end.53
  br label %do.end.55, !dbg !4689

do.end.55:                                        ; preds = %do.cond.54
  br label %do.body.56, !dbg !4691

do.body.56:                                       ; preds = %do.end.55
  %62 = bitcast %struct._object** %_py_decref_tmp57 to i8*, !dbg !4692
  call void @llvm.lifetime.start(i64 8, i8* %62) #1, !dbg !4692
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp57, metadata !806, metadata !1242), !dbg !4694
  %63 = load %struct._object*, %struct._object** %aslist, align 8, !dbg !4695, !tbaa !1246
  store %struct._object* %63, %struct._object** %_py_decref_tmp57, align 8, !dbg !4694, !tbaa !1246
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8, !dbg !4696, !tbaa !1246
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0, !dbg !4698
  %65 = load i64, i64* %ob_refcnt58, align 8, !dbg !4699, !tbaa !1261
  %dec59 = add i64 %65, -1, !dbg !4699
  store i64 %dec59, i64* %ob_refcnt58, align 8, !dbg !4699, !tbaa !1261
  %cmp60 = icmp ne i64 %dec59, 0, !dbg !4700
  br i1 %cmp60, label %if.then.61, label %if.else.62, !dbg !4701

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65, !dbg !4702

if.else.62:                                       ; preds = %do.body.56
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8, !dbg !4704, !tbaa !1246
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1, !dbg !4706
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8, !dbg !4706, !tbaa !1345
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4, !dbg !4707
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8, !dbg !4707, !tbaa !1444
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8, !dbg !4708, !tbaa !1246
  call void %68(%struct._object* %69), !dbg !4709
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  %70 = bitcast %struct._object** %_py_decref_tmp57 to i8*, !dbg !4710
  call void @llvm.lifetime.end(i64 8, i8* %70) #1, !dbg !4710
  br label %do.cond.66, !dbg !4712

do.cond.66:                                       ; preds = %if.end.65
  br label %do.end.67, !dbg !4713

do.end.67:                                        ; preds = %do.cond.66
  %71 = load %struct._object*, %struct._object** %result, align 8, !dbg !4715, !tbaa !1246
  store %struct._object* %71, %struct._object** %retval, !dbg !4716
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4716

cleanup:                                          ; preds = %do.end.67, %do.end.12
  %72 = bitcast %struct._object** %aslist to i8*, !dbg !4717
  call void @llvm.lifetime.end(i64 8, i8* %72) #1, !dbg !4717
  %73 = bitcast %struct._object** %result to i8*, !dbg !4717
  call void @llvm.lifetime.end(i64 8, i8* %73) #1, !dbg !4717
  %74 = bitcast %struct._object** %dict to i8*, !dbg !4717
  call void @llvm.lifetime.end(i64 8, i8* %74) #1, !dbg !4717
  %75 = load %struct._object*, %struct._object** %retval, !dbg !4717
  ret %struct._object* %75, !dbg !4717
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_remove(%struct.dequeobject* %deque, %struct._object* %value) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %item = alloca %struct._object*, align 8
  %cmp1 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %tgt = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !810, metadata !1242), !dbg !4718
  store %struct._object* %value, %struct._object** %value.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %value.addr, metadata !811, metadata !1242), !dbg !4719
  %0 = bitcast i64* %i to i8*, !dbg !4720
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4720
  call void @llvm.dbg.declare(metadata i64* %i, metadata !812, metadata !1242), !dbg !4721
  %1 = bitcast i64* %n to i8*, !dbg !4720
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4720
  call void @llvm.dbg.declare(metadata i64* %n, metadata !813, metadata !1242), !dbg !4722
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4723, !tbaa !1246
  %3 = bitcast %struct.dequeobject* %2 to %struct.PyVarObject*, !dbg !4724
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !4725
  %4 = load i64, i64* %ob_size, align 8, !dbg !4725, !tbaa !2108
  store i64 %4, i64* %n, align 8, !dbg !4722, !tbaa !1990
  store i64 0, i64* %i, align 8, !dbg !4726, !tbaa !1990
  br label %for.cond, !dbg !4727

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %i, align 8, !dbg !4728, !tbaa !1990
  %6 = load i64, i64* %n, align 8, !dbg !4731, !tbaa !1990
  %cmp = icmp slt i64 %5, %6, !dbg !4732
  br i1 %cmp, label %for.body, label %for.end, !dbg !4733

for.body:                                         ; preds = %for.cond
  %7 = bitcast %struct._object** %item to i8*, !dbg !4734
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !4734
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !814, metadata !1242), !dbg !4735
  %8 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4736, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %8, i32 0, i32 3, !dbg !4737
  %9 = load i64, i64* %leftindex, align 8, !dbg !4737, !tbaa !1989
  %10 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4738, !tbaa !1246
  %leftblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %10, i32 0, i32 1, !dbg !4739
  %11 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !4739, !tbaa !1872
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %11, i32 0, i32 1, !dbg !4740
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %9, !dbg !4738
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !4738, !tbaa !1246
  store %struct._object* %12, %struct._object** %item, align 8, !dbg !4735, !tbaa !1246
  %13 = bitcast i32* %cmp1 to i8*, !dbg !4741
  call void @llvm.lifetime.start(i64 4, i8* %13) #1, !dbg !4741
  call void @llvm.dbg.declare(metadata i32* %cmp1, metadata !818, metadata !1242), !dbg !4742
  %14 = load %struct._object*, %struct._object** %item, align 8, !dbg !4743, !tbaa !1246
  %15 = load %struct._object*, %struct._object** %value.addr, align 8, !dbg !4744, !tbaa !1246
  %call = call i32 @PyObject_RichCompareBool(%struct._object* %14, %struct._object* %15, i32 2), !dbg !4745
  store i32 %call, i32* %cmp1, align 4, !dbg !4742, !tbaa !1906
  %16 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4746, !tbaa !1246
  %17 = bitcast %struct.dequeobject* %16 to %struct.PyVarObject*, !dbg !4748
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %17, i32 0, i32 1, !dbg !4749
  %18 = load i64, i64* %ob_size2, align 8, !dbg !4749, !tbaa !2108
  %19 = load i64, i64* %n, align 8, !dbg !4750, !tbaa !1990
  %cmp3 = icmp ne i64 %18, %19, !dbg !4751
  br i1 %cmp3, label %if.then, label %if.end, !dbg !4752

if.then:                                          ; preds = %for.body
  %20 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !4753, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %20, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.38, i32 0, i32 0)), !dbg !4755
  store %struct._object* null, %struct._object** %retval, !dbg !4756
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.21, !dbg !4756

if.end:                                           ; preds = %for.body
  %21 = load i32, i32* %cmp1, align 4, !dbg !4757, !tbaa !1906
  %cmp4 = icmp sgt i32 %21, 0, !dbg !4758
  br i1 %cmp4, label %if.then.5, label %if.else.14, !dbg !4759

if.then.5:                                        ; preds = %if.end
  %22 = bitcast %struct._object** %tgt to i8*, !dbg !4760
  call void @llvm.lifetime.start(i64 8, i8* %22) #1, !dbg !4760
  call void @llvm.dbg.declare(metadata %struct._object** %tgt, metadata !819, metadata !1242), !dbg !4761
  %23 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4762, !tbaa !1246
  %call6 = call %struct._object* @deque_popleft(%struct.dequeobject* %23, %struct._object* null), !dbg !4763
  store %struct._object* %call6, %struct._object** %tgt, align 8, !dbg !4761, !tbaa !1246
  br label %do.body, !dbg !4764

do.body:                                          ; preds = %if.then.5
  %24 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4765
  call void @llvm.lifetime.start(i64 8, i8* %24) #1, !dbg !4765
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !822, metadata !1242), !dbg !4767
  %25 = load %struct._object*, %struct._object** %tgt, align 8, !dbg !4768, !tbaa !1246
  store %struct._object* %25, %struct._object** %_py_decref_tmp, align 8, !dbg !4767, !tbaa !1246
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4769, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0, !dbg !4771
  %27 = load i64, i64* %ob_refcnt, align 8, !dbg !4772, !tbaa !1261
  %dec = add i64 %27, -1, !dbg !4772
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4772, !tbaa !1261
  %cmp7 = icmp ne i64 %dec, 0, !dbg !4773
  br i1 %cmp7, label %if.then.8, label %if.else, !dbg !4774

if.then.8:                                        ; preds = %do.body
  br label %if.end.9, !dbg !4775

if.else:                                          ; preds = %do.body
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4777, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1, !dbg !4779
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4779, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4, !dbg !4780
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4780, !tbaa !1444
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4781, !tbaa !1246
  call void %30(%struct._object* %31), !dbg !4782
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4783
  call void @llvm.lifetime.end(i64 8, i8* %32) #1, !dbg !4783
  br label %do.cond, !dbg !4785

do.cond:                                          ; preds = %if.end.9
  br label %do.end, !dbg !4786

do.end:                                           ; preds = %do.cond
  %33 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4788, !tbaa !1246
  %34 = load i64, i64* %i, align 8, !dbg !4790, !tbaa !1990
  %call10 = call i32 @_deque_rotate(%struct.dequeobject* %33, i64 %34), !dbg !4791
  %cmp11 = icmp eq i32 %call10, -1, !dbg !4792
  br i1 %cmp11, label %if.then.12, label %if.end.13, !dbg !4793

if.then.12:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %retval, !dbg !4794
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4794

if.end.13:                                        ; preds = %do.end
  %35 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4795, !tbaa !1261
  %inc = add i64 %35, 1, !dbg !4795
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4795, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4796
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4796

cleanup:                                          ; preds = %if.end.13, %if.then.12
  %36 = bitcast %struct._object** %tgt to i8*, !dbg !4797
  call void @llvm.lifetime.end(i64 8, i8* %36) #1, !dbg !4797
  br label %cleanup.21

if.else.14:                                       ; preds = %if.end
  %37 = load i32, i32* %cmp1, align 4, !dbg !4798, !tbaa !1906
  %cmp15 = icmp slt i32 %37, 0, !dbg !4800
  br i1 %cmp15, label %if.then.16, label %if.end.18, !dbg !4801

if.then.16:                                       ; preds = %if.else.14
  %38 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4802, !tbaa !1246
  %39 = load i64, i64* %i, align 8, !dbg !4804, !tbaa !1990
  %call17 = call i32 @_deque_rotate(%struct.dequeobject* %38, i64 %39), !dbg !4805
  store %struct._object* null, %struct._object** %retval, !dbg !4806
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.21, !dbg !4806

if.end.18:                                        ; preds = %if.else.14
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18
  %40 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4807, !tbaa !1246
  %call20 = call i32 @_deque_rotate(%struct.dequeobject* %40, i64 -1), !dbg !4808
  store i32 0, i32* %cleanup.dest.slot, !dbg !4809
  br label %cleanup.21, !dbg !4809

cleanup.21:                                       ; preds = %if.end.19, %if.then.16, %cleanup, %if.then
  %41 = bitcast i32* %cmp1 to i8*, !dbg !4810
  call void @llvm.lifetime.end(i64 4, i8* %41) #1, !dbg !4810
  %42 = bitcast %struct._object** %item to i8*, !dbg !4810
  call void @llvm.lifetime.end(i64 8, i8* %42) #1, !dbg !4810
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.24 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup.21
  br label %for.inc, !dbg !4811

for.inc:                                          ; preds = %cleanup.cont
  %43 = load i64, i64* %i, align 8, !dbg !4812, !tbaa !1990
  %inc23 = add i64 %43, 1, !dbg !4812
  store i64 %inc23, i64* %i, align 8, !dbg !4812, !tbaa !1990
  br label %for.cond, !dbg !4813

for.end:                                          ; preds = %for.cond
  %44 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4814, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %44, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.39, i32 0, i32 0)), !dbg !4815
  store %struct._object* null, %struct._object** %retval, !dbg !4816
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24, !dbg !4816

cleanup.24:                                       ; preds = %for.end, %cleanup.21
  %45 = bitcast i64* %n to i8*, !dbg !4817
  call void @llvm.lifetime.end(i64 8, i8* %45) #1, !dbg !4817
  %46 = bitcast i64* %i to i8*, !dbg !4817
  call void @llvm.lifetime.end(i64 8, i8* %46) #1, !dbg !4817
  %47 = load %struct._object*, %struct._object** %retval, !dbg !4817
  ret %struct._object* %47, !dbg !4817
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_reviter(%struct.dequeobject* %deque) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %it = alloca %struct.dequeiterobject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !826, metadata !1242), !dbg !4818
  %0 = bitcast %struct.dequeiterobject** %it to i8*, !dbg !4819
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4819
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %it, metadata !827, metadata !1242), !dbg !4820
  %call = call %struct._object* @_PyObject_GC_New(%struct._typeobject* @dequereviter_type), !dbg !4821
  %1 = bitcast %struct._object* %call to %struct.dequeiterobject*, !dbg !4822
  store %struct.dequeiterobject* %1, %struct.dequeiterobject** %it, align 8, !dbg !4823, !tbaa !1246
  %2 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !4824, !tbaa !1246
  %cmp = icmp eq %struct.dequeiterobject* %2, null, !dbg !4826
  br i1 %cmp, label %if.then, label %if.end, !dbg !4827

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4828
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4828

if.end:                                           ; preds = %entry
  %3 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4829, !tbaa !1246
  %rightblock = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %3, i32 0, i32 2, !dbg !4830
  %4 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !4830, !tbaa !1888
  %5 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !4831, !tbaa !1246
  %b = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %5, i32 0, i32 2, !dbg !4832
  store %struct.BLOCK* %4, %struct.BLOCK** %b, align 8, !dbg !4833, !tbaa !2597
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4834, !tbaa !1246
  %rightindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %6, i32 0, i32 4, !dbg !4835
  %7 = load i64, i64* %rightindex, align 8, !dbg !4835, !tbaa !2060
  %8 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !4836, !tbaa !1246
  %index = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %8, i32 0, i32 1, !dbg !4837
  store i64 %7, i64* %index, align 8, !dbg !4838, !tbaa !2604
  %9 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4839, !tbaa !1246
  %10 = bitcast %struct.dequeobject* %9 to %struct._object*, !dbg !4840
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !4841
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !4842, !tbaa !1261
  %inc = add i64 %11, 1, !dbg !4842
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !4842, !tbaa !1261
  %12 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4843, !tbaa !1246
  %13 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !4844, !tbaa !1246
  %deque1 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %13, i32 0, i32 3, !dbg !4845
  store %struct.dequeobject* %12, %struct.dequeobject** %deque1, align 8, !dbg !4846, !tbaa !2613
  %14 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4847, !tbaa !1246
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %14, i32 0, i32 5, !dbg !4848
  %15 = load i64, i64* %state, align 8, !dbg !4848, !tbaa !2616
  %16 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !4849, !tbaa !1246
  %state2 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %16, i32 0, i32 4, !dbg !4850
  store i64 %15, i64* %state2, align 8, !dbg !4851, !tbaa !2620
  %17 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4852, !tbaa !1246
  %18 = bitcast %struct.dequeobject* %17 to %struct.PyVarObject*, !dbg !4853
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !4854
  %19 = load i64, i64* %ob_size, align 8, !dbg !4854, !tbaa !2108
  %20 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !4855, !tbaa !1246
  %counter = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %20, i32 0, i32 5, !dbg !4856
  store i64 %19, i64* %counter, align 8, !dbg !4857, !tbaa !2627
  %21 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !4858, !tbaa !1246
  %22 = bitcast %struct.dequeiterobject* %21 to i8*, !dbg !4858
  call void @PyObject_GC_Track(i8* %22), !dbg !4859
  %23 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !4860, !tbaa !1246
  %24 = bitcast %struct.dequeiterobject* %23 to %struct._object*, !dbg !4861
  store %struct._object* %24, %struct._object** %retval, !dbg !4862
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4862

cleanup:                                          ; preds = %if.end, %if.then
  %25 = bitcast %struct.dequeiterobject** %it to i8*, !dbg !4863
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !4863
  %26 = load %struct._object*, %struct._object** %retval, !dbg !4863
  ret %struct._object* %26, !dbg !4863
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_reverse(%struct.dequeobject* %deque, %struct._object* %unused) #0 {
entry:
  %deque.addr = alloca %struct.dequeobject*, align 8
  %unused.addr = alloca %struct._object*, align 8
  %leftblock = alloca %struct.BLOCK*, align 8
  %rightblock = alloca %struct.BLOCK*, align 8
  %leftindex = alloca i64, align 8
  %rightindex = alloca i64, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %tmp = alloca %struct._object*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !830, metadata !1242), !dbg !4864
  store %struct._object* %unused, %struct._object** %unused.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %unused.addr, metadata !831, metadata !1242), !dbg !4865
  %0 = bitcast %struct.BLOCK** %leftblock to i8*, !dbg !4866
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4866
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %leftblock, metadata !832, metadata !1242), !dbg !4867
  %1 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4868, !tbaa !1246
  %leftblock1 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %1, i32 0, i32 1, !dbg !4869
  %2 = load %struct.BLOCK*, %struct.BLOCK** %leftblock1, align 8, !dbg !4869, !tbaa !1872
  store %struct.BLOCK* %2, %struct.BLOCK** %leftblock, align 8, !dbg !4867, !tbaa !1246
  %3 = bitcast %struct.BLOCK** %rightblock to i8*, !dbg !4870
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !4870
  call void @llvm.dbg.declare(metadata %struct.BLOCK** %rightblock, metadata !833, metadata !1242), !dbg !4871
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4872, !tbaa !1246
  %rightblock2 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %4, i32 0, i32 2, !dbg !4873
  %5 = load %struct.BLOCK*, %struct.BLOCK** %rightblock2, align 8, !dbg !4873, !tbaa !1888
  store %struct.BLOCK* %5, %struct.BLOCK** %rightblock, align 8, !dbg !4871, !tbaa !1246
  %6 = bitcast i64* %leftindex to i8*, !dbg !4874
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !4874
  call void @llvm.dbg.declare(metadata i64* %leftindex, metadata !834, metadata !1242), !dbg !4875
  %7 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4876, !tbaa !1246
  %leftindex3 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %7, i32 0, i32 3, !dbg !4877
  %8 = load i64, i64* %leftindex3, align 8, !dbg !4877, !tbaa !1989
  store i64 %8, i64* %leftindex, align 8, !dbg !4875, !tbaa !1990
  %9 = bitcast i64* %rightindex to i8*, !dbg !4878
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !4878
  call void @llvm.dbg.declare(metadata i64* %rightindex, metadata !835, metadata !1242), !dbg !4879
  %10 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4880, !tbaa !1246
  %rightindex4 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %10, i32 0, i32 4, !dbg !4881
  %11 = load i64, i64* %rightindex4, align 8, !dbg !4881, !tbaa !2060
  store i64 %11, i64* %rightindex, align 8, !dbg !4879, !tbaa !1990
  %12 = bitcast i64* %n to i8*, !dbg !4882
  call void @llvm.lifetime.start(i64 8, i8* %12) #1, !dbg !4882
  call void @llvm.dbg.declare(metadata i64* %n, metadata !836, metadata !1242), !dbg !4883
  %13 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4884, !tbaa !1246
  %14 = bitcast %struct.dequeobject* %13 to %struct.PyVarObject*, !dbg !4885
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !4886
  %15 = load i64, i64* %ob_size, align 8, !dbg !4886, !tbaa !2108
  %div = sdiv i64 %15, 2, !dbg !4887
  store i64 %div, i64* %n, align 8, !dbg !4883, !tbaa !1990
  %16 = bitcast i64* %i to i8*, !dbg !4888
  call void @llvm.lifetime.start(i64 8, i8* %16) #1, !dbg !4888
  call void @llvm.dbg.declare(metadata i64* %i, metadata !837, metadata !1242), !dbg !4889
  %17 = bitcast %struct._object** %tmp to i8*, !dbg !4890
  call void @llvm.lifetime.start(i64 8, i8* %17) #1, !dbg !4890
  call void @llvm.dbg.declare(metadata %struct._object** %tmp, metadata !838, metadata !1242), !dbg !4891
  store i64 0, i64* %i, align 8, !dbg !4892, !tbaa !1990
  br label %for.cond, !dbg !4894

for.cond:                                         ; preds = %for.inc, %entry
  %18 = load i64, i64* %i, align 8, !dbg !4895, !tbaa !1990
  %19 = load i64, i64* %n, align 8, !dbg !4899, !tbaa !1990
  %cmp = icmp slt i64 %18, %19, !dbg !4900
  br i1 %cmp, label %for.body, label %for.end, !dbg !4901

for.body:                                         ; preds = %for.cond
  %20 = load i64, i64* %leftindex, align 8, !dbg !4902, !tbaa !1990
  %21 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !4904, !tbaa !1246
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %21, i32 0, i32 1, !dbg !4905
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %20, !dbg !4904
  %22 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !4904, !tbaa !1246
  store %struct._object* %22, %struct._object** %tmp, align 8, !dbg !4906, !tbaa !1246
  %23 = load i64, i64* %rightindex, align 8, !dbg !4907, !tbaa !1990
  %24 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !4908, !tbaa !1246
  %data5 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %24, i32 0, i32 1, !dbg !4909
  %arrayidx6 = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data5, i32 0, i64 %23, !dbg !4908
  %25 = load %struct._object*, %struct._object** %arrayidx6, align 8, !dbg !4908, !tbaa !1246
  %26 = load i64, i64* %leftindex, align 8, !dbg !4910, !tbaa !1990
  %27 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !4911, !tbaa !1246
  %data7 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %27, i32 0, i32 1, !dbg !4912
  %arrayidx8 = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data7, i32 0, i64 %26, !dbg !4911
  store %struct._object* %25, %struct._object** %arrayidx8, align 8, !dbg !4913, !tbaa !1246
  %28 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !4914, !tbaa !1246
  %29 = load i64, i64* %rightindex, align 8, !dbg !4915, !tbaa !1990
  %30 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !4916, !tbaa !1246
  %data9 = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %30, i32 0, i32 1, !dbg !4917
  %arrayidx10 = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data9, i32 0, i64 %29, !dbg !4916
  store %struct._object* %28, %struct._object** %arrayidx10, align 8, !dbg !4918, !tbaa !1246
  %31 = load i64, i64* %leftindex, align 8, !dbg !4919, !tbaa !1990
  %inc = add i64 %31, 1, !dbg !4919
  store i64 %inc, i64* %leftindex, align 8, !dbg !4919, !tbaa !1990
  %32 = load i64, i64* %leftindex, align 8, !dbg !4920, !tbaa !1990
  %cmp11 = icmp eq i64 %32, 62, !dbg !4922
  br i1 %cmp11, label %if.then, label %if.end, !dbg !4923

if.then:                                          ; preds = %for.body
  %33 = load %struct.BLOCK*, %struct.BLOCK** %leftblock, align 8, !dbg !4924, !tbaa !1246
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %33, i32 0, i32 2, !dbg !4926
  %34 = load %struct.BLOCK*, %struct.BLOCK** %rightlink, align 8, !dbg !4926, !tbaa !2048
  store %struct.BLOCK* %34, %struct.BLOCK** %leftblock, align 8, !dbg !4927, !tbaa !1246
  store i64 0, i64* %leftindex, align 8, !dbg !4928, !tbaa !1990
  br label %if.end, !dbg !4929

if.end:                                           ; preds = %if.then, %for.body
  %35 = load i64, i64* %rightindex, align 8, !dbg !4930, !tbaa !1990
  %dec = add i64 %35, -1, !dbg !4930
  store i64 %dec, i64* %rightindex, align 8, !dbg !4930, !tbaa !1990
  %36 = load i64, i64* %rightindex, align 8, !dbg !4931, !tbaa !1990
  %cmp12 = icmp eq i64 %36, -1, !dbg !4933
  br i1 %cmp12, label %if.then.13, label %if.end.14, !dbg !4934

if.then.13:                                       ; preds = %if.end
  %37 = load %struct.BLOCK*, %struct.BLOCK** %rightblock, align 8, !dbg !4935, !tbaa !1246
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %37, i32 0, i32 0, !dbg !4937
  %38 = load %struct.BLOCK*, %struct.BLOCK** %leftlink, align 8, !dbg !4937, !tbaa !2933
  store %struct.BLOCK* %38, %struct.BLOCK** %rightblock, align 8, !dbg !4938, !tbaa !1246
  store i64 61, i64* %rightindex, align 8, !dbg !4939, !tbaa !1990
  br label %if.end.14, !dbg !4940

if.end.14:                                        ; preds = %if.then.13, %if.end
  br label %for.inc, !dbg !4941

for.inc:                                          ; preds = %if.end.14
  %39 = load i64, i64* %i, align 8, !dbg !4942, !tbaa !1990
  %inc15 = add i64 %39, 1, !dbg !4942
  store i64 %inc15, i64* %i, align 8, !dbg !4942, !tbaa !1990
  br label %for.cond, !dbg !4943

for.end:                                          ; preds = %for.cond
  %40 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4944, !tbaa !1261
  %inc16 = add i64 %40, 1, !dbg !4944
  store i64 %inc16, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4944, !tbaa !1261
  %41 = bitcast %struct._object** %tmp to i8*, !dbg !4945
  call void @llvm.lifetime.end(i64 8, i8* %41) #1, !dbg !4945
  %42 = bitcast i64* %i to i8*, !dbg !4945
  call void @llvm.lifetime.end(i64 8, i8* %42) #1, !dbg !4945
  %43 = bitcast i64* %n to i8*, !dbg !4945
  call void @llvm.lifetime.end(i64 8, i8* %43) #1, !dbg !4945
  %44 = bitcast i64* %rightindex to i8*, !dbg !4945
  call void @llvm.lifetime.end(i64 8, i8* %44) #1, !dbg !4945
  %45 = bitcast i64* %leftindex to i8*, !dbg !4945
  call void @llvm.lifetime.end(i64 8, i8* %45) #1, !dbg !4945
  %46 = bitcast %struct.BLOCK** %rightblock to i8*, !dbg !4945
  call void @llvm.lifetime.end(i64 8, i8* %46) #1, !dbg !4945
  %47 = bitcast %struct.BLOCK** %leftblock to i8*, !dbg !4945
  call void @llvm.lifetime.end(i64 8, i8* %47) #1, !dbg !4945
  ret %struct._object* @_Py_NoneStruct, !dbg !4946
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_rotate(%struct.dequeobject* %deque, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %n = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !841, metadata !1242), !dbg !4947
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !842, metadata !1242), !dbg !4948
  %0 = bitcast i64* %n to i8*, !dbg !4949
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4949
  call void @llvm.dbg.declare(metadata i64* %n, metadata !843, metadata !1242), !dbg !4950
  store i64 1, i64* %n, align 8, !dbg !4950, !tbaa !1990
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4951, !tbaa !1246
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i32 0, i32 0), i64* %n), !dbg !4953
  %tobool = icmp ne i32 %call, 0, !dbg !4953
  br i1 %tobool, label %if.end, label %if.then, !dbg !4954

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4955
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4955

if.end:                                           ; preds = %entry
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4956, !tbaa !1246
  %3 = load i64, i64* %n, align 8, !dbg !4958, !tbaa !1990
  %call1 = call i32 @_deque_rotate(%struct.dequeobject* %2, i64 %3), !dbg !4959
  %cmp = icmp eq i32 %call1, 0, !dbg !4960
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !4961

if.then.2:                                        ; preds = %if.end
  %4 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4962, !tbaa !1261
  %inc = add i64 %4, 1, !dbg !4962
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4962, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4963
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4963

if.end.3:                                         ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !4964
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4964

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %5 = bitcast i64* %n to i8*, !dbg !4965
  call void @llvm.lifetime.end(i64 8, i8* %5) #1, !dbg !4965
  %6 = load %struct._object*, %struct._object** %retval, !dbg !4965
  ret %struct._object* %6, !dbg !4965
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_sizeof(%struct.dequeobject* %deque, i8* %unused) #0 {
entry:
  %deque.addr = alloca %struct.dequeobject*, align 8
  %unused.addr = alloca i8*, align 8
  %res = alloca i64, align 8
  %blocks = alloca i64, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !848, metadata !1242), !dbg !4966
  store i8* %unused, i8** %unused.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata i8** %unused.addr, metadata !849, metadata !1242), !dbg !4967
  %0 = bitcast i64* %res to i8*, !dbg !4968
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4968
  call void @llvm.dbg.declare(metadata i64* %res, metadata !850, metadata !1242), !dbg !4969
  %1 = bitcast i64* %blocks to i8*, !dbg !4970
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4970
  call void @llvm.dbg.declare(metadata i64* %blocks, metadata !851, metadata !1242), !dbg !4971
  store i64 80, i64* %res, align 8, !dbg !4972, !tbaa !1990
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4973, !tbaa !1246
  %leftindex = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %2, i32 0, i32 3, !dbg !4974
  %3 = load i64, i64* %leftindex, align 8, !dbg !4974, !tbaa !1989
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4975, !tbaa !1246
  %5 = bitcast %struct.dequeobject* %4 to %struct.PyVarObject*, !dbg !4976
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !4977
  %6 = load i64, i64* %ob_size, align 8, !dbg !4977, !tbaa !2108
  %add = add i64 %3, %6, !dbg !4978
  %add1 = add i64 %add, 62, !dbg !4979
  %sub = sub i64 %add1, 1, !dbg !4980
  %div = sdiv i64 %sub, 62, !dbg !4981
  store i64 %div, i64* %blocks, align 8, !dbg !4982, !tbaa !1990
  %7 = load i64, i64* %blocks, align 8, !dbg !4983, !tbaa !1990
  %mul = mul i64 %7, 512, !dbg !4984
  %8 = load i64, i64* %res, align 8, !dbg !4985, !tbaa !1990
  %add2 = add i64 %8, %mul, !dbg !4985
  store i64 %add2, i64* %res, align 8, !dbg !4985, !tbaa !1990
  %9 = load i64, i64* %res, align 8, !dbg !4986, !tbaa !1990
  %call = call %struct._object* @PyLong_FromSsize_t(i64 %9), !dbg !4987
  %10 = bitcast i64* %blocks to i8*, !dbg !4988
  call void @llvm.lifetime.end(i64 8, i8* %10) #1, !dbg !4988
  %11 = bitcast i64* %res to i8*, !dbg !4988
  call void @llvm.lifetime.end(i64 8, i8* %11) #1, !dbg !4988
  ret %struct._object* %call, !dbg !4989
}

declare %struct._object* @PyObject_CallFunction(%struct._object*, i8*, ...) #3

declare %struct._object* @PyLong_FromSsize_t(i64) #3

declare void @PyErr_Clear() #3

declare %struct._object* @Py_BuildValue(i8*, ...) #3

declare i32 @PyArg_ParseTuple(%struct._object*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @deque_get_maxlen(%struct.dequeobject* %deque) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %deque.addr = alloca %struct.dequeobject*, align 8
  store %struct.dequeobject* %deque, %struct.dequeobject** %deque.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeobject** %deque.addr, metadata !854, metadata !1242), !dbg !4990
  %0 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4991, !tbaa !1246
  %maxlen = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %0, i32 0, i32 6, !dbg !4993
  %1 = load i64, i64* %maxlen, align 8, !dbg !4993, !tbaa !1934
  %cmp = icmp eq i64 %1, -1, !dbg !4994
  br i1 %cmp, label %if.then, label %if.end, !dbg !4995

if.then:                                          ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4996, !tbaa !1261
  %inc = add i64 %2, 1, !dbg !4996
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4996, !tbaa !1261
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4997
  br label %return, !dbg !4997

if.end:                                           ; preds = %entry
  %3 = load %struct.dequeobject*, %struct.dequeobject** %deque.addr, align 8, !dbg !4998, !tbaa !1246
  %maxlen1 = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %3, i32 0, i32 6, !dbg !4999
  %4 = load i64, i64* %maxlen1, align 8, !dbg !4999, !tbaa !1934
  %call = call %struct._object* @PyLong_FromSsize_t(i64 %4), !dbg !5000
  store %struct._object* %call, %struct._object** %retval, !dbg !5001
  br label %return, !dbg !5001

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct._object*, %struct._object** %retval, !dbg !5002
  ret %struct._object* %5, !dbg !5002
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

declare i32 @PyArg_ParseTupleAndKeywords(%struct._object*, %struct._object*, i8*, i8**, ...) #3

declare i64 @PyLong_AsSsize_t(%struct._object*) #3

; Function Attrs: nounwind uwtable
define internal void @defdict_dealloc(%struct.defdictobject* %dd) #0 {
entry:
  %dd.addr = alloca %struct.defdictobject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.defdictobject* %dd, %struct.defdictobject** %dd.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.defdictobject** %dd.addr, metadata !893, metadata !1242), !dbg !5003
  br label %do.body, !dbg !5004

do.body:                                          ; preds = %entry
  %0 = bitcast %struct._object** %_py_tmp to i8*, !dbg !5005
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5005
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp, metadata !894, metadata !1242), !dbg !5007
  %1 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5008, !tbaa !1246
  %default_factory = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %1, i32 0, i32 1, !dbg !5009
  %2 = load %struct._object*, %struct._object** %default_factory, align 8, !dbg !5009, !tbaa !5010
  store %struct._object* %2, %struct._object** %_py_tmp, align 8, !dbg !5007, !tbaa !1246
  %3 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !5013, !tbaa !1246
  %cmp = icmp ne %struct._object* %3, null, !dbg !5014
  br i1 %cmp, label %if.then, label %if.end.5, !dbg !5015

if.then:                                          ; preds = %do.body
  %4 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5016, !tbaa !1246
  %default_factory1 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %4, i32 0, i32 1, !dbg !5018
  store %struct._object* null, %struct._object** %default_factory1, align 8, !dbg !5019, !tbaa !5010
  br label %do.body.2, !dbg !5020

do.body.2:                                        ; preds = %if.then
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5021
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !5021
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !896, metadata !1242), !dbg !5023
  %6 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !5024, !tbaa !1246
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !5023, !tbaa !1246
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5025, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !5027
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !5028, !tbaa !1261
  %dec = add i64 %8, -1, !dbg !5028
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5028, !tbaa !1261
  %cmp3 = icmp ne i64 %dec, 0, !dbg !5029
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !5030

if.then.4:                                        ; preds = %do.body.2
  br label %if.end, !dbg !5031

if.else:                                          ; preds = %do.body.2
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5033, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !5035
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5035, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !5036
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5036, !tbaa !1444
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5037, !tbaa !1246
  call void %11(%struct._object* %12), !dbg !5038
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5039
  call void @llvm.lifetime.end(i64 8, i8* %13) #1, !dbg !5039
  br label %do.cond, !dbg !5041

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !5042

do.end:                                           ; preds = %do.cond
  br label %if.end.5, !dbg !5044

if.end.5:                                         ; preds = %do.end, %do.body
  %14 = bitcast %struct._object** %_py_tmp to i8*, !dbg !5046
  call void @llvm.lifetime.end(i64 8, i8* %14) #1, !dbg !5046
  br label %do.end.7, !dbg !5049

do.end.7:                                         ; preds = %if.end.5
  %15 = load void (%struct._object*)*, void (%struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 4), align 8, !dbg !5050, !tbaa !1444
  %16 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5051, !tbaa !1246
  %17 = bitcast %struct.defdictobject* %16 to %struct._object*, !dbg !5052
  call void %15(%struct._object* %17), !dbg !5053
  ret void, !dbg !5054
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @defdict_repr(%struct.defdictobject* %dd) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dd.addr = alloca %struct.defdictobject*, align 8
  %baserepr = alloca %struct._object*, align 8
  %defrepr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  %_py_decref_tmp51 = alloca %struct._object*, align 8
  store %struct.defdictobject* %dd, %struct.defdictobject** %dd.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.defdictobject** %dd.addr, metadata !904, metadata !1242), !dbg !5055
  %0 = bitcast %struct._object** %baserepr to i8*, !dbg !5056
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5056
  call void @llvm.dbg.declare(metadata %struct._object** %baserepr, metadata !905, metadata !1242), !dbg !5057
  %1 = bitcast %struct._object** %defrepr to i8*, !dbg !5058
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !5058
  call void @llvm.dbg.declare(metadata %struct._object** %defrepr, metadata !906, metadata !1242), !dbg !5059
  %2 = bitcast %struct._object** %result to i8*, !dbg !5060
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !5060
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !907, metadata !1242), !dbg !5061
  %3 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 9), align 8, !dbg !5062, !tbaa !5063
  %4 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5064, !tbaa !1246
  %5 = bitcast %struct.defdictobject* %4 to %struct._object*, !dbg !5065
  %call = call %struct._object* %3(%struct._object* %5), !dbg !5066
  store %struct._object* %call, %struct._object** %baserepr, align 8, !dbg !5067, !tbaa !1246
  %6 = load %struct._object*, %struct._object** %baserepr, align 8, !dbg !5068, !tbaa !1246
  %cmp = icmp eq %struct._object* %6, null, !dbg !5070
  br i1 %cmp, label %if.then, label %if.end, !dbg !5071

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5072
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.62, !dbg !5072

if.end:                                           ; preds = %entry
  %7 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5073, !tbaa !1246
  %default_factory = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %7, i32 0, i32 1, !dbg !5074
  %8 = load %struct._object*, %struct._object** %default_factory, align 8, !dbg !5074, !tbaa !5010
  %cmp1 = icmp eq %struct._object* %8, null, !dbg !5075
  br i1 %cmp1, label %if.then.2, label %if.else, !dbg !5076

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0)), !dbg !5077
  store %struct._object* %call3, %struct._object** %defrepr, align 8, !dbg !5078, !tbaa !1246
  br label %if.end.21, !dbg !5079

if.else:                                          ; preds = %if.end
  %9 = bitcast i32* %status to i8*, !dbg !5080
  call void @llvm.lifetime.start(i64 4, i8* %9) #1, !dbg !5080
  call void @llvm.dbg.declare(metadata i32* %status, metadata !908, metadata !1242), !dbg !5081
  %10 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5082, !tbaa !1246
  %default_factory4 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %10, i32 0, i32 1, !dbg !5083
  %11 = load %struct._object*, %struct._object** %default_factory4, align 8, !dbg !5083, !tbaa !5010
  %call5 = call i32 @Py_ReprEnter(%struct._object* %11), !dbg !5084
  store i32 %call5, i32* %status, align 4, !dbg !5081, !tbaa !1906
  %12 = load i32, i32* %status, align 4, !dbg !5085, !tbaa !1906
  %cmp6 = icmp ne i32 %12, 0, !dbg !5086
  br i1 %cmp6, label %if.then.7, label %if.else.16, !dbg !5087

if.then.7:                                        ; preds = %if.else
  %13 = load i32, i32* %status, align 4, !dbg !5088, !tbaa !1906
  %cmp8 = icmp slt i32 %13, 0, !dbg !5089
  br i1 %cmp8, label %if.then.9, label %if.end.14, !dbg !5090

if.then.9:                                        ; preds = %if.then.7
  br label %do.body, !dbg !5091

do.body:                                          ; preds = %if.then.9
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5092
  call void @llvm.lifetime.start(i64 8, i8* %14) #1, !dbg !5092
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !911, metadata !1242), !dbg !5094
  %15 = load %struct._object*, %struct._object** %baserepr, align 8, !dbg !5095, !tbaa !1246
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !5094, !tbaa !1246
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5096, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !5098
  %17 = load i64, i64* %ob_refcnt, align 8, !dbg !5099, !tbaa !1261
  %dec = add i64 %17, -1, !dbg !5099
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5099, !tbaa !1261
  %cmp10 = icmp ne i64 %dec, 0, !dbg !5100
  br i1 %cmp10, label %if.then.11, label %if.else.12, !dbg !5101

if.then.11:                                       ; preds = %do.body
  br label %if.end.13, !dbg !5102

if.else.12:                                       ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5104, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !5106
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5106, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !5107
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5107, !tbaa !1444
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5108, !tbaa !1246
  call void %20(%struct._object* %21), !dbg !5109
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.12, %if.then.11
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5110
  call void @llvm.lifetime.end(i64 8, i8* %22) #1, !dbg !5110
  br label %do.cond, !dbg !5112

do.cond:                                          ; preds = %if.end.13
  br label %do.end, !dbg !5113

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !5115
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5115

if.end.14:                                        ; preds = %if.then.7
  %call15 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48, i32 0, i32 0)), !dbg !5116
  store %struct._object* %call15, %struct._object** %defrepr, align 8, !dbg !5117, !tbaa !1246
  br label %if.end.19, !dbg !5118

if.else.16:                                       ; preds = %if.else
  %23 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5119, !tbaa !1246
  %default_factory17 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %23, i32 0, i32 1, !dbg !5120
  %24 = load %struct._object*, %struct._object** %default_factory17, align 8, !dbg !5120, !tbaa !5010
  %call18 = call %struct._object* @PyObject_Repr(%struct._object* %24), !dbg !5121
  store %struct._object* %call18, %struct._object** %defrepr, align 8, !dbg !5122, !tbaa !1246
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.end.14
  %25 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5123, !tbaa !1246
  %default_factory20 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %25, i32 0, i32 1, !dbg !5124
  %26 = load %struct._object*, %struct._object** %default_factory20, align 8, !dbg !5124, !tbaa !5010
  call void @Py_ReprLeave(%struct._object* %26), !dbg !5125
  store i32 0, i32* %cleanup.dest.slot, !dbg !5126
  br label %cleanup, !dbg !5126

cleanup:                                          ; preds = %if.end.19, %do.end
  %27 = bitcast i32* %status to i8*, !dbg !5127
  call void @llvm.lifetime.end(i64 4, i8* %27) #1, !dbg !5127
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.62 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.21

if.end.21:                                        ; preds = %cleanup.cont, %if.then.2
  %28 = load %struct._object*, %struct._object** %defrepr, align 8, !dbg !5129, !tbaa !1246
  %cmp22 = icmp eq %struct._object* %28, null, !dbg !5130
  br i1 %cmp22, label %if.then.23, label %if.end.36, !dbg !5131

if.then.23:                                       ; preds = %if.end.21
  br label %do.body.24, !dbg !5132

do.body.24:                                       ; preds = %if.then.23
  %29 = bitcast %struct._object** %_py_decref_tmp25 to i8*, !dbg !5133
  call void @llvm.lifetime.start(i64 8, i8* %29) #1, !dbg !5133
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp25, metadata !917, metadata !1242), !dbg !5135
  %30 = load %struct._object*, %struct._object** %baserepr, align 8, !dbg !5136, !tbaa !1246
  store %struct._object* %30, %struct._object** %_py_decref_tmp25, align 8, !dbg !5135, !tbaa !1246
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8, !dbg !5137, !tbaa !1246
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0, !dbg !5139
  %32 = load i64, i64* %ob_refcnt26, align 8, !dbg !5140, !tbaa !1261
  %dec27 = add i64 %32, -1, !dbg !5140
  store i64 %dec27, i64* %ob_refcnt26, align 8, !dbg !5140, !tbaa !1261
  %cmp28 = icmp ne i64 %dec27, 0, !dbg !5141
  br i1 %cmp28, label %if.then.29, label %if.else.30, !dbg !5142

if.then.29:                                       ; preds = %do.body.24
  br label %if.end.33, !dbg !5143

if.else.30:                                       ; preds = %do.body.24
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8, !dbg !5145, !tbaa !1246
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !5147
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8, !dbg !5147, !tbaa !1345
  %tp_dealloc32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4, !dbg !5148
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc32, align 8, !dbg !5148, !tbaa !1444
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8, !dbg !5149, !tbaa !1246
  call void %35(%struct._object* %36), !dbg !5150
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.30, %if.then.29
  %37 = bitcast %struct._object** %_py_decref_tmp25 to i8*, !dbg !5151
  call void @llvm.lifetime.end(i64 8, i8* %37) #1, !dbg !5151
  br label %do.cond.34, !dbg !5153

do.cond.34:                                       ; preds = %if.end.33
  br label %do.end.35, !dbg !5154

do.end.35:                                        ; preds = %do.cond.34
  store %struct._object* null, %struct._object** %retval, !dbg !5156
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.62, !dbg !5156

if.end.36:                                        ; preds = %if.end.21
  %38 = load %struct._object*, %struct._object** %defrepr, align 8, !dbg !5157, !tbaa !1246
  %39 = load %struct._object*, %struct._object** %baserepr, align 8, !dbg !5158, !tbaa !1246
  %call37 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.49, i32 0, i32 0), %struct._object* %38, %struct._object* %39), !dbg !5159
  store %struct._object* %call37, %struct._object** %result, align 8, !dbg !5160, !tbaa !1246
  br label %do.body.38, !dbg !5161

do.body.38:                                       ; preds = %if.end.36
  %40 = bitcast %struct._object** %_py_decref_tmp39 to i8*, !dbg !5162
  call void @llvm.lifetime.start(i64 8, i8* %40) #1, !dbg !5162
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp39, metadata !921, metadata !1242), !dbg !5164
  %41 = load %struct._object*, %struct._object** %defrepr, align 8, !dbg !5165, !tbaa !1246
  store %struct._object* %41, %struct._object** %_py_decref_tmp39, align 8, !dbg !5164, !tbaa !1246
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !5166, !tbaa !1246
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !5168
  %43 = load i64, i64* %ob_refcnt40, align 8, !dbg !5169, !tbaa !1261
  %dec41 = add i64 %43, -1, !dbg !5169
  store i64 %dec41, i64* %ob_refcnt40, align 8, !dbg !5169, !tbaa !1261
  %cmp42 = icmp ne i64 %dec41, 0, !dbg !5170
  br i1 %cmp42, label %if.then.43, label %if.else.44, !dbg !5171

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47, !dbg !5172

if.else.44:                                       ; preds = %do.body.38
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !5174, !tbaa !1246
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !5176
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8, !dbg !5176, !tbaa !1345
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !5177
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8, !dbg !5177, !tbaa !1444
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !5178, !tbaa !1246
  call void %46(%struct._object* %47), !dbg !5179
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  %48 = bitcast %struct._object** %_py_decref_tmp39 to i8*, !dbg !5180
  call void @llvm.lifetime.end(i64 8, i8* %48) #1, !dbg !5180
  br label %do.cond.48, !dbg !5182

do.cond.48:                                       ; preds = %if.end.47
  br label %do.end.49, !dbg !5183

do.end.49:                                        ; preds = %do.cond.48
  br label %do.body.50, !dbg !5185

do.body.50:                                       ; preds = %do.end.49
  %49 = bitcast %struct._object** %_py_decref_tmp51 to i8*, !dbg !5186
  call void @llvm.lifetime.start(i64 8, i8* %49) #1, !dbg !5186
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp51, metadata !923, metadata !1242), !dbg !5188
  %50 = load %struct._object*, %struct._object** %baserepr, align 8, !dbg !5189, !tbaa !1246
  store %struct._object* %50, %struct._object** %_py_decref_tmp51, align 8, !dbg !5188, !tbaa !1246
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8, !dbg !5190, !tbaa !1246
  %ob_refcnt52 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0, !dbg !5192
  %52 = load i64, i64* %ob_refcnt52, align 8, !dbg !5193, !tbaa !1261
  %dec53 = add i64 %52, -1, !dbg !5193
  store i64 %dec53, i64* %ob_refcnt52, align 8, !dbg !5193, !tbaa !1261
  %cmp54 = icmp ne i64 %dec53, 0, !dbg !5194
  br i1 %cmp54, label %if.then.55, label %if.else.56, !dbg !5195

if.then.55:                                       ; preds = %do.body.50
  br label %if.end.59, !dbg !5196

if.else.56:                                       ; preds = %do.body.50
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8, !dbg !5198, !tbaa !1246
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1, !dbg !5200
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8, !dbg !5200, !tbaa !1345
  %tp_dealloc58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4, !dbg !5201
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc58, align 8, !dbg !5201, !tbaa !1444
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8, !dbg !5202, !tbaa !1246
  call void %55(%struct._object* %56), !dbg !5203
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.55
  %57 = bitcast %struct._object** %_py_decref_tmp51 to i8*, !dbg !5204
  call void @llvm.lifetime.end(i64 8, i8* %57) #1, !dbg !5204
  br label %do.cond.60, !dbg !5205

do.cond.60:                                       ; preds = %if.end.59
  br label %do.end.61, !dbg !5206

do.end.61:                                        ; preds = %do.cond.60
  %58 = load %struct._object*, %struct._object** %result, align 8, !dbg !5208, !tbaa !1246
  store %struct._object* %58, %struct._object** %retval, !dbg !5209
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.62, !dbg !5209

cleanup.62:                                       ; preds = %do.end.61, %do.end.35, %cleanup, %if.then
  %59 = bitcast %struct._object** %result to i8*, !dbg !5210
  call void @llvm.lifetime.end(i64 8, i8* %59) #1, !dbg !5210
  %60 = bitcast %struct._object** %defrepr to i8*, !dbg !5210
  call void @llvm.lifetime.end(i64 8, i8* %60) #1, !dbg !5210
  %61 = bitcast %struct._object** %baserepr to i8*, !dbg !5210
  call void @llvm.lifetime.end(i64 8, i8* %61) #1, !dbg !5210
  %62 = load %struct._object*, %struct._object** %retval, !dbg !5210
  ret %struct._object* %62, !dbg !5210
}

; Function Attrs: nounwind uwtable
define internal i32 @defdict_traverse(%struct._object* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !927, metadata !1242), !dbg !5211
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata i32 (%struct._object*, i8*)** %visit.addr, metadata !928, metadata !1242), !dbg !5212
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !929, metadata !1242), !dbg !5213
  br label %do.body, !dbg !5214

do.body:                                          ; preds = %entry
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5215, !tbaa !1246
  %1 = bitcast %struct._object* %0 to %struct.defdictobject*, !dbg !5217
  %default_factory = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %1, i32 0, i32 1, !dbg !5218
  %2 = load %struct._object*, %struct._object** %default_factory, align 8, !dbg !5218, !tbaa !5010
  %tobool = icmp ne %struct._object* %2, null, !dbg !5219
  br i1 %tobool, label %if.then, label %if.end.4, !dbg !5220

if.then:                                          ; preds = %do.body
  %3 = bitcast i32* %vret to i8*, !dbg !5221
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !5221
  call void @llvm.dbg.declare(metadata i32* %vret, metadata !930, metadata !1242), !dbg !5223
  %4 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8, !dbg !5224, !tbaa !1246
  %5 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5225, !tbaa !1246
  %6 = bitcast %struct._object* %5 to %struct.defdictobject*, !dbg !5226
  %default_factory1 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %6, i32 0, i32 1, !dbg !5227
  %7 = load %struct._object*, %struct._object** %default_factory1, align 8, !dbg !5227, !tbaa !5010
  %8 = load i8*, i8** %arg.addr, align 8, !dbg !5228, !tbaa !1246
  %call = call i32 %4(%struct._object* %7, i8* %8), !dbg !5224
  store i32 %call, i32* %vret, align 4, !dbg !5223, !tbaa !1906
  %9 = load i32, i32* %vret, align 4, !dbg !5229, !tbaa !1906
  %tobool2 = icmp ne i32 %9, 0, !dbg !5229
  br i1 %tobool2, label %if.then.3, label %if.end, !dbg !5231

if.then.3:                                        ; preds = %if.then
  %10 = load i32, i32* %vret, align 4, !dbg !5232, !tbaa !1906
  store i32 %10, i32* %retval, !dbg !5234
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5234

if.end:                                           ; preds = %if.then
  store i32 0, i32* %cleanup.dest.slot, !dbg !5235
  br label %cleanup, !dbg !5235

cleanup:                                          ; preds = %if.end, %if.then.3
  %11 = bitcast i32* %vret to i8*, !dbg !5237
  call void @llvm.lifetime.end(i64 4, i8* %11) #1, !dbg !5237
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.4, !dbg !5240

if.end.4:                                         ; preds = %cleanup.cont, %do.body
  br label %do.end, !dbg !5241

do.end:                                           ; preds = %if.end.4
  %12 = load i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 21), align 8, !dbg !5244, !tbaa !5245
  %13 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5246, !tbaa !1246
  %14 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8, !dbg !5247, !tbaa !1246
  %15 = load i8*, i8** %arg.addr, align 8, !dbg !5248, !tbaa !1246
  %call5 = call i32 %12(%struct._object* %13, i32 (%struct._object*, i8*)* %14, i8* %15), !dbg !5249
  store i32 %call5, i32* %retval, !dbg !5250
  br label %return, !dbg !5250

return:                                           ; preds = %do.end, %cleanup
  %16 = load i32, i32* %retval, !dbg !5251
  ret i32 %16, !dbg !5251

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind uwtable
define internal i32 @defdict_tp_clear(%struct.defdictobject* %dd) #0 {
entry:
  %dd.addr = alloca %struct.defdictobject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.defdictobject* %dd, %struct.defdictobject** %dd.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.defdictobject** %dd.addr, metadata !938, metadata !1242), !dbg !5252
  br label %do.body, !dbg !5253

do.body:                                          ; preds = %entry
  %0 = bitcast %struct._object** %_py_tmp to i8*, !dbg !5254
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5254
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp, metadata !939, metadata !1242), !dbg !5256
  %1 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5257, !tbaa !1246
  %default_factory = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %1, i32 0, i32 1, !dbg !5258
  %2 = load %struct._object*, %struct._object** %default_factory, align 8, !dbg !5258, !tbaa !5010
  store %struct._object* %2, %struct._object** %_py_tmp, align 8, !dbg !5256, !tbaa !1246
  %3 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !5259, !tbaa !1246
  %cmp = icmp ne %struct._object* %3, null, !dbg !5260
  br i1 %cmp, label %if.then, label %if.end.5, !dbg !5261

if.then:                                          ; preds = %do.body
  %4 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5262, !tbaa !1246
  %default_factory1 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %4, i32 0, i32 1, !dbg !5264
  store %struct._object* null, %struct._object** %default_factory1, align 8, !dbg !5265, !tbaa !5010
  br label %do.body.2, !dbg !5266

do.body.2:                                        ; preds = %if.then
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5267
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !5267
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !941, metadata !1242), !dbg !5269
  %6 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !5270, !tbaa !1246
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !5269, !tbaa !1246
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5271, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !5273
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !5274, !tbaa !1261
  %dec = add i64 %8, -1, !dbg !5274
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5274, !tbaa !1261
  %cmp3 = icmp ne i64 %dec, 0, !dbg !5275
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !5276

if.then.4:                                        ; preds = %do.body.2
  br label %if.end, !dbg !5277

if.else:                                          ; preds = %do.body.2
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5279, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !5281
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5281, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !5282
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5282, !tbaa !1444
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5283, !tbaa !1246
  call void %11(%struct._object* %12), !dbg !5284
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5285
  call void @llvm.lifetime.end(i64 8, i8* %13) #1, !dbg !5285
  br label %do.cond, !dbg !5287

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !5288

do.end:                                           ; preds = %do.cond
  br label %if.end.5, !dbg !5290

if.end.5:                                         ; preds = %do.end, %do.body
  %14 = bitcast %struct._object** %_py_tmp to i8*, !dbg !5292
  call void @llvm.lifetime.end(i64 8, i8* %14) #1, !dbg !5292
  br label %do.end.7, !dbg !5295

do.end.7:                                         ; preds = %if.end.5
  %15 = load i32 (%struct._object*)*, i32 (%struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 22), align 8, !dbg !5296, !tbaa !5297
  %16 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5298, !tbaa !1246
  %17 = bitcast %struct.defdictobject* %16 to %struct._object*, !dbg !5299
  %call = call i32 %15(%struct._object* %17), !dbg !5300
  ret i32 %call, !dbg !5301
}

; Function Attrs: nounwind uwtable
define internal i32 @defdict_init(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %dd = alloca %struct.defdictobject*, align 8
  %olddefault = alloca %struct._object*, align 8
  %newdefault = alloca %struct._object*, align 8
  %newargs = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %n = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !990, metadata !1242), !dbg !5302
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !991, metadata !1242), !dbg !5303
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !992, metadata !1242), !dbg !5304
  %0 = bitcast %struct.defdictobject** %dd to i8*, !dbg !5305
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5305
  call void @llvm.dbg.declare(metadata %struct.defdictobject** %dd, metadata !993, metadata !1242), !dbg !5306
  %1 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5307, !tbaa !1246
  %2 = bitcast %struct._object* %1 to %struct.defdictobject*, !dbg !5308
  store %struct.defdictobject* %2, %struct.defdictobject** %dd, align 8, !dbg !5306, !tbaa !1246
  %3 = bitcast %struct._object** %olddefault to i8*, !dbg !5309
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !5309
  call void @llvm.dbg.declare(metadata %struct._object** %olddefault, metadata !994, metadata !1242), !dbg !5310
  %4 = load %struct.defdictobject*, %struct.defdictobject** %dd, align 8, !dbg !5311, !tbaa !1246
  %default_factory = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %4, i32 0, i32 1, !dbg !5312
  %5 = load %struct._object*, %struct._object** %default_factory, align 8, !dbg !5312, !tbaa !5010
  store %struct._object* %5, %struct._object** %olddefault, align 8, !dbg !5310, !tbaa !1246
  %6 = bitcast %struct._object** %newdefault to i8*, !dbg !5313
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !5313
  call void @llvm.dbg.declare(metadata %struct._object** %newdefault, metadata !995, metadata !1242), !dbg !5314
  store %struct._object* null, %struct._object** %newdefault, align 8, !dbg !5314, !tbaa !1246
  %7 = bitcast %struct._object** %newargs to i8*, !dbg !5315
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !5315
  call void @llvm.dbg.declare(metadata %struct._object** %newargs, metadata !996, metadata !1242), !dbg !5316
  %8 = bitcast i32* %result to i8*, !dbg !5317
  call void @llvm.lifetime.start(i64 4, i8* %8) #1, !dbg !5317
  call void @llvm.dbg.declare(metadata i32* %result, metadata !997, metadata !1242), !dbg !5318
  %9 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5319, !tbaa !1246
  %cmp = icmp eq %struct._object* %9, null, !dbg !5320
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5321

lor.lhs.false:                                    ; preds = %entry
  %10 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5322, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !5324
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5324, !tbaa !1345
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 19, !dbg !5325
  %12 = load i64, i64* %tp_flags, align 8, !dbg !5325, !tbaa !5326
  %and = and i64 %12, 67108864, !dbg !5327
  %cmp1 = icmp ne i64 %and, 0, !dbg !5328
  br i1 %cmp1, label %if.else, label %if.then, !dbg !5329

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @PyTuple_New(i64 0), !dbg !5330
  store %struct._object* %call, %struct._object** %newargs, align 8, !dbg !5331, !tbaa !1246
  br label %if.end.9, !dbg !5332

if.else:                                          ; preds = %lor.lhs.false
  %13 = bitcast i64* %n to i8*, !dbg !5333
  call void @llvm.lifetime.start(i64 8, i8* %13) #1, !dbg !5333
  call void @llvm.dbg.declare(metadata i64* %n, metadata !998, metadata !1242), !dbg !5334
  %14 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5335, !tbaa !1246
  %15 = bitcast %struct._object* %14 to %struct.PyVarObject*, !dbg !5336
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1, !dbg !5337
  %16 = load i64, i64* %ob_size, align 8, !dbg !5337, !tbaa !2108
  store i64 %16, i64* %n, align 8, !dbg !5334, !tbaa !1990
  %17 = load i64, i64* %n, align 8, !dbg !5338, !tbaa !1990
  %cmp2 = icmp sgt i64 %17, 0, !dbg !5340
  br i1 %cmp2, label %if.then.3, label %if.end.7, !dbg !5341

if.then.3:                                        ; preds = %if.else
  %18 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5342, !tbaa !1246
  %19 = bitcast %struct._object* %18 to %struct.PyTupleObject*, !dbg !5344
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %19, i32 0, i32 1, !dbg !5345
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !5346
  %20 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !5346, !tbaa !1246
  store %struct._object* %20, %struct._object** %newdefault, align 8, !dbg !5347, !tbaa !1246
  %21 = load %struct._object*, %struct._object** %newdefault, align 8, !dbg !5348, !tbaa !1246
  %call4 = call i32 @PyCallable_Check(%struct._object* %21), !dbg !5350
  %tobool = icmp ne i32 %call4, 0, !dbg !5350
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5351

land.lhs.true:                                    ; preds = %if.then.3
  %22 = load %struct._object*, %struct._object** %newdefault, align 8, !dbg !5352, !tbaa !1246
  %cmp5 = icmp ne %struct._object* %22, @_Py_NoneStruct, !dbg !5354
  br i1 %cmp5, label %if.then.6, label %if.end, !dbg !5355

if.then.6:                                        ; preds = %land.lhs.true
  %23 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !5356, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %23, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.56, i32 0, i32 0)), !dbg !5358
  store i32 -1, i32* %retval, !dbg !5359
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5359

if.end:                                           ; preds = %land.lhs.true, %if.then.3
  br label %if.end.7, !dbg !5360

if.end.7:                                         ; preds = %if.end, %if.else
  %24 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5361, !tbaa !1246
  %25 = load i64, i64* %n, align 8, !dbg !5362, !tbaa !1990
  %call8 = call %struct._object* @PySequence_GetSlice(%struct._object* %24, i64 1, i64 %25), !dbg !5363
  store %struct._object* %call8, %struct._object** %newargs, align 8, !dbg !5364, !tbaa !1246
  store i32 0, i32* %cleanup.dest.slot, !dbg !5365
  br label %cleanup, !dbg !5365

cleanup:                                          ; preds = %if.end.7, %if.then.6
  %26 = bitcast i64* %n to i8*, !dbg !5366
  call void @llvm.lifetime.end(i64 8, i8* %26) #1, !dbg !5366
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.45 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.9

if.end.9:                                         ; preds = %cleanup.cont, %if.then
  %27 = load %struct._object*, %struct._object** %newargs, align 8, !dbg !5367, !tbaa !1246
  %cmp10 = icmp eq %struct._object* %27, null, !dbg !5369
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !5370

if.then.11:                                       ; preds = %if.end.9
  store i32 -1, i32* %retval, !dbg !5371
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.45, !dbg !5371

if.end.12:                                        ; preds = %if.end.9
  br label %do.body, !dbg !5372

do.body:                                          ; preds = %if.end.12
  %28 = bitcast %struct._object** %_py_xincref_tmp to i8*, !dbg !5373
  call void @llvm.lifetime.start(i64 8, i8* %28) #1, !dbg !5373
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xincref_tmp, metadata !1001, metadata !1242), !dbg !5375
  %29 = load %struct._object*, %struct._object** %newdefault, align 8, !dbg !5376, !tbaa !1246
  store %struct._object* %29, %struct._object** %_py_xincref_tmp, align 8, !dbg !5375, !tbaa !1246
  %30 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8, !dbg !5377, !tbaa !1246
  %cmp13 = icmp ne %struct._object* %30, null, !dbg !5379
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !5380

if.then.14:                                       ; preds = %do.body
  %31 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8, !dbg !5381, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0, !dbg !5383
  %32 = load i64, i64* %ob_refcnt, align 8, !dbg !5384, !tbaa !1261
  %inc = add i64 %32, 1, !dbg !5384
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !5384, !tbaa !1261
  br label %if.end.15, !dbg !5385

if.end.15:                                        ; preds = %if.then.14, %do.body
  %33 = bitcast %struct._object** %_py_xincref_tmp to i8*, !dbg !5386
  call void @llvm.lifetime.end(i64 8, i8* %33) #1, !dbg !5386
  br label %do.cond, !dbg !5389

do.cond:                                          ; preds = %if.end.15
  br label %do.end, !dbg !5390

do.end:                                           ; preds = %do.cond
  %34 = load %struct._object*, %struct._object** %newdefault, align 8, !dbg !5392, !tbaa !1246
  %35 = load %struct.defdictobject*, %struct.defdictobject** %dd, align 8, !dbg !5393, !tbaa !1246
  %default_factory16 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %35, i32 0, i32 1, !dbg !5394
  store %struct._object* %34, %struct._object** %default_factory16, align 8, !dbg !5395, !tbaa !5010
  %36 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 35), align 8, !dbg !5396, !tbaa !5397
  %37 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5398, !tbaa !1246
  %38 = load %struct._object*, %struct._object** %newargs, align 8, !dbg !5399, !tbaa !1246
  %39 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !5400, !tbaa !1246
  %call17 = call i32 %36(%struct._object* %37, %struct._object* %38, %struct._object* %39), !dbg !5401
  store i32 %call17, i32* %result, align 4, !dbg !5402, !tbaa !1906
  br label %do.body.18, !dbg !5403

do.body.18:                                       ; preds = %do.end
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5404
  call void @llvm.lifetime.start(i64 8, i8* %40) #1, !dbg !5404
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1003, metadata !1242), !dbg !5406
  %41 = load %struct._object*, %struct._object** %newargs, align 8, !dbg !5407, !tbaa !1246
  store %struct._object* %41, %struct._object** %_py_decref_tmp, align 8, !dbg !5406, !tbaa !1246
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5408, !tbaa !1246
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !5410
  %43 = load i64, i64* %ob_refcnt19, align 8, !dbg !5411, !tbaa !1261
  %dec = add i64 %43, -1, !dbg !5411
  store i64 %dec, i64* %ob_refcnt19, align 8, !dbg !5411, !tbaa !1261
  %cmp20 = icmp ne i64 %dec, 0, !dbg !5412
  br i1 %cmp20, label %if.then.21, label %if.else.22, !dbg !5413

if.then.21:                                       ; preds = %do.body.18
  br label %if.end.24, !dbg !5414

if.else.22:                                       ; preds = %do.body.18
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5416, !tbaa !1246
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !5418
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8, !dbg !5418, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !5419
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5419, !tbaa !1444
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5420, !tbaa !1246
  call void %46(%struct._object* %47), !dbg !5421
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  %48 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5422
  call void @llvm.lifetime.end(i64 8, i8* %48) #1, !dbg !5422
  br label %do.cond.25, !dbg !5424

do.cond.25:                                       ; preds = %if.end.24
  br label %do.end.26, !dbg !5425

do.end.26:                                        ; preds = %do.cond.25
  br label %do.body.27, !dbg !5427

do.body.27:                                       ; preds = %do.end.26
  %49 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !5428
  call void @llvm.lifetime.start(i64 8, i8* %49) #1, !dbg !5428
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1005, metadata !1242), !dbg !5430
  %50 = load %struct._object*, %struct._object** %olddefault, align 8, !dbg !5431, !tbaa !1246
  store %struct._object* %50, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5430, !tbaa !1246
  %51 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5432, !tbaa !1246
  %cmp28 = icmp ne %struct._object* %51, null, !dbg !5433
  br i1 %cmp28, label %if.then.29, label %if.end.42, !dbg !5434

if.then.29:                                       ; preds = %do.body.27
  br label %do.body.30, !dbg !5435

do.body.30:                                       ; preds = %if.then.29
  %52 = bitcast %struct._object** %_py_decref_tmp31 to i8*, !dbg !5437
  call void @llvm.lifetime.start(i64 8, i8* %52) #1, !dbg !5437
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp31, metadata !1007, metadata !1242), !dbg !5439
  %53 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5440, !tbaa !1246
  store %struct._object* %53, %struct._object** %_py_decref_tmp31, align 8, !dbg !5439, !tbaa !1246
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8, !dbg !5441, !tbaa !1246
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0, !dbg !5443
  %55 = load i64, i64* %ob_refcnt32, align 8, !dbg !5444, !tbaa !1261
  %dec33 = add i64 %55, -1, !dbg !5444
  store i64 %dec33, i64* %ob_refcnt32, align 8, !dbg !5444, !tbaa !1261
  %cmp34 = icmp ne i64 %dec33, 0, !dbg !5445
  br i1 %cmp34, label %if.then.35, label %if.else.36, !dbg !5446

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39, !dbg !5447

if.else.36:                                       ; preds = %do.body.30
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8, !dbg !5449, !tbaa !1246
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1, !dbg !5451
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8, !dbg !5451, !tbaa !1345
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4, !dbg !5452
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8, !dbg !5452, !tbaa !1444
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8, !dbg !5453, !tbaa !1246
  call void %58(%struct._object* %59), !dbg !5454
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  %60 = bitcast %struct._object** %_py_decref_tmp31 to i8*, !dbg !5455
  call void @llvm.lifetime.end(i64 8, i8* %60) #1, !dbg !5455
  br label %do.cond.40, !dbg !5457

do.cond.40:                                       ; preds = %if.end.39
  br label %do.end.41, !dbg !5458

do.end.41:                                        ; preds = %do.cond.40
  br label %if.end.42, !dbg !5460

if.end.42:                                        ; preds = %do.end.41, %do.body.27
  %61 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !5462
  call void @llvm.lifetime.end(i64 8, i8* %61) #1, !dbg !5462
  br label %do.cond.43, !dbg !5464

do.cond.43:                                       ; preds = %if.end.42
  br label %do.end.44, !dbg !5465

do.end.44:                                        ; preds = %do.cond.43
  %62 = load i32, i32* %result, align 4, !dbg !5467, !tbaa !1906
  store i32 %62, i32* %retval, !dbg !5468
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.45, !dbg !5468

cleanup.45:                                       ; preds = %do.end.44, %if.then.11, %cleanup
  %63 = bitcast i32* %result to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 4, i8* %63) #1, !dbg !5469
  %64 = bitcast %struct._object** %newargs to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 8, i8* %64) #1, !dbg !5469
  %65 = bitcast %struct._object** %newdefault to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 8, i8* %65) #1, !dbg !5469
  %66 = bitcast %struct._object** %olddefault to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 8, i8* %66) #1, !dbg !5469
  %67 = bitcast %struct.defdictobject** %dd to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 8, i8* %67) #1, !dbg !5469
  %68 = load i32, i32* %retval, !dbg !5469
  ret i32 %68, !dbg !5469
}

declare %struct._object* @PyObject_Repr(%struct._object*) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @defdict_missing(%struct.defdictobject* %dd, %struct._object* %key) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dd.addr = alloca %struct.defdictobject*, align 8
  %key.addr = alloca %struct._object*, align 8
  %factory = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %tup = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  store %struct.defdictobject* %dd, %struct.defdictobject** %dd.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.defdictobject** %dd.addr, metadata !949, metadata !1242), !dbg !5470
  store %struct._object* %key, %struct._object** %key.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %key.addr, metadata !950, metadata !1242), !dbg !5471
  %0 = bitcast %struct._object** %factory to i8*, !dbg !5472
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5472
  call void @llvm.dbg.declare(metadata %struct._object** %factory, metadata !951, metadata !1242), !dbg !5473
  %1 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5474, !tbaa !1246
  %default_factory = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %1, i32 0, i32 1, !dbg !5475
  %2 = load %struct._object*, %struct._object** %default_factory, align 8, !dbg !5475, !tbaa !5010
  store %struct._object* %2, %struct._object** %factory, align 8, !dbg !5473, !tbaa !1246
  %3 = bitcast %struct._object** %value to i8*, !dbg !5476
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !5476
  call void @llvm.dbg.declare(metadata %struct._object** %value, metadata !952, metadata !1242), !dbg !5477
  %4 = load %struct._object*, %struct._object** %factory, align 8, !dbg !5478, !tbaa !1246
  %cmp = icmp eq %struct._object* %4, null, !dbg !5479
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5480

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct._object*, %struct._object** %factory, align 8, !dbg !5481, !tbaa !1246
  %cmp1 = icmp eq %struct._object* %5, @_Py_NoneStruct, !dbg !5483
  br i1 %cmp1, label %if.then, label %if.end.6, !dbg !5484

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = bitcast %struct._object** %tup to i8*, !dbg !5485
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !5485
  call void @llvm.dbg.declare(metadata %struct._object** %tup, metadata !953, metadata !1242), !dbg !5486
  %7 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !5487, !tbaa !1246
  %call = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %7), !dbg !5488
  store %struct._object* %call, %struct._object** %tup, align 8, !dbg !5489, !tbaa !1246
  %8 = load %struct._object*, %struct._object** %tup, align 8, !dbg !5490, !tbaa !1246
  %tobool = icmp ne %struct._object* %8, null, !dbg !5490
  br i1 %tobool, label %if.end, label %if.then.2, !dbg !5492

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !5493
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5495

if.end:                                           ; preds = %if.then
  %9 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8, !dbg !5496, !tbaa !1246
  %10 = load %struct._object*, %struct._object** %tup, align 8, !dbg !5497, !tbaa !1246
  call void @PyErr_SetObject(%struct._object* %9, %struct._object* %10), !dbg !5498
  br label %do.body, !dbg !5499

do.body:                                          ; preds = %if.end
  %11 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5500
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !5500
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !956, metadata !1242), !dbg !5502
  %12 = load %struct._object*, %struct._object** %tup, align 8, !dbg !5503, !tbaa !1246
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8, !dbg !5502, !tbaa !1246
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5504, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0, !dbg !5506
  %14 = load i64, i64* %ob_refcnt, align 8, !dbg !5507, !tbaa !1261
  %dec = add i64 %14, -1, !dbg !5507
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5507, !tbaa !1261
  %cmp3 = icmp ne i64 %dec, 0, !dbg !5508
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !5509

if.then.4:                                        ; preds = %do.body
  br label %if.end.5, !dbg !5510

if.else:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5512, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !5514
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5514, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4, !dbg !5515
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5515, !tbaa !1444
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5516, !tbaa !1246
  call void %17(%struct._object* %18), !dbg !5517
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5518
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !5518
  br label %do.cond, !dbg !5520

do.cond:                                          ; preds = %if.end.5
  br label %do.end, !dbg !5521

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !5523
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5523

cleanup:                                          ; preds = %do.end, %if.then.2
  %20 = bitcast %struct._object** %tup to i8*, !dbg !5524
  call void @llvm.lifetime.end(i64 8, i8* %20) #1, !dbg !5524
  br label %cleanup.27

if.end.6:                                         ; preds = %lor.lhs.false
  %21 = load %struct._object*, %struct._object** %factory, align 8, !dbg !5525, !tbaa !1246
  %call7 = call %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %21, %struct._object* null, %struct._object* null), !dbg !5526
  store %struct._object* %call7, %struct._object** %value, align 8, !dbg !5527, !tbaa !1246
  %22 = load %struct._object*, %struct._object** %value, align 8, !dbg !5528, !tbaa !1246
  %cmp8 = icmp eq %struct._object* %22, null, !dbg !5530
  br i1 %cmp8, label %if.then.9, label %if.end.10, !dbg !5531

if.then.9:                                        ; preds = %if.end.6
  %23 = load %struct._object*, %struct._object** %value, align 8, !dbg !5532, !tbaa !1246
  store %struct._object* %23, %struct._object** %retval, !dbg !5533
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.27, !dbg !5533

if.end.10:                                        ; preds = %if.end.6
  %24 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5534, !tbaa !1246
  %25 = bitcast %struct.defdictobject* %24 to %struct._object*, !dbg !5535
  %26 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !5536, !tbaa !1246
  %27 = load %struct._object*, %struct._object** %value, align 8, !dbg !5537, !tbaa !1246
  %call11 = call i32 @PyObject_SetItem(%struct._object* %25, %struct._object* %26, %struct._object* %27), !dbg !5538
  %cmp12 = icmp slt i32 %call11, 0, !dbg !5539
  br i1 %cmp12, label %if.then.13, label %if.end.26, !dbg !5540

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14, !dbg !5541

do.body.14:                                       ; preds = %if.then.13
  %28 = bitcast %struct._object** %_py_decref_tmp15 to i8*, !dbg !5542
  call void @llvm.lifetime.start(i64 8, i8* %28) #1, !dbg !5542
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp15, metadata !958, metadata !1242), !dbg !5544
  %29 = load %struct._object*, %struct._object** %value, align 8, !dbg !5545, !tbaa !1246
  store %struct._object* %29, %struct._object** %_py_decref_tmp15, align 8, !dbg !5544, !tbaa !1246
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !5546, !tbaa !1246
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0, !dbg !5548
  %31 = load i64, i64* %ob_refcnt16, align 8, !dbg !5549, !tbaa !1261
  %dec17 = add i64 %31, -1, !dbg !5549
  store i64 %dec17, i64* %ob_refcnt16, align 8, !dbg !5549, !tbaa !1261
  %cmp18 = icmp ne i64 %dec17, 0, !dbg !5550
  br i1 %cmp18, label %if.then.19, label %if.else.20, !dbg !5551

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23, !dbg !5552

if.else.20:                                       ; preds = %do.body.14
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !5554, !tbaa !1246
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1, !dbg !5556
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8, !dbg !5556, !tbaa !1345
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4, !dbg !5557
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8, !dbg !5557, !tbaa !1444
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !5558, !tbaa !1246
  call void %34(%struct._object* %35), !dbg !5559
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  %36 = bitcast %struct._object** %_py_decref_tmp15 to i8*, !dbg !5560
  call void @llvm.lifetime.end(i64 8, i8* %36) #1, !dbg !5560
  br label %do.cond.24, !dbg !5562

do.cond.24:                                       ; preds = %if.end.23
  br label %do.end.25, !dbg !5563

do.end.25:                                        ; preds = %do.cond.24
  store %struct._object* null, %struct._object** %retval, !dbg !5565
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.27, !dbg !5565

if.end.26:                                        ; preds = %if.end.10
  %37 = load %struct._object*, %struct._object** %value, align 8, !dbg !5566, !tbaa !1246
  store %struct._object* %37, %struct._object** %retval, !dbg !5567
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.27, !dbg !5567

cleanup.27:                                       ; preds = %if.end.26, %do.end.25, %if.then.9, %cleanup
  %38 = bitcast %struct._object** %value to i8*, !dbg !5568
  call void @llvm.lifetime.end(i64 8, i8* %38) #1, !dbg !5568
  %39 = bitcast %struct._object** %factory to i8*, !dbg !5568
  call void @llvm.lifetime.end(i64 8, i8* %39) #1, !dbg !5568
  %40 = load %struct._object*, %struct._object** %retval, !dbg !5568
  ret %struct._object* %40, !dbg !5568
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @defdict_copy(%struct.defdictobject* %dd) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dd.addr = alloca %struct.defdictobject*, align 8
  store %struct.defdictobject* %dd, %struct.defdictobject** %dd.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.defdictobject** %dd.addr, metadata !964, metadata !1242), !dbg !5569
  %0 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5570, !tbaa !1246
  %default_factory = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %0, i32 0, i32 1, !dbg !5572
  %1 = load %struct._object*, %struct._object** %default_factory, align 8, !dbg !5572, !tbaa !5010
  %cmp = icmp eq %struct._object* %1, null, !dbg !5573
  br i1 %cmp, label %if.then, label %if.end, !dbg !5574

if.then:                                          ; preds = %entry
  %2 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5575, !tbaa !1246
  %3 = bitcast %struct.defdictobject* %2 to %struct._object*, !dbg !5576
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !5577
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5577, !tbaa !1345
  %5 = bitcast %struct._typeobject* %4 to %struct._object*, !dbg !5578
  %6 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5579, !tbaa !1246
  %call = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %5, %struct._object* @_Py_NoneStruct, %struct.defdictobject* %6, i8* null), !dbg !5580
  store %struct._object* %call, %struct._object** %retval, !dbg !5581
  br label %return, !dbg !5581

if.end:                                           ; preds = %entry
  %7 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5582, !tbaa !1246
  %8 = bitcast %struct.defdictobject* %7 to %struct._object*, !dbg !5583
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !5584
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !5584, !tbaa !1345
  %10 = bitcast %struct._typeobject* %9 to %struct._object*, !dbg !5585
  %11 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5586, !tbaa !1246
  %default_factory2 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %11, i32 0, i32 1, !dbg !5587
  %12 = load %struct._object*, %struct._object** %default_factory2, align 8, !dbg !5587, !tbaa !5010
  %13 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5588, !tbaa !1246
  %call3 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %10, %struct._object* %12, %struct.defdictobject* %13, i8* null), !dbg !5589
  store %struct._object* %call3, %struct._object** %retval, !dbg !5590
  br label %return, !dbg !5590

return:                                           ; preds = %if.end, %if.then
  %14 = load %struct._object*, %struct._object** %retval, !dbg !5591
  ret %struct._object* %14, !dbg !5591
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @defdict_reduce(%struct.defdictobject* %dd) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dd.addr = alloca %struct.defdictobject*, align 8
  %args = alloca %struct._object*, align 8
  %items = alloca %struct._object*, align 8
  %iter = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp20 = alloca %struct._object*, align 8
  %_py_decref_tmp32 = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  %_py_decref_tmp59 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  store %struct.defdictobject* %dd, %struct.defdictobject** %dd.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.defdictobject** %dd.addr, metadata !967, metadata !1242), !dbg !5592
  %0 = bitcast %struct._object** %args to i8*, !dbg !5593
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5593
  call void @llvm.dbg.declare(metadata %struct._object** %args, metadata !968, metadata !1242), !dbg !5594
  %1 = bitcast %struct._object** %items to i8*, !dbg !5595
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !5595
  call void @llvm.dbg.declare(metadata %struct._object** %items, metadata !969, metadata !1242), !dbg !5596
  %2 = bitcast %struct._object** %iter to i8*, !dbg !5597
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !5597
  call void @llvm.dbg.declare(metadata %struct._object** %iter, metadata !970, metadata !1242), !dbg !5598
  %3 = bitcast %struct._object** %result to i8*, !dbg !5599
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !5599
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !971, metadata !1242), !dbg !5600
  %4 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5601, !tbaa !1246
  %default_factory = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %4, i32 0, i32 1, !dbg !5603
  %5 = load %struct._object*, %struct._object** %default_factory, align 8, !dbg !5603, !tbaa !5010
  %cmp = icmp eq %struct._object* %5, null, !dbg !5604
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5605

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5606, !tbaa !1246
  %default_factory1 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %6, i32 0, i32 1, !dbg !5608
  %7 = load %struct._object*, %struct._object** %default_factory1, align 8, !dbg !5608, !tbaa !5010
  %cmp2 = icmp eq %struct._object* %7, @_Py_NoneStruct, !dbg !5609
  br i1 %cmp2, label %if.then, label %if.else, !dbg !5610

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @PyTuple_New(i64 0), !dbg !5611
  store %struct._object* %call, %struct._object** %args, align 8, !dbg !5612, !tbaa !1246
  br label %if.end, !dbg !5613

if.else:                                          ; preds = %lor.lhs.false
  %8 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5614, !tbaa !1246
  %default_factory3 = getelementptr inbounds %struct.defdictobject, %struct.defdictobject* %8, i32 0, i32 1, !dbg !5615
  %9 = load %struct._object*, %struct._object** %default_factory3, align 8, !dbg !5615, !tbaa !5010
  %call4 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %9), !dbg !5616
  store %struct._object* %call4, %struct._object** %args, align 8, !dbg !5617, !tbaa !1246
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct._object*, %struct._object** %args, align 8, !dbg !5618, !tbaa !1246
  %cmp5 = icmp eq %struct._object* %10, null, !dbg !5620
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !5621

if.then.6:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !5622
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5622

if.end.7:                                         ; preds = %if.end
  %11 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5623, !tbaa !1246
  %12 = bitcast %struct.defdictobject* %11 to %struct._object*, !dbg !5624
  %call8 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %12, %struct._Py_Identifier* @defdict_reduce.PyId_items, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0)), !dbg !5625
  store %struct._object* %call8, %struct._object** %items, align 8, !dbg !5626, !tbaa !1246
  %13 = load %struct._object*, %struct._object** %items, align 8, !dbg !5627, !tbaa !1246
  %cmp9 = icmp eq %struct._object* %13, null, !dbg !5628
  br i1 %cmp9, label %if.then.10, label %if.end.15, !dbg !5629

if.then.10:                                       ; preds = %if.end.7
  br label %do.body, !dbg !5630

do.body:                                          ; preds = %if.then.10
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5631
  call void @llvm.lifetime.start(i64 8, i8* %14) #1, !dbg !5631
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !972, metadata !1242), !dbg !5633
  %15 = load %struct._object*, %struct._object** %args, align 8, !dbg !5634, !tbaa !1246
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !5633, !tbaa !1246
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5635, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !5637
  %17 = load i64, i64* %ob_refcnt, align 8, !dbg !5638, !tbaa !1261
  %dec = add i64 %17, -1, !dbg !5638
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5638, !tbaa !1261
  %cmp11 = icmp ne i64 %dec, 0, !dbg !5639
  br i1 %cmp11, label %if.then.12, label %if.else.13, !dbg !5640

if.then.12:                                       ; preds = %do.body
  br label %if.end.14, !dbg !5641

if.else.13:                                       ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5643, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !5645
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5645, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !5646
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5646, !tbaa !1444
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5647, !tbaa !1246
  call void %20(%struct._object* %21), !dbg !5648
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.13, %if.then.12
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5649
  call void @llvm.lifetime.end(i64 8, i8* %22) #1, !dbg !5649
  br label %do.cond, !dbg !5651

do.cond:                                          ; preds = %if.end.14
  br label %do.end, !dbg !5652

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !5654
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5654

if.end.15:                                        ; preds = %if.end.7
  %23 = load %struct._object*, %struct._object** %items, align 8, !dbg !5655, !tbaa !1246
  %call16 = call %struct._object* @PyObject_GetIter(%struct._object* %23), !dbg !5656
  store %struct._object* %call16, %struct._object** %iter, align 8, !dbg !5657, !tbaa !1246
  %24 = load %struct._object*, %struct._object** %iter, align 8, !dbg !5658, !tbaa !1246
  %cmp17 = icmp eq %struct._object* %24, null, !dbg !5659
  br i1 %cmp17, label %if.then.18, label %if.end.43, !dbg !5660

if.then.18:                                       ; preds = %if.end.15
  br label %do.body.19, !dbg !5661

do.body.19:                                       ; preds = %if.then.18
  %25 = bitcast %struct._object** %_py_decref_tmp20 to i8*, !dbg !5662
  call void @llvm.lifetime.start(i64 8, i8* %25) #1, !dbg !5662
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp20, metadata !976, metadata !1242), !dbg !5664
  %26 = load %struct._object*, %struct._object** %items, align 8, !dbg !5665, !tbaa !1246
  store %struct._object* %26, %struct._object** %_py_decref_tmp20, align 8, !dbg !5664, !tbaa !1246
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8, !dbg !5666, !tbaa !1246
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0, !dbg !5668
  %28 = load i64, i64* %ob_refcnt21, align 8, !dbg !5669, !tbaa !1261
  %dec22 = add i64 %28, -1, !dbg !5669
  store i64 %dec22, i64* %ob_refcnt21, align 8, !dbg !5669, !tbaa !1261
  %cmp23 = icmp ne i64 %dec22, 0, !dbg !5670
  br i1 %cmp23, label %if.then.24, label %if.else.25, !dbg !5671

if.then.24:                                       ; preds = %do.body.19
  br label %if.end.28, !dbg !5672

if.else.25:                                       ; preds = %do.body.19
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8, !dbg !5674, !tbaa !1246
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1, !dbg !5676
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8, !dbg !5676, !tbaa !1345
  %tp_dealloc27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4, !dbg !5677
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc27, align 8, !dbg !5677, !tbaa !1444
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8, !dbg !5678, !tbaa !1246
  call void %31(%struct._object* %32), !dbg !5679
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.24
  %33 = bitcast %struct._object** %_py_decref_tmp20 to i8*, !dbg !5680
  call void @llvm.lifetime.end(i64 8, i8* %33) #1, !dbg !5680
  br label %do.cond.29, !dbg !5682

do.cond.29:                                       ; preds = %if.end.28
  br label %do.end.30, !dbg !5683

do.end.30:                                        ; preds = %do.cond.29
  br label %do.body.31, !dbg !5685

do.body.31:                                       ; preds = %do.end.30
  %34 = bitcast %struct._object** %_py_decref_tmp32 to i8*, !dbg !5686
  call void @llvm.lifetime.start(i64 8, i8* %34) #1, !dbg !5686
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp32, metadata !980, metadata !1242), !dbg !5688
  %35 = load %struct._object*, %struct._object** %args, align 8, !dbg !5689, !tbaa !1246
  store %struct._object* %35, %struct._object** %_py_decref_tmp32, align 8, !dbg !5688, !tbaa !1246
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !5690, !tbaa !1246
  %ob_refcnt33 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0, !dbg !5692
  %37 = load i64, i64* %ob_refcnt33, align 8, !dbg !5693, !tbaa !1261
  %dec34 = add i64 %37, -1, !dbg !5693
  store i64 %dec34, i64* %ob_refcnt33, align 8, !dbg !5693, !tbaa !1261
  %cmp35 = icmp ne i64 %dec34, 0, !dbg !5694
  br i1 %cmp35, label %if.then.36, label %if.else.37, !dbg !5695

if.then.36:                                       ; preds = %do.body.31
  br label %if.end.40, !dbg !5696

if.else.37:                                       ; preds = %do.body.31
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !5698, !tbaa !1246
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1, !dbg !5700
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8, !dbg !5700, !tbaa !1345
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4, !dbg !5701
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8, !dbg !5701, !tbaa !1444
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !5702, !tbaa !1246
  call void %40(%struct._object* %41), !dbg !5703
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  %42 = bitcast %struct._object** %_py_decref_tmp32 to i8*, !dbg !5704
  call void @llvm.lifetime.end(i64 8, i8* %42) #1, !dbg !5704
  br label %do.cond.41, !dbg !5705

do.cond.41:                                       ; preds = %if.end.40
  br label %do.end.42, !dbg !5706

do.end.42:                                        ; preds = %do.cond.41
  store %struct._object* null, %struct._object** %retval, !dbg !5708
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5708

if.end.43:                                        ; preds = %if.end.15
  %43 = load %struct.defdictobject*, %struct.defdictobject** %dd.addr, align 8, !dbg !5709, !tbaa !1246
  %44 = bitcast %struct.defdictobject* %43 to %struct._object*, !dbg !5710
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !5711
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8, !dbg !5711, !tbaa !1345
  %46 = load %struct._object*, %struct._object** %args, align 8, !dbg !5712, !tbaa !1246
  %47 = load %struct._object*, %struct._object** %iter, align 8, !dbg !5713, !tbaa !1246
  %call45 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 5, %struct._typeobject* %45, %struct._object* %46, %struct._object* @_Py_NoneStruct, %struct._object* @_Py_NoneStruct, %struct._object* %47), !dbg !5714
  store %struct._object* %call45, %struct._object** %result, align 8, !dbg !5715, !tbaa !1246
  br label %do.body.46, !dbg !5716

do.body.46:                                       ; preds = %if.end.43
  %48 = bitcast %struct._object** %_py_decref_tmp47 to i8*, !dbg !5717
  call void @llvm.lifetime.start(i64 8, i8* %48) #1, !dbg !5717
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp47, metadata !982, metadata !1242), !dbg !5719
  %49 = load %struct._object*, %struct._object** %iter, align 8, !dbg !5720, !tbaa !1246
  store %struct._object* %49, %struct._object** %_py_decref_tmp47, align 8, !dbg !5719, !tbaa !1246
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8, !dbg !5721, !tbaa !1246
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0, !dbg !5723
  %51 = load i64, i64* %ob_refcnt48, align 8, !dbg !5724, !tbaa !1261
  %dec49 = add i64 %51, -1, !dbg !5724
  store i64 %dec49, i64* %ob_refcnt48, align 8, !dbg !5724, !tbaa !1261
  %cmp50 = icmp ne i64 %dec49, 0, !dbg !5725
  br i1 %cmp50, label %if.then.51, label %if.else.52, !dbg !5726

if.then.51:                                       ; preds = %do.body.46
  br label %if.end.55, !dbg !5727

if.else.52:                                       ; preds = %do.body.46
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8, !dbg !5729, !tbaa !1246
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1, !dbg !5731
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8, !dbg !5731, !tbaa !1345
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4, !dbg !5732
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8, !dbg !5732, !tbaa !1444
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8, !dbg !5733, !tbaa !1246
  call void %54(%struct._object* %55), !dbg !5734
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.51
  %56 = bitcast %struct._object** %_py_decref_tmp47 to i8*, !dbg !5735
  call void @llvm.lifetime.end(i64 8, i8* %56) #1, !dbg !5735
  br label %do.cond.56, !dbg !5737

do.cond.56:                                       ; preds = %if.end.55
  br label %do.end.57, !dbg !5738

do.end.57:                                        ; preds = %do.cond.56
  br label %do.body.58, !dbg !5740

do.body.58:                                       ; preds = %do.end.57
  %57 = bitcast %struct._object** %_py_decref_tmp59 to i8*, !dbg !5741
  call void @llvm.lifetime.start(i64 8, i8* %57) #1, !dbg !5741
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp59, metadata !984, metadata !1242), !dbg !5743
  %58 = load %struct._object*, %struct._object** %items, align 8, !dbg !5744, !tbaa !1246
  store %struct._object* %58, %struct._object** %_py_decref_tmp59, align 8, !dbg !5743, !tbaa !1246
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8, !dbg !5745, !tbaa !1246
  %ob_refcnt60 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0, !dbg !5747
  %60 = load i64, i64* %ob_refcnt60, align 8, !dbg !5748, !tbaa !1261
  %dec61 = add i64 %60, -1, !dbg !5748
  store i64 %dec61, i64* %ob_refcnt60, align 8, !dbg !5748, !tbaa !1261
  %cmp62 = icmp ne i64 %dec61, 0, !dbg !5749
  br i1 %cmp62, label %if.then.63, label %if.else.64, !dbg !5750

if.then.63:                                       ; preds = %do.body.58
  br label %if.end.67, !dbg !5751

if.else.64:                                       ; preds = %do.body.58
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8, !dbg !5753, !tbaa !1246
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1, !dbg !5755
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8, !dbg !5755, !tbaa !1345
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4, !dbg !5756
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8, !dbg !5756, !tbaa !1444
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8, !dbg !5757, !tbaa !1246
  call void %63(%struct._object* %64), !dbg !5758
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  %65 = bitcast %struct._object** %_py_decref_tmp59 to i8*, !dbg !5759
  call void @llvm.lifetime.end(i64 8, i8* %65) #1, !dbg !5759
  br label %do.cond.68, !dbg !5760

do.cond.68:                                       ; preds = %if.end.67
  br label %do.end.69, !dbg !5761

do.end.69:                                        ; preds = %do.cond.68
  br label %do.body.70, !dbg !5763

do.body.70:                                       ; preds = %do.end.69
  %66 = bitcast %struct._object** %_py_decref_tmp71 to i8*, !dbg !5764
  call void @llvm.lifetime.start(i64 8, i8* %66) #1, !dbg !5764
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp71, metadata !986, metadata !1242), !dbg !5766
  %67 = load %struct._object*, %struct._object** %args, align 8, !dbg !5767, !tbaa !1246
  store %struct._object* %67, %struct._object** %_py_decref_tmp71, align 8, !dbg !5766, !tbaa !1246
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !5768, !tbaa !1246
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0, !dbg !5770
  %69 = load i64, i64* %ob_refcnt72, align 8, !dbg !5771, !tbaa !1261
  %dec73 = add i64 %69, -1, !dbg !5771
  store i64 %dec73, i64* %ob_refcnt72, align 8, !dbg !5771, !tbaa !1261
  %cmp74 = icmp ne i64 %dec73, 0, !dbg !5772
  br i1 %cmp74, label %if.then.75, label %if.else.76, !dbg !5773

if.then.75:                                       ; preds = %do.body.70
  br label %if.end.79, !dbg !5774

if.else.76:                                       ; preds = %do.body.70
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !5776, !tbaa !1246
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1, !dbg !5778
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8, !dbg !5778, !tbaa !1345
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4, !dbg !5779
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8, !dbg !5779, !tbaa !1444
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !5780, !tbaa !1246
  call void %72(%struct._object* %73), !dbg !5781
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  %74 = bitcast %struct._object** %_py_decref_tmp71 to i8*, !dbg !5782
  call void @llvm.lifetime.end(i64 8, i8* %74) #1, !dbg !5782
  br label %do.cond.80, !dbg !5783

do.cond.80:                                       ; preds = %if.end.79
  br label %do.end.81, !dbg !5784

do.end.81:                                        ; preds = %do.cond.80
  %75 = load %struct._object*, %struct._object** %result, align 8, !dbg !5786, !tbaa !1246
  store %struct._object* %75, %struct._object** %retval, !dbg !5787
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5787

cleanup:                                          ; preds = %do.end.81, %do.end.42, %do.end, %if.then.6
  %76 = bitcast %struct._object** %result to i8*, !dbg !5788
  call void @llvm.lifetime.end(i64 8, i8* %76) #1, !dbg !5788
  %77 = bitcast %struct._object** %iter to i8*, !dbg !5788
  call void @llvm.lifetime.end(i64 8, i8* %77) #1, !dbg !5788
  %78 = bitcast %struct._object** %items to i8*, !dbg !5788
  call void @llvm.lifetime.end(i64 8, i8* %78) #1, !dbg !5788
  %79 = bitcast %struct._object** %args to i8*, !dbg !5788
  call void @llvm.lifetime.end(i64 8, i8* %79) #1, !dbg !5788
  %80 = load %struct._object*, %struct._object** %retval, !dbg !5788
  ret %struct._object* %80, !dbg !5788
}

declare %struct._object* @PyTuple_Pack(i64, ...) #3

declare void @PyErr_SetObject(%struct._object*, %struct._object*) #3

declare %struct._object* @PyEval_CallObjectWithKeywords(%struct._object*, %struct._object*, %struct._object*) #3

declare %struct._object* @PyTuple_New(i64) #3

declare %struct._object* @_PyObject_CallMethodId(%struct._object*, %struct._Py_Identifier*, i8*, ...) #3

declare i32 @PyCallable_Check(%struct._object*) #3

declare %struct._object* @PySequence_GetSlice(%struct._object*, i64, i64) #3

; Function Attrs: nounwind uwtable
define internal void @dequeiter_dealloc(%struct.dequeiterobject* %dio) #0 {
entry:
  %dio.addr = alloca %struct.dequeiterobject*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.dequeiterobject* %dio, %struct.dequeiterobject** %dio.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %dio.addr, metadata !1014, metadata !1242), !dbg !5789
  br label %do.body, !dbg !5790

do.body:                                          ; preds = %entry
  %0 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !5791
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5791
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1015, metadata !1242), !dbg !5793
  %1 = load %struct.dequeiterobject*, %struct.dequeiterobject** %dio.addr, align 8, !dbg !5794, !tbaa !1246
  %deque = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %1, i32 0, i32 3, !dbg !5795
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !5795, !tbaa !2613
  %3 = bitcast %struct.dequeobject* %2 to %struct._object*, !dbg !5796
  store %struct._object* %3, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5793, !tbaa !1246
  %4 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5797, !tbaa !1246
  %cmp = icmp ne %struct._object* %4, null, !dbg !5798
  br i1 %cmp, label %if.then, label %if.end.4, !dbg !5799

if.then:                                          ; preds = %do.body
  br label %do.body.1, !dbg !5800

do.body.1:                                        ; preds = %if.then
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5802
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !5802
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1017, metadata !1242), !dbg !5804
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5805, !tbaa !1246
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !5804, !tbaa !1246
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5806, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !5808
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !5809, !tbaa !1261
  %dec = add i64 %8, -1, !dbg !5809
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5809, !tbaa !1261
  %cmp2 = icmp ne i64 %dec, 0, !dbg !5810
  br i1 %cmp2, label %if.then.3, label %if.else, !dbg !5811

if.then.3:                                        ; preds = %do.body.1
  br label %if.end, !dbg !5812

if.else:                                          ; preds = %do.body.1
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5814, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !5816
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5816, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !5817
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5817, !tbaa !1444
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5818, !tbaa !1246
  call void %11(%struct._object* %12), !dbg !5819
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5820
  call void @llvm.lifetime.end(i64 8, i8* %13) #1, !dbg !5820
  br label %do.cond, !dbg !5822

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !5823

do.end:                                           ; preds = %do.cond
  br label %if.end.4, !dbg !5825

if.end.4:                                         ; preds = %do.end, %do.body
  %14 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !5827
  call void @llvm.lifetime.end(i64 8, i8* %14) #1, !dbg !5827
  br label %do.end.6, !dbg !5830

do.end.6:                                         ; preds = %if.end.4
  %15 = load %struct.dequeiterobject*, %struct.dequeiterobject** %dio.addr, align 8, !dbg !5831, !tbaa !1246
  %16 = bitcast %struct.dequeiterobject* %15 to i8*, !dbg !5831
  call void @PyObject_GC_Del(i8* %16), !dbg !5832
  ret void, !dbg !5833
}

; Function Attrs: nounwind uwtable
define internal i32 @dequeiter_traverse(%struct.dequeiterobject* %dio, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %dio.addr = alloca %struct.dequeiterobject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.dequeiterobject* %dio, %struct.dequeiterobject** %dio.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %dio.addr, metadata !1024, metadata !1242), !dbg !5834
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata i32 (%struct._object*, i8*)** %visit.addr, metadata !1025, metadata !1242), !dbg !5835
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !1026, metadata !1242), !dbg !5836
  br label %do.body, !dbg !5837

do.body:                                          ; preds = %entry
  %0 = load %struct.dequeiterobject*, %struct.dequeiterobject** %dio.addr, align 8, !dbg !5838, !tbaa !1246
  %deque = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %0, i32 0, i32 3, !dbg !5840
  %1 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !5840, !tbaa !2613
  %tobool = icmp ne %struct.dequeobject* %1, null, !dbg !5841
  br i1 %tobool, label %if.then, label %if.end.4, !dbg !5842

if.then:                                          ; preds = %do.body
  %2 = bitcast i32* %vret to i8*, !dbg !5843
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !5843
  call void @llvm.dbg.declare(metadata i32* %vret, metadata !1027, metadata !1242), !dbg !5845
  %3 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8, !dbg !5846, !tbaa !1246
  %4 = load %struct.dequeiterobject*, %struct.dequeiterobject** %dio.addr, align 8, !dbg !5847, !tbaa !1246
  %deque1 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %4, i32 0, i32 3, !dbg !5848
  %5 = load %struct.dequeobject*, %struct.dequeobject** %deque1, align 8, !dbg !5848, !tbaa !2613
  %6 = bitcast %struct.dequeobject* %5 to %struct._object*, !dbg !5849
  %7 = load i8*, i8** %arg.addr, align 8, !dbg !5850, !tbaa !1246
  %call = call i32 %3(%struct._object* %6, i8* %7), !dbg !5846
  store i32 %call, i32* %vret, align 4, !dbg !5845, !tbaa !1906
  %8 = load i32, i32* %vret, align 4, !dbg !5851, !tbaa !1906
  %tobool2 = icmp ne i32 %8, 0, !dbg !5851
  br i1 %tobool2, label %if.then.3, label %if.end, !dbg !5853

if.then.3:                                        ; preds = %if.then
  %9 = load i32, i32* %vret, align 4, !dbg !5854, !tbaa !1906
  store i32 %9, i32* %retval, !dbg !5856
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5856

if.end:                                           ; preds = %if.then
  store i32 0, i32* %cleanup.dest.slot, !dbg !5857
  br label %cleanup, !dbg !5857

cleanup:                                          ; preds = %if.end, %if.then.3
  %10 = bitcast i32* %vret to i8*, !dbg !5859
  call void @llvm.lifetime.end(i64 4, i8* %10) #1, !dbg !5859
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end.4, !dbg !5862

if.end.4:                                         ; preds = %cleanup.cont, %do.body
  br label %do.end, !dbg !5863

do.end:                                           ; preds = %if.end.4
  store i32 0, i32* %retval, !dbg !5866
  br label %return, !dbg !5866

return:                                           ; preds = %do.end, %cleanup
  %11 = load i32, i32* %retval, !dbg !5867
  ret i32 %11, !dbg !5867

unreachable:                                      ; preds = %cleanup
  unreachable
}

declare %struct._object* @PyObject_SelfIter(%struct._object*) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @dequeiter_next(%struct.dequeiterobject* %it) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %it.addr = alloca %struct.dequeiterobject*, align 8
  %item = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.dequeiterobject* %it, %struct.dequeiterobject** %it.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %it.addr, metadata !1035, metadata !1242), !dbg !5868
  %0 = bitcast %struct._object** %item to i8*, !dbg !5869
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5869
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1036, metadata !1242), !dbg !5870
  %1 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5871, !tbaa !1246
  %deque = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %1, i32 0, i32 3, !dbg !5873
  %2 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !5873, !tbaa !2613
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %2, i32 0, i32 5, !dbg !5874
  %3 = load i64, i64* %state, align 8, !dbg !5874, !tbaa !2616
  %4 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5875, !tbaa !1246
  %state1 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %4, i32 0, i32 4, !dbg !5876
  %5 = load i64, i64* %state1, align 8, !dbg !5876, !tbaa !2620
  %cmp = icmp ne i64 %3, %5, !dbg !5877
  br i1 %cmp, label %if.then, label %if.end, !dbg !5878

if.then:                                          ; preds = %entry
  %6 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5879, !tbaa !1246
  %counter = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %6, i32 0, i32 5, !dbg !5881
  store i64 0, i64* %counter, align 8, !dbg !5882, !tbaa !2627
  %7 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !5883, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %7, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i32 0, i32 0)), !dbg !5884
  store %struct._object* null, %struct._object** %retval, !dbg !5885
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5885

if.end:                                           ; preds = %entry
  %8 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5886, !tbaa !1246
  %counter2 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %8, i32 0, i32 5, !dbg !5888
  %9 = load i64, i64* %counter2, align 8, !dbg !5888, !tbaa !2627
  %cmp3 = icmp eq i64 %9, 0, !dbg !5889
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !5890

if.then.4:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !5891
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5891

if.end.5:                                         ; preds = %if.end
  %10 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5892, !tbaa !1246
  %index = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %10, i32 0, i32 1, !dbg !5893
  %11 = load i64, i64* %index, align 8, !dbg !5893, !tbaa !2604
  %12 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5894, !tbaa !1246
  %b = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %12, i32 0, i32 2, !dbg !5895
  %13 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !5895, !tbaa !2597
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %13, i32 0, i32 1, !dbg !5896
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %11, !dbg !5894
  %14 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !5894, !tbaa !1246
  store %struct._object* %14, %struct._object** %item, align 8, !dbg !5897, !tbaa !1246
  %15 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5898, !tbaa !1246
  %index6 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %15, i32 0, i32 1, !dbg !5899
  %16 = load i64, i64* %index6, align 8, !dbg !5900, !tbaa !2604
  %inc = add i64 %16, 1, !dbg !5900
  store i64 %inc, i64* %index6, align 8, !dbg !5900, !tbaa !2604
  %17 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5901, !tbaa !1246
  %counter7 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %17, i32 0, i32 5, !dbg !5902
  %18 = load i64, i64* %counter7, align 8, !dbg !5903, !tbaa !2627
  %dec = add i64 %18, -1, !dbg !5903
  store i64 %dec, i64* %counter7, align 8, !dbg !5903, !tbaa !2627
  %19 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5904, !tbaa !1246
  %index8 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %19, i32 0, i32 1, !dbg !5906
  %20 = load i64, i64* %index8, align 8, !dbg !5906, !tbaa !2604
  %cmp9 = icmp eq i64 %20, 62, !dbg !5907
  br i1 %cmp9, label %land.lhs.true, label %if.end.16, !dbg !5908

land.lhs.true:                                    ; preds = %if.end.5
  %21 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5909, !tbaa !1246
  %counter10 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %21, i32 0, i32 5, !dbg !5911
  %22 = load i64, i64* %counter10, align 8, !dbg !5911, !tbaa !2627
  %cmp11 = icmp sgt i64 %22, 0, !dbg !5912
  br i1 %cmp11, label %if.then.12, label %if.end.16, !dbg !5913

if.then.12:                                       ; preds = %land.lhs.true
  %23 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5914, !tbaa !1246
  %b13 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %23, i32 0, i32 2, !dbg !5916
  %24 = load %struct.BLOCK*, %struct.BLOCK** %b13, align 8, !dbg !5916, !tbaa !2597
  %rightlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %24, i32 0, i32 2, !dbg !5917
  %25 = load %struct.BLOCK*, %struct.BLOCK** %rightlink, align 8, !dbg !5917, !tbaa !2048
  %26 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5918, !tbaa !1246
  %b14 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %26, i32 0, i32 2, !dbg !5919
  store %struct.BLOCK* %25, %struct.BLOCK** %b14, align 8, !dbg !5920, !tbaa !2597
  %27 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !5921, !tbaa !1246
  %index15 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %27, i32 0, i32 1, !dbg !5922
  store i64 0, i64* %index15, align 8, !dbg !5923, !tbaa !2604
  br label %if.end.16, !dbg !5924

if.end.16:                                        ; preds = %if.then.12, %land.lhs.true, %if.end.5
  %28 = load %struct._object*, %struct._object** %item, align 8, !dbg !5925, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !5926
  %29 = load i64, i64* %ob_refcnt, align 8, !dbg !5927, !tbaa !1261
  %inc17 = add i64 %29, 1, !dbg !5927
  store i64 %inc17, i64* %ob_refcnt, align 8, !dbg !5927, !tbaa !1261
  %30 = load %struct._object*, %struct._object** %item, align 8, !dbg !5928, !tbaa !1246
  store %struct._object* %30, %struct._object** %retval, !dbg !5929
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5929

cleanup:                                          ; preds = %if.end.16, %if.then.4, %if.then
  %31 = bitcast %struct._object** %item to i8*, !dbg !5930
  call void @llvm.lifetime.end(i64 8, i8* %31) #1, !dbg !5930
  %32 = load %struct._object*, %struct._object** %retval, !dbg !5930
  ret %struct._object* %32, !dbg !5930
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dequeiter_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %index = alloca i64, align 8
  %deque = alloca %struct._object*, align 8
  %it = alloca %struct.dequeiterobject*, align 8
  %cleanup.dest.slot = alloca i32
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._typeobject** %type.addr, metadata !1045, metadata !1242), !dbg !5931
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1046, metadata !1242), !dbg !5932
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1047, metadata !1242), !dbg !5933
  %0 = bitcast i64* %i to i8*, !dbg !5934
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5934
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1048, metadata !1242), !dbg !5935
  %1 = bitcast i64* %index to i8*, !dbg !5934
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !5934
  call void @llvm.dbg.declare(metadata i64* %index, metadata !1049, metadata !1242), !dbg !5936
  store i64 0, i64* %index, align 8, !dbg !5936, !tbaa !1990
  %2 = bitcast %struct._object** %deque to i8*, !dbg !5937
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !5937
  call void @llvm.dbg.declare(metadata %struct._object** %deque, metadata !1050, metadata !1242), !dbg !5938
  %3 = bitcast %struct.dequeiterobject** %it to i8*, !dbg !5939
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !5939
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %it, metadata !1051, metadata !1242), !dbg !5940
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5941, !tbaa !1246
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i32 0, i32 0), %struct._typeobject* @deque_type, %struct._object** %deque, i64* %index), !dbg !5943
  %tobool = icmp ne i32 %call, 0, !dbg !5943
  br i1 %tobool, label %if.end, label %if.then, !dbg !5944

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5945
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.28, !dbg !5945

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %deque, align 8, !dbg !5946, !tbaa !1246
  %6 = bitcast %struct._object* %5 to %struct.dequeobject*, !dbg !5947
  %call1 = call %struct._object* @deque_iter(%struct.dequeobject* %6), !dbg !5948
  %7 = bitcast %struct._object* %call1 to %struct.dequeiterobject*, !dbg !5949
  store %struct.dequeiterobject* %7, %struct.dequeiterobject** %it, align 8, !dbg !5950, !tbaa !1246
  %8 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !5951, !tbaa !1246
  %tobool2 = icmp ne %struct.dequeiterobject* %8, null, !dbg !5951
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !5953

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !5954
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.28, !dbg !5954

if.end.4:                                         ; preds = %if.end
  store i64 0, i64* %i, align 8, !dbg !5955, !tbaa !1990
  br label %for.cond, !dbg !5956

for.cond:                                         ; preds = %for.inc, %if.end.4
  %9 = load i64, i64* %i, align 8, !dbg !5957, !tbaa !1990
  %10 = load i64, i64* %index, align 8, !dbg !5960, !tbaa !1990
  %cmp = icmp slt i64 %9, %10, !dbg !5961
  br i1 %cmp, label %for.body, label %for.end, !dbg !5962

for.body:                                         ; preds = %for.cond
  %11 = bitcast %struct._object** %item to i8*, !dbg !5963
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !5963
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1052, metadata !1242), !dbg !5964
  %12 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !5965, !tbaa !1246
  %call5 = call %struct._object* @dequeiter_next(%struct.dequeiterobject* %12), !dbg !5966
  store %struct._object* %call5, %struct._object** %item, align 8, !dbg !5964, !tbaa !1246
  %13 = load %struct._object*, %struct._object** %item, align 8, !dbg !5967, !tbaa !1246
  %tobool6 = icmp ne %struct._object* %13, null, !dbg !5967
  br i1 %tobool6, label %if.then.7, label %if.else.11, !dbg !5968

if.then.7:                                        ; preds = %for.body
  br label %do.body, !dbg !5969

do.body:                                          ; preds = %if.then.7
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5970
  call void @llvm.lifetime.start(i64 8, i8* %14) #1, !dbg !5970
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1056, metadata !1242), !dbg !5972
  %15 = load %struct._object*, %struct._object** %item, align 8, !dbg !5973, !tbaa !1246
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !5972, !tbaa !1246
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5974, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !5976
  %17 = load i64, i64* %ob_refcnt, align 8, !dbg !5977, !tbaa !1261
  %dec = add i64 %17, -1, !dbg !5977
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5977, !tbaa !1261
  %cmp8 = icmp ne i64 %dec, 0, !dbg !5978
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !5979

if.then.9:                                        ; preds = %do.body
  br label %if.end.10, !dbg !5980

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5982, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !5984
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5984, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !5985
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5985, !tbaa !1444
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5986, !tbaa !1246
  call void %20(%struct._object* %21), !dbg !5987
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5988
  call void @llvm.lifetime.end(i64 8, i8* %22) #1, !dbg !5988
  br label %do.cond, !dbg !5990

do.cond:                                          ; preds = %if.end.10
  br label %do.end, !dbg !5991

do.end:                                           ; preds = %do.cond
  br label %if.end.27, !dbg !5993

if.else.11:                                       ; preds = %for.body
  %23 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !5994, !tbaa !1246
  %counter = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %23, i32 0, i32 5, !dbg !5995
  %24 = load i64, i64* %counter, align 8, !dbg !5995, !tbaa !2627
  %tobool12 = icmp ne i64 %24, 0, !dbg !5994
  br i1 %tobool12, label %if.then.13, label %if.else.26, !dbg !5996

if.then.13:                                       ; preds = %if.else.11
  br label %do.body.14, !dbg !5997

do.body.14:                                       ; preds = %if.then.13
  %25 = bitcast %struct._object** %_py_decref_tmp15 to i8*, !dbg !5998
  call void @llvm.lifetime.start(i64 8, i8* %25) #1, !dbg !5998
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp15, metadata !1060, metadata !1242), !dbg !6000
  %26 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !6001, !tbaa !1246
  %27 = bitcast %struct.dequeiterobject* %26 to %struct._object*, !dbg !6002
  store %struct._object* %27, %struct._object** %_py_decref_tmp15, align 8, !dbg !6000, !tbaa !1246
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !6003, !tbaa !1246
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !6005
  %29 = load i64, i64* %ob_refcnt16, align 8, !dbg !6006, !tbaa !1261
  %dec17 = add i64 %29, -1, !dbg !6006
  store i64 %dec17, i64* %ob_refcnt16, align 8, !dbg !6006, !tbaa !1261
  %cmp18 = icmp ne i64 %dec17, 0, !dbg !6007
  br i1 %cmp18, label %if.then.19, label %if.else.20, !dbg !6008

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23, !dbg !6009

if.else.20:                                       ; preds = %do.body.14
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !6011, !tbaa !1246
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !6013
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8, !dbg !6013, !tbaa !1345
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4, !dbg !6014
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8, !dbg !6014, !tbaa !1444
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !6015, !tbaa !1246
  call void %32(%struct._object* %33), !dbg !6016
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  %34 = bitcast %struct._object** %_py_decref_tmp15 to i8*, !dbg !6017
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !6017
  br label %do.cond.24, !dbg !6019

do.cond.24:                                       ; preds = %if.end.23
  br label %do.end.25, !dbg !6020

do.end.25:                                        ; preds = %do.cond.24
  store %struct._object* null, %struct._object** %retval, !dbg !6022
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6022

if.else.26:                                       ; preds = %if.else.11
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6023

if.end.27:                                        ; preds = %do.end
  store i32 0, i32* %cleanup.dest.slot, !dbg !6024
  br label %cleanup, !dbg !6024

cleanup:                                          ; preds = %if.end.27, %if.else.26, %do.end.25
  %35 = bitcast %struct._object** %item to i8*, !dbg !6025
  call void @llvm.lifetime.end(i64 8, i8* %35) #1, !dbg !6025
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.28 [
    i32 0, label %cleanup.cont
    i32 2, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc, !dbg !6026

for.inc:                                          ; preds = %cleanup.cont
  %36 = load i64, i64* %i, align 8, !dbg !6027, !tbaa !1990
  %inc = add i64 %36, 1, !dbg !6027
  store i64 %inc, i64* %i, align 8, !dbg !6027, !tbaa !1990
  br label %for.cond, !dbg !6028

for.end:                                          ; preds = %cleanup, %for.cond
  %37 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !6029, !tbaa !1246
  %38 = bitcast %struct.dequeiterobject* %37 to %struct._object*, !dbg !6030
  store %struct._object* %38, %struct._object** %retval, !dbg !6031
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.28, !dbg !6031

cleanup.28:                                       ; preds = %for.end, %cleanup, %if.then.3, %if.then
  %39 = bitcast %struct.dequeiterobject** %it to i8*, !dbg !6032
  call void @llvm.lifetime.end(i64 8, i8* %39) #1, !dbg !6032
  %40 = bitcast %struct._object** %deque to i8*, !dbg !6032
  call void @llvm.lifetime.end(i64 8, i8* %40) #1, !dbg !6032
  %41 = bitcast i64* %index to i8*, !dbg !6032
  call void @llvm.lifetime.end(i64 8, i8* %41) #1, !dbg !6032
  %42 = bitcast i64* %i to i8*, !dbg !6032
  call void @llvm.lifetime.end(i64 8, i8* %42) #1, !dbg !6032
  %43 = load %struct._object*, %struct._object** %retval, !dbg !6032
  ret %struct._object* %43, !dbg !6032
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dequeiter_len(%struct.dequeiterobject* %it) #0 {
entry:
  %it.addr = alloca %struct.dequeiterobject*, align 8
  store %struct.dequeiterobject* %it, %struct.dequeiterobject** %it.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %it.addr, metadata !1039, metadata !1242), !dbg !6033
  %0 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6034, !tbaa !1246
  %counter = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %0, i32 0, i32 5, !dbg !6035
  %1 = load i64, i64* %counter, align 8, !dbg !6035, !tbaa !2627
  %call = call %struct._object* @PyLong_FromSsize_t(i64 %1), !dbg !6036
  ret %struct._object* %call, !dbg !6037
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dequeiter_reduce(%struct.dequeiterobject* %it) #0 {
entry:
  %it.addr = alloca %struct.dequeiterobject*, align 8
  store %struct.dequeiterobject* %it, %struct.dequeiterobject** %it.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %it.addr, metadata !1042, metadata !1242), !dbg !6038
  %0 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6039, !tbaa !1246
  %1 = bitcast %struct.dequeiterobject* %0 to %struct._object*, !dbg !6040
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !6041
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6041, !tbaa !1345
  %3 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6042, !tbaa !1246
  %deque = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %3, i32 0, i32 3, !dbg !6043
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !6043, !tbaa !2613
  %5 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6044, !tbaa !1246
  %deque1 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %5, i32 0, i32 3, !dbg !6045
  %6 = load %struct.dequeobject*, %struct.dequeobject** %deque1, align 8, !dbg !6045, !tbaa !2613
  %7 = bitcast %struct.dequeobject* %6 to %struct.PyVarObject*, !dbg !6046
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !6047
  %8 = load i64, i64* %ob_size, align 8, !dbg !6047, !tbaa !2108
  %9 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6048, !tbaa !1246
  %counter = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %9, i32 0, i32 5, !dbg !6049
  %10 = load i64, i64* %counter, align 8, !dbg !6049, !tbaa !2627
  %sub = sub i64 %8, %10, !dbg !6050
  %call = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), %struct._typeobject* %2, %struct.dequeobject* %4, i64 %sub), !dbg !6051
  ret %struct._object* %call, !dbg !6052
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dequereviter_next(%struct.dequeiterobject* %it) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %it.addr = alloca %struct.dequeiterobject*, align 8
  %item = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.dequeiterobject* %it, %struct.dequeiterobject** %it.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %it.addr, metadata !1067, metadata !1242), !dbg !6053
  %0 = bitcast %struct._object** %item to i8*, !dbg !6054
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !6054
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1068, metadata !1242), !dbg !6055
  %1 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6056, !tbaa !1246
  %counter = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %1, i32 0, i32 5, !dbg !6058
  %2 = load i64, i64* %counter, align 8, !dbg !6058, !tbaa !2627
  %cmp = icmp eq i64 %2, 0, !dbg !6059
  br i1 %cmp, label %if.then, label %if.end, !dbg !6060

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6061
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6061

if.end:                                           ; preds = %entry
  %3 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6062, !tbaa !1246
  %deque = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %3, i32 0, i32 3, !dbg !6064
  %4 = load %struct.dequeobject*, %struct.dequeobject** %deque, align 8, !dbg !6064, !tbaa !2613
  %state = getelementptr inbounds %struct.dequeobject, %struct.dequeobject* %4, i32 0, i32 5, !dbg !6065
  %5 = load i64, i64* %state, align 8, !dbg !6065, !tbaa !2616
  %6 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6066, !tbaa !1246
  %state1 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %6, i32 0, i32 4, !dbg !6067
  %7 = load i64, i64* %state1, align 8, !dbg !6067, !tbaa !2620
  %cmp2 = icmp ne i64 %5, %7, !dbg !6068
  br i1 %cmp2, label %if.then.3, label %if.end.5, !dbg !6069

if.then.3:                                        ; preds = %if.end
  %8 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6070, !tbaa !1246
  %counter4 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %8, i32 0, i32 5, !dbg !6072
  store i64 0, i64* %counter4, align 8, !dbg !6073, !tbaa !2627
  %9 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !6074, !tbaa !1246
  call void @PyErr_SetString(%struct._object* %9, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.32, i32 0, i32 0)), !dbg !6075
  store %struct._object* null, %struct._object** %retval, !dbg !6076
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6076

if.end.5:                                         ; preds = %if.end
  %10 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6077, !tbaa !1246
  %index = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %10, i32 0, i32 1, !dbg !6078
  %11 = load i64, i64* %index, align 8, !dbg !6078, !tbaa !2604
  %12 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6079, !tbaa !1246
  %b = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %12, i32 0, i32 2, !dbg !6080
  %13 = load %struct.BLOCK*, %struct.BLOCK** %b, align 8, !dbg !6080, !tbaa !2597
  %data = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %13, i32 0, i32 1, !dbg !6081
  %arrayidx = getelementptr [62 x %struct._object*], [62 x %struct._object*]* %data, i32 0, i64 %11, !dbg !6079
  %14 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !6079, !tbaa !1246
  store %struct._object* %14, %struct._object** %item, align 8, !dbg !6082, !tbaa !1246
  %15 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6083, !tbaa !1246
  %index6 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %15, i32 0, i32 1, !dbg !6084
  %16 = load i64, i64* %index6, align 8, !dbg !6085, !tbaa !2604
  %dec = add i64 %16, -1, !dbg !6085
  store i64 %dec, i64* %index6, align 8, !dbg !6085, !tbaa !2604
  %17 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6086, !tbaa !1246
  %counter7 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %17, i32 0, i32 5, !dbg !6087
  %18 = load i64, i64* %counter7, align 8, !dbg !6088, !tbaa !2627
  %dec8 = add i64 %18, -1, !dbg !6088
  store i64 %dec8, i64* %counter7, align 8, !dbg !6088, !tbaa !2627
  %19 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6089, !tbaa !1246
  %index9 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %19, i32 0, i32 1, !dbg !6091
  %20 = load i64, i64* %index9, align 8, !dbg !6091, !tbaa !2604
  %cmp10 = icmp eq i64 %20, -1, !dbg !6092
  br i1 %cmp10, label %land.lhs.true, label %if.end.17, !dbg !6093

land.lhs.true:                                    ; preds = %if.end.5
  %21 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6094, !tbaa !1246
  %counter11 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %21, i32 0, i32 5, !dbg !6096
  %22 = load i64, i64* %counter11, align 8, !dbg !6096, !tbaa !2627
  %cmp12 = icmp sgt i64 %22, 0, !dbg !6097
  br i1 %cmp12, label %if.then.13, label %if.end.17, !dbg !6098

if.then.13:                                       ; preds = %land.lhs.true
  %23 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6099, !tbaa !1246
  %b14 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %23, i32 0, i32 2, !dbg !6101
  %24 = load %struct.BLOCK*, %struct.BLOCK** %b14, align 8, !dbg !6101, !tbaa !2597
  %leftlink = getelementptr inbounds %struct.BLOCK, %struct.BLOCK* %24, i32 0, i32 0, !dbg !6102
  %25 = load %struct.BLOCK*, %struct.BLOCK** %leftlink, align 8, !dbg !6102, !tbaa !2933
  %26 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6103, !tbaa !1246
  %b15 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %26, i32 0, i32 2, !dbg !6104
  store %struct.BLOCK* %25, %struct.BLOCK** %b15, align 8, !dbg !6105, !tbaa !2597
  %27 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it.addr, align 8, !dbg !6106, !tbaa !1246
  %index16 = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %27, i32 0, i32 1, !dbg !6107
  store i64 61, i64* %index16, align 8, !dbg !6108, !tbaa !2604
  br label %if.end.17, !dbg !6109

if.end.17:                                        ; preds = %if.then.13, %land.lhs.true, %if.end.5
  %28 = load %struct._object*, %struct._object** %item, align 8, !dbg !6110, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !6111
  %29 = load i64, i64* %ob_refcnt, align 8, !dbg !6112, !tbaa !1261
  %inc = add i64 %29, 1, !dbg !6112
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !6112, !tbaa !1261
  %30 = load %struct._object*, %struct._object** %item, align 8, !dbg !6113, !tbaa !1246
  store %struct._object* %30, %struct._object** %retval, !dbg !6114
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6114

cleanup:                                          ; preds = %if.end.17, %if.then.3, %if.then
  %31 = bitcast %struct._object** %item to i8*, !dbg !6115
  call void @llvm.lifetime.end(i64 8, i8* %31) #1, !dbg !6115
  %32 = load %struct._object*, %struct._object** %retval, !dbg !6115
  ret %struct._object* %32, !dbg !6115
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dequereviter_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %index = alloca i64, align 8
  %deque = alloca %struct._object*, align 8
  %it = alloca %struct.dequeiterobject*, align 8
  %cleanup.dest.slot = alloca i32
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._typeobject** %type.addr, metadata !1071, metadata !1242), !dbg !6116
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1072, metadata !1242), !dbg !6117
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !1246
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1073, metadata !1242), !dbg !6118
  %0 = bitcast i64* %i to i8*, !dbg !6119
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !6119
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1074, metadata !1242), !dbg !6120
  %1 = bitcast i64* %index to i8*, !dbg !6119
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !6119
  call void @llvm.dbg.declare(metadata i64* %index, metadata !1075, metadata !1242), !dbg !6121
  store i64 0, i64* %index, align 8, !dbg !6121, !tbaa !1990
  %2 = bitcast %struct._object** %deque to i8*, !dbg !6122
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !6122
  call void @llvm.dbg.declare(metadata %struct._object** %deque, metadata !1076, metadata !1242), !dbg !6123
  %3 = bitcast %struct.dequeiterobject** %it to i8*, !dbg !6124
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !6124
  call void @llvm.dbg.declare(metadata %struct.dequeiterobject** %it, metadata !1077, metadata !1242), !dbg !6125
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6126, !tbaa !1246
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i32 0, i32 0), %struct._typeobject* @deque_type, %struct._object** %deque, i64* %index), !dbg !6128
  %tobool = icmp ne i32 %call, 0, !dbg !6128
  br i1 %tobool, label %if.end, label %if.then, !dbg !6129

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6130
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.28, !dbg !6130

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %deque, align 8, !dbg !6131, !tbaa !1246
  %6 = bitcast %struct._object* %5 to %struct.dequeobject*, !dbg !6132
  %call1 = call %struct._object* @deque_reviter(%struct.dequeobject* %6), !dbg !6133
  %7 = bitcast %struct._object* %call1 to %struct.dequeiterobject*, !dbg !6134
  store %struct.dequeiterobject* %7, %struct.dequeiterobject** %it, align 8, !dbg !6135, !tbaa !1246
  %8 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !6136, !tbaa !1246
  %tobool2 = icmp ne %struct.dequeiterobject* %8, null, !dbg !6136
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !6138

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !6139
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.28, !dbg !6139

if.end.4:                                         ; preds = %if.end
  store i64 0, i64* %i, align 8, !dbg !6140, !tbaa !1990
  br label %for.cond, !dbg !6141

for.cond:                                         ; preds = %for.inc, %if.end.4
  %9 = load i64, i64* %i, align 8, !dbg !6142, !tbaa !1990
  %10 = load i64, i64* %index, align 8, !dbg !6145, !tbaa !1990
  %cmp = icmp slt i64 %9, %10, !dbg !6146
  br i1 %cmp, label %for.body, label %for.end, !dbg !6147

for.body:                                         ; preds = %for.cond
  %11 = bitcast %struct._object** %item to i8*, !dbg !6148
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !6148
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1078, metadata !1242), !dbg !6149
  %12 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !6150, !tbaa !1246
  %call5 = call %struct._object* @dequereviter_next(%struct.dequeiterobject* %12), !dbg !6151
  store %struct._object* %call5, %struct._object** %item, align 8, !dbg !6149, !tbaa !1246
  %13 = load %struct._object*, %struct._object** %item, align 8, !dbg !6152, !tbaa !1246
  %tobool6 = icmp ne %struct._object* %13, null, !dbg !6152
  br i1 %tobool6, label %if.then.7, label %if.else.11, !dbg !6153

if.then.7:                                        ; preds = %for.body
  br label %do.body, !dbg !6154

do.body:                                          ; preds = %if.then.7
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6155
  call void @llvm.lifetime.start(i64 8, i8* %14) #1, !dbg !6155
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1082, metadata !1242), !dbg !6157
  %15 = load %struct._object*, %struct._object** %item, align 8, !dbg !6158, !tbaa !1246
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !6157, !tbaa !1246
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6159, !tbaa !1246
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !6161
  %17 = load i64, i64* %ob_refcnt, align 8, !dbg !6162, !tbaa !1261
  %dec = add i64 %17, -1, !dbg !6162
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6162, !tbaa !1261
  %cmp8 = icmp ne i64 %dec, 0, !dbg !6163
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !6164

if.then.9:                                        ; preds = %do.body
  br label %if.end.10, !dbg !6165

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6167, !tbaa !1246
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !6169
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6169, !tbaa !1345
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !6170
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6170, !tbaa !1444
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6171, !tbaa !1246
  call void %20(%struct._object* %21), !dbg !6172
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6173
  call void @llvm.lifetime.end(i64 8, i8* %22) #1, !dbg !6173
  br label %do.cond, !dbg !6175

do.cond:                                          ; preds = %if.end.10
  br label %do.end, !dbg !6176

do.end:                                           ; preds = %do.cond
  br label %if.end.27, !dbg !6178

if.else.11:                                       ; preds = %for.body
  %23 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !6179, !tbaa !1246
  %counter = getelementptr inbounds %struct.dequeiterobject, %struct.dequeiterobject* %23, i32 0, i32 5, !dbg !6180
  %24 = load i64, i64* %counter, align 8, !dbg !6180, !tbaa !2627
  %tobool12 = icmp ne i64 %24, 0, !dbg !6179
  br i1 %tobool12, label %if.then.13, label %if.else.26, !dbg !6181

if.then.13:                                       ; preds = %if.else.11
  br label %do.body.14, !dbg !6182

do.body.14:                                       ; preds = %if.then.13
  %25 = bitcast %struct._object** %_py_decref_tmp15 to i8*, !dbg !6183
  call void @llvm.lifetime.start(i64 8, i8* %25) #1, !dbg !6183
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp15, metadata !1086, metadata !1242), !dbg !6185
  %26 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !6186, !tbaa !1246
  %27 = bitcast %struct.dequeiterobject* %26 to %struct._object*, !dbg !6187
  store %struct._object* %27, %struct._object** %_py_decref_tmp15, align 8, !dbg !6185, !tbaa !1246
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !6188, !tbaa !1246
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !6190
  %29 = load i64, i64* %ob_refcnt16, align 8, !dbg !6191, !tbaa !1261
  %dec17 = add i64 %29, -1, !dbg !6191
  store i64 %dec17, i64* %ob_refcnt16, align 8, !dbg !6191, !tbaa !1261
  %cmp18 = icmp ne i64 %dec17, 0, !dbg !6192
  br i1 %cmp18, label %if.then.19, label %if.else.20, !dbg !6193

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23, !dbg !6194

if.else.20:                                       ; preds = %do.body.14
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !6196, !tbaa !1246
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !6198
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8, !dbg !6198, !tbaa !1345
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4, !dbg !6199
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8, !dbg !6199, !tbaa !1444
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8, !dbg !6200, !tbaa !1246
  call void %32(%struct._object* %33), !dbg !6201
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  %34 = bitcast %struct._object** %_py_decref_tmp15 to i8*, !dbg !6202
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !6202
  br label %do.cond.24, !dbg !6204

do.cond.24:                                       ; preds = %if.end.23
  br label %do.end.25, !dbg !6205

do.end.25:                                        ; preds = %do.cond.24
  store %struct._object* null, %struct._object** %retval, !dbg !6207
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6207

if.else.26:                                       ; preds = %if.else.11
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6208

if.end.27:                                        ; preds = %do.end
  store i32 0, i32* %cleanup.dest.slot, !dbg !6209
  br label %cleanup, !dbg !6209

cleanup:                                          ; preds = %if.end.27, %if.else.26, %do.end.25
  %35 = bitcast %struct._object** %item to i8*, !dbg !6210
  call void @llvm.lifetime.end(i64 8, i8* %35) #1, !dbg !6210
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  switch i32 %cleanup.dest, label %cleanup.28 [
    i32 0, label %cleanup.cont
    i32 2, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc, !dbg !6211

for.inc:                                          ; preds = %cleanup.cont
  %36 = load i64, i64* %i, align 8, !dbg !6212, !tbaa !1990
  %inc = add i64 %36, 1, !dbg !6212
  store i64 %inc, i64* %i, align 8, !dbg !6212, !tbaa !1990
  br label %for.cond, !dbg !6213

for.end:                                          ; preds = %cleanup, %for.cond
  %37 = load %struct.dequeiterobject*, %struct.dequeiterobject** %it, align 8, !dbg !6214, !tbaa !1246
  %38 = bitcast %struct.dequeiterobject* %37 to %struct._object*, !dbg !6215
  store %struct._object* %38, %struct._object** %retval, !dbg !6216
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.28, !dbg !6216

cleanup.28:                                       ; preds = %for.end, %cleanup, %if.then.3, %if.then
  %39 = bitcast %struct.dequeiterobject** %it to i8*, !dbg !6217
  call void @llvm.lifetime.end(i64 8, i8* %39) #1, !dbg !6217
  %40 = bitcast %struct._object** %deque to i8*, !dbg !6217
  call void @llvm.lifetime.end(i64 8, i8* %40) #1, !dbg !6217
  %41 = bitcast i64* %index to i8*, !dbg !6217
  call void @llvm.lifetime.end(i64 8, i8* %41) #1, !dbg !6217
  %42 = bitcast i64* %i to i8*, !dbg !6217
  call void @llvm.lifetime.end(i64 8, i8* %42) #1, !dbg !6217
  %43 = load %struct._object*, %struct._object** %retval, !dbg !6217
  ret %struct._object* %43, !dbg !6217
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!1238, !1239}
!llvm.ident = !{!1240}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !411, globals: !1091)
!1 = !DIFile(filename: "_collectionsmodule.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!2 = !{}
!3 = !{!4, !5, !350, !374, !11, !94, !375, !385, !403}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!6 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyObject", file: !7, line: 109, baseType: !8)
!7 = !DIFile(filename: "Include/object.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!8 = !DICompositeType(tag: DW_TAG_structure_type, name: "_object", file: !7, line: 105, size: 128, align: 64, elements: !9)
!9 = !{!10, !18}
!10 = !DIDerivedType(tag: DW_TAG_member, name: "ob_refcnt", scope: !8, file: !7, line: 107, baseType: !11, size: 64, align: 64)
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_ssize_t", file: !12, line: 177, baseType: !13)
!12 = !DIFile(filename: "Include/pyport.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!13 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !14, line: 102, baseType: !15)
!14 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !16, line: 181, baseType: !17)
!16 = !DIFile(filename: "/usr/include/bits/types.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!17 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "ob_type", scope: !8, file: !7, line: 108, baseType: !19, size: 64, align: 64, offset: 64)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!20 = !DICompositeType(tag: DW_TAG_structure_type, name: "_typeobject", file: !7, line: 334, size: 3200, align: 64, elements: !21)
!21 = !{!22, !28, !32, !33, !34, !39, !102, !107, !112, !113, !118, !170, !201, !213, !219, !220, !221, !223, !225, !256, !257, !258, !267, !268, !273, !274, !276, !278, !288, !298, !316, !317, !318, !320, !322, !323, !325, !330, !335, !340, !341, !342, !343, !344, !345, !346, !347, !349}
!22 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !20, file: !7, line: 335, baseType: !23, size: 192, align: 64)
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyVarObject", file: !7, line: 114, baseType: !24)
!24 = !DICompositeType(tag: DW_TAG_structure_type, file: !7, line: 111, size: 192, align: 64, elements: !25)
!25 = !{!26, !27}
!26 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !24, file: !7, line: 112, baseType: !6, size: 128, align: 64)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "ob_size", scope: !24, file: !7, line: 113, baseType: !11, size: 64, align: 64, offset: 128)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "tp_name", scope: !20, file: !7, line: 336, baseType: !29, size: 64, align: 64, offset: 192)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64, align: 64)
!30 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !31)
!31 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "tp_basicsize", scope: !20, file: !7, line: 337, baseType: !11, size: 64, align: 64, offset: 256)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "tp_itemsize", scope: !20, file: !7, line: 337, baseType: !11, size: 64, align: 64, offset: 320)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dealloc", scope: !20, file: !7, line: 341, baseType: !35, size: 64, align: 64, offset: 384)
!35 = !DIDerivedType(tag: DW_TAG_typedef, name: "destructor", file: !7, line: 308, baseType: !36)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64, align: 64)
!37 = !DISubroutineType(types: !38)
!38 = !{null, !5}
!39 = !DIDerivedType(tag: DW_TAG_member, name: "tp_print", scope: !20, file: !7, line: 342, baseType: !40, size: 64, align: 64, offset: 448)
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "printfunc", file: !7, line: 314, baseType: !41)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64, align: 64)
!42 = !DISubroutineType(types: !43)
!43 = !{!44, !5, !45, !44}
!44 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64, align: 64)
!46 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !14, line: 48, baseType: !47)
!47 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !48, line: 246, size: 1728, align: 64, elements: !49)
!48 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!49 = !{!50, !51, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !71, !72, !73, !74, !76, !78, !80, !84, !87, !89, !90, !91, !92, !93, !97, !98}
!50 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !47, file: !48, line: 247, baseType: !44, size: 32, align: 32)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !47, file: !48, line: 252, baseType: !52, size: 64, align: 64, offset: 64)
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !47, file: !48, line: 253, baseType: !52, size: 64, align: 64, offset: 128)
!54 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !47, file: !48, line: 254, baseType: !52, size: 64, align: 64, offset: 192)
!55 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !47, file: !48, line: 255, baseType: !52, size: 64, align: 64, offset: 256)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !47, file: !48, line: 256, baseType: !52, size: 64, align: 64, offset: 320)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !47, file: !48, line: 257, baseType: !52, size: 64, align: 64, offset: 384)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !47, file: !48, line: 258, baseType: !52, size: 64, align: 64, offset: 448)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !47, file: !48, line: 259, baseType: !52, size: 64, align: 64, offset: 512)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !47, file: !48, line: 261, baseType: !52, size: 64, align: 64, offset: 576)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !47, file: !48, line: 262, baseType: !52, size: 64, align: 64, offset: 640)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !47, file: !48, line: 263, baseType: !52, size: 64, align: 64, offset: 704)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !47, file: !48, line: 265, baseType: !64, size: 64, align: 64, offset: 768)
!64 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !65, size: 64, align: 64)
!65 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !48, line: 161, size: 192, align: 64, elements: !66)
!66 = !{!67, !68, !70}
!67 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !65, file: !48, line: 162, baseType: !64, size: 64, align: 64)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !65, file: !48, line: 163, baseType: !69, size: 64, align: 64, offset: 64)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64, align: 64)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !65, file: !48, line: 167, baseType: !44, size: 32, align: 32, offset: 128)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !47, file: !48, line: 267, baseType: !69, size: 64, align: 64, offset: 832)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !47, file: !48, line: 269, baseType: !44, size: 32, align: 32, offset: 896)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !47, file: !48, line: 273, baseType: !44, size: 32, align: 32, offset: 928)
!74 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !47, file: !48, line: 275, baseType: !75, size: 64, align: 64, offset: 960)
!75 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !16, line: 140, baseType: !17)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !47, file: !48, line: 279, baseType: !77, size: 16, align: 16, offset: 1024)
!77 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !47, file: !48, line: 280, baseType: !79, size: 8, align: 8, offset: 1040)
!79 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !47, file: !48, line: 281, baseType: !81, size: 8, align: 8, offset: 1048)
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 8, align: 8, elements: !82)
!82 = !{!83}
!83 = !DISubrange(count: 1)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !47, file: !48, line: 285, baseType: !85, size: 64, align: 64, offset: 1088)
!85 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !86, size: 64, align: 64)
!86 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !48, line: 155, baseType: null)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !47, file: !48, line: 294, baseType: !88, size: 64, align: 64, offset: 1152)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !16, line: 141, baseType: !17)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !47, file: !48, line: 303, baseType: !4, size: 64, align: 64, offset: 1216)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !47, file: !48, line: 304, baseType: !4, size: 64, align: 64, offset: 1280)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !47, file: !48, line: 305, baseType: !4, size: 64, align: 64, offset: 1344)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !47, file: !48, line: 306, baseType: !4, size: 64, align: 64, offset: 1408)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !47, file: !48, line: 307, baseType: !94, size: 64, align: 64, offset: 1472)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !95, line: 62, baseType: !96)
!95 = !DIFile(filename: "/opt/devel/yoonseung.kim/llvm_work/build/bin/../lib/clang/3.7.1/include/stddef.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!96 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !47, file: !48, line: 309, baseType: !44, size: 32, align: 32, offset: 1536)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !47, file: !48, line: 311, baseType: !99, size: 160, align: 8, offset: 1568)
!99 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 160, align: 8, elements: !100)
!100 = !{!101}
!101 = !DISubrange(count: 20)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattr", scope: !20, file: !7, line: 343, baseType: !103, size: 64, align: 64, offset: 512)
!103 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrfunc", file: !7, line: 316, baseType: !104)
!104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 64, align: 64)
!105 = !DISubroutineType(types: !106)
!106 = !{!5, !5, !52}
!107 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattr", scope: !20, file: !7, line: 344, baseType: !108, size: 64, align: 64, offset: 576)
!108 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrfunc", file: !7, line: 318, baseType: !109)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64, align: 64)
!110 = !DISubroutineType(types: !111)
!111 = !{!44, !5, !52, !5}
!112 = !DIDerivedType(tag: DW_TAG_member, name: "tp_reserved", scope: !20, file: !7, line: 345, baseType: !4, size: 64, align: 64, offset: 640)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "tp_repr", scope: !20, file: !7, line: 346, baseType: !114, size: 64, align: 64, offset: 704)
!114 = !DIDerivedType(tag: DW_TAG_typedef, name: "reprfunc", file: !7, line: 320, baseType: !115)
!115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !116, size: 64, align: 64)
!116 = !DISubroutineType(types: !117)
!117 = !{!5, !5}
!118 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_number", scope: !20, file: !7, line: 350, baseType: !119, size: 64, align: 64, offset: 768)
!119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !120, size: 64, align: 64)
!120 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyNumberMethods", file: !7, line: 278, baseType: !121)
!121 = !DICompositeType(tag: DW_TAG_structure_type, file: !7, line: 236, size: 2176, align: 64, elements: !122)
!122 = !{!123, !128, !129, !130, !131, !132, !137, !139, !140, !141, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169}
!123 = !DIDerivedType(tag: DW_TAG_member, name: "nb_add", scope: !121, file: !7, line: 241, baseType: !124, size: 64, align: 64)
!124 = !DIDerivedType(tag: DW_TAG_typedef, name: "binaryfunc", file: !7, line: 166, baseType: !125)
!125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !126, size: 64, align: 64)
!126 = !DISubroutineType(types: !127)
!127 = !{!5, !5, !5}
!128 = !DIDerivedType(tag: DW_TAG_member, name: "nb_subtract", scope: !121, file: !7, line: 242, baseType: !124, size: 64, align: 64, offset: 64)
!129 = !DIDerivedType(tag: DW_TAG_member, name: "nb_multiply", scope: !121, file: !7, line: 243, baseType: !124, size: 64, align: 64, offset: 128)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "nb_remainder", scope: !121, file: !7, line: 244, baseType: !124, size: 64, align: 64, offset: 192)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "nb_divmod", scope: !121, file: !7, line: 245, baseType: !124, size: 64, align: 64, offset: 256)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "nb_power", scope: !121, file: !7, line: 246, baseType: !133, size: 64, align: 64, offset: 320)
!133 = !DIDerivedType(tag: DW_TAG_typedef, name: "ternaryfunc", file: !7, line: 167, baseType: !134)
!134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !135, size: 64, align: 64)
!135 = !DISubroutineType(types: !136)
!136 = !{!5, !5, !5, !5}
!137 = !DIDerivedType(tag: DW_TAG_member, name: "nb_negative", scope: !121, file: !7, line: 247, baseType: !138, size: 64, align: 64, offset: 384)
!138 = !DIDerivedType(tag: DW_TAG_typedef, name: "unaryfunc", file: !7, line: 165, baseType: !115)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "nb_positive", scope: !121, file: !7, line: 248, baseType: !138, size: 64, align: 64, offset: 448)
!140 = !DIDerivedType(tag: DW_TAG_member, name: "nb_absolute", scope: !121, file: !7, line: 249, baseType: !138, size: 64, align: 64, offset: 512)
!141 = !DIDerivedType(tag: DW_TAG_member, name: "nb_bool", scope: !121, file: !7, line: 250, baseType: !142, size: 64, align: 64, offset: 576)
!142 = !DIDerivedType(tag: DW_TAG_typedef, name: "inquiry", file: !7, line: 168, baseType: !143)
!143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !144, size: 64, align: 64)
!144 = !DISubroutineType(types: !145)
!145 = !{!44, !5}
!146 = !DIDerivedType(tag: DW_TAG_member, name: "nb_invert", scope: !121, file: !7, line: 251, baseType: !138, size: 64, align: 64, offset: 640)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "nb_lshift", scope: !121, file: !7, line: 252, baseType: !124, size: 64, align: 64, offset: 704)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "nb_rshift", scope: !121, file: !7, line: 253, baseType: !124, size: 64, align: 64, offset: 768)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "nb_and", scope: !121, file: !7, line: 254, baseType: !124, size: 64, align: 64, offset: 832)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "nb_xor", scope: !121, file: !7, line: 255, baseType: !124, size: 64, align: 64, offset: 896)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "nb_or", scope: !121, file: !7, line: 256, baseType: !124, size: 64, align: 64, offset: 960)
!152 = !DIDerivedType(tag: DW_TAG_member, name: "nb_int", scope: !121, file: !7, line: 257, baseType: !138, size: 64, align: 64, offset: 1024)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "nb_reserved", scope: !121, file: !7, line: 258, baseType: !4, size: 64, align: 64, offset: 1088)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "nb_float", scope: !121, file: !7, line: 259, baseType: !138, size: 64, align: 64, offset: 1152)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_add", scope: !121, file: !7, line: 261, baseType: !124, size: 64, align: 64, offset: 1216)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_subtract", scope: !121, file: !7, line: 262, baseType: !124, size: 64, align: 64, offset: 1280)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_multiply", scope: !121, file: !7, line: 263, baseType: !124, size: 64, align: 64, offset: 1344)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_remainder", scope: !121, file: !7, line: 264, baseType: !124, size: 64, align: 64, offset: 1408)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_power", scope: !121, file: !7, line: 265, baseType: !133, size: 64, align: 64, offset: 1472)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_lshift", scope: !121, file: !7, line: 266, baseType: !124, size: 64, align: 64, offset: 1536)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_rshift", scope: !121, file: !7, line: 267, baseType: !124, size: 64, align: 64, offset: 1600)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_and", scope: !121, file: !7, line: 268, baseType: !124, size: 64, align: 64, offset: 1664)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_xor", scope: !121, file: !7, line: 269, baseType: !124, size: 64, align: 64, offset: 1728)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_or", scope: !121, file: !7, line: 270, baseType: !124, size: 64, align: 64, offset: 1792)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "nb_floor_divide", scope: !121, file: !7, line: 272, baseType: !124, size: 64, align: 64, offset: 1856)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "nb_true_divide", scope: !121, file: !7, line: 273, baseType: !124, size: 64, align: 64, offset: 1920)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_floor_divide", scope: !121, file: !7, line: 274, baseType: !124, size: 64, align: 64, offset: 1984)
!168 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_true_divide", scope: !121, file: !7, line: 275, baseType: !124, size: 64, align: 64, offset: 2048)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "nb_index", scope: !121, file: !7, line: 277, baseType: !138, size: 64, align: 64, offset: 2112)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_sequence", scope: !20, file: !7, line: 351, baseType: !171, size: 64, align: 64, offset: 832)
!171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !172, size: 64, align: 64)
!172 = !DIDerivedType(tag: DW_TAG_typedef, name: "PySequenceMethods", file: !7, line: 292, baseType: !173)
!173 = !DICompositeType(tag: DW_TAG_structure_type, file: !7, line: 280, size: 640, align: 64, elements: !174)
!174 = !{!175, !180, !181, !186, !187, !188, !193, !194, !199, !200}
!175 = !DIDerivedType(tag: DW_TAG_member, name: "sq_length", scope: !173, file: !7, line: 281, baseType: !176, size: 64, align: 64)
!176 = !DIDerivedType(tag: DW_TAG_typedef, name: "lenfunc", file: !7, line: 169, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64, align: 64)
!178 = !DISubroutineType(types: !179)
!179 = !{!11, !5}
!180 = !DIDerivedType(tag: DW_TAG_member, name: "sq_concat", scope: !173, file: !7, line: 282, baseType: !124, size: 64, align: 64, offset: 64)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "sq_repeat", scope: !173, file: !7, line: 283, baseType: !182, size: 64, align: 64, offset: 128)
!182 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeargfunc", file: !7, line: 170, baseType: !183)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !184, size: 64, align: 64)
!184 = !DISubroutineType(types: !185)
!185 = !{!5, !5, !11}
!186 = !DIDerivedType(tag: DW_TAG_member, name: "sq_item", scope: !173, file: !7, line: 284, baseType: !182, size: 64, align: 64, offset: 192)
!187 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_slice", scope: !173, file: !7, line: 285, baseType: !4, size: 64, align: 64, offset: 256)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "sq_ass_item", scope: !173, file: !7, line: 286, baseType: !189, size: 64, align: 64, offset: 320)
!189 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeobjargproc", file: !7, line: 172, baseType: !190)
!190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !191, size: 64, align: 64)
!191 = !DISubroutineType(types: !192)
!192 = !{!44, !5, !11, !5}
!193 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_ass_slice", scope: !173, file: !7, line: 287, baseType: !4, size: 64, align: 64, offset: 384)
!194 = !DIDerivedType(tag: DW_TAG_member, name: "sq_contains", scope: !173, file: !7, line: 288, baseType: !195, size: 64, align: 64, offset: 448)
!195 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjproc", file: !7, line: 231, baseType: !196)
!196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !197, size: 64, align: 64)
!197 = !DISubroutineType(types: !198)
!198 = !{!44, !5, !5}
!199 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_concat", scope: !173, file: !7, line: 290, baseType: !124, size: 64, align: 64, offset: 512)
!200 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_repeat", scope: !173, file: !7, line: 291, baseType: !182, size: 64, align: 64, offset: 576)
!201 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_mapping", scope: !20, file: !7, line: 352, baseType: !202, size: 64, align: 64, offset: 896)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !203, size: 64, align: 64)
!203 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMappingMethods", file: !7, line: 298, baseType: !204)
!204 = !DICompositeType(tag: DW_TAG_structure_type, file: !7, line: 294, size: 192, align: 64, elements: !205)
!205 = !{!206, !207, !208}
!206 = !DIDerivedType(tag: DW_TAG_member, name: "mp_length", scope: !204, file: !7, line: 295, baseType: !176, size: 64, align: 64)
!207 = !DIDerivedType(tag: DW_TAG_member, name: "mp_subscript", scope: !204, file: !7, line: 296, baseType: !124, size: 64, align: 64, offset: 64)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "mp_ass_subscript", scope: !204, file: !7, line: 297, baseType: !209, size: 64, align: 64, offset: 128)
!209 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjargproc", file: !7, line: 174, baseType: !210)
!210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !211, size: 64, align: 64)
!211 = !DISubroutineType(types: !212)
!212 = !{!44, !5, !5, !5}
!213 = !DIDerivedType(tag: DW_TAG_member, name: "tp_hash", scope: !20, file: !7, line: 356, baseType: !214, size: 64, align: 64, offset: 960)
!214 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashfunc", file: !7, line: 321, baseType: !215)
!215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !216, size: 64, align: 64)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !5}
!218 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_hash_t", file: !12, line: 186, baseType: !11)
!219 = !DIDerivedType(tag: DW_TAG_member, name: "tp_call", scope: !20, file: !7, line: 357, baseType: !133, size: 64, align: 64, offset: 1024)
!220 = !DIDerivedType(tag: DW_TAG_member, name: "tp_str", scope: !20, file: !7, line: 358, baseType: !114, size: 64, align: 64, offset: 1088)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattro", scope: !20, file: !7, line: 359, baseType: !222, size: 64, align: 64, offset: 1152)
!222 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrofunc", file: !7, line: 317, baseType: !125)
!223 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattro", scope: !20, file: !7, line: 360, baseType: !224, size: 64, align: 64, offset: 1216)
!224 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrofunc", file: !7, line: 319, baseType: !210)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_buffer", scope: !20, file: !7, line: 363, baseType: !226, size: 64, align: 64, offset: 1280)
!226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !227, size: 64, align: 64)
!227 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyBufferProcs", file: !7, line: 304, baseType: !228)
!228 = !DICompositeType(tag: DW_TAG_structure_type, file: !7, line: 301, size: 128, align: 64, elements: !229)
!229 = !{!230, !251}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "bf_getbuffer", scope: !228, file: !7, line: 302, baseType: !231, size: 64, align: 64)
!231 = !DIDerivedType(tag: DW_TAG_typedef, name: "getbufferproc", file: !7, line: 193, baseType: !232)
!232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !233, size: 64, align: 64)
!233 = !DISubroutineType(types: !234)
!234 = !{!44, !5, !235, !44}
!235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !236, size: 64, align: 64)
!236 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_buffer", file: !7, line: 191, baseType: !237)
!237 = !DICompositeType(tag: DW_TAG_structure_type, name: "bufferinfo", file: !7, line: 178, size: 640, align: 64, elements: !238)
!238 = !{!239, !240, !241, !242, !243, !244, !245, !246, !248, !249, !250}
!239 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !237, file: !7, line: 179, baseType: !4, size: 64, align: 64)
!240 = !DIDerivedType(tag: DW_TAG_member, name: "obj", scope: !237, file: !7, line: 180, baseType: !5, size: 64, align: 64, offset: 64)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !237, file: !7, line: 181, baseType: !11, size: 64, align: 64, offset: 128)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "itemsize", scope: !237, file: !7, line: 182, baseType: !11, size: 64, align: 64, offset: 192)
!243 = !DIDerivedType(tag: DW_TAG_member, name: "readonly", scope: !237, file: !7, line: 184, baseType: !44, size: 32, align: 32, offset: 256)
!244 = !DIDerivedType(tag: DW_TAG_member, name: "ndim", scope: !237, file: !7, line: 185, baseType: !44, size: 32, align: 32, offset: 288)
!245 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !237, file: !7, line: 186, baseType: !52, size: 64, align: 64, offset: 320)
!246 = !DIDerivedType(tag: DW_TAG_member, name: "shape", scope: !237, file: !7, line: 187, baseType: !247, size: 64, align: 64, offset: 384)
!247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!248 = !DIDerivedType(tag: DW_TAG_member, name: "strides", scope: !237, file: !7, line: 188, baseType: !247, size: 64, align: 64, offset: 448)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "suboffsets", scope: !237, file: !7, line: 189, baseType: !247, size: 64, align: 64, offset: 512)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !237, file: !7, line: 190, baseType: !4, size: 64, align: 64, offset: 576)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "bf_releasebuffer", scope: !228, file: !7, line: 303, baseType: !252, size: 64, align: 64, offset: 64)
!252 = !DIDerivedType(tag: DW_TAG_typedef, name: "releasebufferproc", file: !7, line: 194, baseType: !253)
!253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !254, size: 64, align: 64)
!254 = !DISubroutineType(types: !255)
!255 = !{null, !5, !235}
!256 = !DIDerivedType(tag: DW_TAG_member, name: "tp_flags", scope: !20, file: !7, line: 366, baseType: !96, size: 64, align: 64, offset: 1344)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "tp_doc", scope: !20, file: !7, line: 368, baseType: !29, size: 64, align: 64, offset: 1408)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "tp_traverse", scope: !20, file: !7, line: 372, baseType: !259, size: 64, align: 64, offset: 1472)
!259 = !DIDerivedType(tag: DW_TAG_typedef, name: "traverseproc", file: !7, line: 233, baseType: !260)
!260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !261, size: 64, align: 64)
!261 = !DISubroutineType(types: !262)
!262 = !{!44, !5, !263, !4}
!263 = !DIDerivedType(tag: DW_TAG_typedef, name: "visitproc", file: !7, line: 232, baseType: !264)
!264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !265, size: 64, align: 64)
!265 = !DISubroutineType(types: !266)
!266 = !{!44, !5, !4}
!267 = !DIDerivedType(tag: DW_TAG_member, name: "tp_clear", scope: !20, file: !7, line: 375, baseType: !142, size: 64, align: 64, offset: 1536)
!268 = !DIDerivedType(tag: DW_TAG_member, name: "tp_richcompare", scope: !20, file: !7, line: 379, baseType: !269, size: 64, align: 64, offset: 1600)
!269 = !DIDerivedType(tag: DW_TAG_typedef, name: "richcmpfunc", file: !7, line: 322, baseType: !270)
!270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !271, size: 64, align: 64)
!271 = !DISubroutineType(types: !272)
!272 = !{!5, !5, !5, !44}
!273 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklistoffset", scope: !20, file: !7, line: 382, baseType: !11, size: 64, align: 64, offset: 1664)
!274 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iter", scope: !20, file: !7, line: 385, baseType: !275, size: 64, align: 64, offset: 1728)
!275 = !DIDerivedType(tag: DW_TAG_typedef, name: "getiterfunc", file: !7, line: 323, baseType: !115)
!276 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iternext", scope: !20, file: !7, line: 386, baseType: !277, size: 64, align: 64, offset: 1792)
!277 = !DIDerivedType(tag: DW_TAG_typedef, name: "iternextfunc", file: !7, line: 324, baseType: !115)
!278 = !DIDerivedType(tag: DW_TAG_member, name: "tp_methods", scope: !20, file: !7, line: 389, baseType: !279, size: 64, align: 64, offset: 1856)
!279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !280, size: 64, align: 64)
!280 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMethodDef", file: !281, line: 40, size: 256, align: 64, elements: !282)
!281 = !DIFile(filename: "Include/methodobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!282 = !{!283, !284, !286, !287}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "ml_name", scope: !280, file: !281, line: 41, baseType: !29, size: 64, align: 64)
!284 = !DIDerivedType(tag: DW_TAG_member, name: "ml_meth", scope: !280, file: !281, line: 42, baseType: !285, size: 64, align: 64, offset: 64)
!285 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyCFunction", file: !281, line: 18, baseType: !125)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "ml_flags", scope: !280, file: !281, line: 43, baseType: !44, size: 32, align: 32, offset: 128)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "ml_doc", scope: !280, file: !281, line: 45, baseType: !29, size: 64, align: 64, offset: 192)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "tp_members", scope: !20, file: !7, line: 390, baseType: !289, size: 64, align: 64, offset: 1920)
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !290, size: 64, align: 64)
!290 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMemberDef", file: !291, line: 18, size: 320, align: 64, elements: !292)
!291 = !DIFile(filename: "Include/structmember.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!292 = !{!293, !294, !295, !296, !297}
!293 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !290, file: !291, line: 19, baseType: !52, size: 64, align: 64)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !290, file: !291, line: 20, baseType: !44, size: 32, align: 32, offset: 64)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !290, file: !291, line: 21, baseType: !11, size: 64, align: 64, offset: 128)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !290, file: !291, line: 22, baseType: !44, size: 32, align: 32, offset: 192)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !290, file: !291, line: 23, baseType: !52, size: 64, align: 64, offset: 256)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getset", scope: !20, file: !7, line: 391, baseType: !299, size: 64, align: 64, offset: 1984)
!299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !300, size: 64, align: 64)
!300 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyGetSetDef", file: !301, line: 11, size: 320, align: 64, elements: !302)
!301 = !DIFile(filename: "Include/descrobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!302 = !{!303, !304, !309, !314, !315}
!303 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !300, file: !301, line: 12, baseType: !52, size: 64, align: 64)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "get", scope: !300, file: !301, line: 13, baseType: !305, size: 64, align: 64, offset: 64)
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "getter", file: !301, line: 8, baseType: !306)
!306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !307, size: 64, align: 64)
!307 = !DISubroutineType(types: !308)
!308 = !{!5, !5, !4}
!309 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !300, file: !301, line: 14, baseType: !310, size: 64, align: 64, offset: 128)
!310 = !DIDerivedType(tag: DW_TAG_typedef, name: "setter", file: !301, line: 9, baseType: !311)
!311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !312, size: 64, align: 64)
!312 = !DISubroutineType(types: !313)
!313 = !{!44, !5, !5, !4}
!314 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !300, file: !301, line: 15, baseType: !52, size: 64, align: 64, offset: 192)
!315 = !DIDerivedType(tag: DW_TAG_member, name: "closure", scope: !300, file: !301, line: 16, baseType: !4, size: 64, align: 64, offset: 256)
!316 = !DIDerivedType(tag: DW_TAG_member, name: "tp_base", scope: !20, file: !7, line: 392, baseType: !19, size: 64, align: 64, offset: 2048)
!317 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dict", scope: !20, file: !7, line: 393, baseType: !5, size: 64, align: 64, offset: 2112)
!318 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_get", scope: !20, file: !7, line: 394, baseType: !319, size: 64, align: 64, offset: 2176)
!319 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrgetfunc", file: !7, line: 325, baseType: !134)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_set", scope: !20, file: !7, line: 395, baseType: !321, size: 64, align: 64, offset: 2240)
!321 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrsetfunc", file: !7, line: 326, baseType: !210)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dictoffset", scope: !20, file: !7, line: 396, baseType: !11, size: 64, align: 64, offset: 2304)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "tp_init", scope: !20, file: !7, line: 397, baseType: !324, size: 64, align: 64, offset: 2368)
!324 = !DIDerivedType(tag: DW_TAG_typedef, name: "initproc", file: !7, line: 327, baseType: !210)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "tp_alloc", scope: !20, file: !7, line: 398, baseType: !326, size: 64, align: 64, offset: 2432)
!326 = !DIDerivedType(tag: DW_TAG_typedef, name: "allocfunc", file: !7, line: 329, baseType: !327)
!327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !328, size: 64, align: 64)
!328 = !DISubroutineType(types: !329)
!329 = !{!5, !19, !11}
!330 = !DIDerivedType(tag: DW_TAG_member, name: "tp_new", scope: !20, file: !7, line: 399, baseType: !331, size: 64, align: 64, offset: 2496)
!331 = !DIDerivedType(tag: DW_TAG_typedef, name: "newfunc", file: !7, line: 328, baseType: !332)
!332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !333, size: 64, align: 64)
!333 = !DISubroutineType(types: !334)
!334 = !{!5, !19, !5, !5}
!335 = !DIDerivedType(tag: DW_TAG_member, name: "tp_free", scope: !20, file: !7, line: 400, baseType: !336, size: 64, align: 64, offset: 2560)
!336 = !DIDerivedType(tag: DW_TAG_typedef, name: "freefunc", file: !7, line: 307, baseType: !337)
!337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !338, size: 64, align: 64)
!338 = !DISubroutineType(types: !339)
!339 = !{null, !4}
!340 = !DIDerivedType(tag: DW_TAG_member, name: "tp_is_gc", scope: !20, file: !7, line: 401, baseType: !142, size: 64, align: 64, offset: 2624)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "tp_bases", scope: !20, file: !7, line: 402, baseType: !5, size: 64, align: 64, offset: 2688)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "tp_mro", scope: !20, file: !7, line: 403, baseType: !5, size: 64, align: 64, offset: 2752)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "tp_cache", scope: !20, file: !7, line: 404, baseType: !5, size: 64, align: 64, offset: 2816)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "tp_subclasses", scope: !20, file: !7, line: 405, baseType: !5, size: 64, align: 64, offset: 2880)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklist", scope: !20, file: !7, line: 406, baseType: !5, size: 64, align: 64, offset: 2944)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "tp_del", scope: !20, file: !7, line: 407, baseType: !35, size: 64, align: 64, offset: 3008)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "tp_version_tag", scope: !20, file: !7, line: 410, baseType: !348, size: 32, align: 32, offset: 3072)
!348 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "tp_finalize", scope: !20, file: !7, line: 412, baseType: !35, size: 64, align: 64, offset: 3136)
!350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !351, size: 64, align: 64)
!351 = !DIDerivedType(tag: DW_TAG_typedef, name: "dequeobject", file: !352, line: 128, baseType: !353)
!352 = !DIFile(filename: "./Modules/_collectionsmodule.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!353 = !DICompositeType(tag: DW_TAG_structure_type, file: !352, line: 119, size: 640, align: 64, elements: !354)
!354 = !{!355, !356, !368, !369, !370, !371, !372, !373}
!355 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !353, file: !352, line: 120, baseType: !23, size: 192, align: 64)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "leftblock", scope: !353, file: !352, line: 121, baseType: !357, size: 64, align: 64, offset: 192)
!357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !358, size: 64, align: 64)
!358 = !DIDerivedType(tag: DW_TAG_typedef, name: "block", file: !352, line: 54, baseType: !359)
!359 = !DICompositeType(tag: DW_TAG_structure_type, name: "BLOCK", file: !352, line: 50, size: 4096, align: 64, elements: !360)
!360 = !{!361, !363, !367}
!361 = !DIDerivedType(tag: DW_TAG_member, name: "leftlink", scope: !359, file: !352, line: 51, baseType: !362, size: 64, align: 64)
!362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !359, size: 64, align: 64)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !359, file: !352, line: 52, baseType: !364, size: 3968, align: 64, offset: 64)
!364 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 3968, align: 64, elements: !365)
!365 = !{!366}
!366 = !DISubrange(count: 62)
!367 = !DIDerivedType(tag: DW_TAG_member, name: "rightlink", scope: !359, file: !352, line: 53, baseType: !362, size: 64, align: 64, offset: 4032)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "rightblock", scope: !353, file: !352, line: 122, baseType: !357, size: 64, align: 64, offset: 256)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "leftindex", scope: !353, file: !352, line: 123, baseType: !11, size: 64, align: 64, offset: 320)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "rightindex", scope: !353, file: !352, line: 124, baseType: !11, size: 64, align: 64, offset: 384)
!371 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !353, file: !352, line: 125, baseType: !17, size: 64, align: 64, offset: 448)
!372 = !DIDerivedType(tag: DW_TAG_member, name: "maxlen", scope: !353, file: !352, line: 126, baseType: !11, size: 64, align: 64, offset: 512)
!373 = !DIDerivedType(tag: DW_TAG_member, name: "weakreflist", scope: !353, file: !352, line: 127, baseType: !5, size: 64, align: 64, offset: 576)
!374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64, align: 64)
!375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !376, size: 64, align: 64)
!376 = !DIDerivedType(tag: DW_TAG_typedef, name: "dequeiterobject", file: !352, line: 1203, baseType: !377)
!377 = !DICompositeType(tag: DW_TAG_structure_type, file: !352, line: 1196, size: 448, align: 64, elements: !378)
!378 = !{!379, !380, !381, !382, !383, !384}
!379 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !377, file: !352, line: 1197, baseType: !6, size: 128, align: 64)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !377, file: !352, line: 1198, baseType: !11, size: 64, align: 64, offset: 128)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !377, file: !352, line: 1199, baseType: !357, size: 64, align: 64, offset: 192)
!382 = !DIDerivedType(tag: DW_TAG_member, name: "deque", scope: !377, file: !352, line: 1200, baseType: !350, size: 64, align: 64, offset: 256)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !377, file: !352, line: 1201, baseType: !17, size: 64, align: 64, offset: 320)
!384 = !DIDerivedType(tag: DW_TAG_member, name: "counter", scope: !377, file: !352, line: 1202, baseType: !11, size: 64, align: 64, offset: 384)
!385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !386, size: 64, align: 64)
!386 = !DIDerivedType(tag: DW_TAG_typedef, name: "defdictobject", file: !352, line: 1486, baseType: !387)
!387 = !DICompositeType(tag: DW_TAG_structure_type, file: !352, line: 1483, size: 384, align: 64, elements: !388)
!388 = !{!389, !402}
!389 = !DIDerivedType(tag: DW_TAG_member, name: "dict", scope: !387, file: !352, line: 1484, baseType: !390, size: 320, align: 64)
!390 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyDictObject", file: !391, line: 28, baseType: !392)
!391 = !DIFile(filename: "Include/dictobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!392 = !DICompositeType(tag: DW_TAG_structure_type, file: !391, line: 23, size: 320, align: 64, elements: !393)
!393 = !{!394, !395, !396, !400}
!394 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !392, file: !391, line: 24, baseType: !6, size: 128, align: 64)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "ma_used", scope: !392, file: !391, line: 25, baseType: !11, size: 64, align: 64, offset: 128)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "ma_keys", scope: !392, file: !391, line: 26, baseType: !397, size: 64, align: 64, offset: 192)
!397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !398, size: 64, align: 64)
!398 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyDictKeysObject", file: !391, line: 18, baseType: !399)
!399 = !DICompositeType(tag: DW_TAG_structure_type, name: "_dictkeysobject", file: !7, line: 461, flags: DIFlagFwdDecl)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "ma_values", scope: !392, file: !391, line: 27, baseType: !401, size: 64, align: 64, offset: 256)
!401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "default_factory", scope: !387, file: !352, line: 1485, baseType: !5, size: 64, align: 64, offset: 320)
!403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !404, size: 64, align: 64)
!404 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTupleObject", file: !405, line: 33, baseType: !406)
!405 = !DIFile(filename: "Include/tupleobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!406 = !DICompositeType(tag: DW_TAG_structure_type, file: !405, line: 25, size: 256, align: 64, elements: !407)
!407 = !{!408, !409}
!408 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !406, file: !405, line: 26, baseType: !23, size: 192, align: 64)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !406, file: !405, line: 27, baseType: !410, size: 64, align: 64, offset: 192)
!410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 64, align: 64, elements: !82)
!411 = !{!412, !417, !486, !491, !496, !504, !509, !519, !534, !543, !565, !571, !579, !586, !615, !624, !652, !659, !665, !711, !717, !729, !741, !744, !747, !759, !788, !808, !824, !828, !839, !844, !852, !855, !874, !889, !900, !925, !934, !945, !962, !965, !988, !1010, !1020, !1031, !1037, !1040, !1043, !1065, !1069}
!412 = !DISubprogram(name: "PyInit__collections", scope: !352, file: !352, line: 1885, type: !413, isLocal: false, isDefinition: true, scopeLine: 1886, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* ()* @PyInit__collections, variables: !415)
!413 = !DISubroutineType(types: !414)
!414 = !{!5}
!415 = !{!416}
!416 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !412, file: !352, line: 1887, type: !5)
!417 = !DISubprogram(name: "_count_elements", scope: !352, file: !352, line: 1766, type: !126, isLocal: true, isDefinition: true, scopeLine: 1767, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @_count_elements, variables: !418)
!418 = !{!419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !441, !445, !447, !451, !453, !457, !459, !461, !463, !466, !468, !471, !473, !476, !478, !481, !483}
!419 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !417, file: !352, line: 1766, type: !5)
!420 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !417, file: !352, line: 1766, type: !5)
!421 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !417, file: !352, line: 1770, type: !5)
!422 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iterable", scope: !417, file: !352, line: 1770, type: !5)
!423 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mapping", scope: !417, file: !352, line: 1770, type: !5)
!424 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "oldval", scope: !417, file: !352, line: 1770, type: !5)
!425 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newval", scope: !417, file: !352, line: 1771, type: !5)
!426 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "key", scope: !417, file: !352, line: 1772, type: !5)
!427 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "zero", scope: !417, file: !352, line: 1773, type: !5)
!428 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "one", scope: !417, file: !352, line: 1774, type: !5)
!429 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bound_get", scope: !417, file: !352, line: 1775, type: !5)
!430 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mapping_get", scope: !417, file: !352, line: 1776, type: !5)
!431 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dict_get", scope: !417, file: !352, line: 1777, type: !5)
!432 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mapping_setitem", scope: !417, file: !352, line: 1778, type: !5)
!433 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dict_setitem", scope: !417, file: !352, line: 1779, type: !5)
!434 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !435, file: !352, line: 1816, type: !5)
!435 = distinct !DILexicalBlock(scope: !436, file: !352, line: 1816, column: 20)
!436 = distinct !DILexicalBlock(scope: !437, file: !352, line: 1810, column: 20)
!437 = distinct !DILexicalBlock(scope: !438, file: !352, line: 1807, column: 17)
!438 = distinct !DILexicalBlock(scope: !439, file: !352, line: 1802, column: 19)
!439 = distinct !DILexicalBlock(scope: !440, file: !352, line: 1801, column: 75)
!440 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1800, column: 9)
!441 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !442, file: !352, line: 1816, type: !5)
!442 = distinct !DILexicalBlock(scope: !443, file: !352, line: 1816, column: 119)
!443 = distinct !DILexicalBlock(scope: !444, file: !352, line: 1816, column: 91)
!444 = distinct !DILexicalBlock(scope: !435, file: !352, line: 1816, column: 68)
!445 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !446, file: !352, line: 1818, type: !5)
!446 = distinct !DILexicalBlock(scope: !438, file: !352, line: 1818, column: 16)
!447 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !448, file: !352, line: 1837, type: !5)
!448 = distinct !DILexicalBlock(scope: !449, file: !352, line: 1837, column: 16)
!449 = distinct !DILexicalBlock(scope: !450, file: !352, line: 1829, column: 19)
!450 = distinct !DILexicalBlock(scope: !440, file: !352, line: 1820, column: 12)
!451 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !452, file: !352, line: 1842, type: !5)
!452 = distinct !DILexicalBlock(scope: !449, file: !352, line: 1842, column: 16)
!453 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !454, file: !352, line: 1842, type: !5)
!454 = distinct !DILexicalBlock(scope: !455, file: !352, line: 1842, column: 115)
!455 = distinct !DILexicalBlock(scope: !456, file: !352, line: 1842, column: 87)
!456 = distinct !DILexicalBlock(scope: !452, file: !352, line: 1842, column: 64)
!457 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !458, file: !352, line: 1843, type: !5)
!458 = distinct !DILexicalBlock(scope: !449, file: !352, line: 1843, column: 16)
!459 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !460, file: !352, line: 1848, type: !5)
!460 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1848, column: 8)
!461 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !462, file: !352, line: 1849, type: !5)
!462 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1849, column: 8)
!463 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !464, file: !352, line: 1849, type: !5)
!464 = distinct !DILexicalBlock(scope: !465, file: !352, line: 1849, column: 95)
!465 = distinct !DILexicalBlock(scope: !462, file: !352, line: 1849, column: 61)
!466 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !467, file: !352, line: 1850, type: !5)
!467 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1850, column: 8)
!468 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !469, file: !352, line: 1850, type: !5)
!469 = distinct !DILexicalBlock(scope: !470, file: !352, line: 1850, column: 98)
!470 = distinct !DILexicalBlock(scope: !467, file: !352, line: 1850, column: 64)
!471 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !472, file: !352, line: 1851, type: !5)
!472 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1851, column: 8)
!473 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !474, file: !352, line: 1851, type: !5)
!474 = distinct !DILexicalBlock(scope: !475, file: !352, line: 1851, column: 101)
!475 = distinct !DILexicalBlock(scope: !472, file: !352, line: 1851, column: 67)
!476 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !477, file: !352, line: 1852, type: !5)
!477 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1852, column: 8)
!478 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !479, file: !352, line: 1852, type: !5)
!479 = distinct !DILexicalBlock(scope: !480, file: !352, line: 1852, column: 96)
!480 = distinct !DILexicalBlock(scope: !477, file: !352, line: 1852, column: 62)
!481 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !482, file: !352, line: 1853, type: !5)
!482 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1853, column: 8)
!483 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !484, file: !352, line: 1853, type: !5)
!484 = distinct !DILexicalBlock(scope: !485, file: !352, line: 1853, column: 95)
!485 = distinct !DILexicalBlock(scope: !482, file: !352, line: 1853, column: 61)
!486 = !DISubprogram(name: "deque_dealloc", scope: !352, file: !352, line: 841, type: !487, isLocal: true, isDefinition: true, scopeLine: 842, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.dequeobject*)* @deque_dealloc, variables: !489)
!487 = !DISubroutineType(types: !488)
!488 = !{null, !350}
!489 = !{!490}
!490 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !486, file: !352, line: 841, type: !350)
!491 = !DISubprogram(name: "freeblock", scope: !352, file: !352, line: 109, type: !492, isLocal: true, isDefinition: true, scopeLine: 110, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.BLOCK*)* @freeblock, variables: !494)
!492 = !DISubroutineType(types: !493)
!493 = !{null, !357}
!494 = !{!495}
!495 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 1, scope: !491, file: !352, line: 109, type: !357)
!496 = !DISubprogram(name: "deque_repr", scope: !352, file: !352, line: 923, type: !116, isLocal: true, isDefinition: true, scopeLine: 924, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @deque_repr, variables: !497)
!497 = !{!498, !499, !500, !501, !502}
!498 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !496, file: !352, line: 923, type: !5)
!499 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "aslist", scope: !496, file: !352, line: 925, type: !5)
!500 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !496, file: !352, line: 925, type: !5)
!501 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !496, file: !352, line: 926, type: !44)
!502 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !503, file: !352, line: 946, type: !5)
!503 = distinct !DILexicalBlock(scope: !496, file: !352, line: 946, column: 8)
!504 = !DISubprogram(name: "deque_len", scope: !352, file: !352, line: 679, type: !505, isLocal: true, isDefinition: true, scopeLine: 680, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct.dequeobject*)* @deque_len, variables: !507)
!505 = !DISubroutineType(types: !506)
!506 = !{!11, !350}
!507 = !{!508}
!508 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !504, file: !352, line: 679, type: !350)
!509 = !DISubprogram(name: "deque_item", scope: !352, file: !352, line: 735, type: !510, isLocal: true, isDefinition: true, scopeLine: 736, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, i64)* @deque_item, variables: !512)
!510 = !DISubroutineType(types: !511)
!511 = !{!5, !350, !11}
!512 = !{!513, !514, !515, !516, !517, !518}
!513 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !509, file: !352, line: 735, type: !350)
!514 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 2, scope: !509, file: !352, line: 735, type: !11)
!515 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !509, file: !352, line: 737, type: !357)
!516 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !509, file: !352, line: 738, type: !5)
!517 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !509, file: !352, line: 739, type: !11)
!518 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !509, file: !352, line: 739, type: !11)
!519 = !DISubprogram(name: "deque_ass_item", scope: !352, file: !352, line: 797, type: !520, isLocal: true, isDefinition: true, scopeLine: 798, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.dequeobject*, i64, %struct._object*)* @deque_ass_item, variables: !522)
!520 = !DISubroutineType(types: !521)
!521 = !{!44, !350, !11, !5}
!522 = !{!523, !524, !525, !526, !527, !528, !529, !530, !531, !532}
!523 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !519, file: !352, line: 797, type: !350)
!524 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 2, scope: !519, file: !352, line: 797, type: !11)
!525 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 3, scope: !519, file: !352, line: 797, type: !5)
!526 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "old_value", scope: !519, file: !352, line: 799, type: !5)
!527 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !519, file: !352, line: 800, type: !357)
!528 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !519, file: !352, line: 801, type: !11)
!529 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !519, file: !352, line: 801, type: !11)
!530 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "halflen", scope: !519, file: !352, line: 801, type: !11)
!531 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !519, file: !352, line: 801, type: !11)
!532 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !533, file: !352, line: 827, type: !5)
!533 = distinct !DILexicalBlock(scope: !519, file: !352, line: 827, column: 8)
!534 = !DISubprogram(name: "deque_del_item", scope: !352, file: !352, line: 781, type: !535, isLocal: true, isDefinition: true, scopeLine: 782, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.dequeobject*, i64)* @deque_del_item, variables: !537)
!535 = !DISubroutineType(types: !536)
!536 = !{!44, !350, !11}
!537 = !{!538, !539, !540, !541}
!538 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !534, file: !352, line: 781, type: !350)
!539 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 2, scope: !534, file: !352, line: 781, type: !11)
!540 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !534, file: !352, line: 783, type: !5)
!541 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !542, file: !352, line: 791, type: !5)
!542 = distinct !DILexicalBlock(scope: !534, file: !352, line: 791, column: 8)
!543 = !DISubprogram(name: "_deque_rotate", scope: !352, file: !352, line: 458, type: !535, isLocal: true, isDefinition: true, scopeLine: 459, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.dequeobject*, i64)* @_deque_rotate, variables: !544)
!544 = !{!545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !558, !559, !560, !563, !564}
!545 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !543, file: !352, line: 458, type: !350)
!546 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 2, scope: !543, file: !352, line: 458, type: !11)
!547 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !543, file: !352, line: 460, type: !357)
!548 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "leftblock", scope: !543, file: !352, line: 461, type: !357)
!549 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rightblock", scope: !543, file: !352, line: 462, type: !357)
!550 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "leftindex", scope: !543, file: !352, line: 463, type: !11)
!551 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rightindex", scope: !543, file: !352, line: 464, type: !11)
!552 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !543, file: !352, line: 465, type: !11)
!553 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "halflen", scope: !543, file: !352, line: 465, type: !11)
!554 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rv", scope: !543, file: !352, line: 466, type: !44)
!555 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "src", scope: !556, file: !352, line: 498, type: !401)
!556 = distinct !DILexicalBlock(scope: !557, file: !352, line: 497, column: 9)
!557 = distinct !DILexicalBlock(scope: !543, file: !352, line: 481, column: 19)
!558 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dest", scope: !556, file: !352, line: 498, type: !401)
!559 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !556, file: !352, line: 499, type: !11)
!560 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "src", scope: !561, file: !352, line: 542, type: !401)
!561 = distinct !DILexicalBlock(scope: !562, file: !352, line: 541, column: 9)
!562 = distinct !DILexicalBlock(scope: !543, file: !352, line: 525, column: 19)
!563 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dest", scope: !561, file: !352, line: 542, type: !401)
!564 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !561, file: !352, line: 543, type: !11)
!565 = !DISubprogram(name: "newblock", scope: !352, file: !352, line: 87, type: !566, isLocal: true, isDefinition: true, scopeLine: 87, flags: DIFlagPrototyped, isOptimized: true, function: %struct.BLOCK* (i64)* @newblock, variables: !568)
!566 = !DISubroutineType(types: !567)
!567 = !{!357, !11}
!568 = !{!569, !570}
!569 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 1, scope: !565, file: !352, line: 87, type: !11)
!570 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !565, file: !352, line: 88, type: !357)
!571 = !DISubprogram(name: "deque_popleft", scope: !352, file: !352, line: 218, type: !572, isLocal: true, isDefinition: true, scopeLine: 219, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_popleft, variables: !574)
!572 = !DISubroutineType(types: !573)
!573 = !{!5, !350, !5}
!574 = !{!575, !576, !577, !578}
!575 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !571, file: !352, line: 218, type: !350)
!576 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "unused", arg: 2, scope: !571, file: !352, line: 218, type: !5)
!577 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !571, file: !352, line: 220, type: !5)
!578 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "prevblock", scope: !571, file: !352, line: 221, type: !357)
!579 = !DISubprogram(name: "deque_inplace_concat", scope: !352, file: !352, line: 445, type: !572, isLocal: true, isDefinition: true, scopeLine: 446, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_inplace_concat, variables: !580)
!580 = !{!581, !582, !583, !584}
!581 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !579, file: !352, line: 445, type: !350)
!582 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "other", arg: 2, scope: !579, file: !352, line: 445, type: !5)
!583 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !579, file: !352, line: 447, type: !5)
!584 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !585, file: !352, line: 452, type: !5)
!585 = distinct !DILexicalBlock(scope: !579, file: !352, line: 452, column: 8)
!586 = !DISubprogram(name: "deque_extend", scope: !352, file: !352, line: 323, type: !572, isLocal: true, isDefinition: true, scopeLine: 324, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_extend, variables: !587)
!587 = !{!588, !589, !590, !591, !592, !595, !596, !598, !602, !606, !608, !611, !613}
!588 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !586, file: !352, line: 323, type: !350)
!589 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iterable", arg: 2, scope: !586, file: !352, line: 323, type: !5)
!590 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !586, file: !352, line: 325, type: !5)
!591 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !586, file: !352, line: 325, type: !5)
!592 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !593, file: !352, line: 329, type: !5)
!593 = distinct !DILexicalBlock(scope: !594, file: !352, line: 328, column: 40)
!594 = distinct !DILexicalBlock(scope: !586, file: !352, line: 328, column: 9)
!595 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !593, file: !352, line: 330, type: !5)
!596 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !597, file: !352, line: 334, type: !5)
!597 = distinct !DILexicalBlock(scope: !593, file: !352, line: 334, column: 12)
!598 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !599, file: !352, line: 356, type: !357)
!599 = distinct !DILexicalBlock(scope: !600, file: !352, line: 355, column: 41)
!600 = distinct !DILexicalBlock(scope: !601, file: !352, line: 355, column: 13)
!601 = distinct !DILexicalBlock(scope: !586, file: !352, line: 353, column: 52)
!602 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !603, file: !352, line: 358, type: !5)
!603 = distinct !DILexicalBlock(scope: !604, file: !352, line: 358, column: 20)
!604 = distinct !DILexicalBlock(scope: !605, file: !352, line: 357, column: 34)
!605 = distinct !DILexicalBlock(scope: !599, file: !352, line: 357, column: 17)
!606 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !607, file: !352, line: 359, type: !5)
!607 = distinct !DILexicalBlock(scope: !604, file: !352, line: 359, column: 20)
!608 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rv", scope: !609, file: !352, line: 372, type: !5)
!609 = distinct !DILexicalBlock(scope: !610, file: !352, line: 372, column: 88)
!610 = distinct !DILexicalBlock(scope: !601, file: !352, line: 372, column: 13)
!611 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !612, file: !352, line: 372, type: !5)
!612 = distinct !DILexicalBlock(scope: !609, file: !352, line: 372, column: 156)
!613 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !614, file: !352, line: 374, type: !5)
!614 = distinct !DILexicalBlock(scope: !586, file: !352, line: 374, column: 8)
!615 = !DISubprogram(name: "consume_iterator", scope: !352, file: !352, line: 309, type: !116, isLocal: true, isDefinition: true, scopeLine: 310, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @consume_iterator, variables: !616)
!616 = !{!617, !618, !619, !622}
!617 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !615, file: !352, line: 309, type: !5)
!618 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !615, file: !352, line: 311, type: !5)
!619 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !620, file: !352, line: 314, type: !5)
!620 = distinct !DILexicalBlock(scope: !621, file: !352, line: 314, column: 12)
!621 = distinct !DILexicalBlock(scope: !615, file: !352, line: 313, column: 52)
!622 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !623, file: !352, line: 316, type: !5)
!623 = distinct !DILexicalBlock(scope: !615, file: !352, line: 316, column: 8)
!624 = !DISubprogram(name: "deque_traverse", scope: !352, file: !352, line: 857, type: !625, isLocal: true, isDefinition: true, scopeLine: 858, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.dequeobject*, i32 (%struct._object*, i8*)*, i8*)* @deque_traverse, variables: !627)
!625 = !DISubroutineType(types: !626)
!626 = !{!44, !350, !263, !4}
!627 = !{!628, !629, !630, !631, !632, !633, !634, !635, !645}
!628 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !624, file: !352, line: 857, type: !350)
!629 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "visit", arg: 2, scope: !624, file: !352, line: 857, type: !263)
!630 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 3, scope: !624, file: !352, line: 857, type: !4)
!631 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !624, file: !352, line: 859, type: !357)
!632 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !624, file: !352, line: 860, type: !5)
!633 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !624, file: !352, line: 861, type: !11)
!634 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "indexlo", scope: !624, file: !352, line: 862, type: !11)
!635 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vret", scope: !636, file: !352, line: 867, type: !44)
!636 = distinct !DILexicalBlock(scope: !637, file: !352, line: 867, column: 28)
!637 = distinct !DILexicalBlock(scope: !638, file: !352, line: 867, column: 22)
!638 = distinct !DILexicalBlock(scope: !639, file: !352, line: 867, column: 16)
!639 = distinct !DILexicalBlock(scope: !640, file: !352, line: 865, column: 53)
!640 = distinct !DILexicalBlock(scope: !641, file: !352, line: 865, column: 9)
!641 = distinct !DILexicalBlock(scope: !642, file: !352, line: 865, column: 9)
!642 = distinct !DILexicalBlock(scope: !643, file: !352, line: 864, column: 74)
!643 = distinct !DILexicalBlock(scope: !644, file: !352, line: 864, column: 5)
!644 = distinct !DILexicalBlock(scope: !624, file: !352, line: 864, column: 5)
!645 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vret", scope: !646, file: !352, line: 873, type: !44)
!646 = distinct !DILexicalBlock(scope: !647, file: !352, line: 873, column: 24)
!647 = distinct !DILexicalBlock(scope: !648, file: !352, line: 873, column: 18)
!648 = distinct !DILexicalBlock(scope: !649, file: !352, line: 873, column: 12)
!649 = distinct !DILexicalBlock(scope: !650, file: !352, line: 871, column: 64)
!650 = distinct !DILexicalBlock(scope: !651, file: !352, line: 871, column: 5)
!651 = distinct !DILexicalBlock(scope: !624, file: !352, line: 871, column: 5)
!652 = !DISubprogram(name: "deque_clear", scope: !352, file: !352, line: 720, type: !487, isLocal: true, isDefinition: true, scopeLine: 721, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.dequeobject*)* @deque_clear, variables: !653)
!653 = !{!654, !655, !656}
!654 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !652, file: !352, line: 720, type: !350)
!655 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !652, file: !352, line: 722, type: !5)
!656 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !657, file: !352, line: 727, type: !5)
!657 = distinct !DILexicalBlock(scope: !658, file: !352, line: 727, column: 12)
!658 = distinct !DILexicalBlock(scope: !652, file: !352, line: 724, column: 48)
!659 = !DISubprogram(name: "deque_pop", scope: !352, file: !352, line: 181, type: !572, isLocal: true, isDefinition: true, scopeLine: 182, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_pop, variables: !660)
!660 = !{!661, !662, !663, !664}
!661 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !659, file: !352, line: 181, type: !350)
!662 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "unused", arg: 2, scope: !659, file: !352, line: 181, type: !5)
!663 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !659, file: !352, line: 183, type: !5)
!664 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "prevblock", scope: !659, file: !352, line: 184, type: !357)
!665 = !DISubprogram(name: "deque_richcompare", scope: !352, file: !352, line: 952, type: !271, isLocal: true, isDefinition: true, scopeLine: 953, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, i32)* @deque_richcompare, variables: !666)
!666 = !{!667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !685, !687, !689, !691, !693, !696, !698, !701, !703, !706, !708}
!667 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !665, file: !352, line: 952, type: !5)
!668 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !665, file: !352, line: 952, type: !5)
!669 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op", arg: 3, scope: !665, file: !352, line: 952, type: !44)
!670 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it1", scope: !665, file: !352, line: 954, type: !5)
!671 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it2", scope: !665, file: !352, line: 954, type: !5)
!672 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !665, file: !352, line: 954, type: !5)
!673 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "y", scope: !665, file: !352, line: 954, type: !5)
!674 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vs", scope: !665, file: !352, line: 955, type: !11)
!675 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ws", scope: !665, file: !352, line: 955, type: !11)
!676 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !665, file: !352, line: 956, type: !44)
!677 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmp", scope: !665, file: !352, line: 956, type: !44)
!678 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !679, file: !352, line: 996, type: !5)
!679 = distinct !DILexicalBlock(scope: !680, file: !352, line: 996, column: 16)
!680 = distinct !DILexicalBlock(scope: !681, file: !352, line: 994, column: 21)
!681 = distinct !DILexicalBlock(scope: !682, file: !352, line: 994, column: 13)
!682 = distinct !DILexicalBlock(scope: !683, file: !352, line: 986, column: 14)
!683 = distinct !DILexicalBlock(scope: !684, file: !352, line: 986, column: 5)
!684 = distinct !DILexicalBlock(scope: !665, file: !352, line: 986, column: 5)
!685 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !686, file: !352, line: 997, type: !5)
!686 = distinct !DILexicalBlock(scope: !680, file: !352, line: 997, column: 16)
!687 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !688, file: !352, line: 1000, type: !5)
!688 = distinct !DILexicalBlock(scope: !682, file: !352, line: 1000, column: 12)
!689 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !690, file: !352, line: 1001, type: !5)
!690 = distinct !DILexicalBlock(scope: !682, file: !352, line: 1001, column: 12)
!691 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !692, file: !352, line: 1006, type: !5)
!692 = distinct !DILexicalBlock(scope: !665, file: !352, line: 1006, column: 8)
!693 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !694, file: !352, line: 1006, type: !5)
!694 = distinct !DILexicalBlock(scope: !695, file: !352, line: 1006, column: 93)
!695 = distinct !DILexicalBlock(scope: !692, file: !352, line: 1006, column: 59)
!696 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !697, file: !352, line: 1007, type: !5)
!697 = distinct !DILexicalBlock(scope: !665, file: !352, line: 1007, column: 8)
!698 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !699, file: !352, line: 1007, type: !5)
!699 = distinct !DILexicalBlock(scope: !700, file: !352, line: 1007, column: 93)
!700 = distinct !DILexicalBlock(scope: !697, file: !352, line: 1007, column: 59)
!701 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !702, file: !352, line: 1020, type: !5)
!702 = distinct !DILexicalBlock(scope: !665, file: !352, line: 1020, column: 8)
!703 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !704, file: !352, line: 1020, type: !5)
!704 = distinct !DILexicalBlock(scope: !705, file: !352, line: 1020, column: 95)
!705 = distinct !DILexicalBlock(scope: !702, file: !352, line: 1020, column: 61)
!706 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !707, file: !352, line: 1021, type: !5)
!707 = distinct !DILexicalBlock(scope: !665, file: !352, line: 1021, column: 8)
!708 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !709, file: !352, line: 1021, type: !5)
!709 = distinct !DILexicalBlock(scope: !710, file: !352, line: 1021, column: 95)
!710 = distinct !DILexicalBlock(scope: !707, file: !352, line: 1021, column: 61)
!711 = !DISubprogram(name: "deque_iter", scope: !352, file: !352, line: 1208, type: !712, isLocal: true, isDefinition: true, scopeLine: 1209, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*)* @deque_iter, variables: !714)
!712 = !DISubroutineType(types: !713)
!713 = !{!5, !350}
!714 = !{!715, !716}
!715 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !711, file: !352, line: 1208, type: !350)
!716 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !711, file: !352, line: 1210, type: !375)
!717 = !DISubprogram(name: "deque_append", scope: !352, file: !352, line: 256, type: !572, isLocal: true, isDefinition: true, scopeLine: 257, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_append, variables: !718)
!718 = !{!719, !720, !721, !724, !727}
!719 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !717, file: !352, line: 256, type: !350)
!720 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "item", arg: 2, scope: !717, file: !352, line: 256, type: !5)
!721 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !722, file: !352, line: 260, type: !357)
!722 = distinct !DILexicalBlock(scope: !723, file: !352, line: 259, column: 37)
!723 = distinct !DILexicalBlock(scope: !717, file: !352, line: 259, column: 9)
!724 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rv", scope: !725, file: !352, line: 274, type: !5)
!725 = distinct !DILexicalBlock(scope: !726, file: !352, line: 274, column: 84)
!726 = distinct !DILexicalBlock(scope: !717, file: !352, line: 274, column: 9)
!727 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !728, file: !352, line: 274, type: !5)
!728 = distinct !DILexicalBlock(scope: !725, file: !352, line: 274, column: 152)
!729 = !DISubprogram(name: "deque_appendleft", scope: !352, file: !352, line: 281, type: !572, isLocal: true, isDefinition: true, scopeLine: 282, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_appendleft, variables: !730)
!730 = !{!731, !732, !733, !736, !739}
!731 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !729, file: !352, line: 281, type: !350)
!732 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "item", arg: 2, scope: !729, file: !352, line: 281, type: !5)
!733 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !734, file: !352, line: 285, type: !357)
!734 = distinct !DILexicalBlock(scope: !735, file: !352, line: 284, column: 32)
!735 = distinct !DILexicalBlock(scope: !729, file: !352, line: 284, column: 9)
!736 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rv", scope: !737, file: !352, line: 299, type: !5)
!737 = distinct !DILexicalBlock(scope: !738, file: !352, line: 299, column: 84)
!738 = distinct !DILexicalBlock(scope: !729, file: !352, line: 299, column: 9)
!739 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !740, file: !352, line: 299, type: !5)
!740 = distinct !DILexicalBlock(scope: !737, file: !352, line: 299, column: 148)
!741 = !DISubprogram(name: "deque_clearmethod", scope: !352, file: !352, line: 832, type: !712, isLocal: true, isDefinition: true, scopeLine: 833, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*)* @deque_clearmethod, variables: !742)
!742 = !{!743}
!743 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !741, file: !352, line: 832, type: !350)
!744 = !DISubprogram(name: "deque_copy", scope: !352, file: !352, line: 879, type: !116, isLocal: true, isDefinition: true, scopeLine: 880, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @deque_copy, variables: !745)
!745 = !{!746}
!746 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !744, file: !352, line: 879, type: !5)
!747 = !DISubprogram(name: "deque_count", scope: !352, file: !352, line: 639, type: !572, isLocal: true, isDefinition: true, scopeLine: 640, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_count, variables: !748)
!748 = !{!749, !750, !751, !752, !753, !754, !755, !756, !757, !758}
!749 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !747, file: !352, line: 639, type: !350)
!750 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 2, scope: !747, file: !352, line: 639, type: !5)
!751 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !747, file: !352, line: 641, type: !357)
!752 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !747, file: !352, line: 642, type: !11)
!753 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !747, file: !352, line: 643, type: !11)
!754 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !747, file: !352, line: 644, type: !11)
!755 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !747, file: !352, line: 645, type: !11)
!756 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !747, file: !352, line: 646, type: !5)
!757 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start_state", scope: !747, file: !352, line: 647, type: !17)
!758 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmp", scope: !747, file: !352, line: 648, type: !44)
!759 = !DISubprogram(name: "deque_extendleft", scope: !352, file: !352, line: 384, type: !572, isLocal: true, isDefinition: true, scopeLine: 385, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_extendleft, variables: !760)
!760 = !{!761, !762, !763, !764, !765, !768, !769, !771, !775, !779, !781, !784, !786}
!761 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !759, file: !352, line: 384, type: !350)
!762 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iterable", arg: 2, scope: !759, file: !352, line: 384, type: !5)
!763 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !759, file: !352, line: 386, type: !5)
!764 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !759, file: !352, line: 386, type: !5)
!765 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !766, file: !352, line: 390, type: !5)
!766 = distinct !DILexicalBlock(scope: !767, file: !352, line: 389, column: 40)
!767 = distinct !DILexicalBlock(scope: !759, file: !352, line: 389, column: 9)
!768 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !766, file: !352, line: 391, type: !5)
!769 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !770, file: !352, line: 395, type: !5)
!770 = distinct !DILexicalBlock(scope: !766, file: !352, line: 395, column: 12)
!771 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !772, file: !352, line: 417, type: !357)
!772 = distinct !DILexicalBlock(scope: !773, file: !352, line: 416, column: 36)
!773 = distinct !DILexicalBlock(scope: !774, file: !352, line: 416, column: 13)
!774 = distinct !DILexicalBlock(scope: !759, file: !352, line: 414, column: 52)
!775 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !776, file: !352, line: 419, type: !5)
!776 = distinct !DILexicalBlock(scope: !777, file: !352, line: 419, column: 20)
!777 = distinct !DILexicalBlock(scope: !778, file: !352, line: 418, column: 34)
!778 = distinct !DILexicalBlock(scope: !772, file: !352, line: 418, column: 17)
!779 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !780, file: !352, line: 420, type: !5)
!780 = distinct !DILexicalBlock(scope: !777, file: !352, line: 420, column: 20)
!781 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rv", scope: !782, file: !352, line: 433, type: !5)
!782 = distinct !DILexicalBlock(scope: !783, file: !352, line: 433, column: 88)
!783 = distinct !DILexicalBlock(scope: !774, file: !352, line: 433, column: 13)
!784 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !785, file: !352, line: 433, type: !5)
!785 = distinct !DILexicalBlock(scope: !782, file: !352, line: 433, column: 152)
!786 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !787, file: !352, line: 435, type: !5)
!787 = distinct !DILexicalBlock(scope: !759, file: !352, line: 435, column: 8)
!788 = !DISubprogram(name: "deque_reduce", scope: !352, file: !352, line: 891, type: !712, isLocal: true, isDefinition: true, scopeLine: 892, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*)* @deque_reduce, variables: !789)
!789 = !{!790, !791, !792, !793, !794, !798, !801, !803, !806}
!790 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !788, file: !352, line: 891, type: !350)
!791 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dict", scope: !788, file: !352, line: 893, type: !5)
!792 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !788, file: !352, line: 893, type: !5)
!793 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "aslist", scope: !788, file: !352, line: 893, type: !5)
!794 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !795, file: !352, line: 901, type: !5)
!795 = distinct !DILexicalBlock(scope: !796, file: !352, line: 901, column: 12)
!796 = distinct !DILexicalBlock(scope: !797, file: !352, line: 900, column: 31)
!797 = distinct !DILexicalBlock(scope: !788, file: !352, line: 900, column: 9)
!798 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !799, file: !352, line: 901, type: !5)
!799 = distinct !DILexicalBlock(scope: !800, file: !352, line: 901, column: 100)
!800 = distinct !DILexicalBlock(scope: !795, file: !352, line: 901, column: 66)
!801 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !802, file: !352, line: 915, type: !5)
!802 = distinct !DILexicalBlock(scope: !788, file: !352, line: 915, column: 8)
!803 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !804, file: !352, line: 915, type: !5)
!804 = distinct !DILexicalBlock(scope: !805, file: !352, line: 915, column: 96)
!805 = distinct !DILexicalBlock(scope: !802, file: !352, line: 915, column: 62)
!806 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !807, file: !352, line: 916, type: !5)
!807 = distinct !DILexicalBlock(scope: !788, file: !352, line: 916, column: 8)
!808 = !DISubprogram(name: "deque_remove", scope: !352, file: !352, line: 685, type: !572, isLocal: true, isDefinition: true, scopeLine: 686, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_remove, variables: !809)
!809 = !{!810, !811, !812, !813, !814, !818, !819, !822}
!810 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !808, file: !352, line: 685, type: !350)
!811 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "value", arg: 2, scope: !808, file: !352, line: 685, type: !5)
!812 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !808, file: !352, line: 687, type: !11)
!813 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !808, file: !352, line: 687, type: !11)
!814 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !815, file: !352, line: 690, type: !5)
!815 = distinct !DILexicalBlock(scope: !816, file: !352, line: 689, column: 27)
!816 = distinct !DILexicalBlock(scope: !817, file: !352, line: 689, column: 5)
!817 = distinct !DILexicalBlock(scope: !808, file: !352, line: 689, column: 5)
!818 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmp", scope: !815, file: !352, line: 691, type: !44)
!819 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tgt", scope: !820, file: !352, line: 699, type: !5)
!820 = distinct !DILexicalBlock(scope: !821, file: !352, line: 698, column: 22)
!821 = distinct !DILexicalBlock(scope: !815, file: !352, line: 698, column: 13)
!822 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !823, file: !352, line: 701, type: !5)
!823 = distinct !DILexicalBlock(scope: !820, file: !352, line: 701, column: 16)
!824 = !DISubprogram(name: "deque_reviter", scope: !352, file: !352, line: 1364, type: !712, isLocal: true, isDefinition: true, scopeLine: 1365, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*)* @deque_reviter, variables: !825)
!825 = !{!826, !827}
!826 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !824, file: !352, line: 1364, type: !350)
!827 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !824, file: !352, line: 1366, type: !375)
!828 = !DISubprogram(name: "deque_reverse", scope: !352, file: !352, line: 597, type: !572, isLocal: true, isDefinition: true, scopeLine: 598, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_reverse, variables: !829)
!829 = !{!830, !831, !832, !833, !834, !835, !836, !837, !838}
!830 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !828, file: !352, line: 597, type: !350)
!831 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "unused", arg: 2, scope: !828, file: !352, line: 597, type: !5)
!832 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "leftblock", scope: !828, file: !352, line: 599, type: !357)
!833 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rightblock", scope: !828, file: !352, line: 600, type: !357)
!834 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "leftindex", scope: !828, file: !352, line: 601, type: !11)
!835 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rightindex", scope: !828, file: !352, line: 602, type: !11)
!836 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !828, file: !352, line: 603, type: !11)
!837 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !828, file: !352, line: 604, type: !11)
!838 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !828, file: !352, line: 605, type: !5)
!839 = !DISubprogram(name: "deque_rotate", scope: !352, file: !352, line: 582, type: !572, isLocal: true, isDefinition: true, scopeLine: 583, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, %struct._object*)* @deque_rotate, variables: !840)
!840 = !{!841, !842, !843}
!841 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !839, file: !352, line: 582, type: !350)
!842 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !839, file: !352, line: 582, type: !5)
!843 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !839, file: !352, line: 584, type: !11)
!844 = !DISubprogram(name: "deque_sizeof", scope: !352, file: !352, line: 1060, type: !845, isLocal: true, isDefinition: true, scopeLine: 1061, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*, i8*)* @deque_sizeof, variables: !847)
!845 = !DISubroutineType(types: !846)
!846 = !{!5, !350, !4}
!847 = !{!848, !849, !850, !851}
!848 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !844, file: !352, line: 1060, type: !350)
!849 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "unused", arg: 2, scope: !844, file: !352, line: 1060, type: !4)
!850 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !844, file: !352, line: 1062, type: !11)
!851 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "blocks", scope: !844, file: !352, line: 1063, type: !11)
!852 = !DISubprogram(name: "deque_get_maxlen", scope: !352, file: !352, line: 1077, type: !712, isLocal: true, isDefinition: true, scopeLine: 1078, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeobject*)* @deque_get_maxlen, variables: !853)
!853 = !{!854}
!854 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !852, file: !352, line: 1077, type: !350)
!855 = !DISubprogram(name: "deque_init", scope: !352, file: !352, line: 1030, type: !856, isLocal: true, isDefinition: true, scopeLine: 1031, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.dequeobject*, %struct._object*, %struct._object*)* @deque_init, variables: !858)
!856 = !DISubroutineType(types: !857)
!857 = !{!44, !350, !5, !5}
!858 = !{!859, !860, !861, !862, !863, !864, !865, !869, !872}
!859 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "deque", arg: 1, scope: !855, file: !352, line: 1030, type: !350)
!860 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !855, file: !352, line: 1030, type: !5)
!861 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwdargs", arg: 3, scope: !855, file: !352, line: 1030, type: !5)
!862 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iterable", scope: !855, file: !352, line: 1032, type: !5)
!863 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "maxlenobj", scope: !855, file: !352, line: 1033, type: !5)
!864 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "maxlen", scope: !855, file: !352, line: 1034, type: !11)
!865 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "kwlist", scope: !855, file: !352, line: 1035, type: !866)
!866 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 192, align: 64, elements: !867)
!867 = !{!868}
!868 = !DISubrange(count: 3)
!869 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rv", scope: !870, file: !352, line: 1051, type: !5)
!870 = distinct !DILexicalBlock(scope: !871, file: !352, line: 1050, column: 33)
!871 = distinct !DILexicalBlock(scope: !855, file: !352, line: 1050, column: 9)
!872 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !873, file: !352, line: 1054, type: !5)
!873 = distinct !DILexicalBlock(scope: !870, file: !352, line: 1054, column: 12)
!874 = !DISubprogram(name: "deque_new", scope: !352, file: !352, line: 149, type: !875, isLocal: true, isDefinition: true, scopeLine: 150, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @deque_new, variables: !879)
!875 = !DISubroutineType(types: !876)
!876 = !{!5, !877, !5, !5}
!877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !878, size: 64, align: 64)
!878 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTypeObject", file: !7, line: 422, baseType: !20)
!879 = !{!880, !881, !882, !883, !884, !885}
!880 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 1, scope: !874, file: !352, line: 149, type: !877)
!881 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !874, file: !352, line: 149, type: !5)
!882 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !874, file: !352, line: 149, type: !5)
!883 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deque", scope: !874, file: !352, line: 151, type: !350)
!884 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !874, file: !352, line: 152, type: !357)
!885 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !886, file: !352, line: 161, type: !5)
!886 = distinct !DILexicalBlock(scope: !887, file: !352, line: 161, column: 12)
!887 = distinct !DILexicalBlock(scope: !888, file: !352, line: 160, column: 26)
!888 = distinct !DILexicalBlock(scope: !874, file: !352, line: 160, column: 9)
!889 = !DISubprogram(name: "defdict_dealloc", scope: !352, file: !352, line: 1613, type: !890, isLocal: true, isDefinition: true, scopeLine: 1614, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.defdictobject*)* @defdict_dealloc, variables: !892)
!890 = !DISubroutineType(types: !891)
!891 = !{null, !385}
!892 = !{!893, !894, !896}
!893 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dd", arg: 1, scope: !889, file: !352, line: 1613, type: !385)
!894 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !895, file: !352, line: 1615, type: !5)
!895 = distinct !DILexicalBlock(scope: !889, file: !352, line: 1615, column: 8)
!896 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !897, file: !352, line: 1615, type: !5)
!897 = distinct !DILexicalBlock(scope: !898, file: !352, line: 1615, column: 133)
!898 = distinct !DILexicalBlock(scope: !899, file: !352, line: 1615, column: 92)
!899 = distinct !DILexicalBlock(scope: !895, file: !352, line: 1615, column: 69)
!900 = !DISubprogram(name: "defdict_repr", scope: !352, file: !352, line: 1620, type: !901, isLocal: true, isDefinition: true, scopeLine: 1621, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.defdictobject*)* @defdict_repr, variables: !903)
!901 = !DISubroutineType(types: !902)
!902 = !{!5, !385}
!903 = !{!904, !905, !906, !907, !908, !911, !917, !921, !923}
!904 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dd", arg: 1, scope: !900, file: !352, line: 1620, type: !385)
!905 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "baserepr", scope: !900, file: !352, line: 1622, type: !5)
!906 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "defrepr", scope: !900, file: !352, line: 1623, type: !5)
!907 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !900, file: !352, line: 1624, type: !5)
!908 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !909, file: !352, line: 1632, type: !44)
!909 = distinct !DILexicalBlock(scope: !910, file: !352, line: 1631, column: 5)
!910 = distinct !DILexicalBlock(scope: !900, file: !352, line: 1628, column: 9)
!911 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !912, file: !352, line: 1635, type: !5)
!912 = distinct !DILexicalBlock(scope: !913, file: !352, line: 1635, column: 20)
!913 = distinct !DILexicalBlock(scope: !914, file: !352, line: 1634, column: 29)
!914 = distinct !DILexicalBlock(scope: !915, file: !352, line: 1634, column: 17)
!915 = distinct !DILexicalBlock(scope: !916, file: !352, line: 1633, column: 26)
!916 = distinct !DILexicalBlock(scope: !909, file: !352, line: 1633, column: 13)
!917 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !918, file: !352, line: 1645, type: !5)
!918 = distinct !DILexicalBlock(scope: !919, file: !352, line: 1645, column: 12)
!919 = distinct !DILexicalBlock(scope: !920, file: !352, line: 1644, column: 32)
!920 = distinct !DILexicalBlock(scope: !900, file: !352, line: 1644, column: 9)
!921 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !922, file: !352, line: 1650, type: !5)
!922 = distinct !DILexicalBlock(scope: !900, file: !352, line: 1650, column: 8)
!923 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !924, file: !352, line: 1651, type: !5)
!924 = distinct !DILexicalBlock(scope: !900, file: !352, line: 1651, column: 8)
!925 = !DISubprogram(name: "defdict_traverse", scope: !352, file: !352, line: 1656, type: !261, isLocal: true, isDefinition: true, scopeLine: 1657, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* @defdict_traverse, variables: !926)
!926 = !{!927, !928, !929, !930}
!927 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !925, file: !352, line: 1656, type: !5)
!928 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "visit", arg: 2, scope: !925, file: !352, line: 1656, type: !263)
!929 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 3, scope: !925, file: !352, line: 1656, type: !4)
!930 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vret", scope: !931, file: !352, line: 1658, type: !44)
!931 = distinct !DILexicalBlock(scope: !932, file: !352, line: 1658, column: 56)
!932 = distinct !DILexicalBlock(scope: !933, file: !352, line: 1658, column: 14)
!933 = distinct !DILexicalBlock(scope: !925, file: !352, line: 1658, column: 8)
!934 = !DISubprogram(name: "defdict_tp_clear", scope: !352, file: !352, line: 1663, type: !935, isLocal: true, isDefinition: true, scopeLine: 1664, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.defdictobject*)* @defdict_tp_clear, variables: !937)
!935 = !DISubroutineType(types: !936)
!936 = !{!44, !385}
!937 = !{!938, !939, !941}
!938 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dd", arg: 1, scope: !934, file: !352, line: 1663, type: !385)
!939 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !940, file: !352, line: 1665, type: !5)
!940 = distinct !DILexicalBlock(scope: !934, file: !352, line: 1665, column: 8)
!941 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !942, file: !352, line: 1665, type: !5)
!942 = distinct !DILexicalBlock(scope: !943, file: !352, line: 1665, column: 133)
!943 = distinct !DILexicalBlock(scope: !944, file: !352, line: 1665, column: 92)
!944 = distinct !DILexicalBlock(scope: !940, file: !352, line: 1665, column: 69)
!945 = !DISubprogram(name: "defdict_missing", scope: !352, file: !352, line: 1498, type: !946, isLocal: true, isDefinition: true, scopeLine: 1499, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.defdictobject*, %struct._object*)* @defdict_missing, variables: !948)
!946 = !DISubroutineType(types: !947)
!947 = !{!5, !385, !5}
!948 = !{!949, !950, !951, !952, !953, !956, !958}
!949 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dd", arg: 1, scope: !945, file: !352, line: 1498, type: !385)
!950 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !945, file: !352, line: 1498, type: !5)
!951 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "factory", scope: !945, file: !352, line: 1500, type: !5)
!952 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !945, file: !352, line: 1501, type: !5)
!953 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tup", scope: !954, file: !352, line: 1504, type: !5)
!954 = distinct !DILexicalBlock(scope: !955, file: !352, line: 1502, column: 64)
!955 = distinct !DILexicalBlock(scope: !945, file: !352, line: 1502, column: 9)
!956 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !957, file: !352, line: 1508, type: !5)
!957 = distinct !DILexicalBlock(scope: !954, file: !352, line: 1508, column: 12)
!958 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !959, file: !352, line: 1515, type: !5)
!959 = distinct !DILexicalBlock(scope: !960, file: !352, line: 1515, column: 12)
!960 = distinct !DILexicalBlock(scope: !961, file: !352, line: 1514, column: 59)
!961 = distinct !DILexicalBlock(scope: !945, file: !352, line: 1514, column: 9)
!962 = !DISubprogram(name: "defdict_copy", scope: !352, file: !352, line: 1524, type: !901, isLocal: true, isDefinition: true, scopeLine: 1525, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.defdictobject*)* @defdict_copy, variables: !963)
!963 = !{!964}
!964 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dd", arg: 1, scope: !962, file: !352, line: 1524, type: !385)
!965 = !DISubprogram(name: "defdict_reduce", scope: !352, file: !352, line: 1538, type: !901, isLocal: true, isDefinition: true, scopeLine: 1539, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.defdictobject*)* @defdict_reduce, variables: !966)
!966 = !{!967, !968, !969, !970, !971, !972, !976, !980, !982, !984, !986}
!967 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dd", arg: 1, scope: !965, file: !352, line: 1538, type: !385)
!968 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "args", scope: !965, file: !352, line: 1562, type: !5)
!969 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "items", scope: !965, file: !352, line: 1563, type: !5)
!970 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iter", scope: !965, file: !352, line: 1564, type: !5)
!971 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !965, file: !352, line: 1565, type: !5)
!972 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !973, file: !352, line: 1576, type: !5)
!973 = distinct !DILexicalBlock(scope: !974, file: !352, line: 1576, column: 12)
!974 = distinct !DILexicalBlock(scope: !975, file: !352, line: 1575, column: 30)
!975 = distinct !DILexicalBlock(scope: !965, file: !352, line: 1575, column: 9)
!976 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !977, file: !352, line: 1581, type: !5)
!977 = distinct !DILexicalBlock(scope: !978, file: !352, line: 1581, column: 12)
!978 = distinct !DILexicalBlock(scope: !979, file: !352, line: 1580, column: 29)
!979 = distinct !DILexicalBlock(scope: !965, file: !352, line: 1580, column: 9)
!980 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !981, file: !352, line: 1582, type: !5)
!981 = distinct !DILexicalBlock(scope: !978, file: !352, line: 1582, column: 12)
!982 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !983, file: !352, line: 1587, type: !5)
!983 = distinct !DILexicalBlock(scope: !965, file: !352, line: 1587, column: 8)
!984 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !985, file: !352, line: 1588, type: !5)
!985 = distinct !DILexicalBlock(scope: !965, file: !352, line: 1588, column: 8)
!986 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !987, file: !352, line: 1589, type: !5)
!987 = distinct !DILexicalBlock(scope: !965, file: !352, line: 1589, column: 8)
!988 = !DISubprogram(name: "defdict_init", scope: !352, file: !352, line: 1670, type: !211, isLocal: true, isDefinition: true, scopeLine: 1671, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*, %struct._object*)* @defdict_init, variables: !989)
!989 = !{!990, !991, !992, !993, !994, !995, !996, !997, !998, !1001, !1003, !1005, !1007}
!990 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !988, file: !352, line: 1670, type: !5)
!991 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !988, file: !352, line: 1670, type: !5)
!992 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !988, file: !352, line: 1670, type: !5)
!993 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dd", scope: !988, file: !352, line: 1672, type: !385)
!994 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "olddefault", scope: !988, file: !352, line: 1673, type: !5)
!995 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newdefault", scope: !988, file: !352, line: 1674, type: !5)
!996 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newargs", scope: !988, file: !352, line: 1675, type: !5)
!997 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !988, file: !352, line: 1676, type: !44)
!998 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !999, file: !352, line: 1680, type: !11)
!999 = distinct !DILexicalBlock(scope: !1000, file: !352, line: 1679, column: 10)
!1000 = distinct !DILexicalBlock(scope: !988, file: !352, line: 1677, column: 9)
!1001 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xincref_tmp", scope: !1002, file: !352, line: 1693, type: !5)
!1002 = distinct !DILexicalBlock(scope: !988, file: !352, line: 1693, column: 8)
!1003 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1004, file: !352, line: 1696, type: !5)
!1004 = distinct !DILexicalBlock(scope: !988, file: !352, line: 1696, column: 8)
!1005 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1006, file: !352, line: 1697, type: !5)
!1006 = distinct !DILexicalBlock(scope: !988, file: !352, line: 1697, column: 8)
!1007 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1008, file: !352, line: 1697, type: !5)
!1008 = distinct !DILexicalBlock(scope: !1009, file: !352, line: 1697, column: 102)
!1009 = distinct !DILexicalBlock(scope: !1006, file: !352, line: 1697, column: 68)
!1010 = !DISubprogram(name: "dequeiter_dealloc", scope: !352, file: !352, line: 1233, type: !1011, isLocal: true, isDefinition: true, scopeLine: 1234, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.dequeiterobject*)* @dequeiter_dealloc, variables: !1013)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{null, !375}
!1013 = !{!1014, !1015, !1017}
!1014 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dio", arg: 1, scope: !1010, file: !352, line: 1233, type: !375)
!1015 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1016, file: !352, line: 1235, type: !5)
!1016 = distinct !DILexicalBlock(scope: !1010, file: !352, line: 1235, column: 8)
!1017 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1018, file: !352, line: 1235, type: !5)
!1018 = distinct !DILexicalBlock(scope: !1019, file: !352, line: 1235, column: 102)
!1019 = distinct !DILexicalBlock(scope: !1016, file: !352, line: 1235, column: 68)
!1020 = !DISubprogram(name: "dequeiter_traverse", scope: !352, file: !352, line: 1226, type: !1021, isLocal: true, isDefinition: true, scopeLine: 1227, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.dequeiterobject*, i32 (%struct._object*, i8*)*, i8*)* @dequeiter_traverse, variables: !1023)
!1021 = !DISubroutineType(types: !1022)
!1022 = !{!44, !375, !263, !4}
!1023 = !{!1024, !1025, !1026, !1027}
!1024 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dio", arg: 1, scope: !1020, file: !352, line: 1226, type: !375)
!1025 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "visit", arg: 2, scope: !1020, file: !352, line: 1226, type: !263)
!1026 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 3, scope: !1020, file: !352, line: 1226, type: !4)
!1027 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vret", scope: !1028, file: !352, line: 1228, type: !44)
!1028 = distinct !DILexicalBlock(scope: !1029, file: !352, line: 1228, column: 26)
!1029 = distinct !DILexicalBlock(scope: !1030, file: !352, line: 1228, column: 14)
!1030 = distinct !DILexicalBlock(scope: !1020, file: !352, line: 1228, column: 8)
!1031 = !DISubprogram(name: "dequeiter_next", scope: !352, file: !352, line: 1240, type: !1032, isLocal: true, isDefinition: true, scopeLine: 1241, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeiterobject*)* @dequeiter_next, variables: !1034)
!1032 = !DISubroutineType(types: !1033)
!1033 = !{!5, !375}
!1034 = !{!1035, !1036}
!1035 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1031, file: !352, line: 1240, type: !375)
!1036 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1031, file: !352, line: 1242, type: !5)
!1037 = !DISubprogram(name: "dequeiter_len", scope: !352, file: !352, line: 1297, type: !1032, isLocal: true, isDefinition: true, scopeLine: 1298, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeiterobject*)* @dequeiter_len, variables: !1038)
!1038 = !{!1039}
!1039 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1037, file: !352, line: 1297, type: !375)
!1040 = !DISubprogram(name: "dequeiter_reduce", scope: !352, file: !352, line: 1305, type: !1032, isLocal: true, isDefinition: true, scopeLine: 1306, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeiterobject*)* @dequeiter_reduce, variables: !1041)
!1041 = !{!1042}
!1042 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1040, file: !352, line: 1305, type: !375)
!1043 = !DISubprogram(name: "dequeiter_new", scope: !352, file: !352, line: 1268, type: !875, isLocal: true, isDefinition: true, scopeLine: 1269, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @dequeiter_new, variables: !1044)
!1044 = !{!1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1056, !1060}
!1045 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 1, scope: !1043, file: !352, line: 1268, type: !877)
!1046 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1043, file: !352, line: 1268, type: !5)
!1047 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1043, file: !352, line: 1268, type: !5)
!1048 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1043, file: !352, line: 1270, type: !11)
!1049 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !1043, file: !352, line: 1270, type: !11)
!1050 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deque", scope: !1043, file: !352, line: 1271, type: !5)
!1051 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !1043, file: !352, line: 1272, type: !375)
!1052 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1053, file: !352, line: 1282, type: !5)
!1053 = distinct !DILexicalBlock(scope: !1054, file: !352, line: 1281, column: 28)
!1054 = distinct !DILexicalBlock(scope: !1055, file: !352, line: 1281, column: 5)
!1055 = distinct !DILexicalBlock(scope: !1043, file: !352, line: 1281, column: 5)
!1056 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1057, file: !352, line: 1284, type: !5)
!1057 = distinct !DILexicalBlock(scope: !1058, file: !352, line: 1284, column: 16)
!1058 = distinct !DILexicalBlock(scope: !1059, file: !352, line: 1283, column: 19)
!1059 = distinct !DILexicalBlock(scope: !1053, file: !352, line: 1283, column: 13)
!1060 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1061, file: !352, line: 1287, type: !5)
!1061 = distinct !DILexicalBlock(scope: !1062, file: !352, line: 1287, column: 20)
!1062 = distinct !DILexicalBlock(scope: !1063, file: !352, line: 1286, column: 30)
!1063 = distinct !DILexicalBlock(scope: !1064, file: !352, line: 1286, column: 17)
!1064 = distinct !DILexicalBlock(scope: !1059, file: !352, line: 1285, column: 16)
!1065 = !DISubprogram(name: "dequereviter_next", scope: !352, file: !352, line: 1382, type: !1032, isLocal: true, isDefinition: true, scopeLine: 1383, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.dequeiterobject*)* @dequereviter_next, variables: !1066)
!1066 = !{!1067, !1068}
!1067 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1065, file: !352, line: 1382, type: !375)
!1068 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1065, file: !352, line: 1384, type: !5)
!1069 = !DISubprogram(name: "dequereviter_new", scope: !352, file: !352, line: 1410, type: !875, isLocal: true, isDefinition: true, scopeLine: 1411, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @dequereviter_new, variables: !1070)
!1070 = !{!1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1082, !1086}
!1071 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 1, scope: !1069, file: !352, line: 1410, type: !877)
!1072 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1069, file: !352, line: 1410, type: !5)
!1073 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1069, file: !352, line: 1410, type: !5)
!1074 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1069, file: !352, line: 1412, type: !11)
!1075 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !1069, file: !352, line: 1412, type: !11)
!1076 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deque", scope: !1069, file: !352, line: 1413, type: !5)
!1077 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !1069, file: !352, line: 1414, type: !375)
!1078 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1079, file: !352, line: 1424, type: !5)
!1079 = distinct !DILexicalBlock(scope: !1080, file: !352, line: 1423, column: 28)
!1080 = distinct !DILexicalBlock(scope: !1081, file: !352, line: 1423, column: 5)
!1081 = distinct !DILexicalBlock(scope: !1069, file: !352, line: 1423, column: 5)
!1082 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1083, file: !352, line: 1426, type: !5)
!1083 = distinct !DILexicalBlock(scope: !1084, file: !352, line: 1426, column: 16)
!1084 = distinct !DILexicalBlock(scope: !1085, file: !352, line: 1425, column: 19)
!1085 = distinct !DILexicalBlock(scope: !1079, file: !352, line: 1425, column: 13)
!1086 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1087, file: !352, line: 1429, type: !5)
!1087 = distinct !DILexicalBlock(scope: !1088, file: !352, line: 1429, column: 20)
!1088 = distinct !DILexicalBlock(scope: !1089, file: !352, line: 1428, column: 30)
!1089 = distinct !DILexicalBlock(scope: !1090, file: !352, line: 1428, column: 17)
!1090 = distinct !DILexicalBlock(scope: !1085, file: !352, line: 1427, column: 16)
!1091 = !{!1092, !1115, !1119, !1123, !1131, !1132, !1136, !1137, !1138, !1142, !1143, !1147, !1151, !1155, !1159, !1163, !1167, !1171, !1172, !1176, !1180, !1184, !1185, !1189, !1193, !1197, !1198, !1202, !1206, !1209, !1210, !1214, !1218, !1222, !1226, !1227, !1230, !1231, !1233, !1237}
!1092 = !DIGlobalVariable(name: "_collectionsmodule", scope: !0, file: !352, line: 1872, type: !1093, isLocal: true, isDefinition: true, variable: %struct.PyModuleDef* @_collectionsmodule)
!1093 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyModuleDef", file: !1094, line: 47, size: 832, align: 64, elements: !1095)
!1094 = !DIFile(filename: "Include/moduleobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1095 = !{!1096, !1105, !1106, !1107, !1108, !1111, !1112, !1113, !1114}
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "m_base", scope: !1093, file: !1094, line: 48, baseType: !1097, size: 320, align: 64)
!1097 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyModuleDef_Base", file: !1094, line: 38, baseType: !1098)
!1098 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyModuleDef_Base", file: !1094, line: 33, size: 320, align: 64, elements: !1099)
!1099 = !{!1100, !1101, !1103, !1104}
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !1098, file: !1094, line: 34, baseType: !6, size: 128, align: 64)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "m_init", scope: !1098, file: !1094, line: 35, baseType: !1102, size: 64, align: 64, offset: 128)
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !413, size: 64, align: 64)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "m_index", scope: !1098, file: !1094, line: 36, baseType: !11, size: 64, align: 64, offset: 192)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "m_copy", scope: !1098, file: !1094, line: 37, baseType: !5, size: 64, align: 64, offset: 256)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "m_name", scope: !1093, file: !1094, line: 49, baseType: !29, size: 64, align: 64, offset: 320)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "m_doc", scope: !1093, file: !1094, line: 50, baseType: !29, size: 64, align: 64, offset: 384)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "m_size", scope: !1093, file: !1094, line: 51, baseType: !11, size: 64, align: 64, offset: 448)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "m_methods", scope: !1093, file: !1094, line: 52, baseType: !1109, size: 64, align: 64, offset: 512)
!1109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1110, size: 64, align: 64)
!1110 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMethodDef", file: !281, line: 47, baseType: !280)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "m_reload", scope: !1093, file: !1094, line: 53, baseType: !142, size: 64, align: 64, offset: 576)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "m_traverse", scope: !1093, file: !1094, line: 54, baseType: !259, size: 64, align: 64, offset: 640)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "m_clear", scope: !1093, file: !1094, line: 55, baseType: !142, size: 64, align: 64, offset: 704)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "m_free", scope: !1093, file: !1094, line: 56, baseType: !336, size: 64, align: 64, offset: 768)
!1115 = !DIGlobalVariable(name: "module_doc", scope: !0, file: !352, line: 1861, type: !1116, isLocal: true, isDefinition: true, variable: [160 x i8]* @module_doc)
!1116 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 1280, align: 8, elements: !1117)
!1117 = !{!1118}
!1118 = !DISubrange(count: 160)
!1119 = !DIGlobalVariable(name: "module_functions", scope: !0, file: !352, line: 1867, type: !1120, isLocal: true, isDefinition: true, variable: [2 x %struct.PyMethodDef]* @module_functions)
!1120 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 512, align: 64, elements: !1121)
!1121 = !{!1122}
!1122 = !DISubrange(count: 2)
!1123 = !DIGlobalVariable(name: "PyId_get", scope: !417, file: !352, line: 1768, type: !1124, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @_count_elements.PyId_get)
!1124 = !DIDerivedType(tag: DW_TAG_typedef, name: "_Py_Identifier", file: !7, line: 144, baseType: !1125)
!1125 = !DICompositeType(tag: DW_TAG_structure_type, name: "_Py_Identifier", file: !7, line: 140, size: 192, align: 64, elements: !1126)
!1126 = !{!1127, !1129, !1130}
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1125, file: !7, line: 141, baseType: !1128, size: 64, align: 64)
!1128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1125, size: 64, align: 64)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1125, file: !7, line: 142, baseType: !29, size: 64, align: 64, offset: 64)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !1125, file: !7, line: 143, baseType: !5, size: 64, align: 64, offset: 128)
!1131 = !DIGlobalVariable(name: "PyId___setitem__", scope: !417, file: !352, line: 1769, type: !1124, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @_count_elements.PyId___setitem__)
!1132 = !DIGlobalVariable(name: "_count_elements_doc", scope: !0, file: !352, line: 1760, type: !1133, isLocal: true, isDefinition: true, variable: [98 x i8]* @_count_elements_doc)
!1133 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 784, align: 8, elements: !1134)
!1134 = !{!1135}
!1135 = !DISubrange(count: 98)
!1136 = !DIGlobalVariable(name: "deque_type", scope: !0, file: !352, line: 1150, type: !878, isLocal: true, isDefinition: true, variable: %struct._typeobject* @deque_type)
!1137 = !DIGlobalVariable(name: "numfreeblocks", scope: !0, file: !352, line: 83, type: !11, isLocal: true, isDefinition: true, variable: i64* @numfreeblocks)
!1138 = !DIGlobalVariable(name: "freeblocks", scope: !0, file: !352, line: 84, type: !1139, isLocal: true, isDefinition: true, variable: [10 x %struct.BLOCK*]* @freeblocks)
!1139 = !DICompositeType(tag: DW_TAG_array_type, baseType: !357, size: 640, align: 64, elements: !1140)
!1140 = !{!1141}
!1141 = !DISubrange(count: 10)
!1142 = !DIGlobalVariable(name: "deque_as_sequence", scope: !0, file: !352, line: 1090, type: !172, isLocal: true, isDefinition: true, variable: %struct.PySequenceMethods* @deque_as_sequence)
!1143 = !DIGlobalVariable(name: "deque_doc", scope: !0, file: !352, line: 1145, type: !1144, isLocal: true, isDefinition: true, variable: [116 x i8]* @deque_doc)
!1144 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 928, align: 8, elements: !1145)
!1145 = !{!1146}
!1146 = !DISubrange(count: 116)
!1147 = !DIGlobalVariable(name: "deque_methods", scope: !0, file: !352, line: 1111, type: !1148, isLocal: true, isDefinition: true, variable: [16 x %struct.PyMethodDef]* @deque_methods)
!1148 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1110, size: 4096, align: 64, elements: !1149)
!1149 = !{!1150}
!1150 = !DISubrange(count: 16)
!1151 = !DIGlobalVariable(name: "append_doc", scope: !0, file: !352, line: 278, type: !1152, isLocal: true, isDefinition: true, variable: [47 x i8]* @append_doc)
!1152 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 376, align: 8, elements: !1153)
!1153 = !{!1154}
!1154 = !DISubrange(count: 47)
!1155 = !DIGlobalVariable(name: "appendleft_doc", scope: !0, file: !352, line: 303, type: !1156, isLocal: true, isDefinition: true, variable: [46 x i8]* @appendleft_doc)
!1156 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 368, align: 8, elements: !1157)
!1157 = !{!1158}
!1158 = !DISubrange(count: 46)
!1159 = !DIGlobalVariable(name: "clear_doc", scope: !0, file: !352, line: 838, type: !1160, isLocal: true, isDefinition: true, variable: [36 x i8]* @clear_doc)
!1160 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 288, align: 8, elements: !1161)
!1161 = !{!1162}
!1162 = !DISubrange(count: 36)
!1163 = !DIGlobalVariable(name: "copy_doc", scope: !0, file: !352, line: 888, type: !1164, isLocal: true, isDefinition: true, variable: [34 x i8]* @copy_doc)
!1164 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 272, align: 8, elements: !1165)
!1165 = !{!1166}
!1166 = !DISubrange(count: 34)
!1167 = !DIGlobalVariable(name: "count_doc", scope: !0, file: !352, line: 675, type: !1168, isLocal: true, isDefinition: true, variable: [67 x i8]* @count_doc)
!1168 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 536, align: 8, elements: !1169)
!1169 = !{!1170}
!1170 = !DISubrange(count: 67)
!1171 = !DIGlobalVariable(name: "extend_doc", scope: !0, file: !352, line: 380, type: !1168, isLocal: true, isDefinition: true, variable: [67 x i8]* @extend_doc)
!1172 = !DIGlobalVariable(name: "extendleft_doc", scope: !0, file: !352, line: 441, type: !1173, isLocal: true, isDefinition: true, variable: [66 x i8]* @extendleft_doc)
!1173 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 528, align: 8, elements: !1174)
!1174 = !{!1175}
!1175 = !DISubrange(count: 66)
!1176 = !DIGlobalVariable(name: "pop_doc", scope: !0, file: !352, line: 215, type: !1177, isLocal: true, isDefinition: true, variable: [41 x i8]* @pop_doc)
!1177 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 328, align: 8, elements: !1178)
!1178 = !{!1179}
!1179 = !DISubrange(count: 41)
!1180 = !DIGlobalVariable(name: "popleft_doc", scope: !0, file: !352, line: 253, type: !1181, isLocal: true, isDefinition: true, variable: [40 x i8]* @popleft_doc)
!1181 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 320, align: 8, elements: !1182)
!1182 = !{!1183}
!1183 = !DISubrange(count: 40)
!1184 = !DIGlobalVariable(name: "PyId___dict__", scope: !788, file: !352, line: 894, type: !1124, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @deque_reduce.PyId___dict__)
!1185 = !DIGlobalVariable(name: "reduce_doc", scope: !0, file: !352, line: 920, type: !1186, isLocal: true, isDefinition: true, variable: [39 x i8]* @reduce_doc)
!1186 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 312, align: 8, elements: !1187)
!1187 = !{!1188}
!1188 = !DISubrange(count: 39)
!1189 = !DIGlobalVariable(name: "remove_doc", scope: !0, file: !352, line: 716, type: !1190, isLocal: true, isDefinition: true, variable: [53 x i8]* @remove_doc)
!1190 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 424, align: 8, elements: !1191)
!1191 = !{!1192}
!1192 = !DISubrange(count: 53)
!1193 = !DIGlobalVariable(name: "reversed_doc", scope: !0, file: !352, line: 1108, type: !1194, isLocal: true, isDefinition: true, variable: [61 x i8]* @reversed_doc)
!1194 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 488, align: 8, elements: !1195)
!1195 = !{!1196}
!1196 = !DISubrange(count: 61)
!1197 = !DIGlobalVariable(name: "reverse_doc", scope: !0, file: !352, line: 635, type: !1164, isLocal: true, isDefinition: true, variable: [34 x i8]* @reverse_doc)
!1198 = !DIGlobalVariable(name: "rotate_doc", scope: !0, file: !352, line: 593, type: !1199, isLocal: true, isDefinition: true, variable: [86 x i8]* @rotate_doc)
!1199 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 688, align: 8, elements: !1200)
!1200 = !{!1201}
!1201 = !DISubrange(count: 86)
!1202 = !DIGlobalVariable(name: "sizeof_doc", scope: !0, file: !352, line: 1073, type: !1203, isLocal: true, isDefinition: true, variable: [48 x i8]* @sizeof_doc)
!1203 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 384, align: 8, elements: !1204)
!1204 = !{!1205}
!1205 = !DISubrange(count: 48)
!1206 = !DIGlobalVariable(name: "deque_getset", scope: !0, file: !352, line: 1084, type: !1207, isLocal: true, isDefinition: true, variable: [2 x %struct.PyGetSetDef]* @deque_getset)
!1207 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1208, size: 640, align: 64, elements: !1121)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyGetSetDef", file: !301, line: 17, baseType: !300)
!1209 = !DIGlobalVariable(name: "defdict_type", scope: !0, file: !352, line: 1714, type: !878, isLocal: true, isDefinition: true, variable: %struct._typeobject* @defdict_type)
!1210 = !DIGlobalVariable(name: "defdict_doc", scope: !0, file: !352, line: 1701, type: !1211, isLocal: true, isDefinition: true, variable: [369 x i8]* @defdict_doc)
!1211 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 2952, align: 8, elements: !1212)
!1212 = !{!1213}
!1213 = !DISubrange(count: 369)
!1214 = !DIGlobalVariable(name: "defdict_methods", scope: !0, file: !352, line: 1593, type: !1215, isLocal: true, isDefinition: true, variable: [5 x %struct.PyMethodDef]* @defdict_methods)
!1215 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1110, size: 1280, align: 64, elements: !1216)
!1216 = !{!1217}
!1217 = !DISubrange(count: 5)
!1218 = !DIGlobalVariable(name: "defdict_missing_doc", scope: !0, file: !352, line: 1490, type: !1219, isLocal: true, isDefinition: true, variable: [190 x i8]* @defdict_missing_doc)
!1219 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 1520, align: 8, elements: !1220)
!1220 = !{!1221}
!1221 = !DISubrange(count: 190)
!1222 = !DIGlobalVariable(name: "defdict_copy_doc", scope: !0, file: !352, line: 1521, type: !1223, isLocal: true, isDefinition: true, variable: [33 x i8]* @defdict_copy_doc)
!1223 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 264, align: 8, elements: !1224)
!1224 = !{!1225}
!1225 = !DISubrange(count: 33)
!1226 = !DIGlobalVariable(name: "PyId_items", scope: !965, file: !352, line: 1566, type: !1124, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @defdict_reduce.PyId_items)
!1227 = !DIGlobalVariable(name: "defdict_members", scope: !0, file: !352, line: 1605, type: !1228, isLocal: true, isDefinition: true, variable: [2 x %struct.PyMemberDef]* @defdict_members)
!1228 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1229, size: 640, align: 64, elements: !1121)
!1229 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMemberDef", file: !291, line: 24, baseType: !290)
!1230 = !DIGlobalVariable(name: "dequeiter_type", scope: !0, file: !352, line: 1316, type: !878, isLocal: true, isDefinition: true, variable: %struct._typeobject* @dequeiter_type)
!1231 = !DIGlobalVariable(name: "dequeiter_methods", scope: !0, file: !352, line: 1310, type: !1232, isLocal: true, isDefinition: true, variable: [3 x %struct.PyMethodDef]* @dequeiter_methods)
!1232 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1110, size: 768, align: 64, elements: !867)
!1233 = !DIGlobalVariable(name: "length_hint_doc", scope: !0, file: !352, line: 1302, type: !1234, isLocal: true, isDefinition: true, variable: [55 x i8]* @length_hint_doc)
!1234 = !DICompositeType(tag: DW_TAG_array_type, baseType: !31, size: 440, align: 8, elements: !1235)
!1235 = !{!1236}
!1236 = !DISubrange(count: 55)
!1237 = !DIGlobalVariable(name: "dequereviter_type", scope: !0, file: !352, line: 1438, type: !878, isLocal: true, isDefinition: true, variable: %struct._typeobject* @dequereviter_type)
!1238 = !{i32 2, !"Dwarf Version", i32 4}
!1239 = !{i32 2, !"Debug Info Version", i32 3}
!1240 = !{!"clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)"}
!1241 = !DILocation(line: 1887, column: 5, scope: !412)
!1242 = !DIExpression()
!1243 = !DILocation(line: 1887, column: 15, scope: !412)
!1244 = !DILocation(line: 1889, column: 9, scope: !412)
!1245 = !DILocation(line: 1889, column: 7, scope: !412)
!1246 = !{!1247, !1247, i64 0}
!1247 = !{!"any pointer", !1248, i64 0}
!1248 = !{!"omnipotent char", !1249, i64 0}
!1249 = !{!"Simple C/C++ TBAA"}
!1250 = !DILocation(line: 1890, column: 9, scope: !1251)
!1251 = distinct !DILexicalBlock(scope: !412, file: !352, line: 1890, column: 9)
!1252 = !DILocation(line: 1890, column: 11, scope: !1251)
!1253 = !DILocation(line: 1890, column: 9, scope: !412)
!1254 = !DILocation(line: 1891, column: 9, scope: !1251)
!1255 = !DILocation(line: 1893, column: 9, scope: !1256)
!1256 = distinct !DILexicalBlock(scope: !412, file: !352, line: 1893, column: 9)
!1257 = !DILocation(line: 1893, column: 35, scope: !1256)
!1258 = !DILocation(line: 1893, column: 9, scope: !412)
!1259 = !DILocation(line: 1894, column: 9, scope: !1256)
!1260 = !DILocation(line: 1895, column: 45, scope: !412)
!1261 = !{!1262, !1263, i64 0}
!1262 = !{!"_object", !1263, i64 0, !1247, i64 8}
!1263 = !{!"long", !1248, i64 0}
!1264 = !DILocation(line: 1896, column: 24, scope: !412)
!1265 = !DILocation(line: 1896, column: 5, scope: !412)
!1266 = !DILocation(line: 1898, column: 26, scope: !412)
!1267 = !{!1268, !1247, i64 256}
!1268 = !{!"_typeobject", !1269, i64 0, !1247, i64 24, !1263, i64 32, !1263, i64 40, !1247, i64 48, !1247, i64 56, !1247, i64 64, !1247, i64 72, !1247, i64 80, !1247, i64 88, !1247, i64 96, !1247, i64 104, !1247, i64 112, !1247, i64 120, !1247, i64 128, !1247, i64 136, !1247, i64 144, !1247, i64 152, !1247, i64 160, !1263, i64 168, !1247, i64 176, !1247, i64 184, !1247, i64 192, !1247, i64 200, !1263, i64 208, !1247, i64 216, !1247, i64 224, !1247, i64 232, !1247, i64 240, !1247, i64 248, !1247, i64 256, !1247, i64 264, !1247, i64 272, !1247, i64 280, !1263, i64 288, !1247, i64 296, !1247, i64 304, !1247, i64 312, !1247, i64 320, !1247, i64 328, !1247, i64 336, !1247, i64 344, !1247, i64 352, !1247, i64 360, !1247, i64 368, !1247, i64 376, !1270, i64 384, !1247, i64 392}
!1269 = !{!"", !1262, i64 0, !1263, i64 16}
!1270 = !{!"int", !1248, i64 0}
!1271 = !DILocation(line: 1899, column: 9, scope: !1272)
!1272 = distinct !DILexicalBlock(scope: !412, file: !352, line: 1899, column: 9)
!1273 = !DILocation(line: 1899, column: 37, scope: !1272)
!1274 = !DILocation(line: 1899, column: 9, scope: !412)
!1275 = !DILocation(line: 1900, column: 9, scope: !1272)
!1276 = !DILocation(line: 1901, column: 47, scope: !412)
!1277 = !DILocation(line: 1902, column: 24, scope: !412)
!1278 = !DILocation(line: 1902, column: 5, scope: !412)
!1279 = !DILocation(line: 1904, column: 9, scope: !1280)
!1280 = distinct !DILexicalBlock(scope: !412, file: !352, line: 1904, column: 9)
!1281 = !DILocation(line: 1904, column: 39, scope: !1280)
!1282 = !DILocation(line: 1904, column: 9, scope: !412)
!1283 = !DILocation(line: 1905, column: 9, scope: !1280)
!1284 = !DILocation(line: 1906, column: 49, scope: !412)
!1285 = !DILocation(line: 1907, column: 24, scope: !412)
!1286 = !DILocation(line: 1907, column: 5, scope: !412)
!1287 = !DILocation(line: 1909, column: 9, scope: !1288)
!1288 = distinct !DILexicalBlock(scope: !412, file: !352, line: 1909, column: 9)
!1289 = !DILocation(line: 1909, column: 42, scope: !1288)
!1290 = !DILocation(line: 1909, column: 9, scope: !412)
!1291 = !DILocation(line: 1910, column: 9, scope: !1288)
!1292 = !DILocation(line: 1911, column: 52, scope: !412)
!1293 = !DILocation(line: 1912, column: 24, scope: !412)
!1294 = !DILocation(line: 1912, column: 5, scope: !412)
!1295 = !DILocation(line: 1914, column: 12, scope: !412)
!1296 = !DILocation(line: 1914, column: 5, scope: !412)
!1297 = !DILocation(line: 1915, column: 1, scope: !412)
!1298 = !DILocation(line: 1766, column: 27, scope: !417)
!1299 = !DILocation(line: 1766, column: 43, scope: !417)
!1300 = !DILocation(line: 1770, column: 5, scope: !417)
!1301 = !DILocation(line: 1770, column: 15, scope: !417)
!1302 = !DILocation(line: 1770, column: 20, scope: !417)
!1303 = !DILocation(line: 1770, column: 31, scope: !417)
!1304 = !DILocation(line: 1770, column: 41, scope: !417)
!1305 = !DILocation(line: 1771, column: 5, scope: !417)
!1306 = !DILocation(line: 1771, column: 15, scope: !417)
!1307 = !DILocation(line: 1772, column: 5, scope: !417)
!1308 = !DILocation(line: 1772, column: 15, scope: !417)
!1309 = !DILocation(line: 1773, column: 5, scope: !417)
!1310 = !DILocation(line: 1773, column: 15, scope: !417)
!1311 = !DILocation(line: 1774, column: 5, scope: !417)
!1312 = !DILocation(line: 1774, column: 15, scope: !417)
!1313 = !DILocation(line: 1775, column: 5, scope: !417)
!1314 = !DILocation(line: 1775, column: 15, scope: !417)
!1315 = !DILocation(line: 1776, column: 5, scope: !417)
!1316 = !DILocation(line: 1776, column: 15, scope: !417)
!1317 = !DILocation(line: 1777, column: 5, scope: !417)
!1318 = !DILocation(line: 1777, column: 15, scope: !417)
!1319 = !DILocation(line: 1778, column: 5, scope: !417)
!1320 = !DILocation(line: 1778, column: 15, scope: !417)
!1321 = !DILocation(line: 1779, column: 5, scope: !417)
!1322 = !DILocation(line: 1779, column: 15, scope: !417)
!1323 = !DILocation(line: 1781, column: 28, scope: !1324)
!1324 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1781, column: 9)
!1325 = !DILocation(line: 1781, column: 10, scope: !1324)
!1326 = !DILocation(line: 1781, column: 9, scope: !417)
!1327 = !DILocation(line: 1782, column: 9, scope: !1324)
!1328 = !DILocation(line: 1784, column: 27, scope: !417)
!1329 = !DILocation(line: 1784, column: 10, scope: !417)
!1330 = !DILocation(line: 1784, column: 8, scope: !417)
!1331 = !DILocation(line: 1785, column: 9, scope: !1332)
!1332 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1785, column: 9)
!1333 = !DILocation(line: 1785, column: 12, scope: !1332)
!1334 = !DILocation(line: 1785, column: 9, scope: !417)
!1335 = !DILocation(line: 1786, column: 9, scope: !1332)
!1336 = !DILocation(line: 1788, column: 11, scope: !417)
!1337 = !DILocation(line: 1788, column: 9, scope: !417)
!1338 = !DILocation(line: 1789, column: 9, scope: !1339)
!1339 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1789, column: 9)
!1340 = !DILocation(line: 1789, column: 13, scope: !1339)
!1341 = !DILocation(line: 1789, column: 9, scope: !417)
!1342 = !DILocation(line: 1790, column: 9, scope: !1339)
!1343 = !DILocation(line: 1795, column: 50, scope: !417)
!1344 = !DILocation(line: 1795, column: 61, scope: !417)
!1345 = !{!1262, !1247, i64 8}
!1346 = !DILocation(line: 1795, column: 19, scope: !417)
!1347 = !DILocation(line: 1795, column: 17, scope: !417)
!1348 = !DILocation(line: 1796, column: 16, scope: !417)
!1349 = !DILocation(line: 1796, column: 14, scope: !417)
!1350 = !DILocation(line: 1797, column: 54, scope: !417)
!1351 = !DILocation(line: 1797, column: 65, scope: !417)
!1352 = !DILocation(line: 1797, column: 23, scope: !417)
!1353 = !DILocation(line: 1797, column: 21, scope: !417)
!1354 = !DILocation(line: 1798, column: 20, scope: !417)
!1355 = !DILocation(line: 1798, column: 18, scope: !417)
!1356 = !DILocation(line: 1800, column: 9, scope: !440)
!1357 = !DILocation(line: 1800, column: 21, scope: !440)
!1358 = !DILocation(line: 1800, column: 35, scope: !440)
!1359 = !DILocation(line: 1800, column: 38, scope: !1360)
!1360 = !DILexicalBlockFile(scope: !440, file: !352, discriminator: 1)
!1361 = !DILocation(line: 1800, column: 53, scope: !440)
!1362 = !DILocation(line: 1800, column: 50, scope: !440)
!1363 = !DILocation(line: 1800, column: 62, scope: !440)
!1364 = !DILocation(line: 1801, column: 9, scope: !440)
!1365 = !DILocation(line: 1801, column: 25, scope: !440)
!1366 = !DILocation(line: 1801, column: 39, scope: !440)
!1367 = !DILocation(line: 1801, column: 42, scope: !1360)
!1368 = !DILocation(line: 1801, column: 61, scope: !440)
!1369 = !DILocation(line: 1801, column: 58, scope: !440)
!1370 = !DILocation(line: 1800, column: 9, scope: !417)
!1371 = !DILocation(line: 1802, column: 9, scope: !439)
!1372 = !DILocation(line: 1802, column: 9, scope: !1373)
!1373 = !DILexicalBlockFile(scope: !1374, file: !352, discriminator: 2)
!1374 = !DILexicalBlockFile(scope: !439, file: !352, discriminator: 1)
!1375 = !DILocation(line: 1803, column: 31, scope: !438)
!1376 = !DILocation(line: 1803, column: 19, scope: !438)
!1377 = !DILocation(line: 1803, column: 17, scope: !438)
!1378 = !DILocation(line: 1804, column: 17, scope: !1379)
!1379 = distinct !DILexicalBlock(scope: !438, file: !352, line: 1804, column: 17)
!1380 = !DILocation(line: 1804, column: 21, scope: !1379)
!1381 = !DILocation(line: 1804, column: 17, scope: !438)
!1382 = !DILocation(line: 1805, column: 17, scope: !1379)
!1383 = !DILocation(line: 1806, column: 37, scope: !438)
!1384 = !DILocation(line: 1806, column: 46, scope: !438)
!1385 = !DILocation(line: 1806, column: 22, scope: !438)
!1386 = !DILocation(line: 1806, column: 20, scope: !438)
!1387 = !DILocation(line: 1807, column: 17, scope: !437)
!1388 = !DILocation(line: 1807, column: 24, scope: !437)
!1389 = !DILocation(line: 1807, column: 17, scope: !438)
!1390 = !DILocation(line: 1808, column: 36, scope: !1391)
!1391 = distinct !DILexicalBlock(scope: !1392, file: !352, line: 1808, column: 21)
!1392 = distinct !DILexicalBlock(scope: !437, file: !352, line: 1807, column: 39)
!1393 = !DILocation(line: 1808, column: 45, scope: !1391)
!1394 = !DILocation(line: 1808, column: 50, scope: !1391)
!1395 = !DILocation(line: 1808, column: 21, scope: !1391)
!1396 = !DILocation(line: 1808, column: 55, scope: !1391)
!1397 = !DILocation(line: 1808, column: 21, scope: !1392)
!1398 = !DILocation(line: 1809, column: 21, scope: !1391)
!1399 = !DILocation(line: 1810, column: 13, scope: !1392)
!1400 = !DILocation(line: 1811, column: 39, scope: !436)
!1401 = !DILocation(line: 1811, column: 47, scope: !436)
!1402 = !DILocation(line: 1811, column: 26, scope: !436)
!1403 = !DILocation(line: 1811, column: 24, scope: !436)
!1404 = !DILocation(line: 1812, column: 21, scope: !1405)
!1405 = distinct !DILexicalBlock(scope: !436, file: !352, line: 1812, column: 21)
!1406 = !DILocation(line: 1812, column: 28, scope: !1405)
!1407 = !DILocation(line: 1812, column: 21, scope: !436)
!1408 = !DILocation(line: 1813, column: 21, scope: !1405)
!1409 = !DILocation(line: 1814, column: 36, scope: !1410)
!1410 = distinct !DILexicalBlock(scope: !436, file: !352, line: 1814, column: 21)
!1411 = !DILocation(line: 1814, column: 45, scope: !1410)
!1412 = !DILocation(line: 1814, column: 50, scope: !1410)
!1413 = !DILocation(line: 1814, column: 21, scope: !1410)
!1414 = !DILocation(line: 1814, column: 58, scope: !1410)
!1415 = !DILocation(line: 1814, column: 21, scope: !436)
!1416 = !DILocation(line: 1815, column: 21, scope: !1410)
!1417 = !DILocation(line: 1816, column: 17, scope: !436)
!1418 = !DILocation(line: 1816, column: 22, scope: !1419)
!1419 = !DILexicalBlockFile(scope: !435, file: !352, discriminator: 1)
!1420 = !DILocation(line: 1816, column: 32, scope: !435)
!1421 = !DILocation(line: 1816, column: 55, scope: !435)
!1422 = !DILocation(line: 1816, column: 68, scope: !444)
!1423 = !DILocation(line: 1816, column: 76, scope: !444)
!1424 = !DILocation(line: 1816, column: 68, scope: !435)
!1425 = !DILocation(line: 1816, column: 102, scope: !1426)
!1426 = !DILexicalBlockFile(scope: !443, file: !352, discriminator: 2)
!1427 = !DILocation(line: 1816, column: 116, scope: !443)
!1428 = !DILocation(line: 1816, column: 121, scope: !1429)
!1429 = !DILexicalBlockFile(scope: !442, file: !352, discriminator: 4)
!1430 = !DILocation(line: 1816, column: 131, scope: !442)
!1431 = !DILocation(line: 1816, column: 161, scope: !442)
!1432 = !DILocation(line: 1816, column: 179, scope: !1433)
!1433 = distinct !DILexicalBlock(scope: !442, file: !352, line: 1816, column: 176)
!1434 = !DILocation(line: 1816, column: 196, scope: !1433)
!1435 = !DILocation(line: 1816, column: 176, scope: !1433)
!1436 = !DILocation(line: 1816, column: 206, scope: !1433)
!1437 = !DILocation(line: 1816, column: 176, scope: !442)
!1438 = !DILocation(line: 1816, column: 176, scope: !1439)
!1439 = !DILexicalBlockFile(scope: !442, file: !352, discriminator: 5)
!1440 = !DILocation(line: 1816, column: 237, scope: !1441)
!1441 = !DILexicalBlockFile(scope: !1433, file: !352, discriminator: 6)
!1442 = !DILocation(line: 1816, column: 255, scope: !1433)
!1443 = !DILocation(line: 1816, column: 265, scope: !1433)
!1444 = !{!1268, !1247, i64 48}
!1445 = !DILocation(line: 1816, column: 290, scope: !1433)
!1446 = !DILocation(line: 1816, column: 221, scope: !1433)
!1447 = !DILocation(line: 1816, column: 309, scope: !1448)
!1448 = !DILexicalBlockFile(scope: !443, file: !352, discriminator: 7)
!1449 = !DILocation(line: 1816, column: 309, scope: !442)
!1450 = !DILocation(line: 1816, column: 309, scope: !1451)
!1451 = !DILexicalBlockFile(scope: !442, file: !352, discriminator: 8)
!1452 = !DILocation(line: 1816, column: 322, scope: !1453)
!1453 = !DILexicalBlockFile(scope: !443, file: !352, discriminator: 9)
!1454 = !DILocation(line: 1816, column: 324, scope: !1455)
!1455 = !DILexicalBlockFile(scope: !1456, file: !352, discriminator: 10)
!1456 = !DILexicalBlockFile(scope: !436, file: !352, discriminator: 3)
!1457 = !DILocation(line: 1816, column: 324, scope: !435)
!1458 = !DILocation(line: 1816, column: 324, scope: !1459)
!1459 = !DILexicalBlockFile(scope: !435, file: !352, discriminator: 11)
!1460 = !DILocation(line: 1818, column: 13, scope: !438)
!1461 = !DILocation(line: 1818, column: 18, scope: !1462)
!1462 = !DILexicalBlockFile(scope: !446, file: !352, discriminator: 1)
!1463 = !DILocation(line: 1818, column: 28, scope: !446)
!1464 = !DILocation(line: 1818, column: 58, scope: !446)
!1465 = !DILocation(line: 1818, column: 72, scope: !1466)
!1466 = distinct !DILexicalBlock(scope: !446, file: !352, line: 1818, column: 69)
!1467 = !DILocation(line: 1818, column: 89, scope: !1466)
!1468 = !DILocation(line: 1818, column: 69, scope: !1466)
!1469 = !DILocation(line: 1818, column: 99, scope: !1466)
!1470 = !DILocation(line: 1818, column: 69, scope: !446)
!1471 = !DILocation(line: 1818, column: 69, scope: !1472)
!1472 = !DILexicalBlockFile(scope: !446, file: !352, discriminator: 2)
!1473 = !DILocation(line: 1818, column: 130, scope: !1474)
!1474 = !DILexicalBlockFile(scope: !1466, file: !352, discriminator: 3)
!1475 = !DILocation(line: 1818, column: 148, scope: !1466)
!1476 = !DILocation(line: 1818, column: 158, scope: !1466)
!1477 = !DILocation(line: 1818, column: 183, scope: !1466)
!1478 = !DILocation(line: 1818, column: 114, scope: !1466)
!1479 = !DILocation(line: 1818, column: 202, scope: !1480)
!1480 = !DILexicalBlockFile(scope: !438, file: !352, discriminator: 4)
!1481 = !DILocation(line: 1818, column: 202, scope: !446)
!1482 = !DILocation(line: 1818, column: 202, scope: !1483)
!1483 = !DILexicalBlockFile(scope: !446, file: !352, discriminator: 5)
!1484 = !DILocation(line: 1820, column: 5, scope: !439)
!1485 = !DILocation(line: 1821, column: 41, scope: !450)
!1486 = !DILocation(line: 1821, column: 21, scope: !450)
!1487 = !DILocation(line: 1821, column: 19, scope: !450)
!1488 = !DILocation(line: 1822, column: 13, scope: !1489)
!1489 = distinct !DILexicalBlock(scope: !450, file: !352, line: 1822, column: 13)
!1490 = !DILocation(line: 1822, column: 23, scope: !1489)
!1491 = !DILocation(line: 1822, column: 13, scope: !450)
!1492 = !DILocation(line: 1823, column: 13, scope: !1489)
!1493 = !DILocation(line: 1825, column: 16, scope: !450)
!1494 = !DILocation(line: 1825, column: 14, scope: !450)
!1495 = !DILocation(line: 1826, column: 13, scope: !1496)
!1496 = distinct !DILexicalBlock(scope: !450, file: !352, line: 1826, column: 13)
!1497 = !DILocation(line: 1826, column: 18, scope: !1496)
!1498 = !DILocation(line: 1826, column: 13, scope: !450)
!1499 = !DILocation(line: 1827, column: 13, scope: !1496)
!1500 = !DILocation(line: 1829, column: 9, scope: !450)
!1501 = !DILocation(line: 1829, column: 9, scope: !1502)
!1502 = !DILexicalBlockFile(scope: !1503, file: !352, discriminator: 2)
!1503 = !DILexicalBlockFile(scope: !450, file: !352, discriminator: 1)
!1504 = !DILocation(line: 1830, column: 31, scope: !449)
!1505 = !DILocation(line: 1830, column: 19, scope: !449)
!1506 = !DILocation(line: 1830, column: 17, scope: !449)
!1507 = !DILocation(line: 1831, column: 17, scope: !1508)
!1508 = distinct !DILexicalBlock(scope: !449, file: !352, line: 1831, column: 17)
!1509 = !DILocation(line: 1831, column: 21, scope: !1508)
!1510 = !DILocation(line: 1831, column: 17, scope: !449)
!1511 = !DILocation(line: 1832, column: 17, scope: !1508)
!1512 = !DILocation(line: 1833, column: 51, scope: !449)
!1513 = !DILocation(line: 1833, column: 62, scope: !449)
!1514 = !DILocation(line: 1833, column: 67, scope: !449)
!1515 = !DILocation(line: 1833, column: 22, scope: !449)
!1516 = !DILocation(line: 1833, column: 20, scope: !449)
!1517 = !DILocation(line: 1834, column: 17, scope: !1518)
!1518 = distinct !DILexicalBlock(scope: !449, file: !352, line: 1834, column: 17)
!1519 = !DILocation(line: 1834, column: 24, scope: !1518)
!1520 = !DILocation(line: 1834, column: 17, scope: !449)
!1521 = !DILocation(line: 1835, column: 17, scope: !1518)
!1522 = !DILocation(line: 1836, column: 35, scope: !449)
!1523 = !DILocation(line: 1836, column: 43, scope: !449)
!1524 = !DILocation(line: 1836, column: 22, scope: !449)
!1525 = !DILocation(line: 1836, column: 20, scope: !449)
!1526 = !DILocation(line: 1837, column: 13, scope: !449)
!1527 = !DILocation(line: 1837, column: 18, scope: !1528)
!1528 = !DILexicalBlockFile(scope: !448, file: !352, discriminator: 1)
!1529 = !DILocation(line: 1837, column: 28, scope: !448)
!1530 = !DILocation(line: 1837, column: 58, scope: !448)
!1531 = !DILocation(line: 1837, column: 75, scope: !1532)
!1532 = distinct !DILexicalBlock(scope: !448, file: !352, line: 1837, column: 72)
!1533 = !DILocation(line: 1837, column: 92, scope: !1532)
!1534 = !DILocation(line: 1837, column: 72, scope: !1532)
!1535 = !DILocation(line: 1837, column: 102, scope: !1532)
!1536 = !DILocation(line: 1837, column: 72, scope: !448)
!1537 = !DILocation(line: 1837, column: 72, scope: !1538)
!1538 = !DILexicalBlockFile(scope: !448, file: !352, discriminator: 2)
!1539 = !DILocation(line: 1837, column: 133, scope: !1540)
!1540 = !DILexicalBlockFile(scope: !1532, file: !352, discriminator: 3)
!1541 = !DILocation(line: 1837, column: 151, scope: !1532)
!1542 = !DILocation(line: 1837, column: 161, scope: !1532)
!1543 = !DILocation(line: 1837, column: 186, scope: !1532)
!1544 = !DILocation(line: 1837, column: 117, scope: !1532)
!1545 = !DILocation(line: 1837, column: 205, scope: !1546)
!1546 = !DILexicalBlockFile(scope: !449, file: !352, discriminator: 4)
!1547 = !DILocation(line: 1837, column: 205, scope: !448)
!1548 = !DILocation(line: 1837, column: 205, scope: !1549)
!1549 = !DILexicalBlockFile(scope: !448, file: !352, discriminator: 5)
!1550 = !DILocation(line: 1838, column: 17, scope: !1551)
!1551 = distinct !DILexicalBlock(scope: !449, file: !352, line: 1838, column: 17)
!1552 = !DILocation(line: 1838, column: 24, scope: !1551)
!1553 = !DILocation(line: 1838, column: 17, scope: !449)
!1554 = !DILocation(line: 1839, column: 17, scope: !1551)
!1555 = !DILocation(line: 1840, column: 34, scope: !1556)
!1556 = distinct !DILexicalBlock(scope: !449, file: !352, line: 1840, column: 17)
!1557 = !DILocation(line: 1840, column: 43, scope: !1556)
!1558 = !DILocation(line: 1840, column: 48, scope: !1556)
!1559 = !DILocation(line: 1840, column: 17, scope: !1556)
!1560 = !DILocation(line: 1840, column: 56, scope: !1556)
!1561 = !DILocation(line: 1840, column: 17, scope: !449)
!1562 = !DILocation(line: 1841, column: 17, scope: !1556)
!1563 = !DILocation(line: 1842, column: 13, scope: !449)
!1564 = !DILocation(line: 1842, column: 18, scope: !1565)
!1565 = !DILexicalBlockFile(scope: !452, file: !352, discriminator: 1)
!1566 = !DILocation(line: 1842, column: 28, scope: !452)
!1567 = !DILocation(line: 1842, column: 51, scope: !452)
!1568 = !DILocation(line: 1842, column: 64, scope: !456)
!1569 = !DILocation(line: 1842, column: 72, scope: !456)
!1570 = !DILocation(line: 1842, column: 64, scope: !452)
!1571 = !DILocation(line: 1842, column: 98, scope: !1572)
!1572 = !DILexicalBlockFile(scope: !455, file: !352, discriminator: 2)
!1573 = !DILocation(line: 1842, column: 112, scope: !455)
!1574 = !DILocation(line: 1842, column: 117, scope: !1575)
!1575 = !DILexicalBlockFile(scope: !454, file: !352, discriminator: 4)
!1576 = !DILocation(line: 1842, column: 127, scope: !454)
!1577 = !DILocation(line: 1842, column: 157, scope: !454)
!1578 = !DILocation(line: 1842, column: 175, scope: !1579)
!1579 = distinct !DILexicalBlock(scope: !454, file: !352, line: 1842, column: 172)
!1580 = !DILocation(line: 1842, column: 192, scope: !1579)
!1581 = !DILocation(line: 1842, column: 172, scope: !1579)
!1582 = !DILocation(line: 1842, column: 202, scope: !1579)
!1583 = !DILocation(line: 1842, column: 172, scope: !454)
!1584 = !DILocation(line: 1842, column: 172, scope: !1585)
!1585 = !DILexicalBlockFile(scope: !454, file: !352, discriminator: 5)
!1586 = !DILocation(line: 1842, column: 233, scope: !1587)
!1587 = !DILexicalBlockFile(scope: !1579, file: !352, discriminator: 6)
!1588 = !DILocation(line: 1842, column: 251, scope: !1579)
!1589 = !DILocation(line: 1842, column: 261, scope: !1579)
!1590 = !DILocation(line: 1842, column: 286, scope: !1579)
!1591 = !DILocation(line: 1842, column: 217, scope: !1579)
!1592 = !DILocation(line: 1842, column: 305, scope: !1593)
!1593 = !DILexicalBlockFile(scope: !455, file: !352, discriminator: 7)
!1594 = !DILocation(line: 1842, column: 305, scope: !454)
!1595 = !DILocation(line: 1842, column: 305, scope: !1596)
!1596 = !DILexicalBlockFile(scope: !454, file: !352, discriminator: 8)
!1597 = !DILocation(line: 1842, column: 318, scope: !1598)
!1598 = !DILexicalBlockFile(scope: !455, file: !352, discriminator: 9)
!1599 = !DILocation(line: 1842, column: 320, scope: !1600)
!1600 = !DILexicalBlockFile(scope: !1601, file: !352, discriminator: 10)
!1601 = !DILexicalBlockFile(scope: !449, file: !352, discriminator: 3)
!1602 = !DILocation(line: 1842, column: 320, scope: !452)
!1603 = !DILocation(line: 1842, column: 320, scope: !1604)
!1604 = !DILexicalBlockFile(scope: !452, file: !352, discriminator: 11)
!1605 = !DILocation(line: 1843, column: 13, scope: !449)
!1606 = !DILocation(line: 1843, column: 18, scope: !1607)
!1607 = !DILexicalBlockFile(scope: !458, file: !352, discriminator: 1)
!1608 = !DILocation(line: 1843, column: 28, scope: !458)
!1609 = !DILocation(line: 1843, column: 58, scope: !458)
!1610 = !DILocation(line: 1843, column: 72, scope: !1611)
!1611 = distinct !DILexicalBlock(scope: !458, file: !352, line: 1843, column: 69)
!1612 = !DILocation(line: 1843, column: 89, scope: !1611)
!1613 = !DILocation(line: 1843, column: 69, scope: !1611)
!1614 = !DILocation(line: 1843, column: 99, scope: !1611)
!1615 = !DILocation(line: 1843, column: 69, scope: !458)
!1616 = !DILocation(line: 1843, column: 69, scope: !1617)
!1617 = !DILexicalBlockFile(scope: !458, file: !352, discriminator: 2)
!1618 = !DILocation(line: 1843, column: 130, scope: !1619)
!1619 = !DILexicalBlockFile(scope: !1611, file: !352, discriminator: 3)
!1620 = !DILocation(line: 1843, column: 148, scope: !1611)
!1621 = !DILocation(line: 1843, column: 158, scope: !1611)
!1622 = !DILocation(line: 1843, column: 183, scope: !1611)
!1623 = !DILocation(line: 1843, column: 114, scope: !1611)
!1624 = !DILocation(line: 1843, column: 202, scope: !1546)
!1625 = !DILocation(line: 1843, column: 202, scope: !458)
!1626 = !DILocation(line: 1843, column: 202, scope: !1627)
!1627 = !DILexicalBlockFile(scope: !458, file: !352, discriminator: 5)
!1628 = !DILocation(line: 1848, column: 5, scope: !417)
!1629 = !DILocation(line: 1848, column: 10, scope: !1630)
!1630 = !DILexicalBlockFile(scope: !460, file: !352, discriminator: 1)
!1631 = !DILocation(line: 1848, column: 20, scope: !460)
!1632 = !DILocation(line: 1848, column: 50, scope: !460)
!1633 = !DILocation(line: 1848, column: 63, scope: !1634)
!1634 = distinct !DILexicalBlock(scope: !460, file: !352, line: 1848, column: 60)
!1635 = !DILocation(line: 1848, column: 80, scope: !1634)
!1636 = !DILocation(line: 1848, column: 60, scope: !1634)
!1637 = !DILocation(line: 1848, column: 90, scope: !1634)
!1638 = !DILocation(line: 1848, column: 60, scope: !460)
!1639 = !DILocation(line: 1848, column: 60, scope: !1640)
!1640 = !DILexicalBlockFile(scope: !460, file: !352, discriminator: 2)
!1641 = !DILocation(line: 1848, column: 121, scope: !1642)
!1642 = !DILexicalBlockFile(scope: !1634, file: !352, discriminator: 3)
!1643 = !DILocation(line: 1848, column: 139, scope: !1634)
!1644 = !DILocation(line: 1848, column: 149, scope: !1634)
!1645 = !DILocation(line: 1848, column: 174, scope: !1634)
!1646 = !DILocation(line: 1848, column: 105, scope: !1634)
!1647 = !DILocation(line: 1848, column: 193, scope: !1648)
!1648 = !DILexicalBlockFile(scope: !417, file: !352, discriminator: 4)
!1649 = !DILocation(line: 1848, column: 193, scope: !460)
!1650 = !DILocation(line: 1848, column: 193, scope: !1651)
!1651 = !DILexicalBlockFile(scope: !460, file: !352, discriminator: 5)
!1652 = !DILocation(line: 1849, column: 5, scope: !417)
!1653 = !DILocation(line: 1849, column: 10, scope: !1654)
!1654 = !DILexicalBlockFile(scope: !462, file: !352, discriminator: 1)
!1655 = !DILocation(line: 1849, column: 20, scope: !462)
!1656 = !DILocation(line: 1849, column: 51, scope: !462)
!1657 = !DILocation(line: 1849, column: 61, scope: !465)
!1658 = !DILocation(line: 1849, column: 77, scope: !465)
!1659 = !DILocation(line: 1849, column: 61, scope: !462)
!1660 = !DILocation(line: 1849, column: 92, scope: !1661)
!1661 = !DILexicalBlockFile(scope: !465, file: !352, discriminator: 2)
!1662 = !DILocation(line: 1849, column: 97, scope: !1663)
!1663 = !DILexicalBlockFile(scope: !464, file: !352, discriminator: 4)
!1664 = !DILocation(line: 1849, column: 107, scope: !464)
!1665 = !DILocation(line: 1849, column: 137, scope: !464)
!1666 = !DILocation(line: 1849, column: 163, scope: !1667)
!1667 = distinct !DILexicalBlock(scope: !464, file: !352, line: 1849, column: 160)
!1668 = !DILocation(line: 1849, column: 180, scope: !1667)
!1669 = !DILocation(line: 1849, column: 160, scope: !1667)
!1670 = !DILocation(line: 1849, column: 190, scope: !1667)
!1671 = !DILocation(line: 1849, column: 160, scope: !464)
!1672 = !DILocation(line: 1849, column: 160, scope: !1673)
!1673 = !DILexicalBlockFile(scope: !464, file: !352, discriminator: 5)
!1674 = !DILocation(line: 1849, column: 221, scope: !1675)
!1675 = !DILexicalBlockFile(scope: !1667, file: !352, discriminator: 6)
!1676 = !DILocation(line: 1849, column: 239, scope: !1667)
!1677 = !DILocation(line: 1849, column: 249, scope: !1667)
!1678 = !DILocation(line: 1849, column: 274, scope: !1667)
!1679 = !DILocation(line: 1849, column: 205, scope: !1667)
!1680 = !DILocation(line: 1849, column: 293, scope: !1681)
!1681 = !DILexicalBlockFile(scope: !465, file: !352, discriminator: 7)
!1682 = !DILocation(line: 1849, column: 293, scope: !464)
!1683 = !DILocation(line: 1849, column: 293, scope: !1684)
!1684 = !DILexicalBlockFile(scope: !464, file: !352, discriminator: 8)
!1685 = !DILocation(line: 1849, column: 293, scope: !1686)
!1686 = !DILexicalBlockFile(scope: !464, file: !352, discriminator: 9)
!1687 = !DILocation(line: 1849, column: 306, scope: !1688)
!1688 = !DILexicalBlockFile(scope: !1689, file: !352, discriminator: 10)
!1689 = !DILexicalBlockFile(scope: !417, file: !352, discriminator: 3)
!1690 = !DILocation(line: 1849, column: 306, scope: !462)
!1691 = !DILocation(line: 1849, column: 306, scope: !1692)
!1692 = !DILexicalBlockFile(scope: !462, file: !352, discriminator: 11)
!1693 = !DILocation(line: 1850, column: 5, scope: !417)
!1694 = !DILocation(line: 1850, column: 10, scope: !1695)
!1695 = !DILexicalBlockFile(scope: !467, file: !352, discriminator: 1)
!1696 = !DILocation(line: 1850, column: 20, scope: !467)
!1697 = !DILocation(line: 1850, column: 51, scope: !467)
!1698 = !DILocation(line: 1850, column: 64, scope: !470)
!1699 = !DILocation(line: 1850, column: 80, scope: !470)
!1700 = !DILocation(line: 1850, column: 64, scope: !467)
!1701 = !DILocation(line: 1850, column: 95, scope: !1702)
!1702 = !DILexicalBlockFile(scope: !470, file: !352, discriminator: 2)
!1703 = !DILocation(line: 1850, column: 100, scope: !1704)
!1704 = !DILexicalBlockFile(scope: !469, file: !352, discriminator: 4)
!1705 = !DILocation(line: 1850, column: 110, scope: !469)
!1706 = !DILocation(line: 1850, column: 140, scope: !469)
!1707 = !DILocation(line: 1850, column: 166, scope: !1708)
!1708 = distinct !DILexicalBlock(scope: !469, file: !352, line: 1850, column: 163)
!1709 = !DILocation(line: 1850, column: 183, scope: !1708)
!1710 = !DILocation(line: 1850, column: 163, scope: !1708)
!1711 = !DILocation(line: 1850, column: 193, scope: !1708)
!1712 = !DILocation(line: 1850, column: 163, scope: !469)
!1713 = !DILocation(line: 1850, column: 163, scope: !1714)
!1714 = !DILexicalBlockFile(scope: !469, file: !352, discriminator: 5)
!1715 = !DILocation(line: 1850, column: 224, scope: !1716)
!1716 = !DILexicalBlockFile(scope: !1708, file: !352, discriminator: 6)
!1717 = !DILocation(line: 1850, column: 242, scope: !1708)
!1718 = !DILocation(line: 1850, column: 252, scope: !1708)
!1719 = !DILocation(line: 1850, column: 277, scope: !1708)
!1720 = !DILocation(line: 1850, column: 208, scope: !1708)
!1721 = !DILocation(line: 1850, column: 296, scope: !1722)
!1722 = !DILexicalBlockFile(scope: !470, file: !352, discriminator: 7)
!1723 = !DILocation(line: 1850, column: 296, scope: !469)
!1724 = !DILocation(line: 1850, column: 296, scope: !1725)
!1725 = !DILexicalBlockFile(scope: !469, file: !352, discriminator: 8)
!1726 = !DILocation(line: 1850, column: 296, scope: !1727)
!1727 = !DILexicalBlockFile(scope: !469, file: !352, discriminator: 9)
!1728 = !DILocation(line: 1850, column: 309, scope: !1688)
!1729 = !DILocation(line: 1850, column: 309, scope: !467)
!1730 = !DILocation(line: 1850, column: 309, scope: !1731)
!1731 = !DILexicalBlockFile(scope: !467, file: !352, discriminator: 11)
!1732 = !DILocation(line: 1851, column: 5, scope: !417)
!1733 = !DILocation(line: 1851, column: 10, scope: !1734)
!1734 = !DILexicalBlockFile(scope: !472, file: !352, discriminator: 1)
!1735 = !DILocation(line: 1851, column: 20, scope: !472)
!1736 = !DILocation(line: 1851, column: 51, scope: !472)
!1737 = !DILocation(line: 1851, column: 67, scope: !475)
!1738 = !DILocation(line: 1851, column: 83, scope: !475)
!1739 = !DILocation(line: 1851, column: 67, scope: !472)
!1740 = !DILocation(line: 1851, column: 98, scope: !1741)
!1741 = !DILexicalBlockFile(scope: !475, file: !352, discriminator: 2)
!1742 = !DILocation(line: 1851, column: 103, scope: !1743)
!1743 = !DILexicalBlockFile(scope: !474, file: !352, discriminator: 4)
!1744 = !DILocation(line: 1851, column: 113, scope: !474)
!1745 = !DILocation(line: 1851, column: 143, scope: !474)
!1746 = !DILocation(line: 1851, column: 169, scope: !1747)
!1747 = distinct !DILexicalBlock(scope: !474, file: !352, line: 1851, column: 166)
!1748 = !DILocation(line: 1851, column: 186, scope: !1747)
!1749 = !DILocation(line: 1851, column: 166, scope: !1747)
!1750 = !DILocation(line: 1851, column: 196, scope: !1747)
!1751 = !DILocation(line: 1851, column: 166, scope: !474)
!1752 = !DILocation(line: 1851, column: 166, scope: !1753)
!1753 = !DILexicalBlockFile(scope: !474, file: !352, discriminator: 5)
!1754 = !DILocation(line: 1851, column: 227, scope: !1755)
!1755 = !DILexicalBlockFile(scope: !1747, file: !352, discriminator: 6)
!1756 = !DILocation(line: 1851, column: 245, scope: !1747)
!1757 = !DILocation(line: 1851, column: 255, scope: !1747)
!1758 = !DILocation(line: 1851, column: 280, scope: !1747)
!1759 = !DILocation(line: 1851, column: 211, scope: !1747)
!1760 = !DILocation(line: 1851, column: 299, scope: !1761)
!1761 = !DILexicalBlockFile(scope: !475, file: !352, discriminator: 7)
!1762 = !DILocation(line: 1851, column: 299, scope: !474)
!1763 = !DILocation(line: 1851, column: 299, scope: !1764)
!1764 = !DILexicalBlockFile(scope: !474, file: !352, discriminator: 8)
!1765 = !DILocation(line: 1851, column: 299, scope: !1766)
!1766 = !DILexicalBlockFile(scope: !474, file: !352, discriminator: 9)
!1767 = !DILocation(line: 1851, column: 312, scope: !1688)
!1768 = !DILocation(line: 1851, column: 312, scope: !472)
!1769 = !DILocation(line: 1851, column: 312, scope: !1770)
!1770 = !DILexicalBlockFile(scope: !472, file: !352, discriminator: 11)
!1771 = !DILocation(line: 1852, column: 5, scope: !417)
!1772 = !DILocation(line: 1852, column: 10, scope: !1773)
!1773 = !DILexicalBlockFile(scope: !477, file: !352, discriminator: 1)
!1774 = !DILocation(line: 1852, column: 20, scope: !477)
!1775 = !DILocation(line: 1852, column: 51, scope: !477)
!1776 = !DILocation(line: 1852, column: 62, scope: !480)
!1777 = !DILocation(line: 1852, column: 78, scope: !480)
!1778 = !DILocation(line: 1852, column: 62, scope: !477)
!1779 = !DILocation(line: 1852, column: 93, scope: !1780)
!1780 = !DILexicalBlockFile(scope: !480, file: !352, discriminator: 2)
!1781 = !DILocation(line: 1852, column: 98, scope: !1782)
!1782 = !DILexicalBlockFile(scope: !479, file: !352, discriminator: 4)
!1783 = !DILocation(line: 1852, column: 108, scope: !479)
!1784 = !DILocation(line: 1852, column: 138, scope: !479)
!1785 = !DILocation(line: 1852, column: 164, scope: !1786)
!1786 = distinct !DILexicalBlock(scope: !479, file: !352, line: 1852, column: 161)
!1787 = !DILocation(line: 1852, column: 181, scope: !1786)
!1788 = !DILocation(line: 1852, column: 161, scope: !1786)
!1789 = !DILocation(line: 1852, column: 191, scope: !1786)
!1790 = !DILocation(line: 1852, column: 161, scope: !479)
!1791 = !DILocation(line: 1852, column: 161, scope: !1792)
!1792 = !DILexicalBlockFile(scope: !479, file: !352, discriminator: 5)
!1793 = !DILocation(line: 1852, column: 222, scope: !1794)
!1794 = !DILexicalBlockFile(scope: !1786, file: !352, discriminator: 6)
!1795 = !DILocation(line: 1852, column: 240, scope: !1786)
!1796 = !DILocation(line: 1852, column: 250, scope: !1786)
!1797 = !DILocation(line: 1852, column: 275, scope: !1786)
!1798 = !DILocation(line: 1852, column: 206, scope: !1786)
!1799 = !DILocation(line: 1852, column: 294, scope: !1800)
!1800 = !DILexicalBlockFile(scope: !480, file: !352, discriminator: 7)
!1801 = !DILocation(line: 1852, column: 294, scope: !479)
!1802 = !DILocation(line: 1852, column: 294, scope: !1803)
!1803 = !DILexicalBlockFile(scope: !479, file: !352, discriminator: 8)
!1804 = !DILocation(line: 1852, column: 294, scope: !1805)
!1805 = !DILexicalBlockFile(scope: !479, file: !352, discriminator: 9)
!1806 = !DILocation(line: 1852, column: 307, scope: !1688)
!1807 = !DILocation(line: 1852, column: 307, scope: !477)
!1808 = !DILocation(line: 1852, column: 307, scope: !1809)
!1809 = !DILexicalBlockFile(scope: !477, file: !352, discriminator: 11)
!1810 = !DILocation(line: 1853, column: 5, scope: !417)
!1811 = !DILocation(line: 1853, column: 10, scope: !1812)
!1812 = !DILexicalBlockFile(scope: !482, file: !352, discriminator: 1)
!1813 = !DILocation(line: 1853, column: 20, scope: !482)
!1814 = !DILocation(line: 1853, column: 51, scope: !482)
!1815 = !DILocation(line: 1853, column: 61, scope: !485)
!1816 = !DILocation(line: 1853, column: 77, scope: !485)
!1817 = !DILocation(line: 1853, column: 61, scope: !482)
!1818 = !DILocation(line: 1853, column: 92, scope: !1819)
!1819 = !DILexicalBlockFile(scope: !485, file: !352, discriminator: 2)
!1820 = !DILocation(line: 1853, column: 97, scope: !1821)
!1821 = !DILexicalBlockFile(scope: !484, file: !352, discriminator: 4)
!1822 = !DILocation(line: 1853, column: 107, scope: !484)
!1823 = !DILocation(line: 1853, column: 137, scope: !484)
!1824 = !DILocation(line: 1853, column: 163, scope: !1825)
!1825 = distinct !DILexicalBlock(scope: !484, file: !352, line: 1853, column: 160)
!1826 = !DILocation(line: 1853, column: 180, scope: !1825)
!1827 = !DILocation(line: 1853, column: 160, scope: !1825)
!1828 = !DILocation(line: 1853, column: 190, scope: !1825)
!1829 = !DILocation(line: 1853, column: 160, scope: !484)
!1830 = !DILocation(line: 1853, column: 160, scope: !1831)
!1831 = !DILexicalBlockFile(scope: !484, file: !352, discriminator: 5)
!1832 = !DILocation(line: 1853, column: 221, scope: !1833)
!1833 = !DILexicalBlockFile(scope: !1825, file: !352, discriminator: 6)
!1834 = !DILocation(line: 1853, column: 239, scope: !1825)
!1835 = !DILocation(line: 1853, column: 249, scope: !1825)
!1836 = !DILocation(line: 1853, column: 274, scope: !1825)
!1837 = !DILocation(line: 1853, column: 205, scope: !1825)
!1838 = !DILocation(line: 1853, column: 293, scope: !1839)
!1839 = !DILexicalBlockFile(scope: !485, file: !352, discriminator: 7)
!1840 = !DILocation(line: 1853, column: 293, scope: !484)
!1841 = !DILocation(line: 1853, column: 293, scope: !1842)
!1842 = !DILexicalBlockFile(scope: !484, file: !352, discriminator: 8)
!1843 = !DILocation(line: 1853, column: 293, scope: !1844)
!1844 = !DILexicalBlockFile(scope: !484, file: !352, discriminator: 9)
!1845 = !DILocation(line: 1853, column: 306, scope: !1688)
!1846 = !DILocation(line: 1853, column: 306, scope: !482)
!1847 = !DILocation(line: 1853, column: 306, scope: !1848)
!1848 = !DILexicalBlockFile(scope: !482, file: !352, discriminator: 11)
!1849 = !DILocation(line: 1854, column: 9, scope: !1850)
!1850 = distinct !DILexicalBlock(scope: !417, file: !352, line: 1854, column: 9)
!1851 = !DILocation(line: 1854, column: 9, scope: !417)
!1852 = !DILocation(line: 1855, column: 9, scope: !1850)
!1853 = !DILocation(line: 1856, column: 58, scope: !417)
!1854 = !DILocation(line: 1856, column: 5, scope: !417)
!1855 = !DILocation(line: 1857, column: 1, scope: !417)
!1856 = !DILocation(line: 841, column: 28, scope: !486)
!1857 = !DILocation(line: 843, column: 25, scope: !486)
!1858 = !DILocation(line: 843, column: 5, scope: !486)
!1859 = !DILocation(line: 844, column: 9, scope: !1860)
!1860 = distinct !DILexicalBlock(scope: !486, file: !352, line: 844, column: 9)
!1861 = !DILocation(line: 844, column: 16, scope: !1860)
!1862 = !{!1863, !1247, i64 72}
!1863 = !{!"", !1269, i64 0, !1247, i64 24, !1247, i64 32, !1263, i64 40, !1263, i64 48, !1263, i64 56, !1263, i64 64, !1247, i64 72}
!1864 = !DILocation(line: 844, column: 28, scope: !1860)
!1865 = !DILocation(line: 844, column: 9, scope: !486)
!1866 = !DILocation(line: 845, column: 45, scope: !1860)
!1867 = !DILocation(line: 845, column: 32, scope: !1860)
!1868 = !DILocation(line: 845, column: 9, scope: !1860)
!1869 = !DILocation(line: 846, column: 9, scope: !1870)
!1870 = distinct !DILexicalBlock(scope: !486, file: !352, line: 846, column: 9)
!1871 = !DILocation(line: 846, column: 16, scope: !1870)
!1872 = !{!1863, !1247, i64 24}
!1873 = !DILocation(line: 846, column: 26, scope: !1870)
!1874 = !DILocation(line: 846, column: 9, scope: !486)
!1875 = !DILocation(line: 847, column: 21, scope: !1876)
!1876 = distinct !DILexicalBlock(scope: !1870, file: !352, line: 846, column: 41)
!1877 = !DILocation(line: 847, column: 9, scope: !1876)
!1878 = !DILocation(line: 849, column: 19, scope: !1876)
!1879 = !DILocation(line: 849, column: 26, scope: !1876)
!1880 = !DILocation(line: 849, column: 9, scope: !1876)
!1881 = !DILocation(line: 850, column: 5, scope: !1876)
!1882 = !DILocation(line: 851, column: 5, scope: !486)
!1883 = !DILocation(line: 851, column: 12, scope: !486)
!1884 = !DILocation(line: 851, column: 22, scope: !486)
!1885 = !DILocation(line: 852, column: 5, scope: !486)
!1886 = !DILocation(line: 852, column: 12, scope: !486)
!1887 = !DILocation(line: 852, column: 23, scope: !486)
!1888 = !{!1863, !1247, i64 32}
!1889 = !DILocation(line: 853, column: 19, scope: !486)
!1890 = !DILocation(line: 853, column: 7, scope: !486)
!1891 = !DILocation(line: 853, column: 28, scope: !486)
!1892 = !DILocation(line: 853, column: 38, scope: !486)
!1893 = !{!1268, !1247, i64 320}
!1894 = !DILocation(line: 853, column: 46, scope: !486)
!1895 = !DILocation(line: 853, column: 5, scope: !486)
!1896 = !DILocation(line: 854, column: 1, scope: !486)
!1897 = !DILocation(line: 923, column: 22, scope: !496)
!1898 = !DILocation(line: 925, column: 5, scope: !496)
!1899 = !DILocation(line: 925, column: 15, scope: !496)
!1900 = !DILocation(line: 925, column: 24, scope: !496)
!1901 = !DILocation(line: 926, column: 5, scope: !496)
!1902 = !DILocation(line: 926, column: 9, scope: !496)
!1903 = !DILocation(line: 928, column: 22, scope: !496)
!1904 = !DILocation(line: 928, column: 9, scope: !496)
!1905 = !DILocation(line: 928, column: 7, scope: !496)
!1906 = !{!1270, !1270, i64 0}
!1907 = !DILocation(line: 929, column: 9, scope: !1908)
!1908 = distinct !DILexicalBlock(scope: !496, file: !352, line: 929, column: 9)
!1909 = !DILocation(line: 929, column: 11, scope: !1908)
!1910 = !DILocation(line: 929, column: 9, scope: !496)
!1911 = !DILocation(line: 930, column: 13, scope: !1912)
!1912 = distinct !DILexicalBlock(scope: !1913, file: !352, line: 930, column: 13)
!1913 = distinct !DILexicalBlock(scope: !1908, file: !352, line: 929, column: 17)
!1914 = !DILocation(line: 930, column: 15, scope: !1912)
!1915 = !DILocation(line: 930, column: 13, scope: !1913)
!1916 = !DILocation(line: 931, column: 13, scope: !1912)
!1917 = !DILocation(line: 932, column: 16, scope: !1913)
!1918 = !DILocation(line: 932, column: 9, scope: !1913)
!1919 = !DILocation(line: 935, column: 30, scope: !496)
!1920 = !DILocation(line: 935, column: 14, scope: !496)
!1921 = !DILocation(line: 935, column: 12, scope: !496)
!1922 = !DILocation(line: 936, column: 9, scope: !1923)
!1923 = distinct !DILexicalBlock(scope: !496, file: !352, line: 936, column: 9)
!1924 = !DILocation(line: 936, column: 16, scope: !1923)
!1925 = !DILocation(line: 936, column: 9, scope: !496)
!1926 = !DILocation(line: 937, column: 22, scope: !1927)
!1927 = distinct !DILexicalBlock(scope: !1923, file: !352, line: 936, column: 31)
!1928 = !DILocation(line: 937, column: 9, scope: !1927)
!1929 = !DILocation(line: 938, column: 9, scope: !1927)
!1930 = !DILocation(line: 940, column: 25, scope: !1931)
!1931 = distinct !DILexicalBlock(scope: !496, file: !352, line: 940, column: 9)
!1932 = !DILocation(line: 940, column: 10, scope: !1931)
!1933 = !DILocation(line: 940, column: 33, scope: !1931)
!1934 = !{!1863, !1263, i64 64}
!1935 = !DILocation(line: 940, column: 40, scope: !1931)
!1936 = !DILocation(line: 940, column: 9, scope: !496)
!1937 = !DILocation(line: 943, column: 39, scope: !1931)
!1938 = !DILocation(line: 943, column: 63, scope: !1931)
!1939 = !DILocation(line: 943, column: 48, scope: !1931)
!1940 = !DILocation(line: 943, column: 71, scope: !1931)
!1941 = !DILocation(line: 942, column: 18, scope: !1931)
!1942 = !DILocation(line: 942, column: 16, scope: !1931)
!1943 = !DILocation(line: 942, column: 9, scope: !1931)
!1944 = !DILocation(line: 945, column: 52, scope: !1931)
!1945 = !DILocation(line: 945, column: 18, scope: !1931)
!1946 = !DILocation(line: 945, column: 16, scope: !1931)
!1947 = !DILocation(line: 946, column: 5, scope: !496)
!1948 = !DILocation(line: 946, column: 10, scope: !1949)
!1949 = !DILexicalBlockFile(scope: !503, file: !352, discriminator: 1)
!1950 = !DILocation(line: 946, column: 20, scope: !503)
!1951 = !DILocation(line: 946, column: 50, scope: !503)
!1952 = !DILocation(line: 946, column: 67, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !503, file: !352, line: 946, column: 64)
!1954 = !DILocation(line: 946, column: 84, scope: !1953)
!1955 = !DILocation(line: 946, column: 64, scope: !1953)
!1956 = !DILocation(line: 946, column: 94, scope: !1953)
!1957 = !DILocation(line: 946, column: 64, scope: !503)
!1958 = !DILocation(line: 946, column: 64, scope: !1959)
!1959 = !DILexicalBlockFile(scope: !503, file: !352, discriminator: 2)
!1960 = !DILocation(line: 946, column: 125, scope: !1961)
!1961 = !DILexicalBlockFile(scope: !1953, file: !352, discriminator: 3)
!1962 = !DILocation(line: 946, column: 143, scope: !1953)
!1963 = !DILocation(line: 946, column: 153, scope: !1953)
!1964 = !DILocation(line: 946, column: 178, scope: !1953)
!1965 = !DILocation(line: 946, column: 109, scope: !1953)
!1966 = !DILocation(line: 946, column: 197, scope: !1967)
!1967 = !DILexicalBlockFile(scope: !496, file: !352, discriminator: 4)
!1968 = !DILocation(line: 946, column: 197, scope: !503)
!1969 = !DILocation(line: 946, column: 197, scope: !1970)
!1970 = !DILexicalBlockFile(scope: !503, file: !352, discriminator: 5)
!1971 = !DILocation(line: 947, column: 18, scope: !496)
!1972 = !DILocation(line: 947, column: 5, scope: !496)
!1973 = !DILocation(line: 948, column: 12, scope: !496)
!1974 = !DILocation(line: 948, column: 5, scope: !496)
!1975 = !DILocation(line: 949, column: 1, scope: !496)
!1976 = !DILocation(line: 857, column: 29, scope: !624)
!1977 = !DILocation(line: 857, column: 46, scope: !624)
!1978 = !DILocation(line: 857, column: 59, scope: !624)
!1979 = !DILocation(line: 859, column: 5, scope: !624)
!1980 = !DILocation(line: 859, column: 12, scope: !624)
!1981 = !DILocation(line: 860, column: 5, scope: !624)
!1982 = !DILocation(line: 860, column: 15, scope: !624)
!1983 = !DILocation(line: 861, column: 5, scope: !624)
!1984 = !DILocation(line: 861, column: 16, scope: !624)
!1985 = !DILocation(line: 862, column: 5, scope: !624)
!1986 = !DILocation(line: 862, column: 16, scope: !624)
!1987 = !DILocation(line: 862, column: 26, scope: !624)
!1988 = !DILocation(line: 862, column: 33, scope: !624)
!1989 = !{!1863, !1263, i64 40}
!1990 = !{!1263, !1263, i64 0}
!1991 = !DILocation(line: 864, column: 14, scope: !644)
!1992 = !DILocation(line: 864, column: 21, scope: !644)
!1993 = !DILocation(line: 864, column: 12, scope: !644)
!1994 = !DILocation(line: 864, column: 10, scope: !644)
!1995 = !DILocation(line: 864, column: 32, scope: !1996)
!1996 = !DILexicalBlockFile(scope: !1997, file: !352, discriminator: 2)
!1997 = !DILexicalBlockFile(scope: !643, file: !352, discriminator: 1)
!1998 = !DILocation(line: 864, column: 37, scope: !643)
!1999 = !DILocation(line: 864, column: 44, scope: !643)
!2000 = !DILocation(line: 864, column: 34, scope: !643)
!2001 = !DILocation(line: 864, column: 5, scope: !644)
!2002 = !DILocation(line: 865, column: 22, scope: !641)
!2003 = !DILocation(line: 865, column: 20, scope: !641)
!2004 = !DILocation(line: 865, column: 14, scope: !641)
!2005 = !DILocation(line: 865, column: 31, scope: !2006)
!2006 = !DILexicalBlockFile(scope: !2007, file: !352, discriminator: 2)
!2007 = !DILexicalBlockFile(scope: !640, file: !352, discriminator: 1)
!2008 = !DILocation(line: 865, column: 37, scope: !640)
!2009 = !DILocation(line: 865, column: 9, scope: !641)
!2010 = !DILocation(line: 866, column: 28, scope: !639)
!2011 = !DILocation(line: 866, column: 20, scope: !639)
!2012 = !DILocation(line: 866, column: 23, scope: !639)
!2013 = !DILocation(line: 866, column: 18, scope: !639)
!2014 = !DILocation(line: 867, column: 13, scope: !639)
!2015 = !DILocation(line: 867, column: 22, scope: !2016)
!2016 = !DILexicalBlockFile(scope: !637, file: !352, discriminator: 1)
!2017 = !DILocation(line: 867, column: 22, scope: !638)
!2018 = !DILocation(line: 867, column: 30, scope: !2019)
!2019 = !DILexicalBlockFile(scope: !636, file: !352, discriminator: 2)
!2020 = !DILocation(line: 867, column: 34, scope: !636)
!2021 = !DILocation(line: 867, column: 41, scope: !636)
!2022 = !DILocation(line: 867, column: 60, scope: !636)
!2023 = !DILocation(line: 867, column: 67, scope: !636)
!2024 = !DILocation(line: 867, column: 77, scope: !2025)
!2025 = distinct !DILexicalBlock(scope: !636, file: !352, line: 867, column: 77)
!2026 = !DILocation(line: 867, column: 77, scope: !636)
!2027 = !DILocation(line: 867, column: 90, scope: !2028)
!2028 = !DILexicalBlockFile(scope: !2025, file: !352, discriminator: 4)
!2029 = !DILocation(line: 867, column: 83, scope: !2025)
!2030 = !DILocation(line: 867, column: 96, scope: !2031)
!2031 = !DILexicalBlockFile(scope: !637, file: !352, discriminator: 5)
!2032 = !DILocation(line: 867, column: 96, scope: !2033)
!2033 = !DILexicalBlockFile(scope: !2034, file: !352, discriminator: 7)
!2034 = !DILexicalBlockFile(scope: !637, file: !352, discriminator: 6)
!2035 = !DILocation(line: 867, column: 96, scope: !636)
!2036 = !DILocation(line: 867, column: 98, scope: !2037)
!2037 = !DILexicalBlockFile(scope: !2038, file: !352, discriminator: 8)
!2038 = !DILexicalBlockFile(scope: !638, file: !352, discriminator: 3)
!2039 = !DILocation(line: 867, column: 98, scope: !2040)
!2040 = !DILexicalBlockFile(scope: !638, file: !352, discriminator: 9)
!2041 = !DILocation(line: 868, column: 9, scope: !639)
!2042 = !DILocation(line: 865, column: 49, scope: !640)
!2043 = !DILocation(line: 865, column: 9, scope: !640)
!2044 = !DILocation(line: 869, column: 17, scope: !642)
!2045 = !DILocation(line: 870, column: 5, scope: !642)
!2046 = !DILocation(line: 864, column: 60, scope: !643)
!2047 = !DILocation(line: 864, column: 63, scope: !643)
!2048 = !{!2049, !1247, i64 504}
!2049 = !{!"BLOCK", !1247, i64 0, !1248, i64 8, !1247, i64 504}
!2050 = !DILocation(line: 864, column: 58, scope: !643)
!2051 = !DILocation(line: 864, column: 5, scope: !643)
!2052 = !DILocation(line: 871, column: 18, scope: !651)
!2053 = !DILocation(line: 871, column: 16, scope: !651)
!2054 = !DILocation(line: 871, column: 10, scope: !651)
!2055 = !DILocation(line: 871, column: 27, scope: !2056)
!2056 = !DILexicalBlockFile(scope: !2057, file: !352, discriminator: 2)
!2057 = !DILexicalBlockFile(scope: !650, file: !352, discriminator: 1)
!2058 = !DILocation(line: 871, column: 36, scope: !650)
!2059 = !DILocation(line: 871, column: 43, scope: !650)
!2060 = !{!1863, !1263, i64 48}
!2061 = !DILocation(line: 871, column: 33, scope: !650)
!2062 = !DILocation(line: 871, column: 5, scope: !651)
!2063 = !DILocation(line: 872, column: 24, scope: !649)
!2064 = !DILocation(line: 872, column: 16, scope: !649)
!2065 = !DILocation(line: 872, column: 19, scope: !649)
!2066 = !DILocation(line: 872, column: 14, scope: !649)
!2067 = !DILocation(line: 873, column: 9, scope: !649)
!2068 = !DILocation(line: 873, column: 18, scope: !2069)
!2069 = !DILexicalBlockFile(scope: !647, file: !352, discriminator: 1)
!2070 = !DILocation(line: 873, column: 18, scope: !648)
!2071 = !DILocation(line: 873, column: 26, scope: !2072)
!2072 = !DILexicalBlockFile(scope: !646, file: !352, discriminator: 2)
!2073 = !DILocation(line: 873, column: 30, scope: !646)
!2074 = !DILocation(line: 873, column: 37, scope: !646)
!2075 = !DILocation(line: 873, column: 56, scope: !646)
!2076 = !DILocation(line: 873, column: 63, scope: !646)
!2077 = !DILocation(line: 873, column: 73, scope: !2078)
!2078 = distinct !DILexicalBlock(scope: !646, file: !352, line: 873, column: 73)
!2079 = !DILocation(line: 873, column: 73, scope: !646)
!2080 = !DILocation(line: 873, column: 86, scope: !2081)
!2081 = !DILexicalBlockFile(scope: !2078, file: !352, discriminator: 4)
!2082 = !DILocation(line: 873, column: 79, scope: !2078)
!2083 = !DILocation(line: 873, column: 92, scope: !2084)
!2084 = !DILexicalBlockFile(scope: !647, file: !352, discriminator: 5)
!2085 = !DILocation(line: 873, column: 92, scope: !2086)
!2086 = !DILexicalBlockFile(scope: !2087, file: !352, discriminator: 7)
!2087 = !DILexicalBlockFile(scope: !647, file: !352, discriminator: 6)
!2088 = !DILocation(line: 873, column: 92, scope: !646)
!2089 = !DILocation(line: 873, column: 94, scope: !2090)
!2090 = !DILexicalBlockFile(scope: !2091, file: !352, discriminator: 8)
!2091 = !DILexicalBlockFile(scope: !648, file: !352, discriminator: 3)
!2092 = !DILocation(line: 873, column: 94, scope: !2093)
!2093 = !DILexicalBlockFile(scope: !648, file: !352, discriminator: 9)
!2094 = !DILocation(line: 874, column: 5, scope: !649)
!2095 = !DILocation(line: 871, column: 60, scope: !650)
!2096 = !DILocation(line: 871, column: 5, scope: !650)
!2097 = !DILocation(line: 875, column: 5, scope: !624)
!2098 = !DILocation(line: 876, column: 1, scope: !624)
!2099 = !DILocation(line: 720, column: 26, scope: !652)
!2100 = !DILocation(line: 722, column: 5, scope: !652)
!2101 = !DILocation(line: 722, column: 15, scope: !652)
!2102 = !DILocation(line: 724, column: 5, scope: !652)
!2103 = !DILocation(line: 724, column: 29, scope: !2104)
!2104 = !DILexicalBlockFile(scope: !2105, file: !352, discriminator: 2)
!2105 = !DILexicalBlockFile(scope: !652, file: !352, discriminator: 1)
!2106 = !DILocation(line: 724, column: 14, scope: !652)
!2107 = !DILocation(line: 724, column: 38, scope: !652)
!2108 = !{!1269, !1263, i64 16}
!2109 = !DILocation(line: 725, column: 26, scope: !658)
!2110 = !DILocation(line: 725, column: 16, scope: !658)
!2111 = !DILocation(line: 725, column: 14, scope: !658)
!2112 = !DILocation(line: 727, column: 9, scope: !658)
!2113 = !DILocation(line: 727, column: 14, scope: !2114)
!2114 = !DILexicalBlockFile(scope: !657, file: !352, discriminator: 1)
!2115 = !DILocation(line: 727, column: 24, scope: !657)
!2116 = !DILocation(line: 727, column: 54, scope: !657)
!2117 = !DILocation(line: 727, column: 69, scope: !2118)
!2118 = distinct !DILexicalBlock(scope: !657, file: !352, line: 727, column: 66)
!2119 = !DILocation(line: 727, column: 86, scope: !2118)
!2120 = !DILocation(line: 727, column: 66, scope: !2118)
!2121 = !DILocation(line: 727, column: 96, scope: !2118)
!2122 = !DILocation(line: 727, column: 66, scope: !657)
!2123 = !DILocation(line: 727, column: 66, scope: !2124)
!2124 = !DILexicalBlockFile(scope: !657, file: !352, discriminator: 2)
!2125 = !DILocation(line: 727, column: 127, scope: !2126)
!2126 = !DILexicalBlockFile(scope: !2118, file: !352, discriminator: 3)
!2127 = !DILocation(line: 727, column: 145, scope: !2118)
!2128 = !DILocation(line: 727, column: 155, scope: !2118)
!2129 = !DILocation(line: 727, column: 180, scope: !2118)
!2130 = !DILocation(line: 727, column: 111, scope: !2118)
!2131 = !DILocation(line: 727, column: 199, scope: !2132)
!2132 = !DILexicalBlockFile(scope: !658, file: !352, discriminator: 4)
!2133 = !DILocation(line: 727, column: 199, scope: !657)
!2134 = !DILocation(line: 727, column: 199, scope: !2135)
!2135 = !DILexicalBlockFile(scope: !657, file: !352, discriminator: 5)
!2136 = !DILocation(line: 732, column: 1, scope: !652)
!2137 = !DILocation(line: 952, column: 29, scope: !665)
!2138 = !DILocation(line: 952, column: 42, scope: !665)
!2139 = !DILocation(line: 952, column: 49, scope: !665)
!2140 = !DILocation(line: 954, column: 5, scope: !665)
!2141 = !DILocation(line: 954, column: 15, scope: !665)
!2142 = !DILocation(line: 954, column: 32, scope: !665)
!2143 = !DILocation(line: 954, column: 49, scope: !665)
!2144 = !DILocation(line: 954, column: 53, scope: !665)
!2145 = !DILocation(line: 955, column: 5, scope: !665)
!2146 = !DILocation(line: 955, column: 16, scope: !665)
!2147 = !DILocation(line: 955, column: 20, scope: !665)
!2148 = !DILocation(line: 956, column: 5, scope: !665)
!2149 = !DILocation(line: 956, column: 9, scope: !665)
!2150 = !DILocation(line: 956, column: 12, scope: !665)
!2151 = !DILocation(line: 958, column: 25, scope: !2152)
!2152 = distinct !DILexicalBlock(scope: !665, file: !352, line: 958, column: 9)
!2153 = !DILocation(line: 958, column: 30, scope: !2152)
!2154 = !DILocation(line: 958, column: 39, scope: !2152)
!2155 = !DILocation(line: 958, column: 56, scope: !2152)
!2156 = !DILocation(line: 958, column: 90, scope: !2157)
!2157 = !DILexicalBlockFile(scope: !2152, file: !352, discriminator: 1)
!2158 = !DILocation(line: 958, column: 95, scope: !2152)
!2159 = !DILocation(line: 958, column: 59, scope: !2152)
!2160 = !DILocation(line: 958, column: 121, scope: !2152)
!2161 = !DILocation(line: 959, column: 25, scope: !2152)
!2162 = !DILocation(line: 959, column: 30, scope: !2152)
!2163 = !DILocation(line: 959, column: 39, scope: !2152)
!2164 = !DILocation(line: 959, column: 56, scope: !2152)
!2165 = !DILocation(line: 959, column: 90, scope: !2157)
!2166 = !DILocation(line: 959, column: 95, scope: !2152)
!2167 = !DILocation(line: 959, column: 59, scope: !2152)
!2168 = !DILocation(line: 958, column: 9, scope: !665)
!2169 = !DILocation(line: 960, column: 72, scope: !2170)
!2170 = distinct !DILexicalBlock(scope: !2152, file: !352, line: 959, column: 122)
!2171 = !DILocation(line: 960, column: 9, scope: !2170)
!2172 = !DILocation(line: 964, column: 42, scope: !665)
!2173 = !DILocation(line: 964, column: 27, scope: !665)
!2174 = !DILocation(line: 964, column: 12, scope: !665)
!2175 = !DILocation(line: 964, column: 47, scope: !665)
!2176 = !DILocation(line: 964, column: 8, scope: !665)
!2177 = !DILocation(line: 965, column: 42, scope: !665)
!2178 = !DILocation(line: 965, column: 27, scope: !665)
!2179 = !DILocation(line: 965, column: 12, scope: !665)
!2180 = !DILocation(line: 965, column: 47, scope: !665)
!2181 = !DILocation(line: 965, column: 8, scope: !665)
!2182 = !DILocation(line: 966, column: 9, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !665, file: !352, line: 966, column: 9)
!2184 = !DILocation(line: 966, column: 12, scope: !2183)
!2185 = !DILocation(line: 966, column: 9, scope: !665)
!2186 = !DILocation(line: 967, column: 13, scope: !2187)
!2187 = distinct !DILexicalBlock(scope: !2188, file: !352, line: 967, column: 13)
!2188 = distinct !DILexicalBlock(scope: !2183, file: !352, line: 966, column: 18)
!2189 = !DILocation(line: 967, column: 18, scope: !2187)
!2190 = !DILocation(line: 967, column: 15, scope: !2187)
!2191 = !DILocation(line: 967, column: 13, scope: !2188)
!2192 = !DILocation(line: 968, column: 79, scope: !2187)
!2193 = !DILocation(line: 968, column: 13, scope: !2187)
!2194 = !DILocation(line: 969, column: 13, scope: !2195)
!2195 = distinct !DILexicalBlock(scope: !2188, file: !352, line: 969, column: 13)
!2196 = !DILocation(line: 969, column: 19, scope: !2195)
!2197 = !DILocation(line: 969, column: 16, scope: !2195)
!2198 = !DILocation(line: 969, column: 13, scope: !2188)
!2199 = !DILocation(line: 970, column: 80, scope: !2195)
!2200 = !DILocation(line: 970, column: 13, scope: !2195)
!2201 = !DILocation(line: 971, column: 5, scope: !2188)
!2202 = !DILocation(line: 972, column: 9, scope: !2203)
!2203 = distinct !DILexicalBlock(scope: !665, file: !352, line: 972, column: 9)
!2204 = !DILocation(line: 972, column: 12, scope: !2203)
!2205 = !DILocation(line: 972, column: 9, scope: !665)
!2206 = !DILocation(line: 973, column: 13, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2208, file: !352, line: 973, column: 13)
!2208 = distinct !DILexicalBlock(scope: !2203, file: !352, line: 972, column: 18)
!2209 = !DILocation(line: 973, column: 18, scope: !2207)
!2210 = !DILocation(line: 973, column: 15, scope: !2207)
!2211 = !DILocation(line: 973, column: 13, scope: !2208)
!2212 = !DILocation(line: 974, column: 80, scope: !2207)
!2213 = !DILocation(line: 974, column: 13, scope: !2207)
!2214 = !DILocation(line: 975, column: 13, scope: !2215)
!2215 = distinct !DILexicalBlock(scope: !2208, file: !352, line: 975, column: 13)
!2216 = !DILocation(line: 975, column: 19, scope: !2215)
!2217 = !DILocation(line: 975, column: 16, scope: !2215)
!2218 = !DILocation(line: 975, column: 13, scope: !2208)
!2219 = !DILocation(line: 976, column: 79, scope: !2215)
!2220 = !DILocation(line: 976, column: 13, scope: !2215)
!2221 = !DILocation(line: 977, column: 5, scope: !2208)
!2222 = !DILocation(line: 980, column: 28, scope: !665)
!2223 = !DILocation(line: 980, column: 11, scope: !665)
!2224 = !DILocation(line: 980, column: 9, scope: !665)
!2225 = !DILocation(line: 981, column: 9, scope: !2226)
!2226 = distinct !DILexicalBlock(scope: !665, file: !352, line: 981, column: 9)
!2227 = !DILocation(line: 981, column: 13, scope: !2226)
!2228 = !DILocation(line: 981, column: 9, scope: !665)
!2229 = !DILocation(line: 982, column: 9, scope: !2226)
!2230 = !DILocation(line: 983, column: 28, scope: !665)
!2231 = !DILocation(line: 983, column: 11, scope: !665)
!2232 = !DILocation(line: 983, column: 9, scope: !665)
!2233 = !DILocation(line: 984, column: 9, scope: !2234)
!2234 = distinct !DILexicalBlock(scope: !665, file: !352, line: 984, column: 9)
!2235 = !DILocation(line: 984, column: 13, scope: !2234)
!2236 = !DILocation(line: 984, column: 9, scope: !665)
!2237 = !DILocation(line: 985, column: 9, scope: !2234)
!2238 = !DILocation(line: 986, column: 5, scope: !665)
!2239 = !DILocation(line: 987, column: 25, scope: !682)
!2240 = !DILocation(line: 987, column: 13, scope: !682)
!2241 = !DILocation(line: 987, column: 11, scope: !682)
!2242 = !DILocation(line: 988, column: 13, scope: !2243)
!2243 = distinct !DILexicalBlock(scope: !682, file: !352, line: 988, column: 13)
!2244 = !DILocation(line: 988, column: 15, scope: !2243)
!2245 = !DILocation(line: 988, column: 29, scope: !2243)
!2246 = !DILocation(line: 988, column: 32, scope: !2247)
!2247 = !DILexicalBlockFile(scope: !2243, file: !352, discriminator: 1)
!2248 = !DILocation(line: 988, column: 13, scope: !682)
!2249 = !DILocation(line: 989, column: 13, scope: !2243)
!2250 = !DILocation(line: 990, column: 25, scope: !682)
!2251 = !DILocation(line: 990, column: 13, scope: !682)
!2252 = !DILocation(line: 990, column: 11, scope: !682)
!2253 = !DILocation(line: 991, column: 13, scope: !2254)
!2254 = distinct !DILexicalBlock(scope: !682, file: !352, line: 991, column: 13)
!2255 = !DILocation(line: 991, column: 15, scope: !2254)
!2256 = !DILocation(line: 991, column: 29, scope: !2254)
!2257 = !DILocation(line: 991, column: 32, scope: !2258)
!2258 = !DILexicalBlockFile(scope: !2254, file: !352, discriminator: 1)
!2259 = !DILocation(line: 991, column: 34, scope: !2254)
!2260 = !DILocation(line: 991, column: 13, scope: !682)
!2261 = !DILocation(line: 992, column: 13, scope: !2254)
!2262 = !DILocation(line: 993, column: 38, scope: !682)
!2263 = !DILocation(line: 993, column: 41, scope: !682)
!2264 = !DILocation(line: 993, column: 13, scope: !682)
!2265 = !DILocation(line: 993, column: 11, scope: !682)
!2266 = !DILocation(line: 994, column: 13, scope: !681)
!2267 = !DILocation(line: 994, column: 15, scope: !681)
!2268 = !DILocation(line: 994, column: 13, scope: !682)
!2269 = !DILocation(line: 995, column: 44, scope: !680)
!2270 = !DILocation(line: 995, column: 47, scope: !680)
!2271 = !DILocation(line: 995, column: 50, scope: !680)
!2272 = !DILocation(line: 995, column: 19, scope: !680)
!2273 = !DILocation(line: 995, column: 17, scope: !680)
!2274 = !DILocation(line: 996, column: 13, scope: !680)
!2275 = !DILocation(line: 996, column: 18, scope: !2276)
!2276 = !DILexicalBlockFile(scope: !679, file: !352, discriminator: 1)
!2277 = !DILocation(line: 996, column: 28, scope: !679)
!2278 = !DILocation(line: 996, column: 58, scope: !679)
!2279 = !DILocation(line: 996, column: 70, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !679, file: !352, line: 996, column: 67)
!2281 = !DILocation(line: 996, column: 87, scope: !2280)
!2282 = !DILocation(line: 996, column: 67, scope: !2280)
!2283 = !DILocation(line: 996, column: 97, scope: !2280)
!2284 = !DILocation(line: 996, column: 67, scope: !679)
!2285 = !DILocation(line: 996, column: 67, scope: !2286)
!2286 = !DILexicalBlockFile(scope: !679, file: !352, discriminator: 2)
!2287 = !DILocation(line: 996, column: 128, scope: !2288)
!2288 = !DILexicalBlockFile(scope: !2280, file: !352, discriminator: 3)
!2289 = !DILocation(line: 996, column: 146, scope: !2280)
!2290 = !DILocation(line: 996, column: 156, scope: !2280)
!2291 = !DILocation(line: 996, column: 181, scope: !2280)
!2292 = !DILocation(line: 996, column: 112, scope: !2280)
!2293 = !DILocation(line: 996, column: 200, scope: !2294)
!2294 = !DILexicalBlockFile(scope: !680, file: !352, discriminator: 4)
!2295 = !DILocation(line: 996, column: 200, scope: !679)
!2296 = !DILocation(line: 996, column: 200, scope: !2297)
!2297 = !DILexicalBlockFile(scope: !679, file: !352, discriminator: 5)
!2298 = !DILocation(line: 997, column: 13, scope: !680)
!2299 = !DILocation(line: 997, column: 18, scope: !2300)
!2300 = !DILexicalBlockFile(scope: !686, file: !352, discriminator: 1)
!2301 = !DILocation(line: 997, column: 28, scope: !686)
!2302 = !DILocation(line: 997, column: 58, scope: !686)
!2303 = !DILocation(line: 997, column: 70, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !686, file: !352, line: 997, column: 67)
!2305 = !DILocation(line: 997, column: 87, scope: !2304)
!2306 = !DILocation(line: 997, column: 67, scope: !2304)
!2307 = !DILocation(line: 997, column: 97, scope: !2304)
!2308 = !DILocation(line: 997, column: 67, scope: !686)
!2309 = !DILocation(line: 997, column: 67, scope: !2310)
!2310 = !DILexicalBlockFile(scope: !686, file: !352, discriminator: 2)
!2311 = !DILocation(line: 997, column: 128, scope: !2312)
!2312 = !DILexicalBlockFile(scope: !2304, file: !352, discriminator: 3)
!2313 = !DILocation(line: 997, column: 146, scope: !2304)
!2314 = !DILocation(line: 997, column: 156, scope: !2304)
!2315 = !DILocation(line: 997, column: 181, scope: !2304)
!2316 = !DILocation(line: 997, column: 112, scope: !2304)
!2317 = !DILocation(line: 997, column: 200, scope: !2294)
!2318 = !DILocation(line: 997, column: 200, scope: !686)
!2319 = !DILocation(line: 997, column: 200, scope: !2320)
!2320 = !DILexicalBlockFile(scope: !686, file: !352, discriminator: 5)
!2321 = !DILocation(line: 998, column: 13, scope: !680)
!2322 = !DILocation(line: 1000, column: 9, scope: !682)
!2323 = !DILocation(line: 1000, column: 14, scope: !2324)
!2324 = !DILexicalBlockFile(scope: !688, file: !352, discriminator: 1)
!2325 = !DILocation(line: 1000, column: 24, scope: !688)
!2326 = !DILocation(line: 1000, column: 54, scope: !688)
!2327 = !DILocation(line: 1000, column: 66, scope: !2328)
!2328 = distinct !DILexicalBlock(scope: !688, file: !352, line: 1000, column: 63)
!2329 = !DILocation(line: 1000, column: 83, scope: !2328)
!2330 = !DILocation(line: 1000, column: 63, scope: !2328)
!2331 = !DILocation(line: 1000, column: 93, scope: !2328)
!2332 = !DILocation(line: 1000, column: 63, scope: !688)
!2333 = !DILocation(line: 1000, column: 63, scope: !2334)
!2334 = !DILexicalBlockFile(scope: !688, file: !352, discriminator: 2)
!2335 = !DILocation(line: 1000, column: 124, scope: !2336)
!2336 = !DILexicalBlockFile(scope: !2328, file: !352, discriminator: 3)
!2337 = !DILocation(line: 1000, column: 142, scope: !2328)
!2338 = !DILocation(line: 1000, column: 152, scope: !2328)
!2339 = !DILocation(line: 1000, column: 177, scope: !2328)
!2340 = !DILocation(line: 1000, column: 108, scope: !2328)
!2341 = !DILocation(line: 1000, column: 196, scope: !2342)
!2342 = !DILexicalBlockFile(scope: !682, file: !352, discriminator: 4)
!2343 = !DILocation(line: 1000, column: 196, scope: !688)
!2344 = !DILocation(line: 1000, column: 196, scope: !2345)
!2345 = !DILexicalBlockFile(scope: !688, file: !352, discriminator: 5)
!2346 = !DILocation(line: 1001, column: 9, scope: !682)
!2347 = !DILocation(line: 1001, column: 14, scope: !2348)
!2348 = !DILexicalBlockFile(scope: !690, file: !352, discriminator: 1)
!2349 = !DILocation(line: 1001, column: 24, scope: !690)
!2350 = !DILocation(line: 1001, column: 54, scope: !690)
!2351 = !DILocation(line: 1001, column: 66, scope: !2352)
!2352 = distinct !DILexicalBlock(scope: !690, file: !352, line: 1001, column: 63)
!2353 = !DILocation(line: 1001, column: 83, scope: !2352)
!2354 = !DILocation(line: 1001, column: 63, scope: !2352)
!2355 = !DILocation(line: 1001, column: 93, scope: !2352)
!2356 = !DILocation(line: 1001, column: 63, scope: !690)
!2357 = !DILocation(line: 1001, column: 63, scope: !2358)
!2358 = !DILexicalBlockFile(scope: !690, file: !352, discriminator: 2)
!2359 = !DILocation(line: 1001, column: 124, scope: !2360)
!2360 = !DILexicalBlockFile(scope: !2352, file: !352, discriminator: 3)
!2361 = !DILocation(line: 1001, column: 142, scope: !2352)
!2362 = !DILocation(line: 1001, column: 152, scope: !2352)
!2363 = !DILocation(line: 1001, column: 177, scope: !2352)
!2364 = !DILocation(line: 1001, column: 108, scope: !2352)
!2365 = !DILocation(line: 1001, column: 196, scope: !2342)
!2366 = !DILocation(line: 1001, column: 196, scope: !690)
!2367 = !DILocation(line: 1001, column: 196, scope: !2368)
!2368 = !DILexicalBlockFile(scope: !690, file: !352, discriminator: 5)
!2369 = !DILocation(line: 1002, column: 13, scope: !2370)
!2370 = distinct !DILexicalBlock(scope: !682, file: !352, line: 1002, column: 13)
!2371 = !DILocation(line: 1002, column: 15, scope: !2370)
!2372 = !DILocation(line: 1002, column: 13, scope: !682)
!2373 = !DILocation(line: 1003, column: 13, scope: !2370)
!2374 = !DILocation(line: 986, column: 5, scope: !683)
!2375 = !DILocation(line: 1006, column: 5, scope: !665)
!2376 = !DILocation(line: 1006, column: 10, scope: !2377)
!2377 = !DILexicalBlockFile(scope: !692, file: !352, discriminator: 1)
!2378 = !DILocation(line: 1006, column: 20, scope: !692)
!2379 = !DILocation(line: 1006, column: 51, scope: !692)
!2380 = !DILocation(line: 1006, column: 59, scope: !695)
!2381 = !DILocation(line: 1006, column: 75, scope: !695)
!2382 = !DILocation(line: 1006, column: 59, scope: !692)
!2383 = !DILocation(line: 1006, column: 90, scope: !2384)
!2384 = !DILexicalBlockFile(scope: !695, file: !352, discriminator: 2)
!2385 = !DILocation(line: 1006, column: 95, scope: !2386)
!2386 = !DILexicalBlockFile(scope: !694, file: !352, discriminator: 4)
!2387 = !DILocation(line: 1006, column: 105, scope: !694)
!2388 = !DILocation(line: 1006, column: 135, scope: !694)
!2389 = !DILocation(line: 1006, column: 161, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !694, file: !352, line: 1006, column: 158)
!2391 = !DILocation(line: 1006, column: 178, scope: !2390)
!2392 = !DILocation(line: 1006, column: 158, scope: !2390)
!2393 = !DILocation(line: 1006, column: 188, scope: !2390)
!2394 = !DILocation(line: 1006, column: 158, scope: !694)
!2395 = !DILocation(line: 1006, column: 158, scope: !2396)
!2396 = !DILexicalBlockFile(scope: !694, file: !352, discriminator: 5)
!2397 = !DILocation(line: 1006, column: 219, scope: !2398)
!2398 = !DILexicalBlockFile(scope: !2390, file: !352, discriminator: 6)
!2399 = !DILocation(line: 1006, column: 237, scope: !2390)
!2400 = !DILocation(line: 1006, column: 247, scope: !2390)
!2401 = !DILocation(line: 1006, column: 272, scope: !2390)
!2402 = !DILocation(line: 1006, column: 203, scope: !2390)
!2403 = !DILocation(line: 1006, column: 291, scope: !2404)
!2404 = !DILexicalBlockFile(scope: !695, file: !352, discriminator: 7)
!2405 = !DILocation(line: 1006, column: 291, scope: !694)
!2406 = !DILocation(line: 1006, column: 291, scope: !2407)
!2407 = !DILexicalBlockFile(scope: !694, file: !352, discriminator: 8)
!2408 = !DILocation(line: 1006, column: 291, scope: !2409)
!2409 = !DILexicalBlockFile(scope: !694, file: !352, discriminator: 9)
!2410 = !DILocation(line: 1006, column: 304, scope: !2411)
!2411 = !DILexicalBlockFile(scope: !2412, file: !352, discriminator: 10)
!2412 = !DILexicalBlockFile(scope: !665, file: !352, discriminator: 3)
!2413 = !DILocation(line: 1006, column: 304, scope: !692)
!2414 = !DILocation(line: 1006, column: 304, scope: !2415)
!2415 = !DILexicalBlockFile(scope: !692, file: !352, discriminator: 11)
!2416 = !DILocation(line: 1007, column: 5, scope: !665)
!2417 = !DILocation(line: 1007, column: 10, scope: !2418)
!2418 = !DILexicalBlockFile(scope: !697, file: !352, discriminator: 1)
!2419 = !DILocation(line: 1007, column: 20, scope: !697)
!2420 = !DILocation(line: 1007, column: 51, scope: !697)
!2421 = !DILocation(line: 1007, column: 59, scope: !700)
!2422 = !DILocation(line: 1007, column: 75, scope: !700)
!2423 = !DILocation(line: 1007, column: 59, scope: !697)
!2424 = !DILocation(line: 1007, column: 90, scope: !2425)
!2425 = !DILexicalBlockFile(scope: !700, file: !352, discriminator: 2)
!2426 = !DILocation(line: 1007, column: 95, scope: !2427)
!2427 = !DILexicalBlockFile(scope: !699, file: !352, discriminator: 4)
!2428 = !DILocation(line: 1007, column: 105, scope: !699)
!2429 = !DILocation(line: 1007, column: 135, scope: !699)
!2430 = !DILocation(line: 1007, column: 161, scope: !2431)
!2431 = distinct !DILexicalBlock(scope: !699, file: !352, line: 1007, column: 158)
!2432 = !DILocation(line: 1007, column: 178, scope: !2431)
!2433 = !DILocation(line: 1007, column: 158, scope: !2431)
!2434 = !DILocation(line: 1007, column: 188, scope: !2431)
!2435 = !DILocation(line: 1007, column: 158, scope: !699)
!2436 = !DILocation(line: 1007, column: 158, scope: !2437)
!2437 = !DILexicalBlockFile(scope: !699, file: !352, discriminator: 5)
!2438 = !DILocation(line: 1007, column: 219, scope: !2439)
!2439 = !DILexicalBlockFile(scope: !2431, file: !352, discriminator: 6)
!2440 = !DILocation(line: 1007, column: 237, scope: !2431)
!2441 = !DILocation(line: 1007, column: 247, scope: !2431)
!2442 = !DILocation(line: 1007, column: 272, scope: !2431)
!2443 = !DILocation(line: 1007, column: 203, scope: !2431)
!2444 = !DILocation(line: 1007, column: 291, scope: !2445)
!2445 = !DILexicalBlockFile(scope: !700, file: !352, discriminator: 7)
!2446 = !DILocation(line: 1007, column: 291, scope: !699)
!2447 = !DILocation(line: 1007, column: 291, scope: !2448)
!2448 = !DILexicalBlockFile(scope: !699, file: !352, discriminator: 8)
!2449 = !DILocation(line: 1007, column: 291, scope: !2450)
!2450 = !DILexicalBlockFile(scope: !699, file: !352, discriminator: 9)
!2451 = !DILocation(line: 1007, column: 304, scope: !2411)
!2452 = !DILocation(line: 1007, column: 304, scope: !697)
!2453 = !DILocation(line: 1007, column: 304, scope: !2454)
!2454 = !DILexicalBlockFile(scope: !697, file: !352, discriminator: 11)
!2455 = !DILocation(line: 1008, column: 9, scope: !2456)
!2456 = distinct !DILexicalBlock(scope: !665, file: !352, line: 1008, column: 9)
!2457 = !DILocation(line: 1008, column: 9, scope: !665)
!2458 = !DILocation(line: 1009, column: 9, scope: !2456)
!2459 = !DILocation(line: 1010, column: 13, scope: !665)
!2460 = !DILocation(line: 1010, column: 5, scope: !665)
!2461 = !DILocation(line: 1011, column: 19, scope: !2462)
!2462 = distinct !DILexicalBlock(scope: !665, file: !352, line: 1010, column: 17)
!2463 = !DILocation(line: 1011, column: 21, scope: !2462)
!2464 = !DILocation(line: 1011, column: 17, scope: !2462)
!2465 = !DILocation(line: 1011, column: 36, scope: !2462)
!2466 = !DILocation(line: 1012, column: 19, scope: !2462)
!2467 = !DILocation(line: 1012, column: 21, scope: !2462)
!2468 = !DILocation(line: 1012, column: 17, scope: !2462)
!2469 = !DILocation(line: 1012, column: 36, scope: !2462)
!2470 = !DILocation(line: 1013, column: 19, scope: !2462)
!2471 = !DILocation(line: 1013, column: 24, scope: !2462)
!2472 = !DILocation(line: 1013, column: 21, scope: !2462)
!2473 = !DILocation(line: 1013, column: 17, scope: !2462)
!2474 = !DILocation(line: 1013, column: 27, scope: !2462)
!2475 = !DILocation(line: 1014, column: 19, scope: !2462)
!2476 = !DILocation(line: 1014, column: 24, scope: !2462)
!2477 = !DILocation(line: 1014, column: 21, scope: !2462)
!2478 = !DILocation(line: 1014, column: 17, scope: !2462)
!2479 = !DILocation(line: 1014, column: 27, scope: !2462)
!2480 = !DILocation(line: 1015, column: 19, scope: !2462)
!2481 = !DILocation(line: 1015, column: 21, scope: !2462)
!2482 = !DILocation(line: 1015, column: 17, scope: !2462)
!2483 = !DILocation(line: 1015, column: 36, scope: !2462)
!2484 = !DILocation(line: 1016, column: 19, scope: !2462)
!2485 = !DILocation(line: 1016, column: 21, scope: !2462)
!2486 = !DILocation(line: 1016, column: 17, scope: !2462)
!2487 = !DILocation(line: 1016, column: 36, scope: !2462)
!2488 = !DILocation(line: 1017, column: 5, scope: !2462)
!2489 = !DILocation(line: 1020, column: 5, scope: !665)
!2490 = !DILocation(line: 1020, column: 10, scope: !2491)
!2491 = !DILexicalBlockFile(scope: !702, file: !352, discriminator: 1)
!2492 = !DILocation(line: 1020, column: 20, scope: !702)
!2493 = !DILocation(line: 1020, column: 51, scope: !702)
!2494 = !DILocation(line: 1020, column: 61, scope: !705)
!2495 = !DILocation(line: 1020, column: 77, scope: !705)
!2496 = !DILocation(line: 1020, column: 61, scope: !702)
!2497 = !DILocation(line: 1020, column: 92, scope: !2498)
!2498 = !DILexicalBlockFile(scope: !705, file: !352, discriminator: 2)
!2499 = !DILocation(line: 1020, column: 97, scope: !2500)
!2500 = !DILexicalBlockFile(scope: !704, file: !352, discriminator: 4)
!2501 = !DILocation(line: 1020, column: 107, scope: !704)
!2502 = !DILocation(line: 1020, column: 137, scope: !704)
!2503 = !DILocation(line: 1020, column: 163, scope: !2504)
!2504 = distinct !DILexicalBlock(scope: !704, file: !352, line: 1020, column: 160)
!2505 = !DILocation(line: 1020, column: 180, scope: !2504)
!2506 = !DILocation(line: 1020, column: 160, scope: !2504)
!2507 = !DILocation(line: 1020, column: 190, scope: !2504)
!2508 = !DILocation(line: 1020, column: 160, scope: !704)
!2509 = !DILocation(line: 1020, column: 160, scope: !2510)
!2510 = !DILexicalBlockFile(scope: !704, file: !352, discriminator: 5)
!2511 = !DILocation(line: 1020, column: 221, scope: !2512)
!2512 = !DILexicalBlockFile(scope: !2504, file: !352, discriminator: 6)
!2513 = !DILocation(line: 1020, column: 239, scope: !2504)
!2514 = !DILocation(line: 1020, column: 249, scope: !2504)
!2515 = !DILocation(line: 1020, column: 274, scope: !2504)
!2516 = !DILocation(line: 1020, column: 205, scope: !2504)
!2517 = !DILocation(line: 1020, column: 293, scope: !2518)
!2518 = !DILexicalBlockFile(scope: !705, file: !352, discriminator: 7)
!2519 = !DILocation(line: 1020, column: 293, scope: !704)
!2520 = !DILocation(line: 1020, column: 293, scope: !2521)
!2521 = !DILexicalBlockFile(scope: !704, file: !352, discriminator: 8)
!2522 = !DILocation(line: 1020, column: 293, scope: !2523)
!2523 = !DILexicalBlockFile(scope: !704, file: !352, discriminator: 9)
!2524 = !DILocation(line: 1020, column: 306, scope: !2411)
!2525 = !DILocation(line: 1020, column: 306, scope: !702)
!2526 = !DILocation(line: 1020, column: 306, scope: !2527)
!2527 = !DILexicalBlockFile(scope: !702, file: !352, discriminator: 11)
!2528 = !DILocation(line: 1021, column: 5, scope: !665)
!2529 = !DILocation(line: 1021, column: 10, scope: !2530)
!2530 = !DILexicalBlockFile(scope: !707, file: !352, discriminator: 1)
!2531 = !DILocation(line: 1021, column: 20, scope: !707)
!2532 = !DILocation(line: 1021, column: 51, scope: !707)
!2533 = !DILocation(line: 1021, column: 61, scope: !710)
!2534 = !DILocation(line: 1021, column: 77, scope: !710)
!2535 = !DILocation(line: 1021, column: 61, scope: !707)
!2536 = !DILocation(line: 1021, column: 92, scope: !2537)
!2537 = !DILexicalBlockFile(scope: !710, file: !352, discriminator: 2)
!2538 = !DILocation(line: 1021, column: 97, scope: !2539)
!2539 = !DILexicalBlockFile(scope: !709, file: !352, discriminator: 4)
!2540 = !DILocation(line: 1021, column: 107, scope: !709)
!2541 = !DILocation(line: 1021, column: 137, scope: !709)
!2542 = !DILocation(line: 1021, column: 163, scope: !2543)
!2543 = distinct !DILexicalBlock(scope: !709, file: !352, line: 1021, column: 160)
!2544 = !DILocation(line: 1021, column: 180, scope: !2543)
!2545 = !DILocation(line: 1021, column: 160, scope: !2543)
!2546 = !DILocation(line: 1021, column: 190, scope: !2543)
!2547 = !DILocation(line: 1021, column: 160, scope: !709)
!2548 = !DILocation(line: 1021, column: 160, scope: !2549)
!2549 = !DILexicalBlockFile(scope: !709, file: !352, discriminator: 5)
!2550 = !DILocation(line: 1021, column: 221, scope: !2551)
!2551 = !DILexicalBlockFile(scope: !2543, file: !352, discriminator: 6)
!2552 = !DILocation(line: 1021, column: 239, scope: !2543)
!2553 = !DILocation(line: 1021, column: 249, scope: !2543)
!2554 = !DILocation(line: 1021, column: 274, scope: !2543)
!2555 = !DILocation(line: 1021, column: 205, scope: !2543)
!2556 = !DILocation(line: 1021, column: 293, scope: !2557)
!2557 = !DILexicalBlockFile(scope: !710, file: !352, discriminator: 7)
!2558 = !DILocation(line: 1021, column: 293, scope: !709)
!2559 = !DILocation(line: 1021, column: 293, scope: !2560)
!2560 = !DILexicalBlockFile(scope: !709, file: !352, discriminator: 8)
!2561 = !DILocation(line: 1021, column: 293, scope: !2562)
!2562 = !DILexicalBlockFile(scope: !709, file: !352, discriminator: 9)
!2563 = !DILocation(line: 1021, column: 306, scope: !2411)
!2564 = !DILocation(line: 1021, column: 306, scope: !707)
!2565 = !DILocation(line: 1021, column: 306, scope: !2566)
!2566 = !DILexicalBlockFile(scope: !707, file: !352, discriminator: 11)
!2567 = !DILocation(line: 1022, column: 9, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !665, file: !352, line: 1022, column: 9)
!2569 = !DILocation(line: 1022, column: 13, scope: !2568)
!2570 = !DILocation(line: 1022, column: 9, scope: !665)
!2571 = !DILocation(line: 1023, column: 75, scope: !2568)
!2572 = !DILocation(line: 1023, column: 9, scope: !2568)
!2573 = !DILocation(line: 1024, column: 9, scope: !2574)
!2574 = distinct !DILexicalBlock(scope: !665, file: !352, line: 1024, column: 9)
!2575 = !DILocation(line: 1024, column: 13, scope: !2574)
!2576 = !DILocation(line: 1024, column: 9, scope: !665)
!2577 = !DILocation(line: 1025, column: 76, scope: !2574)
!2578 = !DILocation(line: 1025, column: 9, scope: !2574)
!2579 = !DILocation(line: 1026, column: 5, scope: !665)
!2580 = !DILocation(line: 1027, column: 1, scope: !665)
!2581 = !DILocation(line: 1208, column: 25, scope: !711)
!2582 = !DILocation(line: 1210, column: 5, scope: !711)
!2583 = !DILocation(line: 1210, column: 22, scope: !711)
!2584 = !DILocation(line: 1212, column: 32, scope: !711)
!2585 = !DILocation(line: 1212, column: 12, scope: !711)
!2586 = !DILocation(line: 1212, column: 8, scope: !711)
!2587 = !DILocation(line: 1213, column: 9, scope: !2588)
!2588 = distinct !DILexicalBlock(scope: !711, file: !352, line: 1213, column: 9)
!2589 = !DILocation(line: 1213, column: 12, scope: !2588)
!2590 = !DILocation(line: 1213, column: 9, scope: !711)
!2591 = !DILocation(line: 1214, column: 9, scope: !2588)
!2592 = !DILocation(line: 1215, column: 13, scope: !711)
!2593 = !DILocation(line: 1215, column: 20, scope: !711)
!2594 = !DILocation(line: 1215, column: 5, scope: !711)
!2595 = !DILocation(line: 1215, column: 9, scope: !711)
!2596 = !DILocation(line: 1215, column: 11, scope: !711)
!2597 = !{!2598, !1247, i64 24}
!2598 = !{!"", !1262, i64 0, !1263, i64 16, !1247, i64 24, !1247, i64 32, !1263, i64 40, !1263, i64 48}
!2599 = !DILocation(line: 1216, column: 17, scope: !711)
!2600 = !DILocation(line: 1216, column: 24, scope: !711)
!2601 = !DILocation(line: 1216, column: 5, scope: !711)
!2602 = !DILocation(line: 1216, column: 9, scope: !711)
!2603 = !DILocation(line: 1216, column: 15, scope: !711)
!2604 = !{!2598, !1263, i64 16}
!2605 = !DILocation(line: 1217, column: 21, scope: !711)
!2606 = !DILocation(line: 1217, column: 8, scope: !711)
!2607 = !DILocation(line: 1217, column: 30, scope: !711)
!2608 = !DILocation(line: 1217, column: 39, scope: !711)
!2609 = !DILocation(line: 1218, column: 17, scope: !711)
!2610 = !DILocation(line: 1218, column: 5, scope: !711)
!2611 = !DILocation(line: 1218, column: 9, scope: !711)
!2612 = !DILocation(line: 1218, column: 15, scope: !711)
!2613 = !{!2598, !1247, i64 32}
!2614 = !DILocation(line: 1219, column: 17, scope: !711)
!2615 = !DILocation(line: 1219, column: 24, scope: !711)
!2616 = !{!1863, !1263, i64 56}
!2617 = !DILocation(line: 1219, column: 5, scope: !711)
!2618 = !DILocation(line: 1219, column: 9, scope: !711)
!2619 = !DILocation(line: 1219, column: 15, scope: !711)
!2620 = !{!2598, !1263, i64 40}
!2621 = !DILocation(line: 1220, column: 36, scope: !711)
!2622 = !DILocation(line: 1220, column: 21, scope: !711)
!2623 = !DILocation(line: 1220, column: 45, scope: !711)
!2624 = !DILocation(line: 1220, column: 5, scope: !711)
!2625 = !DILocation(line: 1220, column: 9, scope: !711)
!2626 = !DILocation(line: 1220, column: 17, scope: !711)
!2627 = !{!2598, !1263, i64 48}
!2628 = !DILocation(line: 1221, column: 23, scope: !711)
!2629 = !DILocation(line: 1221, column: 5, scope: !711)
!2630 = !DILocation(line: 1222, column: 24, scope: !711)
!2631 = !DILocation(line: 1222, column: 12, scope: !711)
!2632 = !DILocation(line: 1222, column: 5, scope: !711)
!2633 = !DILocation(line: 1223, column: 1, scope: !711)
!2634 = !DILocation(line: 1030, column: 25, scope: !855)
!2635 = !DILocation(line: 1030, column: 42, scope: !855)
!2636 = !DILocation(line: 1030, column: 58, scope: !855)
!2637 = !DILocation(line: 1032, column: 5, scope: !855)
!2638 = !DILocation(line: 1032, column: 15, scope: !855)
!2639 = !DILocation(line: 1033, column: 5, scope: !855)
!2640 = !DILocation(line: 1033, column: 15, scope: !855)
!2641 = !DILocation(line: 1034, column: 5, scope: !855)
!2642 = !DILocation(line: 1034, column: 16, scope: !855)
!2643 = !DILocation(line: 1035, column: 5, scope: !855)
!2644 = !DILocation(line: 1035, column: 11, scope: !855)
!2645 = !DILocation(line: 1037, column: 38, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !855, file: !352, line: 1037, column: 9)
!2647 = !DILocation(line: 1037, column: 44, scope: !2646)
!2648 = !DILocation(line: 1037, column: 66, scope: !2646)
!2649 = !DILocation(line: 1037, column: 10, scope: !2646)
!2650 = !DILocation(line: 1037, column: 9, scope: !855)
!2651 = !DILocation(line: 1038, column: 9, scope: !2646)
!2652 = !DILocation(line: 1039, column: 9, scope: !2653)
!2653 = distinct !DILexicalBlock(scope: !855, file: !352, line: 1039, column: 9)
!2654 = !DILocation(line: 1039, column: 19, scope: !2653)
!2655 = !DILocation(line: 1039, column: 33, scope: !2653)
!2656 = !DILocation(line: 1039, column: 36, scope: !2657)
!2657 = !DILexicalBlockFile(scope: !2653, file: !352, discriminator: 1)
!2658 = !DILocation(line: 1039, column: 46, scope: !2653)
!2659 = !DILocation(line: 1039, column: 9, scope: !855)
!2660 = !DILocation(line: 1040, column: 35, scope: !2661)
!2661 = distinct !DILexicalBlock(scope: !2653, file: !352, line: 1039, column: 68)
!2662 = !DILocation(line: 1040, column: 18, scope: !2661)
!2663 = !DILocation(line: 1040, column: 16, scope: !2661)
!2664 = !DILocation(line: 1041, column: 13, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2661, file: !352, line: 1041, column: 13)
!2666 = !DILocation(line: 1041, column: 20, scope: !2665)
!2667 = !DILocation(line: 1041, column: 26, scope: !2665)
!2668 = !DILocation(line: 1041, column: 29, scope: !2669)
!2669 = !DILexicalBlockFile(scope: !2665, file: !352, discriminator: 1)
!2670 = !DILocation(line: 1041, column: 13, scope: !2661)
!2671 = !DILocation(line: 1042, column: 13, scope: !2665)
!2672 = !DILocation(line: 1043, column: 13, scope: !2673)
!2673 = distinct !DILexicalBlock(scope: !2661, file: !352, line: 1043, column: 13)
!2674 = !DILocation(line: 1043, column: 20, scope: !2673)
!2675 = !DILocation(line: 1043, column: 13, scope: !2661)
!2676 = !DILocation(line: 1044, column: 29, scope: !2677)
!2677 = distinct !DILexicalBlock(scope: !2673, file: !352, line: 1043, column: 25)
!2678 = !DILocation(line: 1044, column: 13, scope: !2677)
!2679 = !DILocation(line: 1045, column: 13, scope: !2677)
!2680 = !DILocation(line: 1047, column: 5, scope: !2661)
!2681 = !DILocation(line: 1048, column: 21, scope: !855)
!2682 = !DILocation(line: 1048, column: 5, scope: !855)
!2683 = !DILocation(line: 1048, column: 12, scope: !855)
!2684 = !DILocation(line: 1048, column: 19, scope: !855)
!2685 = !DILocation(line: 1049, column: 17, scope: !855)
!2686 = !DILocation(line: 1049, column: 5, scope: !855)
!2687 = !DILocation(line: 1050, column: 9, scope: !871)
!2688 = !DILocation(line: 1050, column: 18, scope: !871)
!2689 = !DILocation(line: 1050, column: 9, scope: !855)
!2690 = !DILocation(line: 1051, column: 9, scope: !870)
!2691 = !DILocation(line: 1051, column: 19, scope: !870)
!2692 = !DILocation(line: 1051, column: 37, scope: !870)
!2693 = !DILocation(line: 1051, column: 44, scope: !870)
!2694 = !DILocation(line: 1051, column: 24, scope: !870)
!2695 = !DILocation(line: 1052, column: 13, scope: !2696)
!2696 = distinct !DILexicalBlock(scope: !870, file: !352, line: 1052, column: 13)
!2697 = !DILocation(line: 1052, column: 16, scope: !2696)
!2698 = !DILocation(line: 1052, column: 13, scope: !870)
!2699 = !DILocation(line: 1053, column: 13, scope: !2696)
!2700 = !DILocation(line: 1054, column: 9, scope: !870)
!2701 = !DILocation(line: 1054, column: 14, scope: !2702)
!2702 = !DILexicalBlockFile(scope: !873, file: !352, discriminator: 1)
!2703 = !DILocation(line: 1054, column: 24, scope: !873)
!2704 = !DILocation(line: 1054, column: 54, scope: !873)
!2705 = !DILocation(line: 1054, column: 67, scope: !2706)
!2706 = distinct !DILexicalBlock(scope: !873, file: !352, line: 1054, column: 64)
!2707 = !DILocation(line: 1054, column: 84, scope: !2706)
!2708 = !DILocation(line: 1054, column: 64, scope: !2706)
!2709 = !DILocation(line: 1054, column: 94, scope: !2706)
!2710 = !DILocation(line: 1054, column: 64, scope: !873)
!2711 = !DILocation(line: 1054, column: 64, scope: !2712)
!2712 = !DILexicalBlockFile(scope: !873, file: !352, discriminator: 2)
!2713 = !DILocation(line: 1054, column: 125, scope: !2714)
!2714 = !DILexicalBlockFile(scope: !2706, file: !352, discriminator: 3)
!2715 = !DILocation(line: 1054, column: 143, scope: !2706)
!2716 = !DILocation(line: 1054, column: 153, scope: !2706)
!2717 = !DILocation(line: 1054, column: 178, scope: !2706)
!2718 = !DILocation(line: 1054, column: 109, scope: !2706)
!2719 = !DILocation(line: 1054, column: 197, scope: !2720)
!2720 = !DILexicalBlockFile(scope: !870, file: !352, discriminator: 4)
!2721 = !DILocation(line: 1054, column: 197, scope: !873)
!2722 = !DILocation(line: 1054, column: 197, scope: !2723)
!2723 = !DILexicalBlockFile(scope: !873, file: !352, discriminator: 5)
!2724 = !DILocation(line: 1055, column: 5, scope: !871)
!2725 = !DILocation(line: 1055, column: 5, scope: !2726)
!2726 = !DILexicalBlockFile(scope: !871, file: !352, discriminator: 1)
!2727 = !DILocation(line: 1055, column: 5, scope: !870)
!2728 = !DILocation(line: 1056, column: 5, scope: !855)
!2729 = !DILocation(line: 1057, column: 1, scope: !855)
!2730 = !DILocation(line: 149, column: 25, scope: !874)
!2731 = !DILocation(line: 149, column: 41, scope: !874)
!2732 = !DILocation(line: 149, column: 57, scope: !874)
!2733 = !DILocation(line: 151, column: 5, scope: !874)
!2734 = !DILocation(line: 151, column: 18, scope: !874)
!2735 = !DILocation(line: 152, column: 5, scope: !874)
!2736 = !DILocation(line: 152, column: 12, scope: !874)
!2737 = !DILocation(line: 155, column: 28, scope: !874)
!2738 = !DILocation(line: 155, column: 34, scope: !874)
!2739 = !{!1268, !1247, i64 304}
!2740 = !DILocation(line: 155, column: 43, scope: !874)
!2741 = !DILocation(line: 155, column: 13, scope: !874)
!2742 = !DILocation(line: 155, column: 11, scope: !874)
!2743 = !DILocation(line: 156, column: 9, scope: !2744)
!2744 = distinct !DILexicalBlock(scope: !874, file: !352, line: 156, column: 9)
!2745 = !DILocation(line: 156, column: 15, scope: !2744)
!2746 = !DILocation(line: 156, column: 9, scope: !874)
!2747 = !DILocation(line: 157, column: 9, scope: !2744)
!2748 = !DILocation(line: 159, column: 9, scope: !874)
!2749 = !DILocation(line: 159, column: 7, scope: !874)
!2750 = !DILocation(line: 160, column: 9, scope: !888)
!2751 = !DILocation(line: 160, column: 11, scope: !888)
!2752 = !DILocation(line: 160, column: 9, scope: !874)
!2753 = !DILocation(line: 161, column: 9, scope: !887)
!2754 = !DILocation(line: 161, column: 14, scope: !2755)
!2755 = !DILexicalBlockFile(scope: !886, file: !352, discriminator: 1)
!2756 = !DILocation(line: 161, column: 24, scope: !886)
!2757 = !DILocation(line: 161, column: 54, scope: !886)
!2758 = !DILocation(line: 161, column: 41, scope: !886)
!2759 = !DILocation(line: 161, column: 70, scope: !2760)
!2760 = distinct !DILexicalBlock(scope: !886, file: !352, line: 161, column: 67)
!2761 = !DILocation(line: 161, column: 87, scope: !2760)
!2762 = !DILocation(line: 161, column: 67, scope: !2760)
!2763 = !DILocation(line: 161, column: 97, scope: !2760)
!2764 = !DILocation(line: 161, column: 67, scope: !886)
!2765 = !DILocation(line: 161, column: 67, scope: !2766)
!2766 = !DILexicalBlockFile(scope: !886, file: !352, discriminator: 2)
!2767 = !DILocation(line: 161, column: 128, scope: !2768)
!2768 = !DILexicalBlockFile(scope: !2760, file: !352, discriminator: 3)
!2769 = !DILocation(line: 161, column: 146, scope: !2760)
!2770 = !DILocation(line: 161, column: 156, scope: !2760)
!2771 = !DILocation(line: 161, column: 181, scope: !2760)
!2772 = !DILocation(line: 161, column: 112, scope: !2760)
!2773 = !DILocation(line: 161, column: 200, scope: !2774)
!2774 = !DILexicalBlockFile(scope: !887, file: !352, discriminator: 4)
!2775 = !DILocation(line: 161, column: 200, scope: !886)
!2776 = !DILocation(line: 161, column: 200, scope: !2777)
!2777 = !DILexicalBlockFile(scope: !886, file: !352, discriminator: 5)
!2778 = !DILocation(line: 162, column: 9, scope: !887)
!2779 = !DILocation(line: 168, column: 24, scope: !874)
!2780 = !DILocation(line: 168, column: 5, scope: !874)
!2781 = !DILocation(line: 168, column: 12, scope: !874)
!2782 = !DILocation(line: 168, column: 22, scope: !874)
!2783 = !DILocation(line: 169, column: 25, scope: !874)
!2784 = !DILocation(line: 169, column: 5, scope: !874)
!2785 = !DILocation(line: 169, column: 12, scope: !874)
!2786 = !DILocation(line: 169, column: 23, scope: !874)
!2787 = !DILocation(line: 170, column: 5, scope: !874)
!2788 = !DILocation(line: 170, column: 12, scope: !874)
!2789 = !DILocation(line: 170, column: 22, scope: !874)
!2790 = !DILocation(line: 171, column: 5, scope: !874)
!2791 = !DILocation(line: 171, column: 12, scope: !874)
!2792 = !DILocation(line: 171, column: 23, scope: !874)
!2793 = !DILocation(line: 172, column: 22, scope: !874)
!2794 = !DILocation(line: 172, column: 7, scope: !874)
!2795 = !DILocation(line: 172, column: 31, scope: !874)
!2796 = !DILocation(line: 172, column: 40, scope: !874)
!2797 = !DILocation(line: 173, column: 5, scope: !874)
!2798 = !DILocation(line: 173, column: 12, scope: !874)
!2799 = !DILocation(line: 173, column: 18, scope: !874)
!2800 = !DILocation(line: 174, column: 5, scope: !874)
!2801 = !DILocation(line: 174, column: 12, scope: !874)
!2802 = !DILocation(line: 174, column: 24, scope: !874)
!2803 = !DILocation(line: 175, column: 5, scope: !874)
!2804 = !DILocation(line: 175, column: 12, scope: !874)
!2805 = !DILocation(line: 175, column: 19, scope: !874)
!2806 = !DILocation(line: 177, column: 24, scope: !874)
!2807 = !DILocation(line: 177, column: 12, scope: !874)
!2808 = !DILocation(line: 177, column: 5, scope: !874)
!2809 = !DILocation(line: 178, column: 1, scope: !874)
!2810 = !DILocation(line: 109, column: 18, scope: !491)
!2811 = !DILocation(line: 111, column: 9, scope: !2812)
!2812 = distinct !DILexicalBlock(scope: !491, file: !352, line: 111, column: 9)
!2813 = !DILocation(line: 111, column: 23, scope: !2812)
!2814 = !DILocation(line: 111, column: 9, scope: !491)
!2815 = !DILocation(line: 112, column: 37, scope: !2816)
!2816 = distinct !DILexicalBlock(scope: !2812, file: !352, line: 111, column: 29)
!2817 = !DILocation(line: 112, column: 20, scope: !2816)
!2818 = !DILocation(line: 112, column: 9, scope: !2816)
!2819 = !DILocation(line: 112, column: 35, scope: !2816)
!2820 = !DILocation(line: 113, column: 22, scope: !2816)
!2821 = !DILocation(line: 114, column: 5, scope: !2816)
!2822 = !DILocation(line: 115, column: 20, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2812, file: !352, line: 114, column: 12)
!2824 = !DILocation(line: 115, column: 9, scope: !2823)
!2825 = !DILocation(line: 117, column: 1, scope: !491)
!2826 = !DILocation(line: 679, column: 24, scope: !504)
!2827 = !DILocation(line: 681, column: 29, scope: !504)
!2828 = !DILocation(line: 681, column: 14, scope: !504)
!2829 = !DILocation(line: 681, column: 38, scope: !504)
!2830 = !DILocation(line: 681, column: 5, scope: !504)
!2831 = !DILocation(line: 735, column: 25, scope: !509)
!2832 = !DILocation(line: 735, column: 43, scope: !509)
!2833 = !DILocation(line: 737, column: 5, scope: !509)
!2834 = !DILocation(line: 737, column: 12, scope: !509)
!2835 = !DILocation(line: 738, column: 5, scope: !509)
!2836 = !DILocation(line: 738, column: 15, scope: !509)
!2837 = !DILocation(line: 739, column: 5, scope: !509)
!2838 = !DILocation(line: 739, column: 16, scope: !509)
!2839 = !DILocation(line: 739, column: 19, scope: !509)
!2840 = !DILocation(line: 739, column: 25, scope: !509)
!2841 = !DILocation(line: 741, column: 9, scope: !2842)
!2842 = distinct !DILexicalBlock(scope: !509, file: !352, line: 741, column: 9)
!2843 = !DILocation(line: 741, column: 11, scope: !2842)
!2844 = !DILocation(line: 741, column: 15, scope: !2842)
!2845 = !DILocation(line: 741, column: 18, scope: !2846)
!2846 = !DILexicalBlockFile(scope: !2842, file: !352, discriminator: 1)
!2847 = !DILocation(line: 741, column: 40, scope: !2842)
!2848 = !DILocation(line: 741, column: 25, scope: !2842)
!2849 = !DILocation(line: 741, column: 49, scope: !2842)
!2850 = !DILocation(line: 741, column: 20, scope: !2842)
!2851 = !DILocation(line: 741, column: 9, scope: !509)
!2852 = !DILocation(line: 742, column: 25, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2842, file: !352, line: 741, column: 59)
!2854 = !DILocation(line: 742, column: 9, scope: !2853)
!2855 = !DILocation(line: 744, column: 9, scope: !2853)
!2856 = !DILocation(line: 747, column: 9, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !509, file: !352, line: 747, column: 9)
!2858 = !DILocation(line: 747, column: 11, scope: !2857)
!2859 = !DILocation(line: 747, column: 9, scope: !509)
!2860 = !DILocation(line: 748, column: 13, scope: !2861)
!2861 = distinct !DILexicalBlock(scope: !2857, file: !352, line: 747, column: 17)
!2862 = !DILocation(line: 748, column: 20, scope: !2861)
!2863 = !DILocation(line: 748, column: 11, scope: !2861)
!2864 = !DILocation(line: 749, column: 13, scope: !2861)
!2865 = !DILocation(line: 749, column: 20, scope: !2861)
!2866 = !DILocation(line: 749, column: 11, scope: !2861)
!2867 = !DILocation(line: 750, column: 5, scope: !2861)
!2868 = !DILocation(line: 750, column: 16, scope: !2869)
!2869 = distinct !DILexicalBlock(scope: !2857, file: !352, line: 750, column: 16)
!2870 = !DILocation(line: 750, column: 38, scope: !2869)
!2871 = !DILocation(line: 750, column: 23, scope: !2869)
!2872 = !DILocation(line: 750, column: 47, scope: !2869)
!2873 = !DILocation(line: 750, column: 56, scope: !2869)
!2874 = !DILocation(line: 750, column: 18, scope: !2869)
!2875 = !DILocation(line: 750, column: 16, scope: !2857)
!2876 = !DILocation(line: 751, column: 13, scope: !2877)
!2877 = distinct !DILexicalBlock(scope: !2869, file: !352, line: 750, column: 61)
!2878 = !DILocation(line: 751, column: 20, scope: !2877)
!2879 = !DILocation(line: 751, column: 11, scope: !2877)
!2880 = !DILocation(line: 752, column: 13, scope: !2877)
!2881 = !DILocation(line: 752, column: 20, scope: !2877)
!2882 = !DILocation(line: 752, column: 11, scope: !2877)
!2883 = !DILocation(line: 753, column: 5, scope: !2877)
!2884 = !DILocation(line: 754, column: 14, scope: !2885)
!2885 = distinct !DILexicalBlock(scope: !2869, file: !352, line: 753, column: 12)
!2886 = !DILocation(line: 754, column: 21, scope: !2885)
!2887 = !DILocation(line: 754, column: 11, scope: !2885)
!2888 = !DILocation(line: 755, column: 13, scope: !2885)
!2889 = !DILocation(line: 755, column: 15, scope: !2885)
!2890 = !DILocation(line: 755, column: 11, scope: !2885)
!2891 = !DILocation(line: 756, column: 11, scope: !2885)
!2892 = !DILocation(line: 757, column: 13, scope: !2893)
!2893 = distinct !DILexicalBlock(scope: !2885, file: !352, line: 757, column: 13)
!2894 = !DILocation(line: 757, column: 39, scope: !2893)
!2895 = !DILocation(line: 757, column: 24, scope: !2893)
!2896 = !DILocation(line: 757, column: 48, scope: !2893)
!2897 = !DILocation(line: 757, column: 57, scope: !2893)
!2898 = !DILocation(line: 757, column: 19, scope: !2893)
!2899 = !DILocation(line: 757, column: 13, scope: !2885)
!2900 = !DILocation(line: 758, column: 17, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2893, file: !352, line: 757, column: 64)
!2902 = !DILocation(line: 758, column: 24, scope: !2901)
!2903 = !DILocation(line: 758, column: 15, scope: !2901)
!2904 = !DILocation(line: 759, column: 13, scope: !2901)
!2905 = !DILocation(line: 759, column: 21, scope: !2906)
!2906 = !DILexicalBlockFile(scope: !2907, file: !352, discriminator: 2)
!2907 = !DILexicalBlockFile(scope: !2901, file: !352, discriminator: 1)
!2908 = !DILocation(line: 760, column: 21, scope: !2901)
!2909 = !DILocation(line: 760, column: 24, scope: !2901)
!2910 = !DILocation(line: 760, column: 19, scope: !2901)
!2911 = !DILocation(line: 761, column: 9, scope: !2901)
!2912 = !DILocation(line: 762, column: 18, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2893, file: !352, line: 761, column: 16)
!2914 = !DILocation(line: 762, column: 25, scope: !2913)
!2915 = !DILocation(line: 762, column: 54, scope: !2913)
!2916 = !DILocation(line: 762, column: 39, scope: !2913)
!2917 = !DILocation(line: 762, column: 63, scope: !2913)
!2918 = !DILocation(line: 762, column: 35, scope: !2913)
!2919 = !DILocation(line: 762, column: 72, scope: !2913)
!2920 = !DILocation(line: 762, column: 77, scope: !2913)
!2921 = !DILocation(line: 762, column: 84, scope: !2913)
!2922 = !DILocation(line: 762, column: 82, scope: !2913)
!2923 = !DILocation(line: 762, column: 15, scope: !2913)
!2924 = !DILocation(line: 763, column: 17, scope: !2913)
!2925 = !DILocation(line: 763, column: 24, scope: !2913)
!2926 = !DILocation(line: 763, column: 15, scope: !2913)
!2927 = !DILocation(line: 764, column: 13, scope: !2913)
!2928 = !DILocation(line: 764, column: 21, scope: !2929)
!2929 = !DILexicalBlockFile(scope: !2930, file: !352, discriminator: 2)
!2930 = !DILexicalBlockFile(scope: !2913, file: !352, discriminator: 1)
!2931 = !DILocation(line: 765, column: 21, scope: !2913)
!2932 = !DILocation(line: 765, column: 24, scope: !2913)
!2933 = !{!2049, !1247, i64 0}
!2934 = !DILocation(line: 765, column: 19, scope: !2913)
!2935 = !DILocation(line: 768, column: 20, scope: !509)
!2936 = !DILocation(line: 768, column: 12, scope: !509)
!2937 = !DILocation(line: 768, column: 15, scope: !509)
!2938 = !DILocation(line: 768, column: 10, scope: !509)
!2939 = !DILocation(line: 769, column: 21, scope: !509)
!2940 = !DILocation(line: 769, column: 29, scope: !509)
!2941 = !DILocation(line: 769, column: 38, scope: !509)
!2942 = !DILocation(line: 770, column: 12, scope: !509)
!2943 = !DILocation(line: 770, column: 5, scope: !509)
!2944 = !DILocation(line: 771, column: 1, scope: !509)
!2945 = !DILocation(line: 797, column: 29, scope: !519)
!2946 = !DILocation(line: 797, column: 47, scope: !519)
!2947 = !DILocation(line: 797, column: 60, scope: !519)
!2948 = !DILocation(line: 799, column: 5, scope: !519)
!2949 = !DILocation(line: 799, column: 15, scope: !519)
!2950 = !DILocation(line: 800, column: 5, scope: !519)
!2951 = !DILocation(line: 800, column: 12, scope: !519)
!2952 = !DILocation(line: 801, column: 5, scope: !519)
!2953 = !DILocation(line: 801, column: 16, scope: !519)
!2954 = !DILocation(line: 801, column: 19, scope: !519)
!2955 = !DILocation(line: 801, column: 40, scope: !519)
!2956 = !DILocation(line: 801, column: 25, scope: !519)
!2957 = !DILocation(line: 801, column: 49, scope: !519)
!2958 = !DILocation(line: 801, column: 59, scope: !519)
!2959 = !DILocation(line: 801, column: 68, scope: !519)
!2960 = !DILocation(line: 801, column: 71, scope: !519)
!2961 = !DILocation(line: 801, column: 74, scope: !519)
!2962 = !DILocation(line: 801, column: 79, scope: !519)
!2963 = !DILocation(line: 801, column: 85, scope: !519)
!2964 = !DILocation(line: 803, column: 9, scope: !2965)
!2965 = distinct !DILexicalBlock(scope: !519, file: !352, line: 803, column: 9)
!2966 = !DILocation(line: 803, column: 11, scope: !2965)
!2967 = !DILocation(line: 803, column: 15, scope: !2965)
!2968 = !DILocation(line: 803, column: 18, scope: !2969)
!2969 = !DILexicalBlockFile(scope: !2965, file: !352, discriminator: 1)
!2970 = !DILocation(line: 803, column: 23, scope: !2965)
!2971 = !DILocation(line: 803, column: 20, scope: !2965)
!2972 = !DILocation(line: 803, column: 9, scope: !519)
!2973 = !DILocation(line: 804, column: 25, scope: !2974)
!2974 = distinct !DILexicalBlock(scope: !2965, file: !352, line: 803, column: 28)
!2975 = !DILocation(line: 804, column: 9, scope: !2974)
!2976 = !DILocation(line: 806, column: 9, scope: !2974)
!2977 = !DILocation(line: 808, column: 9, scope: !2978)
!2978 = distinct !DILexicalBlock(scope: !519, file: !352, line: 808, column: 9)
!2979 = !DILocation(line: 808, column: 11, scope: !2978)
!2980 = !DILocation(line: 808, column: 9, scope: !519)
!2981 = !DILocation(line: 809, column: 31, scope: !2978)
!2982 = !DILocation(line: 809, column: 38, scope: !2978)
!2983 = !DILocation(line: 809, column: 16, scope: !2978)
!2984 = !DILocation(line: 809, column: 9, scope: !2978)
!2985 = !DILocation(line: 811, column: 10, scope: !519)
!2986 = !DILocation(line: 811, column: 17, scope: !519)
!2987 = !DILocation(line: 811, column: 7, scope: !519)
!2988 = !DILocation(line: 812, column: 9, scope: !519)
!2989 = !DILocation(line: 812, column: 11, scope: !519)
!2990 = !DILocation(line: 812, column: 7, scope: !519)
!2991 = !DILocation(line: 813, column: 7, scope: !519)
!2992 = !DILocation(line: 814, column: 9, scope: !2993)
!2993 = distinct !DILexicalBlock(scope: !519, file: !352, line: 814, column: 9)
!2994 = !DILocation(line: 814, column: 18, scope: !2993)
!2995 = !DILocation(line: 814, column: 15, scope: !2993)
!2996 = !DILocation(line: 814, column: 9, scope: !519)
!2997 = !DILocation(line: 815, column: 13, scope: !2998)
!2998 = distinct !DILexicalBlock(scope: !2993, file: !352, line: 814, column: 27)
!2999 = !DILocation(line: 815, column: 20, scope: !2998)
!3000 = !DILocation(line: 815, column: 11, scope: !2998)
!3001 = !DILocation(line: 816, column: 9, scope: !2998)
!3002 = !DILocation(line: 816, column: 17, scope: !3003)
!3003 = !DILexicalBlockFile(scope: !3004, file: !352, discriminator: 2)
!3004 = !DILexicalBlockFile(scope: !2998, file: !352, discriminator: 1)
!3005 = !DILocation(line: 817, column: 17, scope: !2998)
!3006 = !DILocation(line: 817, column: 20, scope: !2998)
!3007 = !DILocation(line: 817, column: 15, scope: !2998)
!3008 = !DILocation(line: 818, column: 5, scope: !2998)
!3009 = !DILocation(line: 819, column: 14, scope: !3010)
!3010 = distinct !DILexicalBlock(scope: !2993, file: !352, line: 818, column: 12)
!3011 = !DILocation(line: 819, column: 21, scope: !3010)
!3012 = !DILocation(line: 819, column: 33, scope: !3010)
!3013 = !DILocation(line: 819, column: 31, scope: !3010)
!3014 = !DILocation(line: 819, column: 37, scope: !3010)
!3015 = !DILocation(line: 819, column: 42, scope: !3010)
!3016 = !DILocation(line: 819, column: 49, scope: !3010)
!3017 = !DILocation(line: 819, column: 47, scope: !3010)
!3018 = !DILocation(line: 819, column: 11, scope: !3010)
!3019 = !DILocation(line: 820, column: 13, scope: !3010)
!3020 = !DILocation(line: 820, column: 20, scope: !3010)
!3021 = !DILocation(line: 820, column: 11, scope: !3010)
!3022 = !DILocation(line: 821, column: 9, scope: !3010)
!3023 = !DILocation(line: 821, column: 17, scope: !3024)
!3024 = !DILexicalBlockFile(scope: !3025, file: !352, discriminator: 2)
!3025 = !DILexicalBlockFile(scope: !3010, file: !352, discriminator: 1)
!3026 = !DILocation(line: 822, column: 17, scope: !3010)
!3027 = !DILocation(line: 822, column: 20, scope: !3010)
!3028 = !DILocation(line: 822, column: 15, scope: !3010)
!3029 = !DILocation(line: 824, column: 21, scope: !519)
!3030 = !DILocation(line: 824, column: 26, scope: !519)
!3031 = !DILocation(line: 824, column: 35, scope: !519)
!3032 = !DILocation(line: 825, column: 25, scope: !519)
!3033 = !DILocation(line: 825, column: 17, scope: !519)
!3034 = !DILocation(line: 825, column: 20, scope: !519)
!3035 = !DILocation(line: 825, column: 15, scope: !519)
!3036 = !DILocation(line: 826, column: 18, scope: !519)
!3037 = !DILocation(line: 826, column: 13, scope: !519)
!3038 = !DILocation(line: 826, column: 5, scope: !519)
!3039 = !DILocation(line: 826, column: 8, scope: !519)
!3040 = !DILocation(line: 826, column: 16, scope: !519)
!3041 = !DILocation(line: 827, column: 5, scope: !519)
!3042 = !DILocation(line: 827, column: 10, scope: !3043)
!3043 = !DILexicalBlockFile(scope: !533, file: !352, discriminator: 1)
!3044 = !DILocation(line: 827, column: 20, scope: !533)
!3045 = !DILocation(line: 827, column: 50, scope: !533)
!3046 = !DILocation(line: 827, column: 70, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !533, file: !352, line: 827, column: 67)
!3048 = !DILocation(line: 827, column: 87, scope: !3047)
!3049 = !DILocation(line: 827, column: 67, scope: !3047)
!3050 = !DILocation(line: 827, column: 97, scope: !3047)
!3051 = !DILocation(line: 827, column: 67, scope: !533)
!3052 = !DILocation(line: 827, column: 67, scope: !3053)
!3053 = !DILexicalBlockFile(scope: !533, file: !352, discriminator: 2)
!3054 = !DILocation(line: 827, column: 128, scope: !3055)
!3055 = !DILexicalBlockFile(scope: !3047, file: !352, discriminator: 3)
!3056 = !DILocation(line: 827, column: 146, scope: !3047)
!3057 = !DILocation(line: 827, column: 156, scope: !3047)
!3058 = !DILocation(line: 827, column: 181, scope: !3047)
!3059 = !DILocation(line: 827, column: 112, scope: !3047)
!3060 = !DILocation(line: 827, column: 200, scope: !3061)
!3061 = !DILexicalBlockFile(scope: !519, file: !352, discriminator: 4)
!3062 = !DILocation(line: 827, column: 200, scope: !533)
!3063 = !DILocation(line: 827, column: 200, scope: !3064)
!3064 = !DILexicalBlockFile(scope: !533, file: !352, discriminator: 5)
!3065 = !DILocation(line: 828, column: 5, scope: !519)
!3066 = !DILocation(line: 829, column: 1, scope: !519)
!3067 = !DILocation(line: 445, column: 35, scope: !579)
!3068 = !DILocation(line: 445, column: 52, scope: !579)
!3069 = !DILocation(line: 447, column: 5, scope: !579)
!3070 = !DILocation(line: 447, column: 15, scope: !579)
!3071 = !DILocation(line: 449, column: 27, scope: !579)
!3072 = !DILocation(line: 449, column: 34, scope: !579)
!3073 = !DILocation(line: 449, column: 14, scope: !579)
!3074 = !DILocation(line: 449, column: 12, scope: !579)
!3075 = !DILocation(line: 450, column: 9, scope: !3076)
!3076 = distinct !DILexicalBlock(scope: !579, file: !352, line: 450, column: 9)
!3077 = !DILocation(line: 450, column: 16, scope: !3076)
!3078 = !DILocation(line: 450, column: 9, scope: !579)
!3079 = !DILocation(line: 451, column: 16, scope: !3076)
!3080 = !DILocation(line: 451, column: 9, scope: !3076)
!3081 = !DILocation(line: 452, column: 5, scope: !579)
!3082 = !DILocation(line: 452, column: 10, scope: !3083)
!3083 = !DILexicalBlockFile(scope: !585, file: !352, discriminator: 1)
!3084 = !DILocation(line: 452, column: 20, scope: !585)
!3085 = !DILocation(line: 452, column: 50, scope: !585)
!3086 = !DILocation(line: 452, column: 67, scope: !3087)
!3087 = distinct !DILexicalBlock(scope: !585, file: !352, line: 452, column: 64)
!3088 = !DILocation(line: 452, column: 84, scope: !3087)
!3089 = !DILocation(line: 452, column: 64, scope: !3087)
!3090 = !DILocation(line: 452, column: 94, scope: !3087)
!3091 = !DILocation(line: 452, column: 64, scope: !585)
!3092 = !DILocation(line: 452, column: 64, scope: !3093)
!3093 = !DILexicalBlockFile(scope: !585, file: !352, discriminator: 2)
!3094 = !DILocation(line: 452, column: 125, scope: !3095)
!3095 = !DILexicalBlockFile(scope: !3087, file: !352, discriminator: 3)
!3096 = !DILocation(line: 452, column: 143, scope: !3087)
!3097 = !DILocation(line: 452, column: 153, scope: !3087)
!3098 = !DILocation(line: 452, column: 178, scope: !3087)
!3099 = !DILocation(line: 452, column: 109, scope: !3087)
!3100 = !DILocation(line: 452, column: 197, scope: !3101)
!3101 = !DILexicalBlockFile(scope: !579, file: !352, discriminator: 4)
!3102 = !DILocation(line: 452, column: 197, scope: !585)
!3103 = !DILocation(line: 452, column: 197, scope: !3104)
!3104 = !DILexicalBlockFile(scope: !585, file: !352, discriminator: 5)
!3105 = !DILocation(line: 453, column: 21, scope: !579)
!3106 = !DILocation(line: 453, column: 8, scope: !579)
!3107 = !DILocation(line: 453, column: 30, scope: !579)
!3108 = !DILocation(line: 453, column: 39, scope: !579)
!3109 = !DILocation(line: 454, column: 24, scope: !579)
!3110 = !DILocation(line: 454, column: 12, scope: !579)
!3111 = !DILocation(line: 454, column: 5, scope: !579)
!3112 = !DILocation(line: 455, column: 1, scope: !579)
!3113 = !DILocation(line: 781, column: 29, scope: !534)
!3114 = !DILocation(line: 781, column: 47, scope: !534)
!3115 = !DILocation(line: 783, column: 5, scope: !534)
!3116 = !DILocation(line: 783, column: 15, scope: !534)
!3117 = !DILocation(line: 786, column: 23, scope: !3118)
!3118 = distinct !DILexicalBlock(scope: !534, file: !352, line: 786, column: 9)
!3119 = !DILocation(line: 786, column: 31, scope: !3118)
!3120 = !DILocation(line: 786, column: 30, scope: !3118)
!3121 = !DILocation(line: 786, column: 9, scope: !3118)
!3122 = !DILocation(line: 786, column: 34, scope: !3118)
!3123 = !DILocation(line: 786, column: 9, scope: !534)
!3124 = !DILocation(line: 787, column: 9, scope: !3118)
!3125 = !DILocation(line: 789, column: 26, scope: !534)
!3126 = !DILocation(line: 789, column: 12, scope: !534)
!3127 = !DILocation(line: 789, column: 10, scope: !534)
!3128 = !DILocation(line: 791, column: 5, scope: !534)
!3129 = !DILocation(line: 791, column: 10, scope: !3130)
!3130 = !DILexicalBlockFile(scope: !542, file: !352, discriminator: 1)
!3131 = !DILocation(line: 791, column: 20, scope: !542)
!3132 = !DILocation(line: 791, column: 50, scope: !542)
!3133 = !DILocation(line: 791, column: 65, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !542, file: !352, line: 791, column: 62)
!3135 = !DILocation(line: 791, column: 82, scope: !3134)
!3136 = !DILocation(line: 791, column: 62, scope: !3134)
!3137 = !DILocation(line: 791, column: 92, scope: !3134)
!3138 = !DILocation(line: 791, column: 62, scope: !542)
!3139 = !DILocation(line: 791, column: 62, scope: !3140)
!3140 = !DILexicalBlockFile(scope: !542, file: !352, discriminator: 2)
!3141 = !DILocation(line: 791, column: 123, scope: !3142)
!3142 = !DILexicalBlockFile(scope: !3134, file: !352, discriminator: 3)
!3143 = !DILocation(line: 791, column: 141, scope: !3134)
!3144 = !DILocation(line: 791, column: 151, scope: !3134)
!3145 = !DILocation(line: 791, column: 176, scope: !3134)
!3146 = !DILocation(line: 791, column: 107, scope: !3134)
!3147 = !DILocation(line: 791, column: 195, scope: !3148)
!3148 = !DILexicalBlockFile(scope: !534, file: !352, discriminator: 4)
!3149 = !DILocation(line: 791, column: 195, scope: !542)
!3150 = !DILocation(line: 791, column: 195, scope: !3151)
!3151 = !DILexicalBlockFile(scope: !542, file: !352, discriminator: 5)
!3152 = !DILocation(line: 793, column: 26, scope: !534)
!3153 = !DILocation(line: 793, column: 33, scope: !534)
!3154 = !DILocation(line: 793, column: 12, scope: !534)
!3155 = !DILocation(line: 793, column: 5, scope: !534)
!3156 = !DILocation(line: 794, column: 1, scope: !534)
!3157 = !DILocation(line: 458, column: 28, scope: !543)
!3158 = !DILocation(line: 458, column: 46, scope: !543)
!3159 = !DILocation(line: 460, column: 5, scope: !543)
!3160 = !DILocation(line: 460, column: 12, scope: !543)
!3161 = !DILocation(line: 461, column: 5, scope: !543)
!3162 = !DILocation(line: 461, column: 12, scope: !543)
!3163 = !DILocation(line: 461, column: 24, scope: !543)
!3164 = !DILocation(line: 461, column: 31, scope: !543)
!3165 = !DILocation(line: 462, column: 5, scope: !543)
!3166 = !DILocation(line: 462, column: 12, scope: !543)
!3167 = !DILocation(line: 462, column: 25, scope: !543)
!3168 = !DILocation(line: 462, column: 32, scope: !543)
!3169 = !DILocation(line: 463, column: 5, scope: !543)
!3170 = !DILocation(line: 463, column: 16, scope: !543)
!3171 = !DILocation(line: 463, column: 28, scope: !543)
!3172 = !DILocation(line: 463, column: 35, scope: !543)
!3173 = !DILocation(line: 464, column: 5, scope: !543)
!3174 = !DILocation(line: 464, column: 16, scope: !543)
!3175 = !DILocation(line: 464, column: 29, scope: !543)
!3176 = !DILocation(line: 464, column: 36, scope: !543)
!3177 = !DILocation(line: 465, column: 5, scope: !543)
!3178 = !DILocation(line: 465, column: 16, scope: !543)
!3179 = !DILocation(line: 465, column: 37, scope: !543)
!3180 = !DILocation(line: 465, column: 22, scope: !543)
!3181 = !DILocation(line: 465, column: 46, scope: !543)
!3182 = !DILocation(line: 465, column: 56, scope: !543)
!3183 = !DILocation(line: 465, column: 64, scope: !543)
!3184 = !DILocation(line: 465, column: 67, scope: !543)
!3185 = !DILocation(line: 466, column: 5, scope: !543)
!3186 = !DILocation(line: 466, column: 9, scope: !543)
!3187 = !DILocation(line: 468, column: 9, scope: !3188)
!3188 = distinct !DILexicalBlock(scope: !543, file: !352, line: 468, column: 9)
!3189 = !DILocation(line: 468, column: 13, scope: !3188)
!3190 = !DILocation(line: 468, column: 9, scope: !543)
!3191 = !DILocation(line: 469, column: 9, scope: !3188)
!3192 = !DILocation(line: 470, column: 9, scope: !3193)
!3193 = distinct !DILexicalBlock(scope: !543, file: !352, line: 470, column: 9)
!3194 = !DILocation(line: 470, column: 13, scope: !3193)
!3195 = !DILocation(line: 470, column: 11, scope: !3193)
!3196 = !DILocation(line: 470, column: 21, scope: !3193)
!3197 = !DILocation(line: 470, column: 24, scope: !3198)
!3198 = !DILexicalBlockFile(scope: !3193, file: !352, discriminator: 1)
!3199 = !DILocation(line: 470, column: 29, scope: !3193)
!3200 = !DILocation(line: 470, column: 28, scope: !3193)
!3201 = !DILocation(line: 470, column: 26, scope: !3193)
!3202 = !DILocation(line: 470, column: 9, scope: !543)
!3203 = !DILocation(line: 471, column: 14, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3193, file: !352, line: 470, column: 38)
!3205 = !DILocation(line: 471, column: 11, scope: !3204)
!3206 = !DILocation(line: 472, column: 13, scope: !3207)
!3207 = distinct !DILexicalBlock(scope: !3204, file: !352, line: 472, column: 13)
!3208 = !DILocation(line: 472, column: 17, scope: !3207)
!3209 = !DILocation(line: 472, column: 15, scope: !3207)
!3210 = !DILocation(line: 472, column: 13, scope: !3204)
!3211 = !DILocation(line: 473, column: 18, scope: !3207)
!3212 = !DILocation(line: 473, column: 15, scope: !3207)
!3213 = !DILocation(line: 473, column: 13, scope: !3207)
!3214 = !DILocation(line: 474, column: 18, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3207, file: !352, line: 474, column: 18)
!3216 = !DILocation(line: 474, column: 23, scope: !3215)
!3217 = !DILocation(line: 474, column: 22, scope: !3215)
!3218 = !DILocation(line: 474, column: 20, scope: !3215)
!3219 = !DILocation(line: 474, column: 18, scope: !3207)
!3220 = !DILocation(line: 475, column: 18, scope: !3215)
!3221 = !DILocation(line: 475, column: 15, scope: !3215)
!3222 = !DILocation(line: 475, column: 13, scope: !3215)
!3223 = !DILocation(line: 476, column: 5, scope: !3204)
!3224 = !DILocation(line: 480, column: 5, scope: !543)
!3225 = !DILocation(line: 480, column: 12, scope: !543)
!3226 = !DILocation(line: 480, column: 17, scope: !543)
!3227 = !DILocation(line: 481, column: 5, scope: !543)
!3228 = !DILocation(line: 481, column: 12, scope: !3229)
!3229 = !DILexicalBlockFile(scope: !3230, file: !352, discriminator: 2)
!3230 = !DILexicalBlockFile(scope: !543, file: !352, discriminator: 1)
!3231 = !DILocation(line: 481, column: 14, scope: !543)
!3232 = !DILocation(line: 482, column: 13, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !557, file: !352, line: 482, column: 13)
!3234 = !DILocation(line: 482, column: 23, scope: !3233)
!3235 = !DILocation(line: 482, column: 13, scope: !557)
!3236 = !DILocation(line: 483, column: 17, scope: !3237)
!3237 = distinct !DILexicalBlock(scope: !3238, file: !352, line: 483, column: 17)
!3238 = distinct !DILexicalBlock(scope: !3233, file: !352, line: 482, column: 29)
!3239 = !DILocation(line: 483, column: 19, scope: !3237)
!3240 = !DILocation(line: 483, column: 17, scope: !3238)
!3241 = !DILocation(line: 484, column: 30, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3237, file: !352, line: 483, column: 34)
!3243 = !DILocation(line: 484, column: 21, scope: !3242)
!3244 = !DILocation(line: 484, column: 19, scope: !3242)
!3245 = !DILocation(line: 485, column: 21, scope: !3246)
!3246 = distinct !DILexicalBlock(scope: !3242, file: !352, line: 485, column: 21)
!3247 = !DILocation(line: 485, column: 23, scope: !3246)
!3248 = !DILocation(line: 485, column: 21, scope: !3242)
!3249 = !DILocation(line: 486, column: 21, scope: !3246)
!3250 = !DILocation(line: 487, column: 13, scope: !3242)
!3251 = !DILocation(line: 488, column: 28, scope: !3238)
!3252 = !DILocation(line: 488, column: 13, scope: !3238)
!3253 = !DILocation(line: 488, column: 16, scope: !3238)
!3254 = !DILocation(line: 488, column: 26, scope: !3238)
!3255 = !DILocation(line: 490, column: 35, scope: !3238)
!3256 = !DILocation(line: 490, column: 13, scope: !3238)
!3257 = !DILocation(line: 490, column: 24, scope: !3238)
!3258 = !DILocation(line: 490, column: 33, scope: !3238)
!3259 = !DILocation(line: 491, column: 25, scope: !3238)
!3260 = !DILocation(line: 491, column: 23, scope: !3238)
!3261 = !DILocation(line: 493, column: 23, scope: !3238)
!3262 = !DILocation(line: 494, column: 15, scope: !3238)
!3263 = !DILocation(line: 495, column: 9, scope: !3238)
!3264 = !DILocation(line: 498, column: 13, scope: !556)
!3265 = !DILocation(line: 498, column: 24, scope: !556)
!3266 = !DILocation(line: 498, column: 31, scope: !556)
!3267 = !DILocation(line: 499, column: 13, scope: !556)
!3268 = !DILocation(line: 499, column: 24, scope: !556)
!3269 = !DILocation(line: 499, column: 28, scope: !556)
!3270 = !DILocation(line: 501, column: 17, scope: !3271)
!3271 = distinct !DILexicalBlock(scope: !556, file: !352, line: 501, column: 17)
!3272 = !DILocation(line: 501, column: 21, scope: !3271)
!3273 = !DILocation(line: 501, column: 32, scope: !3271)
!3274 = !DILocation(line: 501, column: 19, scope: !3271)
!3275 = !DILocation(line: 501, column: 17, scope: !556)
!3276 = !DILocation(line: 502, column: 21, scope: !3271)
!3277 = !DILocation(line: 502, column: 32, scope: !3271)
!3278 = !DILocation(line: 502, column: 19, scope: !3271)
!3279 = !DILocation(line: 502, column: 17, scope: !3271)
!3280 = !DILocation(line: 503, column: 17, scope: !3281)
!3281 = distinct !DILexicalBlock(scope: !556, file: !352, line: 503, column: 17)
!3282 = !DILocation(line: 503, column: 21, scope: !3281)
!3283 = !DILocation(line: 503, column: 19, scope: !3281)
!3284 = !DILocation(line: 503, column: 17, scope: !556)
!3285 = !DILocation(line: 504, column: 21, scope: !3281)
!3286 = !DILocation(line: 504, column: 19, scope: !3281)
!3287 = !DILocation(line: 504, column: 17, scope: !3281)
!3288 = !DILocation(line: 506, column: 37, scope: !556)
!3289 = !DILocation(line: 506, column: 20, scope: !556)
!3290 = !DILocation(line: 506, column: 32, scope: !556)
!3291 = !DILocation(line: 506, column: 17, scope: !556)
!3292 = !DILocation(line: 507, column: 37, scope: !556)
!3293 = !DILocation(line: 507, column: 47, scope: !556)
!3294 = !DILocation(line: 507, column: 21, scope: !556)
!3295 = !DILocation(line: 507, column: 32, scope: !556)
!3296 = !DILocation(line: 507, column: 18, scope: !556)
!3297 = !DILocation(line: 508, column: 27, scope: !556)
!3298 = !DILocation(line: 508, column: 24, scope: !556)
!3299 = !DILocation(line: 509, column: 26, scope: !556)
!3300 = !DILocation(line: 509, column: 23, scope: !556)
!3301 = !DILocation(line: 510, column: 18, scope: !556)
!3302 = !DILocation(line: 510, column: 15, scope: !556)
!3303 = !DILocation(line: 511, column: 13, scope: !556)
!3304 = !DILocation(line: 512, column: 34, scope: !3305)
!3305 = distinct !DILexicalBlock(scope: !556, file: !352, line: 511, column: 16)
!3306 = !DILocation(line: 512, column: 29, scope: !3305)
!3307 = !DILocation(line: 512, column: 23, scope: !3305)
!3308 = !DILocation(line: 512, column: 27, scope: !3305)
!3309 = !DILocation(line: 513, column: 13, scope: !3305)
!3310 = !DILocation(line: 513, column: 22, scope: !3311)
!3311 = !DILexicalBlockFile(scope: !556, file: !352, discriminator: 1)
!3312 = !DILocation(line: 514, column: 9, scope: !557)
!3313 = !DILocation(line: 515, column: 13, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !557, file: !352, line: 515, column: 13)
!3315 = !DILocation(line: 515, column: 24, scope: !3314)
!3316 = !DILocation(line: 515, column: 13, scope: !557)
!3317 = !DILocation(line: 518, column: 17, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3314, file: !352, line: 515, column: 31)
!3319 = !DILocation(line: 518, column: 15, scope: !3318)
!3320 = !DILocation(line: 520, column: 26, scope: !3318)
!3321 = !DILocation(line: 520, column: 38, scope: !3318)
!3322 = !DILocation(line: 520, column: 24, scope: !3318)
!3323 = !DILocation(line: 522, column: 24, scope: !3318)
!3324 = !DILocation(line: 523, column: 9, scope: !3318)
!3325 = !DILocation(line: 525, column: 5, scope: !543)
!3326 = !DILocation(line: 525, column: 12, scope: !3229)
!3327 = !DILocation(line: 525, column: 14, scope: !543)
!3328 = !DILocation(line: 526, column: 13, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !562, file: !352, line: 526, column: 13)
!3330 = !DILocation(line: 526, column: 24, scope: !3329)
!3331 = !DILocation(line: 526, column: 13, scope: !562)
!3332 = !DILocation(line: 527, column: 17, scope: !3333)
!3333 = distinct !DILexicalBlock(scope: !3334, file: !352, line: 527, column: 17)
!3334 = distinct !DILexicalBlock(scope: !3329, file: !352, line: 526, column: 35)
!3335 = !DILocation(line: 527, column: 19, scope: !3333)
!3336 = !DILocation(line: 527, column: 17, scope: !3334)
!3337 = !DILocation(line: 528, column: 30, scope: !3338)
!3338 = distinct !DILexicalBlock(scope: !3333, file: !352, line: 527, column: 34)
!3339 = !DILocation(line: 528, column: 21, scope: !3338)
!3340 = !DILocation(line: 528, column: 19, scope: !3338)
!3341 = !DILocation(line: 529, column: 21, scope: !3342)
!3342 = distinct !DILexicalBlock(scope: !3338, file: !352, line: 529, column: 21)
!3343 = !DILocation(line: 529, column: 23, scope: !3342)
!3344 = !DILocation(line: 529, column: 21, scope: !3338)
!3345 = !DILocation(line: 530, column: 21, scope: !3342)
!3346 = !DILocation(line: 531, column: 13, scope: !3338)
!3347 = !DILocation(line: 532, column: 27, scope: !3334)
!3348 = !DILocation(line: 532, column: 13, scope: !3334)
!3349 = !DILocation(line: 532, column: 16, scope: !3334)
!3350 = !DILocation(line: 532, column: 25, scope: !3334)
!3351 = !DILocation(line: 534, column: 37, scope: !3334)
!3352 = !DILocation(line: 534, column: 13, scope: !3334)
!3353 = !DILocation(line: 534, column: 25, scope: !3334)
!3354 = !DILocation(line: 534, column: 35, scope: !3334)
!3355 = !DILocation(line: 535, column: 26, scope: !3334)
!3356 = !DILocation(line: 535, column: 24, scope: !3334)
!3357 = !DILocation(line: 537, column: 24, scope: !3334)
!3358 = !DILocation(line: 538, column: 15, scope: !3334)
!3359 = !DILocation(line: 539, column: 9, scope: !3334)
!3360 = !DILocation(line: 542, column: 13, scope: !561)
!3361 = !DILocation(line: 542, column: 24, scope: !561)
!3362 = !DILocation(line: 542, column: 31, scope: !561)
!3363 = !DILocation(line: 543, column: 13, scope: !561)
!3364 = !DILocation(line: 543, column: 24, scope: !561)
!3365 = !DILocation(line: 543, column: 29, scope: !561)
!3366 = !DILocation(line: 543, column: 28, scope: !561)
!3367 = !DILocation(line: 545, column: 17, scope: !3368)
!3368 = distinct !DILexicalBlock(scope: !561, file: !352, line: 545, column: 17)
!3369 = !DILocation(line: 545, column: 26, scope: !3368)
!3370 = !DILocation(line: 545, column: 24, scope: !3368)
!3371 = !DILocation(line: 545, column: 19, scope: !3368)
!3372 = !DILocation(line: 545, column: 17, scope: !561)
!3373 = !DILocation(line: 546, column: 26, scope: !3368)
!3374 = !DILocation(line: 546, column: 24, scope: !3368)
!3375 = !DILocation(line: 546, column: 19, scope: !3368)
!3376 = !DILocation(line: 546, column: 17, scope: !3368)
!3377 = !DILocation(line: 547, column: 17, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !561, file: !352, line: 547, column: 17)
!3379 = !DILocation(line: 547, column: 30, scope: !3378)
!3380 = !DILocation(line: 547, column: 28, scope: !3378)
!3381 = !DILocation(line: 547, column: 19, scope: !3378)
!3382 = !DILocation(line: 547, column: 17, scope: !561)
!3383 = !DILocation(line: 548, column: 30, scope: !3378)
!3384 = !DILocation(line: 548, column: 28, scope: !3378)
!3385 = !DILocation(line: 548, column: 19, scope: !3378)
!3386 = !DILocation(line: 548, column: 17, scope: !3378)
!3387 = !DILocation(line: 550, column: 36, scope: !561)
!3388 = !DILocation(line: 550, column: 20, scope: !561)
!3389 = !DILocation(line: 550, column: 31, scope: !561)
!3390 = !DILocation(line: 550, column: 17, scope: !561)
!3391 = !DILocation(line: 551, column: 38, scope: !561)
!3392 = !DILocation(line: 551, column: 49, scope: !561)
!3393 = !DILocation(line: 551, column: 21, scope: !561)
!3394 = !DILocation(line: 551, column: 33, scope: !561)
!3395 = !DILocation(line: 551, column: 18, scope: !561)
!3396 = !DILocation(line: 552, column: 26, scope: !561)
!3397 = !DILocation(line: 552, column: 23, scope: !561)
!3398 = !DILocation(line: 553, column: 27, scope: !561)
!3399 = !DILocation(line: 553, column: 24, scope: !561)
!3400 = !DILocation(line: 554, column: 18, scope: !561)
!3401 = !DILocation(line: 554, column: 15, scope: !561)
!3402 = !DILocation(line: 555, column: 13, scope: !561)
!3403 = !DILocation(line: 556, column: 34, scope: !3404)
!3404 = distinct !DILexicalBlock(scope: !561, file: !352, line: 555, column: 16)
!3405 = !DILocation(line: 556, column: 29, scope: !3404)
!3406 = !DILocation(line: 556, column: 23, scope: !3404)
!3407 = !DILocation(line: 556, column: 27, scope: !3404)
!3408 = !DILocation(line: 557, column: 13, scope: !3404)
!3409 = !DILocation(line: 557, column: 22, scope: !3410)
!3410 = !DILexicalBlockFile(scope: !561, file: !352, discriminator: 1)
!3411 = !DILocation(line: 558, column: 9, scope: !562)
!3412 = !DILocation(line: 559, column: 13, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !562, file: !352, line: 559, column: 13)
!3414 = !DILocation(line: 559, column: 23, scope: !3413)
!3415 = !DILocation(line: 559, column: 13, scope: !562)
!3416 = !DILocation(line: 562, column: 17, scope: !3417)
!3417 = distinct !DILexicalBlock(scope: !3413, file: !352, line: 559, column: 30)
!3418 = !DILocation(line: 562, column: 15, scope: !3417)
!3419 = !DILocation(line: 564, column: 25, scope: !3417)
!3420 = !DILocation(line: 564, column: 36, scope: !3417)
!3421 = !DILocation(line: 564, column: 23, scope: !3417)
!3422 = !DILocation(line: 566, column: 23, scope: !3417)
!3423 = !DILocation(line: 567, column: 9, scope: !3417)
!3424 = !DILocation(line: 569, column: 8, scope: !543)
!3425 = !DILocation(line: 569, column: 5, scope: !543)
!3426 = !DILocation(line: 571, column: 9, scope: !3427)
!3427 = distinct !DILexicalBlock(scope: !543, file: !352, line: 571, column: 9)
!3428 = !DILocation(line: 571, column: 11, scope: !3427)
!3429 = !DILocation(line: 571, column: 9, scope: !543)
!3430 = !DILocation(line: 572, column: 19, scope: !3427)
!3431 = !DILocation(line: 572, column: 9, scope: !3427)
!3432 = !DILocation(line: 573, column: 24, scope: !543)
!3433 = !DILocation(line: 573, column: 5, scope: !543)
!3434 = !DILocation(line: 573, column: 12, scope: !543)
!3435 = !DILocation(line: 573, column: 22, scope: !543)
!3436 = !DILocation(line: 574, column: 25, scope: !543)
!3437 = !DILocation(line: 574, column: 5, scope: !543)
!3438 = !DILocation(line: 574, column: 12, scope: !543)
!3439 = !DILocation(line: 574, column: 23, scope: !543)
!3440 = !DILocation(line: 575, column: 24, scope: !543)
!3441 = !DILocation(line: 575, column: 5, scope: !543)
!3442 = !DILocation(line: 575, column: 12, scope: !543)
!3443 = !DILocation(line: 575, column: 22, scope: !543)
!3444 = !DILocation(line: 576, column: 25, scope: !543)
!3445 = !DILocation(line: 576, column: 5, scope: !543)
!3446 = !DILocation(line: 576, column: 12, scope: !543)
!3447 = !DILocation(line: 576, column: 23, scope: !543)
!3448 = !DILocation(line: 578, column: 12, scope: !543)
!3449 = !DILocation(line: 578, column: 5, scope: !543)
!3450 = !DILocation(line: 579, column: 1, scope: !543)
!3451 = !DILocation(line: 218, column: 28, scope: !571)
!3452 = !DILocation(line: 218, column: 45, scope: !571)
!3453 = !DILocation(line: 220, column: 5, scope: !571)
!3454 = !DILocation(line: 220, column: 15, scope: !571)
!3455 = !DILocation(line: 221, column: 5, scope: !571)
!3456 = !DILocation(line: 221, column: 12, scope: !571)
!3457 = !DILocation(line: 223, column: 26, scope: !3458)
!3458 = distinct !DILexicalBlock(scope: !571, file: !352, line: 223, column: 9)
!3459 = !DILocation(line: 223, column: 11, scope: !3458)
!3460 = !DILocation(line: 223, column: 35, scope: !3458)
!3461 = !DILocation(line: 223, column: 44, scope: !3458)
!3462 = !DILocation(line: 223, column: 9, scope: !571)
!3463 = !DILocation(line: 224, column: 25, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3458, file: !352, line: 223, column: 50)
!3465 = !DILocation(line: 224, column: 9, scope: !3464)
!3466 = !DILocation(line: 225, column: 9, scope: !3464)
!3467 = !DILocation(line: 228, column: 35, scope: !571)
!3468 = !DILocation(line: 228, column: 42, scope: !571)
!3469 = !DILocation(line: 228, column: 12, scope: !571)
!3470 = !DILocation(line: 228, column: 19, scope: !571)
!3471 = !DILocation(line: 228, column: 30, scope: !571)
!3472 = !DILocation(line: 228, column: 10, scope: !571)
!3473 = !DILocation(line: 229, column: 5, scope: !571)
!3474 = !DILocation(line: 229, column: 12, scope: !571)
!3475 = !DILocation(line: 229, column: 21, scope: !571)
!3476 = !DILocation(line: 230, column: 22, scope: !571)
!3477 = !DILocation(line: 230, column: 7, scope: !571)
!3478 = !DILocation(line: 230, column: 31, scope: !571)
!3479 = !DILocation(line: 230, column: 39, scope: !571)
!3480 = !DILocation(line: 231, column: 5, scope: !571)
!3481 = !DILocation(line: 231, column: 12, scope: !571)
!3482 = !DILocation(line: 231, column: 17, scope: !571)
!3483 = !DILocation(line: 233, column: 9, scope: !3484)
!3484 = distinct !DILexicalBlock(scope: !571, file: !352, line: 233, column: 9)
!3485 = !DILocation(line: 233, column: 16, scope: !3484)
!3486 = !DILocation(line: 233, column: 26, scope: !3484)
!3487 = !DILocation(line: 233, column: 9, scope: !571)
!3488 = !DILocation(line: 234, column: 30, scope: !3489)
!3489 = distinct !DILexicalBlock(scope: !3490, file: !352, line: 234, column: 13)
!3490 = distinct !DILexicalBlock(scope: !3484, file: !352, line: 233, column: 33)
!3491 = !DILocation(line: 234, column: 15, scope: !3489)
!3492 = !DILocation(line: 234, column: 39, scope: !3489)
!3493 = !DILocation(line: 234, column: 48, scope: !3489)
!3494 = !DILocation(line: 234, column: 13, scope: !3490)
!3495 = !DILocation(line: 238, column: 13, scope: !3496)
!3496 = distinct !DILexicalBlock(scope: !3489, file: !352, line: 234, column: 54)
!3497 = !DILocation(line: 238, column: 20, scope: !3496)
!3498 = !DILocation(line: 238, column: 30, scope: !3496)
!3499 = !DILocation(line: 239, column: 13, scope: !3496)
!3500 = !DILocation(line: 239, column: 20, scope: !3496)
!3501 = !DILocation(line: 239, column: 31, scope: !3496)
!3502 = !DILocation(line: 240, column: 9, scope: !3496)
!3503 = !DILocation(line: 242, column: 25, scope: !3504)
!3504 = distinct !DILexicalBlock(scope: !3489, file: !352, line: 240, column: 16)
!3505 = !DILocation(line: 242, column: 32, scope: !3504)
!3506 = !DILocation(line: 242, column: 43, scope: !3504)
!3507 = !DILocation(line: 242, column: 23, scope: !3504)
!3508 = !DILocation(line: 243, column: 23, scope: !3504)
!3509 = !DILocation(line: 243, column: 30, scope: !3504)
!3510 = !DILocation(line: 243, column: 13, scope: !3504)
!3511 = !DILocation(line: 246, column: 32, scope: !3504)
!3512 = !DILocation(line: 246, column: 13, scope: !3504)
!3513 = !DILocation(line: 246, column: 20, scope: !3504)
!3514 = !DILocation(line: 246, column: 30, scope: !3504)
!3515 = !DILocation(line: 247, column: 13, scope: !3504)
!3516 = !DILocation(line: 247, column: 20, scope: !3504)
!3517 = !DILocation(line: 247, column: 30, scope: !3504)
!3518 = !DILocation(line: 249, column: 5, scope: !3490)
!3519 = !DILocation(line: 250, column: 12, scope: !571)
!3520 = !DILocation(line: 250, column: 5, scope: !571)
!3521 = !DILocation(line: 251, column: 1, scope: !571)
!3522 = !DILocation(line: 87, column: 21, scope: !565)
!3523 = !DILocation(line: 88, column: 5, scope: !565)
!3524 = !DILocation(line: 88, column: 12, scope: !565)
!3525 = !DILocation(line: 91, column: 9, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !565, file: !352, line: 91, column: 9)
!3527 = !DILocation(line: 91, column: 13, scope: !3526)
!3528 = !DILocation(line: 91, column: 9, scope: !565)
!3529 = !DILocation(line: 92, column: 25, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3526, file: !352, line: 91, column: 56)
!3531 = !DILocation(line: 92, column: 9, scope: !3530)
!3532 = !DILocation(line: 94, column: 9, scope: !3530)
!3533 = !DILocation(line: 96, column: 9, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !565, file: !352, line: 96, column: 9)
!3535 = !DILocation(line: 96, column: 9, scope: !565)
!3536 = !DILocation(line: 97, column: 22, scope: !3537)
!3537 = distinct !DILexicalBlock(scope: !3534, file: !352, line: 96, column: 24)
!3538 = !DILocation(line: 98, column: 27, scope: !3537)
!3539 = !DILocation(line: 98, column: 16, scope: !3537)
!3540 = !DILocation(line: 98, column: 9, scope: !3537)
!3541 = !DILocation(line: 100, column: 9, scope: !565)
!3542 = !DILocation(line: 100, column: 7, scope: !565)
!3543 = !DILocation(line: 101, column: 9, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !565, file: !352, line: 101, column: 9)
!3545 = !DILocation(line: 101, column: 11, scope: !3544)
!3546 = !DILocation(line: 101, column: 9, scope: !565)
!3547 = !DILocation(line: 102, column: 16, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3544, file: !352, line: 101, column: 26)
!3549 = !DILocation(line: 102, column: 9, scope: !3548)
!3550 = !DILocation(line: 104, column: 5, scope: !565)
!3551 = !DILocation(line: 105, column: 5, scope: !565)
!3552 = !DILocation(line: 106, column: 1, scope: !565)
!3553 = !DILocation(line: 323, column: 27, scope: !586)
!3554 = !DILocation(line: 323, column: 44, scope: !586)
!3555 = !DILocation(line: 325, column: 5, scope: !586)
!3556 = !DILocation(line: 325, column: 15, scope: !586)
!3557 = !DILocation(line: 325, column: 20, scope: !586)
!3558 = !DILocation(line: 328, column: 21, scope: !594)
!3559 = !DILocation(line: 328, column: 9, scope: !594)
!3560 = !DILocation(line: 328, column: 30, scope: !594)
!3561 = !DILocation(line: 328, column: 27, scope: !594)
!3562 = !DILocation(line: 328, column: 9, scope: !586)
!3563 = !DILocation(line: 329, column: 9, scope: !593)
!3564 = !DILocation(line: 329, column: 19, scope: !593)
!3565 = !DILocation(line: 330, column: 9, scope: !593)
!3566 = !DILocation(line: 330, column: 19, scope: !593)
!3567 = !DILocation(line: 330, column: 39, scope: !593)
!3568 = !DILocation(line: 330, column: 23, scope: !593)
!3569 = !DILocation(line: 331, column: 13, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !593, file: !352, line: 331, column: 13)
!3571 = !DILocation(line: 331, column: 15, scope: !3570)
!3572 = !DILocation(line: 331, column: 13, scope: !593)
!3573 = !DILocation(line: 332, column: 13, scope: !3570)
!3574 = !DILocation(line: 333, column: 31, scope: !593)
!3575 = !DILocation(line: 333, column: 38, scope: !593)
!3576 = !DILocation(line: 333, column: 18, scope: !593)
!3577 = !DILocation(line: 333, column: 16, scope: !593)
!3578 = !DILocation(line: 334, column: 9, scope: !593)
!3579 = !DILocation(line: 334, column: 14, scope: !3580)
!3580 = !DILexicalBlockFile(scope: !597, file: !352, discriminator: 1)
!3581 = !DILocation(line: 334, column: 24, scope: !597)
!3582 = !DILocation(line: 334, column: 54, scope: !597)
!3583 = !DILocation(line: 334, column: 66, scope: !3584)
!3584 = distinct !DILexicalBlock(scope: !597, file: !352, line: 334, column: 63)
!3585 = !DILocation(line: 334, column: 83, scope: !3584)
!3586 = !DILocation(line: 334, column: 63, scope: !3584)
!3587 = !DILocation(line: 334, column: 93, scope: !3584)
!3588 = !DILocation(line: 334, column: 63, scope: !597)
!3589 = !DILocation(line: 334, column: 63, scope: !3590)
!3590 = !DILexicalBlockFile(scope: !597, file: !352, discriminator: 2)
!3591 = !DILocation(line: 334, column: 124, scope: !3592)
!3592 = !DILexicalBlockFile(scope: !3584, file: !352, discriminator: 3)
!3593 = !DILocation(line: 334, column: 142, scope: !3584)
!3594 = !DILocation(line: 334, column: 152, scope: !3584)
!3595 = !DILocation(line: 334, column: 177, scope: !3584)
!3596 = !DILocation(line: 334, column: 108, scope: !3584)
!3597 = !DILocation(line: 334, column: 196, scope: !3598)
!3598 = !DILexicalBlockFile(scope: !593, file: !352, discriminator: 4)
!3599 = !DILocation(line: 334, column: 196, scope: !597)
!3600 = !DILocation(line: 334, column: 196, scope: !3601)
!3601 = !DILexicalBlockFile(scope: !597, file: !352, discriminator: 5)
!3602 = !DILocation(line: 335, column: 16, scope: !593)
!3603 = !DILocation(line: 335, column: 9, scope: !593)
!3604 = !DILocation(line: 336, column: 5, scope: !594)
!3605 = !DILocation(line: 339, column: 26, scope: !3606)
!3606 = distinct !DILexicalBlock(scope: !586, file: !352, line: 339, column: 9)
!3607 = !DILocation(line: 339, column: 11, scope: !3606)
!3608 = !DILocation(line: 339, column: 35, scope: !3606)
!3609 = !DILocation(line: 339, column: 44, scope: !3606)
!3610 = !DILocation(line: 339, column: 9, scope: !586)
!3611 = !DILocation(line: 342, column: 9, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3606, file: !352, line: 339, column: 50)
!3613 = !DILocation(line: 342, column: 16, scope: !3612)
!3614 = !DILocation(line: 342, column: 26, scope: !3612)
!3615 = !DILocation(line: 343, column: 9, scope: !3612)
!3616 = !DILocation(line: 343, column: 16, scope: !3612)
!3617 = !DILocation(line: 343, column: 27, scope: !3612)
!3618 = !DILocation(line: 344, column: 5, scope: !3612)
!3619 = !DILocation(line: 346, column: 27, scope: !586)
!3620 = !DILocation(line: 346, column: 10, scope: !586)
!3621 = !DILocation(line: 346, column: 8, scope: !586)
!3622 = !DILocation(line: 347, column: 9, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !586, file: !352, line: 347, column: 9)
!3624 = !DILocation(line: 347, column: 12, scope: !3623)
!3625 = !DILocation(line: 347, column: 9, scope: !586)
!3626 = !DILocation(line: 348, column: 9, scope: !3623)
!3627 = !DILocation(line: 350, column: 9, scope: !3628)
!3628 = distinct !DILexicalBlock(scope: !586, file: !352, line: 350, column: 9)
!3629 = !DILocation(line: 350, column: 16, scope: !3628)
!3630 = !DILocation(line: 350, column: 23, scope: !3628)
!3631 = !DILocation(line: 350, column: 9, scope: !586)
!3632 = !DILocation(line: 351, column: 33, scope: !3628)
!3633 = !DILocation(line: 351, column: 16, scope: !3628)
!3634 = !DILocation(line: 351, column: 9, scope: !3628)
!3635 = !DILocation(line: 353, column: 5, scope: !586)
!3636 = !DILocation(line: 353, column: 32, scope: !3637)
!3637 = !DILexicalBlockFile(scope: !3638, file: !352, discriminator: 2)
!3638 = !DILexicalBlockFile(scope: !586, file: !352, discriminator: 1)
!3639 = !DILocation(line: 353, column: 20, scope: !586)
!3640 = !DILocation(line: 353, column: 18, scope: !586)
!3641 = !DILocation(line: 353, column: 37, scope: !586)
!3642 = !DILocation(line: 354, column: 9, scope: !601)
!3643 = !DILocation(line: 354, column: 16, scope: !601)
!3644 = !DILocation(line: 354, column: 21, scope: !601)
!3645 = !DILocation(line: 355, column: 13, scope: !600)
!3646 = !DILocation(line: 355, column: 20, scope: !600)
!3647 = !DILocation(line: 355, column: 31, scope: !600)
!3648 = !DILocation(line: 355, column: 13, scope: !601)
!3649 = !DILocation(line: 356, column: 13, scope: !599)
!3650 = !DILocation(line: 356, column: 20, scope: !599)
!3651 = !DILocation(line: 356, column: 50, scope: !599)
!3652 = !DILocation(line: 356, column: 35, scope: !599)
!3653 = !DILocation(line: 356, column: 59, scope: !599)
!3654 = !DILocation(line: 356, column: 24, scope: !599)
!3655 = !DILocation(line: 357, column: 17, scope: !605)
!3656 = !DILocation(line: 357, column: 19, scope: !605)
!3657 = !DILocation(line: 357, column: 17, scope: !599)
!3658 = !DILocation(line: 358, column: 17, scope: !604)
!3659 = !DILocation(line: 358, column: 22, scope: !3660)
!3660 = !DILexicalBlockFile(scope: !603, file: !352, discriminator: 1)
!3661 = !DILocation(line: 358, column: 32, scope: !603)
!3662 = !DILocation(line: 358, column: 62, scope: !603)
!3663 = !DILocation(line: 358, column: 77, scope: !3664)
!3664 = distinct !DILexicalBlock(scope: !603, file: !352, line: 358, column: 74)
!3665 = !DILocation(line: 358, column: 94, scope: !3664)
!3666 = !DILocation(line: 358, column: 74, scope: !3664)
!3667 = !DILocation(line: 358, column: 104, scope: !3664)
!3668 = !DILocation(line: 358, column: 74, scope: !603)
!3669 = !DILocation(line: 358, column: 74, scope: !3670)
!3670 = !DILexicalBlockFile(scope: !603, file: !352, discriminator: 2)
!3671 = !DILocation(line: 358, column: 135, scope: !3672)
!3672 = !DILexicalBlockFile(scope: !3664, file: !352, discriminator: 3)
!3673 = !DILocation(line: 358, column: 153, scope: !3664)
!3674 = !DILocation(line: 358, column: 163, scope: !3664)
!3675 = !DILocation(line: 358, column: 188, scope: !3664)
!3676 = !DILocation(line: 358, column: 119, scope: !3664)
!3677 = !DILocation(line: 358, column: 207, scope: !3678)
!3678 = !DILexicalBlockFile(scope: !604, file: !352, discriminator: 4)
!3679 = !DILocation(line: 358, column: 207, scope: !603)
!3680 = !DILocation(line: 358, column: 207, scope: !3681)
!3681 = !DILexicalBlockFile(scope: !603, file: !352, discriminator: 5)
!3682 = !DILocation(line: 359, column: 17, scope: !604)
!3683 = !DILocation(line: 359, column: 22, scope: !3684)
!3684 = !DILexicalBlockFile(scope: !607, file: !352, discriminator: 1)
!3685 = !DILocation(line: 359, column: 32, scope: !607)
!3686 = !DILocation(line: 359, column: 62, scope: !607)
!3687 = !DILocation(line: 359, column: 75, scope: !3688)
!3688 = distinct !DILexicalBlock(scope: !607, file: !352, line: 359, column: 72)
!3689 = !DILocation(line: 359, column: 92, scope: !3688)
!3690 = !DILocation(line: 359, column: 72, scope: !3688)
!3691 = !DILocation(line: 359, column: 102, scope: !3688)
!3692 = !DILocation(line: 359, column: 72, scope: !607)
!3693 = !DILocation(line: 359, column: 72, scope: !3694)
!3694 = !DILexicalBlockFile(scope: !607, file: !352, discriminator: 2)
!3695 = !DILocation(line: 359, column: 133, scope: !3696)
!3696 = !DILexicalBlockFile(scope: !3688, file: !352, discriminator: 3)
!3697 = !DILocation(line: 359, column: 151, scope: !3688)
!3698 = !DILocation(line: 359, column: 161, scope: !3688)
!3699 = !DILocation(line: 359, column: 186, scope: !3688)
!3700 = !DILocation(line: 359, column: 117, scope: !3688)
!3701 = !DILocation(line: 359, column: 205, scope: !3678)
!3702 = !DILocation(line: 359, column: 205, scope: !607)
!3703 = !DILocation(line: 359, column: 205, scope: !3704)
!3704 = !DILexicalBlockFile(scope: !607, file: !352, discriminator: 5)
!3705 = !DILocation(line: 360, column: 17, scope: !604)
!3706 = !DILocation(line: 362, column: 27, scope: !599)
!3707 = !DILocation(line: 362, column: 34, scope: !599)
!3708 = !DILocation(line: 362, column: 13, scope: !599)
!3709 = !DILocation(line: 362, column: 16, scope: !599)
!3710 = !DILocation(line: 362, column: 25, scope: !599)
!3711 = !DILocation(line: 364, column: 44, scope: !599)
!3712 = !DILocation(line: 364, column: 13, scope: !599)
!3713 = !DILocation(line: 364, column: 20, scope: !599)
!3714 = !DILocation(line: 364, column: 32, scope: !599)
!3715 = !DILocation(line: 364, column: 42, scope: !599)
!3716 = !DILocation(line: 365, column: 33, scope: !599)
!3717 = !DILocation(line: 365, column: 13, scope: !599)
!3718 = !DILocation(line: 365, column: 20, scope: !599)
!3719 = !DILocation(line: 365, column: 31, scope: !599)
!3720 = !DILocation(line: 367, column: 13, scope: !599)
!3721 = !DILocation(line: 367, column: 20, scope: !599)
!3722 = !DILocation(line: 367, column: 31, scope: !599)
!3723 = !DILocation(line: 368, column: 9, scope: !600)
!3724 = !DILocation(line: 368, column: 9, scope: !3725)
!3725 = !DILexicalBlockFile(scope: !600, file: !352, discriminator: 1)
!3726 = !DILocation(line: 368, column: 9, scope: !599)
!3727 = !DILocation(line: 369, column: 26, scope: !601)
!3728 = !DILocation(line: 369, column: 11, scope: !601)
!3729 = !DILocation(line: 369, column: 35, scope: !601)
!3730 = !DILocation(line: 369, column: 43, scope: !601)
!3731 = !DILocation(line: 370, column: 9, scope: !601)
!3732 = !DILocation(line: 370, column: 16, scope: !601)
!3733 = !DILocation(line: 370, column: 26, scope: !601)
!3734 = !DILocation(line: 371, column: 54, scope: !601)
!3735 = !DILocation(line: 371, column: 33, scope: !601)
!3736 = !DILocation(line: 371, column: 40, scope: !601)
!3737 = !DILocation(line: 371, column: 9, scope: !601)
!3738 = !DILocation(line: 371, column: 16, scope: !601)
!3739 = !DILocation(line: 371, column: 28, scope: !601)
!3740 = !DILocation(line: 371, column: 52, scope: !601)
!3741 = !DILocation(line: 372, column: 13, scope: !610)
!3742 = !DILocation(line: 372, column: 20, scope: !610)
!3743 = !DILocation(line: 372, column: 27, scope: !610)
!3744 = !DILocation(line: 372, column: 33, scope: !610)
!3745 = !DILocation(line: 372, column: 53, scope: !3746)
!3746 = !DILexicalBlockFile(scope: !610, file: !352, discriminator: 1)
!3747 = !DILocation(line: 372, column: 38, scope: !610)
!3748 = !DILocation(line: 372, column: 62, scope: !610)
!3749 = !DILocation(line: 372, column: 73, scope: !610)
!3750 = !DILocation(line: 372, column: 80, scope: !610)
!3751 = !DILocation(line: 372, column: 71, scope: !610)
!3752 = !DILocation(line: 372, column: 13, scope: !601)
!3753 = !DILocation(line: 372, column: 90, scope: !3754)
!3754 = !DILexicalBlockFile(scope: !609, file: !352, discriminator: 2)
!3755 = !DILocation(line: 372, column: 100, scope: !609)
!3756 = !DILocation(line: 372, column: 119, scope: !609)
!3757 = !DILocation(line: 372, column: 105, scope: !609)
!3758 = !DILocation(line: 372, column: 153, scope: !609)
!3759 = !DILocation(line: 372, column: 158, scope: !3760)
!3760 = !DILexicalBlockFile(scope: !612, file: !352, discriminator: 3)
!3761 = !DILocation(line: 372, column: 168, scope: !612)
!3762 = !DILocation(line: 372, column: 198, scope: !612)
!3763 = !DILocation(line: 372, column: 211, scope: !3764)
!3764 = distinct !DILexicalBlock(scope: !612, file: !352, line: 372, column: 208)
!3765 = !DILocation(line: 372, column: 228, scope: !3764)
!3766 = !DILocation(line: 372, column: 208, scope: !3764)
!3767 = !DILocation(line: 372, column: 238, scope: !3764)
!3768 = !DILocation(line: 372, column: 208, scope: !612)
!3769 = !DILocation(line: 372, column: 208, scope: !3770)
!3770 = !DILexicalBlockFile(scope: !612, file: !352, discriminator: 4)
!3771 = !DILocation(line: 372, column: 269, scope: !3772)
!3772 = !DILexicalBlockFile(scope: !3764, file: !352, discriminator: 5)
!3773 = !DILocation(line: 372, column: 287, scope: !3764)
!3774 = !DILocation(line: 372, column: 297, scope: !3764)
!3775 = !DILocation(line: 372, column: 322, scope: !3764)
!3776 = !DILocation(line: 372, column: 253, scope: !3764)
!3777 = !DILocation(line: 372, column: 341, scope: !3778)
!3778 = !DILexicalBlockFile(scope: !609, file: !352, discriminator: 6)
!3779 = !DILocation(line: 372, column: 341, scope: !612)
!3780 = !DILocation(line: 372, column: 341, scope: !3781)
!3781 = !DILexicalBlockFile(scope: !612, file: !352, discriminator: 7)
!3782 = !DILocation(line: 372, column: 354, scope: !3783)
!3783 = !DILexicalBlockFile(scope: !610, file: !352, discriminator: 8)
!3784 = !DILocation(line: 372, column: 354, scope: !609)
!3785 = !DILocation(line: 374, column: 5, scope: !586)
!3786 = !DILocation(line: 374, column: 10, scope: !3787)
!3787 = !DILexicalBlockFile(scope: !614, file: !352, discriminator: 1)
!3788 = !DILocation(line: 374, column: 20, scope: !614)
!3789 = !DILocation(line: 374, column: 50, scope: !614)
!3790 = !DILocation(line: 374, column: 63, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !614, file: !352, line: 374, column: 60)
!3792 = !DILocation(line: 374, column: 80, scope: !3791)
!3793 = !DILocation(line: 374, column: 60, scope: !3791)
!3794 = !DILocation(line: 374, column: 90, scope: !3791)
!3795 = !DILocation(line: 374, column: 60, scope: !614)
!3796 = !DILocation(line: 374, column: 60, scope: !3797)
!3797 = !DILexicalBlockFile(scope: !614, file: !352, discriminator: 2)
!3798 = !DILocation(line: 374, column: 121, scope: !3799)
!3799 = !DILexicalBlockFile(scope: !3791, file: !352, discriminator: 3)
!3800 = !DILocation(line: 374, column: 139, scope: !3791)
!3801 = !DILocation(line: 374, column: 149, scope: !3791)
!3802 = !DILocation(line: 374, column: 174, scope: !3791)
!3803 = !DILocation(line: 374, column: 105, scope: !3791)
!3804 = !DILocation(line: 374, column: 193, scope: !3805)
!3805 = !DILexicalBlockFile(scope: !586, file: !352, discriminator: 4)
!3806 = !DILocation(line: 374, column: 193, scope: !614)
!3807 = !DILocation(line: 374, column: 193, scope: !3808)
!3808 = !DILexicalBlockFile(scope: !614, file: !352, discriminator: 5)
!3809 = !DILocation(line: 375, column: 9, scope: !3810)
!3810 = distinct !DILexicalBlock(scope: !586, file: !352, line: 375, column: 9)
!3811 = !DILocation(line: 375, column: 9, scope: !586)
!3812 = !DILocation(line: 376, column: 9, scope: !3810)
!3813 = !DILocation(line: 377, column: 58, scope: !586)
!3814 = !DILocation(line: 377, column: 5, scope: !586)
!3815 = !DILocation(line: 378, column: 1, scope: !586)
!3816 = !DILocation(line: 309, column: 28, scope: !615)
!3817 = !DILocation(line: 311, column: 5, scope: !615)
!3818 = !DILocation(line: 311, column: 15, scope: !615)
!3819 = !DILocation(line: 313, column: 5, scope: !615)
!3820 = !DILocation(line: 313, column: 32, scope: !3821)
!3821 = !DILexicalBlockFile(scope: !3822, file: !352, discriminator: 2)
!3822 = !DILexicalBlockFile(scope: !615, file: !352, discriminator: 1)
!3823 = !DILocation(line: 313, column: 20, scope: !615)
!3824 = !DILocation(line: 313, column: 18, scope: !615)
!3825 = !DILocation(line: 313, column: 37, scope: !615)
!3826 = !DILocation(line: 314, column: 9, scope: !621)
!3827 = !DILocation(line: 314, column: 14, scope: !3828)
!3828 = !DILexicalBlockFile(scope: !620, file: !352, discriminator: 1)
!3829 = !DILocation(line: 314, column: 24, scope: !620)
!3830 = !DILocation(line: 314, column: 54, scope: !620)
!3831 = !DILocation(line: 314, column: 69, scope: !3832)
!3832 = distinct !DILexicalBlock(scope: !620, file: !352, line: 314, column: 66)
!3833 = !DILocation(line: 314, column: 86, scope: !3832)
!3834 = !DILocation(line: 314, column: 66, scope: !3832)
!3835 = !DILocation(line: 314, column: 96, scope: !3832)
!3836 = !DILocation(line: 314, column: 66, scope: !620)
!3837 = !DILocation(line: 314, column: 66, scope: !3838)
!3838 = !DILexicalBlockFile(scope: !620, file: !352, discriminator: 2)
!3839 = !DILocation(line: 314, column: 127, scope: !3840)
!3840 = !DILexicalBlockFile(scope: !3832, file: !352, discriminator: 3)
!3841 = !DILocation(line: 314, column: 145, scope: !3832)
!3842 = !DILocation(line: 314, column: 155, scope: !3832)
!3843 = !DILocation(line: 314, column: 180, scope: !3832)
!3844 = !DILocation(line: 314, column: 111, scope: !3832)
!3845 = !DILocation(line: 314, column: 199, scope: !3846)
!3846 = !DILexicalBlockFile(scope: !621, file: !352, discriminator: 4)
!3847 = !DILocation(line: 314, column: 199, scope: !620)
!3848 = !DILocation(line: 314, column: 199, scope: !3849)
!3849 = !DILexicalBlockFile(scope: !620, file: !352, discriminator: 5)
!3850 = !DILocation(line: 316, column: 5, scope: !615)
!3851 = !DILocation(line: 316, column: 10, scope: !3852)
!3852 = !DILexicalBlockFile(scope: !623, file: !352, discriminator: 1)
!3853 = !DILocation(line: 316, column: 20, scope: !623)
!3854 = !DILocation(line: 316, column: 50, scope: !623)
!3855 = !DILocation(line: 316, column: 63, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !623, file: !352, line: 316, column: 60)
!3857 = !DILocation(line: 316, column: 80, scope: !3856)
!3858 = !DILocation(line: 316, column: 60, scope: !3856)
!3859 = !DILocation(line: 316, column: 90, scope: !3856)
!3860 = !DILocation(line: 316, column: 60, scope: !623)
!3861 = !DILocation(line: 316, column: 60, scope: !3862)
!3862 = !DILexicalBlockFile(scope: !623, file: !352, discriminator: 2)
!3863 = !DILocation(line: 316, column: 121, scope: !3864)
!3864 = !DILexicalBlockFile(scope: !3856, file: !352, discriminator: 3)
!3865 = !DILocation(line: 316, column: 139, scope: !3856)
!3866 = !DILocation(line: 316, column: 149, scope: !3856)
!3867 = !DILocation(line: 316, column: 174, scope: !3856)
!3868 = !DILocation(line: 316, column: 105, scope: !3856)
!3869 = !DILocation(line: 316, column: 193, scope: !3870)
!3870 = !DILexicalBlockFile(scope: !615, file: !352, discriminator: 4)
!3871 = !DILocation(line: 316, column: 193, scope: !623)
!3872 = !DILocation(line: 316, column: 193, scope: !3873)
!3873 = !DILexicalBlockFile(scope: !623, file: !352, discriminator: 5)
!3874 = !DILocation(line: 317, column: 9, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !615, file: !352, line: 317, column: 9)
!3876 = !DILocation(line: 317, column: 9, scope: !615)
!3877 = !DILocation(line: 318, column: 9, scope: !3875)
!3878 = !DILocation(line: 319, column: 58, scope: !615)
!3879 = !DILocation(line: 319, column: 5, scope: !615)
!3880 = !DILocation(line: 320, column: 1, scope: !615)
!3881 = !DILocation(line: 181, column: 24, scope: !659)
!3882 = !DILocation(line: 181, column: 41, scope: !659)
!3883 = !DILocation(line: 183, column: 5, scope: !659)
!3884 = !DILocation(line: 183, column: 15, scope: !659)
!3885 = !DILocation(line: 184, column: 5, scope: !659)
!3886 = !DILocation(line: 184, column: 12, scope: !659)
!3887 = !DILocation(line: 186, column: 26, scope: !3888)
!3888 = distinct !DILexicalBlock(scope: !659, file: !352, line: 186, column: 9)
!3889 = !DILocation(line: 186, column: 11, scope: !3888)
!3890 = !DILocation(line: 186, column: 35, scope: !3888)
!3891 = !DILocation(line: 186, column: 44, scope: !3888)
!3892 = !DILocation(line: 186, column: 9, scope: !659)
!3893 = !DILocation(line: 187, column: 25, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3888, file: !352, line: 186, column: 50)
!3895 = !DILocation(line: 187, column: 9, scope: !3894)
!3896 = !DILocation(line: 188, column: 9, scope: !3894)
!3897 = !DILocation(line: 190, column: 36, scope: !659)
!3898 = !DILocation(line: 190, column: 43, scope: !659)
!3899 = !DILocation(line: 190, column: 12, scope: !659)
!3900 = !DILocation(line: 190, column: 19, scope: !659)
!3901 = !DILocation(line: 190, column: 31, scope: !659)
!3902 = !DILocation(line: 190, column: 10, scope: !659)
!3903 = !DILocation(line: 191, column: 5, scope: !659)
!3904 = !DILocation(line: 191, column: 12, scope: !659)
!3905 = !DILocation(line: 191, column: 22, scope: !659)
!3906 = !DILocation(line: 192, column: 22, scope: !659)
!3907 = !DILocation(line: 192, column: 7, scope: !659)
!3908 = !DILocation(line: 192, column: 31, scope: !659)
!3909 = !DILocation(line: 192, column: 39, scope: !659)
!3910 = !DILocation(line: 193, column: 5, scope: !659)
!3911 = !DILocation(line: 193, column: 12, scope: !659)
!3912 = !DILocation(line: 193, column: 17, scope: !659)
!3913 = !DILocation(line: 195, column: 9, scope: !3914)
!3914 = distinct !DILexicalBlock(scope: !659, file: !352, line: 195, column: 9)
!3915 = !DILocation(line: 195, column: 16, scope: !3914)
!3916 = !DILocation(line: 195, column: 27, scope: !3914)
!3917 = !DILocation(line: 195, column: 9, scope: !659)
!3918 = !DILocation(line: 196, column: 30, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !3920, file: !352, line: 196, column: 13)
!3920 = distinct !DILexicalBlock(scope: !3914, file: !352, line: 195, column: 34)
!3921 = !DILocation(line: 196, column: 15, scope: !3919)
!3922 = !DILocation(line: 196, column: 39, scope: !3919)
!3923 = !DILocation(line: 196, column: 48, scope: !3919)
!3924 = !DILocation(line: 196, column: 13, scope: !3920)
!3925 = !DILocation(line: 200, column: 13, scope: !3926)
!3926 = distinct !DILexicalBlock(scope: !3919, file: !352, line: 196, column: 54)
!3927 = !DILocation(line: 200, column: 20, scope: !3926)
!3928 = !DILocation(line: 200, column: 30, scope: !3926)
!3929 = !DILocation(line: 201, column: 13, scope: !3926)
!3930 = !DILocation(line: 201, column: 20, scope: !3926)
!3931 = !DILocation(line: 201, column: 31, scope: !3926)
!3932 = !DILocation(line: 202, column: 9, scope: !3926)
!3933 = !DILocation(line: 203, column: 25, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3919, file: !352, line: 202, column: 16)
!3935 = !DILocation(line: 203, column: 32, scope: !3934)
!3936 = !DILocation(line: 203, column: 44, scope: !3934)
!3937 = !DILocation(line: 203, column: 23, scope: !3934)
!3938 = !DILocation(line: 205, column: 23, scope: !3934)
!3939 = !DILocation(line: 205, column: 30, scope: !3934)
!3940 = !DILocation(line: 205, column: 13, scope: !3934)
!3941 = !DILocation(line: 208, column: 33, scope: !3934)
!3942 = !DILocation(line: 208, column: 13, scope: !3934)
!3943 = !DILocation(line: 208, column: 20, scope: !3934)
!3944 = !DILocation(line: 208, column: 31, scope: !3934)
!3945 = !DILocation(line: 209, column: 13, scope: !3934)
!3946 = !DILocation(line: 209, column: 20, scope: !3934)
!3947 = !DILocation(line: 209, column: 31, scope: !3934)
!3948 = !DILocation(line: 211, column: 5, scope: !3920)
!3949 = !DILocation(line: 212, column: 12, scope: !659)
!3950 = !DILocation(line: 212, column: 5, scope: !659)
!3951 = !DILocation(line: 213, column: 1, scope: !659)
!3952 = !DILocation(line: 256, column: 27, scope: !717)
!3953 = !DILocation(line: 256, column: 44, scope: !717)
!3954 = !DILocation(line: 258, column: 5, scope: !717)
!3955 = !DILocation(line: 258, column: 12, scope: !717)
!3956 = !DILocation(line: 258, column: 17, scope: !717)
!3957 = !DILocation(line: 259, column: 9, scope: !723)
!3958 = !DILocation(line: 259, column: 16, scope: !723)
!3959 = !DILocation(line: 259, column: 27, scope: !723)
!3960 = !DILocation(line: 259, column: 9, scope: !717)
!3961 = !DILocation(line: 260, column: 9, scope: !722)
!3962 = !DILocation(line: 260, column: 16, scope: !722)
!3963 = !DILocation(line: 260, column: 46, scope: !722)
!3964 = !DILocation(line: 260, column: 31, scope: !722)
!3965 = !DILocation(line: 260, column: 55, scope: !722)
!3966 = !DILocation(line: 260, column: 20, scope: !722)
!3967 = !DILocation(line: 261, column: 13, scope: !3968)
!3968 = distinct !DILexicalBlock(scope: !722, file: !352, line: 261, column: 13)
!3969 = !DILocation(line: 261, column: 15, scope: !3968)
!3970 = !DILocation(line: 261, column: 13, scope: !722)
!3971 = !DILocation(line: 262, column: 13, scope: !3968)
!3972 = !DILocation(line: 263, column: 23, scope: !722)
!3973 = !DILocation(line: 263, column: 30, scope: !722)
!3974 = !DILocation(line: 263, column: 9, scope: !722)
!3975 = !DILocation(line: 263, column: 12, scope: !722)
!3976 = !DILocation(line: 263, column: 21, scope: !722)
!3977 = !DILocation(line: 265, column: 40, scope: !722)
!3978 = !DILocation(line: 265, column: 9, scope: !722)
!3979 = !DILocation(line: 265, column: 16, scope: !722)
!3980 = !DILocation(line: 265, column: 28, scope: !722)
!3981 = !DILocation(line: 265, column: 38, scope: !722)
!3982 = !DILocation(line: 266, column: 29, scope: !722)
!3983 = !DILocation(line: 266, column: 9, scope: !722)
!3984 = !DILocation(line: 266, column: 16, scope: !722)
!3985 = !DILocation(line: 266, column: 27, scope: !722)
!3986 = !DILocation(line: 268, column: 9, scope: !722)
!3987 = !DILocation(line: 268, column: 16, scope: !722)
!3988 = !DILocation(line: 268, column: 27, scope: !722)
!3989 = !DILocation(line: 269, column: 5, scope: !723)
!3990 = !DILocation(line: 269, column: 5, scope: !3991)
!3991 = !DILexicalBlockFile(scope: !723, file: !352, discriminator: 1)
!3992 = !DILocation(line: 269, column: 5, scope: !722)
!3993 = !DILocation(line: 270, column: 21, scope: !717)
!3994 = !DILocation(line: 270, column: 29, scope: !717)
!3995 = !DILocation(line: 270, column: 38, scope: !717)
!3996 = !DILocation(line: 271, column: 22, scope: !717)
!3997 = !DILocation(line: 271, column: 7, scope: !717)
!3998 = !DILocation(line: 271, column: 31, scope: !717)
!3999 = !DILocation(line: 271, column: 39, scope: !717)
!4000 = !DILocation(line: 272, column: 5, scope: !717)
!4001 = !DILocation(line: 272, column: 12, scope: !717)
!4002 = !DILocation(line: 272, column: 22, scope: !717)
!4003 = !DILocation(line: 273, column: 50, scope: !717)
!4004 = !DILocation(line: 273, column: 29, scope: !717)
!4005 = !DILocation(line: 273, column: 36, scope: !717)
!4006 = !DILocation(line: 273, column: 5, scope: !717)
!4007 = !DILocation(line: 273, column: 12, scope: !717)
!4008 = !DILocation(line: 273, column: 24, scope: !717)
!4009 = !DILocation(line: 273, column: 48, scope: !717)
!4010 = !DILocation(line: 274, column: 9, scope: !726)
!4011 = !DILocation(line: 274, column: 16, scope: !726)
!4012 = !DILocation(line: 274, column: 23, scope: !726)
!4013 = !DILocation(line: 274, column: 29, scope: !726)
!4014 = !DILocation(line: 274, column: 49, scope: !4015)
!4015 = !DILexicalBlockFile(scope: !726, file: !352, discriminator: 1)
!4016 = !DILocation(line: 274, column: 34, scope: !726)
!4017 = !DILocation(line: 274, column: 58, scope: !726)
!4018 = !DILocation(line: 274, column: 69, scope: !726)
!4019 = !DILocation(line: 274, column: 76, scope: !726)
!4020 = !DILocation(line: 274, column: 67, scope: !726)
!4021 = !DILocation(line: 274, column: 9, scope: !717)
!4022 = !DILocation(line: 274, column: 86, scope: !4023)
!4023 = !DILexicalBlockFile(scope: !725, file: !352, discriminator: 2)
!4024 = !DILocation(line: 274, column: 96, scope: !725)
!4025 = !DILocation(line: 274, column: 115, scope: !725)
!4026 = !DILocation(line: 274, column: 101, scope: !725)
!4027 = !DILocation(line: 274, column: 149, scope: !725)
!4028 = !DILocation(line: 274, column: 154, scope: !4029)
!4029 = !DILexicalBlockFile(scope: !728, file: !352, discriminator: 3)
!4030 = !DILocation(line: 274, column: 164, scope: !728)
!4031 = !DILocation(line: 274, column: 194, scope: !728)
!4032 = !DILocation(line: 274, column: 207, scope: !4033)
!4033 = distinct !DILexicalBlock(scope: !728, file: !352, line: 274, column: 204)
!4034 = !DILocation(line: 274, column: 224, scope: !4033)
!4035 = !DILocation(line: 274, column: 204, scope: !4033)
!4036 = !DILocation(line: 274, column: 234, scope: !4033)
!4037 = !DILocation(line: 274, column: 204, scope: !728)
!4038 = !DILocation(line: 274, column: 204, scope: !4039)
!4039 = !DILexicalBlockFile(scope: !728, file: !352, discriminator: 4)
!4040 = !DILocation(line: 274, column: 265, scope: !4041)
!4041 = !DILexicalBlockFile(scope: !4033, file: !352, discriminator: 5)
!4042 = !DILocation(line: 274, column: 283, scope: !4033)
!4043 = !DILocation(line: 274, column: 293, scope: !4033)
!4044 = !DILocation(line: 274, column: 318, scope: !4033)
!4045 = !DILocation(line: 274, column: 249, scope: !4033)
!4046 = !DILocation(line: 274, column: 337, scope: !4047)
!4047 = !DILexicalBlockFile(scope: !725, file: !352, discriminator: 6)
!4048 = !DILocation(line: 274, column: 337, scope: !728)
!4049 = !DILocation(line: 274, column: 337, scope: !4050)
!4050 = !DILexicalBlockFile(scope: !728, file: !352, discriminator: 7)
!4051 = !DILocation(line: 274, column: 350, scope: !4052)
!4052 = !DILexicalBlockFile(scope: !726, file: !352, discriminator: 8)
!4053 = !DILocation(line: 274, column: 350, scope: !725)
!4054 = !DILocation(line: 275, column: 58, scope: !717)
!4055 = !DILocation(line: 275, column: 5, scope: !717)
!4056 = !DILocation(line: 276, column: 1, scope: !717)
!4057 = !DILocation(line: 281, column: 31, scope: !729)
!4058 = !DILocation(line: 281, column: 48, scope: !729)
!4059 = !DILocation(line: 283, column: 5, scope: !729)
!4060 = !DILocation(line: 283, column: 12, scope: !729)
!4061 = !DILocation(line: 283, column: 17, scope: !729)
!4062 = !DILocation(line: 284, column: 9, scope: !735)
!4063 = !DILocation(line: 284, column: 16, scope: !735)
!4064 = !DILocation(line: 284, column: 26, scope: !735)
!4065 = !DILocation(line: 284, column: 9, scope: !729)
!4066 = !DILocation(line: 285, column: 9, scope: !734)
!4067 = !DILocation(line: 285, column: 16, scope: !734)
!4068 = !DILocation(line: 285, column: 46, scope: !734)
!4069 = !DILocation(line: 285, column: 31, scope: !734)
!4070 = !DILocation(line: 285, column: 55, scope: !734)
!4071 = !DILocation(line: 285, column: 20, scope: !734)
!4072 = !DILocation(line: 286, column: 13, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !734, file: !352, line: 286, column: 13)
!4074 = !DILocation(line: 286, column: 15, scope: !4073)
!4075 = !DILocation(line: 286, column: 13, scope: !734)
!4076 = !DILocation(line: 287, column: 13, scope: !4073)
!4077 = !DILocation(line: 288, column: 24, scope: !734)
!4078 = !DILocation(line: 288, column: 31, scope: !734)
!4079 = !DILocation(line: 288, column: 9, scope: !734)
!4080 = !DILocation(line: 288, column: 12, scope: !734)
!4081 = !DILocation(line: 288, column: 22, scope: !734)
!4082 = !DILocation(line: 290, column: 38, scope: !734)
!4083 = !DILocation(line: 290, column: 9, scope: !734)
!4084 = !DILocation(line: 290, column: 16, scope: !734)
!4085 = !DILocation(line: 290, column: 27, scope: !734)
!4086 = !DILocation(line: 290, column: 36, scope: !734)
!4087 = !DILocation(line: 291, column: 28, scope: !734)
!4088 = !DILocation(line: 291, column: 9, scope: !734)
!4089 = !DILocation(line: 291, column: 16, scope: !734)
!4090 = !DILocation(line: 291, column: 26, scope: !734)
!4091 = !DILocation(line: 293, column: 9, scope: !734)
!4092 = !DILocation(line: 293, column: 16, scope: !734)
!4093 = !DILocation(line: 293, column: 26, scope: !734)
!4094 = !DILocation(line: 294, column: 5, scope: !735)
!4095 = !DILocation(line: 294, column: 5, scope: !4096)
!4096 = !DILexicalBlockFile(scope: !735, file: !352, discriminator: 1)
!4097 = !DILocation(line: 294, column: 5, scope: !734)
!4098 = !DILocation(line: 295, column: 21, scope: !729)
!4099 = !DILocation(line: 295, column: 29, scope: !729)
!4100 = !DILocation(line: 295, column: 38, scope: !729)
!4101 = !DILocation(line: 296, column: 22, scope: !729)
!4102 = !DILocation(line: 296, column: 7, scope: !729)
!4103 = !DILocation(line: 296, column: 31, scope: !729)
!4104 = !DILocation(line: 296, column: 39, scope: !729)
!4105 = !DILocation(line: 297, column: 5, scope: !729)
!4106 = !DILocation(line: 297, column: 12, scope: !729)
!4107 = !DILocation(line: 297, column: 21, scope: !729)
!4108 = !DILocation(line: 298, column: 48, scope: !729)
!4109 = !DILocation(line: 298, column: 28, scope: !729)
!4110 = !DILocation(line: 298, column: 35, scope: !729)
!4111 = !DILocation(line: 298, column: 5, scope: !729)
!4112 = !DILocation(line: 298, column: 12, scope: !729)
!4113 = !DILocation(line: 298, column: 23, scope: !729)
!4114 = !DILocation(line: 298, column: 46, scope: !729)
!4115 = !DILocation(line: 299, column: 9, scope: !738)
!4116 = !DILocation(line: 299, column: 16, scope: !738)
!4117 = !DILocation(line: 299, column: 23, scope: !738)
!4118 = !DILocation(line: 299, column: 29, scope: !738)
!4119 = !DILocation(line: 299, column: 49, scope: !4120)
!4120 = !DILexicalBlockFile(scope: !738, file: !352, discriminator: 1)
!4121 = !DILocation(line: 299, column: 34, scope: !738)
!4122 = !DILocation(line: 299, column: 58, scope: !738)
!4123 = !DILocation(line: 299, column: 69, scope: !738)
!4124 = !DILocation(line: 299, column: 76, scope: !738)
!4125 = !DILocation(line: 299, column: 67, scope: !738)
!4126 = !DILocation(line: 299, column: 9, scope: !729)
!4127 = !DILocation(line: 299, column: 86, scope: !4128)
!4128 = !DILexicalBlockFile(scope: !737, file: !352, discriminator: 2)
!4129 = !DILocation(line: 299, column: 96, scope: !737)
!4130 = !DILocation(line: 299, column: 111, scope: !737)
!4131 = !DILocation(line: 299, column: 101, scope: !737)
!4132 = !DILocation(line: 299, column: 145, scope: !737)
!4133 = !DILocation(line: 299, column: 150, scope: !4134)
!4134 = !DILexicalBlockFile(scope: !740, file: !352, discriminator: 3)
!4135 = !DILocation(line: 299, column: 160, scope: !740)
!4136 = !DILocation(line: 299, column: 190, scope: !740)
!4137 = !DILocation(line: 299, column: 203, scope: !4138)
!4138 = distinct !DILexicalBlock(scope: !740, file: !352, line: 299, column: 200)
!4139 = !DILocation(line: 299, column: 220, scope: !4138)
!4140 = !DILocation(line: 299, column: 200, scope: !4138)
!4141 = !DILocation(line: 299, column: 230, scope: !4138)
!4142 = !DILocation(line: 299, column: 200, scope: !740)
!4143 = !DILocation(line: 299, column: 200, scope: !4144)
!4144 = !DILexicalBlockFile(scope: !740, file: !352, discriminator: 4)
!4145 = !DILocation(line: 299, column: 261, scope: !4146)
!4146 = !DILexicalBlockFile(scope: !4138, file: !352, discriminator: 5)
!4147 = !DILocation(line: 299, column: 279, scope: !4138)
!4148 = !DILocation(line: 299, column: 289, scope: !4138)
!4149 = !DILocation(line: 299, column: 314, scope: !4138)
!4150 = !DILocation(line: 299, column: 245, scope: !4138)
!4151 = !DILocation(line: 299, column: 333, scope: !4152)
!4152 = !DILexicalBlockFile(scope: !737, file: !352, discriminator: 6)
!4153 = !DILocation(line: 299, column: 333, scope: !740)
!4154 = !DILocation(line: 299, column: 333, scope: !4155)
!4155 = !DILexicalBlockFile(scope: !740, file: !352, discriminator: 7)
!4156 = !DILocation(line: 299, column: 346, scope: !4157)
!4157 = !DILexicalBlockFile(scope: !738, file: !352, discriminator: 8)
!4158 = !DILocation(line: 299, column: 346, scope: !737)
!4159 = !DILocation(line: 300, column: 58, scope: !729)
!4160 = !DILocation(line: 300, column: 5, scope: !729)
!4161 = !DILocation(line: 301, column: 1, scope: !729)
!4162 = !DILocation(line: 832, column: 32, scope: !741)
!4163 = !DILocation(line: 834, column: 17, scope: !741)
!4164 = !DILocation(line: 834, column: 5, scope: !741)
!4165 = !DILocation(line: 835, column: 58, scope: !741)
!4166 = !DILocation(line: 835, column: 5, scope: !741)
!4167 = !DILocation(line: 879, column: 22, scope: !744)
!4168 = !DILocation(line: 881, column: 25, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !744, file: !352, line: 881, column: 9)
!4170 = !DILocation(line: 881, column: 10, scope: !4169)
!4171 = !DILocation(line: 881, column: 33, scope: !4169)
!4172 = !DILocation(line: 881, column: 40, scope: !4169)
!4173 = !DILocation(line: 881, column: 9, scope: !744)
!4174 = !DILocation(line: 882, column: 65, scope: !4169)
!4175 = !DILocation(line: 882, column: 74, scope: !4169)
!4176 = !DILocation(line: 882, column: 38, scope: !4169)
!4177 = !DILocation(line: 882, column: 90, scope: !4169)
!4178 = !DILocation(line: 882, column: 16, scope: !4169)
!4179 = !DILocation(line: 882, column: 9, scope: !4169)
!4180 = !DILocation(line: 884, column: 65, scope: !4169)
!4181 = !DILocation(line: 884, column: 74, scope: !4169)
!4182 = !DILocation(line: 884, column: 38, scope: !4169)
!4183 = !DILocation(line: 885, column: 13, scope: !4169)
!4184 = !DILocation(line: 885, column: 36, scope: !4169)
!4185 = !DILocation(line: 885, column: 21, scope: !4169)
!4186 = !DILocation(line: 885, column: 44, scope: !4169)
!4187 = !DILocation(line: 884, column: 16, scope: !4169)
!4188 = !DILocation(line: 884, column: 9, scope: !4169)
!4189 = !DILocation(line: 886, column: 1, scope: !744)
!4190 = !DILocation(line: 639, column: 26, scope: !747)
!4191 = !DILocation(line: 639, column: 43, scope: !747)
!4192 = !DILocation(line: 641, column: 5, scope: !747)
!4193 = !DILocation(line: 641, column: 12, scope: !747)
!4194 = !DILocation(line: 641, column: 16, scope: !747)
!4195 = !DILocation(line: 641, column: 23, scope: !747)
!4196 = !DILocation(line: 642, column: 5, scope: !747)
!4197 = !DILocation(line: 642, column: 16, scope: !747)
!4198 = !DILocation(line: 642, column: 24, scope: !747)
!4199 = !DILocation(line: 642, column: 31, scope: !747)
!4200 = !DILocation(line: 643, column: 5, scope: !747)
!4201 = !DILocation(line: 643, column: 16, scope: !747)
!4202 = !DILocation(line: 643, column: 37, scope: !747)
!4203 = !DILocation(line: 643, column: 22, scope: !747)
!4204 = !DILocation(line: 643, column: 46, scope: !747)
!4205 = !DILocation(line: 644, column: 5, scope: !747)
!4206 = !DILocation(line: 644, column: 16, scope: !747)
!4207 = !DILocation(line: 645, column: 5, scope: !747)
!4208 = !DILocation(line: 645, column: 16, scope: !747)
!4209 = !DILocation(line: 646, column: 5, scope: !747)
!4210 = !DILocation(line: 646, column: 15, scope: !747)
!4211 = !DILocation(line: 647, column: 5, scope: !747)
!4212 = !DILocation(line: 647, column: 10, scope: !747)
!4213 = !DILocation(line: 647, column: 24, scope: !747)
!4214 = !DILocation(line: 647, column: 31, scope: !747)
!4215 = !DILocation(line: 648, column: 5, scope: !747)
!4216 = !DILocation(line: 648, column: 9, scope: !747)
!4217 = !DILocation(line: 650, column: 11, scope: !4218)
!4218 = distinct !DILexicalBlock(scope: !747, file: !352, line: 650, column: 5)
!4219 = !DILocation(line: 650, column: 10, scope: !4218)
!4220 = !DILocation(line: 650, column: 16, scope: !4221)
!4221 = !DILexicalBlockFile(scope: !4222, file: !352, discriminator: 2)
!4222 = !DILexicalBlockFile(scope: !4223, file: !352, discriminator: 1)
!4223 = distinct !DILexicalBlock(scope: !4218, file: !352, line: 650, column: 5)
!4224 = !DILocation(line: 650, column: 18, scope: !4223)
!4225 = !DILocation(line: 650, column: 17, scope: !4223)
!4226 = !DILocation(line: 650, column: 5, scope: !4218)
!4227 = !DILocation(line: 652, column: 24, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4223, file: !352, line: 650, column: 27)
!4229 = !DILocation(line: 652, column: 16, scope: !4228)
!4230 = !DILocation(line: 652, column: 19, scope: !4228)
!4231 = !DILocation(line: 652, column: 14, scope: !4228)
!4232 = !DILocation(line: 653, column: 40, scope: !4228)
!4233 = !DILocation(line: 653, column: 46, scope: !4228)
!4234 = !DILocation(line: 653, column: 15, scope: !4228)
!4235 = !DILocation(line: 653, column: 13, scope: !4228)
!4236 = !DILocation(line: 654, column: 13, scope: !4237)
!4237 = distinct !DILexicalBlock(scope: !4228, file: !352, line: 654, column: 13)
!4238 = !DILocation(line: 654, column: 17, scope: !4237)
!4239 = !DILocation(line: 654, column: 13, scope: !4228)
!4240 = !DILocation(line: 655, column: 18, scope: !4237)
!4241 = !DILocation(line: 655, column: 13, scope: !4237)
!4242 = !DILocation(line: 656, column: 18, scope: !4243)
!4243 = distinct !DILexicalBlock(scope: !4237, file: !352, line: 656, column: 18)
!4244 = !DILocation(line: 656, column: 22, scope: !4243)
!4245 = !DILocation(line: 656, column: 18, scope: !4237)
!4246 = !DILocation(line: 657, column: 13, scope: !4243)
!4247 = !DILocation(line: 659, column: 13, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4228, file: !352, line: 659, column: 13)
!4249 = !DILocation(line: 659, column: 28, scope: !4248)
!4250 = !DILocation(line: 659, column: 35, scope: !4248)
!4251 = !DILocation(line: 659, column: 25, scope: !4248)
!4252 = !DILocation(line: 659, column: 13, scope: !4228)
!4253 = !DILocation(line: 660, column: 29, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4248, file: !352, line: 659, column: 42)
!4255 = !DILocation(line: 660, column: 13, scope: !4254)
!4256 = !DILocation(line: 662, column: 13, scope: !4254)
!4257 = !DILocation(line: 666, column: 14, scope: !4228)
!4258 = !DILocation(line: 667, column: 13, scope: !4259)
!4259 = distinct !DILexicalBlock(scope: !4228, file: !352, line: 667, column: 13)
!4260 = !DILocation(line: 667, column: 19, scope: !4259)
!4261 = !DILocation(line: 667, column: 13, scope: !4228)
!4262 = !DILocation(line: 668, column: 17, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4259, file: !352, line: 667, column: 26)
!4264 = !DILocation(line: 668, column: 20, scope: !4263)
!4265 = !DILocation(line: 668, column: 15, scope: !4263)
!4266 = !DILocation(line: 669, column: 19, scope: !4263)
!4267 = !DILocation(line: 670, column: 9, scope: !4263)
!4268 = !DILocation(line: 671, column: 5, scope: !4228)
!4269 = !DILocation(line: 650, column: 23, scope: !4223)
!4270 = !DILocation(line: 650, column: 5, scope: !4223)
!4271 = !DILocation(line: 672, column: 31, scope: !747)
!4272 = !DILocation(line: 672, column: 12, scope: !747)
!4273 = !DILocation(line: 672, column: 5, scope: !747)
!4274 = !DILocation(line: 673, column: 1, scope: !747)
!4275 = !DILocation(line: 384, column: 31, scope: !759)
!4276 = !DILocation(line: 384, column: 48, scope: !759)
!4277 = !DILocation(line: 386, column: 5, scope: !759)
!4278 = !DILocation(line: 386, column: 15, scope: !759)
!4279 = !DILocation(line: 386, column: 20, scope: !759)
!4280 = !DILocation(line: 389, column: 21, scope: !767)
!4281 = !DILocation(line: 389, column: 9, scope: !767)
!4282 = !DILocation(line: 389, column: 30, scope: !767)
!4283 = !DILocation(line: 389, column: 27, scope: !767)
!4284 = !DILocation(line: 389, column: 9, scope: !759)
!4285 = !DILocation(line: 390, column: 9, scope: !766)
!4286 = !DILocation(line: 390, column: 19, scope: !766)
!4287 = !DILocation(line: 391, column: 9, scope: !766)
!4288 = !DILocation(line: 391, column: 19, scope: !766)
!4289 = !DILocation(line: 391, column: 39, scope: !766)
!4290 = !DILocation(line: 391, column: 23, scope: !766)
!4291 = !DILocation(line: 392, column: 13, scope: !4292)
!4292 = distinct !DILexicalBlock(scope: !766, file: !352, line: 392, column: 13)
!4293 = !DILocation(line: 392, column: 15, scope: !4292)
!4294 = !DILocation(line: 392, column: 13, scope: !766)
!4295 = !DILocation(line: 393, column: 13, scope: !4292)
!4296 = !DILocation(line: 394, column: 35, scope: !766)
!4297 = !DILocation(line: 394, column: 42, scope: !766)
!4298 = !DILocation(line: 394, column: 18, scope: !766)
!4299 = !DILocation(line: 394, column: 16, scope: !766)
!4300 = !DILocation(line: 395, column: 9, scope: !766)
!4301 = !DILocation(line: 395, column: 14, scope: !4302)
!4302 = !DILexicalBlockFile(scope: !770, file: !352, discriminator: 1)
!4303 = !DILocation(line: 395, column: 24, scope: !770)
!4304 = !DILocation(line: 395, column: 54, scope: !770)
!4305 = !DILocation(line: 395, column: 66, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !770, file: !352, line: 395, column: 63)
!4307 = !DILocation(line: 395, column: 83, scope: !4306)
!4308 = !DILocation(line: 395, column: 63, scope: !4306)
!4309 = !DILocation(line: 395, column: 93, scope: !4306)
!4310 = !DILocation(line: 395, column: 63, scope: !770)
!4311 = !DILocation(line: 395, column: 63, scope: !4312)
!4312 = !DILexicalBlockFile(scope: !770, file: !352, discriminator: 2)
!4313 = !DILocation(line: 395, column: 124, scope: !4314)
!4314 = !DILexicalBlockFile(scope: !4306, file: !352, discriminator: 3)
!4315 = !DILocation(line: 395, column: 142, scope: !4306)
!4316 = !DILocation(line: 395, column: 152, scope: !4306)
!4317 = !DILocation(line: 395, column: 177, scope: !4306)
!4318 = !DILocation(line: 395, column: 108, scope: !4306)
!4319 = !DILocation(line: 395, column: 196, scope: !4320)
!4320 = !DILexicalBlockFile(scope: !766, file: !352, discriminator: 4)
!4321 = !DILocation(line: 395, column: 196, scope: !770)
!4322 = !DILocation(line: 395, column: 196, scope: !4323)
!4323 = !DILexicalBlockFile(scope: !770, file: !352, discriminator: 5)
!4324 = !DILocation(line: 396, column: 16, scope: !766)
!4325 = !DILocation(line: 396, column: 9, scope: !766)
!4326 = !DILocation(line: 397, column: 5, scope: !767)
!4327 = !DILocation(line: 400, column: 26, scope: !4328)
!4328 = distinct !DILexicalBlock(scope: !759, file: !352, line: 400, column: 9)
!4329 = !DILocation(line: 400, column: 11, scope: !4328)
!4330 = !DILocation(line: 400, column: 35, scope: !4328)
!4331 = !DILocation(line: 400, column: 44, scope: !4328)
!4332 = !DILocation(line: 400, column: 9, scope: !759)
!4333 = !DILocation(line: 403, column: 9, scope: !4334)
!4334 = distinct !DILexicalBlock(scope: !4328, file: !352, line: 400, column: 50)
!4335 = !DILocation(line: 403, column: 16, scope: !4334)
!4336 = !DILocation(line: 403, column: 26, scope: !4334)
!4337 = !DILocation(line: 404, column: 9, scope: !4334)
!4338 = !DILocation(line: 404, column: 16, scope: !4334)
!4339 = !DILocation(line: 404, column: 27, scope: !4334)
!4340 = !DILocation(line: 405, column: 5, scope: !4334)
!4341 = !DILocation(line: 407, column: 27, scope: !759)
!4342 = !DILocation(line: 407, column: 10, scope: !759)
!4343 = !DILocation(line: 407, column: 8, scope: !759)
!4344 = !DILocation(line: 408, column: 9, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !759, file: !352, line: 408, column: 9)
!4346 = !DILocation(line: 408, column: 12, scope: !4345)
!4347 = !DILocation(line: 408, column: 9, scope: !759)
!4348 = !DILocation(line: 409, column: 9, scope: !4345)
!4349 = !DILocation(line: 411, column: 9, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !759, file: !352, line: 411, column: 9)
!4351 = !DILocation(line: 411, column: 16, scope: !4350)
!4352 = !DILocation(line: 411, column: 23, scope: !4350)
!4353 = !DILocation(line: 411, column: 9, scope: !759)
!4354 = !DILocation(line: 412, column: 33, scope: !4350)
!4355 = !DILocation(line: 412, column: 16, scope: !4350)
!4356 = !DILocation(line: 412, column: 9, scope: !4350)
!4357 = !DILocation(line: 414, column: 5, scope: !759)
!4358 = !DILocation(line: 414, column: 32, scope: !4359)
!4359 = !DILexicalBlockFile(scope: !4360, file: !352, discriminator: 2)
!4360 = !DILexicalBlockFile(scope: !759, file: !352, discriminator: 1)
!4361 = !DILocation(line: 414, column: 20, scope: !759)
!4362 = !DILocation(line: 414, column: 18, scope: !759)
!4363 = !DILocation(line: 414, column: 37, scope: !759)
!4364 = !DILocation(line: 415, column: 9, scope: !774)
!4365 = !DILocation(line: 415, column: 16, scope: !774)
!4366 = !DILocation(line: 415, column: 21, scope: !774)
!4367 = !DILocation(line: 416, column: 13, scope: !773)
!4368 = !DILocation(line: 416, column: 20, scope: !773)
!4369 = !DILocation(line: 416, column: 30, scope: !773)
!4370 = !DILocation(line: 416, column: 13, scope: !774)
!4371 = !DILocation(line: 417, column: 13, scope: !772)
!4372 = !DILocation(line: 417, column: 20, scope: !772)
!4373 = !DILocation(line: 417, column: 50, scope: !772)
!4374 = !DILocation(line: 417, column: 35, scope: !772)
!4375 = !DILocation(line: 417, column: 59, scope: !772)
!4376 = !DILocation(line: 417, column: 24, scope: !772)
!4377 = !DILocation(line: 418, column: 17, scope: !778)
!4378 = !DILocation(line: 418, column: 19, scope: !778)
!4379 = !DILocation(line: 418, column: 17, scope: !772)
!4380 = !DILocation(line: 419, column: 17, scope: !777)
!4381 = !DILocation(line: 419, column: 22, scope: !4382)
!4382 = !DILexicalBlockFile(scope: !776, file: !352, discriminator: 1)
!4383 = !DILocation(line: 419, column: 32, scope: !776)
!4384 = !DILocation(line: 419, column: 62, scope: !776)
!4385 = !DILocation(line: 419, column: 77, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !776, file: !352, line: 419, column: 74)
!4387 = !DILocation(line: 419, column: 94, scope: !4386)
!4388 = !DILocation(line: 419, column: 74, scope: !4386)
!4389 = !DILocation(line: 419, column: 104, scope: !4386)
!4390 = !DILocation(line: 419, column: 74, scope: !776)
!4391 = !DILocation(line: 419, column: 74, scope: !4392)
!4392 = !DILexicalBlockFile(scope: !776, file: !352, discriminator: 2)
!4393 = !DILocation(line: 419, column: 135, scope: !4394)
!4394 = !DILexicalBlockFile(scope: !4386, file: !352, discriminator: 3)
!4395 = !DILocation(line: 419, column: 153, scope: !4386)
!4396 = !DILocation(line: 419, column: 163, scope: !4386)
!4397 = !DILocation(line: 419, column: 188, scope: !4386)
!4398 = !DILocation(line: 419, column: 119, scope: !4386)
!4399 = !DILocation(line: 419, column: 207, scope: !4400)
!4400 = !DILexicalBlockFile(scope: !777, file: !352, discriminator: 4)
!4401 = !DILocation(line: 419, column: 207, scope: !776)
!4402 = !DILocation(line: 419, column: 207, scope: !4403)
!4403 = !DILexicalBlockFile(scope: !776, file: !352, discriminator: 5)
!4404 = !DILocation(line: 420, column: 17, scope: !777)
!4405 = !DILocation(line: 420, column: 22, scope: !4406)
!4406 = !DILexicalBlockFile(scope: !780, file: !352, discriminator: 1)
!4407 = !DILocation(line: 420, column: 32, scope: !780)
!4408 = !DILocation(line: 420, column: 62, scope: !780)
!4409 = !DILocation(line: 420, column: 75, scope: !4410)
!4410 = distinct !DILexicalBlock(scope: !780, file: !352, line: 420, column: 72)
!4411 = !DILocation(line: 420, column: 92, scope: !4410)
!4412 = !DILocation(line: 420, column: 72, scope: !4410)
!4413 = !DILocation(line: 420, column: 102, scope: !4410)
!4414 = !DILocation(line: 420, column: 72, scope: !780)
!4415 = !DILocation(line: 420, column: 72, scope: !4416)
!4416 = !DILexicalBlockFile(scope: !780, file: !352, discriminator: 2)
!4417 = !DILocation(line: 420, column: 133, scope: !4418)
!4418 = !DILexicalBlockFile(scope: !4410, file: !352, discriminator: 3)
!4419 = !DILocation(line: 420, column: 151, scope: !4410)
!4420 = !DILocation(line: 420, column: 161, scope: !4410)
!4421 = !DILocation(line: 420, column: 186, scope: !4410)
!4422 = !DILocation(line: 420, column: 117, scope: !4410)
!4423 = !DILocation(line: 420, column: 205, scope: !4400)
!4424 = !DILocation(line: 420, column: 205, scope: !780)
!4425 = !DILocation(line: 420, column: 205, scope: !4426)
!4426 = !DILexicalBlockFile(scope: !780, file: !352, discriminator: 5)
!4427 = !DILocation(line: 421, column: 17, scope: !777)
!4428 = !DILocation(line: 423, column: 28, scope: !772)
!4429 = !DILocation(line: 423, column: 35, scope: !772)
!4430 = !DILocation(line: 423, column: 13, scope: !772)
!4431 = !DILocation(line: 423, column: 16, scope: !772)
!4432 = !DILocation(line: 423, column: 26, scope: !772)
!4433 = !DILocation(line: 425, column: 42, scope: !772)
!4434 = !DILocation(line: 425, column: 13, scope: !772)
!4435 = !DILocation(line: 425, column: 20, scope: !772)
!4436 = !DILocation(line: 425, column: 31, scope: !772)
!4437 = !DILocation(line: 425, column: 40, scope: !772)
!4438 = !DILocation(line: 426, column: 32, scope: !772)
!4439 = !DILocation(line: 426, column: 13, scope: !772)
!4440 = !DILocation(line: 426, column: 20, scope: !772)
!4441 = !DILocation(line: 426, column: 30, scope: !772)
!4442 = !DILocation(line: 428, column: 13, scope: !772)
!4443 = !DILocation(line: 428, column: 20, scope: !772)
!4444 = !DILocation(line: 428, column: 30, scope: !772)
!4445 = !DILocation(line: 429, column: 9, scope: !773)
!4446 = !DILocation(line: 429, column: 9, scope: !4447)
!4447 = !DILexicalBlockFile(scope: !773, file: !352, discriminator: 1)
!4448 = !DILocation(line: 429, column: 9, scope: !772)
!4449 = !DILocation(line: 430, column: 26, scope: !774)
!4450 = !DILocation(line: 430, column: 11, scope: !774)
!4451 = !DILocation(line: 430, column: 35, scope: !774)
!4452 = !DILocation(line: 430, column: 43, scope: !774)
!4453 = !DILocation(line: 431, column: 9, scope: !774)
!4454 = !DILocation(line: 431, column: 16, scope: !774)
!4455 = !DILocation(line: 431, column: 25, scope: !774)
!4456 = !DILocation(line: 432, column: 52, scope: !774)
!4457 = !DILocation(line: 432, column: 32, scope: !774)
!4458 = !DILocation(line: 432, column: 39, scope: !774)
!4459 = !DILocation(line: 432, column: 9, scope: !774)
!4460 = !DILocation(line: 432, column: 16, scope: !774)
!4461 = !DILocation(line: 432, column: 27, scope: !774)
!4462 = !DILocation(line: 432, column: 50, scope: !774)
!4463 = !DILocation(line: 433, column: 13, scope: !783)
!4464 = !DILocation(line: 433, column: 20, scope: !783)
!4465 = !DILocation(line: 433, column: 27, scope: !783)
!4466 = !DILocation(line: 433, column: 33, scope: !783)
!4467 = !DILocation(line: 433, column: 53, scope: !4468)
!4468 = !DILexicalBlockFile(scope: !783, file: !352, discriminator: 1)
!4469 = !DILocation(line: 433, column: 38, scope: !783)
!4470 = !DILocation(line: 433, column: 62, scope: !783)
!4471 = !DILocation(line: 433, column: 73, scope: !783)
!4472 = !DILocation(line: 433, column: 80, scope: !783)
!4473 = !DILocation(line: 433, column: 71, scope: !783)
!4474 = !DILocation(line: 433, column: 13, scope: !774)
!4475 = !DILocation(line: 433, column: 90, scope: !4476)
!4476 = !DILexicalBlockFile(scope: !782, file: !352, discriminator: 2)
!4477 = !DILocation(line: 433, column: 100, scope: !782)
!4478 = !DILocation(line: 433, column: 115, scope: !782)
!4479 = !DILocation(line: 433, column: 105, scope: !782)
!4480 = !DILocation(line: 433, column: 149, scope: !782)
!4481 = !DILocation(line: 433, column: 154, scope: !4482)
!4482 = !DILexicalBlockFile(scope: !785, file: !352, discriminator: 3)
!4483 = !DILocation(line: 433, column: 164, scope: !785)
!4484 = !DILocation(line: 433, column: 194, scope: !785)
!4485 = !DILocation(line: 433, column: 207, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !785, file: !352, line: 433, column: 204)
!4487 = !DILocation(line: 433, column: 224, scope: !4486)
!4488 = !DILocation(line: 433, column: 204, scope: !4486)
!4489 = !DILocation(line: 433, column: 234, scope: !4486)
!4490 = !DILocation(line: 433, column: 204, scope: !785)
!4491 = !DILocation(line: 433, column: 204, scope: !4492)
!4492 = !DILexicalBlockFile(scope: !785, file: !352, discriminator: 4)
!4493 = !DILocation(line: 433, column: 265, scope: !4494)
!4494 = !DILexicalBlockFile(scope: !4486, file: !352, discriminator: 5)
!4495 = !DILocation(line: 433, column: 283, scope: !4486)
!4496 = !DILocation(line: 433, column: 293, scope: !4486)
!4497 = !DILocation(line: 433, column: 318, scope: !4486)
!4498 = !DILocation(line: 433, column: 249, scope: !4486)
!4499 = !DILocation(line: 433, column: 337, scope: !4500)
!4500 = !DILexicalBlockFile(scope: !782, file: !352, discriminator: 6)
!4501 = !DILocation(line: 433, column: 337, scope: !785)
!4502 = !DILocation(line: 433, column: 337, scope: !4503)
!4503 = !DILexicalBlockFile(scope: !785, file: !352, discriminator: 7)
!4504 = !DILocation(line: 433, column: 350, scope: !4505)
!4505 = !DILexicalBlockFile(scope: !783, file: !352, discriminator: 8)
!4506 = !DILocation(line: 433, column: 350, scope: !782)
!4507 = !DILocation(line: 435, column: 5, scope: !759)
!4508 = !DILocation(line: 435, column: 10, scope: !4509)
!4509 = !DILexicalBlockFile(scope: !787, file: !352, discriminator: 1)
!4510 = !DILocation(line: 435, column: 20, scope: !787)
!4511 = !DILocation(line: 435, column: 50, scope: !787)
!4512 = !DILocation(line: 435, column: 63, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !787, file: !352, line: 435, column: 60)
!4514 = !DILocation(line: 435, column: 80, scope: !4513)
!4515 = !DILocation(line: 435, column: 60, scope: !4513)
!4516 = !DILocation(line: 435, column: 90, scope: !4513)
!4517 = !DILocation(line: 435, column: 60, scope: !787)
!4518 = !DILocation(line: 435, column: 60, scope: !4519)
!4519 = !DILexicalBlockFile(scope: !787, file: !352, discriminator: 2)
!4520 = !DILocation(line: 435, column: 121, scope: !4521)
!4521 = !DILexicalBlockFile(scope: !4513, file: !352, discriminator: 3)
!4522 = !DILocation(line: 435, column: 139, scope: !4513)
!4523 = !DILocation(line: 435, column: 149, scope: !4513)
!4524 = !DILocation(line: 435, column: 174, scope: !4513)
!4525 = !DILocation(line: 435, column: 105, scope: !4513)
!4526 = !DILocation(line: 435, column: 193, scope: !4527)
!4527 = !DILexicalBlockFile(scope: !759, file: !352, discriminator: 4)
!4528 = !DILocation(line: 435, column: 193, scope: !787)
!4529 = !DILocation(line: 435, column: 193, scope: !4530)
!4530 = !DILexicalBlockFile(scope: !787, file: !352, discriminator: 5)
!4531 = !DILocation(line: 436, column: 9, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !759, file: !352, line: 436, column: 9)
!4533 = !DILocation(line: 436, column: 9, scope: !759)
!4534 = !DILocation(line: 437, column: 9, scope: !4532)
!4535 = !DILocation(line: 438, column: 58, scope: !759)
!4536 = !DILocation(line: 438, column: 5, scope: !759)
!4537 = !DILocation(line: 439, column: 1, scope: !759)
!4538 = !DILocation(line: 891, column: 27, scope: !788)
!4539 = !DILocation(line: 893, column: 5, scope: !788)
!4540 = !DILocation(line: 893, column: 15, scope: !788)
!4541 = !DILocation(line: 893, column: 22, scope: !788)
!4542 = !DILocation(line: 893, column: 31, scope: !788)
!4543 = !DILocation(line: 896, column: 44, scope: !788)
!4544 = !DILocation(line: 896, column: 32, scope: !788)
!4545 = !DILocation(line: 896, column: 12, scope: !788)
!4546 = !DILocation(line: 896, column: 10, scope: !788)
!4547 = !DILocation(line: 897, column: 9, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !788, file: !352, line: 897, column: 9)
!4549 = !DILocation(line: 897, column: 14, scope: !4548)
!4550 = !DILocation(line: 897, column: 9, scope: !788)
!4551 = !DILocation(line: 898, column: 9, scope: !4548)
!4552 = !DILocation(line: 899, column: 42, scope: !788)
!4553 = !DILocation(line: 899, column: 30, scope: !788)
!4554 = !DILocation(line: 899, column: 14, scope: !788)
!4555 = !DILocation(line: 899, column: 12, scope: !788)
!4556 = !DILocation(line: 900, column: 9, scope: !797)
!4557 = !DILocation(line: 900, column: 16, scope: !797)
!4558 = !DILocation(line: 900, column: 9, scope: !788)
!4559 = !DILocation(line: 901, column: 9, scope: !796)
!4560 = !DILocation(line: 901, column: 14, scope: !4561)
!4561 = !DILexicalBlockFile(scope: !795, file: !352, discriminator: 1)
!4562 = !DILocation(line: 901, column: 24, scope: !795)
!4563 = !DILocation(line: 901, column: 55, scope: !795)
!4564 = !DILocation(line: 901, column: 66, scope: !800)
!4565 = !DILocation(line: 901, column: 82, scope: !800)
!4566 = !DILocation(line: 901, column: 66, scope: !795)
!4567 = !DILocation(line: 901, column: 97, scope: !4568)
!4568 = !DILexicalBlockFile(scope: !800, file: !352, discriminator: 2)
!4569 = !DILocation(line: 901, column: 102, scope: !4570)
!4570 = !DILexicalBlockFile(scope: !799, file: !352, discriminator: 4)
!4571 = !DILocation(line: 901, column: 112, scope: !799)
!4572 = !DILocation(line: 901, column: 142, scope: !799)
!4573 = !DILocation(line: 901, column: 168, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !799, file: !352, line: 901, column: 165)
!4575 = !DILocation(line: 901, column: 185, scope: !4574)
!4576 = !DILocation(line: 901, column: 165, scope: !4574)
!4577 = !DILocation(line: 901, column: 195, scope: !4574)
!4578 = !DILocation(line: 901, column: 165, scope: !799)
!4579 = !DILocation(line: 901, column: 165, scope: !4580)
!4580 = !DILexicalBlockFile(scope: !799, file: !352, discriminator: 5)
!4581 = !DILocation(line: 901, column: 226, scope: !4582)
!4582 = !DILexicalBlockFile(scope: !4574, file: !352, discriminator: 6)
!4583 = !DILocation(line: 901, column: 244, scope: !4574)
!4584 = !DILocation(line: 901, column: 254, scope: !4574)
!4585 = !DILocation(line: 901, column: 279, scope: !4574)
!4586 = !DILocation(line: 901, column: 210, scope: !4574)
!4587 = !DILocation(line: 901, column: 298, scope: !4588)
!4588 = !DILexicalBlockFile(scope: !800, file: !352, discriminator: 7)
!4589 = !DILocation(line: 901, column: 298, scope: !799)
!4590 = !DILocation(line: 901, column: 298, scope: !4591)
!4591 = !DILexicalBlockFile(scope: !799, file: !352, discriminator: 8)
!4592 = !DILocation(line: 901, column: 298, scope: !4593)
!4593 = !DILexicalBlockFile(scope: !799, file: !352, discriminator: 9)
!4594 = !DILocation(line: 901, column: 311, scope: !4595)
!4595 = !DILexicalBlockFile(scope: !4596, file: !352, discriminator: 10)
!4596 = !DILexicalBlockFile(scope: !796, file: !352, discriminator: 3)
!4597 = !DILocation(line: 901, column: 311, scope: !795)
!4598 = !DILocation(line: 901, column: 311, scope: !4599)
!4599 = !DILexicalBlockFile(scope: !795, file: !352, discriminator: 11)
!4600 = !DILocation(line: 902, column: 9, scope: !796)
!4601 = !DILocation(line: 904, column: 9, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !788, file: !352, line: 904, column: 9)
!4603 = !DILocation(line: 904, column: 14, scope: !4602)
!4604 = !DILocation(line: 904, column: 9, scope: !788)
!4605 = !DILocation(line: 905, column: 13, scope: !4606)
!4606 = distinct !DILexicalBlock(scope: !4607, file: !352, line: 905, column: 13)
!4607 = distinct !DILexicalBlock(scope: !4602, file: !352, line: 904, column: 29)
!4608 = !DILocation(line: 905, column: 20, scope: !4606)
!4609 = !DILocation(line: 905, column: 27, scope: !4606)
!4610 = !DILocation(line: 905, column: 13, scope: !4607)
!4611 = !DILocation(line: 906, column: 58, scope: !4606)
!4612 = !DILocation(line: 906, column: 46, scope: !4606)
!4613 = !DILocation(line: 906, column: 67, scope: !4606)
!4614 = !DILocation(line: 906, column: 77, scope: !4606)
!4615 = !DILocation(line: 906, column: 22, scope: !4606)
!4616 = !DILocation(line: 906, column: 20, scope: !4606)
!4617 = !DILocation(line: 906, column: 13, scope: !4606)
!4618 = !DILocation(line: 908, column: 59, scope: !4606)
!4619 = !DILocation(line: 908, column: 47, scope: !4606)
!4620 = !DILocation(line: 908, column: 68, scope: !4606)
!4621 = !DILocation(line: 908, column: 78, scope: !4606)
!4622 = !DILocation(line: 908, column: 86, scope: !4606)
!4623 = !DILocation(line: 908, column: 93, scope: !4606)
!4624 = !DILocation(line: 908, column: 22, scope: !4606)
!4625 = !DILocation(line: 908, column: 20, scope: !4606)
!4626 = !DILocation(line: 909, column: 5, scope: !4607)
!4627 = !DILocation(line: 910, column: 13, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4629, file: !352, line: 910, column: 13)
!4629 = distinct !DILexicalBlock(scope: !4602, file: !352, line: 909, column: 12)
!4630 = !DILocation(line: 910, column: 20, scope: !4628)
!4631 = !DILocation(line: 910, column: 27, scope: !4628)
!4632 = !DILocation(line: 910, column: 13, scope: !4629)
!4633 = !DILocation(line: 911, column: 60, scope: !4628)
!4634 = !DILocation(line: 911, column: 48, scope: !4628)
!4635 = !DILocation(line: 911, column: 69, scope: !4628)
!4636 = !DILocation(line: 911, column: 79, scope: !4628)
!4637 = !DILocation(line: 911, column: 106, scope: !4628)
!4638 = !DILocation(line: 911, column: 22, scope: !4628)
!4639 = !DILocation(line: 911, column: 20, scope: !4628)
!4640 = !DILocation(line: 911, column: 13, scope: !4628)
!4641 = !DILocation(line: 913, column: 60, scope: !4628)
!4642 = !DILocation(line: 913, column: 48, scope: !4628)
!4643 = !DILocation(line: 913, column: 69, scope: !4628)
!4644 = !DILocation(line: 913, column: 79, scope: !4628)
!4645 = !DILocation(line: 913, column: 87, scope: !4628)
!4646 = !DILocation(line: 913, column: 94, scope: !4628)
!4647 = !DILocation(line: 913, column: 102, scope: !4628)
!4648 = !DILocation(line: 913, column: 22, scope: !4628)
!4649 = !DILocation(line: 913, column: 20, scope: !4628)
!4650 = !DILocation(line: 915, column: 5, scope: !788)
!4651 = !DILocation(line: 915, column: 10, scope: !4652)
!4652 = !DILexicalBlockFile(scope: !802, file: !352, discriminator: 1)
!4653 = !DILocation(line: 915, column: 20, scope: !802)
!4654 = !DILocation(line: 915, column: 51, scope: !802)
!4655 = !DILocation(line: 915, column: 62, scope: !805)
!4656 = !DILocation(line: 915, column: 78, scope: !805)
!4657 = !DILocation(line: 915, column: 62, scope: !802)
!4658 = !DILocation(line: 915, column: 93, scope: !4659)
!4659 = !DILexicalBlockFile(scope: !805, file: !352, discriminator: 2)
!4660 = !DILocation(line: 915, column: 98, scope: !4661)
!4661 = !DILexicalBlockFile(scope: !804, file: !352, discriminator: 4)
!4662 = !DILocation(line: 915, column: 108, scope: !804)
!4663 = !DILocation(line: 915, column: 138, scope: !804)
!4664 = !DILocation(line: 915, column: 164, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !804, file: !352, line: 915, column: 161)
!4666 = !DILocation(line: 915, column: 181, scope: !4665)
!4667 = !DILocation(line: 915, column: 161, scope: !4665)
!4668 = !DILocation(line: 915, column: 191, scope: !4665)
!4669 = !DILocation(line: 915, column: 161, scope: !804)
!4670 = !DILocation(line: 915, column: 161, scope: !4671)
!4671 = !DILexicalBlockFile(scope: !804, file: !352, discriminator: 5)
!4672 = !DILocation(line: 915, column: 222, scope: !4673)
!4673 = !DILexicalBlockFile(scope: !4665, file: !352, discriminator: 6)
!4674 = !DILocation(line: 915, column: 240, scope: !4665)
!4675 = !DILocation(line: 915, column: 250, scope: !4665)
!4676 = !DILocation(line: 915, column: 275, scope: !4665)
!4677 = !DILocation(line: 915, column: 206, scope: !4665)
!4678 = !DILocation(line: 915, column: 294, scope: !4679)
!4679 = !DILexicalBlockFile(scope: !805, file: !352, discriminator: 7)
!4680 = !DILocation(line: 915, column: 294, scope: !804)
!4681 = !DILocation(line: 915, column: 294, scope: !4682)
!4682 = !DILexicalBlockFile(scope: !804, file: !352, discriminator: 8)
!4683 = !DILocation(line: 915, column: 294, scope: !4684)
!4684 = !DILexicalBlockFile(scope: !804, file: !352, discriminator: 9)
!4685 = !DILocation(line: 915, column: 307, scope: !4686)
!4686 = !DILexicalBlockFile(scope: !4687, file: !352, discriminator: 10)
!4687 = !DILexicalBlockFile(scope: !788, file: !352, discriminator: 3)
!4688 = !DILocation(line: 915, column: 307, scope: !802)
!4689 = !DILocation(line: 915, column: 307, scope: !4690)
!4690 = !DILexicalBlockFile(scope: !802, file: !352, discriminator: 11)
!4691 = !DILocation(line: 916, column: 5, scope: !788)
!4692 = !DILocation(line: 916, column: 10, scope: !4693)
!4693 = !DILexicalBlockFile(scope: !807, file: !352, discriminator: 1)
!4694 = !DILocation(line: 916, column: 20, scope: !807)
!4695 = !DILocation(line: 916, column: 50, scope: !807)
!4696 = !DILocation(line: 916, column: 67, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !807, file: !352, line: 916, column: 64)
!4698 = !DILocation(line: 916, column: 84, scope: !4697)
!4699 = !DILocation(line: 916, column: 64, scope: !4697)
!4700 = !DILocation(line: 916, column: 94, scope: !4697)
!4701 = !DILocation(line: 916, column: 64, scope: !807)
!4702 = !DILocation(line: 916, column: 64, scope: !4703)
!4703 = !DILexicalBlockFile(scope: !807, file: !352, discriminator: 2)
!4704 = !DILocation(line: 916, column: 125, scope: !4705)
!4705 = !DILexicalBlockFile(scope: !4697, file: !352, discriminator: 3)
!4706 = !DILocation(line: 916, column: 143, scope: !4697)
!4707 = !DILocation(line: 916, column: 153, scope: !4697)
!4708 = !DILocation(line: 916, column: 178, scope: !4697)
!4709 = !DILocation(line: 916, column: 109, scope: !4697)
!4710 = !DILocation(line: 916, column: 197, scope: !4711)
!4711 = !DILexicalBlockFile(scope: !788, file: !352, discriminator: 4)
!4712 = !DILocation(line: 916, column: 197, scope: !807)
!4713 = !DILocation(line: 916, column: 197, scope: !4714)
!4714 = !DILexicalBlockFile(scope: !807, file: !352, discriminator: 5)
!4715 = !DILocation(line: 917, column: 12, scope: !788)
!4716 = !DILocation(line: 917, column: 5, scope: !788)
!4717 = !DILocation(line: 918, column: 1, scope: !788)
!4718 = !DILocation(line: 685, column: 27, scope: !808)
!4719 = !DILocation(line: 685, column: 44, scope: !808)
!4720 = !DILocation(line: 687, column: 5, scope: !808)
!4721 = !DILocation(line: 687, column: 16, scope: !808)
!4722 = !DILocation(line: 687, column: 19, scope: !808)
!4723 = !DILocation(line: 687, column: 38, scope: !808)
!4724 = !DILocation(line: 687, column: 23, scope: !808)
!4725 = !DILocation(line: 687, column: 47, scope: !808)
!4726 = !DILocation(line: 689, column: 11, scope: !817)
!4727 = !DILocation(line: 689, column: 10, scope: !817)
!4728 = !DILocation(line: 689, column: 16, scope: !4729)
!4729 = !DILexicalBlockFile(scope: !4730, file: !352, discriminator: 2)
!4730 = !DILexicalBlockFile(scope: !816, file: !352, discriminator: 1)
!4731 = !DILocation(line: 689, column: 18, scope: !816)
!4732 = !DILocation(line: 689, column: 17, scope: !816)
!4733 = !DILocation(line: 689, column: 5, scope: !817)
!4734 = !DILocation(line: 690, column: 9, scope: !815)
!4735 = !DILocation(line: 690, column: 19, scope: !815)
!4736 = !DILocation(line: 690, column: 49, scope: !815)
!4737 = !DILocation(line: 690, column: 56, scope: !815)
!4738 = !DILocation(line: 690, column: 26, scope: !815)
!4739 = !DILocation(line: 690, column: 33, scope: !815)
!4740 = !DILocation(line: 690, column: 44, scope: !815)
!4741 = !DILocation(line: 691, column: 9, scope: !815)
!4742 = !DILocation(line: 691, column: 13, scope: !815)
!4743 = !DILocation(line: 691, column: 44, scope: !815)
!4744 = !DILocation(line: 691, column: 50, scope: !815)
!4745 = !DILocation(line: 691, column: 19, scope: !815)
!4746 = !DILocation(line: 693, column: 30, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !815, file: !352, line: 693, column: 13)
!4748 = !DILocation(line: 693, column: 15, scope: !4747)
!4749 = !DILocation(line: 693, column: 39, scope: !4747)
!4750 = !DILocation(line: 693, column: 51, scope: !4747)
!4751 = !DILocation(line: 693, column: 48, scope: !4747)
!4752 = !DILocation(line: 693, column: 13, scope: !815)
!4753 = !DILocation(line: 694, column: 29, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4747, file: !352, line: 693, column: 54)
!4755 = !DILocation(line: 694, column: 13, scope: !4754)
!4756 = !DILocation(line: 696, column: 13, scope: !4754)
!4757 = !DILocation(line: 698, column: 13, scope: !821)
!4758 = !DILocation(line: 698, column: 17, scope: !821)
!4759 = !DILocation(line: 698, column: 13, scope: !815)
!4760 = !DILocation(line: 699, column: 13, scope: !820)
!4761 = !DILocation(line: 699, column: 23, scope: !820)
!4762 = !DILocation(line: 699, column: 43, scope: !820)
!4763 = !DILocation(line: 699, column: 29, scope: !820)
!4764 = !DILocation(line: 701, column: 13, scope: !820)
!4765 = !DILocation(line: 701, column: 18, scope: !4766)
!4766 = !DILexicalBlockFile(scope: !823, file: !352, discriminator: 1)
!4767 = !DILocation(line: 701, column: 28, scope: !823)
!4768 = !DILocation(line: 701, column: 58, scope: !823)
!4769 = !DILocation(line: 701, column: 72, scope: !4770)
!4770 = distinct !DILexicalBlock(scope: !823, file: !352, line: 701, column: 69)
!4771 = !DILocation(line: 701, column: 89, scope: !4770)
!4772 = !DILocation(line: 701, column: 69, scope: !4770)
!4773 = !DILocation(line: 701, column: 99, scope: !4770)
!4774 = !DILocation(line: 701, column: 69, scope: !823)
!4775 = !DILocation(line: 701, column: 69, scope: !4776)
!4776 = !DILexicalBlockFile(scope: !823, file: !352, discriminator: 2)
!4777 = !DILocation(line: 701, column: 130, scope: !4778)
!4778 = !DILexicalBlockFile(scope: !4770, file: !352, discriminator: 3)
!4779 = !DILocation(line: 701, column: 148, scope: !4770)
!4780 = !DILocation(line: 701, column: 158, scope: !4770)
!4781 = !DILocation(line: 701, column: 183, scope: !4770)
!4782 = !DILocation(line: 701, column: 114, scope: !4770)
!4783 = !DILocation(line: 701, column: 202, scope: !4784)
!4784 = !DILexicalBlockFile(scope: !820, file: !352, discriminator: 4)
!4785 = !DILocation(line: 701, column: 202, scope: !823)
!4786 = !DILocation(line: 701, column: 202, scope: !4787)
!4787 = !DILexicalBlockFile(scope: !823, file: !352, discriminator: 5)
!4788 = !DILocation(line: 702, column: 31, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !820, file: !352, line: 702, column: 17)
!4790 = !DILocation(line: 702, column: 38, scope: !4789)
!4791 = !DILocation(line: 702, column: 17, scope: !4789)
!4792 = !DILocation(line: 702, column: 41, scope: !4789)
!4793 = !DILocation(line: 702, column: 17, scope: !820)
!4794 = !DILocation(line: 703, column: 17, scope: !4789)
!4795 = !DILocation(line: 704, column: 66, scope: !820)
!4796 = !DILocation(line: 704, column: 13, scope: !820)
!4797 = !DILocation(line: 705, column: 9, scope: !821)
!4798 = !DILocation(line: 706, column: 18, scope: !4799)
!4799 = distinct !DILexicalBlock(scope: !821, file: !352, line: 706, column: 18)
!4800 = !DILocation(line: 706, column: 22, scope: !4799)
!4801 = !DILocation(line: 706, column: 18, scope: !821)
!4802 = !DILocation(line: 707, column: 27, scope: !4803)
!4803 = distinct !DILexicalBlock(scope: !4799, file: !352, line: 706, column: 27)
!4804 = !DILocation(line: 707, column: 34, scope: !4803)
!4805 = !DILocation(line: 707, column: 13, scope: !4803)
!4806 = !DILocation(line: 708, column: 13, scope: !4803)
!4807 = !DILocation(line: 710, column: 23, scope: !815)
!4808 = !DILocation(line: 710, column: 9, scope: !815)
!4809 = !DILocation(line: 711, column: 5, scope: !816)
!4810 = !DILocation(line: 711, column: 5, scope: !4730)
!4811 = !DILocation(line: 711, column: 5, scope: !815)
!4812 = !DILocation(line: 689, column: 23, scope: !816)
!4813 = !DILocation(line: 689, column: 5, scope: !816)
!4814 = !DILocation(line: 712, column: 21, scope: !808)
!4815 = !DILocation(line: 712, column: 5, scope: !808)
!4816 = !DILocation(line: 713, column: 5, scope: !808)
!4817 = !DILocation(line: 714, column: 1, scope: !808)
!4818 = !DILocation(line: 1364, column: 28, scope: !824)
!4819 = !DILocation(line: 1366, column: 5, scope: !824)
!4820 = !DILocation(line: 1366, column: 22, scope: !824)
!4821 = !DILocation(line: 1368, column: 32, scope: !824)
!4822 = !DILocation(line: 1368, column: 12, scope: !824)
!4823 = !DILocation(line: 1368, column: 8, scope: !824)
!4824 = !DILocation(line: 1369, column: 9, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !824, file: !352, line: 1369, column: 9)
!4826 = !DILocation(line: 1369, column: 12, scope: !4825)
!4827 = !DILocation(line: 1369, column: 9, scope: !824)
!4828 = !DILocation(line: 1370, column: 9, scope: !4825)
!4829 = !DILocation(line: 1371, column: 13, scope: !824)
!4830 = !DILocation(line: 1371, column: 20, scope: !824)
!4831 = !DILocation(line: 1371, column: 5, scope: !824)
!4832 = !DILocation(line: 1371, column: 9, scope: !824)
!4833 = !DILocation(line: 1371, column: 11, scope: !824)
!4834 = !DILocation(line: 1372, column: 17, scope: !824)
!4835 = !DILocation(line: 1372, column: 24, scope: !824)
!4836 = !DILocation(line: 1372, column: 5, scope: !824)
!4837 = !DILocation(line: 1372, column: 9, scope: !824)
!4838 = !DILocation(line: 1372, column: 15, scope: !824)
!4839 = !DILocation(line: 1373, column: 21, scope: !824)
!4840 = !DILocation(line: 1373, column: 8, scope: !824)
!4841 = !DILocation(line: 1373, column: 30, scope: !824)
!4842 = !DILocation(line: 1373, column: 39, scope: !824)
!4843 = !DILocation(line: 1374, column: 17, scope: !824)
!4844 = !DILocation(line: 1374, column: 5, scope: !824)
!4845 = !DILocation(line: 1374, column: 9, scope: !824)
!4846 = !DILocation(line: 1374, column: 15, scope: !824)
!4847 = !DILocation(line: 1375, column: 17, scope: !824)
!4848 = !DILocation(line: 1375, column: 24, scope: !824)
!4849 = !DILocation(line: 1375, column: 5, scope: !824)
!4850 = !DILocation(line: 1375, column: 9, scope: !824)
!4851 = !DILocation(line: 1375, column: 15, scope: !824)
!4852 = !DILocation(line: 1376, column: 36, scope: !824)
!4853 = !DILocation(line: 1376, column: 21, scope: !824)
!4854 = !DILocation(line: 1376, column: 45, scope: !824)
!4855 = !DILocation(line: 1376, column: 5, scope: !824)
!4856 = !DILocation(line: 1376, column: 9, scope: !824)
!4857 = !DILocation(line: 1376, column: 17, scope: !824)
!4858 = !DILocation(line: 1377, column: 23, scope: !824)
!4859 = !DILocation(line: 1377, column: 5, scope: !824)
!4860 = !DILocation(line: 1378, column: 24, scope: !824)
!4861 = !DILocation(line: 1378, column: 12, scope: !824)
!4862 = !DILocation(line: 1378, column: 5, scope: !824)
!4863 = !DILocation(line: 1379, column: 1, scope: !824)
!4864 = !DILocation(line: 597, column: 28, scope: !828)
!4865 = !DILocation(line: 597, column: 45, scope: !828)
!4866 = !DILocation(line: 599, column: 5, scope: !828)
!4867 = !DILocation(line: 599, column: 12, scope: !828)
!4868 = !DILocation(line: 599, column: 24, scope: !828)
!4869 = !DILocation(line: 599, column: 31, scope: !828)
!4870 = !DILocation(line: 600, column: 5, scope: !828)
!4871 = !DILocation(line: 600, column: 12, scope: !828)
!4872 = !DILocation(line: 600, column: 25, scope: !828)
!4873 = !DILocation(line: 600, column: 32, scope: !828)
!4874 = !DILocation(line: 601, column: 5, scope: !828)
!4875 = !DILocation(line: 601, column: 16, scope: !828)
!4876 = !DILocation(line: 601, column: 28, scope: !828)
!4877 = !DILocation(line: 601, column: 35, scope: !828)
!4878 = !DILocation(line: 602, column: 5, scope: !828)
!4879 = !DILocation(line: 602, column: 16, scope: !828)
!4880 = !DILocation(line: 602, column: 29, scope: !828)
!4881 = !DILocation(line: 602, column: 36, scope: !828)
!4882 = !DILocation(line: 603, column: 5, scope: !828)
!4883 = !DILocation(line: 603, column: 16, scope: !828)
!4884 = !DILocation(line: 603, column: 38, scope: !828)
!4885 = !DILocation(line: 603, column: 23, scope: !828)
!4886 = !DILocation(line: 603, column: 47, scope: !828)
!4887 = !DILocation(line: 603, column: 56, scope: !828)
!4888 = !DILocation(line: 604, column: 5, scope: !828)
!4889 = !DILocation(line: 604, column: 16, scope: !828)
!4890 = !DILocation(line: 605, column: 5, scope: !828)
!4891 = !DILocation(line: 605, column: 15, scope: !828)
!4892 = !DILocation(line: 607, column: 11, scope: !4893)
!4893 = distinct !DILexicalBlock(scope: !828, file: !352, line: 607, column: 5)
!4894 = !DILocation(line: 607, column: 10, scope: !4893)
!4895 = !DILocation(line: 607, column: 16, scope: !4896)
!4896 = !DILexicalBlockFile(scope: !4897, file: !352, discriminator: 2)
!4897 = !DILexicalBlockFile(scope: !4898, file: !352, discriminator: 1)
!4898 = distinct !DILexicalBlock(scope: !4893, file: !352, line: 607, column: 5)
!4899 = !DILocation(line: 607, column: 18, scope: !4898)
!4900 = !DILocation(line: 607, column: 17, scope: !4898)
!4901 = !DILocation(line: 607, column: 5, scope: !4893)
!4902 = !DILocation(line: 614, column: 31, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !4898, file: !352, line: 607, column: 27)
!4904 = !DILocation(line: 614, column: 15, scope: !4903)
!4905 = !DILocation(line: 614, column: 26, scope: !4903)
!4906 = !DILocation(line: 614, column: 13, scope: !4903)
!4907 = !DILocation(line: 615, column: 55, scope: !4903)
!4908 = !DILocation(line: 615, column: 38, scope: !4903)
!4909 = !DILocation(line: 615, column: 50, scope: !4903)
!4910 = !DILocation(line: 615, column: 25, scope: !4903)
!4911 = !DILocation(line: 615, column: 9, scope: !4903)
!4912 = !DILocation(line: 615, column: 20, scope: !4903)
!4913 = !DILocation(line: 615, column: 36, scope: !4903)
!4914 = !DILocation(line: 616, column: 40, scope: !4903)
!4915 = !DILocation(line: 616, column: 26, scope: !4903)
!4916 = !DILocation(line: 616, column: 9, scope: !4903)
!4917 = !DILocation(line: 616, column: 21, scope: !4903)
!4918 = !DILocation(line: 616, column: 38, scope: !4903)
!4919 = !DILocation(line: 619, column: 18, scope: !4903)
!4920 = !DILocation(line: 620, column: 13, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4903, file: !352, line: 620, column: 13)
!4922 = !DILocation(line: 620, column: 23, scope: !4921)
!4923 = !DILocation(line: 620, column: 13, scope: !4903)
!4924 = !DILocation(line: 621, column: 25, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4921, file: !352, line: 620, column: 30)
!4926 = !DILocation(line: 621, column: 36, scope: !4925)
!4927 = !DILocation(line: 621, column: 23, scope: !4925)
!4928 = !DILocation(line: 622, column: 23, scope: !4925)
!4929 = !DILocation(line: 623, column: 9, scope: !4925)
!4930 = !DILocation(line: 626, column: 19, scope: !4903)
!4931 = !DILocation(line: 627, column: 13, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4903, file: !352, line: 627, column: 13)
!4933 = !DILocation(line: 627, column: 24, scope: !4932)
!4934 = !DILocation(line: 627, column: 13, scope: !4903)
!4935 = !DILocation(line: 628, column: 26, scope: !4936)
!4936 = distinct !DILexicalBlock(scope: !4932, file: !352, line: 627, column: 31)
!4937 = !DILocation(line: 628, column: 38, scope: !4936)
!4938 = !DILocation(line: 628, column: 24, scope: !4936)
!4939 = !DILocation(line: 629, column: 24, scope: !4936)
!4940 = !DILocation(line: 630, column: 9, scope: !4936)
!4941 = !DILocation(line: 631, column: 5, scope: !4903)
!4942 = !DILocation(line: 607, column: 23, scope: !4898)
!4943 = !DILocation(line: 607, column: 5, scope: !4898)
!4944 = !DILocation(line: 632, column: 58, scope: !828)
!4945 = !DILocation(line: 633, column: 1, scope: !828)
!4946 = !DILocation(line: 632, column: 5, scope: !828)
!4947 = !DILocation(line: 582, column: 27, scope: !839)
!4948 = !DILocation(line: 582, column: 44, scope: !839)
!4949 = !DILocation(line: 584, column: 5, scope: !839)
!4950 = !DILocation(line: 584, column: 16, scope: !839)
!4951 = !DILocation(line: 586, column: 27, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !839, file: !352, line: 586, column: 9)
!4953 = !DILocation(line: 586, column: 10, scope: !4952)
!4954 = !DILocation(line: 586, column: 9, scope: !839)
!4955 = !DILocation(line: 587, column: 9, scope: !4952)
!4956 = !DILocation(line: 588, column: 23, scope: !4957)
!4957 = distinct !DILexicalBlock(scope: !839, file: !352, line: 588, column: 9)
!4958 = !DILocation(line: 588, column: 30, scope: !4957)
!4959 = !DILocation(line: 588, column: 9, scope: !4957)
!4960 = !DILocation(line: 588, column: 33, scope: !4957)
!4961 = !DILocation(line: 588, column: 9, scope: !839)
!4962 = !DILocation(line: 589, column: 62, scope: !4957)
!4963 = !DILocation(line: 589, column: 9, scope: !4957)
!4964 = !DILocation(line: 590, column: 5, scope: !839)
!4965 = !DILocation(line: 591, column: 1, scope: !839)
!4966 = !DILocation(line: 1060, column: 27, scope: !844)
!4967 = !DILocation(line: 1060, column: 40, scope: !844)
!4968 = !DILocation(line: 1062, column: 5, scope: !844)
!4969 = !DILocation(line: 1062, column: 16, scope: !844)
!4970 = !DILocation(line: 1063, column: 5, scope: !844)
!4971 = !DILocation(line: 1063, column: 16, scope: !844)
!4972 = !DILocation(line: 1065, column: 9, scope: !844)
!4973 = !DILocation(line: 1066, column: 15, scope: !844)
!4974 = !DILocation(line: 1066, column: 22, scope: !844)
!4975 = !DILocation(line: 1066, column: 51, scope: !844)
!4976 = !DILocation(line: 1066, column: 36, scope: !844)
!4977 = !DILocation(line: 1066, column: 60, scope: !844)
!4978 = !DILocation(line: 1066, column: 32, scope: !844)
!4979 = !DILocation(line: 1066, column: 69, scope: !844)
!4980 = !DILocation(line: 1066, column: 74, scope: !844)
!4981 = !DILocation(line: 1066, column: 79, scope: !844)
!4982 = !DILocation(line: 1066, column: 12, scope: !844)
!4983 = !DILocation(line: 1069, column: 12, scope: !844)
!4984 = !DILocation(line: 1069, column: 19, scope: !844)
!4985 = !DILocation(line: 1069, column: 9, scope: !844)
!4986 = !DILocation(line: 1070, column: 31, scope: !844)
!4987 = !DILocation(line: 1070, column: 12, scope: !844)
!4988 = !DILocation(line: 1071, column: 1, scope: !844)
!4989 = !DILocation(line: 1070, column: 5, scope: !844)
!4990 = !DILocation(line: 1077, column: 31, scope: !852)
!4991 = !DILocation(line: 1079, column: 9, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !852, file: !352, line: 1079, column: 9)
!4993 = !DILocation(line: 1079, column: 16, scope: !4992)
!4994 = !DILocation(line: 1079, column: 23, scope: !4992)
!4995 = !DILocation(line: 1079, column: 9, scope: !852)
!4996 = !DILocation(line: 1080, column: 62, scope: !4992)
!4997 = !DILocation(line: 1080, column: 9, scope: !4992)
!4998 = !DILocation(line: 1081, column: 31, scope: !852)
!4999 = !DILocation(line: 1081, column: 38, scope: !852)
!5000 = !DILocation(line: 1081, column: 12, scope: !852)
!5001 = !DILocation(line: 1081, column: 5, scope: !852)
!5002 = !DILocation(line: 1082, column: 1, scope: !852)
!5003 = !DILocation(line: 1613, column: 32, scope: !889)
!5004 = !DILocation(line: 1615, column: 5, scope: !889)
!5005 = !DILocation(line: 1615, column: 10, scope: !5006)
!5006 = !DILexicalBlockFile(scope: !895, file: !352, discriminator: 1)
!5007 = !DILocation(line: 1615, column: 20, scope: !895)
!5008 = !DILocation(line: 1615, column: 43, scope: !895)
!5009 = !DILocation(line: 1615, column: 47, scope: !895)
!5010 = !{!5011, !1247, i64 40}
!5011 = !{!"", !5012, i64 0, !1247, i64 40}
!5012 = !{!"", !1262, i64 0, !1263, i64 16, !1247, i64 24, !1247, i64 32}
!5013 = !DILocation(line: 1615, column: 69, scope: !899)
!5014 = !DILocation(line: 1615, column: 77, scope: !899)
!5015 = !DILocation(line: 1615, column: 69, scope: !895)
!5016 = !DILocation(line: 1615, column: 95, scope: !5017)
!5017 = !DILexicalBlockFile(scope: !898, file: !352, discriminator: 2)
!5018 = !DILocation(line: 1615, column: 99, scope: !898)
!5019 = !DILocation(line: 1615, column: 116, scope: !898)
!5020 = !DILocation(line: 1615, column: 130, scope: !898)
!5021 = !DILocation(line: 1615, column: 135, scope: !5022)
!5022 = !DILexicalBlockFile(scope: !897, file: !352, discriminator: 4)
!5023 = !DILocation(line: 1615, column: 145, scope: !897)
!5024 = !DILocation(line: 1615, column: 175, scope: !897)
!5025 = !DILocation(line: 1615, column: 193, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !897, file: !352, line: 1615, column: 190)
!5027 = !DILocation(line: 1615, column: 210, scope: !5026)
!5028 = !DILocation(line: 1615, column: 190, scope: !5026)
!5029 = !DILocation(line: 1615, column: 220, scope: !5026)
!5030 = !DILocation(line: 1615, column: 190, scope: !897)
!5031 = !DILocation(line: 1615, column: 190, scope: !5032)
!5032 = !DILexicalBlockFile(scope: !897, file: !352, discriminator: 5)
!5033 = !DILocation(line: 1615, column: 251, scope: !5034)
!5034 = !DILexicalBlockFile(scope: !5026, file: !352, discriminator: 6)
!5035 = !DILocation(line: 1615, column: 269, scope: !5026)
!5036 = !DILocation(line: 1615, column: 279, scope: !5026)
!5037 = !DILocation(line: 1615, column: 304, scope: !5026)
!5038 = !DILocation(line: 1615, column: 235, scope: !5026)
!5039 = !DILocation(line: 1615, column: 323, scope: !5040)
!5040 = !DILexicalBlockFile(scope: !898, file: !352, discriminator: 7)
!5041 = !DILocation(line: 1615, column: 323, scope: !897)
!5042 = !DILocation(line: 1615, column: 323, scope: !5043)
!5043 = !DILexicalBlockFile(scope: !897, file: !352, discriminator: 8)
!5044 = !DILocation(line: 1615, column: 336, scope: !5045)
!5045 = !DILexicalBlockFile(scope: !898, file: !352, discriminator: 9)
!5046 = !DILocation(line: 1615, column: 338, scope: !5047)
!5047 = !DILexicalBlockFile(scope: !5048, file: !352, discriminator: 10)
!5048 = !DILexicalBlockFile(scope: !889, file: !352, discriminator: 3)
!5049 = !DILocation(line: 1615, column: 338, scope: !895)
!5050 = !DILocation(line: 1616, column: 17, scope: !889)
!5051 = !DILocation(line: 1616, column: 40, scope: !889)
!5052 = !DILocation(line: 1616, column: 28, scope: !889)
!5053 = !DILocation(line: 1616, column: 5, scope: !889)
!5054 = !DILocation(line: 1617, column: 1, scope: !889)
!5055 = !DILocation(line: 1620, column: 29, scope: !900)
!5056 = !DILocation(line: 1622, column: 5, scope: !900)
!5057 = !DILocation(line: 1622, column: 15, scope: !900)
!5058 = !DILocation(line: 1623, column: 5, scope: !900)
!5059 = !DILocation(line: 1623, column: 15, scope: !900)
!5060 = !DILocation(line: 1624, column: 5, scope: !900)
!5061 = !DILocation(line: 1624, column: 15, scope: !900)
!5062 = !DILocation(line: 1625, column: 28, scope: !900)
!5063 = !{!1268, !1247, i64 88}
!5064 = !DILocation(line: 1625, column: 48, scope: !900)
!5065 = !DILocation(line: 1625, column: 36, scope: !900)
!5066 = !DILocation(line: 1625, column: 16, scope: !900)
!5067 = !DILocation(line: 1625, column: 14, scope: !900)
!5068 = !DILocation(line: 1626, column: 9, scope: !5069)
!5069 = distinct !DILexicalBlock(scope: !900, file: !352, line: 1626, column: 9)
!5070 = !DILocation(line: 1626, column: 18, scope: !5069)
!5071 = !DILocation(line: 1626, column: 9, scope: !900)
!5072 = !DILocation(line: 1627, column: 9, scope: !5069)
!5073 = !DILocation(line: 1628, column: 9, scope: !910)
!5074 = !DILocation(line: 1628, column: 13, scope: !910)
!5075 = !DILocation(line: 1628, column: 29, scope: !910)
!5076 = !DILocation(line: 1628, column: 9, scope: !900)
!5077 = !DILocation(line: 1629, column: 19, scope: !910)
!5078 = !DILocation(line: 1629, column: 17, scope: !910)
!5079 = !DILocation(line: 1629, column: 9, scope: !910)
!5080 = !DILocation(line: 1632, column: 9, scope: !909)
!5081 = !DILocation(line: 1632, column: 13, scope: !909)
!5082 = !DILocation(line: 1632, column: 35, scope: !909)
!5083 = !DILocation(line: 1632, column: 39, scope: !909)
!5084 = !DILocation(line: 1632, column: 22, scope: !909)
!5085 = !DILocation(line: 1633, column: 13, scope: !916)
!5086 = !DILocation(line: 1633, column: 20, scope: !916)
!5087 = !DILocation(line: 1633, column: 13, scope: !909)
!5088 = !DILocation(line: 1634, column: 17, scope: !914)
!5089 = !DILocation(line: 1634, column: 24, scope: !914)
!5090 = !DILocation(line: 1634, column: 17, scope: !915)
!5091 = !DILocation(line: 1635, column: 17, scope: !913)
!5092 = !DILocation(line: 1635, column: 22, scope: !5093)
!5093 = !DILexicalBlockFile(scope: !912, file: !352, discriminator: 1)
!5094 = !DILocation(line: 1635, column: 32, scope: !912)
!5095 = !DILocation(line: 1635, column: 62, scope: !912)
!5096 = !DILocation(line: 1635, column: 81, scope: !5097)
!5097 = distinct !DILexicalBlock(scope: !912, file: !352, line: 1635, column: 78)
!5098 = !DILocation(line: 1635, column: 98, scope: !5097)
!5099 = !DILocation(line: 1635, column: 78, scope: !5097)
!5100 = !DILocation(line: 1635, column: 108, scope: !5097)
!5101 = !DILocation(line: 1635, column: 78, scope: !912)
!5102 = !DILocation(line: 1635, column: 78, scope: !5103)
!5103 = !DILexicalBlockFile(scope: !912, file: !352, discriminator: 2)
!5104 = !DILocation(line: 1635, column: 139, scope: !5105)
!5105 = !DILexicalBlockFile(scope: !5097, file: !352, discriminator: 3)
!5106 = !DILocation(line: 1635, column: 157, scope: !5097)
!5107 = !DILocation(line: 1635, column: 167, scope: !5097)
!5108 = !DILocation(line: 1635, column: 192, scope: !5097)
!5109 = !DILocation(line: 1635, column: 123, scope: !5097)
!5110 = !DILocation(line: 1635, column: 211, scope: !5111)
!5111 = !DILexicalBlockFile(scope: !913, file: !352, discriminator: 4)
!5112 = !DILocation(line: 1635, column: 211, scope: !912)
!5113 = !DILocation(line: 1635, column: 211, scope: !5114)
!5114 = !DILexicalBlockFile(scope: !912, file: !352, discriminator: 5)
!5115 = !DILocation(line: 1636, column: 17, scope: !913)
!5116 = !DILocation(line: 1638, column: 23, scope: !915)
!5117 = !DILocation(line: 1638, column: 21, scope: !915)
!5118 = !DILocation(line: 1639, column: 9, scope: !915)
!5119 = !DILocation(line: 1641, column: 37, scope: !916)
!5120 = !DILocation(line: 1641, column: 41, scope: !916)
!5121 = !DILocation(line: 1641, column: 23, scope: !916)
!5122 = !DILocation(line: 1641, column: 21, scope: !916)
!5123 = !DILocation(line: 1642, column: 22, scope: !909)
!5124 = !DILocation(line: 1642, column: 26, scope: !909)
!5125 = !DILocation(line: 1642, column: 9, scope: !909)
!5126 = !DILocation(line: 1643, column: 5, scope: !910)
!5127 = !DILocation(line: 1643, column: 5, scope: !5128)
!5128 = !DILexicalBlockFile(scope: !910, file: !352, discriminator: 1)
!5129 = !DILocation(line: 1644, column: 9, scope: !920)
!5130 = !DILocation(line: 1644, column: 17, scope: !920)
!5131 = !DILocation(line: 1644, column: 9, scope: !900)
!5132 = !DILocation(line: 1645, column: 9, scope: !919)
!5133 = !DILocation(line: 1645, column: 14, scope: !5134)
!5134 = !DILexicalBlockFile(scope: !918, file: !352, discriminator: 1)
!5135 = !DILocation(line: 1645, column: 24, scope: !918)
!5136 = !DILocation(line: 1645, column: 54, scope: !918)
!5137 = !DILocation(line: 1645, column: 73, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !918, file: !352, line: 1645, column: 70)
!5139 = !DILocation(line: 1645, column: 90, scope: !5138)
!5140 = !DILocation(line: 1645, column: 70, scope: !5138)
!5141 = !DILocation(line: 1645, column: 100, scope: !5138)
!5142 = !DILocation(line: 1645, column: 70, scope: !918)
!5143 = !DILocation(line: 1645, column: 70, scope: !5144)
!5144 = !DILexicalBlockFile(scope: !918, file: !352, discriminator: 2)
!5145 = !DILocation(line: 1645, column: 131, scope: !5146)
!5146 = !DILexicalBlockFile(scope: !5138, file: !352, discriminator: 3)
!5147 = !DILocation(line: 1645, column: 149, scope: !5138)
!5148 = !DILocation(line: 1645, column: 159, scope: !5138)
!5149 = !DILocation(line: 1645, column: 184, scope: !5138)
!5150 = !DILocation(line: 1645, column: 115, scope: !5138)
!5151 = !DILocation(line: 1645, column: 203, scope: !5152)
!5152 = !DILexicalBlockFile(scope: !919, file: !352, discriminator: 4)
!5153 = !DILocation(line: 1645, column: 203, scope: !918)
!5154 = !DILocation(line: 1645, column: 203, scope: !5155)
!5155 = !DILexicalBlockFile(scope: !918, file: !352, discriminator: 5)
!5156 = !DILocation(line: 1646, column: 9, scope: !919)
!5157 = !DILocation(line: 1649, column: 35, scope: !900)
!5158 = !DILocation(line: 1649, column: 44, scope: !900)
!5159 = !DILocation(line: 1648, column: 14, scope: !900)
!5160 = !DILocation(line: 1648, column: 12, scope: !900)
!5161 = !DILocation(line: 1650, column: 5, scope: !900)
!5162 = !DILocation(line: 1650, column: 10, scope: !5163)
!5163 = !DILexicalBlockFile(scope: !922, file: !352, discriminator: 1)
!5164 = !DILocation(line: 1650, column: 20, scope: !922)
!5165 = !DILocation(line: 1650, column: 50, scope: !922)
!5166 = !DILocation(line: 1650, column: 68, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !922, file: !352, line: 1650, column: 65)
!5168 = !DILocation(line: 1650, column: 85, scope: !5167)
!5169 = !DILocation(line: 1650, column: 65, scope: !5167)
!5170 = !DILocation(line: 1650, column: 95, scope: !5167)
!5171 = !DILocation(line: 1650, column: 65, scope: !922)
!5172 = !DILocation(line: 1650, column: 65, scope: !5173)
!5173 = !DILexicalBlockFile(scope: !922, file: !352, discriminator: 2)
!5174 = !DILocation(line: 1650, column: 126, scope: !5175)
!5175 = !DILexicalBlockFile(scope: !5167, file: !352, discriminator: 3)
!5176 = !DILocation(line: 1650, column: 144, scope: !5167)
!5177 = !DILocation(line: 1650, column: 154, scope: !5167)
!5178 = !DILocation(line: 1650, column: 179, scope: !5167)
!5179 = !DILocation(line: 1650, column: 110, scope: !5167)
!5180 = !DILocation(line: 1650, column: 198, scope: !5181)
!5181 = !DILexicalBlockFile(scope: !900, file: !352, discriminator: 4)
!5182 = !DILocation(line: 1650, column: 198, scope: !922)
!5183 = !DILocation(line: 1650, column: 198, scope: !5184)
!5184 = !DILexicalBlockFile(scope: !922, file: !352, discriminator: 5)
!5185 = !DILocation(line: 1651, column: 5, scope: !900)
!5186 = !DILocation(line: 1651, column: 10, scope: !5187)
!5187 = !DILexicalBlockFile(scope: !924, file: !352, discriminator: 1)
!5188 = !DILocation(line: 1651, column: 20, scope: !924)
!5189 = !DILocation(line: 1651, column: 50, scope: !924)
!5190 = !DILocation(line: 1651, column: 69, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !924, file: !352, line: 1651, column: 66)
!5192 = !DILocation(line: 1651, column: 86, scope: !5191)
!5193 = !DILocation(line: 1651, column: 66, scope: !5191)
!5194 = !DILocation(line: 1651, column: 96, scope: !5191)
!5195 = !DILocation(line: 1651, column: 66, scope: !924)
!5196 = !DILocation(line: 1651, column: 66, scope: !5197)
!5197 = !DILexicalBlockFile(scope: !924, file: !352, discriminator: 2)
!5198 = !DILocation(line: 1651, column: 127, scope: !5199)
!5199 = !DILexicalBlockFile(scope: !5191, file: !352, discriminator: 3)
!5200 = !DILocation(line: 1651, column: 145, scope: !5191)
!5201 = !DILocation(line: 1651, column: 155, scope: !5191)
!5202 = !DILocation(line: 1651, column: 180, scope: !5191)
!5203 = !DILocation(line: 1651, column: 111, scope: !5191)
!5204 = !DILocation(line: 1651, column: 199, scope: !5181)
!5205 = !DILocation(line: 1651, column: 199, scope: !924)
!5206 = !DILocation(line: 1651, column: 199, scope: !5207)
!5207 = !DILexicalBlockFile(scope: !924, file: !352, discriminator: 5)
!5208 = !DILocation(line: 1652, column: 12, scope: !900)
!5209 = !DILocation(line: 1652, column: 5, scope: !900)
!5210 = !DILocation(line: 1653, column: 1, scope: !900)
!5211 = !DILocation(line: 1656, column: 28, scope: !925)
!5212 = !DILocation(line: 1656, column: 44, scope: !925)
!5213 = !DILocation(line: 1656, column: 57, scope: !925)
!5214 = !DILocation(line: 1658, column: 5, scope: !925)
!5215 = !DILocation(line: 1658, column: 32, scope: !5216)
!5216 = !DILexicalBlockFile(scope: !932, file: !352, discriminator: 1)
!5217 = !DILocation(line: 1658, column: 15, scope: !932)
!5218 = !DILocation(line: 1658, column: 39, scope: !932)
!5219 = !DILocation(line: 1658, column: 14, scope: !932)
!5220 = !DILocation(line: 1658, column: 14, scope: !933)
!5221 = !DILocation(line: 1658, column: 58, scope: !5222)
!5222 = !DILexicalBlockFile(scope: !931, file: !352, discriminator: 2)
!5223 = !DILocation(line: 1658, column: 62, scope: !931)
!5224 = !DILocation(line: 1658, column: 69, scope: !931)
!5225 = !DILocation(line: 1658, column: 106, scope: !931)
!5226 = !DILocation(line: 1658, column: 89, scope: !931)
!5227 = !DILocation(line: 1658, column: 113, scope: !931)
!5228 = !DILocation(line: 1658, column: 131, scope: !931)
!5229 = !DILocation(line: 1658, column: 141, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !931, file: !352, line: 1658, column: 141)
!5231 = !DILocation(line: 1658, column: 141, scope: !931)
!5232 = !DILocation(line: 1658, column: 154, scope: !5233)
!5233 = !DILexicalBlockFile(scope: !5230, file: !352, discriminator: 4)
!5234 = !DILocation(line: 1658, column: 147, scope: !5230)
!5235 = !DILocation(line: 1658, column: 160, scope: !5236)
!5236 = !DILexicalBlockFile(scope: !932, file: !352, discriminator: 5)
!5237 = !DILocation(line: 1658, column: 160, scope: !5238)
!5238 = !DILexicalBlockFile(scope: !5239, file: !352, discriminator: 7)
!5239 = !DILexicalBlockFile(scope: !932, file: !352, discriminator: 6)
!5240 = !DILocation(line: 1658, column: 160, scope: !931)
!5241 = !DILocation(line: 1658, column: 162, scope: !5242)
!5242 = !DILexicalBlockFile(scope: !5243, file: !352, discriminator: 8)
!5243 = !DILexicalBlockFile(scope: !933, file: !352, discriminator: 3)
!5244 = !DILocation(line: 1659, column: 24, scope: !925)
!5245 = !{!1268, !1247, i64 184}
!5246 = !DILocation(line: 1659, column: 36, scope: !925)
!5247 = !DILocation(line: 1659, column: 42, scope: !925)
!5248 = !DILocation(line: 1659, column: 49, scope: !925)
!5249 = !DILocation(line: 1659, column: 12, scope: !925)
!5250 = !DILocation(line: 1659, column: 5, scope: !925)
!5251 = !DILocation(line: 1660, column: 1, scope: !925)
!5252 = !DILocation(line: 1663, column: 33, scope: !934)
!5253 = !DILocation(line: 1665, column: 5, scope: !934)
!5254 = !DILocation(line: 1665, column: 10, scope: !5255)
!5255 = !DILexicalBlockFile(scope: !940, file: !352, discriminator: 1)
!5256 = !DILocation(line: 1665, column: 20, scope: !940)
!5257 = !DILocation(line: 1665, column: 43, scope: !940)
!5258 = !DILocation(line: 1665, column: 47, scope: !940)
!5259 = !DILocation(line: 1665, column: 69, scope: !944)
!5260 = !DILocation(line: 1665, column: 77, scope: !944)
!5261 = !DILocation(line: 1665, column: 69, scope: !940)
!5262 = !DILocation(line: 1665, column: 95, scope: !5263)
!5263 = !DILexicalBlockFile(scope: !943, file: !352, discriminator: 2)
!5264 = !DILocation(line: 1665, column: 99, scope: !943)
!5265 = !DILocation(line: 1665, column: 116, scope: !943)
!5266 = !DILocation(line: 1665, column: 130, scope: !943)
!5267 = !DILocation(line: 1665, column: 135, scope: !5268)
!5268 = !DILexicalBlockFile(scope: !942, file: !352, discriminator: 4)
!5269 = !DILocation(line: 1665, column: 145, scope: !942)
!5270 = !DILocation(line: 1665, column: 175, scope: !942)
!5271 = !DILocation(line: 1665, column: 193, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !942, file: !352, line: 1665, column: 190)
!5273 = !DILocation(line: 1665, column: 210, scope: !5272)
!5274 = !DILocation(line: 1665, column: 190, scope: !5272)
!5275 = !DILocation(line: 1665, column: 220, scope: !5272)
!5276 = !DILocation(line: 1665, column: 190, scope: !942)
!5277 = !DILocation(line: 1665, column: 190, scope: !5278)
!5278 = !DILexicalBlockFile(scope: !942, file: !352, discriminator: 5)
!5279 = !DILocation(line: 1665, column: 251, scope: !5280)
!5280 = !DILexicalBlockFile(scope: !5272, file: !352, discriminator: 6)
!5281 = !DILocation(line: 1665, column: 269, scope: !5272)
!5282 = !DILocation(line: 1665, column: 279, scope: !5272)
!5283 = !DILocation(line: 1665, column: 304, scope: !5272)
!5284 = !DILocation(line: 1665, column: 235, scope: !5272)
!5285 = !DILocation(line: 1665, column: 323, scope: !5286)
!5286 = !DILexicalBlockFile(scope: !943, file: !352, discriminator: 7)
!5287 = !DILocation(line: 1665, column: 323, scope: !942)
!5288 = !DILocation(line: 1665, column: 323, scope: !5289)
!5289 = !DILexicalBlockFile(scope: !942, file: !352, discriminator: 8)
!5290 = !DILocation(line: 1665, column: 336, scope: !5291)
!5291 = !DILexicalBlockFile(scope: !943, file: !352, discriminator: 9)
!5292 = !DILocation(line: 1665, column: 338, scope: !5293)
!5293 = !DILexicalBlockFile(scope: !5294, file: !352, discriminator: 10)
!5294 = !DILexicalBlockFile(scope: !934, file: !352, discriminator: 3)
!5295 = !DILocation(line: 1665, column: 338, scope: !940)
!5296 = !DILocation(line: 1666, column: 24, scope: !934)
!5297 = !{!1268, !1247, i64 192}
!5298 = !DILocation(line: 1666, column: 45, scope: !934)
!5299 = !DILocation(line: 1666, column: 33, scope: !934)
!5300 = !DILocation(line: 1666, column: 12, scope: !934)
!5301 = !DILocation(line: 1666, column: 5, scope: !934)
!5302 = !DILocation(line: 1670, column: 24, scope: !988)
!5303 = !DILocation(line: 1670, column: 40, scope: !988)
!5304 = !DILocation(line: 1670, column: 56, scope: !988)
!5305 = !DILocation(line: 1672, column: 5, scope: !988)
!5306 = !DILocation(line: 1672, column: 20, scope: !988)
!5307 = !DILocation(line: 1672, column: 42, scope: !988)
!5308 = !DILocation(line: 1672, column: 25, scope: !988)
!5309 = !DILocation(line: 1673, column: 5, scope: !988)
!5310 = !DILocation(line: 1673, column: 15, scope: !988)
!5311 = !DILocation(line: 1673, column: 28, scope: !988)
!5312 = !DILocation(line: 1673, column: 32, scope: !988)
!5313 = !DILocation(line: 1674, column: 5, scope: !988)
!5314 = !DILocation(line: 1674, column: 15, scope: !988)
!5315 = !DILocation(line: 1675, column: 5, scope: !988)
!5316 = !DILocation(line: 1675, column: 15, scope: !988)
!5317 = !DILocation(line: 1676, column: 5, scope: !988)
!5318 = !DILocation(line: 1676, column: 9, scope: !988)
!5319 = !DILocation(line: 1677, column: 9, scope: !1000)
!5320 = !DILocation(line: 1677, column: 14, scope: !1000)
!5321 = !DILocation(line: 1677, column: 28, scope: !1000)
!5322 = !DILocation(line: 1677, column: 49, scope: !5323)
!5323 = !DILexicalBlockFile(scope: !1000, file: !352, discriminator: 1)
!5324 = !DILocation(line: 1677, column: 57, scope: !1000)
!5325 = !DILocation(line: 1677, column: 68, scope: !1000)
!5326 = !{!1268, !1263, i64 168}
!5327 = !DILocation(line: 1677, column: 77, scope: !1000)
!5328 = !DILocation(line: 1677, column: 94, scope: !1000)
!5329 = !DILocation(line: 1677, column: 9, scope: !988)
!5330 = !DILocation(line: 1678, column: 19, scope: !1000)
!5331 = !DILocation(line: 1678, column: 17, scope: !1000)
!5332 = !DILocation(line: 1678, column: 9, scope: !1000)
!5333 = !DILocation(line: 1680, column: 9, scope: !999)
!5334 = !DILocation(line: 1680, column: 20, scope: !999)
!5335 = !DILocation(line: 1680, column: 41, scope: !999)
!5336 = !DILocation(line: 1680, column: 26, scope: !999)
!5337 = !DILocation(line: 1680, column: 49, scope: !999)
!5338 = !DILocation(line: 1681, column: 13, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !999, file: !352, line: 1681, column: 13)
!5340 = !DILocation(line: 1681, column: 15, scope: !5339)
!5341 = !DILocation(line: 1681, column: 13, scope: !999)
!5342 = !DILocation(line: 1682, column: 46, scope: !5343)
!5343 = distinct !DILexicalBlock(scope: !5339, file: !352, line: 1681, column: 20)
!5344 = !DILocation(line: 1682, column: 28, scope: !5343)
!5345 = !DILocation(line: 1682, column: 54, scope: !5343)
!5346 = !DILocation(line: 1682, column: 27, scope: !5343)
!5347 = !DILocation(line: 1682, column: 24, scope: !5343)
!5348 = !DILocation(line: 1683, column: 35, scope: !5349)
!5349 = distinct !DILexicalBlock(scope: !5343, file: !352, line: 1683, column: 17)
!5350 = !DILocation(line: 1683, column: 18, scope: !5349)
!5351 = !DILocation(line: 1683, column: 47, scope: !5349)
!5352 = !DILocation(line: 1683, column: 50, scope: !5353)
!5353 = !DILexicalBlockFile(scope: !5349, file: !352, discriminator: 1)
!5354 = !DILocation(line: 1683, column: 61, scope: !5349)
!5355 = !DILocation(line: 1683, column: 17, scope: !5343)
!5356 = !DILocation(line: 1684, column: 33, scope: !5357)
!5357 = distinct !DILexicalBlock(scope: !5349, file: !352, line: 1683, column: 83)
!5358 = !DILocation(line: 1684, column: 17, scope: !5357)
!5359 = !DILocation(line: 1686, column: 17, scope: !5357)
!5360 = !DILocation(line: 1688, column: 9, scope: !5343)
!5361 = !DILocation(line: 1689, column: 39, scope: !999)
!5362 = !DILocation(line: 1689, column: 48, scope: !999)
!5363 = !DILocation(line: 1689, column: 19, scope: !999)
!5364 = !DILocation(line: 1689, column: 17, scope: !999)
!5365 = !DILocation(line: 1690, column: 5, scope: !1000)
!5366 = !DILocation(line: 1690, column: 5, scope: !5323)
!5367 = !DILocation(line: 1691, column: 9, scope: !5368)
!5368 = distinct !DILexicalBlock(scope: !988, file: !352, line: 1691, column: 9)
!5369 = !DILocation(line: 1691, column: 17, scope: !5368)
!5370 = !DILocation(line: 1691, column: 9, scope: !988)
!5371 = !DILocation(line: 1692, column: 9, scope: !5368)
!5372 = !DILocation(line: 1693, column: 5, scope: !988)
!5373 = !DILocation(line: 1693, column: 10, scope: !5374)
!5374 = !DILexicalBlockFile(scope: !1002, file: !352, discriminator: 1)
!5375 = !DILocation(line: 1693, column: 20, scope: !1002)
!5376 = !DILocation(line: 1693, column: 51, scope: !1002)
!5377 = !DILocation(line: 1693, column: 68, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !1002, file: !352, line: 1693, column: 68)
!5379 = !DILocation(line: 1693, column: 84, scope: !5378)
!5380 = !DILocation(line: 1693, column: 68, scope: !1002)
!5381 = !DILocation(line: 1693, column: 115, scope: !5382)
!5382 = !DILexicalBlockFile(scope: !5378, file: !352, discriminator: 2)
!5383 = !DILocation(line: 1693, column: 134, scope: !5378)
!5384 = !DILocation(line: 1693, column: 143, scope: !5378)
!5385 = !DILocation(line: 1693, column: 99, scope: !5378)
!5386 = !DILocation(line: 1693, column: 148, scope: !5387)
!5387 = !DILexicalBlockFile(scope: !5388, file: !352, discriminator: 4)
!5388 = !DILexicalBlockFile(scope: !988, file: !352, discriminator: 3)
!5389 = !DILocation(line: 1693, column: 148, scope: !1002)
!5390 = !DILocation(line: 1693, column: 148, scope: !5391)
!5391 = !DILexicalBlockFile(scope: !1002, file: !352, discriminator: 5)
!5392 = !DILocation(line: 1694, column: 27, scope: !988)
!5393 = !DILocation(line: 1694, column: 5, scope: !988)
!5394 = !DILocation(line: 1694, column: 9, scope: !988)
!5395 = !DILocation(line: 1694, column: 25, scope: !988)
!5396 = !DILocation(line: 1695, column: 26, scope: !988)
!5397 = !{!1268, !1247, i64 296}
!5398 = !DILocation(line: 1695, column: 34, scope: !988)
!5399 = !DILocation(line: 1695, column: 40, scope: !988)
!5400 = !DILocation(line: 1695, column: 49, scope: !988)
!5401 = !DILocation(line: 1695, column: 14, scope: !988)
!5402 = !DILocation(line: 1695, column: 12, scope: !988)
!5403 = !DILocation(line: 1696, column: 5, scope: !988)
!5404 = !DILocation(line: 1696, column: 10, scope: !5405)
!5405 = !DILexicalBlockFile(scope: !1004, file: !352, discriminator: 1)
!5406 = !DILocation(line: 1696, column: 20, scope: !1004)
!5407 = !DILocation(line: 1696, column: 50, scope: !1004)
!5408 = !DILocation(line: 1696, column: 68, scope: !5409)
!5409 = distinct !DILexicalBlock(scope: !1004, file: !352, line: 1696, column: 65)
!5410 = !DILocation(line: 1696, column: 85, scope: !5409)
!5411 = !DILocation(line: 1696, column: 65, scope: !5409)
!5412 = !DILocation(line: 1696, column: 95, scope: !5409)
!5413 = !DILocation(line: 1696, column: 65, scope: !1004)
!5414 = !DILocation(line: 1696, column: 65, scope: !5415)
!5415 = !DILexicalBlockFile(scope: !1004, file: !352, discriminator: 2)
!5416 = !DILocation(line: 1696, column: 126, scope: !5417)
!5417 = !DILexicalBlockFile(scope: !5409, file: !352, discriminator: 3)
!5418 = !DILocation(line: 1696, column: 144, scope: !5409)
!5419 = !DILocation(line: 1696, column: 154, scope: !5409)
!5420 = !DILocation(line: 1696, column: 179, scope: !5409)
!5421 = !DILocation(line: 1696, column: 110, scope: !5409)
!5422 = !DILocation(line: 1696, column: 198, scope: !5423)
!5423 = !DILexicalBlockFile(scope: !988, file: !352, discriminator: 4)
!5424 = !DILocation(line: 1696, column: 198, scope: !1004)
!5425 = !DILocation(line: 1696, column: 198, scope: !5426)
!5426 = !DILexicalBlockFile(scope: !1004, file: !352, discriminator: 5)
!5427 = !DILocation(line: 1697, column: 5, scope: !988)
!5428 = !DILocation(line: 1697, column: 10, scope: !5429)
!5429 = !DILexicalBlockFile(scope: !1006, file: !352, discriminator: 1)
!5430 = !DILocation(line: 1697, column: 20, scope: !1006)
!5431 = !DILocation(line: 1697, column: 51, scope: !1006)
!5432 = !DILocation(line: 1697, column: 68, scope: !1009)
!5433 = !DILocation(line: 1697, column: 84, scope: !1009)
!5434 = !DILocation(line: 1697, column: 68, scope: !1006)
!5435 = !DILocation(line: 1697, column: 99, scope: !5436)
!5436 = !DILexicalBlockFile(scope: !1009, file: !352, discriminator: 2)
!5437 = !DILocation(line: 1697, column: 104, scope: !5438)
!5438 = !DILexicalBlockFile(scope: !1008, file: !352, discriminator: 4)
!5439 = !DILocation(line: 1697, column: 114, scope: !1008)
!5440 = !DILocation(line: 1697, column: 144, scope: !1008)
!5441 = !DILocation(line: 1697, column: 170, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !1008, file: !352, line: 1697, column: 167)
!5443 = !DILocation(line: 1697, column: 187, scope: !5442)
!5444 = !DILocation(line: 1697, column: 167, scope: !5442)
!5445 = !DILocation(line: 1697, column: 197, scope: !5442)
!5446 = !DILocation(line: 1697, column: 167, scope: !1008)
!5447 = !DILocation(line: 1697, column: 167, scope: !5448)
!5448 = !DILexicalBlockFile(scope: !1008, file: !352, discriminator: 5)
!5449 = !DILocation(line: 1697, column: 228, scope: !5450)
!5450 = !DILexicalBlockFile(scope: !5442, file: !352, discriminator: 6)
!5451 = !DILocation(line: 1697, column: 246, scope: !5442)
!5452 = !DILocation(line: 1697, column: 256, scope: !5442)
!5453 = !DILocation(line: 1697, column: 281, scope: !5442)
!5454 = !DILocation(line: 1697, column: 212, scope: !5442)
!5455 = !DILocation(line: 1697, column: 300, scope: !5456)
!5456 = !DILexicalBlockFile(scope: !1009, file: !352, discriminator: 7)
!5457 = !DILocation(line: 1697, column: 300, scope: !1008)
!5458 = !DILocation(line: 1697, column: 300, scope: !5459)
!5459 = !DILexicalBlockFile(scope: !1008, file: !352, discriminator: 8)
!5460 = !DILocation(line: 1697, column: 300, scope: !5461)
!5461 = !DILexicalBlockFile(scope: !1008, file: !352, discriminator: 9)
!5462 = !DILocation(line: 1697, column: 313, scope: !5463)
!5463 = !DILexicalBlockFile(scope: !5388, file: !352, discriminator: 10)
!5464 = !DILocation(line: 1697, column: 313, scope: !1006)
!5465 = !DILocation(line: 1697, column: 313, scope: !5466)
!5466 = !DILexicalBlockFile(scope: !1006, file: !352, discriminator: 11)
!5467 = !DILocation(line: 1698, column: 12, scope: !988)
!5468 = !DILocation(line: 1698, column: 5, scope: !988)
!5469 = !DILocation(line: 1699, column: 1, scope: !988)
!5470 = !DILocation(line: 1498, column: 32, scope: !945)
!5471 = !DILocation(line: 1498, column: 46, scope: !945)
!5472 = !DILocation(line: 1500, column: 5, scope: !945)
!5473 = !DILocation(line: 1500, column: 15, scope: !945)
!5474 = !DILocation(line: 1500, column: 25, scope: !945)
!5475 = !DILocation(line: 1500, column: 29, scope: !945)
!5476 = !DILocation(line: 1501, column: 5, scope: !945)
!5477 = !DILocation(line: 1501, column: 15, scope: !945)
!5478 = !DILocation(line: 1502, column: 9, scope: !955)
!5479 = !DILocation(line: 1502, column: 17, scope: !955)
!5480 = !DILocation(line: 1502, column: 31, scope: !955)
!5481 = !DILocation(line: 1502, column: 34, scope: !5482)
!5482 = !DILexicalBlockFile(scope: !955, file: !352, discriminator: 1)
!5483 = !DILocation(line: 1502, column: 42, scope: !955)
!5484 = !DILocation(line: 1502, column: 9, scope: !945)
!5485 = !DILocation(line: 1504, column: 9, scope: !954)
!5486 = !DILocation(line: 1504, column: 19, scope: !954)
!5487 = !DILocation(line: 1505, column: 31, scope: !954)
!5488 = !DILocation(line: 1505, column: 15, scope: !954)
!5489 = !DILocation(line: 1505, column: 13, scope: !954)
!5490 = !DILocation(line: 1506, column: 14, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !954, file: !352, line: 1506, column: 13)
!5492 = !DILocation(line: 1506, column: 13, scope: !954)
!5493 = !DILocation(line: 1506, column: 19, scope: !5494)
!5494 = !DILexicalBlockFile(scope: !5491, file: !352, discriminator: 1)
!5495 = !DILocation(line: 1506, column: 19, scope: !5491)
!5496 = !DILocation(line: 1507, column: 25, scope: !954)
!5497 = !DILocation(line: 1507, column: 41, scope: !954)
!5498 = !DILocation(line: 1507, column: 9, scope: !954)
!5499 = !DILocation(line: 1508, column: 9, scope: !954)
!5500 = !DILocation(line: 1508, column: 14, scope: !5501)
!5501 = !DILexicalBlockFile(scope: !957, file: !352, discriminator: 1)
!5502 = !DILocation(line: 1508, column: 24, scope: !957)
!5503 = !DILocation(line: 1508, column: 54, scope: !957)
!5504 = !DILocation(line: 1508, column: 68, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !957, file: !352, line: 1508, column: 65)
!5506 = !DILocation(line: 1508, column: 85, scope: !5505)
!5507 = !DILocation(line: 1508, column: 65, scope: !5505)
!5508 = !DILocation(line: 1508, column: 95, scope: !5505)
!5509 = !DILocation(line: 1508, column: 65, scope: !957)
!5510 = !DILocation(line: 1508, column: 65, scope: !5511)
!5511 = !DILexicalBlockFile(scope: !957, file: !352, discriminator: 2)
!5512 = !DILocation(line: 1508, column: 126, scope: !5513)
!5513 = !DILexicalBlockFile(scope: !5505, file: !352, discriminator: 3)
!5514 = !DILocation(line: 1508, column: 144, scope: !5505)
!5515 = !DILocation(line: 1508, column: 154, scope: !5505)
!5516 = !DILocation(line: 1508, column: 179, scope: !5505)
!5517 = !DILocation(line: 1508, column: 110, scope: !5505)
!5518 = !DILocation(line: 1508, column: 198, scope: !5519)
!5519 = !DILexicalBlockFile(scope: !954, file: !352, discriminator: 4)
!5520 = !DILocation(line: 1508, column: 198, scope: !957)
!5521 = !DILocation(line: 1508, column: 198, scope: !5522)
!5522 = !DILexicalBlockFile(scope: !957, file: !352, discriminator: 5)
!5523 = !DILocation(line: 1509, column: 9, scope: !954)
!5524 = !DILocation(line: 1510, column: 5, scope: !955)
!5525 = !DILocation(line: 1511, column: 43, scope: !945)
!5526 = !DILocation(line: 1511, column: 13, scope: !945)
!5527 = !DILocation(line: 1511, column: 11, scope: !945)
!5528 = !DILocation(line: 1512, column: 9, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !945, file: !352, line: 1512, column: 9)
!5530 = !DILocation(line: 1512, column: 15, scope: !5529)
!5531 = !DILocation(line: 1512, column: 9, scope: !945)
!5532 = !DILocation(line: 1513, column: 16, scope: !5529)
!5533 = !DILocation(line: 1513, column: 9, scope: !5529)
!5534 = !DILocation(line: 1514, column: 38, scope: !961)
!5535 = !DILocation(line: 1514, column: 26, scope: !961)
!5536 = !DILocation(line: 1514, column: 42, scope: !961)
!5537 = !DILocation(line: 1514, column: 47, scope: !961)
!5538 = !DILocation(line: 1514, column: 9, scope: !961)
!5539 = !DILocation(line: 1514, column: 54, scope: !961)
!5540 = !DILocation(line: 1514, column: 9, scope: !945)
!5541 = !DILocation(line: 1515, column: 9, scope: !960)
!5542 = !DILocation(line: 1515, column: 14, scope: !5543)
!5543 = !DILexicalBlockFile(scope: !959, file: !352, discriminator: 1)
!5544 = !DILocation(line: 1515, column: 24, scope: !959)
!5545 = !DILocation(line: 1515, column: 54, scope: !959)
!5546 = !DILocation(line: 1515, column: 70, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !959, file: !352, line: 1515, column: 67)
!5548 = !DILocation(line: 1515, column: 87, scope: !5547)
!5549 = !DILocation(line: 1515, column: 67, scope: !5547)
!5550 = !DILocation(line: 1515, column: 97, scope: !5547)
!5551 = !DILocation(line: 1515, column: 67, scope: !959)
!5552 = !DILocation(line: 1515, column: 67, scope: !5553)
!5553 = !DILexicalBlockFile(scope: !959, file: !352, discriminator: 2)
!5554 = !DILocation(line: 1515, column: 128, scope: !5555)
!5555 = !DILexicalBlockFile(scope: !5547, file: !352, discriminator: 3)
!5556 = !DILocation(line: 1515, column: 146, scope: !5547)
!5557 = !DILocation(line: 1515, column: 156, scope: !5547)
!5558 = !DILocation(line: 1515, column: 181, scope: !5547)
!5559 = !DILocation(line: 1515, column: 112, scope: !5547)
!5560 = !DILocation(line: 1515, column: 200, scope: !5561)
!5561 = !DILexicalBlockFile(scope: !960, file: !352, discriminator: 4)
!5562 = !DILocation(line: 1515, column: 200, scope: !959)
!5563 = !DILocation(line: 1515, column: 200, scope: !5564)
!5564 = !DILexicalBlockFile(scope: !959, file: !352, discriminator: 5)
!5565 = !DILocation(line: 1516, column: 9, scope: !960)
!5566 = !DILocation(line: 1518, column: 12, scope: !945)
!5567 = !DILocation(line: 1518, column: 5, scope: !945)
!5568 = !DILocation(line: 1519, column: 1, scope: !945)
!5569 = !DILocation(line: 1524, column: 29, scope: !962)
!5570 = !DILocation(line: 1531, column: 9, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !962, file: !352, line: 1531, column: 9)
!5572 = !DILocation(line: 1531, column: 13, scope: !5571)
!5573 = !DILocation(line: 1531, column: 29, scope: !5571)
!5574 = !DILocation(line: 1531, column: 9, scope: !962)
!5575 = !DILocation(line: 1532, column: 70, scope: !5571)
!5576 = !DILocation(line: 1532, column: 58, scope: !5571)
!5577 = !DILocation(line: 1532, column: 76, scope: !5571)
!5578 = !DILocation(line: 1532, column: 45, scope: !5571)
!5579 = !DILocation(line: 1532, column: 105, scope: !5571)
!5580 = !DILocation(line: 1532, column: 16, scope: !5571)
!5581 = !DILocation(line: 1532, column: 9, scope: !5571)
!5582 = !DILocation(line: 1533, column: 66, scope: !962)
!5583 = !DILocation(line: 1533, column: 54, scope: !962)
!5584 = !DILocation(line: 1533, column: 72, scope: !962)
!5585 = !DILocation(line: 1533, column: 41, scope: !962)
!5586 = !DILocation(line: 1534, column: 41, scope: !962)
!5587 = !DILocation(line: 1534, column: 45, scope: !962)
!5588 = !DILocation(line: 1534, column: 62, scope: !962)
!5589 = !DILocation(line: 1533, column: 12, scope: !962)
!5590 = !DILocation(line: 1533, column: 5, scope: !962)
!5591 = !DILocation(line: 1535, column: 1, scope: !962)
!5592 = !DILocation(line: 1538, column: 31, scope: !965)
!5593 = !DILocation(line: 1562, column: 5, scope: !965)
!5594 = !DILocation(line: 1562, column: 15, scope: !965)
!5595 = !DILocation(line: 1563, column: 5, scope: !965)
!5596 = !DILocation(line: 1563, column: 15, scope: !965)
!5597 = !DILocation(line: 1564, column: 5, scope: !965)
!5598 = !DILocation(line: 1564, column: 15, scope: !965)
!5599 = !DILocation(line: 1565, column: 5, scope: !965)
!5600 = !DILocation(line: 1565, column: 15, scope: !965)
!5601 = !DILocation(line: 1568, column: 9, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !965, file: !352, line: 1568, column: 9)
!5603 = !DILocation(line: 1568, column: 13, scope: !5602)
!5604 = !DILocation(line: 1568, column: 29, scope: !5602)
!5605 = !DILocation(line: 1568, column: 43, scope: !5602)
!5606 = !DILocation(line: 1568, column: 46, scope: !5607)
!5607 = !DILexicalBlockFile(scope: !5602, file: !352, discriminator: 1)
!5608 = !DILocation(line: 1568, column: 50, scope: !5602)
!5609 = !DILocation(line: 1568, column: 66, scope: !5602)
!5610 = !DILocation(line: 1568, column: 9, scope: !965)
!5611 = !DILocation(line: 1569, column: 16, scope: !5602)
!5612 = !DILocation(line: 1569, column: 14, scope: !5602)
!5613 = !DILocation(line: 1569, column: 9, scope: !5602)
!5614 = !DILocation(line: 1571, column: 32, scope: !5602)
!5615 = !DILocation(line: 1571, column: 36, scope: !5602)
!5616 = !DILocation(line: 1571, column: 16, scope: !5602)
!5617 = !DILocation(line: 1571, column: 14, scope: !5602)
!5618 = !DILocation(line: 1572, column: 9, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !965, file: !352, line: 1572, column: 9)
!5620 = !DILocation(line: 1572, column: 14, scope: !5619)
!5621 = !DILocation(line: 1572, column: 9, scope: !965)
!5622 = !DILocation(line: 1573, column: 9, scope: !5619)
!5623 = !DILocation(line: 1574, column: 48, scope: !965)
!5624 = !DILocation(line: 1574, column: 36, scope: !965)
!5625 = !DILocation(line: 1574, column: 13, scope: !965)
!5626 = !DILocation(line: 1574, column: 11, scope: !965)
!5627 = !DILocation(line: 1575, column: 9, scope: !975)
!5628 = !DILocation(line: 1575, column: 15, scope: !975)
!5629 = !DILocation(line: 1575, column: 9, scope: !965)
!5630 = !DILocation(line: 1576, column: 9, scope: !974)
!5631 = !DILocation(line: 1576, column: 14, scope: !5632)
!5632 = !DILexicalBlockFile(scope: !973, file: !352, discriminator: 1)
!5633 = !DILocation(line: 1576, column: 24, scope: !973)
!5634 = !DILocation(line: 1576, column: 54, scope: !973)
!5635 = !DILocation(line: 1576, column: 69, scope: !5636)
!5636 = distinct !DILexicalBlock(scope: !973, file: !352, line: 1576, column: 66)
!5637 = !DILocation(line: 1576, column: 86, scope: !5636)
!5638 = !DILocation(line: 1576, column: 66, scope: !5636)
!5639 = !DILocation(line: 1576, column: 96, scope: !5636)
!5640 = !DILocation(line: 1576, column: 66, scope: !973)
!5641 = !DILocation(line: 1576, column: 66, scope: !5642)
!5642 = !DILexicalBlockFile(scope: !973, file: !352, discriminator: 2)
!5643 = !DILocation(line: 1576, column: 127, scope: !5644)
!5644 = !DILexicalBlockFile(scope: !5636, file: !352, discriminator: 3)
!5645 = !DILocation(line: 1576, column: 145, scope: !5636)
!5646 = !DILocation(line: 1576, column: 155, scope: !5636)
!5647 = !DILocation(line: 1576, column: 180, scope: !5636)
!5648 = !DILocation(line: 1576, column: 111, scope: !5636)
!5649 = !DILocation(line: 1576, column: 199, scope: !5650)
!5650 = !DILexicalBlockFile(scope: !974, file: !352, discriminator: 4)
!5651 = !DILocation(line: 1576, column: 199, scope: !973)
!5652 = !DILocation(line: 1576, column: 199, scope: !5653)
!5653 = !DILexicalBlockFile(scope: !973, file: !352, discriminator: 5)
!5654 = !DILocation(line: 1577, column: 9, scope: !974)
!5655 = !DILocation(line: 1579, column: 29, scope: !965)
!5656 = !DILocation(line: 1579, column: 12, scope: !965)
!5657 = !DILocation(line: 1579, column: 10, scope: !965)
!5658 = !DILocation(line: 1580, column: 9, scope: !979)
!5659 = !DILocation(line: 1580, column: 14, scope: !979)
!5660 = !DILocation(line: 1580, column: 9, scope: !965)
!5661 = !DILocation(line: 1581, column: 9, scope: !978)
!5662 = !DILocation(line: 1581, column: 14, scope: !5663)
!5663 = !DILexicalBlockFile(scope: !977, file: !352, discriminator: 1)
!5664 = !DILocation(line: 1581, column: 24, scope: !977)
!5665 = !DILocation(line: 1581, column: 54, scope: !977)
!5666 = !DILocation(line: 1581, column: 70, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !977, file: !352, line: 1581, column: 67)
!5668 = !DILocation(line: 1581, column: 87, scope: !5667)
!5669 = !DILocation(line: 1581, column: 67, scope: !5667)
!5670 = !DILocation(line: 1581, column: 97, scope: !5667)
!5671 = !DILocation(line: 1581, column: 67, scope: !977)
!5672 = !DILocation(line: 1581, column: 67, scope: !5673)
!5673 = !DILexicalBlockFile(scope: !977, file: !352, discriminator: 2)
!5674 = !DILocation(line: 1581, column: 128, scope: !5675)
!5675 = !DILexicalBlockFile(scope: !5667, file: !352, discriminator: 3)
!5676 = !DILocation(line: 1581, column: 146, scope: !5667)
!5677 = !DILocation(line: 1581, column: 156, scope: !5667)
!5678 = !DILocation(line: 1581, column: 181, scope: !5667)
!5679 = !DILocation(line: 1581, column: 112, scope: !5667)
!5680 = !DILocation(line: 1581, column: 200, scope: !5681)
!5681 = !DILexicalBlockFile(scope: !978, file: !352, discriminator: 4)
!5682 = !DILocation(line: 1581, column: 200, scope: !977)
!5683 = !DILocation(line: 1581, column: 200, scope: !5684)
!5684 = !DILexicalBlockFile(scope: !977, file: !352, discriminator: 5)
!5685 = !DILocation(line: 1582, column: 9, scope: !978)
!5686 = !DILocation(line: 1582, column: 14, scope: !5687)
!5687 = !DILexicalBlockFile(scope: !981, file: !352, discriminator: 1)
!5688 = !DILocation(line: 1582, column: 24, scope: !981)
!5689 = !DILocation(line: 1582, column: 54, scope: !981)
!5690 = !DILocation(line: 1582, column: 69, scope: !5691)
!5691 = distinct !DILexicalBlock(scope: !981, file: !352, line: 1582, column: 66)
!5692 = !DILocation(line: 1582, column: 86, scope: !5691)
!5693 = !DILocation(line: 1582, column: 66, scope: !5691)
!5694 = !DILocation(line: 1582, column: 96, scope: !5691)
!5695 = !DILocation(line: 1582, column: 66, scope: !981)
!5696 = !DILocation(line: 1582, column: 66, scope: !5697)
!5697 = !DILexicalBlockFile(scope: !981, file: !352, discriminator: 2)
!5698 = !DILocation(line: 1582, column: 127, scope: !5699)
!5699 = !DILexicalBlockFile(scope: !5691, file: !352, discriminator: 3)
!5700 = !DILocation(line: 1582, column: 145, scope: !5691)
!5701 = !DILocation(line: 1582, column: 155, scope: !5691)
!5702 = !DILocation(line: 1582, column: 180, scope: !5691)
!5703 = !DILocation(line: 1582, column: 111, scope: !5691)
!5704 = !DILocation(line: 1582, column: 199, scope: !5681)
!5705 = !DILocation(line: 1582, column: 199, scope: !981)
!5706 = !DILocation(line: 1582, column: 199, scope: !5707)
!5707 = !DILexicalBlockFile(scope: !981, file: !352, discriminator: 5)
!5708 = !DILocation(line: 1583, column: 9, scope: !978)
!5709 = !DILocation(line: 1585, column: 44, scope: !965)
!5710 = !DILocation(line: 1585, column: 32, scope: !965)
!5711 = !DILocation(line: 1585, column: 50, scope: !965)
!5712 = !DILocation(line: 1585, column: 60, scope: !965)
!5713 = !DILocation(line: 1586, column: 65, scope: !965)
!5714 = !DILocation(line: 1585, column: 14, scope: !965)
!5715 = !DILocation(line: 1585, column: 12, scope: !965)
!5716 = !DILocation(line: 1587, column: 5, scope: !965)
!5717 = !DILocation(line: 1587, column: 10, scope: !5718)
!5718 = !DILexicalBlockFile(scope: !983, file: !352, discriminator: 1)
!5719 = !DILocation(line: 1587, column: 20, scope: !983)
!5720 = !DILocation(line: 1587, column: 50, scope: !983)
!5721 = !DILocation(line: 1587, column: 65, scope: !5722)
!5722 = distinct !DILexicalBlock(scope: !983, file: !352, line: 1587, column: 62)
!5723 = !DILocation(line: 1587, column: 82, scope: !5722)
!5724 = !DILocation(line: 1587, column: 62, scope: !5722)
!5725 = !DILocation(line: 1587, column: 92, scope: !5722)
!5726 = !DILocation(line: 1587, column: 62, scope: !983)
!5727 = !DILocation(line: 1587, column: 62, scope: !5728)
!5728 = !DILexicalBlockFile(scope: !983, file: !352, discriminator: 2)
!5729 = !DILocation(line: 1587, column: 123, scope: !5730)
!5730 = !DILexicalBlockFile(scope: !5722, file: !352, discriminator: 3)
!5731 = !DILocation(line: 1587, column: 141, scope: !5722)
!5732 = !DILocation(line: 1587, column: 151, scope: !5722)
!5733 = !DILocation(line: 1587, column: 176, scope: !5722)
!5734 = !DILocation(line: 1587, column: 107, scope: !5722)
!5735 = !DILocation(line: 1587, column: 195, scope: !5736)
!5736 = !DILexicalBlockFile(scope: !965, file: !352, discriminator: 4)
!5737 = !DILocation(line: 1587, column: 195, scope: !983)
!5738 = !DILocation(line: 1587, column: 195, scope: !5739)
!5739 = !DILexicalBlockFile(scope: !983, file: !352, discriminator: 5)
!5740 = !DILocation(line: 1588, column: 5, scope: !965)
!5741 = !DILocation(line: 1588, column: 10, scope: !5742)
!5742 = !DILexicalBlockFile(scope: !985, file: !352, discriminator: 1)
!5743 = !DILocation(line: 1588, column: 20, scope: !985)
!5744 = !DILocation(line: 1588, column: 50, scope: !985)
!5745 = !DILocation(line: 1588, column: 66, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !985, file: !352, line: 1588, column: 63)
!5747 = !DILocation(line: 1588, column: 83, scope: !5746)
!5748 = !DILocation(line: 1588, column: 63, scope: !5746)
!5749 = !DILocation(line: 1588, column: 93, scope: !5746)
!5750 = !DILocation(line: 1588, column: 63, scope: !985)
!5751 = !DILocation(line: 1588, column: 63, scope: !5752)
!5752 = !DILexicalBlockFile(scope: !985, file: !352, discriminator: 2)
!5753 = !DILocation(line: 1588, column: 124, scope: !5754)
!5754 = !DILexicalBlockFile(scope: !5746, file: !352, discriminator: 3)
!5755 = !DILocation(line: 1588, column: 142, scope: !5746)
!5756 = !DILocation(line: 1588, column: 152, scope: !5746)
!5757 = !DILocation(line: 1588, column: 177, scope: !5746)
!5758 = !DILocation(line: 1588, column: 108, scope: !5746)
!5759 = !DILocation(line: 1588, column: 196, scope: !5736)
!5760 = !DILocation(line: 1588, column: 196, scope: !985)
!5761 = !DILocation(line: 1588, column: 196, scope: !5762)
!5762 = !DILexicalBlockFile(scope: !985, file: !352, discriminator: 5)
!5763 = !DILocation(line: 1589, column: 5, scope: !965)
!5764 = !DILocation(line: 1589, column: 10, scope: !5765)
!5765 = !DILexicalBlockFile(scope: !987, file: !352, discriminator: 1)
!5766 = !DILocation(line: 1589, column: 20, scope: !987)
!5767 = !DILocation(line: 1589, column: 50, scope: !987)
!5768 = !DILocation(line: 1589, column: 65, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !987, file: !352, line: 1589, column: 62)
!5770 = !DILocation(line: 1589, column: 82, scope: !5769)
!5771 = !DILocation(line: 1589, column: 62, scope: !5769)
!5772 = !DILocation(line: 1589, column: 92, scope: !5769)
!5773 = !DILocation(line: 1589, column: 62, scope: !987)
!5774 = !DILocation(line: 1589, column: 62, scope: !5775)
!5775 = !DILexicalBlockFile(scope: !987, file: !352, discriminator: 2)
!5776 = !DILocation(line: 1589, column: 123, scope: !5777)
!5777 = !DILexicalBlockFile(scope: !5769, file: !352, discriminator: 3)
!5778 = !DILocation(line: 1589, column: 141, scope: !5769)
!5779 = !DILocation(line: 1589, column: 151, scope: !5769)
!5780 = !DILocation(line: 1589, column: 176, scope: !5769)
!5781 = !DILocation(line: 1589, column: 107, scope: !5769)
!5782 = !DILocation(line: 1589, column: 195, scope: !5736)
!5783 = !DILocation(line: 1589, column: 195, scope: !987)
!5784 = !DILocation(line: 1589, column: 195, scope: !5785)
!5785 = !DILexicalBlockFile(scope: !987, file: !352, discriminator: 5)
!5786 = !DILocation(line: 1590, column: 12, scope: !965)
!5787 = !DILocation(line: 1590, column: 5, scope: !965)
!5788 = !DILocation(line: 1591, column: 1, scope: !965)
!5789 = !DILocation(line: 1233, column: 36, scope: !1010)
!5790 = !DILocation(line: 1235, column: 5, scope: !1010)
!5791 = !DILocation(line: 1235, column: 10, scope: !5792)
!5792 = !DILexicalBlockFile(scope: !1016, file: !352, discriminator: 1)
!5793 = !DILocation(line: 1235, column: 20, scope: !1016)
!5794 = !DILocation(line: 1235, column: 51, scope: !1016)
!5795 = !DILocation(line: 1235, column: 56, scope: !1016)
!5796 = !DILocation(line: 1235, column: 38, scope: !1016)
!5797 = !DILocation(line: 1235, column: 68, scope: !1019)
!5798 = !DILocation(line: 1235, column: 84, scope: !1019)
!5799 = !DILocation(line: 1235, column: 68, scope: !1016)
!5800 = !DILocation(line: 1235, column: 99, scope: !5801)
!5801 = !DILexicalBlockFile(scope: !1019, file: !352, discriminator: 2)
!5802 = !DILocation(line: 1235, column: 104, scope: !5803)
!5803 = !DILexicalBlockFile(scope: !1018, file: !352, discriminator: 4)
!5804 = !DILocation(line: 1235, column: 114, scope: !1018)
!5805 = !DILocation(line: 1235, column: 144, scope: !1018)
!5806 = !DILocation(line: 1235, column: 170, scope: !5807)
!5807 = distinct !DILexicalBlock(scope: !1018, file: !352, line: 1235, column: 167)
!5808 = !DILocation(line: 1235, column: 187, scope: !5807)
!5809 = !DILocation(line: 1235, column: 167, scope: !5807)
!5810 = !DILocation(line: 1235, column: 197, scope: !5807)
!5811 = !DILocation(line: 1235, column: 167, scope: !1018)
!5812 = !DILocation(line: 1235, column: 167, scope: !5813)
!5813 = !DILexicalBlockFile(scope: !1018, file: !352, discriminator: 5)
!5814 = !DILocation(line: 1235, column: 228, scope: !5815)
!5815 = !DILexicalBlockFile(scope: !5807, file: !352, discriminator: 6)
!5816 = !DILocation(line: 1235, column: 246, scope: !5807)
!5817 = !DILocation(line: 1235, column: 256, scope: !5807)
!5818 = !DILocation(line: 1235, column: 281, scope: !5807)
!5819 = !DILocation(line: 1235, column: 212, scope: !5807)
!5820 = !DILocation(line: 1235, column: 300, scope: !5821)
!5821 = !DILexicalBlockFile(scope: !1019, file: !352, discriminator: 7)
!5822 = !DILocation(line: 1235, column: 300, scope: !1018)
!5823 = !DILocation(line: 1235, column: 300, scope: !5824)
!5824 = !DILexicalBlockFile(scope: !1018, file: !352, discriminator: 8)
!5825 = !DILocation(line: 1235, column: 300, scope: !5826)
!5826 = !DILexicalBlockFile(scope: !1018, file: !352, discriminator: 9)
!5827 = !DILocation(line: 1235, column: 313, scope: !5828)
!5828 = !DILexicalBlockFile(scope: !5829, file: !352, discriminator: 10)
!5829 = !DILexicalBlockFile(scope: !1010, file: !352, discriminator: 3)
!5830 = !DILocation(line: 1235, column: 313, scope: !1016)
!5831 = !DILocation(line: 1236, column: 21, scope: !1010)
!5832 = !DILocation(line: 1236, column: 5, scope: !1010)
!5833 = !DILocation(line: 1237, column: 1, scope: !1010)
!5834 = !DILocation(line: 1226, column: 37, scope: !1020)
!5835 = !DILocation(line: 1226, column: 52, scope: !1020)
!5836 = !DILocation(line: 1226, column: 65, scope: !1020)
!5837 = !DILocation(line: 1228, column: 5, scope: !1020)
!5838 = !DILocation(line: 1228, column: 14, scope: !5839)
!5839 = !DILexicalBlockFile(scope: !1029, file: !352, discriminator: 1)
!5840 = !DILocation(line: 1228, column: 19, scope: !1029)
!5841 = !DILocation(line: 1228, column: 14, scope: !1029)
!5842 = !DILocation(line: 1228, column: 14, scope: !1030)
!5843 = !DILocation(line: 1228, column: 28, scope: !5844)
!5844 = !DILexicalBlockFile(scope: !1028, file: !352, discriminator: 2)
!5845 = !DILocation(line: 1228, column: 32, scope: !1028)
!5846 = !DILocation(line: 1228, column: 39, scope: !1028)
!5847 = !DILocation(line: 1228, column: 58, scope: !1028)
!5848 = !DILocation(line: 1228, column: 63, scope: !1028)
!5849 = !DILocation(line: 1228, column: 45, scope: !1028)
!5850 = !DILocation(line: 1228, column: 71, scope: !1028)
!5851 = !DILocation(line: 1228, column: 81, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !1028, file: !352, line: 1228, column: 81)
!5853 = !DILocation(line: 1228, column: 81, scope: !1028)
!5854 = !DILocation(line: 1228, column: 94, scope: !5855)
!5855 = !DILexicalBlockFile(scope: !5852, file: !352, discriminator: 4)
!5856 = !DILocation(line: 1228, column: 87, scope: !5852)
!5857 = !DILocation(line: 1228, column: 100, scope: !5858)
!5858 = !DILexicalBlockFile(scope: !1029, file: !352, discriminator: 5)
!5859 = !DILocation(line: 1228, column: 100, scope: !5860)
!5860 = !DILexicalBlockFile(scope: !5861, file: !352, discriminator: 7)
!5861 = !DILexicalBlockFile(scope: !1029, file: !352, discriminator: 6)
!5862 = !DILocation(line: 1228, column: 100, scope: !1028)
!5863 = !DILocation(line: 1228, column: 102, scope: !5864)
!5864 = !DILexicalBlockFile(scope: !5865, file: !352, discriminator: 8)
!5865 = !DILexicalBlockFile(scope: !1030, file: !352, discriminator: 3)
!5866 = !DILocation(line: 1229, column: 5, scope: !1020)
!5867 = !DILocation(line: 1230, column: 1, scope: !1020)
!5868 = !DILocation(line: 1240, column: 33, scope: !1031)
!5869 = !DILocation(line: 1242, column: 5, scope: !1031)
!5870 = !DILocation(line: 1242, column: 15, scope: !1031)
!5871 = !DILocation(line: 1244, column: 9, scope: !5872)
!5872 = distinct !DILexicalBlock(scope: !1031, file: !352, line: 1244, column: 9)
!5873 = !DILocation(line: 1244, column: 13, scope: !5872)
!5874 = !DILocation(line: 1244, column: 20, scope: !5872)
!5875 = !DILocation(line: 1244, column: 29, scope: !5872)
!5876 = !DILocation(line: 1244, column: 33, scope: !5872)
!5877 = !DILocation(line: 1244, column: 26, scope: !5872)
!5878 = !DILocation(line: 1244, column: 9, scope: !1031)
!5879 = !DILocation(line: 1245, column: 9, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5872, file: !352, line: 1244, column: 40)
!5881 = !DILocation(line: 1245, column: 13, scope: !5880)
!5882 = !DILocation(line: 1245, column: 21, scope: !5880)
!5883 = !DILocation(line: 1246, column: 25, scope: !5880)
!5884 = !DILocation(line: 1246, column: 9, scope: !5880)
!5885 = !DILocation(line: 1248, column: 9, scope: !5880)
!5886 = !DILocation(line: 1250, column: 9, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !1031, file: !352, line: 1250, column: 9)
!5888 = !DILocation(line: 1250, column: 13, scope: !5887)
!5889 = !DILocation(line: 1250, column: 21, scope: !5887)
!5890 = !DILocation(line: 1250, column: 9, scope: !1031)
!5891 = !DILocation(line: 1251, column: 9, scope: !5887)
!5892 = !DILocation(line: 1255, column: 24, scope: !1031)
!5893 = !DILocation(line: 1255, column: 28, scope: !1031)
!5894 = !DILocation(line: 1255, column: 12, scope: !1031)
!5895 = !DILocation(line: 1255, column: 16, scope: !1031)
!5896 = !DILocation(line: 1255, column: 19, scope: !1031)
!5897 = !DILocation(line: 1255, column: 10, scope: !1031)
!5898 = !DILocation(line: 1256, column: 5, scope: !1031)
!5899 = !DILocation(line: 1256, column: 9, scope: !1031)
!5900 = !DILocation(line: 1256, column: 14, scope: !1031)
!5901 = !DILocation(line: 1257, column: 5, scope: !1031)
!5902 = !DILocation(line: 1257, column: 9, scope: !1031)
!5903 = !DILocation(line: 1257, column: 16, scope: !1031)
!5904 = !DILocation(line: 1258, column: 9, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !1031, file: !352, line: 1258, column: 9)
!5906 = !DILocation(line: 1258, column: 13, scope: !5905)
!5907 = !DILocation(line: 1258, column: 19, scope: !5905)
!5908 = !DILocation(line: 1258, column: 25, scope: !5905)
!5909 = !DILocation(line: 1258, column: 28, scope: !5910)
!5910 = !DILexicalBlockFile(scope: !5905, file: !352, discriminator: 1)
!5911 = !DILocation(line: 1258, column: 32, scope: !5905)
!5912 = !DILocation(line: 1258, column: 40, scope: !5905)
!5913 = !DILocation(line: 1258, column: 9, scope: !1031)
!5914 = !DILocation(line: 1260, column: 17, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5905, file: !352, line: 1258, column: 45)
!5916 = !DILocation(line: 1260, column: 21, scope: !5915)
!5917 = !DILocation(line: 1260, column: 24, scope: !5915)
!5918 = !DILocation(line: 1260, column: 9, scope: !5915)
!5919 = !DILocation(line: 1260, column: 13, scope: !5915)
!5920 = !DILocation(line: 1260, column: 15, scope: !5915)
!5921 = !DILocation(line: 1261, column: 9, scope: !5915)
!5922 = !DILocation(line: 1261, column: 13, scope: !5915)
!5923 = !DILocation(line: 1261, column: 19, scope: !5915)
!5924 = !DILocation(line: 1262, column: 5, scope: !5915)
!5925 = !DILocation(line: 1263, column: 21, scope: !1031)
!5926 = !DILocation(line: 1263, column: 29, scope: !1031)
!5927 = !DILocation(line: 1263, column: 38, scope: !1031)
!5928 = !DILocation(line: 1264, column: 12, scope: !1031)
!5929 = !DILocation(line: 1264, column: 5, scope: !1031)
!5930 = !DILocation(line: 1265, column: 1, scope: !1031)
!5931 = !DILocation(line: 1268, column: 29, scope: !1043)
!5932 = !DILocation(line: 1268, column: 45, scope: !1043)
!5933 = !DILocation(line: 1268, column: 61, scope: !1043)
!5934 = !DILocation(line: 1270, column: 5, scope: !1043)
!5935 = !DILocation(line: 1270, column: 16, scope: !1043)
!5936 = !DILocation(line: 1270, column: 19, scope: !1043)
!5937 = !DILocation(line: 1271, column: 5, scope: !1043)
!5938 = !DILocation(line: 1271, column: 15, scope: !1043)
!5939 = !DILocation(line: 1272, column: 5, scope: !1043)
!5940 = !DILocation(line: 1272, column: 22, scope: !1043)
!5941 = !DILocation(line: 1273, column: 27, scope: !5942)
!5942 = distinct !DILexicalBlock(scope: !1043, file: !352, line: 1273, column: 9)
!5943 = !DILocation(line: 1273, column: 10, scope: !5942)
!5944 = !DILocation(line: 1273, column: 9, scope: !1043)
!5945 = !DILocation(line: 1274, column: 9, scope: !5942)
!5946 = !DILocation(line: 1277, column: 54, scope: !1043)
!5947 = !DILocation(line: 1277, column: 39, scope: !1043)
!5948 = !DILocation(line: 1277, column: 28, scope: !1043)
!5949 = !DILocation(line: 1277, column: 10, scope: !1043)
!5950 = !DILocation(line: 1277, column: 8, scope: !1043)
!5951 = !DILocation(line: 1278, column: 10, scope: !5952)
!5952 = distinct !DILexicalBlock(scope: !1043, file: !352, line: 1278, column: 9)
!5953 = !DILocation(line: 1278, column: 9, scope: !1043)
!5954 = !DILocation(line: 1279, column: 9, scope: !5952)
!5955 = !DILocation(line: 1281, column: 10, scope: !1055)
!5956 = !DILocation(line: 1281, column: 9, scope: !1055)
!5957 = !DILocation(line: 1281, column: 14, scope: !5958)
!5958 = !DILexicalBlockFile(scope: !5959, file: !352, discriminator: 2)
!5959 = !DILexicalBlockFile(scope: !1054, file: !352, discriminator: 1)
!5960 = !DILocation(line: 1281, column: 16, scope: !1054)
!5961 = !DILocation(line: 1281, column: 15, scope: !1054)
!5962 = !DILocation(line: 1281, column: 5, scope: !1055)
!5963 = !DILocation(line: 1282, column: 9, scope: !1053)
!5964 = !DILocation(line: 1282, column: 19, scope: !1053)
!5965 = !DILocation(line: 1282, column: 41, scope: !1053)
!5966 = !DILocation(line: 1282, column: 26, scope: !1053)
!5967 = !DILocation(line: 1283, column: 13, scope: !1059)
!5968 = !DILocation(line: 1283, column: 13, scope: !1053)
!5969 = !DILocation(line: 1284, column: 13, scope: !1058)
!5970 = !DILocation(line: 1284, column: 18, scope: !5971)
!5971 = !DILexicalBlockFile(scope: !1057, file: !352, discriminator: 1)
!5972 = !DILocation(line: 1284, column: 28, scope: !1057)
!5973 = !DILocation(line: 1284, column: 58, scope: !1057)
!5974 = !DILocation(line: 1284, column: 73, scope: !5975)
!5975 = distinct !DILexicalBlock(scope: !1057, file: !352, line: 1284, column: 70)
!5976 = !DILocation(line: 1284, column: 90, scope: !5975)
!5977 = !DILocation(line: 1284, column: 70, scope: !5975)
!5978 = !DILocation(line: 1284, column: 100, scope: !5975)
!5979 = !DILocation(line: 1284, column: 70, scope: !1057)
!5980 = !DILocation(line: 1284, column: 70, scope: !5981)
!5981 = !DILexicalBlockFile(scope: !1057, file: !352, discriminator: 2)
!5982 = !DILocation(line: 1284, column: 131, scope: !5983)
!5983 = !DILexicalBlockFile(scope: !5975, file: !352, discriminator: 3)
!5984 = !DILocation(line: 1284, column: 149, scope: !5975)
!5985 = !DILocation(line: 1284, column: 159, scope: !5975)
!5986 = !DILocation(line: 1284, column: 184, scope: !5975)
!5987 = !DILocation(line: 1284, column: 115, scope: !5975)
!5988 = !DILocation(line: 1284, column: 203, scope: !5989)
!5989 = !DILexicalBlockFile(scope: !1058, file: !352, discriminator: 4)
!5990 = !DILocation(line: 1284, column: 203, scope: !1057)
!5991 = !DILocation(line: 1284, column: 203, scope: !5992)
!5992 = !DILexicalBlockFile(scope: !1057, file: !352, discriminator: 5)
!5993 = !DILocation(line: 1285, column: 9, scope: !1058)
!5994 = !DILocation(line: 1286, column: 17, scope: !1063)
!5995 = !DILocation(line: 1286, column: 21, scope: !1063)
!5996 = !DILocation(line: 1286, column: 17, scope: !1064)
!5997 = !DILocation(line: 1287, column: 17, scope: !1062)
!5998 = !DILocation(line: 1287, column: 22, scope: !5999)
!5999 = !DILexicalBlockFile(scope: !1061, file: !352, discriminator: 1)
!6000 = !DILocation(line: 1287, column: 32, scope: !1061)
!6001 = !DILocation(line: 1287, column: 62, scope: !1061)
!6002 = !DILocation(line: 1287, column: 49, scope: !1061)
!6003 = !DILocation(line: 1287, column: 75, scope: !6004)
!6004 = distinct !DILexicalBlock(scope: !1061, file: !352, line: 1287, column: 72)
!6005 = !DILocation(line: 1287, column: 92, scope: !6004)
!6006 = !DILocation(line: 1287, column: 72, scope: !6004)
!6007 = !DILocation(line: 1287, column: 102, scope: !6004)
!6008 = !DILocation(line: 1287, column: 72, scope: !1061)
!6009 = !DILocation(line: 1287, column: 72, scope: !6010)
!6010 = !DILexicalBlockFile(scope: !1061, file: !352, discriminator: 2)
!6011 = !DILocation(line: 1287, column: 133, scope: !6012)
!6012 = !DILexicalBlockFile(scope: !6004, file: !352, discriminator: 3)
!6013 = !DILocation(line: 1287, column: 151, scope: !6004)
!6014 = !DILocation(line: 1287, column: 161, scope: !6004)
!6015 = !DILocation(line: 1287, column: 186, scope: !6004)
!6016 = !DILocation(line: 1287, column: 117, scope: !6004)
!6017 = !DILocation(line: 1287, column: 205, scope: !6018)
!6018 = !DILexicalBlockFile(scope: !1062, file: !352, discriminator: 4)
!6019 = !DILocation(line: 1287, column: 205, scope: !1061)
!6020 = !DILocation(line: 1287, column: 205, scope: !6021)
!6021 = !DILexicalBlockFile(scope: !1061, file: !352, discriminator: 5)
!6022 = !DILocation(line: 1288, column: 17, scope: !1062)
!6023 = !DILocation(line: 1290, column: 17, scope: !1063)
!6024 = !DILocation(line: 1292, column: 5, scope: !1054)
!6025 = !DILocation(line: 1292, column: 5, scope: !5959)
!6026 = !DILocation(line: 1292, column: 5, scope: !1053)
!6027 = !DILocation(line: 1281, column: 24, scope: !1054)
!6028 = !DILocation(line: 1281, column: 5, scope: !1054)
!6029 = !DILocation(line: 1293, column: 23, scope: !1043)
!6030 = !DILocation(line: 1293, column: 12, scope: !1043)
!6031 = !DILocation(line: 1293, column: 5, scope: !1043)
!6032 = !DILocation(line: 1294, column: 1, scope: !1043)
!6033 = !DILocation(line: 1297, column: 32, scope: !1037)
!6034 = !DILocation(line: 1299, column: 31, scope: !1037)
!6035 = !DILocation(line: 1299, column: 35, scope: !1037)
!6036 = !DILocation(line: 1299, column: 12, scope: !1037)
!6037 = !DILocation(line: 1299, column: 5, scope: !1037)
!6038 = !DILocation(line: 1305, column: 35, scope: !1040)
!6039 = !DILocation(line: 1307, column: 49, scope: !1040)
!6040 = !DILocation(line: 1307, column: 37, scope: !1040)
!6041 = !DILocation(line: 1307, column: 55, scope: !1040)
!6042 = !DILocation(line: 1307, column: 65, scope: !1040)
!6043 = !DILocation(line: 1307, column: 69, scope: !1040)
!6044 = !DILocation(line: 1307, column: 93, scope: !1040)
!6045 = !DILocation(line: 1307, column: 97, scope: !1040)
!6046 = !DILocation(line: 1307, column: 78, scope: !1040)
!6047 = !DILocation(line: 1307, column: 106, scope: !1040)
!6048 = !DILocation(line: 1307, column: 117, scope: !1040)
!6049 = !DILocation(line: 1307, column: 121, scope: !1040)
!6050 = !DILocation(line: 1307, column: 115, scope: !1040)
!6051 = !DILocation(line: 1307, column: 12, scope: !1040)
!6052 = !DILocation(line: 1307, column: 5, scope: !1040)
!6053 = !DILocation(line: 1382, column: 36, scope: !1065)
!6054 = !DILocation(line: 1384, column: 5, scope: !1065)
!6055 = !DILocation(line: 1384, column: 15, scope: !1065)
!6056 = !DILocation(line: 1385, column: 9, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !1065, file: !352, line: 1385, column: 9)
!6058 = !DILocation(line: 1385, column: 13, scope: !6057)
!6059 = !DILocation(line: 1385, column: 21, scope: !6057)
!6060 = !DILocation(line: 1385, column: 9, scope: !1065)
!6061 = !DILocation(line: 1386, column: 9, scope: !6057)
!6062 = !DILocation(line: 1388, column: 9, scope: !6063)
!6063 = distinct !DILexicalBlock(scope: !1065, file: !352, line: 1388, column: 9)
!6064 = !DILocation(line: 1388, column: 13, scope: !6063)
!6065 = !DILocation(line: 1388, column: 20, scope: !6063)
!6066 = !DILocation(line: 1388, column: 29, scope: !6063)
!6067 = !DILocation(line: 1388, column: 33, scope: !6063)
!6068 = !DILocation(line: 1388, column: 26, scope: !6063)
!6069 = !DILocation(line: 1388, column: 9, scope: !1065)
!6070 = !DILocation(line: 1389, column: 9, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !6063, file: !352, line: 1388, column: 40)
!6072 = !DILocation(line: 1389, column: 13, scope: !6071)
!6073 = !DILocation(line: 1389, column: 21, scope: !6071)
!6074 = !DILocation(line: 1390, column: 25, scope: !6071)
!6075 = !DILocation(line: 1390, column: 9, scope: !6071)
!6076 = !DILocation(line: 1392, column: 9, scope: !6071)
!6077 = !DILocation(line: 1397, column: 24, scope: !1065)
!6078 = !DILocation(line: 1397, column: 28, scope: !1065)
!6079 = !DILocation(line: 1397, column: 12, scope: !1065)
!6080 = !DILocation(line: 1397, column: 16, scope: !1065)
!6081 = !DILocation(line: 1397, column: 19, scope: !1065)
!6082 = !DILocation(line: 1397, column: 10, scope: !1065)
!6083 = !DILocation(line: 1398, column: 5, scope: !1065)
!6084 = !DILocation(line: 1398, column: 9, scope: !1065)
!6085 = !DILocation(line: 1398, column: 14, scope: !1065)
!6086 = !DILocation(line: 1399, column: 5, scope: !1065)
!6087 = !DILocation(line: 1399, column: 9, scope: !1065)
!6088 = !DILocation(line: 1399, column: 16, scope: !1065)
!6089 = !DILocation(line: 1400, column: 9, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !1065, file: !352, line: 1400, column: 9)
!6091 = !DILocation(line: 1400, column: 13, scope: !6090)
!6092 = !DILocation(line: 1400, column: 19, scope: !6090)
!6093 = !DILocation(line: 1400, column: 25, scope: !6090)
!6094 = !DILocation(line: 1400, column: 28, scope: !6095)
!6095 = !DILexicalBlockFile(scope: !6090, file: !352, discriminator: 1)
!6096 = !DILocation(line: 1400, column: 32, scope: !6090)
!6097 = !DILocation(line: 1400, column: 40, scope: !6090)
!6098 = !DILocation(line: 1400, column: 9, scope: !1065)
!6099 = !DILocation(line: 1402, column: 17, scope: !6100)
!6100 = distinct !DILexicalBlock(scope: !6090, file: !352, line: 1400, column: 45)
!6101 = !DILocation(line: 1402, column: 21, scope: !6100)
!6102 = !DILocation(line: 1402, column: 24, scope: !6100)
!6103 = !DILocation(line: 1402, column: 9, scope: !6100)
!6104 = !DILocation(line: 1402, column: 13, scope: !6100)
!6105 = !DILocation(line: 1402, column: 15, scope: !6100)
!6106 = !DILocation(line: 1403, column: 9, scope: !6100)
!6107 = !DILocation(line: 1403, column: 13, scope: !6100)
!6108 = !DILocation(line: 1403, column: 19, scope: !6100)
!6109 = !DILocation(line: 1404, column: 5, scope: !6100)
!6110 = !DILocation(line: 1405, column: 21, scope: !1065)
!6111 = !DILocation(line: 1405, column: 29, scope: !1065)
!6112 = !DILocation(line: 1405, column: 38, scope: !1065)
!6113 = !DILocation(line: 1406, column: 12, scope: !1065)
!6114 = !DILocation(line: 1406, column: 5, scope: !1065)
!6115 = !DILocation(line: 1407, column: 1, scope: !1065)
!6116 = !DILocation(line: 1410, column: 32, scope: !1069)
!6117 = !DILocation(line: 1410, column: 48, scope: !1069)
!6118 = !DILocation(line: 1410, column: 64, scope: !1069)
!6119 = !DILocation(line: 1412, column: 5, scope: !1069)
!6120 = !DILocation(line: 1412, column: 16, scope: !1069)
!6121 = !DILocation(line: 1412, column: 19, scope: !1069)
!6122 = !DILocation(line: 1413, column: 5, scope: !1069)
!6123 = !DILocation(line: 1413, column: 15, scope: !1069)
!6124 = !DILocation(line: 1414, column: 5, scope: !1069)
!6125 = !DILocation(line: 1414, column: 22, scope: !1069)
!6126 = !DILocation(line: 1415, column: 27, scope: !6127)
!6127 = distinct !DILexicalBlock(scope: !1069, file: !352, line: 1415, column: 9)
!6128 = !DILocation(line: 1415, column: 10, scope: !6127)
!6129 = !DILocation(line: 1415, column: 9, scope: !1069)
!6130 = !DILocation(line: 1416, column: 9, scope: !6127)
!6131 = !DILocation(line: 1419, column: 57, scope: !1069)
!6132 = !DILocation(line: 1419, column: 42, scope: !1069)
!6133 = !DILocation(line: 1419, column: 28, scope: !1069)
!6134 = !DILocation(line: 1419, column: 10, scope: !1069)
!6135 = !DILocation(line: 1419, column: 8, scope: !1069)
!6136 = !DILocation(line: 1420, column: 10, scope: !6137)
!6137 = distinct !DILexicalBlock(scope: !1069, file: !352, line: 1420, column: 9)
!6138 = !DILocation(line: 1420, column: 9, scope: !1069)
!6139 = !DILocation(line: 1421, column: 9, scope: !6137)
!6140 = !DILocation(line: 1423, column: 10, scope: !1081)
!6141 = !DILocation(line: 1423, column: 9, scope: !1081)
!6142 = !DILocation(line: 1423, column: 14, scope: !6143)
!6143 = !DILexicalBlockFile(scope: !6144, file: !352, discriminator: 2)
!6144 = !DILexicalBlockFile(scope: !1080, file: !352, discriminator: 1)
!6145 = !DILocation(line: 1423, column: 16, scope: !1080)
!6146 = !DILocation(line: 1423, column: 15, scope: !1080)
!6147 = !DILocation(line: 1423, column: 5, scope: !1081)
!6148 = !DILocation(line: 1424, column: 9, scope: !1079)
!6149 = !DILocation(line: 1424, column: 19, scope: !1079)
!6150 = !DILocation(line: 1424, column: 44, scope: !1079)
!6151 = !DILocation(line: 1424, column: 26, scope: !1079)
!6152 = !DILocation(line: 1425, column: 13, scope: !1085)
!6153 = !DILocation(line: 1425, column: 13, scope: !1079)
!6154 = !DILocation(line: 1426, column: 13, scope: !1084)
!6155 = !DILocation(line: 1426, column: 18, scope: !6156)
!6156 = !DILexicalBlockFile(scope: !1083, file: !352, discriminator: 1)
!6157 = !DILocation(line: 1426, column: 28, scope: !1083)
!6158 = !DILocation(line: 1426, column: 58, scope: !1083)
!6159 = !DILocation(line: 1426, column: 73, scope: !6160)
!6160 = distinct !DILexicalBlock(scope: !1083, file: !352, line: 1426, column: 70)
!6161 = !DILocation(line: 1426, column: 90, scope: !6160)
!6162 = !DILocation(line: 1426, column: 70, scope: !6160)
!6163 = !DILocation(line: 1426, column: 100, scope: !6160)
!6164 = !DILocation(line: 1426, column: 70, scope: !1083)
!6165 = !DILocation(line: 1426, column: 70, scope: !6166)
!6166 = !DILexicalBlockFile(scope: !1083, file: !352, discriminator: 2)
!6167 = !DILocation(line: 1426, column: 131, scope: !6168)
!6168 = !DILexicalBlockFile(scope: !6160, file: !352, discriminator: 3)
!6169 = !DILocation(line: 1426, column: 149, scope: !6160)
!6170 = !DILocation(line: 1426, column: 159, scope: !6160)
!6171 = !DILocation(line: 1426, column: 184, scope: !6160)
!6172 = !DILocation(line: 1426, column: 115, scope: !6160)
!6173 = !DILocation(line: 1426, column: 203, scope: !6174)
!6174 = !DILexicalBlockFile(scope: !1084, file: !352, discriminator: 4)
!6175 = !DILocation(line: 1426, column: 203, scope: !1083)
!6176 = !DILocation(line: 1426, column: 203, scope: !6177)
!6177 = !DILexicalBlockFile(scope: !1083, file: !352, discriminator: 5)
!6178 = !DILocation(line: 1427, column: 9, scope: !1084)
!6179 = !DILocation(line: 1428, column: 17, scope: !1089)
!6180 = !DILocation(line: 1428, column: 21, scope: !1089)
!6181 = !DILocation(line: 1428, column: 17, scope: !1090)
!6182 = !DILocation(line: 1429, column: 17, scope: !1088)
!6183 = !DILocation(line: 1429, column: 22, scope: !6184)
!6184 = !DILexicalBlockFile(scope: !1087, file: !352, discriminator: 1)
!6185 = !DILocation(line: 1429, column: 32, scope: !1087)
!6186 = !DILocation(line: 1429, column: 62, scope: !1087)
!6187 = !DILocation(line: 1429, column: 49, scope: !1087)
!6188 = !DILocation(line: 1429, column: 75, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !1087, file: !352, line: 1429, column: 72)
!6190 = !DILocation(line: 1429, column: 92, scope: !6189)
!6191 = !DILocation(line: 1429, column: 72, scope: !6189)
!6192 = !DILocation(line: 1429, column: 102, scope: !6189)
!6193 = !DILocation(line: 1429, column: 72, scope: !1087)
!6194 = !DILocation(line: 1429, column: 72, scope: !6195)
!6195 = !DILexicalBlockFile(scope: !1087, file: !352, discriminator: 2)
!6196 = !DILocation(line: 1429, column: 133, scope: !6197)
!6197 = !DILexicalBlockFile(scope: !6189, file: !352, discriminator: 3)
!6198 = !DILocation(line: 1429, column: 151, scope: !6189)
!6199 = !DILocation(line: 1429, column: 161, scope: !6189)
!6200 = !DILocation(line: 1429, column: 186, scope: !6189)
!6201 = !DILocation(line: 1429, column: 117, scope: !6189)
!6202 = !DILocation(line: 1429, column: 205, scope: !6203)
!6203 = !DILexicalBlockFile(scope: !1088, file: !352, discriminator: 4)
!6204 = !DILocation(line: 1429, column: 205, scope: !1087)
!6205 = !DILocation(line: 1429, column: 205, scope: !6206)
!6206 = !DILexicalBlockFile(scope: !1087, file: !352, discriminator: 5)
!6207 = !DILocation(line: 1430, column: 17, scope: !1088)
!6208 = !DILocation(line: 1432, column: 17, scope: !1089)
!6209 = !DILocation(line: 1434, column: 5, scope: !1080)
!6210 = !DILocation(line: 1434, column: 5, scope: !6144)
!6211 = !DILocation(line: 1434, column: 5, scope: !1079)
!6212 = !DILocation(line: 1423, column: 24, scope: !1080)
!6213 = !DILocation(line: 1423, column: 5, scope: !1080)
!6214 = !DILocation(line: 1435, column: 23, scope: !1069)
!6215 = !DILocation(line: 1435, column: 12, scope: !1069)
!6216 = !DILocation(line: 1435, column: 5, scope: !1069)
!6217 = !DILocation(line: 1436, column: 1, scope: !1069)
